(function ($hx_exports, $global) { "use strict"; var $hx_script = (function (exports, global) { // Generated by Haxe 4.1.5
(function ($hx_exports, $global) { "use strict";
$hx_exports["lime"] = $hx_exports["lime"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var flixel_util_IFlxDestroyable = function() { };
$hxClasses["flixel.util.IFlxDestroyable"] = flixel_util_IFlxDestroyable;
flixel_util_IFlxDestroyable.__name__ = "flixel.util.IFlxDestroyable";
flixel_util_IFlxDestroyable.__isInterface__ = true;
flixel_util_IFlxDestroyable.prototype = {
	destroy: null
	,__class__: flixel_util_IFlxDestroyable
};
var flixel_FlxBasic = function() {
	this.flixelType = 0;
	this.exists = true;
	this.alive = true;
	this.visible = true;
	this.active = true;
	this.ID = flixel_FlxBasic.idEnumerator++;
};
$hxClasses["flixel.FlxBasic"] = flixel_FlxBasic;
flixel_FlxBasic.__name__ = "flixel.FlxBasic";
flixel_FlxBasic.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_FlxBasic.prototype = {
	ID: null
	,active: null
	,visible: null
	,alive: null
	,exists: null
	,flixelType: null
	,_cameras: null
	,destroy: function() {
		this.set_exists(false);
		this._cameras = null;
	}
	,kill: function() {
		this.set_alive(false);
		this.set_exists(false);
	}
	,revive: function() {
		this.set_alive(true);
		this.set_exists(true);
	}
	,update: function(elapsed) {
	}
	,draw: function() {
	}
	,toString: function() {
		var value = this.active;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "active";
		_this.value = value;
		var value = this.visible;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "visible";
		_this1.value = value;
		var value = this.alive;
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "alive";
		_this2.value = value;
		var value = this.exists;
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "exists";
		_this3.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3]);
	}
	,set_visible: function(Value) {
		return this.visible = Value;
	}
	,set_active: function(Value) {
		return this.active = Value;
	}
	,set_exists: function(Value) {
		return this.exists = Value;
	}
	,set_alive: function(Value) {
		return this.alive = Value;
	}
	,get_camera: function() {
		if(this._cameras == null || this._cameras.length == 0) {
			return flixel_FlxCamera._defaultCameras[0];
		} else {
			return this._cameras[0];
		}
	}
	,set_camera: function(Value) {
		if(this._cameras == null) {
			this._cameras = [Value];
		} else {
			this._cameras[0] = Value;
		}
		return Value;
	}
	,get_cameras: function() {
		if(this._cameras == null) {
			return flixel_FlxCamera._defaultCameras;
		} else {
			return this._cameras;
		}
	}
	,set_cameras: function(Value) {
		return this._cameras = Value;
	}
	,__class__: flixel_FlxBasic
	,__properties__: {set_cameras:"set_cameras",get_cameras:"get_cameras",set_camera:"set_camera",get_camera:"get_camera",set_exists:"set_exists",set_alive:"set_alive",set_visible:"set_visible",set_active:"set_active"}
};
var flixel_util_IFlxPooled = function() { };
$hxClasses["flixel.util.IFlxPooled"] = flixel_util_IFlxPooled;
flixel_util_IFlxPooled.__name__ = "flixel.util.IFlxPooled";
flixel_util_IFlxPooled.__isInterface__ = true;
flixel_util_IFlxPooled.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_util_IFlxPooled.prototype = {
	put: null
	,_inPool: null
	,__class__: flixel_util_IFlxPooled
};
var flixel_util_IFlxPool = function() { };
$hxClasses["flixel.util.IFlxPool"] = flixel_util_IFlxPool;
flixel_util_IFlxPool.__name__ = "flixel.util.IFlxPool";
flixel_util_IFlxPool.__isInterface__ = true;
flixel_util_IFlxPool.prototype = {
	preAllocate: null
	,clear: null
	,__class__: flixel_util_IFlxPool
};
var flixel_util_FlxPool_$flixel_$math_$FlxRect = function(classObj) {
	this._count = 0;
	this._pool = [];
	this._class = classObj;
};
$hxClasses["flixel.util.FlxPool_flixel_math_FlxRect"] = flixel_util_FlxPool_$flixel_$math_$FlxRect;
flixel_util_FlxPool_$flixel_$math_$FlxRect.__name__ = "flixel.util.FlxPool_flixel_math_FlxRect";
flixel_util_FlxPool_$flixel_$math_$FlxRect.__interfaces__ = [flixel_util_IFlxPool];
flixel_util_FlxPool_$flixel_$math_$FlxRect.prototype = {
	_pool: null
	,_class: null
	,_count: null
	,get: function() {
		if(this._count == 0) {
			return Type.createInstance(this._class,[]);
		}
		return this._pool[--this._count];
	}
	,put: function(obj) {
		if(obj != null) {
			var i = this._pool.indexOf(obj);
			if(i == -1 || i >= this._count) {
				obj.destroy();
				this._pool[this._count++] = obj;
			}
		}
	}
	,putUnsafe: function(obj) {
		if(obj != null) {
			obj.destroy();
			this._pool[this._count++] = obj;
		}
	}
	,preAllocate: function(numObjects) {
		while(numObjects-- > 0) this._pool[this._count++] = Type.createInstance(this._class,[]);
	}
	,clear: function() {
		this._count = 0;
		var oldPool = this._pool;
		this._pool = [];
		return oldPool;
	}
	,get_length: function() {
		return this._count;
	}
	,__class__: flixel_util_FlxPool_$flixel_$math_$FlxRect
	,__properties__: {get_length:"get_length"}
};
var flixel_math_FlxRect = function(X,Y,Width,Height) {
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._inPool = false;
	this._weak = false;
	var X1 = X;
	var Y1 = Y;
	var Width1 = Width;
	var Height1 = Height;
	if(Height1 == null) {
		Height1 = 0;
	}
	if(Width1 == null) {
		Width1 = 0;
	}
	if(Y1 == null) {
		Y1 = 0;
	}
	if(X1 == null) {
		X1 = 0;
	}
	this.x = X1;
	this.y = Y1;
	this.width = Width1;
	this.height = Height1;
};
$hxClasses["flixel.math.FlxRect"] = flixel_math_FlxRect;
flixel_math_FlxRect.__name__ = "flixel.math.FlxRect";
flixel_math_FlxRect.__interfaces__ = [flixel_util_IFlxPooled];
flixel_math_FlxRect.__properties__ = {get_pool:"get_pool"};
flixel_math_FlxRect.get = function(X,Y,Width,Height) {
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var _this = flixel_math_FlxRect._pool.get();
	var X1 = X;
	var Y1 = Y;
	var Width1 = Width;
	var Height1 = Height;
	if(Height1 == null) {
		Height1 = 0;
	}
	if(Width1 == null) {
		Width1 = 0;
	}
	if(Y1 == null) {
		Y1 = 0;
	}
	if(X1 == null) {
		X1 = 0;
	}
	_this.x = X1;
	_this.y = Y1;
	_this.width = Width1;
	_this.height = Height1;
	var rect = _this;
	rect._inPool = false;
	return rect;
};
flixel_math_FlxRect.weak = function(X,Y,Width,Height) {
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var X1 = X;
	var Y1 = Y;
	var Width1 = Width;
	var Height1 = Height;
	if(Height1 == null) {
		Height1 = 0;
	}
	if(Width1 == null) {
		Width1 = 0;
	}
	if(Y1 == null) {
		Y1 = 0;
	}
	if(X1 == null) {
		X1 = 0;
	}
	var _this = flixel_math_FlxRect._pool.get();
	var X = X1;
	var Y = Y1;
	var Width = Width1;
	var Height = Height1;
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	_this.x = X;
	_this.y = Y;
	_this.width = Width;
	_this.height = Height;
	var rect = _this;
	rect._inPool = false;
	var rect1 = rect;
	rect1._weak = true;
	return rect1;
};
flixel_math_FlxRect.get_pool = function() {
	return flixel_math_FlxRect._pool;
};
flixel_math_FlxRect.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,_weak: null
	,_inPool: null
	,put: function() {
		if(!this._inPool) {
			this._inPool = true;
			this._weak = false;
			flixel_math_FlxRect._pool.putUnsafe(this);
		}
	}
	,putWeak: function() {
		if(this._weak) {
			if(!this._inPool) {
				this._inPool = true;
				this._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(this);
			}
		}
	}
	,setSize: function(Width,Height) {
		this.width = Width;
		this.height = Height;
		return this;
	}
	,setPosition: function(x,y) {
		this.x = x;
		this.y = y;
		return this;
	}
	,set: function(X,Y,Width,Height) {
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.x = X;
		this.y = Y;
		this.width = Width;
		this.height = Height;
		return this;
	}
	,copyFrom: function(Rect) {
		this.x = Rect.x;
		this.y = Rect.y;
		this.width = Rect.width;
		this.height = Rect.height;
		if(Rect._weak) {
			if(!Rect._inPool) {
				Rect._inPool = true;
				Rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(Rect);
			}
		}
		return this;
	}
	,copyTo: function(Rect) {
		Rect.x = this.x;
		Rect.y = this.y;
		Rect.width = this.width;
		Rect.height = this.height;
		if(Rect._weak) {
			if(!Rect._inPool) {
				Rect._inPool = true;
				Rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(Rect);
			}
		}
		return Rect;
	}
	,copyFromFlash: function(FlashRect) {
		this.x = FlashRect.x;
		this.y = FlashRect.y;
		this.width = FlashRect.width;
		this.height = FlashRect.height;
		return this;
	}
	,copyToFlash: function(FlashRect) {
		if(FlashRect == null) {
			FlashRect = new openfl_geom_Rectangle();
		}
		FlashRect.x = this.x;
		FlashRect.y = this.y;
		FlashRect.width = this.width;
		FlashRect.height = this.height;
		return FlashRect;
	}
	,overlaps: function(Rect) {
		var result = Rect.x + Rect.width > this.x && Rect.x < this.x + this.width && Rect.y + Rect.height > this.y && Rect.y < this.y + this.height;
		if(Rect._weak) {
			if(!Rect._inPool) {
				Rect._inPool = true;
				Rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(Rect);
			}
		}
		return result;
	}
	,containsPoint: function(Point) {
		var result = flixel_math_FlxMath.pointInFlxRect(Point.x,Point.y,this);
		if(Point._weak) {
			Point.put();
		}
		return result;
	}
	,union: function(Rect) {
		var minX = Math.min(this.x,Rect.x);
		var minY = Math.min(this.y,Rect.y);
		var maxX = Math.max(this.x + this.width,Rect.x + Rect.width);
		var maxY = Math.max(this.y + this.height,Rect.y + Rect.height);
		if(Rect._weak) {
			if(!Rect._inPool) {
				Rect._inPool = true;
				Rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(Rect);
			}
		}
		var X = minX;
		var Y = minY;
		var Width = maxX - minX;
		var Height = maxY - minY;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.x = X;
		this.y = Y;
		this.width = Width;
		this.height = Height;
		return this;
	}
	,floor: function() {
		this.x = Math.floor(this.x);
		this.y = Math.floor(this.y);
		this.width = Math.floor(this.width);
		this.height = Math.floor(this.height);
		return this;
	}
	,ceil: function() {
		this.x = Math.ceil(this.x);
		this.y = Math.ceil(this.y);
		this.width = Math.ceil(this.width);
		this.height = Math.ceil(this.height);
		return this;
	}
	,round: function() {
		this.x = Math.round(this.x);
		this.y = Math.round(this.y);
		this.width = Math.round(this.width);
		this.height = Math.round(this.height);
		return this;
	}
	,fromTwoPoints: function(Point1,Point2) {
		var minX = Math.min(Point1.x,Point2.x);
		var minY = Math.min(Point1.y,Point2.y);
		var maxX = Math.max(Point1.x,Point2.x);
		var maxY = Math.max(Point1.y,Point2.y);
		if(Point1._weak) {
			Point1.put();
		}
		if(Point2._weak) {
			Point2.put();
		}
		var X = minX;
		var Y = minY;
		var Width = maxX - minX;
		var Height = maxY - minY;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.x = X;
		this.y = Y;
		this.width = Width;
		this.height = Height;
		return this;
	}
	,unionWithPoint: function(Point) {
		var minX = Math.min(this.x,Point.x);
		var minY = Math.min(this.y,Point.y);
		var maxX = Math.max(this.x + this.width,Point.x);
		var maxY = Math.max(this.y + this.height,Point.y);
		if(Point._weak) {
			Point.put();
		}
		var X = minX;
		var Y = minY;
		var Width = maxX - minX;
		var Height = maxY - minY;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.x = X;
		this.y = Y;
		this.width = Width;
		this.height = Height;
		return this;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
		return this;
	}
	,destroy: function() {
	}
	,equals: function(rect) {
		var result = Math.abs(this.x - rect.x) <= 0.0000001 && Math.abs(this.y - rect.y) <= 0.0000001 && Math.abs(this.width - rect.width) <= 0.0000001 && Math.abs(this.height - rect.height) <= 0.0000001;
		if(rect._weak) {
			if(!rect._inPool) {
				rect._inPool = true;
				rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(rect);
			}
		}
		return result;
	}
	,intersection: function(rect,result) {
		if(result == null) {
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect1 = _this;
			rect1._inPool = false;
			result = rect1;
		}
		var x0 = this.x < rect.x ? rect.x : this.x;
		var x1 = this.x + this.width > rect.x + rect.width ? rect.x + rect.width : this.x + this.width;
		if(x1 <= x0) {
			if(rect._weak) {
				if(!rect._inPool) {
					rect._inPool = true;
					rect._weak = false;
					flixel_math_FlxRect._pool.putUnsafe(rect);
				}
			}
			return result;
		}
		var y0 = this.y < rect.y ? rect.y : this.y;
		var y1 = this.y + this.height > rect.y + rect.height ? rect.y + rect.height : this.y + this.height;
		if(y1 <= y0) {
			if(rect._weak) {
				if(!rect._inPool) {
					rect._inPool = true;
					rect._weak = false;
					flixel_math_FlxRect._pool.putUnsafe(rect);
				}
			}
			return result;
		}
		if(rect._weak) {
			if(!rect._inPool) {
				rect._inPool = true;
				rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(rect);
			}
		}
		var X = x0;
		var Y = y0;
		var Width = x1 - x0;
		var Height = y1 - y0;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		result.x = X;
		result.y = Y;
		result.width = Width;
		result.height = Height;
		return result;
	}
	,toString: function() {
		var value = this.x;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "x";
		_this.value = value;
		var value = this.y;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "y";
		_this1.value = value;
		var value = this.width;
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "w";
		_this2.value = value;
		var value = this.height;
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "h";
		_this3.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3]);
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(Value) {
		this.width -= Value - this.x;
		return this.x = Value;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(Value) {
		this.width = Value - this.x;
		return Value;
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(Value) {
		this.height -= Value - this.y;
		return this.y = Value;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(Value) {
		this.height = Value - this.y;
		return Value;
	}
	,get_isEmpty: function() {
		if(this.width != 0) {
			return this.height == 0;
		} else {
			return true;
		}
	}
	,__class__: flixel_math_FlxRect
	,__properties__: {get_isEmpty:"get_isEmpty",set_bottom:"set_bottom",get_bottom:"get_bottom",set_top:"set_top",get_top:"get_top",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left"}
};
var flixel_FlxObject = function(X,Y,Width,Height) {
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var _this = flixel_math_FlxRect._pool.get();
	_this.x = 0;
	_this.y = 0;
	_this.width = 0;
	_this.height = 0;
	_this._inPool = false;
	this._rect = _this;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this._point = point;
	this.path = null;
	this.collisonXDrag = true;
	this.allowCollisions = 4369;
	this.wasTouching = 0;
	this.touching = 0;
	this.health = 1;
	this.maxAngular = 10000;
	this.angularDrag = 0;
	this.angularAcceleration = 0;
	this.angularVelocity = 0;
	this.elasticity = 0;
	this.mass = 1;
	this.immovable = false;
	this.moves = true;
	this.angle = 0;
	this.pixelPerfectPosition = true;
	this.y = 0;
	this.x = 0;
	flixel_FlxBasic.call(this);
	this.set_x(X);
	this.set_y(Y);
	this.set_width(Width);
	this.set_height(Height);
	this.initVars();
};
$hxClasses["flixel.FlxObject"] = flixel_FlxObject;
flixel_FlxObject.__name__ = "flixel.FlxObject";
flixel_FlxObject.separate = function(Object1,Object2) {
	var separatedX = flixel_FlxObject.separateX(Object1,Object2);
	var separatedY = flixel_FlxObject.separateY(Object1,Object2);
	if(!separatedX) {
		return separatedY;
	} else {
		return true;
	}
};
flixel_FlxObject.updateTouchingFlags = function(Object1,Object2) {
	var touchingX = flixel_FlxObject.updateTouchingFlagsX(Object1,Object2);
	var touchingY = flixel_FlxObject.updateTouchingFlagsY(Object1,Object2);
	if(!touchingX) {
		return touchingY;
	} else {
		return true;
	}
};
flixel_FlxObject.computeOverlapX = function(Object1,Object2,checkMaxOverlap) {
	if(checkMaxOverlap == null) {
		checkMaxOverlap = true;
	}
	var overlap = 0;
	var obj1delta = Object1.x - Object1.last.x;
	var obj2delta = Object2.x - Object2.last.x;
	if(obj1delta != obj2delta) {
		var obj1deltaAbs = obj1delta > 0 ? obj1delta : -obj1delta;
		var obj2deltaAbs = obj2delta > 0 ? obj2delta : -obj2delta;
		var _this = flixel_FlxObject._firstSeparateFlxRect;
		var X = Object1.x - (obj1delta > 0 ? obj1delta : 0);
		var Y = Object1.last.y;
		var Width = Object1.get_width() + obj1deltaAbs;
		var Height = Object1.get_height();
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var obj1rect = _this;
		var _this = flixel_FlxObject._secondSeparateFlxRect;
		var X = Object2.x - (obj2delta > 0 ? obj2delta : 0);
		var Y = Object2.last.y;
		var Width = Object2.get_width() + obj2deltaAbs;
		var Height = Object2.get_height();
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var obj2rect = _this;
		if(obj1rect.x + obj1rect.width > obj2rect.x && obj1rect.x < obj2rect.x + obj2rect.width && obj1rect.y + obj1rect.height > obj2rect.y && obj1rect.y < obj2rect.y + obj2rect.height) {
			var maxOverlap = checkMaxOverlap ? obj1deltaAbs + obj2deltaAbs + flixel_FlxObject.SEPARATE_BIAS : 0;
			if(obj1delta > obj2delta) {
				overlap = Object1.x + Object1.get_width() - Object2.x;
				if(checkMaxOverlap && overlap > maxOverlap || (Object1.allowCollisions & 16) == 0 || (Object2.allowCollisions & 1) == 0) {
					overlap = 0;
				} else {
					Object1.touching |= 16;
					Object2.touching |= 1;
				}
			} else if(obj1delta < obj2delta) {
				overlap = Object1.x - Object2.get_width() - Object2.x;
				if(checkMaxOverlap && -overlap > maxOverlap || (Object1.allowCollisions & 1) == 0 || (Object2.allowCollisions & 16) == 0) {
					overlap = 0;
				} else {
					Object1.touching |= 1;
					Object2.touching |= 16;
				}
			}
		}
	}
	return overlap;
};
flixel_FlxObject.separateX = function(Object1,Object2) {
	var obj1immovable = Object1.immovable;
	var obj2immovable = Object2.immovable;
	if(obj1immovable && obj2immovable) {
		return false;
	}
	if(Object1.flixelType == 3) {
		var tilemap = Object1;
		return tilemap.overlapsWithCallback(Object2,flixel_FlxObject.separateX);
	}
	if(Object2.flixelType == 3) {
		var tilemap = Object2;
		return tilemap.overlapsWithCallback(Object1,flixel_FlxObject.separateX,true);
	}
	var overlap = flixel_FlxObject.computeOverlapX(Object1,Object2);
	if(overlap != 0) {
		var obj1v = Object1.velocity.x;
		var obj2v = Object2.velocity.x;
		if(!obj1immovable && !obj2immovable) {
			overlap *= 0.5;
			Object1.set_x(Object1.x - overlap);
			var _g = Object2;
			_g.set_x(_g.x + overlap);
			var obj1velocity = Math.sqrt(obj2v * obj2v * Object2.mass / Object1.mass) * (obj2v > 0 ? 1 : -1);
			var obj2velocity = Math.sqrt(obj1v * obj1v * Object1.mass / Object2.mass) * (obj1v > 0 ? 1 : -1);
			var average = (obj1velocity + obj2velocity) * 0.5;
			obj1velocity -= average;
			obj2velocity -= average;
			Object1.velocity.set_x(average + obj1velocity * Object1.elasticity);
			Object2.velocity.set_x(average + obj2velocity * Object2.elasticity);
		} else if(!obj1immovable) {
			Object1.set_x(Object1.x - overlap);
			Object1.velocity.set_x(obj2v - obj1v * Object1.elasticity);
		} else if(!obj2immovable) {
			var _g = Object2;
			_g.set_x(_g.x + overlap);
			Object2.velocity.set_x(obj1v - obj2v * Object2.elasticity);
		}
		return true;
	}
	return false;
};
flixel_FlxObject.updateTouchingFlagsX = function(Object1,Object2) {
	if(Object1.flixelType == 3) {
		var tilemap = Object1;
		return tilemap.overlapsWithCallback(Object2,flixel_FlxObject.updateTouchingFlagsX);
	}
	if(Object2.flixelType == 3) {
		var tilemap = Object2;
		return tilemap.overlapsWithCallback(Object1,flixel_FlxObject.updateTouchingFlagsX,true);
	}
	return flixel_FlxObject.computeOverlapX(Object1,Object2,false) != 0;
};
flixel_FlxObject.computeOverlapY = function(Object1,Object2,checkMaxOverlap) {
	if(checkMaxOverlap == null) {
		checkMaxOverlap = true;
	}
	var overlap = 0;
	var obj1delta = Object1.y - Object1.last.y;
	var obj2delta = Object2.y - Object2.last.y;
	if(obj1delta != obj2delta) {
		var obj1deltaAbs = obj1delta > 0 ? obj1delta : -obj1delta;
		var obj2deltaAbs = obj2delta > 0 ? obj2delta : -obj2delta;
		var _this = flixel_FlxObject._firstSeparateFlxRect;
		var X = Object1.x;
		var Y = Object1.y - (obj1delta > 0 ? obj1delta : 0);
		var Width = Object1.get_width();
		var Height = Object1.get_height() + obj1deltaAbs;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var obj1rect = _this;
		var _this = flixel_FlxObject._secondSeparateFlxRect;
		var X = Object2.x;
		var Y = Object2.y - (obj2delta > 0 ? obj2delta : 0);
		var Width = Object2.get_width();
		var Height = Object2.get_height() + obj2deltaAbs;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var obj2rect = _this;
		if(obj1rect.x + obj1rect.width > obj2rect.x && obj1rect.x < obj2rect.x + obj2rect.width && obj1rect.y + obj1rect.height > obj2rect.y && obj1rect.y < obj2rect.y + obj2rect.height) {
			var maxOverlap = checkMaxOverlap ? obj1deltaAbs + obj2deltaAbs + flixel_FlxObject.SEPARATE_BIAS : 0;
			if(obj1delta > obj2delta) {
				overlap = Object1.y + Object1.get_height() - Object2.y;
				if(checkMaxOverlap && overlap > maxOverlap || (Object1.allowCollisions & 4096) == 0 || (Object2.allowCollisions & 256) == 0) {
					overlap = 0;
				} else {
					Object1.touching |= 4096;
					Object2.touching |= 256;
				}
			} else if(obj1delta < obj2delta) {
				overlap = Object1.y - Object2.get_height() - Object2.y;
				if(checkMaxOverlap && -overlap > maxOverlap || (Object1.allowCollisions & 256) == 0 || (Object2.allowCollisions & 4096) == 0) {
					overlap = 0;
				} else {
					Object1.touching |= 256;
					Object2.touching |= 4096;
				}
			}
		}
	}
	return overlap;
};
flixel_FlxObject.separateY = function(Object1,Object2) {
	var obj1immovable = Object1.immovable;
	var obj2immovable = Object2.immovable;
	if(obj1immovable && obj2immovable) {
		return false;
	}
	if(Object1.flixelType == 3) {
		var tilemap = Object1;
		return tilemap.overlapsWithCallback(Object2,flixel_FlxObject.separateY);
	}
	if(Object2.flixelType == 3) {
		var tilemap = Object2;
		return tilemap.overlapsWithCallback(Object1,flixel_FlxObject.separateY,true);
	}
	var overlap = flixel_FlxObject.computeOverlapY(Object1,Object2);
	if(overlap != 0) {
		var obj1delta = Object1.y - Object1.last.y;
		var obj2delta = Object2.y - Object2.last.y;
		var obj1v = Object1.velocity.y;
		var obj2v = Object2.velocity.y;
		if(!obj1immovable && !obj2immovable) {
			overlap *= 0.5;
			Object1.set_y(Object1.y - overlap);
			var _g = Object2;
			_g.set_y(_g.y + overlap);
			var obj1velocity = Math.sqrt(obj2v * obj2v * Object2.mass / Object1.mass) * (obj2v > 0 ? 1 : -1);
			var obj2velocity = Math.sqrt(obj1v * obj1v * Object1.mass / Object2.mass) * (obj1v > 0 ? 1 : -1);
			var average = (obj1velocity + obj2velocity) * 0.5;
			obj1velocity -= average;
			obj2velocity -= average;
			Object1.velocity.set_y(average + obj1velocity * Object1.elasticity);
			Object2.velocity.set_y(average + obj2velocity * Object2.elasticity);
		} else if(!obj1immovable) {
			Object1.set_y(Object1.y - overlap);
			Object1.velocity.set_y(obj2v - obj1v * Object1.elasticity);
			if(Object1.collisonXDrag && Object2.active && Object2.moves && obj1delta > obj2delta) {
				var _g = Object1;
				_g.set_x(_g.x + (Object2.x - Object2.last.x));
			}
		} else if(!obj2immovable) {
			var _g = Object2;
			_g.set_y(_g.y + overlap);
			Object2.velocity.set_y(obj1v - obj2v * Object2.elasticity);
			if(Object2.collisonXDrag && Object1.active && Object1.moves && obj1delta < obj2delta) {
				var _g = Object2;
				_g.set_x(_g.x + (Object1.x - Object1.last.x));
			}
		}
		return true;
	}
	return false;
};
flixel_FlxObject.updateTouchingFlagsY = function(Object1,Object2) {
	if(Object1.flixelType == 3) {
		var tilemap = Object1;
		return tilemap.overlapsWithCallback(Object2,flixel_FlxObject.updateTouchingFlagsY);
	}
	if(Object2.flixelType == 3) {
		var tilemap = Object2;
		return tilemap.overlapsWithCallback(Object1,flixel_FlxObject.updateTouchingFlagsY,true);
	}
	return flixel_FlxObject.computeOverlapY(Object1,Object2,false) != 0;
};
flixel_FlxObject.__super__ = flixel_FlxBasic;
flixel_FlxObject.prototype = $extend(flixel_FlxBasic.prototype,{
	x: null
	,y: null
	,width: null
	,height: null
	,pixelPerfectRender: null
	,pixelPerfectPosition: null
	,angle: null
	,moves: null
	,immovable: null
	,scrollFactor: null
	,velocity: null
	,acceleration: null
	,drag: null
	,maxVelocity: null
	,last: null
	,mass: null
	,elasticity: null
	,angularVelocity: null
	,angularAcceleration: null
	,angularDrag: null
	,maxAngular: null
	,health: null
	,touching: null
	,wasTouching: null
	,allowCollisions: null
	,collisonXDrag: null
	,path: null
	,_point: null
	,_rect: null
	,initVars: function() {
		this.flixelType = 1;
		var X = this.x;
		var Y = this.y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.last = point;
		var X = 1;
		var Y = 1;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.scrollFactor = point;
		this.pixelPerfectPosition = flixel_FlxObject.defaultPixelPerfectPosition;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.velocity = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.acceleration = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.drag = point;
		var X = 10000;
		var Y = 10000;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.maxVelocity = point;
	}
	,initMotionVars: function() {
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.velocity = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.acceleration = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.drag = point;
		var X = 10000;
		var Y = 10000;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.maxVelocity = point;
	}
	,destroy: function() {
		flixel_FlxBasic.prototype.destroy.call(this);
		this.velocity = flixel_util_FlxDestroyUtil.put(this.velocity);
		this.acceleration = flixel_util_FlxDestroyUtil.put(this.acceleration);
		this.drag = flixel_util_FlxDestroyUtil.put(this.drag);
		this.maxVelocity = flixel_util_FlxDestroyUtil.put(this.maxVelocity);
		this.scrollFactor = flixel_util_FlxDestroyUtil.put(this.scrollFactor);
		this.last = flixel_util_FlxDestroyUtil.put(this.last);
		this._point = flixel_util_FlxDestroyUtil.put(this._point);
		this._rect = flixel_util_FlxDestroyUtil.put(this._rect);
	}
	,update: function(elapsed) {
		this.last.set(this.x,this.y);
		if(this.path != null && this.path.active) {
			this.path.update(elapsed);
		}
		if(this.moves) {
			this.updateMotion(elapsed);
		}
		this.wasTouching = this.touching;
		this.touching = 0;
	}
	,updateMotion: function(elapsed) {
		var velocityDelta = 0.5 * (flixel_math_FlxVelocity.computeVelocity(this.angularVelocity,this.angularAcceleration,this.angularDrag,this.maxAngular,elapsed) - this.angularVelocity);
		this.angularVelocity += velocityDelta;
		var _g = this;
		_g.set_angle(_g.angle + this.angularVelocity * elapsed);
		this.angularVelocity += velocityDelta;
		velocityDelta = 0.5 * (flixel_math_FlxVelocity.computeVelocity(this.velocity.x,this.acceleration.x,this.drag.x,this.maxVelocity.x,elapsed) - this.velocity.x);
		var _g = this.velocity;
		_g.set_x(_g.x + velocityDelta);
		var delta = this.velocity.x * elapsed;
		var _g = this.velocity;
		_g.set_x(_g.x + velocityDelta);
		var _g = this;
		_g.set_x(_g.x + delta);
		velocityDelta = 0.5 * (flixel_math_FlxVelocity.computeVelocity(this.velocity.y,this.acceleration.y,this.drag.y,this.maxVelocity.y,elapsed) - this.velocity.y);
		var _g = this.velocity;
		_g.set_y(_g.y + velocityDelta);
		delta = this.velocity.y * elapsed;
		var _g = this.velocity;
		_g.set_y(_g.y + velocityDelta);
		var _g = this;
		_g.set_y(_g.y + delta);
	}
	,draw: function() {
	}
	,overlaps: function(ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		var group = flixel_group_FlxTypedGroup.resolveGroup(ObjectOrGroup);
		if(group != null) {
			return flixel_group_FlxTypedGroup.overlaps($bind(this,this.overlapsCallback),group,0,0,InScreenSpace,Camera);
		}
		if(ObjectOrGroup.flixelType == 3) {
			var tilemap = ObjectOrGroup;
			return tilemap.overlaps(this,InScreenSpace,Camera);
		}
		var object = ObjectOrGroup;
		if(!InScreenSpace) {
			if(object.x + object.get_width() > this.x && object.x < this.x + this.get_width() && object.y + object.get_height() > this.y) {
				return object.y < this.y + this.get_height();
			} else {
				return false;
			}
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		var objectScreenPos = object.getScreenPosition(null,Camera);
		this.getScreenPosition(this._point,Camera);
		if(objectScreenPos.x + object.get_width() > this._point.x && objectScreenPos.x < this._point.x + this.get_width() && objectScreenPos.y + object.get_height() > this._point.y) {
			return objectScreenPos.y < this._point.y + this.get_height();
		} else {
			return false;
		}
	}
	,overlapsCallback: function(ObjectOrGroup,X,Y,InScreenSpace,Camera) {
		return this.overlaps(ObjectOrGroup,InScreenSpace,Camera);
	}
	,overlapsAt: function(X,Y,ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		var group = flixel_group_FlxTypedGroup.resolveGroup(ObjectOrGroup);
		if(group != null) {
			return flixel_group_FlxTypedGroup.overlaps($bind(this,this.overlapsAtCallback),group,X,Y,InScreenSpace,Camera);
		}
		if(ObjectOrGroup.flixelType == 3) {
			var tilemap = ObjectOrGroup;
			return tilemap.overlapsAt(tilemap.x - (X - this.x),tilemap.y - (Y - this.y),this,InScreenSpace,Camera);
		}
		var object = ObjectOrGroup;
		if(!InScreenSpace) {
			if(object.x + object.get_width() > X && object.x < X + this.get_width() && object.y + object.get_height() > Y) {
				return object.y < Y + this.get_height();
			} else {
				return false;
			}
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		var objectScreenPos = object.getScreenPosition(null,Camera);
		this.getScreenPosition(this._point,Camera);
		if(objectScreenPos.x + object.get_width() > this._point.x && objectScreenPos.x < this._point.x + this.get_width() && objectScreenPos.y + object.get_height() > this._point.y) {
			return objectScreenPos.y < this._point.y + this.get_height();
		} else {
			return false;
		}
	}
	,overlapsAtCallback: function(ObjectOrGroup,X,Y,InScreenSpace,Camera) {
		return this.overlapsAt(X,Y,ObjectOrGroup,InScreenSpace,Camera);
	}
	,overlapsPoint: function(point,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		if(!InScreenSpace) {
			if(point.x >= this.x && point.x < this.x + this.get_width() && point.y >= this.y) {
				return point.y < this.y + this.get_height();
			} else {
				return false;
			}
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		var xPos = point.x - Camera.scroll.x;
		var yPos = point.y - Camera.scroll.y;
		this.getScreenPosition(this._point,Camera);
		if(point._weak) {
			point.put();
		}
		if(xPos >= this._point.x && xPos < this._point.x + this.get_width() && yPos >= this._point.y) {
			return yPos < this._point.y + this.get_height();
		} else {
			return false;
		}
	}
	,inWorldBounds: function() {
		var tmp;
		if(this.x + this.get_width() > flixel_FlxG.worldBounds.x) {
			var _this = flixel_FlxG.worldBounds;
			tmp = this.x < _this.x + _this.width;
		} else {
			tmp = false;
		}
		if(tmp && this.y + this.get_height() > flixel_FlxG.worldBounds.y) {
			var _this = flixel_FlxG.worldBounds;
			return this.y < _this.y + _this.height;
		} else {
			return false;
		}
	}
	,getScreenPosition: function(point,Camera) {
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		point.set(this.x,this.y);
		if(this.pixelPerfectPosition) {
			point.set_x(Math.floor(point.x));
			point.set_y(Math.floor(point.y));
		}
		var X = Camera.scroll.x * this.scrollFactor.x;
		var Y = Camera.scroll.y * this.scrollFactor.y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _g = point;
		_g.set_x(_g.x - X);
		var _g = point;
		_g.set_y(_g.y - Y);
		return point;
	}
	,getPosition: function(point) {
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		return point.set(this.x,this.y);
	}
	,getMidpoint: function(point) {
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		return point.set(this.x + this.get_width() * 0.5,this.y + this.get_height() * 0.5);
	}
	,getHitbox: function(rect) {
		if(rect == null) {
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect1 = _this;
			rect1._inPool = false;
			rect = rect1;
		}
		var X = this.x;
		var Y = this.y;
		var Width = this.get_width();
		var Height = this.get_height();
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		rect.x = X;
		rect.y = Y;
		rect.width = Width;
		rect.height = Height;
		return rect;
	}
	,reset: function(X,Y) {
		this.touching = 0;
		this.wasTouching = 0;
		this.setPosition(X,Y);
		this.last.set(this.x,this.y);
		this.velocity.set();
		this.revive();
	}
	,isOnScreen: function(Camera) {
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		this.getScreenPosition(this._point,Camera);
		var point = this._point;
		var width = this.get_width();
		var height = this.get_height();
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 0;
		}
		if(point.x + width > Camera.viewOffsetX && point.x < Camera.viewOffsetWidth && point.y + height > Camera.viewOffsetY) {
			return point.y < Camera.viewOffsetHeight;
		} else {
			return false;
		}
	}
	,isPixelPerfectRender: function(Camera) {
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		if(this.pixelPerfectRender == null) {
			return Camera.pixelPerfectRender;
		} else {
			return this.pixelPerfectRender;
		}
	}
	,isTouching: function(Direction) {
		return (this.touching & Direction) > 0;
	}
	,justTouched: function(Direction) {
		if((this.touching & Direction) > 0) {
			return (this.wasTouching & Direction) <= 0;
		} else {
			return false;
		}
	}
	,hurt: function(Damage) {
		this.health -= Damage;
		if(this.health <= 0) {
			this.kill();
		}
	}
	,screenCenter: function(axes) {
		if(axes == null) {
			axes = flixel_util_FlxAxes.XY;
		}
		if(axes != flixel_util_FlxAxes.Y) {
			this.set_x(flixel_FlxG.width / 2 - this.get_width() / 2);
		}
		if(axes != flixel_util_FlxAxes.X) {
			this.set_y(flixel_FlxG.height / 2 - this.get_height() / 2);
		}
		return this;
	}
	,setPosition: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.set_x(X);
		this.set_y(Y);
	}
	,setSize: function(Width,Height) {
		this.set_width(Width);
		this.set_height(Height);
	}
	,getBoundingBox: function(camera) {
		this.getScreenPosition(this._point,camera);
		var _this = this._rect;
		var X = this._point.x;
		var Y = this._point.y;
		var Width = this.get_width();
		var Height = this.get_height();
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		this._rect = camera.transformRect(this._rect);
		if(this.isPixelPerfectRender(camera)) {
			var _this = this._rect;
			_this.x = Math.floor(_this.x);
			_this.y = Math.floor(_this.y);
			_this.width = Math.floor(_this.width);
			_this.height = Math.floor(_this.height);
		}
		return this._rect;
	}
	,toString: function() {
		var value = this.x;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "x";
		_this.value = value;
		var value = this.y;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "y";
		_this1.value = value;
		var value = this.get_width();
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "w";
		_this2.value = value;
		var value = this.get_height();
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "h";
		_this3.value = value;
		var value = this.visible;
		var _this4 = flixel_util_LabelValuePair._pool.get();
		_this4.label = "visible";
		_this4.value = value;
		var value = this.velocity;
		var _this5 = flixel_util_LabelValuePair._pool.get();
		_this5.label = "velocity";
		_this5.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3,_this4,_this5]);
	}
	,set_x: function(NewX) {
		return this.x = NewX;
	}
	,set_y: function(NewY) {
		return this.y = NewY;
	}
	,set_width: function(Width) {
		return this.width = Width;
	}
	,set_height: function(Height) {
		return this.height = Height;
	}
	,get_width: function() {
		return this.width;
	}
	,get_height: function() {
		return this.height;
	}
	,get_solid: function() {
		return (this.allowCollisions & 4369) > 0;
	}
	,set_solid: function(Solid) {
		this.set_allowCollisions(Solid ? 4369 : 0);
		return Solid;
	}
	,set_angle: function(Value) {
		return this.angle = Value;
	}
	,set_moves: function(Value) {
		return this.moves = Value;
	}
	,set_immovable: function(Value) {
		return this.immovable = Value;
	}
	,set_pixelPerfectRender: function(Value) {
		return this.pixelPerfectRender = Value;
	}
	,set_allowCollisions: function(Value) {
		return this.allowCollisions = Value;
	}
	,set_path: function(path) {
		if(this.path == path) {
			return path;
		}
		if(this.path != null) {
			this.path.object = null;
		}
		if(path != null) {
			path.object = this;
		}
		return this.path = path;
	}
	,__class__: flixel_FlxObject
	,__properties__: $extend(flixel_FlxBasic.prototype.__properties__,{set_path:"set_path",set_allowCollisions:"set_allowCollisions",set_solid:"set_solid",get_solid:"get_solid",set_immovable:"set_immovable",set_moves:"set_moves",set_angle:"set_angle",set_pixelPerfectRender:"set_pixelPerfectRender",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",set_x:"set_x"})
});
var flixel_FlxSprite = function(X,Y,SimpleGraphic) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._facingFlip = new haxe_ds_IntMap();
	this._angleChanged = true;
	this._cosAngle = 1;
	this._sinAngle = 0;
	this._facingVerticalMult = 1;
	this._facingHorizontalMult = 1;
	this.useColorTransform = false;
	this.color = 16777215;
	this.flipY = false;
	this.flipX = false;
	this.facing = 16;
	this.alpha = 1.0;
	this.bakedRotationAngle = 0;
	this.numFrames = 0;
	this.frameHeight = 0;
	this.frameWidth = 0;
	this.dirty = true;
	this.antialiasing = false;
	this.useFramePixels = true;
	flixel_FlxObject.call(this,X,Y);
	this.set_useFramePixels(flixel_FlxG.renderBlit);
	if(SimpleGraphic != null) {
		this.loadGraphic(SimpleGraphic);
	}
};
$hxClasses["flixel.FlxSprite"] = flixel_FlxSprite;
flixel_FlxSprite.__name__ = "flixel.FlxSprite";
flixel_FlxSprite.__super__ = flixel_FlxObject;
flixel_FlxSprite.prototype = $extend(flixel_FlxObject.prototype,{
	animation: null
	,framePixels: null
	,useFramePixels: null
	,antialiasing: null
	,dirty: null
	,frame: null
	,frameWidth: null
	,frameHeight: null
	,numFrames: null
	,frames: null
	,graphic: null
	,bakedRotationAngle: null
	,alpha: null
	,facing: null
	,flipX: null
	,flipY: null
	,origin: null
	,offset: null
	,scale: null
	,blend: null
	,color: null
	,colorTransform: null
	,useColorTransform: null
	,clipRect: null
	,shader: null
	,_frame: null
	,_frameGraphic: null
	,_facingHorizontalMult: null
	,_facingVerticalMult: null
	,_flashPoint: null
	,_flashRect: null
	,_flashRect2: null
	,_flashPointZero: null
	,_matrix: null
	,_halfSize: null
	,_sinAngle: null
	,_cosAngle: null
	,_angleChanged: null
	,_facingFlip: null
	,initVars: function() {
		flixel_FlxObject.prototype.initVars.call(this);
		this.animation = new flixel_animation_FlxAnimationController(this);
		this._flashPoint = new openfl_geom_Point();
		this._flashRect = new openfl_geom_Rectangle();
		this._flashRect2 = new openfl_geom_Rectangle();
		this._flashPointZero = new openfl_geom_Point();
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.offset = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.origin = point;
		var X = 1;
		var Y = 1;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.scale = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this._halfSize = point;
		this._matrix = new flixel_math_FlxMatrix();
		this.colorTransform = new openfl_geom_ColorTransform();
	}
	,destroy: function() {
		flixel_FlxObject.prototype.destroy.call(this);
		this.animation = flixel_util_FlxDestroyUtil.destroy(this.animation);
		this.offset = flixel_util_FlxDestroyUtil.put(this.offset);
		this.origin = flixel_util_FlxDestroyUtil.put(this.origin);
		this.scale = flixel_util_FlxDestroyUtil.put(this.scale);
		this._halfSize = flixel_util_FlxDestroyUtil.put(this._halfSize);
		this.framePixels = flixel_util_FlxDestroyUtil.dispose(this.framePixels);
		this._flashPoint = null;
		this._flashRect = null;
		this._flashRect2 = null;
		this._flashPointZero = null;
		this._matrix = null;
		this.colorTransform = null;
		this.set_blend(null);
		this.set_frames(null);
		this.set_graphic(null);
		this._frame = flixel_util_FlxDestroyUtil.destroy(this._frame);
		this._frameGraphic = flixel_util_FlxDestroyUtil.destroy(this._frameGraphic);
		this.shader = null;
	}
	,clone: function() {
		return new flixel_FlxSprite().loadGraphicFromSprite(this);
	}
	,loadGraphicFromSprite: function(Sprite) {
		this.set_frames(Sprite.frames);
		this.bakedRotationAngle = Sprite.bakedRotationAngle;
		if(this.bakedRotationAngle > 0) {
			this.set_width(Sprite.get_width());
			this.set_height(Sprite.get_height());
			this.centerOffsets();
		}
		this.set_antialiasing(Sprite.antialiasing);
		this.animation.copyFrom(Sprite.animation);
		this.graphicLoaded();
		this.set_clipRect(Sprite.clipRect);
		return this;
	}
	,loadGraphic: function(Graphic,Animated,Width,Height,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Animated == null) {
			Animated = false;
		}
		var graph = flixel_FlxG.bitmap.add(Graphic,Unique,Key);
		if(graph == null) {
			return this;
		}
		if(Width == 0) {
			Width = Animated ? graph.height : graph.width;
			if(Width > graph.width) {
				Width = graph.width;
			}
		}
		if(Height == 0) {
			Height = Animated ? Width : graph.height;
			if(Height > graph.height) {
				Height = graph.height;
			}
		}
		if(Animated) {
			var X = Width;
			var Y = Height;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			this.set_frames(flixel_graphics_frames_FlxTileFrames.fromGraphic(graph,point));
		} else {
			this.set_frames(graph.get_imageFrame());
		}
		return this;
	}
	,loadRotatedGraphic: function(Graphic,Rotations,Frame,AntiAliasing,AutoBuffer,Key) {
		if(AutoBuffer == null) {
			AutoBuffer = false;
		}
		if(AntiAliasing == null) {
			AntiAliasing = false;
		}
		if(Frame == null) {
			Frame = -1;
		}
		if(Rotations == null) {
			Rotations = 16;
		}
		var brushGraphic = flixel_FlxG.bitmap.add(Graphic,false,Key);
		if(brushGraphic == null) {
			return this;
		}
		var brush = brushGraphic.bitmap;
		var key = brushGraphic.key;
		if(Frame >= 0) {
			var brushSize = brush.height;
			var framesNum = brush.width / brushSize | 0;
			if(framesNum <= Frame) {
				Frame %= framesNum;
			}
			key += ":" + Frame;
			var full = brush;
			brush = new openfl_display_BitmapData(brushSize,brushSize,true,0);
			this._flashRect.setTo(Frame * brushSize,0,brushSize,brushSize);
			brush.copyPixels(full,this._flashRect,this._flashPointZero);
		}
		key += ":" + Rotations + ":" + (AutoBuffer == null ? "null" : "" + AutoBuffer);
		var tempGraph = flixel_FlxG.bitmap._cache.h[key];
		if(tempGraph == null) {
			var bitmap = flixel_util_FlxBitmapDataUtil.generateRotations(brush,Rotations,AntiAliasing,AutoBuffer);
			tempGraph = flixel_graphics_FlxGraphic.fromBitmapData(bitmap,false,key);
		}
		var max = brush.height > brush.width ? brush.height : brush.width;
		if(AutoBuffer) {
			max = max * 1.5 | 0;
		}
		var X = max;
		var Y = max;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.set_frames(flixel_graphics_frames_FlxTileFrames.fromGraphic(tempGraph,point));
		if(AutoBuffer) {
			this.set_width(brush.width);
			this.set_height(brush.height);
			this.centerOffsets();
		}
		this.bakedRotationAngle = 360 / Rotations;
		this.animation.createPrerotated();
		return this;
	}
	,loadRotatedFrame: function(Frame,Rotations,AntiAliasing,AutoBuffer) {
		if(AutoBuffer == null) {
			AutoBuffer = false;
		}
		if(AntiAliasing == null) {
			AntiAliasing = false;
		}
		if(Rotations == null) {
			Rotations = 16;
		}
		var key = Frame.parent.key;
		if(Frame.name != null) {
			key += ":" + Frame.name;
		} else {
			var _this = Frame.frame;
			var value = _this.x;
			var _this1 = flixel_util_LabelValuePair._pool.get();
			_this1.label = "x";
			_this1.value = value;
			var value = _this.y;
			var _this2 = flixel_util_LabelValuePair._pool.get();
			_this2.label = "y";
			_this2.value = value;
			var value = _this.width;
			var _this3 = flixel_util_LabelValuePair._pool.get();
			_this3.label = "w";
			_this3.value = value;
			var value = _this.height;
			var _this = flixel_util_LabelValuePair._pool.get();
			_this.label = "h";
			_this.value = value;
			key += ":" + flixel_util_FlxStringUtil.getDebugString([_this1,_this2,_this3,_this]);
		}
		var graphic = flixel_FlxG.bitmap._cache.h[key];
		if(graphic == null) {
			graphic = flixel_graphics_FlxGraphic.fromBitmapData(Frame.paint(),false,key);
		}
		return this.loadRotatedGraphic(graphic,Rotations,-1,AntiAliasing,AutoBuffer);
	}
	,makeGraphic: function(Width,Height,Color,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(Color == null) {
			Color = -1;
		}
		var graph = flixel_FlxG.bitmap.create(Width,Height,Color,Unique,Key);
		this.set_frames(graph.get_imageFrame());
		return this;
	}
	,graphicLoaded: function() {
	}
	,resetSize: function() {
		this._flashRect.x = 0;
		this._flashRect.y = 0;
		this._flashRect.width = this.frameWidth;
		this._flashRect.height = this.frameHeight;
	}
	,resetFrameSize: function() {
		if(this.frame != null) {
			this.frameWidth = this.frame.sourceSize.x | 0;
			this.frameHeight = this.frame.sourceSize.y | 0;
		}
		this._halfSize.set(0.5 * this.frameWidth,0.5 * this.frameHeight);
		this._flashRect.x = 0;
		this._flashRect.y = 0;
		this._flashRect.width = this.frameWidth;
		this._flashRect.height = this.frameHeight;
	}
	,resetSizeFromFrame: function() {
		this.set_width(this.frameWidth);
		this.set_height(this.frameHeight);
	}
	,resetFrame: function() {
		this.set_frame(this.frame);
	}
	,setGraphicSize: function(Width,Height) {
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Width <= 0 && Height <= 0) {
			return;
		}
		var newScaleX = Width / this.frameWidth;
		var newScaleY = Height / this.frameHeight;
		this.scale.set(newScaleX,newScaleY);
		if(Width <= 0) {
			this.scale.set_x(newScaleY);
		} else if(Height <= 0) {
			this.scale.set_y(newScaleX);
		}
	}
	,updateHitbox: function() {
		this.set_width(Math.abs(this.scale.x) * this.frameWidth);
		this.set_height(Math.abs(this.scale.y) * this.frameHeight);
		this.offset.set(-0.5 * (this.get_width() - this.frameWidth),-0.5 * (this.get_height() - this.frameHeight));
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
	}
	,resetHelpers: function() {
		if(this.frame != null) {
			this.frameWidth = this.frame.sourceSize.x | 0;
			this.frameHeight = this.frame.sourceSize.y | 0;
		}
		this._halfSize.set(0.5 * this.frameWidth,0.5 * this.frameHeight);
		this._flashRect.x = 0;
		this._flashRect.y = 0;
		this._flashRect.width = this.frameWidth;
		this._flashRect.height = this.frameHeight;
		this.set_width(this.frameWidth);
		this.set_height(this.frameHeight);
		this._flashRect2.x = 0;
		this._flashRect2.y = 0;
		if(this.graphic != null) {
			this._flashRect2.width = this.graphic.width;
			this._flashRect2.height = this.graphic.height;
		}
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
		if(flixel_FlxG.renderBlit) {
			this.dirty = true;
			this.updateFramePixels();
		}
	}
	,update: function(elapsed) {
		flixel_FlxObject.prototype.update.call(this,elapsed);
		this.updateAnimation(elapsed);
	}
	,updateAnimation: function(elapsed) {
		this.animation.update(elapsed);
	}
	,checkEmptyFrame: function() {
		if(this._frame == null) {
			this.loadGraphic("flixel/images/logo/default.png");
		}
	}
	,draw: function() {
		this.checkEmptyFrame();
		if(this.alpha == 0 || this._frame.type == 2) {
			return;
		}
		if(this.dirty) {
			this.calcFrame(this.useFramePixels);
		}
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(!camera.visible || !camera.exists || !this.isOnScreen(camera)) {
				continue;
			}
			this.getScreenPosition(this._point,camera).subtractPoint(this.offset);
			if(this.isSimpleRender(camera)) {
				this.drawSimple(camera);
			} else {
				this.drawComplex(camera);
			}
		}
	}
	,drawSimple: function(camera) {
		if(this.isPixelPerfectRender(camera)) {
			var _this = this._point;
			_this.set_x(Math.floor(_this.x));
			_this.set_y(Math.floor(_this.y));
		}
		var _this = this._point;
		var FlashPoint = this._flashPoint;
		if(FlashPoint == null) {
			FlashPoint = new openfl_geom_Point();
		}
		FlashPoint.x = _this.x;
		FlashPoint.y = _this.y;
		camera.copyPixels(this._frame,this.framePixels,this._flashRect,this._flashPoint,this.colorTransform,this.blend,this.antialiasing);
	}
	,drawComplex: function(camera) {
		var doFlipX = this.flipX != this._frame.flipX;
		var doFlipY = this.flipY != this._frame.flipY;
		this._frame.prepareMatrix(this._matrix,0,this.animation._curAnim != null ? doFlipX != this.animation._curAnim.flipX : doFlipX,this.animation._curAnim != null ? doFlipY != this.animation._curAnim.flipY : doFlipY);
		this._matrix.translate(-this.origin.x,-this.origin.y);
		this._matrix.scale(this.scale.x,this.scale.y);
		if(this.bakedRotationAngle <= 0) {
			if(this._angleChanged) {
				var radians = this.angle * (Math.PI / 180);
				this._sinAngle = Math.sin(radians);
				this._cosAngle = Math.cos(radians);
				this._angleChanged = false;
			}
			if(this.angle != 0) {
				var _this = this._matrix;
				var cos = this._cosAngle;
				var sin = this._sinAngle;
				var a1 = _this.a * cos - _this.b * sin;
				_this.b = _this.a * sin + _this.b * cos;
				_this.a = a1;
				var c1 = _this.c * cos - _this.d * sin;
				_this.d = _this.c * sin + _this.d * cos;
				_this.c = c1;
				var tx1 = _this.tx * cos - _this.ty * sin;
				_this.ty = _this.tx * sin + _this.ty * cos;
				_this.tx = tx1;
			}
		}
		var _this = this._point;
		var X = this.origin.x;
		var Y = this.origin.y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _g = _this;
		_g.set_x(_g.x + X);
		var _g = _this;
		_g.set_y(_g.y + Y);
		this._matrix.translate(this._point.x,this._point.y);
		if(this.isPixelPerfectRender(camera)) {
			this._matrix.tx = Math.floor(this._matrix.tx);
			this._matrix.ty = Math.floor(this._matrix.ty);
		}
		camera.drawPixels(this._frame,this.framePixels,this._matrix,this.colorTransform,this.blend,this.antialiasing,this.shader);
	}
	,stamp: function(Brush,X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		Brush.drawFrame();
		if(this.graphic == null || Brush.graphic == null) {
			throw haxe_Exception.thrown("Cannot stamp to or from a FlxSprite with no graphics.");
		}
		var bitmapData = Brush.framePixels;
		if(this.isSimpleRenderBlit()) {
			this._flashPoint.x = X + this.frame.frame.x;
			this._flashPoint.y = Y + this.frame.frame.y;
			this._flashRect2.width = bitmapData.width;
			this._flashRect2.height = bitmapData.height;
			this.graphic.bitmap.copyPixels(bitmapData,this._flashRect2,this._flashPoint,null,null,true);
			this._flashRect2.width = this.graphic.bitmap.width;
			this._flashRect2.height = this.graphic.bitmap.height;
		} else {
			this._matrix.identity();
			this._matrix.translate(-Brush.origin.x,-Brush.origin.y);
			this._matrix.scale(Brush.scale.x,Brush.scale.y);
			if(Brush.angle != 0) {
				this._matrix.rotate(Brush.angle * (Math.PI / 180));
			}
			this._matrix.translate(X + this.frame.frame.x + Brush.origin.x,Y + this.frame.frame.y + Brush.origin.y);
			var brushBlend = Brush.blend;
			this.graphic.bitmap.draw(bitmapData,this._matrix,null,brushBlend,null,Brush.antialiasing);
		}
		if(flixel_FlxG.renderBlit) {
			this.dirty = true;
			this.calcFrame();
		}
	}
	,drawFrame: function(Force) {
		if(Force == null) {
			Force = false;
		}
		if(flixel_FlxG.renderBlit) {
			if(Force || this.dirty) {
				this.dirty = true;
				this.calcFrame();
			}
		} else {
			this.dirty = true;
			this.calcFrame(true);
		}
	}
	,centerOffsets: function(AdjustPosition) {
		if(AdjustPosition == null) {
			AdjustPosition = false;
		}
		this.offset.set_x((this.frameWidth - this.get_width()) * 0.5);
		this.offset.set_y((this.frameHeight - this.get_height()) * 0.5);
		if(AdjustPosition) {
			var _g = this;
			_g.set_x(_g.x + this.offset.x);
			var _g = this;
			_g.set_y(_g.y + this.offset.y);
		}
	}
	,centerOrigin: function() {
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
	}
	,replaceColor: function(Color,NewColor,FetchPositions) {
		if(FetchPositions == null) {
			FetchPositions = false;
		}
		var positions = flixel_util_FlxBitmapDataUtil.replaceColor(this.graphic.bitmap,Color,NewColor,FetchPositions);
		if(positions != null) {
			this.dirty = true;
		}
		return positions;
	}
	,setColorTransform: function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
		if(alphaOffset == null) {
			alphaOffset = 0;
		}
		if(blueOffset == null) {
			blueOffset = 0;
		}
		if(greenOffset == null) {
			greenOffset = 0;
		}
		if(redOffset == null) {
			redOffset = 0;
		}
		if(alphaMultiplier == null) {
			alphaMultiplier = 1.0;
		}
		if(blueMultiplier == null) {
			blueMultiplier = 1.0;
		}
		if(greenMultiplier == null) {
			greenMultiplier = 1.0;
		}
		if(redMultiplier == null) {
			redMultiplier = 1.0;
		}
		var color = flixel_util_FlxColor._new();
		var Alpha = 1;
		if(Alpha == null) {
			Alpha = 1;
		}
		var Value = Math.round(redMultiplier * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(greenMultiplier * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(blueMultiplier * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		this.set_color(color & 16777215);
		this.set_alpha(alphaMultiplier);
		flixel_util_FlxColorTransformUtil.setMultipliers(this.colorTransform,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
		flixel_util_FlxColorTransformUtil.setOffsets(this.colorTransform,redOffset,greenOffset,blueOffset,alphaOffset);
		this.useColorTransform = this.alpha != 1 || this.color != 16777215 || flixel_util_FlxColorTransformUtil.hasRGBOffsets(this.colorTransform);
		this.dirty = true;
	}
	,updateColorTransform: function() {
		if(this.colorTransform == null) {
			this.colorTransform = new openfl_geom_ColorTransform();
		}
		this.useColorTransform = this.alpha != 1 || this.color != 16777215;
		if(this.useColorTransform) {
			flixel_util_FlxColorTransformUtil.setMultipliers(this.colorTransform,(this.color >> 16 & 255) / 255,(this.color >> 8 & 255) / 255,(this.color & 255) / 255,this.alpha);
		} else {
			flixel_util_FlxColorTransformUtil.setMultipliers(this.colorTransform,1,1,1,1);
		}
		this.dirty = true;
	}
	,pixelsOverlapPoint: function(point,Mask,Camera) {
		if(Mask == null) {
			Mask = 255;
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		this.getScreenPosition(this._point,Camera);
		this._point.subtractPoint(this.offset);
		this._flashPoint.x = point.x - Camera.scroll.x - this._point.x;
		this._flashPoint.y = point.y - Camera.scroll.y - this._point.y;
		if(point._weak) {
			point.put();
		}
		if(this._flashPoint.x < 0 || this._flashPoint.x > this.frameWidth || this._flashPoint.y < 0 || this._flashPoint.y > this.frameHeight) {
			return false;
		} else {
			var frameData = this.updateFramePixels();
			var pixelColor = frameData.getPixel32(this._flashPoint.x | 0,this._flashPoint.y | 0);
			return (pixelColor >> 24 & 255) * this.alpha >= Mask;
		}
	}
	,calcFrame: function(RunOnCpp) {
		if(RunOnCpp == null) {
			RunOnCpp = false;
		}
		this.checkEmptyFrame();
		if(flixel_FlxG.renderTile && !RunOnCpp) {
			return;
		}
		this.updateFramePixels();
	}
	,updateFramePixels: function() {
		if(this._frame == null || !this.dirty) {
			return this.framePixels;
		}
		if(flixel_FlxG.renderTile && this._frameGraphic != null) {
			this.dirty = false;
			return this.framePixels;
		}
		var doFlipX = this.flipX != this._frame.flipX;
		var doFlipX1 = this.animation._curAnim != null ? doFlipX != this.animation._curAnim.flipX : doFlipX;
		var doFlipY = this.flipY != this._frame.flipY;
		var doFlipY1 = this.animation._curAnim != null ? doFlipY != this.animation._curAnim.flipY : doFlipY;
		if(!doFlipX1 && !doFlipY1 && this._frame.type == 0) {
			this.framePixels = this._frame.paint(this.framePixels,this._flashPointZero,false,true);
		} else {
			this.framePixels = this._frame.paintRotatedAndFlipped(this.framePixels,this._flashPointZero,0,doFlipX1,doFlipY1,false,true);
		}
		if(this.useColorTransform) {
			this.framePixels.colorTransform(this._flashRect,this.colorTransform);
		}
		if(flixel_FlxG.renderTile && this.useFramePixels) {
			this._frameGraphic = flixel_util_FlxDestroyUtil.destroy(this._frameGraphic);
			this._frameGraphic = flixel_graphics_FlxGraphic.fromBitmapData(this.framePixels,false,null,false);
			this._frame = this._frameGraphic.get_imageFrame().get_frame().copyTo(this._frame);
		}
		this.dirty = false;
		return this.framePixels;
	}
	,getGraphicMidpoint: function(point) {
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		return point.set(this.x + this.frameWidth * 0.5,this.y + this.frameHeight * 0.5);
	}
	,isOnScreen: function(Camera) {
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		var minX = this.x - this.offset.x - Camera.scroll.x * this.scrollFactor.x;
		var minY = this.y - this.offset.y - Camera.scroll.y * this.scrollFactor.y;
		if((this.angle == 0 || this.bakedRotationAngle > 0) && this.scale.x == 1 && this.scale.y == 1) {
			this._point.set(minX,minY);
			var point = this._point;
			var width = this.frameWidth;
			var height = this.frameHeight;
			if(height == null) {
				height = 0;
			}
			if(width == null) {
				width = 0;
			}
			if(point.x + width > Camera.viewOffsetX && point.x < Camera.viewOffsetWidth && point.y + height > Camera.viewOffsetY) {
				return point.y < Camera.viewOffsetHeight;
			} else {
				return false;
			}
		}
		var radiusX = this._halfSize.x;
		var radiusY = this._halfSize.y;
		var ox = this.origin.x;
		if(ox != radiusX) {
			var x1 = Math.abs(ox);
			var x2 = Math.abs(this.frameWidth - ox);
			radiusX = Math.max(x2,x1);
		}
		var oy = this.origin.y;
		if(oy != radiusY) {
			var y1 = Math.abs(oy);
			var y2 = Math.abs(this.frameHeight - oy);
			radiusY = Math.max(y2,y1);
		}
		radiusX *= Math.abs(this.scale.x);
		radiusY *= Math.abs(this.scale.y);
		var radius = Math.max(radiusX,radiusY);
		radius *= 1.41421356237;
		minX += ox - radius;
		minY += oy - radius;
		var doubleRadius = 2 * radius;
		this._point.set(minX,minY);
		var point = this._point;
		var width = doubleRadius;
		var height = doubleRadius;
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 0;
		}
		if(point.x + width > Camera.viewOffsetX && point.x < Camera.viewOffsetWidth && point.y + height > Camera.viewOffsetY) {
			return point.y < Camera.viewOffsetHeight;
		} else {
			return false;
		}
	}
	,isSimpleRender: function(camera) {
		if(flixel_FlxG.renderTile) {
			return false;
		}
		return this.isSimpleRenderBlit(camera);
	}
	,isSimpleRenderBlit: function(camera) {
		var result = (this.angle == 0 || this.bakedRotationAngle > 0) && this.scale.x == 1 && this.scale.y == 1 && this.blend == null;
		result = result && (camera != null ? this.isPixelPerfectRender(camera) : this.pixelPerfectRender);
		return result;
	}
	,setFacingFlip: function(Direction,FlipX,FlipY) {
		this._facingFlip.h[Direction] = { x : FlipX, y : FlipY};
	}
	,setFrames: function(Frames,saveAnimations) {
		if(saveAnimations == null) {
			saveAnimations = true;
		}
		if(saveAnimations) {
			var animations = this.animation._animations;
			var reverse = false;
			var index = 0;
			var frameIndex = this.animation.frameIndex;
			var currName = null;
			if(this.animation._curAnim != null) {
				reverse = this.animation._curAnim.reversed;
				index = this.animation._curAnim.curFrame;
				currName = this.animation._curAnim.name;
			}
			this.animation._animations = null;
			this.set_frames(Frames);
			this.set_frame(this.frames.frames[frameIndex]);
			this.animation._animations = animations;
			if(currName != null) {
				this.animation.play(currName,false,reverse,index);
			}
		} else {
			this.set_frames(Frames);
		}
		return this;
	}
	,get_pixels: function() {
		if(this.graphic == null) {
			return null;
		} else {
			return this.graphic.bitmap;
		}
	}
	,set_pixels: function(Pixels) {
		var key = flixel_FlxG.bitmap.findKeyForBitmap(Pixels);
		if(key == null) {
			key = flixel_FlxG.bitmap.getUniqueKey();
			this.set_graphic(flixel_FlxG.bitmap.add(Pixels,false,key));
		} else {
			this.set_graphic(flixel_FlxG.bitmap._cache.h[key]);
		}
		this.set_frames(this.graphic.get_imageFrame());
		return Pixels;
	}
	,set_frame: function(Value) {
		this.frame = Value;
		if(this.frame != null) {
			if(this.frame != null) {
				this.frameWidth = this.frame.sourceSize.x | 0;
				this.frameHeight = this.frame.sourceSize.y | 0;
			}
			this._halfSize.set(0.5 * this.frameWidth,0.5 * this.frameHeight);
			this._flashRect.x = 0;
			this._flashRect.y = 0;
			this._flashRect.width = this.frameWidth;
			this._flashRect.height = this.frameHeight;
			this.dirty = true;
		} else if(this.frames != null && this.frames.frames != null && this.numFrames > 0) {
			this.frame = this.frames.frames[0];
			this.dirty = true;
		} else {
			return null;
		}
		if(flixel_FlxG.renderTile) {
			this._frameGraphic = flixel_util_FlxDestroyUtil.destroy(this._frameGraphic);
		}
		if(this.clipRect != null) {
			this._frame = this.frame.clipTo(this.clipRect,this._frame);
		} else {
			this._frame = this.frame.copyTo(this._frame);
		}
		return this.frame;
	}
	,set_facing: function(Direction) {
		var flip = this._facingFlip.h[Direction];
		if(flip != null) {
			this.set_flipX(flip.x);
			this.set_flipY(flip.y);
		}
		return this.facing = Direction;
	}
	,set_alpha: function(Alpha) {
		if(this.alpha == Alpha) {
			return Alpha;
		}
		var lowerBound = Alpha < 0 ? 0 : Alpha;
		this.alpha = lowerBound > 1 ? 1 : lowerBound;
		this.updateColorTransform();
		return this.alpha;
	}
	,set_color: function(Color) {
		if(this.color == Color) {
			return Color;
		}
		this.color = Color;
		this.updateColorTransform();
		return this.color;
	}
	,set_angle: function(Value) {
		var newAngle = this.angle != Value;
		var ret = flixel_FlxObject.prototype.set_angle.call(this,Value);
		if(newAngle) {
			this._angleChanged = true;
			this.animation.update(0);
		}
		return ret;
	}
	,updateTrig: function() {
		if(this._angleChanged) {
			var radians = this.angle * (Math.PI / 180);
			this._sinAngle = Math.sin(radians);
			this._cosAngle = Math.cos(radians);
			this._angleChanged = false;
		}
	}
	,set_blend: function(Value) {
		return this.blend = Value;
	}
	,set_graphic: function(Value) {
		var oldGraphic = this.graphic;
		if(this.graphic != Value && Value != null) {
			var _g = Value;
			_g.set_useCount(_g.get_useCount() + 1);
		}
		if(oldGraphic != null && oldGraphic != Value) {
			var _g = oldGraphic;
			_g.set_useCount(_g.get_useCount() - 1);
		}
		return this.graphic = Value;
	}
	,set_clipRect: function(rect) {
		if(rect != null) {
			rect.x = Math.round(rect.x);
			rect.y = Math.round(rect.y);
			rect.width = Math.round(rect.width);
			rect.height = Math.round(rect.height);
			this.clipRect = rect;
		} else {
			this.clipRect = null;
		}
		if(this.frames != null) {
			this.set_frame(this.frames.frames[this.animation.frameIndex]);
		}
		return rect;
	}
	,set_frames: function(Frames) {
		if(this.animation != null) {
			this.animation.destroyAnimations();
		}
		if(Frames != null) {
			this.set_graphic(Frames.parent);
			this.frames = Frames;
			this.set_frame(this.frames.frames[0]);
			this.numFrames = this.frames.frames.length;
			this.resetHelpers();
			this.bakedRotationAngle = 0;
			this.animation.set_frameIndex(0);
			this.graphicLoaded();
		} else {
			this.frames = null;
			this.set_frame(null);
			this.set_graphic(null);
		}
		return Frames;
	}
	,set_flipX: function(Value) {
		if(flixel_FlxG.renderTile) {
			this._facingHorizontalMult = Value ? -1 : 1;
		}
		this.dirty = this.flipX != Value || this.dirty;
		return this.flipX = Value;
	}
	,set_flipY: function(Value) {
		if(flixel_FlxG.renderTile) {
			this._facingVerticalMult = Value ? -1 : 1;
		}
		this.dirty = this.flipY != Value || this.dirty;
		return this.flipY = Value;
	}
	,set_antialiasing: function(value) {
		return this.antialiasing = value;
	}
	,set_useFramePixels: function(value) {
		if(flixel_FlxG.renderTile) {
			if(value != this.useFramePixels) {
				this.useFramePixels = value;
				this.set_frame(this.frame);
				if(value) {
					this.updateFramePixels();
				}
			}
			return value;
		} else {
			this.useFramePixels = true;
			return true;
		}
	}
	,checkFlipX: function() {
		var doFlipX = this.flipX != this._frame.flipX;
		if(this.animation._curAnim != null) {
			return doFlipX != this.animation._curAnim.flipX;
		}
		return doFlipX;
	}
	,checkFlipY: function() {
		var doFlipY = this.flipY != this._frame.flipY;
		if(this.animation._curAnim != null) {
			return doFlipY != this.animation._curAnim.flipY;
		}
		return doFlipY;
	}
	,__class__: flixel_FlxSprite
	,__properties__: $extend(flixel_FlxObject.prototype.__properties__,{set_clipRect:"set_clipRect",set_color:"set_color",set_blend:"set_blend",set_flipY:"set_flipY",set_flipX:"set_flipX",set_facing:"set_facing",set_alpha:"set_alpha",set_graphic:"set_graphic",set_frames:"set_frames",set_frame:"set_frame",set_pixels:"set_pixels",get_pixels:"get_pixels",set_antialiasing:"set_antialiasing",set_useFramePixels:"set_useFramePixels"})
});
var flixel_group_FlxTypedSpriteGroup = function(X,Y,MaxSize) {
	if(MaxSize == null) {
		MaxSize = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._skipTransformChildren = false;
	this.directAlpha = false;
	flixel_FlxSprite.call(this,X,Y);
	this.group = new flixel_group_FlxTypedGroup(MaxSize);
	this._sprites = this.group.members;
};
$hxClasses["flixel.group.FlxTypedSpriteGroup"] = flixel_group_FlxTypedSpriteGroup;
flixel_group_FlxTypedSpriteGroup.__name__ = "flixel.group.FlxTypedSpriteGroup";
flixel_group_FlxTypedSpriteGroup.__super__ = flixel_FlxSprite;
flixel_group_FlxTypedSpriteGroup.prototype = $extend(flixel_FlxSprite.prototype,{
	transformChildren_flixel_math_FlxRect: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,transformChildren_flash_display_BlendMode: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,transformChildren_flixel_FlxCamera: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,multiTransformChildren_Float: function(FunctionArray,ValueArray) {
		if(this.group == null) {
			return;
		}
		var numProps = FunctionArray.length;
		if(numProps > ValueArray.length) {
			return;
		}
		var lambda;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists) {
				var _g2 = 0;
				var _g3 = numProps;
				while(_g2 < _g3) {
					var i = _g2++;
					lambda = FunctionArray[i];
					lambda(sprite,ValueArray[i]);
				}
			}
		}
	}
	,transformChildren_flixel_math_FlxPoint: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,transformChildren_Int: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,transformChildren_Array_flixel_FlxCamera: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,transformChildren_Bool: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,transformChildren_Float: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,group: null
	,directAlpha: null
	,_skipTransformChildren: null
	,_sprites: null
	,initVars: function() {
		this.flixelType = 4;
		this.offset = new flixel_math_FlxCallbackPoint($bind(this,this.offsetCallback));
		this.origin = new flixel_math_FlxCallbackPoint($bind(this,this.originCallback));
		this.scale = new flixel_math_FlxCallbackPoint($bind(this,this.scaleCallback));
		this.scrollFactor = new flixel_math_FlxCallbackPoint($bind(this,this.scrollFactorCallback));
		this.scale.set(1,1);
		this.scrollFactor.set(1,1);
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.velocity = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.acceleration = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.drag = point;
		var X = 10000;
		var Y = 10000;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.maxVelocity = point;
	}
	,destroy: function() {
		this.offset = flixel_util_FlxDestroyUtil.destroy(this.offset);
		this.origin = flixel_util_FlxDestroyUtil.destroy(this.origin);
		this.scale = flixel_util_FlxDestroyUtil.destroy(this.scale);
		this.scrollFactor = flixel_util_FlxDestroyUtil.destroy(this.scrollFactor);
		this.group = flixel_util_FlxDestroyUtil.destroy(this.group);
		this._sprites = null;
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,clone: function() {
		var newGroup = new flixel_group_FlxTypedSpriteGroup(this.x,this.y,this.group.maxSize);
		var _g = 0;
		var _g1 = this.group.members;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				newGroup.add(sprite.clone());
			}
		}
		return newGroup;
	}
	,isOnScreen: function(Camera) {
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists && sprite.visible && sprite.isOnScreen(Camera)) {
				return true;
			}
		}
		return false;
	}
	,overlapsPoint: function(point,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		var result = false;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists && sprite.visible) {
				result = result || sprite.overlapsPoint(point,InScreenSpace,Camera);
			}
		}
		return result;
	}
	,pixelsOverlapPoint: function(point,Mask,Camera) {
		if(Mask == null) {
			Mask = 255;
		}
		var result = false;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists && sprite.visible) {
				result = result || sprite.pixelsOverlapPoint(point,Mask,Camera);
			}
		}
		return result;
	}
	,update: function(elapsed) {
		this.group.update(elapsed);
		if(this.moves) {
			this.updateMotion(elapsed);
		}
	}
	,draw: function() {
		this.group.draw();
	}
	,replaceColor: function(Color,NewColor,FetchPositions) {
		if(FetchPositions == null) {
			FetchPositions = false;
		}
		var positions = null;
		if(FetchPositions) {
			positions = [];
		}
		var spritePositions;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				spritePositions = sprite.replaceColor(Color,NewColor,FetchPositions);
				if(FetchPositions) {
					positions = positions.concat(spritePositions);
				}
			}
		}
		return positions;
	}
	,add: function(Sprite) {
		this.preAdd(Sprite);
		return this.group.add(Sprite);
	}
	,insert: function(Position,Sprite) {
		this.preAdd(Sprite);
		return this.group.insert(Position,Sprite);
	}
	,preAdd: function(Sprite) {
		var sprite = Sprite;
		var _g = sprite;
		_g.set_x(_g.x + this.x);
		var _g = sprite;
		_g.set_y(_g.y + this.y);
		var _g = sprite;
		_g.set_alpha(_g.alpha * this.alpha);
		var _this = sprite.scrollFactor;
		var point = this.scrollFactor;
		_this.set_x(point.x);
		_this.set_y(point.y);
		if(point._weak) {
			point.put();
		}
		sprite.set_cameras(this._cameras);
		if(this.clipRect != null) {
			var ClipRect = this.clipRect;
			if(ClipRect == null) {
				sprite.set_clipRect(null);
			} else {
				var X = ClipRect.x - sprite.x + this.x;
				var Y = ClipRect.y - sprite.y + this.y;
				var Width = ClipRect.width;
				var Height = ClipRect.height;
				if(Height == null) {
					Height = 0;
				}
				if(Width == null) {
					Width = 0;
				}
				if(Y == null) {
					Y = 0;
				}
				if(X == null) {
					X = 0;
				}
				var _this = flixel_math_FlxRect._pool.get();
				var X1 = X;
				var Y1 = Y;
				var Width1 = Width;
				var Height1 = Height;
				if(Height1 == null) {
					Height1 = 0;
				}
				if(Width1 == null) {
					Width1 = 0;
				}
				if(Y1 == null) {
					Y1 = 0;
				}
				if(X1 == null) {
					X1 = 0;
				}
				_this.x = X1;
				_this.y = Y1;
				_this.width = Width1;
				_this.height = Height1;
				var rect = _this;
				rect._inPool = false;
				sprite.set_clipRect(rect);
			}
		}
	}
	,recycle: function(ObjectClass,ObjectFactory,Force,Revive) {
		if(Revive == null) {
			Revive = true;
		}
		if(Force == null) {
			Force = false;
		}
		return this.group.recycle(ObjectClass,ObjectFactory,Force,Revive);
	}
	,remove: function(Sprite,Splice) {
		if(Splice == null) {
			Splice = false;
		}
		var sprite = Sprite;
		var _g = sprite;
		_g.set_x(_g.x - this.x);
		var _g = sprite;
		_g.set_y(_g.y - this.y);
		sprite.set_cameras(null);
		return this.group.remove(Sprite,Splice);
	}
	,replace: function(OldObject,NewObject) {
		return this.group.replace(OldObject,NewObject);
	}
	,sort: function(Function1,Order) {
		if(Order == null) {
			Order = -1;
		}
		var Order1 = Order;
		if(Order1 == null) {
			Order1 = -1;
		}
		var _g = Function1;
		var a1 = Order1;
		var tmp = function(a2,a3) {
			return _g(a1,a2,a3);
		};
		this.group.members.sort(tmp);
	}
	,getFirstAvailable: function(ObjectClass,Force) {
		if(Force == null) {
			Force = false;
		}
		return this.group.getFirstAvailable(ObjectClass,Force);
	}
	,getFirstNull: function() {
		return this.group.getFirstNull();
	}
	,getFirstExisting: function() {
		return this.group.getFirstExisting();
	}
	,getFirstAlive: function() {
		return this.group.getFirstAlive();
	}
	,getFirstDead: function() {
		return this.group.getFirstDead();
	}
	,countLiving: function() {
		return this.group.countLiving();
	}
	,countDead: function() {
		return this.group.countDead();
	}
	,getRandom: function(StartIndex,Length) {
		if(Length == null) {
			Length = 0;
		}
		if(StartIndex == null) {
			StartIndex = 0;
		}
		return this.group.getRandom(StartIndex,Length);
	}
	,iterator: function(filter) {
		return new flixel_group_FlxTypedGroupIterator(this.group.members,filter);
	}
	,forEach: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		this.group.forEach(Function1,Recurse);
	}
	,forEachAlive: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		this.group.forEachAlive(Function1,Recurse);
	}
	,forEachDead: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		this.group.forEachDead(Function1,Recurse);
	}
	,forEachExists: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		this.group.forEachExists(Function1,Recurse);
	}
	,forEachOfType: function(ObjectClass,Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		this.group.forEachOfType(ObjectClass,Function1,Recurse);
	}
	,clear: function() {
		this.group.clear();
	}
	,kill: function() {
		flixel_FlxSprite.prototype.kill.call(this);
		this.group.kill();
	}
	,revive: function() {
		flixel_FlxSprite.prototype.revive.call(this);
		this.group.revive();
	}
	,reset: function(X,Y) {
		this.revive();
		this.setPosition(X,Y);
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				sprite.reset(X,Y);
			}
		}
	}
	,setPosition: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var dx = X - this.x;
		var dy = Y - this.y;
		this.multiTransformChildren_Float([$bind(this,this.xTransform),$bind(this,this.yTransform)],[dx,dy]);
		this._skipTransformChildren = true;
		this.set_x(X);
		this.set_y(Y);
		this._skipTransformChildren = false;
	}
	,set_camera: function(Value) {
		if(this.get_camera() != Value) {
			this.transformChildren_flixel_FlxCamera($bind(this,this.cameraTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_camera.call(this,Value);
	}
	,set_cameras: function(Value) {
		if(this.get_cameras() != Value) {
			this.transformChildren_Array_flixel_FlxCamera($bind(this,this.camerasTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_cameras.call(this,Value);
	}
	,set_exists: function(Value) {
		if(this.exists != Value) {
			this.transformChildren_Bool($bind(this,this.existsTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_exists.call(this,Value);
	}
	,set_visible: function(Value) {
		if(this.exists && this.visible != Value) {
			this.transformChildren_Bool($bind(this,this.visibleTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_visible.call(this,Value);
	}
	,set_active: function(Value) {
		if(this.exists && this.active != Value) {
			this.transformChildren_Bool($bind(this,this.activeTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_active.call(this,Value);
	}
	,set_alive: function(Value) {
		if(this.alive != Value) {
			this.transformChildren_Bool($bind(this,this.aliveTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_alive.call(this,Value);
	}
	,set_x: function(Value) {
		if(!this._skipTransformChildren && this.exists && this.x != Value) {
			var offset = Value - this.x;
			this.transformChildren_Float($bind(this,this.xTransform),offset);
		}
		return this.x = Value;
	}
	,set_y: function(Value) {
		if(!this._skipTransformChildren && this.exists && this.y != Value) {
			var offset = Value - this.y;
			this.transformChildren_Float($bind(this,this.yTransform),offset);
		}
		return this.y = Value;
	}
	,set_angle: function(Value) {
		if(this.exists && this.angle != Value) {
			var offset = Value - this.angle;
			this.transformChildren_Float($bind(this,this.angleTransform),offset);
		}
		return this.angle = Value;
	}
	,set_alpha: function(Value) {
		var lowerBound = Value < 0 ? 0 : Value;
		Value = lowerBound > 1 ? 1 : lowerBound;
		if(this.exists && this.alpha != Value) {
			var factor = this.alpha > 0 ? Value / this.alpha : 0;
			if(!this.directAlpha && this.alpha != 0) {
				this.transformChildren_Float($bind(this,this.alphaTransform),factor);
			} else {
				this.transformChildren_Float($bind(this,this.directAlphaTransform),Value);
			}
		}
		return this.alpha = Value;
	}
	,set_facing: function(Value) {
		if(this.exists && this.facing != Value) {
			this.transformChildren_Int($bind(this,this.facingTransform),Value);
		}
		return this.facing = Value;
	}
	,set_flipX: function(Value) {
		if(this.exists && this.flipX != Value) {
			this.transformChildren_Bool($bind(this,this.flipXTransform),Value);
		}
		return this.flipX = Value;
	}
	,set_flipY: function(Value) {
		if(this.exists && this.flipY != Value) {
			this.transformChildren_Bool($bind(this,this.flipYTransform),Value);
		}
		return this.flipY = Value;
	}
	,set_moves: function(Value) {
		if(this.exists && this.moves != Value) {
			this.transformChildren_Bool($bind(this,this.movesTransform),Value);
		}
		return this.moves = Value;
	}
	,set_immovable: function(Value) {
		if(this.exists && this.immovable != Value) {
			this.transformChildren_Bool($bind(this,this.immovableTransform),Value);
		}
		return this.immovable = Value;
	}
	,set_solid: function(Value) {
		if(this.exists && (this.allowCollisions & 4369) > 0 != Value) {
			this.transformChildren_Bool($bind(this,this.solidTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_solid.call(this,Value);
	}
	,set_color: function(Value) {
		if(this.exists && this.color != Value) {
			this.transformChildren_Int($bind(this,this.gColorTransform),Value);
		}
		return this.color = Value;
	}
	,set_blend: function(Value) {
		if(this.exists && this.blend != Value) {
			this.transformChildren_flash_display_BlendMode($bind(this,this.blendTransform),Value);
		}
		return this.blend = Value;
	}
	,set_clipRect: function(rect) {
		if(this.exists) {
			this.transformChildren_flixel_math_FlxRect($bind(this,this.clipRectTransform),rect);
		}
		return flixel_FlxSprite.prototype.set_clipRect.call(this,rect);
	}
	,set_pixelPerfectRender: function(Value) {
		if(this.exists && this.pixelPerfectRender != Value) {
			this.transformChildren_Bool($bind(this,this.pixelPerfectTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_pixelPerfectRender.call(this,Value);
	}
	,set_width: function(Value) {
		return Value;
	}
	,get_width: function() {
		if(this.group.length == 0) {
			return 0;
		}
		var minX = Infinity;
		var maxX = -Infinity;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var member = _g1[_g];
			++_g;
			if(member == null) {
				continue;
			}
			var minMemberX = member.x;
			var maxMemberX = minMemberX + member.get_width();
			if(maxMemberX > maxX) {
				maxX = maxMemberX;
			}
			if(minMemberX < minX) {
				minX = minMemberX;
			}
		}
		return maxX - minX;
	}
	,set_height: function(Value) {
		return Value;
	}
	,get_height: function() {
		if(this.group.length == 0) {
			return 0;
		}
		var minY = Infinity;
		var maxY = -Infinity;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var member = _g1[_g];
			++_g;
			if(member == null) {
				continue;
			}
			var minMemberY = member.y;
			var maxMemberY = minMemberY + member.get_height();
			if(maxMemberY > maxY) {
				maxY = maxMemberY;
			}
			if(minMemberY < minY) {
				minY = minMemberY;
			}
		}
		return maxY - minY;
	}
	,get_length: function() {
		return this.group.length;
	}
	,get_maxSize: function() {
		return this.group.maxSize;
	}
	,set_maxSize: function(Size) {
		return this.group.set_maxSize(Size);
	}
	,get_members: function() {
		return this.group.members;
	}
	,xTransform: function(Sprite,X) {
		var _g = Sprite;
		_g.set_x(_g.x + X);
	}
	,yTransform: function(Sprite,Y) {
		var _g = Sprite;
		_g.set_y(_g.y + Y);
	}
	,angleTransform: function(Sprite,Angle) {
		var _g = Sprite;
		_g.set_angle(_g.angle + Angle);
	}
	,alphaTransform: function(Sprite,Alpha) {
		if(Sprite.alpha != 0 || Alpha == 0) {
			var _g = Sprite;
			_g.set_alpha(_g.alpha * Alpha);
		} else {
			Sprite.set_alpha(1 / Alpha);
		}
	}
	,directAlphaTransform: function(Sprite,Alpha) {
		Sprite.set_alpha(Alpha);
	}
	,facingTransform: function(Sprite,Facing) {
		Sprite.set_facing(Facing);
	}
	,flipXTransform: function(Sprite,FlipX) {
		Sprite.set_flipX(FlipX);
	}
	,flipYTransform: function(Sprite,FlipY) {
		Sprite.set_flipY(FlipY);
	}
	,movesTransform: function(Sprite,Moves) {
		Sprite.set_moves(Moves);
	}
	,pixelPerfectTransform: function(Sprite,PixelPerfect) {
		Sprite.set_pixelPerfectRender(PixelPerfect);
	}
	,gColorTransform: function(Sprite,Color) {
		Sprite.set_color(Color);
	}
	,blendTransform: function(Sprite,Blend) {
		Sprite.set_blend(Blend);
	}
	,immovableTransform: function(Sprite,Immovable) {
		Sprite.set_immovable(Immovable);
	}
	,visibleTransform: function(Sprite,Visible) {
		Sprite.set_visible(Visible);
	}
	,activeTransform: function(Sprite,Active) {
		Sprite.set_active(Active);
	}
	,solidTransform: function(Sprite,Solid) {
		Sprite.set_solid(Solid);
	}
	,aliveTransform: function(Sprite,Alive) {
		Sprite.set_alive(Alive);
	}
	,existsTransform: function(Sprite,Exists) {
		Sprite.set_exists(Exists);
	}
	,cameraTransform: function(Sprite,Camera) {
		Sprite.set_camera(Camera);
	}
	,camerasTransform: function(Sprite,Cameras) {
		Sprite.set_cameras(Cameras);
	}
	,offsetTransform: function(Sprite,Offset) {
		var _this = Sprite.offset;
		_this.set_x(Offset.x);
		_this.set_y(Offset.y);
		if(Offset._weak) {
			Offset.put();
		}
	}
	,originTransform: function(Sprite,Origin) {
		var _this = Sprite.origin;
		_this.set_x(Origin.x);
		_this.set_y(Origin.y);
		if(Origin._weak) {
			Origin.put();
		}
	}
	,scaleTransform: function(Sprite,Scale) {
		var _this = Sprite.scale;
		_this.set_x(Scale.x);
		_this.set_y(Scale.y);
		if(Scale._weak) {
			Scale.put();
		}
	}
	,scrollFactorTransform: function(Sprite,ScrollFactor) {
		var _this = Sprite.scrollFactor;
		_this.set_x(ScrollFactor.x);
		_this.set_y(ScrollFactor.y);
		if(ScrollFactor._weak) {
			ScrollFactor.put();
		}
	}
	,clipRectTransform: function(Sprite,ClipRect) {
		if(ClipRect == null) {
			Sprite.set_clipRect(null);
		} else {
			var X = ClipRect.x - Sprite.x + this.x;
			var Y = ClipRect.y - Sprite.y + this.y;
			var Width = ClipRect.width;
			var Height = ClipRect.height;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
			var rect = _this;
			rect._inPool = false;
			Sprite.set_clipRect(rect);
		}
	}
	,offsetCallback: function(Offset) {
		this.transformChildren_flixel_math_FlxPoint($bind(this,this.offsetTransform),Offset);
	}
	,originCallback: function(Origin) {
		this.transformChildren_flixel_math_FlxPoint($bind(this,this.originTransform),Origin);
	}
	,scaleCallback: function(Scale) {
		this.transformChildren_flixel_math_FlxPoint($bind(this,this.scaleTransform),Scale);
	}
	,scrollFactorCallback: function(ScrollFactor) {
		this.transformChildren_flixel_math_FlxPoint($bind(this,this.scrollFactorTransform),ScrollFactor);
	}
	,loadGraphicFromSprite: function(Sprite) {
		return this;
	}
	,loadGraphic: function(Graphic,Animated,Width,Height,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Animated == null) {
			Animated = false;
		}
		return this;
	}
	,loadRotatedGraphic: function(Graphic,Rotations,Frame,AntiAliasing,AutoBuffer,Key) {
		if(AutoBuffer == null) {
			AutoBuffer = false;
		}
		if(AntiAliasing == null) {
			AntiAliasing = false;
		}
		if(Frame == null) {
			Frame = -1;
		}
		if(Rotations == null) {
			Rotations = 16;
		}
		return this;
	}
	,makeGraphic: function(Width,Height,Color,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(Color == null) {
			Color = -1;
		}
		return this;
	}
	,set_pixels: function(Value) {
		return Value;
	}
	,set_frame: function(Value) {
		return Value;
	}
	,get_pixels: function() {
		return null;
	}
	,calcFrame: function(RunOnCpp) {
		if(RunOnCpp == null) {
			RunOnCpp = false;
		}
	}
	,resetHelpers: function() {
	}
	,stamp: function(Brush,X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
	}
	,set_frames: function(Frames) {
		return Frames;
	}
	,updateColorTransform: function() {
	}
	,__class__: flixel_group_FlxTypedSpriteGroup
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{set_maxSize:"set_maxSize",get_maxSize:"get_maxSize",get_length:"get_length",get_members:"get_members"})
});
var Alphabet = function(x,y,text,bold,typed) {
	if(typed == null) {
		typed = false;
	}
	if(bold == null) {
		bold = false;
	}
	if(text == null) {
		text = "";
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.personTalking = "gf";
	this.isBold = false;
	this.splitWords = [];
	this.lastWasSpace = false;
	this.xPosResetted = false;
	this.yMulti = 1;
	this.widthOfWords = flixel_FlxG.width;
	this._curText = "";
	this._finalText = "";
	this.text = "";
	this.isMenuItem = false;
	this.targetY = 0;
	this.paused = false;
	this.delay = 0.05;
	flixel_group_FlxTypedSpriteGroup.call(this,x,y);
	this._finalText = text;
	this.text = text;
	this.isBold = bold;
	if(text != "") {
		if(typed) {
			this.startTypedText();
		} else {
			this.addText();
		}
	}
};
$hxClasses["Alphabet"] = Alphabet;
Alphabet.__name__ = "Alphabet";
Alphabet.__super__ = flixel_group_FlxTypedSpriteGroup;
Alphabet.prototype = $extend(flixel_group_FlxTypedSpriteGroup.prototype,{
	delay: null
	,paused: null
	,targetY: null
	,isMenuItem: null
	,text: null
	,_finalText: null
	,_curText: null
	,widthOfWords: null
	,yMulti: null
	,lastSprite: null
	,xPosResetted: null
	,lastWasSpace: null
	,splitWords: null
	,isBold: null
	,addText: function() {
		this.doSplitWords();
		var xPos = 0;
		var _g = 0;
		var _g1 = this.splitWords;
		while(_g < _g1.length) {
			var character = _g1[_g];
			++_g;
			if(character == " " || character == "-") {
				this.lastWasSpace = true;
			}
			if(AlphaCharacter.alphabet.indexOf(character.toLowerCase()) != -1) {
				if(this.lastSprite != null) {
					xPos = this.lastSprite.x + this.lastSprite.get_width();
				}
				if(this.lastWasSpace) {
					xPos += 40;
					this.lastWasSpace = false;
				}
				var letter = new AlphaCharacter(xPos,0);
				if(this.isBold) {
					letter.createBold(character);
				} else {
					letter.createLetter(character);
				}
				this.add(letter);
				this.lastSprite = letter;
			}
		}
	}
	,doSplitWords: function() {
		this.splitWords = this._finalText.split("");
	}
	,personTalking: null
	,startTypedText: function() {
		var _gthis = this;
		this._finalText = this.text;
		this.doSplitWords();
		var loopNum = 0;
		var xPos = 0;
		var curRow = 0;
		new flixel_util_FlxTimer().start(0.05,function(tmr) {
			if(_gthis._finalText.charCodeAt(loopNum) == 10) {
				_gthis.yMulti += 1;
				_gthis.xPosResetted = true;
				xPos = 0;
				curRow += 1;
			}
			if(_gthis.splitWords[loopNum] == " ") {
				_gthis.lastWasSpace = true;
			}
			var isNumber = AlphaCharacter.numbers.indexOf(_gthis.splitWords[loopNum]) != -1;
			var isSymbol = AlphaCharacter.symbols.indexOf(_gthis.splitWords[loopNum]) != -1;
			if(AlphaCharacter.alphabet.indexOf(_gthis.splitWords[loopNum].toLowerCase()) != -1 || isNumber || isSymbol) {
				if(_gthis.lastSprite != null && !_gthis.xPosResetted) {
					_gthis.lastSprite.updateHitbox();
					xPos += _gthis.lastSprite.get_width() + 3;
				} else {
					_gthis.xPosResetted = false;
				}
				if(_gthis.lastWasSpace) {
					xPos += 20;
					_gthis.lastWasSpace = false;
				}
				var letter = new AlphaCharacter(xPos,55 * _gthis.yMulti);
				letter.row = curRow;
				if(_gthis.isBold) {
					letter.createBold(_gthis.splitWords[loopNum]);
				} else {
					if(isNumber) {
						letter.createNumber(_gthis.splitWords[loopNum]);
					} else if(isSymbol) {
						letter.createSymbol(_gthis.splitWords[loopNum]);
					} else {
						letter.createLetter(_gthis.splitWords[loopNum]);
					}
					var _g = letter;
					_g.set_x(_g.x + 90);
				}
				var Chance = 40;
				if(Chance == null) {
					Chance = 50;
				}
				if(flixel_FlxG.random.float(0,100) < Chance) {
					var daSound = "GF_";
					flixel_FlxG.sound.play(Paths.sound(daSound + flixel_FlxG.random.int(1,4),null));
				}
				_gthis.add(letter);
				_gthis.lastSprite = letter;
			}
			loopNum += 1;
			tmr.time = flixel_FlxG.random.float(0.04,0.09);
		},this.splitWords.length);
	}
	,update: function(elapsed) {
		if(this.isMenuItem) {
			var scaledY = flixel_math_FlxMath.remapToRange(this.targetY,0,1,0,1.3);
			this.set_y(CoolUtil.coolLerp(this.y,scaledY * 120 + flixel_FlxG.height * 0.48,0.16));
			this.set_x(CoolUtil.coolLerp(this.x,this.targetY * 20 + 90,0.16));
		}
		flixel_group_FlxTypedSpriteGroup.prototype.update.call(this,elapsed);
	}
	,__class__: Alphabet
});
var AlphaCharacter = function(x,y) {
	this.row = 0;
	flixel_FlxSprite.call(this,x,y);
	var library = null;
	var tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "alphabet" + ".png","IMAGE",library),Paths.getPath("images/" + "alphabet" + ".xml","TEXT",library));
	this.set_frames(tex);
	this.set_antialiasing(true);
};
$hxClasses["AlphaCharacter"] = AlphaCharacter;
AlphaCharacter.__name__ = "AlphaCharacter";
AlphaCharacter.__super__ = flixel_FlxSprite;
AlphaCharacter.prototype = $extend(flixel_FlxSprite.prototype,{
	row: null
	,createBold: function(letter) {
		this.animation.addByPrefix(letter,letter.toUpperCase() + " bold",24);
		this.animation.play(letter);
		this.updateHitbox();
	}
	,createLetter: function(letter) {
		var letterCase = "lowercase";
		if(letter.toLowerCase() != letter) {
			letterCase = "capital";
		}
		this.animation.addByPrefix(letter,letter + " " + letterCase,24);
		this.animation.play(letter);
		this.updateHitbox();
		this.set_y(110 - this.get_height());
		var _g = this;
		_g.set_y(_g.y + this.row * 60);
	}
	,createNumber: function(letter) {
		this.animation.addByPrefix(letter,letter,24);
		this.animation.play(letter);
		this.updateHitbox();
	}
	,createSymbol: function(letter) {
		switch(letter) {
		case "!":
			this.animation.addByPrefix(letter,"exclamation point",24);
			this.animation.play(letter);
			break;
		case "'":
			this.animation.addByPrefix(letter,"apostraphie",24);
			this.animation.play(letter);
			var _g = this;
			_g.set_y(_g.y);
			break;
		case ".":
			this.animation.addByPrefix(letter,"period",24);
			this.animation.play(letter);
			var _g = this;
			_g.set_y(_g.y + 50);
			break;
		case "?":
			this.animation.addByPrefix(letter,"question mark",24);
			this.animation.play(letter);
			break;
		}
		this.updateHitbox();
	}
	,__class__: AlphaCharacter
});
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = "lime.app.IModule";
lime_app_IModule.__isInterface__ = true;
lime_app_IModule.prototype = {
	__registerLimeModule: null
	,__unregisterLimeModule: null
	,__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app__$Event_$Int_$Void();
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = "lime.app.Module";
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onExit: null
	,__registerLimeModule: function(application) {
	}
	,__unregisterLimeModule: function(application) {
	}
	,__class__: lime_app_Module
};
var lime__$internal_backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_media_AudioManager.init();
	this.accelerometer = lime_system_Sensor.registerSensor(lime_system_SensorType.ACCELEROMETER,0);
};
$hxClasses["lime._internal.backend.html5.HTML5Application"] = lime__$internal_backend_html5_HTML5Application;
lime__$internal_backend_html5_HTML5Application.__name__ = "lime._internal.backend.html5.HTML5Application";
lime__$internal_backend_html5_HTML5Application.prototype = {
	accelerometer: null
	,currentUpdate: null
	,deltaTime: null
	,framePeriod: null
	,gameDeviceCache: null
	,hidden: null
	,lastUpdate: null
	,nextUpdate: null
	,parent: null
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) {
			return keyCode + 32;
		}
		switch(keyCode) {
		case 12:
			return 1073741980;
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 19:
			return 1073741896;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 41:
			return 1073741943;
		case 43:
			return 1073741940;
		case 44:
			return 1073741894;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 91:
			return 1073742051;
		case 92:
			return 1073742055;
		case 93:
			return 1073742055;
		case 95:
			return 1073742106;
		case 96:
			return 1073741922;
		case 97:
			return 1073741913;
		case 98:
			return 1073741914;
		case 99:
			return 1073741915;
		case 100:
			return 1073741916;
		case 101:
			return 1073741917;
		case 102:
			return 1073741918;
		case 103:
			return 1073741919;
		case 104:
			return 1073741920;
		case 105:
			return 1073741921;
		case 106:
			return 1073741909;
		case 107:
			return 1073741911;
		case 108:
			return 1073741923;
		case 109:
			return 1073741910;
		case 110:
			return 1073741923;
		case 111:
			return 1073741908;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 127:
			return 1073741931;
		case 128:
			return 1073741932;
		case 129:
			return 1073741933;
		case 130:
			return 1073741934;
		case 131:
			return 1073741935;
		case 132:
			return 1073741936;
		case 133:
			return 1073741937;
		case 134:
			return 1073741938;
		case 135:
			return 1073741939;
		case 144:
			return 1073741907;
		case 145:
			return 1073741895;
		case 160:
			return 94;
		case 161:
			return 33;
		case 163:
			return 35;
		case 164:
			return 36;
		case 166:
			return 1073742094;
		case 167:
			return 1073742095;
		case 168:
			return 1073742097;
		case 169:
			return 41;
		case 170:
			return 42;
		case 171:
			return 96;
		case 172:
			return 1073741898;
		case 173:
			return 45;
		case 174:
			return 1073741953;
		case 175:
			return 1073741952;
		case 176:
			return 1073742082;
		case 177:
			return 1073742083;
		case 178:
			return 1073742084;
		case 179:
			return 1073742085;
		case 180:
			return 1073742089;
		case 181:
			return 1073742086;
		case 182:
			return 1073741953;
		case 183:
			return 1073741952;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 193:
			return 63;
		case 194:
			return 1073741923;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		case 223:
			return 96;
		case 224:
			return 1073742051;
		case 226:
			return 92;
		}
		return keyCode;
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("devicemotion",$bind(this,this.handleSensorEvent),false);
		
			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}
			if (!CanvasRenderingContext2D.prototype.isPointInPath) {
				CanvasRenderingContext2D.prototype.isPointInPath = function (path, x, y) {
					return false;
				};
			}

			if ('performance' in window == false) {
				window.performance = {};
			}

			if ('now' in window.performance == false) {
				var offset = Date.now();
				if (performance.timing && performance.timing.navigationStart) {
					offset = performance.timing.navigationStart
				}
				window.performance.now = function now() {
					return Date.now() - offset;
				}
			}

			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}

			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); },
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};

			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};

			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,handleApplicationEvent: function(__) {
		var _g = 0;
		var _g1 = this.parent.__windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.__backend.updateSize();
		}
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			var _g = 0;
			var _g1 = this.parent.__windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				this.parent.onUpdate.dispatch(this.deltaTime | 0);
				if($window.context != null) {
					$window.onRender.dispatch($window.context);
				}
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
			} else {
				this.nextUpdate = this.currentUpdate - this.currentUpdate % this.framePeriod + this.framePeriod;
			}
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.__window != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null ? event.keyCode : event.which);
			var modifier = (event.shiftKey ? 3 : 0) | (event.ctrlKey ? 192 : 0) | (event.altKey ? 768 : 0) | (event.metaKey ? 3072 : 0);
			if(event.type == "keydown") {
				this.parent.__window.onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyDown.canceled && event.cancelable) {
					event.preventDefault();
				}
			} else {
				this.parent.__window.onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyUp.canceled && event.cancelable) {
					event.preventDefault();
				}
			}
		}
	}
	,handleSensorEvent: function(event) {
		this.accelerometer.onUpdate.dispatch(event.accelerationIncludingGravity.x,event.accelerationIncludingGravity.y,event.accelerationIncludingGravity.z);
	}
	,handleWindowEvent: function(event) {
		if(this.parent.__window != null) {
			switch(event.type) {
			case "beforeunload":
				break;
			case "blur":
				if(!this.hidden) {
					this.parent.__window.onFocusOut.dispatch();
					this.parent.__window.onDeactivate.dispatch();
					this.hidden = true;
				}
				break;
			case "focus":
				if(this.hidden) {
					this.parent.__window.onFocusIn.dispatch();
					this.parent.__window.onActivate.dispatch();
					this.hidden = false;
				}
				break;
			case "resize":
				this.parent.__window.__backend.handleResizeEvent(event);
				break;
			case "visibilitychange":
				if(window.document.hidden) {
					if(!this.hidden) {
						this.parent.__window.onFocusOut.dispatch();
						this.parent.__window.onDeactivate.dispatch();
						this.hidden = true;
					}
				} else if(this.hidden) {
					this.parent.__window.onFocusIn.dispatch();
					this.parent.__window.onActivate.dispatch();
					this.hidden = false;
				}
				break;
			}
		}
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) {
			return;
		}
		var id;
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g = 0;
		var _g1 = devices.length;
		while(_g < _g1) {
			var i = _g++;
			id = i;
			data = devices[id];
			if(data == null) {
				continue;
			}
			if(!this.gameDeviceCache.h.hasOwnProperty(id)) {
				cache = new lime__$internal_backend_html5_GameDeviceData();
				cache.id = id;
				cache.connected = data.connected;
				var _g2 = 0;
				var _g3 = data.buttons.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g4 = 0;
				var _g5 = data.axes.length;
				while(_g4 < _g5) {
					var i2 = _g4++;
					cache.axes.push(data.axes[i2]);
				}
				if(data.mapping == "standard") {
					cache.isGamepad = true;
				}
				this.gameDeviceCache.h[id] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(id);
					if(cache.isGamepad) {
						lime_ui_Gamepad.__connect(id);
					}
				}
			}
			cache = this.gameDeviceCache.h[id];
			joystick = lime_ui_Joystick.devices.h[id];
			gamepad = lime_ui_Gamepad.devices.h[id];
			if(data.connected) {
				var button;
				var value;
				var _g6 = 0;
				var _g7 = data.buttons.length;
				while(_g6 < _g7) {
					var i3 = _g6++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(4,value);
							}
						} else if(i3 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(5,value);
							}
						} else {
							if(value > 0) {
								joystick.onButtonDown.dispatch(i3);
							} else {
								joystick.onButtonUp.dispatch(i3);
							}
							if(gamepad != null) {
								switch(i3) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) {
									gamepad.onButtonDown.dispatch(button);
								} else {
									gamepad.onButtonUp.dispatch(button);
								}
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g8 = 0;
				var _g9 = data.axes.length;
				while(_g8 < _g9) {
					var i4 = _g8++;
					if(data.axes[i4] != cache.axes[i4]) {
						joystick.onAxisMove.dispatch(i4,data.axes[i4]);
						if(gamepad != null) {
							gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						}
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(id);
				lime_ui_Gamepad.__disconnect(id);
			}
		}
	}
	,__class__: lime__$internal_backend_html5_HTML5Application
};
var lime_app_Application = function() {
	this.onCreateWindow = new lime_app__$Event_$lime_$ui_$Window_$Void();
	this.onUpdate = new lime_app__$Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) {
		lime_app_Application.current = this;
	}
	this.meta = new haxe_ds_StringMap();
	this.modules = [];
	this.__windowByID = new haxe_ds_IntMap();
	this.__windows = [];
	this.__backend = new lime__$internal_backend_html5_HTML5Application(this);
	this.__registerLimeModule(this);
	this.__preloader = new lime_utils_Preloader();
	this.__preloader.onProgress.add($bind(this,this.onPreloadProgress));
	this.__preloader.onComplete.add($bind(this,this.onPreloadComplete));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = "lime.app.Application";
lime_app_Application.current = null;
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	meta: null
	,modules: null
	,onUpdate: null
	,onCreateWindow: null
	,preloader: null
	,window: null
	,windows: null
	,__backend: null
	,__preloader: null
	,__window: null
	,__windowByID: null
	,__windows: null
	,addModule: function(module) {
		module.__registerLimeModule(this);
		this.modules.push(module);
	}
	,createWindow: function(attributes) {
		var $window = this.__createWindow(attributes);
		this.__addWindow($window);
		return $window;
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.__backend.exec();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,x,y) {
	}
	,onKeyDown: function(keyCode,modifier) {
	}
	,onKeyUp: function(keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(x,y,button) {
	}
	,onMouseMove: function(x,y) {
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
	}
	,onMouseWheel: function(deltaX,deltaY,deltaMode) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTextEdit: function(text,start,length) {
	}
	,onTextInput: function(text) {
	}
	,onTouchCancel: function(touch) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function() {
	}
	,onWindowClose: function() {
	}
	,onWindowCreate: function() {
	}
	,onWindowDeactivate: function() {
	}
	,onWindowDropFile: function(file) {
	}
	,onWindowEnter: function() {
	}
	,onWindowExpose: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowLeave: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowMinimize: function() {
	}
	,onWindowResize: function(width,height) {
	}
	,onWindowRestore: function() {
	}
	,removeModule: function(module) {
		if(module != null) {
			module.__unregisterLimeModule(this);
			HxOverrides.remove(this.modules,module);
		}
	}
	,render: function(context) {
	}
	,update: function(deltaTime) {
	}
	,__addWindow: function($window) {
		if($window != null) {
			this.__windows.push($window);
			this.__windowByID.h[$window.id] = $window;
			var _g = $bind(this,this.__onWindowClose);
			var window1 = $window;
			var tmp = function() {
				_g(window1);
			};
			$window.onClose.add(tmp,false,-10000);
			if(this.__window == null) {
				this.__window = $window;
				$window.onActivate.add($bind(this,this.onWindowActivate));
				$window.onRenderContextLost.add($bind(this,this.onRenderContextLost));
				$window.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
				$window.onDeactivate.add($bind(this,this.onWindowDeactivate));
				$window.onDropFile.add($bind(this,this.onWindowDropFile));
				$window.onEnter.add($bind(this,this.onWindowEnter));
				$window.onExpose.add($bind(this,this.onWindowExpose));
				$window.onFocusIn.add($bind(this,this.onWindowFocusIn));
				$window.onFocusOut.add($bind(this,this.onWindowFocusOut));
				$window.onFullscreen.add($bind(this,this.onWindowFullscreen));
				$window.onKeyDown.add($bind(this,this.onKeyDown));
				$window.onKeyUp.add($bind(this,this.onKeyUp));
				$window.onLeave.add($bind(this,this.onWindowLeave));
				$window.onMinimize.add($bind(this,this.onWindowMinimize));
				$window.onMouseDown.add($bind(this,this.onMouseDown));
				$window.onMouseMove.add($bind(this,this.onMouseMove));
				$window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
				$window.onMouseUp.add($bind(this,this.onMouseUp));
				$window.onMouseWheel.add($bind(this,this.onMouseWheel));
				$window.onMove.add($bind(this,this.onWindowMove));
				$window.onRender.add($bind(this,this.render));
				$window.onResize.add($bind(this,this.onWindowResize));
				$window.onRestore.add($bind(this,this.onWindowRestore));
				$window.onTextEdit.add($bind(this,this.onTextEdit));
				$window.onTextInput.add($bind(this,this.onTextInput));
				this.onWindowCreate();
			}
			this.onCreateWindow.dispatch($window);
		}
	}
	,__createWindow: function(attributes) {
		var $window = new lime_ui_Window(this,attributes);
		if($window.id == -1) {
			return null;
		}
		return $window;
	}
	,__registerLimeModule: function(application) {
		application.onUpdate.add($bind(this,this.update));
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onExit.add($bind(this,this.__onModuleExit),false,0);
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		var joystick = lime_ui_Joystick.devices.iterator();
		while(joystick.hasNext()) {
			var joystick1 = joystick.next();
			this.__onJoystickConnect(joystick1);
		}
		lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.add($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,__removeWindow: function($window) {
		if($window != null && this.__windowByID.h.hasOwnProperty($window.id)) {
			if(this.__window == $window) {
				this.__window = null;
			}
			HxOverrides.remove(this.__windows,$window);
			this.__windowByID.remove($window.id);
			$window.close();
			if(this.__windows.length == 0) {
				lime_system_System.exit(0);
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var _g = $bind(this,this.onGamepadAxisMove);
		var gamepad1 = gamepad;
		var tmp = function(axis,value) {
			_g(gamepad1,axis,value);
		};
		gamepad.onAxisMove.add(tmp);
		var _g1 = $bind(this,this.onGamepadButtonDown);
		var gamepad2 = gamepad;
		var tmp = function(button) {
			_g1(gamepad2,button);
		};
		gamepad.onButtonDown.add(tmp);
		var _g2 = $bind(this,this.onGamepadButtonUp);
		var gamepad3 = gamepad;
		var tmp = function(button) {
			_g2(gamepad3,button);
		};
		gamepad.onButtonUp.add(tmp);
		var _g3 = $bind(this,this.onGamepadDisconnect);
		var gamepad4 = gamepad;
		var tmp = function() {
			_g3(gamepad4);
		};
		gamepad.onDisconnect.add(tmp);
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		var _g = $bind(this,this.onJoystickAxisMove);
		var joystick1 = joystick;
		var tmp = function(axis,value) {
			_g(joystick1,axis,value);
		};
		joystick.onAxisMove.add(tmp);
		var _g1 = $bind(this,this.onJoystickButtonDown);
		var joystick2 = joystick;
		var tmp = function(button) {
			_g1(joystick2,button);
		};
		joystick.onButtonDown.add(tmp);
		var _g2 = $bind(this,this.onJoystickButtonUp);
		var joystick3 = joystick;
		var tmp = function(button) {
			_g2(joystick3,button);
		};
		joystick.onButtonUp.add(tmp);
		var _g3 = $bind(this,this.onJoystickDisconnect);
		var joystick4 = joystick;
		var tmp = function() {
			_g3(joystick4);
		};
		joystick.onDisconnect.add(tmp);
		var _g4 = $bind(this,this.onJoystickHatMove);
		var joystick5 = joystick;
		var tmp = function(hat,position) {
			_g4(joystick5,hat,position);
		};
		joystick.onHatMove.add(tmp);
		var _g5 = $bind(this,this.onJoystickTrackballMove);
		var joystick6 = joystick;
		var tmp = function(trackball,x,y) {
			_g5(joystick6,trackball,x,y);
		};
		joystick.onTrackballMove.add(tmp);
	}
	,__onModuleExit: function(code) {
		this.__backend.exit();
	}
	,__onWindowClose: function($window) {
		if(this.__window == $window) {
			this.onWindowClose();
		}
		this.__removeWindow($window);
	}
	,__unregisterLimeModule: function(application) {
		application.onUpdate.remove($bind(this,this.update));
		application.onExit.remove($bind(this,this.__onModuleExit));
		application.onExit.remove($bind(this,this.onModuleExit));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		lime_ui_Joystick.onConnect.remove($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.remove($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.remove($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.onTouchEnd));
		this.onModuleExit(0);
	}
	,get_preloader: function() {
		return this.__preloader;
	}
	,get_window: function() {
		return this.__window;
	}
	,get_windows: function() {
		return this.__windows;
	}
	,__class__: lime_app_Application
	,__properties__: {get_windows:"get_windows",get_window:"get_window",get_preloader:"get_preloader"}
});
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = "ApplicationMain";
ApplicationMain.main = function() {
	lime_system_System.__registerEntryPoint("Funkin",ApplicationMain.create);
};
ApplicationMain.create = function(config) {
	var app = new openfl_display_Application();
	ManifestResources.init(config);
	app.meta.h["build"] = "547";
	app.meta.h["company"] = "ninjamuffin99";
	app.meta.h["file"] = "Funkin";
	app.meta.h["name"] = "Friday Night Funkin'";
	app.meta.h["packageName"] = "com.ninjamuffin99.funkin";
	app.meta.h["version"] = "0.2.8";
	var attributes = { allowHighDPI : false, alwaysOnTop : false, borderless : false, element : null, frameRate : null, height : 720, hidden : false, maximized : false, minimized : false, parameters : { }, resizable : true, title : "Friday Night Funkin'", width : 1280, x : null, y : null};
	attributes.context = { antialiasing : 0, background : 0, colorDepth : 32, depth : true, hardware : true, stencil : true, type : null, vsync : false};
	if(app.__window == null) {
		if(config != null) {
			var _g = 0;
			var _g1 = Reflect.fields(config);
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(attributes,field)) {
					attributes[field] = Reflect.field(config,field);
				} else if(Object.prototype.hasOwnProperty.call(attributes.context,field)) {
					attributes.context[field] = Reflect.field(config,field);
				}
			}
		}
	}
	app.createWindow(attributes);
	var preloader = new openfl_display_Preloader(new flixel_system_FlxPreloader());
	app.__preloader.onProgress.add(function(loaded,total) {
		preloader.update(loaded,total);
	});
	app.__preloader.onComplete.add(function() {
		preloader.start();
	});
	var stage = app.__window.stage;
	var tmp = function() {
		ApplicationMain.start(stage);
	};
	preloader.onComplete.add(tmp);
	var _g = 0;
	var _g1 = ManifestResources.preloadLibraries;
	while(_g < _g1.length) {
		var library = _g1[_g];
		++_g;
		app.__preloader.addLibrary(library);
	}
	var _g = 0;
	var _g1 = ManifestResources.preloadLibraryNames;
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		app.__preloader.addLibraryName(name);
	}
	app.__preloader.load();
	var result = app.exec();
};
ApplicationMain.start = function(stage) {
	if(stage.__uncaughtErrorEvents.__enabled) {
		try {
			Main.main();
			stage.dispatchEvent(new openfl_events_Event("resize",false,false));
			if(stage.window.__fullscreen) {
				stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			stage.__handleError(e);
		}
	} else {
		Main.main();
		stage.dispatchEvent(new openfl_events_Event("resize",false,false));
		if(stage.window.__fullscreen) {
			stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
		}
	}
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = "openfl.events.IEventDispatcher";
openfl_events_IEventDispatcher.__isInterface__ = true;
openfl_events_IEventDispatcher.prototype = {
	addEventListener: null
	,dispatchEvent: null
	,hasEventListener: null
	,removeEventListener: null
	,willTrigger: null
	,__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = function(target) {
	if(target != null) {
		this.__targetDispatcher = target;
	}
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = "openfl.events.EventDispatcher";
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.prototype = {
	__eventMap: null
	,__iterators: null
	,__targetDispatcher: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		if(listener == null) {
			return;
		}
		if(this.__eventMap == null) {
			this.__eventMap = new haxe_ds_StringMap();
			this.__iterators = new haxe_ds_StringMap();
		}
		if(!Object.prototype.hasOwnProperty.call(this.__eventMap.h,type)) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			var iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			this.__eventMap.h[type] = list;
			this.__iterators.h[type] = [iterator];
		} else {
			var list = this.__eventMap.h[type];
			var _g = 0;
			var _g1 = list.length;
			while(_g < _g1) {
				var i = _g++;
				if(list[i].match(listener,useCapture)) {
					return;
				}
			}
			var iterators = this.__iterators.h[type];
			var _g = 0;
			while(_g < iterators.length) {
				var iterator = iterators[_g];
				++_g;
				if(iterator.active) {
					iterator.copy();
				}
			}
			this.__addListenerByPriority(list,new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) {
			event.target = this.__targetDispatcher;
		} else {
			event.target = this;
		}
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) {
			return false;
		}
		return Object.prototype.hasOwnProperty.call(this.__eventMap.h,type);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		if(this.__eventMap == null || listener == null) {
			return;
		}
		var list = this.__eventMap.h[type];
		if(list == null) {
			return;
		}
		var iterators = this.__iterators.h[type];
		var _g = 0;
		var _g1 = list.length;
		while(_g < _g1) {
			var i = _g++;
			if(list[i].match(listener,useCapture)) {
				var _g2 = 0;
				while(_g2 < iterators.length) {
					var iterator = iterators[_g2];
					++_g2;
					iterator.remove(list[i],i);
				}
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) {
			var _this = this.__eventMap;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
			var _this = this.__iterators;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
		}
		if(!haxe_ds_StringMap.valueIterator(this.__eventMap.h).hasNext()) {
			this.__eventMap = null;
			this.__iterators = null;
		}
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		var full = c.__name__;
		var short = full.split(".").pop();
		return "[object " + short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) {
			return true;
		}
		var type = event.type;
		var list = this.__eventMap.h[type];
		if(list == null) {
			return true;
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) {
				event.target = this.__targetDispatcher;
			} else {
				event.target = this;
			}
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 1;
		var iterators = this.__iterators.h[type];
		var iterator = iterators[0];
		if(iterator.active) {
			iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			iterators.push(iterator);
		}
		iterator.start();
		var listener = iterator;
		while(listener.hasNext()) {
			var listener1 = listener.next();
			if(listener1 == null) {
				continue;
			}
			if(listener1.useCapture == capture) {
				listener1.callback(event);
				if(event.__isCanceledNow) {
					break;
				}
			}
		}
		iterator.stop();
		if(iterator != iterators[0]) {
			HxOverrides.remove(iterators,iterator);
		} else {
			iterator.reset(list);
		}
		return !event.isDefaultPrevented();
	}
	,__removeAllListeners: function() {
		this.__eventMap = null;
		this.__iterators = null;
	}
	,__addListenerByPriority: function(list,listener) {
		var numElements = list.length;
		var addAtPosition = numElements;
		var _g = 0;
		var _g1 = numElements;
		while(_g < _g1) {
			var i = _g++;
			if(list[i].priority < listener.priority) {
				addAtPosition = i;
				break;
			}
		}
		list.splice(addAtPosition,0,listener);
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = "openfl.display.IBitmapDrawable";
openfl_display_IBitmapDrawable.__isInterface__ = true;
openfl_display_IBitmapDrawable.prototype = {
	__blendMode: null
	,__drawableType: null
	,__isMask: null
	,__renderable: null
	,__renderTransform: null
	,__transform: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__getBounds: null
	,__update: null
	,__updateTransforms: null
	,__mask: null
	,__scrollRect: null
	,__class__: openfl_display_IBitmapDrawable
};
var openfl_Vector = {};
openfl_Vector.__properties__ = {set_length:"set_length",get_length:"get_length",set_fixed:"set_fixed",get_fixed:"get_fixed"};
openfl_Vector.ofArray_Float = function(array) {
	var vector = openfl_Vector.toFloatVector(null);
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		vector.set(i,array[i]);
	}
	return vector;
};
openfl_Vector.ofArray_Int = function(array) {
	var vector = openfl_Vector.toIntVector(null);
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		vector.set(i,array[i]);
	}
	return vector;
};
openfl_Vector.concat = function(this1,vec) {
	return this1.concat(vec);
};
openfl_Vector.copy = function(this1) {
	return this1.copy();
};
openfl_Vector.every = function(this1,callback,thisObject) {
	var _g = 0;
	var _g1 = this1.get_length();
	while(_g < _g1) {
		var i = _g++;
		this1.__tempIndex = i;
		if(thisObject != null) {
			if(callback.apply(thisObject,[this1.get(i),i,this1]) == false) {
				break;
			}
		} else if(callback(this1.get(i),i,this1) == false) {
			break;
		}
	}
	return this1.__tempIndex == this1.get_length() - 1;
};
openfl_Vector.filter = function(this1,callback) {
	return this1.filter(callback);
};
openfl_Vector.get = function(this1,index) {
	return this1.get(index);
};
openfl_Vector.indexOf = function(this1,searchElement,fromIndex) {
	if(fromIndex == null) {
		fromIndex = 0;
	}
	return this1.indexOf(searchElement,fromIndex);
};
openfl_Vector.insertAt = function(this1,index,element) {
	this1.insertAt(index,element);
};
openfl_Vector.iterator = function(this1) {
	return this1.iterator();
};
openfl_Vector.join = function(this1,sep) {
	if(sep == null) {
		sep = ",";
	}
	return this1.join(sep);
};
openfl_Vector.lastIndexOf = function(this1,searchElement,fromIndex) {
	return this1.lastIndexOf(searchElement,fromIndex);
};
openfl_Vector.pop = function(this1) {
	return this1.pop();
};
openfl_Vector.push = function(this1,value) {
	return this1.push(value);
};
openfl_Vector.removeAt = function(this1,index) {
	return this1.removeAt(index);
};
openfl_Vector.reverse = function(this1) {
	return this1.reverse();
};
openfl_Vector.set = function(this1,index,value) {
	return this1.set(index,value);
};
openfl_Vector.shift = function(this1) {
	return this1.shift();
};
openfl_Vector.slice = function(this1,startIndex,endIndex) {
	if(startIndex == null) {
		startIndex = 0;
	}
	return this1.slice(startIndex,endIndex);
};
openfl_Vector.some = function(this1,callback,thisObject) {
	var _g = 0;
	var _g1 = this1.get_length();
	while(_g < _g1) {
		var i = _g++;
		this1.__tempIndex = i;
		if(thisObject != null) {
			if(callback.apply(thisObject,[this1.get(i),i,this1]) == true) {
				break;
			}
		} else if(callback(this1.get(i),i,this1)) {
			break;
		}
		if(i == this1.get_length() - 1) {
			this1.__tempIndex++;
		}
	}
	return this1.__tempIndex < this1.get_length() - 1;
};
openfl_Vector.sort = function(this1,sortBehavior) {
	this1.sort(sortBehavior);
};
openfl_Vector.splice = function(this1,startIndex,deleteCount) {
	return this1.splice(startIndex,deleteCount);
};
openfl_Vector.toString = function(this1) {
	if(this1 != null) {
		return this1.toString();
	} else {
		return null;
	}
};
openfl_Vector.unshift = function(this1,value) {
	this1.unshift(value);
};
openfl_Vector.convert = function(vec) {
	return vec;
};
openfl_Vector.toBoolVector = function(t,length,fixed,array) {
	return new openfl__$Vector_BoolVector(length,fixed,array);
};
openfl_Vector.toIntVector = function(t,length,fixed,array) {
	return new openfl__$Vector_IntVector(length,fixed,array);
};
openfl_Vector.toFloatVector = function(t,length,fixed,array) {
	return new openfl__$Vector_FloatVector(length,fixed,array,true);
};
openfl_Vector.toFunctionVector = function(t,length,fixed,array) {
	return new openfl__$Vector_FunctionVector(length,fixed,array);
};
openfl_Vector.toObjectVector = function(t,length,fixed,array) {
	return new openfl__$Vector_ObjectVector(length,fixed,array,true);
};
openfl_Vector.toNullVector = function(t,length,fixed,array) {
	return new openfl__$Vector_ObjectVector(length,fixed,array,true);
};
openfl_Vector.fromBoolVector = function(vector) {
	return vector;
};
openfl_Vector.fromIntVector = function(vector) {
	return vector;
};
openfl_Vector.fromFloatVector = function(vector) {
	return vector;
};
openfl_Vector.fromFunctionVector = function(vector) {
	return vector;
};
openfl_Vector.fromObjectVector = function(vector) {
	return vector;
};
openfl_Vector.get_fixed = function(this1) {
	return this1.fixed;
};
openfl_Vector.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
openfl_Vector.get_length = function(this1) {
	return this1.get_length();
};
openfl_Vector.set_length = function(this1,value) {
	return this1.set_length(value);
};
var lime_utils_ObjectPool = function(create,clean,size) {
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new haxe_ds_List();
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
};
$hxClasses["lime.utils.ObjectPool"] = lime_utils_ObjectPool;
lime_utils_ObjectPool.__name__ = "lime.utils.ObjectPool";
lime_utils_ObjectPool.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!this.__pool.exists(object)) {
			this.__pool.set(object,false);
			this.clean(object);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new haxe_ds_ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			var object1 = null;
			if(this.__inactiveObject0 != null) {
				object1 = this.__inactiveObject0;
				this.__inactiveObject0 = null;
			} else if(this.__inactiveObject1 != null) {
				object1 = this.__inactiveObject1;
				this.__inactiveObject1 = null;
			} else {
				object1 = this.__inactiveObjectList.pop();
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject0 = this.__inactiveObjectList.pop();
				}
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject1 = this.__inactiveObjectList.pop();
				}
			}
			this.inactiveObjects--;
			this.activeObjects++;
			object = object1;
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		} else {
			this.__pool.remove(object);
		}
	}
	,remove: function(object) {
		if(this.__pool.exists(object)) {
			this.__pool.remove(object);
			if(this.__inactiveObject0 == object) {
				this.__inactiveObject0 = null;
				this.inactiveObjects--;
			} else if(this.__inactiveObject1 == object) {
				this.__inactiveObject1 = null;
				this.inactiveObjects--;
			} else if(this.__inactiveObjectList.remove(object)) {
				this.inactiveObjects--;
			} else {
				this.activeObjects--;
			}
		}
	}
	,__addInactive: function(object) {
		if(this.__inactiveObject0 == null) {
			this.__inactiveObject0 = object;
		} else if(this.__inactiveObject1 == null) {
			this.__inactiveObject1 = object;
		} else {
			this.__inactiveObjectList.add(object);
		}
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject0 = this.__inactiveObjectList.pop();
			}
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject1 = this.__inactiveObjectList.pop();
			}
		}
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var _g_head = this.__inactiveObjectList.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var object = val;
			this.__pool.remove(object);
			this.__inactiveObjectList.remove(object);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g = 0;
				var _g1 = value - current;
				while(_g < _g1) {
					var i = _g++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,keyValueIterator: null
	,__class__: haxe_IMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.count = null;
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += Std.string(Std.string(i1));
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1.__id__]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,__class__: haxe_ds_List
};
var openfl_display_DisplayObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.__drawableType = 1;
	this.__alpha = 1;
	this.__blendMode = 10;
	this.__cacheAsBitmap = false;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__scaleX = 1;
	this.__scaleY = 1;
	this.__worldAlpha = 1;
	this.__worldBlendMode = 10;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldVisible = true;
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
	if(openfl_display_DisplayObject.__initStage != null) {
		this.stage = openfl_display_DisplayObject.__initStage;
		openfl_display_DisplayObject.__initStage = null;
		this.stage.addChild(this);
	}
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = "openfl.display.DisplayObject";
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__initStage = null;
openfl_display_DisplayObject.__supportDOM = null;
openfl_display_DisplayObject.__calculateAbsoluteTransform = function(local,parentTransform,target) {
	target.a = local.a * parentTransform.a + local.b * parentTransform.c;
	target.b = local.a * parentTransform.b + local.b * parentTransform.d;
	target.c = local.c * parentTransform.a + local.d * parentTransform.c;
	target.d = local.c * parentTransform.b + local.d * parentTransform.d;
	target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
	target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
};
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	opaqueBackground: null
	,parent: null
	,stage: null
	,__alpha: null
	,__blendMode: null
	,__cacheAsBitmap: null
	,__cacheAsBitmapMatrix: null
	,__cacheBitmap: null
	,__cacheBitmapBackground: null
	,__cacheBitmapColorTransform: null
	,__cacheBitmapData: null
	,__cacheBitmapData2: null
	,__cacheBitmapData3: null
	,__cacheBitmapMatrix: null
	,__cacheBitmapRenderer: null
	,__cairo: null
	,__children: null
	,__customRenderClear: null
	,__customRenderEvent: null
	,__drawableType: null
	,__filters: null
	,__graphics: null
	,__interactive: null
	,__isCacheBitmapRender: null
	,__isMask: null
	,__loaderInfo: null
	,__mask: null
	,__maskTarget: null
	,__name: null
	,__objectTransform: null
	,__renderable: null
	,__renderDirty: null
	,__renderParent: null
	,__renderTransform: null
	,__renderTransformCache: null
	,__renderTransformChanged: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scale9Grid: null
	,__scaleX: null
	,__scaleY: null
	,__scrollRect: null
	,__shader: null
	,__tempPoint: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__worldAlphaChanged: null
	,__worldBlendMode: null
	,__worldClip: null
	,__worldClipChanged: null
	,__worldColorTransform: null
	,__worldShader: null
	,__worldScale9Grid: null
	,__worldTransform: null
	,__worldVisible: null
	,__worldVisibleChanged: null
	,__worldTransformInvalid: null
	,__worldZ: null
	,__canvas: null
	,__context: null
	,__style: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!Object.prototype.hasOwnProperty.call(openfl_display_DisplayObject.__broadcastEvents.h,type)) {
				openfl_display_DisplayObject.__broadcastEvents.h[type] = [];
			}
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.h[type];
			if(dispatchers.indexOf(this) == -1) {
				dispatchers.push(this);
			}
			break;
		case "clearDOM":case "renderCairo":case "renderCanvas":case "renderDOM":case "renderOpenGL":
			if(this.__customRenderEvent == null) {
				this.__customRenderEvent = new openfl_events_RenderEvent(null);
				this.__customRenderEvent.objectColorTransform = new openfl_geom_ColorTransform();
				this.__customRenderEvent.objectMatrix = new openfl_geom_Matrix();
				this.__customRenderClear = true;
			}
			break;
		default:
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
	}
	,dispatchEvent: function(event) {
		if(((event) instanceof openfl_events_MouseEvent)) {
			var mouseEvent = event;
			var _this = this.__getRenderTransform();
			mouseEvent.stageX = mouseEvent.localX * _this.a + mouseEvent.localY * _this.c + _this.tx;
			var _this = this.__getRenderTransform();
			mouseEvent.stageY = mouseEvent.localX * _this.b + mouseEvent.localY * _this.d + _this.ty;
		} else if(((event) instanceof openfl_events_TouchEvent)) {
			var touchEvent = event;
			var _this = this.__getRenderTransform();
			touchEvent.stageX = touchEvent.localX * _this.a + touchEvent.localY * _this.c + _this.tx;
			var _this = this.__getRenderTransform();
			touchEvent.stageY = touchEvent.localX * _this.b + touchEvent.localY * _this.d + _this.ty;
		}
		event.target = this;
		return this.__dispatchWithCapture(event);
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix = openfl_geom_Matrix.__pool.get();
		if(targetCoordinateSpace != null && targetCoordinateSpace != this) {
			matrix.copyFrom(this.__getWorldTransform());
			var targetMatrix = openfl_geom_Matrix.__pool.get();
			targetMatrix.copyFrom(targetCoordinateSpace.__getWorldTransform());
			targetMatrix.invert();
			matrix.concat(targetMatrix);
			openfl_geom_Matrix.__pool.release(targetMatrix);
		} else {
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		openfl_geom_Matrix.__pool.release(matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		return this.__globalToLocal(pos,new openfl_geom_Point());
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) {
			shapeFlag = false;
		}
		if(this.stage != null) {
			return this.__hitTest(x,y,shapeFlag,null,false,this);
		} else {
			return false;
		}
	}
	,invalidate: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,localToGlobal: function(point) {
		return this.__getRenderTransform().transformPoint(point);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener,useCapture);
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!this.hasEventListener(type)) {
				if(Object.prototype.hasOwnProperty.call(openfl_display_DisplayObject.__broadcastEvents.h,type)) {
					HxOverrides.remove(openfl_display_DisplayObject.__broadcastEvents.h[type],this);
				}
			}
			break;
		case "clearDOM":case "renderCairo":case "renderCanvas":case "renderDOM":case "renderOpenGL":
			if(!this.hasEventListener("clearDOM") && !this.hasEventListener("renderCairo") && !this.hasEventListener("renderCanvas") && !this.hasEventListener("renderDOM") && !this.hasEventListener("renderOpenGL")) {
				this.__customRenderEvent = null;
			}
			break;
		default:
		}
	}
	,__cleanup: function() {
		this.__cairo = null;
		this.__canvas = null;
		this.__context = null;
		if(this.__graphics != null) {
			this.__graphics.__cleanup();
		}
		if(this.__cacheBitmap != null) {
			this.__cacheBitmap.__cleanup();
			this.__cacheBitmap = null;
		}
		if(this.__cacheBitmapData != null) {
			this.__cacheBitmapData.dispose();
			this.__cacheBitmapData = null;
		}
	}
	,__dispatch: function(event) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) {
				return true;
			}
			return result;
		}
		return true;
	}
	,__dispatchChildren: function(event) {
	}
	,__dispatchEvent: function(event) {
		var parent = event.bubbles ? this.parent : null;
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) {
			return true;
		}
		if(parent != null && parent != this) {
			event.eventPhase = 3;
			if(event.target == null) {
				event.target = this;
			}
			parent.__dispatchEvent(event);
		}
		return result;
	}
	,__dispatchWithCapture: function(event) {
		if(event.target == null) {
			event.target = this;
		}
		if(this.parent != null) {
			event.eventPhase = 1;
			if(this.parent == this.stage) {
				this.parent.__dispatch(event);
			} else {
				var stack = openfl_display_DisplayObject.__tempStack.get();
				var parent = this.parent;
				var i = 0;
				while(parent != null) {
					stack.set(i,parent);
					parent = parent.parent;
					++i;
				}
				var _g = 0;
				var _g1 = i;
				while(_g < _g1) {
					var j = _g++;
					stack.get(i - j - 1).__dispatch(event);
				}
				openfl_display_DisplayObject.__tempStack.release(stack);
			}
		}
		event.eventPhase = 2;
		return this.__dispatchEvent(event);
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) {
			this.__graphics.__getBounds(rect,matrix);
		}
	}
	,__getCursor: function() {
		return null;
	}
	,__getFilterBounds: function(rect,matrix) {
		this.__getRenderBounds(rect,matrix);
		if(this.__filters != null) {
			var extension = openfl_geom_Rectangle.__pool.get();
			var _g = 0;
			var _g1 = this.__filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				extension.__expand(-filter.__leftExtension,-filter.__topExtension,filter.__leftExtension + filter.__rightExtension,filter.__topExtension + filter.__bottomExtension);
			}
			rect.width += extension.width;
			rect.height += extension.height;
			rect.x += extension.x;
			rect.y += extension.y;
			openfl_geom_Rectangle.__pool.release(extension);
		}
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
		rect.x -= this.__transform.tx;
		rect.y -= this.__transform.ty;
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect == null) {
			this.__getBounds(rect,matrix);
		} else {
			var r = openfl_geom_Rectangle.__pool.get();
			r.copyFrom(this.__scrollRect);
			r.__transform(r,matrix);
			rect.__expand(r.x,r.y,r.width,r.height);
			openfl_geom_Rectangle.__pool.release(r);
		}
	}
	,__getRenderTransform: function() {
		this.__getWorldTransform();
		return this.__renderTransform;
	}
	,__getWorldTransform: function() {
		var transformDirty = this.__transformDirty || this.__worldTransformInvalid;
		if(transformDirty) {
			var list = [];
			var current = this;
			if(this.parent == null) {
				this.__update(true,false);
			} else {
				while(current != this.stage) {
					list.push(current);
					current = current.parent;
					if(current == null) {
						break;
					}
				}
			}
			var i = list.length;
			while(--i >= 0) {
				current = list[i];
				current.__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__globalToLocal: function(global,local) {
		this.__getRenderTransform();
		if(global == local) {
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				global.x = -_this.tx;
				global.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - global.y) + _this.d * (global.x - _this.tx));
				global.y = 1.0 / norm * (_this.a * (global.y - _this.ty) + _this.b * (_this.tx - global.x));
				global.x = px;
			}
		} else {
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			local.x = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - global.y) + _this.d * (global.x - _this.tx));
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			local.y = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (global.y - _this.ty) + _this.b * (_this.tx - global.x));
		}
		return local;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.__visible || this.__isMask) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null && !interactiveOnly) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
				return true;
			}
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		if(this.__graphics != null) {
			this.__graphics.__readGraphicsData(graphicsData);
		}
	}
	,__setParentRenderDirty: function() {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(renderParent != null && !renderParent.__renderDirty) {
			renderParent.__renderDirty = true;
			renderParent.__setParentRenderDirty();
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__setStageReference: function(stage) {
		this.stage = stage;
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			this.__setWorldTransformInvalid();
			this.__setParentRenderDirty();
		}
	}
	,__setWorldTransformInvalid: function() {
		this.__worldTransformInvalid = true;
	}
	,__stopAllMovieClips: function() {
	}
	,__update: function(transformOnly,updateChildren) {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(this.__isMask && renderParent == null) {
			renderParent = this.__maskTarget;
		}
		this.__renderable = this.__visible && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (renderParent == null || !renderParent.__isMask);
		this.__updateTransforms();
		this.__transformDirty = false;
		this.__worldTransformInvalid = false;
		if(!transformOnly) {
			if(openfl_display_DisplayObject.__supportDOM) {
				this.__renderTransformChanged = !this.__renderTransform.equals(this.__renderTransformCache);
				if(this.__renderTransformCache == null) {
					this.__renderTransformCache = this.__renderTransform.clone();
				} else {
					this.__renderTransformCache.copyFrom(this.__renderTransform);
				}
			}
			if(renderParent != null) {
				if(openfl_display_DisplayObject.__supportDOM) {
					var worldVisible = renderParent.__worldVisible && this.__visible;
					this.__worldVisibleChanged = this.__worldVisible != worldVisible;
					this.__worldVisible = worldVisible;
					var worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
					this.__worldAlphaChanged = this.__worldAlpha != worldAlpha;
					this.__worldAlpha = worldAlpha;
				} else {
					this.__worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
				}
				if(this.__objectTransform != null) {
					this.__worldColorTransform.__copyFrom(this.__objectTransform.__colorTransform);
					this.__worldColorTransform.__combine(renderParent.__worldColorTransform);
				} else {
					this.__worldColorTransform.__copyFrom(renderParent.__worldColorTransform);
				}
				if(this.__blendMode == null || this.__blendMode == 10) {
					this.__worldBlendMode = renderParent.__worldBlendMode;
				} else {
					this.__worldBlendMode = this.__blendMode;
				}
				if(this.__shader == null) {
					this.__worldShader = renderParent.__shader;
				} else {
					this.__worldShader = this.__shader;
				}
				if(this.__scale9Grid == null) {
					this.__worldScale9Grid = renderParent.__scale9Grid;
				} else {
					this.__worldScale9Grid = this.__scale9Grid;
				}
			} else {
				this.__worldAlpha = this.get_alpha();
				if(openfl_display_DisplayObject.__supportDOM) {
					this.__worldVisibleChanged = this.__worldVisible != this.__visible;
					this.__worldVisible = this.__visible;
					this.__worldAlphaChanged = this.__worldAlpha != this.get_alpha();
				}
				if(this.__objectTransform != null) {
					this.__worldColorTransform.__copyFrom(this.__objectTransform.__colorTransform);
				} else {
					this.__worldColorTransform.__identity();
				}
				this.__worldBlendMode = this.__blendMode;
				this.__worldShader = this.__shader;
				this.__worldScale9Grid = this.__scale9Grid;
			}
		}
		if(updateChildren && this.get_mask() != null) {
			this.get_mask().__update(transformOnly,true);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local = overrided ? overrideTransform : this.__transform;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		if(this.__renderTransform == null) {
			this.__renderTransform = new openfl_geom_Matrix();
		}
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(!overrided && this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			var target = this.__worldTransform;
			target.a = local.a * parentTransform.a + local.b * parentTransform.c;
			target.b = local.a * parentTransform.b + local.b * parentTransform.d;
			target.c = local.c * parentTransform.a + local.d * parentTransform.c;
			target.d = local.c * parentTransform.b + local.d * parentTransform.d;
			target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__worldTransform.copyFrom(local);
		}
		if(!overrided && renderParent != null) {
			var parentTransform = renderParent.__renderTransform;
			var target = this.__renderTransform;
			target.a = local.a * parentTransform.a + local.b * parentTransform.c;
			target.b = local.a * parentTransform.b + local.b * parentTransform.d;
			target.c = local.c * parentTransform.a + local.d * parentTransform.c;
			target.d = local.c * parentTransform.b + local.d * parentTransform.d;
			target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__renderTransform.copyFrom(local);
		}
		if(this.__scrollRect != null) {
			var _this = this.__renderTransform;
			var px = -this.__scrollRect.x;
			var py = -this.__scrollRect.y;
			_this.tx = px * _this.a + py * _this.c + _this.tx;
			_this.ty = px * _this.b + py * _this.d + _this.ty;
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) {
			value = 1.0;
		}
		if(value < 0.0) {
			value = 0.0;
		}
		if(value != this.__alpha && !this.get_cacheAsBitmap()) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__alpha = value;
	}
	,get_blendMode: function() {
		return this.__blendMode;
	}
	,set_blendMode: function(value) {
		if(value == null) {
			value = 10;
		}
		if(value != this.__blendMode) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__blendMode = value;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters == null) {
			return this.__cacheAsBitmap;
		} else {
			return true;
		}
	}
	,set_cacheAsBitmap: function(value) {
		if(value != this.__cacheAsBitmap) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__cacheAsBitmap = value;
	}
	,get_cacheAsBitmapMatrix: function() {
		return this.__cacheAsBitmapMatrix;
	}
	,set_cacheAsBitmapMatrix: function(value) {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return this.__cacheAsBitmapMatrix = value != null ? value.clone() : value;
	}
	,get_filters: function() {
		if(this.__filters == null) {
			return [];
		} else {
			return this.__filters.slice();
		}
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			this.__filters = value;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		} else if(this.__filters != null) {
			this.__filters = null;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_height: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var height = rect.height;
		openfl_geom_Rectangle.__pool.release(rect);
		return height;
	}
	,set_height: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.height) {
			this.set_scaleY(value / rect.height);
		} else {
			this.set_scaleY(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_loaderInfo: function() {
		if(this.stage != null) {
			return openfl_utils__$internal_Lib.current.__loaderInfo;
		}
		return null;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value == this.__mask) {
			return value;
		}
		if(value != this.__mask) {
			this.__setTransformDirty();
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskTarget = null;
			this.__mask.__setTransformDirty();
			var _this = this.__mask;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		if(value != null) {
			value.__isMask = true;
			value.__maskTarget = this;
			value.__setWorldTransformInvalid();
		}
		if(this.__cacheBitmap != null && this.__cacheBitmap.get_mask() != value) {
			this.__cacheBitmap.set_mask(value);
		}
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl_utils__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl_utils__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.tx;
		} else {
			return 1.0 / norm * (_this.c * (_this.ty - mouseY) + _this.d * (mouseX - _this.tx));
		}
	}
	,get_mouseY: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl_utils__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl_utils__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.ty;
		} else {
			return 1.0 / norm * (_this.a * (mouseY - _this.ty) + _this.b * (_this.tx - mouseX));
		}
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) {
			return openfl_utils__$internal_Lib.current;
		}
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			this.__transform.a = this.__rotationCosine * this.__scaleX;
			this.__transform.b = this.__rotationSine * this.__scaleX;
			this.__transform.c = -this.__rotationSine * this.__scaleY;
			this.__transform.d = this.__rotationCosine * this.__scaleY;
			this.__setTransformDirty();
		}
		return value;
	}
	,get_scale9Grid: function() {
		if(this.__scale9Grid == null) {
			return null;
		}
		return this.__scale9Grid.clone();
	}
	,set_scale9Grid: function(value) {
		if(value == null && this.__scale9Grid == null) {
			return value;
		}
		if(value != null && this.__scale9Grid != null && this.__scale9Grid.equals(value)) {
			return value;
		}
		if(value != null) {
			if(this.__scale9Grid == null) {
				this.__scale9Grid = new openfl_geom_Rectangle();
			}
			this.__scale9Grid.copyFrom(value);
		} else {
			this.__scale9Grid = null;
		}
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			this.__scaleX = value;
			if(this.__transform.b == 0) {
				if(value != this.__transform.a) {
					this.__setTransformDirty();
				}
				this.__transform.a = value;
			} else {
				var a = this.__rotationCosine * value;
				var b = this.__rotationSine * value;
				if(this.__transform.a != a || this.__transform.b != b) {
					this.__setTransformDirty();
				}
				this.__transform.a = a;
				this.__transform.b = b;
			}
		}
		return value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(value != this.__scaleY) {
			this.__scaleY = value;
			if(this.__transform.c == 0) {
				if(value != this.__transform.d) {
					this.__setTransformDirty();
				}
				this.__transform.d = value;
			} else {
				var c = -this.__rotationSine * value;
				var d = this.__rotationCosine * value;
				if(this.__transform.d != d || this.__transform.c != c) {
					this.__setTransformDirty();
				}
				this.__transform.c = c;
				this.__transform.d = d;
			}
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) {
			return null;
		}
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value == null && this.__scrollRect == null) {
			return value;
		}
		if(value != null && this.__scrollRect != null && this.__scrollRect.equals(value)) {
			return value;
		}
		if(value != null) {
			if(this.__scrollRect == null) {
				this.__scrollRect = new openfl_geom_Rectangle();
			}
			this.__scrollRect.copyFrom(value);
		} else {
			this.__scrollRect = null;
		}
		this.__setTransformDirty();
		if(openfl_display_DisplayObject.__supportDOM) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_shader: function() {
		return this.__shader;
	}
	,set_shader: function(value) {
		this.__shader = value;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		return this.__objectTransform;
	}
	,set_transform: function(value) {
		if(value == null) {
			throw new openfl_errors_TypeError("Parameter transform must be non-null.");
		}
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		this.__setTransformDirty();
		this.__objectTransform.set_matrix(value.get_matrix());
		if(!this.__objectTransform.__colorTransform.__equals(value.__colorTransform,true) || !this.get_cacheAsBitmap() && this.__objectTransform.__colorTransform.alphaMultiplier != value.__colorTransform.alphaMultiplier) {
			this.__objectTransform.__colorTransform.__copyFrom(value.get_colorTransform());
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var width = rect.width;
		openfl_geom_Rectangle.__pool.release(rect);
		return width;
	}
	,set_width: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.width) {
			this.set_scaleX(value / rect.width);
		} else {
			this.set_scaleX(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			this.__setTransformDirty();
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			this.__setTransformDirty();
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_shader:"set_shader",get_shader:"get_shader",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_scale9Grid:"set_scale9Grid",get_scale9Grid:"get_scale9Grid",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",get_loaderInfo:"get_loaderInfo",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_cacheAsBitmapMatrix:"set_cacheAsBitmapMatrix",get_cacheAsBitmapMatrix:"get_cacheAsBitmapMatrix",set_cacheAsBitmap:"set_cacheAsBitmap",get_cacheAsBitmap:"get_cacheAsBitmap",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = null;
	this.__tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = "openfl.display.InteractiveObject";
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	doubleClickEnabled: null
	,focusRect: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,softKeyboardInputAreaOfInterest: null
	,__tabEnabled: null
	,__tabIndex: null
	,requestSoftKeyboard: function() {
		openfl_utils__$internal_Lib.notImplemented({ fileName : "openfl/display/InteractiveObject.hx", lineNumber : 1251, className : "openfl.display.InteractiveObject", methodName : "requestSoftKeyboard"});
		return false;
	}
	,__allowMouseFocus: function() {
		if(this.mouseEnabled) {
			return this.get_tabEnabled();
		} else {
			return false;
		}
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) {
				this.parent.__getInteractive(stack);
			}
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__tabTest: function(stack) {
		if(this.get_tabEnabled()) {
			stack.push(this);
		}
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == true) {
			return true;
		} else {
			return false;
		}
	}
	,set_tabEnabled: function(value) {
		if(this.__tabEnabled != value) {
			this.__tabEnabled = value;
			this.dispatchEvent(new openfl_events_Event("tabEnabledChange",true,false));
		}
		return this.__tabEnabled;
	}
	,get_tabIndex: function() {
		return this.__tabIndex;
	}
	,set_tabIndex: function(value) {
		if(this.__tabIndex != value) {
			if(value < -1) {
				throw new openfl_errors_RangeError("Parameter tabIndex must be a non-negative number; got " + value);
			}
			this.__tabIndex = value;
			this.dispatchEvent(new openfl_events_Event("tabIndexChange",true,false));
		}
		return this.__tabIndex;
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tabIndex:"set_tabIndex",get_tabIndex:"get_tabIndex",set_tabEnabled:"set_tabEnabled",get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__tabChildren = true;
	this.__children = [];
	this.__removedChildren = openfl_Vector.toObjectVector(null);
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = "openfl.display.DisplayObjectContainer";
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	mouseChildren: null
	,__removedChildren: null
	,__tabChildren: null
	,addChild: function(child) {
		return this.addChildAt(child,this.get_numChildren());
	}
	,addChildAt: function(child,index) {
		if(child == null) {
			var error = new openfl_errors_TypeError("Error #2007: Parameter child must be non-null.");
			error.errorID = 2007;
			throw error;
		} else if(child.stage == child) {
			var error = new openfl_errors_ArgumentError("Error #3783: A Stage object cannot be added as the child of another object.");
			error.errorID = 3783;
			throw error;
		}
		if(index > this.__children.length || index < 0) {
			throw haxe_Exception.thrown("Invalid index position " + index);
		}
		if(child.parent == this) {
			if(this.__children[index] != child) {
				HxOverrides.remove(this.__children,child);
				this.__children.splice(index,0,child);
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
			}
		} else {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			this.__children.splice(index,0,child);
			child.parent = this;
			var addedToStage = this.stage != null && child.stage == null;
			if(addedToStage) {
				child.__setStageReference(this.stage);
			}
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = new openfl_events_Event("added");
			event.bubbles = true;
			event.target = child;
			child.__dispatchWithCapture(event);
			if(addedToStage) {
				event = new openfl_events_Event("addedToStage",false,false);
				child.__dispatchWithCapture(event);
				child.__dispatchChildren(event);
			}
		}
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.__children[index];
		}
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) {
				return child;
			}
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g = 0;
		var _g1 = this.__children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__children[i] == child) {
				return i;
			}
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false,this);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = new openfl_events_Event("removed",true);
			child.__dispatchWithCapture(event);
			if(this.stage != null) {
				if(child.stage != null && this.stage.get_focus() == child) {
					this.stage.set_focus(null);
				}
				var event = new openfl_events_Event("removedFromStage",false,false);
				child.__dispatchWithCapture(event);
				child.__dispatchChildren(event);
				child.__setStageReference(null);
			}
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			child.__setTransformDirty();
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.removeChild(this.__children[index]);
		}
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) {
				return;
			}
		}
		if(beginIndex > this.__children.length - 1) {
			return;
		} else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) {
			throw new openfl_errors_RangeError("The supplied index is out of bounds.");
		}
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			--numRemovals;
		}
	}
	,resolve: function(fieldName) {
		if(this.__children == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == fieldName) {
				return child;
			}
		}
		return null;
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,stopAllMovieClips: function() {
		this.__stopAllMovieClips();
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = this.__children.indexOf(child1);
			var index2 = this.__children.indexOf(child2);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,swapChildrenAt: function(index1,index2) {
		var swap = this.__children[index1];
		this.__children[index1] = this.__children[index2];
		this.__children[index2] = swap;
		swap = null;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__cleanup: function() {
		openfl_display_InteractiveObject.prototype.__cleanup.call(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__cleanup();
		}
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
	}
	,__cleanupRemovedChildren: function() {
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
	}
	,__dispatchChildren: function(event) {
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				event.target = child;
				if(!child.__dispatchWithCapture(event)) {
					break;
				}
				child.__dispatchChildren(event);
			}
		}
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getFilterBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getFilterBounds.call(this,rect,matrix);
		if(this.__scrollRect != null) {
			return;
		}
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			var childRect = openfl_geom_Rectangle.__pool.get();
			child.__getFilterBounds(childRect,childWorldTransform);
			rect.__expand(childRect.x,childRect.y,childRect.width,childRect.height);
			openfl_geom_Rectangle.__pool.release(childRect);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getRenderBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return false;
			}
			openfl_geom_Point.__pool.release(point);
		}
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) {
						stack.push(hitObject);
					}
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive && stack.length > length) {
								break;
							}
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else {
			var hitTest = false;
			while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i])) {
				hitTest = true;
				if(stack == null) {
					break;
				}
			}
			return hitTest;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) {
			return true;
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		openfl_display_InteractiveObject.prototype.__readGraphicsData.call(this,graphicsData,recurse);
		if(recurse) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__readGraphicsData(graphicsData,recurse);
			}
		}
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__setStageReference(stage);
			}
		}
	}
	,__setWorldTransformInvalid: function() {
		if(!this.__worldTransformInvalid) {
			this.__worldTransformInvalid = true;
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setWorldTransformInvalid();
				}
			}
		}
	}
	,__stopAllMovieClips: function() {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__stopAllMovieClips();
		}
	}
	,__tabTest: function(stack) {
		openfl_display_InteractiveObject.prototype.__tabTest.call(this,stack);
		if(!this.get_tabChildren()) {
			return;
		}
		var interactive = false;
		var interactiveObject = null;
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			interactive = child.__getInteractive(null);
			if(interactive) {
				interactiveObject = child;
				interactiveObject.__tabTest(stack);
			}
		}
	}
	,__update: function(transformOnly,updateChildren) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren);
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true);
			}
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,get_tabChildren: function() {
		return this.__tabChildren;
	}
	,set_tabChildren: function(value) {
		if(this.__tabChildren != value) {
			this.__tabChildren = value;
			this.dispatchEvent(new openfl_events_Event("tabChildrenChange",true,false));
		}
		return this.__tabChildren;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_tabChildren:"set_tabChildren",get_tabChildren:"get_tabChildren",get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.__drawableType = 4;
	this.__buttonMode = false;
	this.useHandCursor = true;
	if(openfl_display_Sprite.__constructor != null) {
		var method = openfl_display_Sprite.__constructor;
		openfl_display_Sprite.__constructor = null;
		method(this);
	}
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = "openfl.display.Sprite";
openfl_display_Sprite.__constructor = null;
openfl_display_Sprite.fromTimeline = function(timeline) {
	var sprite = new openfl_display_Sprite();
	timeline.initializeSprite(sprite);
	return sprite;
};
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	dropTarget: null
	,hitArea: null
	,useHandCursor: null
	,__buttonMode: null
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
		if(this.stage != null) {
			this.stage.__startDrag(this,lockCenter,bounds);
		}
	}
	,stopDrag: function() {
		if(this.stage != null) {
			this.stage.__stopDrag(this);
		}
	}
	,__getCursor: function() {
		if(this.__buttonMode && this.useHandCursor) {
			return "button";
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(!hitObject.get_visible() || this.__isMask) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return this.__hitTestHitArea(x,y,shapeFlag,stack,true,hitObject);
			}
			openfl_geom_Point.__pool.release(point);
		}
		if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
			if(stack != null) {
				return interactiveOnly;
			} else {
				return true;
			}
		} else if(this.hitArea == null && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
			if(stack != null && (!interactiveOnly || this.mouseEnabled)) {
				stack.push(hitObject);
			}
			return true;
		}
		return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__hitTestHitArea: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled) {
				this.hitArea.mouseEnabled = true;
				var hitTest = this.hitArea.__hitTest(x,y,shapeFlag,null,true,hitObject);
				this.hitArea.mouseEnabled = false;
				if(stack != null && hitTest) {
					stack[stack.length] = hitObject;
				}
				return hitTest;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) {
			return true;
		} else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.__buttonMode;
		} else {
			return this.__tabEnabled;
		}
	}
	,get_buttonMode: function() {
		return this.__buttonMode;
	}
	,set_buttonMode: function(value) {
		return this.__buttonMode = value;
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics",set_buttonMode:"set_buttonMode",get_buttonMode:"get_buttonMode"})
});
var Main = function() {
	this.startFullscreen = false;
	this.skipSplash = true;
	this.framerate = 60;
	this.zoom = -1;
	this.initialState = TitleState;
	this.gameHeight = 720;
	this.gameWidth = 1280;
	openfl_display_Sprite.call(this);
	if(this.stage != null) {
		this.init();
	} else {
		this.addEventListener("addedToStage",$bind(this,this.init));
	}
};
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.fpsCounter = null;
Main.main = function() {
	openfl_Lib.get_current().addChild(new Main());
};
Main.__super__ = openfl_display_Sprite;
Main.prototype = $extend(openfl_display_Sprite.prototype,{
	gameWidth: null
	,gameHeight: null
	,initialState: null
	,zoom: null
	,framerate: null
	,skipSplash: null
	,startFullscreen: null
	,init: function(E) {
		if(this.hasEventListener("addedToStage")) {
			this.removeEventListener("addedToStage",$bind(this,this.init));
		}
		this.setupGame();
	}
	,setupGame: function() {
		var stageWidth = openfl_Lib.get_current().stage.stageWidth;
		var stageHeight = openfl_Lib.get_current().stage.stageHeight;
		if(this.zoom == -1) {
			var ratioX = stageWidth / this.gameWidth;
			var ratioY = stageHeight / this.gameHeight;
			this.zoom = Math.min(ratioX,ratioY);
			this.gameWidth = Math.ceil(stageWidth / this.zoom);
			this.gameHeight = Math.ceil(stageHeight / this.zoom);
		}
		this.initialState = TitleState;
		this.addChild(new flixel_FlxGame(this.gameWidth,this.gameHeight,this.initialState,this.zoom,this.framerate,this.framerate,this.skipSplash,this.startFullscreen));
		Main.fpsCounter = new openfl_display_FPS(10,3,16777215);
		this.addChild(Main.fpsCounter);
	}
	,__class__: Main
});
var DocumentClass = function(current) {
	current.addChild(this);
	Main.call(this);
	this.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = "DocumentClass";
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	__class__: DocumentClass
});
var BGSprite = function(image,x,y,scrollX,scrollY,animations,loopAnims) {
	if(loopAnims == null) {
		loopAnims = false;
	}
	if(scrollY == null) {
		scrollY = 1;
	}
	if(scrollX == null) {
		scrollX = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.idleAnim = null;
	flixel_FlxSprite.call(this,x,y);
	if(animations != null) {
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + image + ".png","IMAGE",library),Paths.getPath("images/" + image + ".xml","TEXT",library)));
		var _g = 0;
		while(_g < animations.length) {
			var anim = animations[_g];
			++_g;
			this.animation.addByPrefix(anim,anim,24,loopAnims);
			this.animation.play(anim);
			if(this.idleAnim == null) {
				this.idleAnim = anim;
			}
		}
	} else {
		this.loadGraphic(Paths.getPath("images/" + image + ".png","IMAGE",null));
		this.set_active(false);
	}
	this.scrollFactor.set(scrollX,scrollY);
	this.set_antialiasing(true);
};
$hxClasses["BGSprite"] = BGSprite;
BGSprite.__name__ = "BGSprite";
BGSprite.__super__ = flixel_FlxSprite;
BGSprite.prototype = $extend(flixel_FlxSprite.prototype,{
	idleAnim: null
	,dance: function() {
		if(this.idleAnim != null) {
			this.animation.play(this.idleAnim);
		}
	}
	,__class__: BGSprite
});
var BackgroundDancer = function(x,y) {
	this.danceDir = false;
	flixel_FlxSprite.call(this,x,y);
	var library = null;
	this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "limo/limoDancer" + ".png","IMAGE",library),Paths.getPath("images/" + "limo/limoDancer" + ".xml","TEXT",library)));
	this.animation.addByIndices("danceLeft","bg dancer sketch PINK",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"",24,false);
	this.animation.addByIndices("danceRight","bg dancer sketch PINK",[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"",24,false);
	this.animation.play("danceLeft");
	this.animation.finish();
	this.set_antialiasing(true);
};
$hxClasses["BackgroundDancer"] = BackgroundDancer;
BackgroundDancer.__name__ = "BackgroundDancer";
BackgroundDancer.__super__ = flixel_FlxSprite;
BackgroundDancer.prototype = $extend(flixel_FlxSprite.prototype,{
	danceDir: null
	,dance: function() {
		this.danceDir = !this.danceDir;
		if(this.danceDir) {
			this.animation.play("danceRight",true);
		} else {
			this.animation.play("danceLeft",true);
		}
	}
	,__class__: BackgroundDancer
});
var BackgroundGirls = function(x,y) {
	this.danceDir = false;
	flixel_FlxSprite.call(this,x,y);
	var library = null;
	this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/bgFreaks" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/bgFreaks" + ".xml","TEXT",library)));
	this.animation.addByIndices("danceLeft","BG girls group",CoolUtil.numberArray(14),"",24,false);
	this.animation.addByIndices("danceRight","BG girls group",CoolUtil.numberArray(30,15),"",24,false);
	this.animation.play("danceLeft");
	this.animation.finish();
};
$hxClasses["BackgroundGirls"] = BackgroundGirls;
BackgroundGirls.__name__ = "BackgroundGirls";
BackgroundGirls.__super__ = flixel_FlxSprite;
BackgroundGirls.prototype = $extend(flixel_FlxSprite.prototype,{
	danceDir: null
	,getScared: function() {
		this.animation.addByIndices("danceLeft","BG fangirls dissuaded",CoolUtil.numberArray(14),"",24,false);
		this.animation.addByIndices("danceRight","BG fangirls dissuaded",CoolUtil.numberArray(30,15),"",24,false);
		this.dance();
		this.animation.finish();
	}
	,dance: function() {
		this.danceDir = !this.danceDir;
		if(this.danceDir) {
			this.animation.play("danceRight",true);
		} else {
			this.animation.play("danceLeft",true);
		}
	}
	,__class__: BackgroundGirls
});
var Character = function(x,y,character,isPlayer) {
	if(isPlayer == null) {
		isPlayer = false;
	}
	if(character == null) {
		character = "bf";
	}
	this.danced = false;
	this.animationNotes = [];
	this.holdTimer = 0;
	this.curCharacter = "bf";
	this.isPlayer = false;
	this.debugMode = false;
	flixel_FlxSprite.call(this,x,y);
	this.animOffsets = new haxe_ds_StringMap();
	this.curCharacter = character;
	this.isPlayer = isPlayer;
	var tex;
	this.set_antialiasing(true);
	switch(this.curCharacter) {
	case "bf":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/BOYFRIEND" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/BOYFRIEND" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("idle","BF idle dance");
		this.quickAnimAdd("singUP","BF NOTE UP0");
		this.quickAnimAdd("singLEFT","BF NOTE LEFT0");
		this.quickAnimAdd("singRIGHT","BF NOTE RIGHT0");
		this.quickAnimAdd("singDOWN","BF NOTE DOWN0");
		this.quickAnimAdd("singUPmiss","BF NOTE UP MISS");
		this.quickAnimAdd("singLEFTmiss","BF NOTE LEFT MISS");
		this.quickAnimAdd("singRIGHTmiss","BF NOTE RIGHT MISS");
		this.quickAnimAdd("singDOWNmiss","BF NOTE DOWN MISS");
		this.quickAnimAdd("hey","BF HEY");
		this.quickAnimAdd("firstDeath","BF dies");
		this.animation.addByPrefix("deathLoop","BF Dead Loop",24,true);
		this.quickAnimAdd("deathConfirm","BF Dead confirm");
		this.animation.addByPrefix("scared","BF idle shaking",24,true);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		this.set_flipX(true);
		this.loadOffsetFile(this.curCharacter);
		break;
	case "bf-car":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/bfCar" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/bfCar" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("idle","BF idle dance");
		this.quickAnimAdd("singUP","BF NOTE UP0");
		this.quickAnimAdd("singLEFT","BF NOTE LEFT0");
		this.quickAnimAdd("singRIGHT","BF NOTE RIGHT0");
		this.quickAnimAdd("singDOWN","BF NOTE DOWN0");
		this.quickAnimAdd("singUPmiss","BF NOTE UP MISS");
		this.quickAnimAdd("singLEFTmiss","BF NOTE LEFT MISS");
		this.quickAnimAdd("singRIGHTmiss","BF NOTE RIGHT MISS");
		this.quickAnimAdd("singDOWNmiss","BF NOTE DOWN MISS");
		this.animation.addByIndices("idleHair","BF idle dance",[10,11,12,13],"",24,true);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		this.set_flipX(true);
		break;
	case "bf-christmas":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/bfChristmas" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/bfChristmas" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("idle","BF idle dance");
		this.quickAnimAdd("singUP","BF NOTE UP0");
		this.quickAnimAdd("singLEFT","BF NOTE LEFT0");
		this.quickAnimAdd("singRIGHT","BF NOTE RIGHT0");
		this.quickAnimAdd("singDOWN","BF NOTE DOWN0");
		this.quickAnimAdd("singUPmiss","BF NOTE UP MISS");
		this.quickAnimAdd("singLEFTmiss","BF NOTE LEFT MISS");
		this.quickAnimAdd("singRIGHTmiss","BF NOTE RIGHT MISS");
		this.quickAnimAdd("singDOWNmiss","BF NOTE DOWN MISS");
		this.quickAnimAdd("hey","BF HEY");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		this.set_flipX(true);
		break;
	case "bf-holding-gf":
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/bfAndGF" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/bfAndGF" + ".xml","TEXT",library)));
		this.quickAnimAdd("idle","BF idle dance");
		this.quickAnimAdd("singDOWN","BF NOTE DOWN0");
		this.quickAnimAdd("singLEFT","BF NOTE LEFT0");
		this.quickAnimAdd("singRIGHT","BF NOTE RIGHT0");
		this.quickAnimAdd("singUP","BF NOTE UP0");
		this.quickAnimAdd("singDOWNmiss","BF NOTE DOWN MISS");
		this.quickAnimAdd("singLEFTmiss","BF NOTE LEFT MISS");
		this.quickAnimAdd("singRIGHTmiss","BF NOTE RIGHT MISS");
		this.quickAnimAdd("singUPmiss","BF NOTE UP MISS");
		this.quickAnimAdd("bfCatch","BF catches GF");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		this.set_flipX(true);
		break;
	case "bf-holding-gf-dead":
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/bfHoldingGF-DEAD" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/bfHoldingGF-DEAD" + ".xml","TEXT",library)));
		this.quickAnimAdd("singUP","BF Dead with GF Loop");
		this.quickAnimAdd("firstDeath","BF Dies with GF");
		this.animation.addByPrefix("deathLoop","BF Dead with GF Loop",24,true);
		this.quickAnimAdd("deathConfirm","RETRY confirm holding gf");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("firstDeath");
		this.set_flipX(true);
		break;
	case "bf-pixel":
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/bfPixel" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/bfPixel" + ".xml","TEXT",library)));
		this.quickAnimAdd("idle","BF IDLE");
		this.quickAnimAdd("singUP","BF UP NOTE");
		this.quickAnimAdd("singLEFT","BF LEFT NOTE");
		this.quickAnimAdd("singRIGHT","BF RIGHT NOTE");
		this.quickAnimAdd("singDOWN","BF DOWN NOTE");
		this.quickAnimAdd("singUPmiss","BF UP MISS");
		this.quickAnimAdd("singLEFTmiss","BF LEFT MISS");
		this.quickAnimAdd("singRIGHTmiss","BF RIGHT MISS");
		this.quickAnimAdd("singDOWNmiss","BF DOWN MISS");
		this.loadOffsetFile(this.curCharacter);
		this.setGraphicSize(this.get_width() * 6 | 0);
		this.updateHitbox();
		this.playAnim("idle");
		var _g = this;
		_g.set_width(_g.get_width() - 100);
		var _g = this;
		_g.set_height(_g.get_height() - 100);
		this.set_antialiasing(false);
		this.set_flipX(true);
		break;
	case "bf-pixel-dead":
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/bfPixelsDEAD" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/bfPixelsDEAD" + ".xml","TEXT",library)));
		this.quickAnimAdd("singUP","BF Dies pixel");
		this.quickAnimAdd("firstDeath","BF Dies pixel");
		this.animation.addByPrefix("deathLoop","Retry Loop",24,true);
		this.quickAnimAdd("deathConfirm","RETRY CONFIRM");
		this.animation.play("firstDeath");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("firstDeath");
		this.setGraphicSize(this.get_width() * 6 | 0);
		this.updateHitbox();
		this.set_antialiasing(false);
		this.set_flipX(true);
		break;
	case "dad":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/DADDY_DEAREST" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/DADDY_DEAREST" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("idle","Dad idle dance");
		this.quickAnimAdd("singUP","Dad Sing Note UP");
		this.quickAnimAdd("singRIGHT","Dad Sing Note RIGHT");
		this.quickAnimAdd("singDOWN","Dad Sing Note DOWN");
		this.quickAnimAdd("singLEFT","Dad Sing Note LEFT");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		break;
	case "gf":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/GF_assets" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/GF_assets" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("cheer","GF Cheer");
		this.quickAnimAdd("singLEFT","GF left note");
		this.quickAnimAdd("singRIGHT","GF Right Note");
		this.quickAnimAdd("singUP","GF Up Note");
		this.quickAnimAdd("singDOWN","GF Down Note");
		this.animation.addByIndices("sad","gf sad",[0,1,2,3,4,5,6,7,8,9,10,11,12],"",24,true);
		this.animation.addByIndices("danceLeft","GF Dancing Beat",[30,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"",24,false);
		this.animation.addByIndices("danceRight","GF Dancing Beat",[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"",24,false);
		this.animation.addByIndices("hairBlow","GF Dancing Beat Hair blowing",[0,1,2,3],"",24);
		this.animation.addByIndices("hairFall","GF Dancing Beat Hair Landing",[0,1,2,3,4,5,6,7,8,9,10,11],"",24,false);
		this.animation.addByPrefix("scared","GF FEAR",24,true);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("danceRight");
		break;
	case "gf-car":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/gfCar" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/gfCar" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.animation.addByIndices("singUP","GF Dancing Beat Hair blowing CAR",[0],"",24,false);
		this.animation.addByIndices("danceLeft","GF Dancing Beat Hair blowing CAR",[30,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"",24,false);
		this.animation.addByIndices("danceRight","GF Dancing Beat Hair blowing CAR",[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"",24,false);
		this.animation.addByIndices("idleHair","GF Dancing Beat Hair blowing CAR",[10,11,12,25,26,27],"",24,true);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("danceRight");
		break;
	case "gf-christmas":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/gfChristmas" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/gfChristmas" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("cheer","GF Cheer");
		this.quickAnimAdd("singLEFT","GF left note");
		this.quickAnimAdd("singRIGHT","GF Right Note");
		this.quickAnimAdd("singUP","GF Up Note");
		this.quickAnimAdd("singDOWN","GF Down Note");
		this.animation.addByIndices("sad","gf sad",[0,1,2,3,4,5,6,7,8,9,10,11,12],"",24,false);
		this.animation.addByIndices("danceLeft","GF Dancing Beat",[30,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"",24,false);
		this.animation.addByIndices("danceRight","GF Dancing Beat",[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"",24,false);
		this.animation.addByIndices("hairBlow","GF Dancing Beat Hair blowing",[0,1,2,3],"",24);
		this.animation.addByIndices("hairFall","GF Dancing Beat Hair Landing",[0,1,2,3,4,5,6,7,8,9,10,11],"",24,false);
		this.animation.addByPrefix("scared","GF FEAR",24,true);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("danceRight");
		break;
	case "gf-pixel":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/gfPixel" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/gfPixel" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.animation.addByIndices("singUP","GF IDLE",[2],"",24,false);
		this.animation.addByIndices("danceLeft","GF IDLE",[30,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"",24,false);
		this.animation.addByIndices("danceRight","GF IDLE",[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"",24,false);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("danceRight");
		this.setGraphicSize(this.get_width() * PlayState.daPixelZoom | 0);
		this.updateHitbox();
		this.set_antialiasing(false);
		break;
	case "gf-tankmen":
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/gfTankmen" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/gfTankmen" + ".xml","TEXT",library)));
		this.animation.addByIndices("sad","GF Crying at Gunpoint",[0,1,2,3,4,5,6,7,8,9,10,11,12],"",24,true);
		this.animation.addByIndices("danceLeft","GF Dancing at Gunpoint",[30,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"",24,false);
		this.animation.addByIndices("danceRight","GF Dancing at Gunpoint",[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"",24,false);
		this.loadOffsetFile("gf");
		this.playAnim("danceRight");
		break;
	case "mom":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/Mom_Assets" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/Mom_Assets" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("idle","Mom Idle");
		this.quickAnimAdd("singUP","Mom Up Pose");
		this.quickAnimAdd("singDOWN","MOM DOWN POSE");
		this.quickAnimAdd("singLEFT","Mom Left Pose");
		this.quickAnimAdd("singRIGHT","Mom Pose Left");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		break;
	case "mom-car":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/momCar" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/momCar" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("idle","Mom Idle");
		this.quickAnimAdd("singUP","Mom Up Pose");
		this.quickAnimAdd("singDOWN","MOM DOWN POSE");
		this.quickAnimAdd("singLEFT","Mom Left Pose");
		this.quickAnimAdd("singRIGHT","Mom Pose Left");
		this.animation.addByIndices("idleHair","Mom Idle",[10,11,12,13],"",24,true);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		break;
	case "monster":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/Monster_Assets" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/Monster_Assets" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("idle","monster idle");
		this.quickAnimAdd("singUP","monster up note");
		this.quickAnimAdd("singDOWN","monster down");
		this.quickAnimAdd("singLEFT","Monster left note");
		this.quickAnimAdd("singRIGHT","Monster Right note");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		break;
	case "monster-christmas":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/monsterChristmas" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/monsterChristmas" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("idle","monster idle");
		this.quickAnimAdd("singUP","monster up note");
		this.quickAnimAdd("singDOWN","monster down");
		this.quickAnimAdd("singLEFT","Monster left note");
		this.quickAnimAdd("singRIGHT","Monster Right note");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		break;
	case "parents-christmas":
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/mom_dad_christmas_assets" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/mom_dad_christmas_assets" + ".xml","TEXT",library)));
		this.quickAnimAdd("idle","Parent Christmas Idle");
		this.quickAnimAdd("singUP","Parent Up Note Dad");
		this.quickAnimAdd("singDOWN","Parent Down Note Dad");
		this.quickAnimAdd("singLEFT","Parent Left Note Dad");
		this.quickAnimAdd("singRIGHT","Parent Right Note Dad");
		this.quickAnimAdd("singUP-alt","Parent Up Note Mom");
		this.quickAnimAdd("singDOWN-alt","Parent Down Note Mom");
		this.quickAnimAdd("singLEFT-alt","Parent Left Note Mom");
		this.quickAnimAdd("singRIGHT-alt","Parent Right Note Mom");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		break;
	case "pico":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/Pico_FNF_assetss" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/Pico_FNF_assetss" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("idle","Pico Idle Dance");
		this.quickAnimAdd("singUP","pico Up note0");
		this.quickAnimAdd("singDOWN","Pico Down Note0");
		if(isPlayer) {
			this.quickAnimAdd("singLEFT","Pico NOTE LEFT0");
			this.quickAnimAdd("singRIGHT","Pico Note Right0");
			this.quickAnimAdd("singRIGHTmiss","Pico Note Right Miss");
			this.quickAnimAdd("singLEFTmiss","Pico NOTE LEFT miss");
		} else {
			this.quickAnimAdd("singLEFT","Pico Note Right0");
			this.quickAnimAdd("singRIGHT","Pico NOTE LEFT0");
			this.quickAnimAdd("singRIGHTmiss","Pico NOTE LEFT miss");
			this.quickAnimAdd("singLEFTmiss","Pico Note Right Miss");
		}
		this.quickAnimAdd("singUPmiss","pico Up note miss");
		this.quickAnimAdd("singDOWNmiss","Pico Down Note MISS");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		this.set_flipX(true);
		break;
	case "pico-speaker":
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/picoSpeaker" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/picoSpeaker" + ".xml","TEXT",library)));
		this.quickAnimAdd("shoot1","Pico shoot 1");
		this.quickAnimAdd("shoot2","Pico shoot 2");
		this.quickAnimAdd("shoot3","Pico shoot 3");
		this.quickAnimAdd("shoot4","Pico shoot 4");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("shoot1");
		this.loadMappedAnims();
		break;
	case "senpai":
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/senpai" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/senpai" + ".xml","TEXT",library)));
		this.quickAnimAdd("idle","Senpai Idle");
		this.quickAnimAdd("singUP","SENPAI UP NOTE");
		this.quickAnimAdd("singLEFT","SENPAI LEFT NOTE");
		this.quickAnimAdd("singRIGHT","SENPAI RIGHT NOTE");
		this.quickAnimAdd("singDOWN","SENPAI DOWN NOTE");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		this.setGraphicSize(this.get_width() * 6 | 0);
		this.updateHitbox();
		this.set_antialiasing(false);
		break;
	case "senpai-angry":
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/senpai" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/senpai" + ".xml","TEXT",library)));
		this.quickAnimAdd("idle","Angry Senpai Idle");
		this.quickAnimAdd("singUP","Angry Senpai UP NOTE");
		this.quickAnimAdd("singLEFT","Angry Senpai LEFT NOTE");
		this.quickAnimAdd("singRIGHT","Angry Senpai RIGHT NOTE");
		this.quickAnimAdd("singDOWN","Angry Senpai DOWN NOTE");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		this.setGraphicSize(this.get_width() * 6 | 0);
		this.updateHitbox();
		this.set_antialiasing(false);
		break;
	case "spirit":
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSpriteSheetPacker(Paths.getPath("images/" + "characters/spirit" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/spirit" + ".txt","TEXT",library)));
		this.quickAnimAdd("idle","idle spirit_");
		this.quickAnimAdd("singUP","up_");
		this.quickAnimAdd("singRIGHT","right_");
		this.quickAnimAdd("singLEFT","left_");
		this.quickAnimAdd("singDOWN","spirit down_");
		this.loadOffsetFile(this.curCharacter);
		this.setGraphicSize(this.get_width() * 6 | 0);
		this.updateHitbox();
		this.playAnim("idle");
		this.set_antialiasing(false);
		break;
	case "spooky":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/spooky_kids_assets" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/spooky_kids_assets" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("singUP","spooky UP NOTE");
		this.quickAnimAdd("singDOWN","spooky DOWN note");
		this.quickAnimAdd("singLEFT","note sing left");
		this.quickAnimAdd("singRIGHT","spooky sing right");
		this.animation.addByIndices("danceLeft","spooky dance idle",[0,2,6],"",12,false);
		this.animation.addByIndices("danceRight","spooky dance idle",[8,10,12,14],"",12,false);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("danceRight");
		break;
	case "tankman":
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/tankmanCaptain" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/tankmanCaptain" + ".xml","TEXT",library)));
		this.quickAnimAdd("idle","Tankman Idle Dance");
		if(isPlayer) {
			this.quickAnimAdd("singLEFT","Tankman Note Left ");
			this.quickAnimAdd("singRIGHT","Tankman Right Note ");
			this.quickAnimAdd("singLEFTmiss","Tankman Note Left MISS");
			this.quickAnimAdd("singRIGHTmiss","Tankman Right Note MISS");
		} else {
			this.quickAnimAdd("singLEFT","Tankman Right Note ");
			this.quickAnimAdd("singRIGHT","Tankman Note Left ");
			this.quickAnimAdd("singLEFTmiss","Tankman Right Note MISS");
			this.quickAnimAdd("singRIGHTmiss","Tankman Note Left MISS");
		}
		this.quickAnimAdd("singUP","Tankman UP note ");
		this.quickAnimAdd("singDOWN","Tankman DOWN note ");
		this.quickAnimAdd("singUPmiss","Tankman UP note MISS");
		this.quickAnimAdd("singDOWNmiss","Tankman DOWN note MISS");
		this.quickAnimAdd("singDOWN-alt","PRETTY GOOD");
		this.quickAnimAdd("singUP-alt","TANKMAN UGH");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		this.set_flipX(true);
		break;
	}
	this.dance();
	this.animation.finish();
	if(isPlayer) {
		this.set_flipX(!this.flipX);
		if(!StringTools.startsWith(this.curCharacter,"bf")) {
			var oldRight = this.animation._animations.h["singRIGHT"].frames;
			this.animation._animations.h["singRIGHT"].frames = this.animation._animations.h["singLEFT"].frames;
			this.animation._animations.h["singLEFT"].frames = oldRight;
			if(this.animation._animations.h["singRIGHTmiss"] != null) {
				var oldMiss = this.animation._animations.h["singRIGHTmiss"].frames;
				this.animation._animations.h["singRIGHTmiss"].frames = this.animation._animations.h["singLEFTmiss"].frames;
				this.animation._animations.h["singLEFTmiss"].frames = oldMiss;
			}
		}
	}
};
$hxClasses["Character"] = Character;
Character.__name__ = "Character";
Character.__super__ = flixel_FlxSprite;
Character.prototype = $extend(flixel_FlxSprite.prototype,{
	animOffsets: null
	,debugMode: null
	,isPlayer: null
	,curCharacter: null
	,holdTimer: null
	,animationNotes: null
	,loadMappedAnims: function() {
		var sections = Song.loadFromJson("picospeaker","stress").notes;
		var _g = 0;
		while(_g < sections.length) {
			var section = sections[_g];
			++_g;
			var _g1 = 0;
			var _g2 = section.sectionNotes;
			while(_g1 < _g2.length) {
				var note = _g2[_g1];
				++_g1;
				this.animationNotes.push(note);
			}
		}
		TankmenBG.animationNotes = this.animationNotes;
		haxe_Log.trace(this.animationNotes,{ fileName : "source/Character.hx", lineNumber : 511, className : "Character", methodName : "loadMappedAnims"});
		this.animationNotes.sort($bind(this,this.sortAnims));
	}
	,sortAnims: function(x,y) {
		if(x[0] < y[0]) {
			return -1;
		} else if(x[0] > y[0]) {
			return 1;
		} else {
			return 0;
		}
	}
	,quickAnimAdd: function(Name,Prefix) {
		this.animation.addByPrefix(Name,Prefix,24,false);
	}
	,loadOffsetFile: function(char) {
		var offsets = CoolUtil.coolTextFile(Paths.getPath("images/characters/" + char + "Offsets.txt","TEXT",null));
		var _g = 0;
		while(_g < offsets.length) {
			var i = offsets[_g];
			++_g;
			var split = i.split(" ");
			this.addOffset(split[0],Std.parseInt(split[1]),Std.parseInt(split[2]));
		}
	}
	,update: function(elapsed) {
		if(!StringTools.startsWith(this.curCharacter,"bf")) {
			if(StringTools.startsWith(this.animation._curAnim.name,"sing")) {
				this.holdTimer += elapsed;
			}
			var dadVar = 4;
			if(this.curCharacter == "dad") {
				dadVar = 6.1;
			}
			if(this.holdTimer >= Conductor.stepCrochet * dadVar * 0.001) {
				this.dance();
				this.holdTimer = 0;
			}
		}
		if(StringTools.endsWith(this.curCharacter,"-car") && !StringTools.startsWith(this.animation._curAnim.name,"sing") && this.animation._curAnim.finished) {
			this.playAnim("idleHair");
		}
		switch(this.curCharacter) {
		case "gf":
			if(this.animation._curAnim.name == "hairFall" && this.animation._curAnim.finished) {
				this.playAnim("danceRight");
			}
			break;
		case "pico-speaker":
			if(this.animationNotes.length > 0 && Conductor.songPosition > this.animationNotes[0][0]) {
				haxe_Log.trace("played shoot anim" + this.animationNotes[0][1],{ fileName : "source/Character.hx", lineNumber : 568, className : "Character", methodName : "update"});
				var shotDirection = 1;
				if(this.animationNotes[0][1] >= 2) {
					shotDirection = 3;
				}
				shotDirection += flixel_FlxG.random.int(0,1);
				this.playAnim("shoot" + shotDirection,true);
				this.animationNotes.shift();
			}
			if(this.animation._curAnim.finished) {
				this.playAnim(this.animation._curAnim.name,false,false,this.animation._curAnim.frames.length - 3);
			}
			break;
		}
		flixel_FlxSprite.prototype.update.call(this,elapsed);
	}
	,danced: null
	,dance: function() {
		if(!this.debugMode) {
			switch(this.curCharacter) {
			case "gf":case "gf-car":case "gf-christmas":case "gf-pixel":case "gf-tankmen":
				if(!StringTools.startsWith(this.animation._curAnim.name,"hair")) {
					this.danced = !this.danced;
					if(this.danced) {
						this.playAnim("danceRight");
					} else {
						this.playAnim("danceLeft");
					}
				}
				break;
			case "pico-speaker":
				break;
			case "spooky":
				this.danced = !this.danced;
				if(this.danced) {
					this.playAnim("danceRight");
				} else {
					this.playAnim("danceLeft");
				}
				break;
			case "tankman":
				if(!StringTools.endsWith(this.animation._curAnim.name,"DOWN-alt")) {
					this.playAnim("idle");
				}
				break;
			default:
				this.playAnim("idle");
			}
		}
	}
	,playAnim: function(AnimName,Force,Reversed,Frame) {
		if(Frame == null) {
			Frame = 0;
		}
		if(Reversed == null) {
			Reversed = false;
		}
		if(Force == null) {
			Force = false;
		}
		this.animation.play(AnimName,Force,Reversed,Frame);
		var daOffset = this.animOffsets.h[AnimName];
		if(Object.prototype.hasOwnProperty.call(this.animOffsets.h,AnimName)) {
			this.offset.set(daOffset[0],daOffset[1]);
		} else {
			this.offset.set(0,0);
		}
		if(this.curCharacter == "gf") {
			if(AnimName == "singLEFT") {
				this.danced = true;
			} else if(AnimName == "singRIGHT") {
				this.danced = false;
			}
			if(AnimName == "singUP" || AnimName == "singDOWN") {
				this.danced = !this.danced;
			}
		}
	}
	,addOffset: function(name,x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var v = [x,y];
		this.animOffsets.h[name] = v;
	}
	,__class__: Character
});
var Boyfriend = function(x,y,char) {
	if(char == null) {
		char = "bf";
	}
	this.startedDeath = false;
	this.stunned = false;
	Character.call(this,x,y,char,true);
};
$hxClasses["Boyfriend"] = Boyfriend;
Boyfriend.__name__ = "Boyfriend";
Boyfriend.__super__ = Character;
Boyfriend.prototype = $extend(Character.prototype,{
	stunned: null
	,startedDeath: null
	,update: function(elapsed) {
		if(!this.debugMode) {
			if(StringTools.startsWith(this.animation._curAnim.name,"sing")) {
				this.holdTimer += elapsed;
			} else {
				this.holdTimer = 0;
			}
			if(StringTools.endsWith(this.animation._curAnim.name,"miss") && this.animation._curAnim.finished && !this.debugMode) {
				this.playAnim("idle",true,false,10);
			}
			if(this.animation._curAnim.name == "firstDeath" && this.animation._curAnim.finished && this.startedDeath) {
				this.playAnim("deathLoop");
			}
		}
		Character.prototype.update.call(this,elapsed);
	}
	,__class__: Boyfriend
});
var flixel_group_FlxTypedGroup = function(MaxSize) {
	if(MaxSize == null) {
		MaxSize = 0;
	}
	this._marker = 0;
	this.length = 0;
	flixel_FlxBasic.call(this);
	this.members = [];
	this.set_maxSize(Math.abs(MaxSize) | 0);
	this.flixelType = 2;
};
$hxClasses["flixel.group.FlxTypedGroup"] = flixel_group_FlxTypedGroup;
flixel_group_FlxTypedGroup.__name__ = "flixel.group.FlxTypedGroup";
flixel_group_FlxTypedGroup.overlaps = function(Callback,Group,X,Y,InScreenSpace,Camera) {
	var result = false;
	if(Group != null) {
		var i = 0;
		var l = Group.length;
		var basic;
		while(i < l) {
			basic = Group.members[i++];
			if(basic != null && Callback(basic,X,Y,InScreenSpace,Camera)) {
				result = true;
				break;
			}
		}
	}
	return result;
};
flixel_group_FlxTypedGroup.resolveGroup = function(ObjectOrGroup) {
	var group = null;
	if(ObjectOrGroup != null) {
		if(ObjectOrGroup.flixelType == 2) {
			group = ObjectOrGroup;
		} else if(ObjectOrGroup.flixelType == 4) {
			var spriteGroup = ObjectOrGroup;
			group = spriteGroup.group;
		}
	}
	return group;
};
flixel_group_FlxTypedGroup.__super__ = flixel_FlxBasic;
flixel_group_FlxTypedGroup.prototype = $extend(flixel_FlxBasic.prototype,{
	members: null
	,maxSize: null
	,length: null
	,_memberAdded: null
	,_memberRemoved: null
	,_marker: null
	,destroy: function() {
		flixel_FlxBasic.prototype.destroy.call(this);
		flixel_util_FlxDestroyUtil.destroy(this._memberAdded);
		flixel_util_FlxDestroyUtil.destroy(this._memberRemoved);
		if(this.members != null) {
			var i = 0;
			var basic = null;
			while(i < this.length) {
				basic = this.members[i++];
				if(basic != null) {
					basic.destroy();
				}
			}
			this.members = null;
		}
	}
	,update: function(elapsed) {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.active) {
				basic.update(elapsed);
			}
		}
	}
	,draw: function() {
		var i = 0;
		var basic = null;
		var oldDefaultCameras = flixel_FlxCamera._defaultCameras;
		if(this.get_cameras() != null) {
			flixel_FlxCamera._defaultCameras = this.get_cameras();
		}
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.visible) {
				basic.draw();
			}
		}
		flixel_FlxCamera._defaultCameras = oldDefaultCameras;
	}
	,add: function(Object1) {
		if(Object1 == null) {
			return null;
		}
		if(this.members.indexOf(Object1) >= 0) {
			return Object1;
		}
		var index = this.getFirstNull();
		if(index != -1) {
			this.members[index] = Object1;
			if(index >= this.length) {
				this.length = index + 1;
			}
			if(this._memberAdded != null) {
				this._memberAdded.dispatch(Object1);
			}
			return Object1;
		}
		if(this.maxSize > 0 && this.length >= this.maxSize) {
			return Object1;
		}
		this.members.push(Object1);
		this.length++;
		if(this._memberAdded != null) {
			this._memberAdded.dispatch(Object1);
		}
		return Object1;
	}
	,insert: function(position,object) {
		if(object == null) {
			return null;
		}
		if(this.members.indexOf(object) >= 0) {
			return object;
		}
		if(position < this.length && this.members[position] == null) {
			this.members[position] = object;
			if(this._memberAdded != null) {
				this._memberAdded.dispatch(object);
			}
			return object;
		}
		if(this.maxSize > 0 && this.length >= this.maxSize) {
			return object;
		}
		this.members.splice(position,0,object);
		this.length++;
		if(this._memberAdded != null) {
			this._memberAdded.dispatch(object);
		}
		return object;
	}
	,recycle: function(ObjectClass,ObjectFactory,Force,Revive) {
		if(Revive == null) {
			Revive = true;
		}
		if(Force == null) {
			Force = false;
		}
		var basic = null;
		if(this.maxSize > 0) {
			if(this.length < this.maxSize) {
				var object = null;
				if(ObjectFactory != null) {
					object = ObjectFactory();
					this.add(object);
				} else if(ObjectClass != null) {
					object = Type.createInstance(ObjectClass,[]);
					this.add(object);
				}
				return object;
			} else {
				basic = this.members[this._marker++];
				if(this._marker >= this.maxSize) {
					this._marker = 0;
				}
				if(Revive) {
					basic.revive();
				}
				return basic;
			}
		} else {
			basic = this.getFirstAvailable(ObjectClass,Force);
			if(basic != null) {
				if(Revive) {
					basic.revive();
				}
				return basic;
			}
			var object = null;
			if(ObjectFactory != null) {
				object = ObjectFactory();
				this.add(object);
			} else if(ObjectClass != null) {
				object = Type.createInstance(ObjectClass,[]);
				this.add(object);
			}
			return object;
		}
	}
	,recycleCreateObject: function(ObjectClass,ObjectFactory) {
		var object = null;
		if(ObjectFactory != null) {
			object = ObjectFactory();
			this.add(object);
		} else if(ObjectClass != null) {
			object = Type.createInstance(ObjectClass,[]);
			this.add(object);
		}
		return object;
	}
	,remove: function(Object1,Splice) {
		if(Splice == null) {
			Splice = false;
		}
		if(this.members == null) {
			return null;
		}
		var index = this.members.indexOf(Object1);
		if(index < 0) {
			return null;
		}
		if(Splice) {
			this.members.splice(index,1);
			this.length--;
		} else {
			this.members[index] = null;
		}
		if(this._memberRemoved != null) {
			this._memberRemoved.dispatch(Object1);
		}
		return Object1;
	}
	,replace: function(OldObject,NewObject) {
		var index = this.members.indexOf(OldObject);
		if(index < 0) {
			return null;
		}
		this.members[index] = NewObject;
		if(this._memberRemoved != null) {
			this._memberRemoved.dispatch(OldObject);
		}
		if(this._memberAdded != null) {
			this._memberAdded.dispatch(NewObject);
		}
		return NewObject;
	}
	,sort: function(Function1,Order) {
		if(Order == null) {
			Order = -1;
		}
		var _g = Function1;
		var a1 = Order;
		var tmp = function(a2,a3) {
			return _g(a1,a2,a3);
		};
		this.members.sort(tmp);
	}
	,getFirstAvailable: function(ObjectClass,Force) {
		if(Force == null) {
			Force = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && !basic.exists && (ObjectClass == null || js_Boot.__instanceof(basic,ObjectClass))) {
				var tmp;
				if(Force) {
					var c = js_Boot.getClass(basic);
					tmp = c.__name__ != ObjectClass.__name__;
				} else {
					tmp = false;
				}
				if(tmp) {
					continue;
				}
				return this.members[i - 1];
			}
		}
		return null;
	}
	,getFirstNull: function() {
		var i = 0;
		while(i < this.length) {
			if(this.members[i] == null) {
				return i;
			}
			++i;
		}
		return -1;
	}
	,getFirstExisting: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists) {
				return basic;
			}
		}
		return null;
	}
	,getFirstAlive: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.alive) {
				return basic;
			}
		}
		return null;
	}
	,getFirstDead: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && !basic.alive) {
				return basic;
			}
		}
		return null;
	}
	,countLiving: function() {
		var i = 0;
		var count = -1;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(count < 0) {
					count = 0;
				}
				if(basic.exists && basic.alive) {
					++count;
				}
			}
		}
		return count;
	}
	,countDead: function() {
		var i = 0;
		var count = -1;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(count < 0) {
					count = 0;
				}
				if(!basic.alive) {
					++count;
				}
			}
		}
		return count;
	}
	,getRandom: function(StartIndex,Length) {
		if(Length == null) {
			Length = 0;
		}
		if(StartIndex == null) {
			StartIndex = 0;
		}
		if(StartIndex < 0) {
			StartIndex = 0;
		}
		if(Length <= 0) {
			Length = this.length;
		}
		return flixel_FlxG.random.getObject_flixel_group_FlxTypedGroup_T(this.members,null,StartIndex,Length);
	}
	,clear: function() {
		this.length = 0;
		if(this._memberRemoved != null) {
			var _g = 0;
			var _g1 = this.members;
			while(_g < _g1.length) {
				var member = _g1[_g];
				++_g;
				if(member != null) {
					this._memberRemoved.dispatch(member);
				}
			}
		}
		flixel_util_FlxArrayUtil.clearArray(this.members);
	}
	,kill: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists) {
				basic.kill();
			}
		}
		flixel_FlxBasic.prototype.kill.call(this);
	}
	,revive: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && !basic.exists) {
				basic.revive();
			}
		}
		flixel_FlxBasic.prototype.revive.call(this);
	}
	,iterator: function(filter) {
		return new flixel_group_FlxTypedGroupIterator(this.members,filter);
	}
	,forEach: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(Recurse) {
					var group = flixel_group_FlxTypedGroup.resolveGroup(basic);
					if(group != null) {
						group.forEach(Function1,Recurse);
					}
				}
				Function1(basic);
			}
		}
	}
	,forEachAlive: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.alive) {
				if(Recurse) {
					var group = flixel_group_FlxTypedGroup.resolveGroup(basic);
					if(group != null) {
						group.forEachAlive(Function1,Recurse);
					}
				}
				Function1(basic);
			}
		}
	}
	,forEachDead: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && !basic.alive) {
				if(Recurse) {
					var group = flixel_group_FlxTypedGroup.resolveGroup(basic);
					if(group != null) {
						group.forEachDead(Function1,Recurse);
					}
				}
				Function1(basic);
			}
		}
	}
	,forEachExists: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists) {
				if(Recurse) {
					var group = flixel_group_FlxTypedGroup.resolveGroup(basic);
					if(group != null) {
						group.forEachExists(Function1,Recurse);
					}
				}
				Function1(basic);
			}
		}
	}
	,forEachOfType: function(ObjectClass,Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(Recurse) {
					var group = flixel_group_FlxTypedGroup.resolveGroup(basic);
					if(group != null) {
						group.forEachOfType(ObjectClass,Function1,Recurse);
					}
				}
				if(js_Boot.__instanceof(basic,ObjectClass)) {
					Function1(basic);
				}
			}
		}
	}
	,set_maxSize: function(Size) {
		this.maxSize = Math.abs(Size) | 0;
		if(this._marker >= this.maxSize) {
			this._marker = 0;
		}
		if(this.maxSize == 0 || this.members == null || this.maxSize >= this.length) {
			return this.maxSize;
		}
		var i = this.maxSize;
		var l = this.length;
		var basic = null;
		while(i < l) {
			basic = this.members[i++];
			if(basic != null) {
				if(this._memberRemoved != null) {
					this._memberRemoved.dispatch(basic);
				}
				basic.destroy();
			}
		}
		flixel_util_FlxArrayUtil.setLength_flixel_group_FlxTypedGroup_T(this.members,this.maxSize);
		this.length = this.members.length;
		return this.maxSize;
	}
	,get_memberAdded: function() {
		if(this._memberAdded == null) {
			this._memberAdded = new flixel_util__$FlxSignal_FlxSignal1();
		}
		return this._memberAdded;
	}
	,get_memberRemoved: function() {
		if(this._memberRemoved == null) {
			this._memberRemoved = new flixel_util__$FlxSignal_FlxSignal1();
		}
		return this._memberRemoved;
	}
	,__class__: flixel_group_FlxTypedGroup
	,__properties__: $extend(flixel_FlxBasic.prototype.__properties__,{get_memberRemoved:"get_memberRemoved",get_memberAdded:"get_memberAdded",set_maxSize:"set_maxSize"})
});
var flixel_FlxState = function(MaxSize) {
	this._requestSubStateReset = false;
	this.destroySubStates = true;
	this.persistentDraw = true;
	this.persistentUpdate = false;
	flixel_group_FlxTypedGroup.call(this,MaxSize);
};
$hxClasses["flixel.FlxState"] = flixel_FlxState;
flixel_FlxState.__name__ = "flixel.FlxState";
flixel_FlxState.__super__ = flixel_group_FlxTypedGroup;
flixel_FlxState.prototype = $extend(flixel_group_FlxTypedGroup.prototype,{
	persistentUpdate: null
	,persistentDraw: null
	,destroySubStates: null
	,subState: null
	,_requestedSubState: null
	,_requestSubStateReset: null
	,_subStateOpened: null
	,_subStateClosed: null
	,create: function() {
	}
	,draw: function() {
		if(this.persistentDraw || this.subState == null) {
			flixel_group_FlxTypedGroup.prototype.draw.call(this);
		}
		if(this.subState != null) {
			this.subState.draw();
		}
	}
	,openSubState: function(SubState) {
		this._requestSubStateReset = true;
		this._requestedSubState = SubState;
	}
	,closeSubState: function() {
		this._requestSubStateReset = true;
	}
	,resetSubState: function() {
		if(this.subState != null) {
			if(this.subState.closeCallback != null) {
				this.subState.closeCallback();
			}
			if(this._subStateClosed != null) {
				this._subStateClosed.dispatch(this.subState);
			}
			if(this.destroySubStates) {
				this.subState.destroy();
			}
		}
		this.subState = this._requestedSubState;
		this._requestedSubState = null;
		if(this.subState != null) {
			if(!this.persistentUpdate) {
				flixel_FlxG.inputs.onStateSwitch();
			}
			this.subState._parentState = this;
			if(!this.subState._created) {
				this.subState._created = true;
				this.subState.create();
			}
			if(this.subState.openCallback != null) {
				this.subState.openCallback();
			}
			if(this._subStateOpened != null) {
				this._subStateOpened.dispatch(this.subState);
			}
		}
	}
	,destroy: function() {
		flixel_util_FlxDestroyUtil.destroy(this._subStateOpened);
		flixel_util_FlxDestroyUtil.destroy(this._subStateClosed);
		if(this.subState != null) {
			this.subState.destroy();
			this.subState = null;
		}
		flixel_group_FlxTypedGroup.prototype.destroy.call(this);
	}
	,switchTo: function(nextState) {
		return true;
	}
	,onFocusLost: function() {
	}
	,onFocus: function() {
	}
	,onResize: function(Width,Height) {
	}
	,tryUpdate: function(elapsed) {
		if(this.persistentUpdate || this.subState == null) {
			this.update(elapsed);
		}
		if(this._requestSubStateReset) {
			this._requestSubStateReset = false;
			this.resetSubState();
		}
		if(this.subState != null) {
			this.subState.tryUpdate(elapsed);
		}
	}
	,get_bgColor: function() {
		return flixel_FlxG.cameras.get_bgColor();
	}
	,set_bgColor: function(Value) {
		return flixel_FlxG.cameras.set_bgColor(Value);
	}
	,get_subStateOpened: function() {
		if(this._subStateOpened == null) {
			this._subStateOpened = new flixel_util__$FlxSignal_FlxSignal1();
		}
		return this._subStateOpened;
	}
	,get_subStateClosed: function() {
		if(this._subStateClosed == null) {
			this._subStateClosed = new flixel_util__$FlxSignal_FlxSignal1();
		}
		return this._subStateClosed;
	}
	,__class__: flixel_FlxState
	,__properties__: $extend(flixel_group_FlxTypedGroup.prototype.__properties__,{get_subStateClosed:"get_subStateClosed",get_subStateOpened:"get_subStateOpened",set_bgColor:"set_bgColor",get_bgColor:"get_bgColor"})
});
var flixel_addons_transition_FlxTransitionableState = function(TransIn,TransOut) {
	this._exiting = false;
	this.transOutFinished = false;
	this.transIn = TransIn;
	this.transOut = TransOut;
	if(this.transIn == null && flixel_addons_transition_FlxTransitionableState.defaultTransIn != null) {
		this.transIn = flixel_addons_transition_FlxTransitionableState.defaultTransIn;
	}
	if(this.transOut == null && flixel_addons_transition_FlxTransitionableState.defaultTransOut != null) {
		this.transOut = flixel_addons_transition_FlxTransitionableState.defaultTransOut;
	}
	flixel_FlxState.call(this);
};
$hxClasses["flixel.addons.transition.FlxTransitionableState"] = flixel_addons_transition_FlxTransitionableState;
flixel_addons_transition_FlxTransitionableState.__name__ = "flixel.addons.transition.FlxTransitionableState";
flixel_addons_transition_FlxTransitionableState.__super__ = flixel_FlxState;
flixel_addons_transition_FlxTransitionableState.prototype = $extend(flixel_FlxState.prototype,{
	transIn: null
	,transOut: null
	,destroy: function() {
		flixel_FlxState.prototype.destroy.call(this);
		this.transIn = null;
		this.transOut = null;
		this._onExit = null;
	}
	,create: function() {
		flixel_FlxState.prototype.create.call(this);
		this.transitionIn();
	}
	,switchTo: function(nextState) {
		if(!this.get_hasTransOut()) {
			return true;
		}
		if(!this._exiting) {
			this.transitionToState(nextState);
		}
		return this.transOutFinished;
	}
	,transitionToState: function(nextState) {
		this._exiting = true;
		this.transitionOut(function() {
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		});
		if(flixel_addons_transition_FlxTransitionableState.skipNextTransOut) {
			flixel_addons_transition_FlxTransitionableState.skipNextTransOut = false;
			this.finishTransOut();
		}
	}
	,transitionIn: function() {
		if(this.transIn != null && this.transIn.type != "none") {
			if(flixel_addons_transition_FlxTransitionableState.skipNextTransIn) {
				flixel_addons_transition_FlxTransitionableState.skipNextTransIn = false;
				if(this.finishTransIn != null) {
					this.finishTransIn();
				}
				return;
			}
			var _trans = this.createTransition(this.transIn);
			_trans.setStatus(3);
			this.openSubState(_trans);
			_trans.set_finishCallback($bind(this,this.finishTransIn));
			_trans.start(1);
		}
	}
	,transitionOut: function(OnExit) {
		this._onExit = OnExit;
		if(this.get_hasTransOut()) {
			var _trans = this.createTransition(this.transOut);
			_trans.setStatus(2);
			this.openSubState(_trans);
			_trans.set_finishCallback($bind(this,this.finishTransOut));
			_trans.start(0);
		} else {
			this._onExit();
		}
	}
	,transOutFinished: null
	,_exiting: null
	,_onExit: null
	,get_hasTransIn: function() {
		if(this.transIn != null) {
			return this.transIn.type != "none";
		} else {
			return false;
		}
	}
	,get_hasTransOut: function() {
		if(this.transOut != null) {
			return this.transOut.type != "none";
		} else {
			return false;
		}
	}
	,createTransition: function(data) {
		switch(data.type) {
		case "fade":
			return new flixel_addons_transition_Transition(data);
		case "tiles":
			return new flixel_addons_transition_Transition(data);
		default:
			return null;
		}
	}
	,finishTransIn: function() {
		this.closeSubState();
	}
	,finishTransOut: function() {
		this.transOutFinished = true;
		if(!this._exiting) {
			this.closeSubState();
		}
		if(this._onExit != null) {
			this._onExit();
		}
	}
	,__class__: flixel_addons_transition_FlxTransitionableState
	,__properties__: $extend(flixel_FlxState.prototype.__properties__,{get_hasTransOut:"get_hasTransOut",get_hasTransIn:"get_hasTransIn"})
});
var flixel_addons_ui_interfaces_IEventGetter = function() { };
$hxClasses["flixel.addons.ui.interfaces.IEventGetter"] = flixel_addons_ui_interfaces_IEventGetter;
flixel_addons_ui_interfaces_IEventGetter.__name__ = "flixel.addons.ui.interfaces.IEventGetter";
flixel_addons_ui_interfaces_IEventGetter.__isInterface__ = true;
flixel_addons_ui_interfaces_IEventGetter.prototype = {
	getEvent: null
	,getRequest: null
	,__class__: flixel_addons_ui_interfaces_IEventGetter
};
var flixel_addons_ui_interfaces_IFlxUIState = function() { };
$hxClasses["flixel.addons.ui.interfaces.IFlxUIState"] = flixel_addons_ui_interfaces_IFlxUIState;
flixel_addons_ui_interfaces_IFlxUIState.__name__ = "flixel.addons.ui.interfaces.IFlxUIState";
flixel_addons_ui_interfaces_IFlxUIState.__isInterface__ = true;
flixel_addons_ui_interfaces_IFlxUIState.__interfaces__ = [flixel_addons_ui_interfaces_IEventGetter];
flixel_addons_ui_interfaces_IFlxUIState.prototype = {
	forceFocus: null
	,tooltips: null
	,cursor: null
	,_tongue: null
	,__class__: flixel_addons_ui_interfaces_IFlxUIState
};
var flixel_addons_ui_FlxUIState = function(TransIn,TransOut) {
	this.getTextFallback = null;
	this._reload_countdown = 0;
	this._reload = false;
	this.reload_ui_on_resize = false;
	this._xml_id = "";
	this._cursorHidden = false;
	this.hideCursorOnSubstate = false;
	this.cursor = null;
	flixel_addons_transition_FlxTransitionableState.call(this,TransIn,TransOut);
};
$hxClasses["flixel.addons.ui.FlxUIState"] = flixel_addons_ui_FlxUIState;
flixel_addons_ui_FlxUIState.__name__ = "flixel.addons.ui.FlxUIState";
flixel_addons_ui_FlxUIState.__interfaces__ = [flixel_addons_ui_interfaces_IFlxUIState,flixel_addons_ui_interfaces_IEventGetter];
flixel_addons_ui_FlxUIState.__super__ = flixel_addons_transition_FlxTransitionableState;
flixel_addons_ui_FlxUIState.prototype = $extend(flixel_addons_transition_FlxTransitionableState.prototype,{
	destroyed: null
	,cursor: null
	,hideCursorOnSubstate: null
	,_cursorHidden: null
	,tooltips: null
	,_xml_id: null
	,_makeCursor: null
	,_ui_vars: null
	,_ui: null
	,_tongue: null
	,reload_ui_on_resize: null
	,_reload: null
	,_reload_countdown: null
	,getTextFallback: null
	,create: function() {
		if(flixel_addons_ui_FlxUIState.static_tongue != null) {
			this._tongue = flixel_addons_ui_FlxUIState.static_tongue;
		}
		if(this._makeCursor == true) {
			this.cursor = this.createCursor();
		}
		this.tooltips = new flixel_addons_ui_FlxUITooltipManager(this);
		var liveFile = null;
		this._ui = this.createUI(null,this,null,this._tongue);
		this.add(this._ui);
		if(this.getTextFallback != null) {
			this._ui.getTextFallback = this.getTextFallback;
		}
		if(this._xml_id != null && this._xml_id != "") {
			var data = null;
			var errorMsg = "";
			if(liveFile == null) {
				try {
					data = flixel_addons_ui_U.xml(this._xml_id);
				} catch( _g ) {
					haxe_NativeStackTrace.lastError = _g;
					var _g1 = haxe_Exception.caught(_g).unwrap();
					if(typeof(_g1) == "string") {
						var msg = _g1;
						errorMsg = msg;
					} else {
						throw _g;
					}
				}
				if(data == null) {
					try {
						data = flixel_addons_ui_U.xml(this._xml_id,"xml",true,"");
					} catch( _g ) {
						haxe_NativeStackTrace.lastError = _g;
						var _g1 = haxe_Exception.caught(_g).unwrap();
						if(typeof(_g1) == "string") {
							var msg2 = _g1;
							errorMsg += ", " + msg2;
						} else {
							throw _g;
						}
					}
				}
			}
			if(data == null) {
				if(liveFile != null) {
					this.loadUIFromData(liveFile);
				}
			} else {
				this.loadUIFromData(data);
			}
		} else {
			this.loadUIFromData(null);
		}
		if(this.cursor != null && this._ui != null) {
			this.add(this.cursor);
			this.cursor.addWidgetsFromUI(this._ui);
			this.cursor.findVisibleLocation(0);
		}
		this.tooltips.init();
		flixel_addons_transition_FlxTransitionableState.prototype.create.call(this);
		this.cleanup();
	}
	,update: function(elapsed) {
		flixel_addons_transition_FlxTransitionableState.prototype.update.call(this,elapsed);
		if(this.tooltips != null) {
			this.tooltips.update(elapsed);
		}
		if(this._reload) {
			if(this._reload_countdown > 0) {
				this._reload_countdown--;
				if(this._reload_countdown == 0) {
					this.reloadUI();
				}
			}
		}
	}
	,cleanup: function() {
		this._ui.cleanup();
	}
	,_cleanupUIVars: function() {
		if(this._ui_vars != null) {
			var key = haxe_ds_StringMap.keysIterator(this._ui_vars.h);
			while(key.hasNext()) {
				var key1 = key.next();
				var _this = this._ui_vars;
				if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
					delete(_this.h[key1]);
				}
			}
			this._ui_vars = null;
		}
	}
	,setUIVariable: function(key,value) {
		if(this._ui != null) {
			this._ui.setVariable(key,value);
		} else {
			if(this._ui_vars == null) {
				this._ui_vars = new haxe_ds_StringMap();
			}
			this._ui_vars.h[key] = value;
		}
	}
	,resizeScreen: function(width,height) {
		if(height == null) {
			height = 600;
		}
		if(width == null) {
			width = 800;
		}
	}
	,openSubState: function(SubState) {
		if(this.cursor != null && this.hideCursorOnSubstate && this.cursor.visible == true) {
			this._cursorHidden = true;
			this.cursor.set_visible(false);
		}
		flixel_addons_transition_FlxTransitionableState.prototype.openSubState.call(this,SubState);
	}
	,closeSubState: function() {
		if(this.cursor != null && this.hideCursorOnSubstate && this._cursorHidden) {
			this._cursorHidden = false;
			this.cursor.set_visible(true);
		}
		flixel_addons_transition_FlxTransitionableState.prototype.closeSubState.call(this);
	}
	,onResize: function(Width,Height) {
		if(this.reload_ui_on_resize) {
			flixel_FlxG.scaleMode.onMeasure(Width,Height);
			this._reload_countdown = 1;
			this._reload = true;
		}
	}
	,onShowTooltip: function(t) {
	}
	,destroy: function() {
		this.destroyed = true;
		if(this._ui != null) {
			this._ui.destroy();
			this.remove(this._ui,true);
			this._ui = null;
		}
		if(this.tooltips != null) {
			this.tooltips.destroy();
			this.tooltips = null;
		}
		flixel_addons_transition_FlxTransitionableState.prototype.destroy.call(this);
	}
	,forceFocus: function(b,thing) {
		if(this._ui != null) {
			if(b) {
				this._ui.set_focus(thing);
			} else {
				this._ui.set_focus(null);
			}
		}
	}
	,onCursorEvent: function(code,target) {
		this.getEvent(code,target,null);
	}
	,getEvent: function(id,sender,data,params) {
	}
	,getRequest: function(id,sender,data,params) {
		return null;
	}
	,getText: function(Flag,Context,Safe) {
		if(Safe == null) {
			Safe = true;
		}
		if(Context == null) {
			Context = "ui";
		}
		if(this._tongue != null) {
			return this._tongue.get(Flag,Context,Safe);
		}
		if(this.getTextFallback != null) {
			return this.getTextFallback(Flag,Context,Safe);
		}
		return Flag;
	}
	,createCursor: function() {
		return new flixel_addons_ui_FlxUICursor($bind(this,this.onCursorEvent));
	}
	,createUI: function(data,ptr,superIndex_,tongue_,liveFilePath_) {
		if(liveFilePath_ == null) {
			liveFilePath_ = "";
		}
		var flxui = new flixel_addons_ui_FlxUI(data,ptr,superIndex_,tongue_,liveFilePath_,this._ui_vars);
		this._cleanupUIVars();
		return flxui;
	}
	,loadUIFromData: function(data) {
		this._ui.load(data);
	}
	,reloadUI: function(e) {
		if(this._ui != null) {
			this.remove(this._ui,true);
			this._ui.destroy();
			this._ui = null;
		}
		this._ui = this.createUI(null,this,null,this._tongue);
		this.add(this._ui);
		var data = flixel_addons_ui_U.xml(this._xml_id);
		if(data != null) {
			this.loadUIFromData(data);
		}
		this._reload = false;
		this._reload_countdown = 0;
	}
	,__class__: flixel_addons_ui_FlxUIState
});
var MusicBeatState = function(TransIn,TransOut) {
	this.curBeat = 0;
	this.curStep = 0;
	flixel_addons_ui_FlxUIState.call(this,TransIn,TransOut);
};
$hxClasses["MusicBeatState"] = MusicBeatState;
MusicBeatState.__name__ = "MusicBeatState";
MusicBeatState.__super__ = flixel_addons_ui_FlxUIState;
MusicBeatState.prototype = $extend(flixel_addons_ui_FlxUIState.prototype,{
	curStep: null
	,curBeat: null
	,get_controls: function() {
		return PlayerSettings.player1.controls;
	}
	,create: function() {
		if(this.transIn != null) {
			haxe_Log.trace("reg " + Std.string(this.transIn.region),{ fileName : "source/MusicBeatState.hx", lineNumber : 22, className : "MusicBeatState", methodName : "create"});
		}
		flixel_addons_ui_FlxUIState.prototype.create.call(this);
	}
	,update: function(elapsed) {
		var oldStep = this.curStep;
		this.updateCurStep();
		this.updateBeat();
		if(oldStep != this.curStep && this.curStep >= 0) {
			this.stepHit();
		}
		flixel_addons_ui_FlxUIState.prototype.update.call(this,elapsed);
	}
	,updateBeat: function() {
		this.curBeat = Math.floor(this.curStep / 4);
	}
	,updateCurStep: function() {
		var lastChange = { stepTime : 0, songTime : 0, bpm : 0};
		var _g = 0;
		var _g1 = Conductor.bpmChangeMap.length;
		while(_g < _g1) {
			var i = _g++;
			if(Conductor.songPosition >= Conductor.bpmChangeMap[i].songTime) {
				lastChange = Conductor.bpmChangeMap[i];
			}
		}
		this.curStep = lastChange.stepTime + Math.floor((Conductor.songPosition - lastChange.songTime) / Conductor.stepCrochet);
	}
	,stepHit: function() {
		if(this.curStep % 4 == 0) {
			this.beatHit();
		}
	}
	,beatHit: function() {
	}
	,__class__: MusicBeatState
	,__properties__: $extend(flixel_addons_ui_FlxUIState.prototype.__properties__,{get_controls:"get_controls"})
});
var ChartingState = function(TransIn,TransOut) {
	this.daSpacing = 0.3;
	this.updatedSection = false;
	this.tempBpm = 0;
	this.GRID_SIZE = 40;
	this.amountSteps = 0;
	this.curSong = "Dadbattle";
	this.curSection = 0;
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["ChartingState"] = ChartingState;
ChartingState.__name__ = "ChartingState";
ChartingState.__super__ = MusicBeatState;
ChartingState.prototype = $extend(MusicBeatState.prototype,{
	_file: null
	,UI_box: null
	,curSection: null
	,bpmTxt: null
	,strumLine: null
	,curSong: null
	,amountSteps: null
	,bullshitUI: null
	,highlight: null
	,GRID_SIZE: null
	,dummyArrow: null
	,curRenderedNotes: null
	,curRenderedSustains: null
	,gridBG: null
	,_song: null
	,typingShit: null
	,curSelectedNote: null
	,tempBpm: null
	,vocals: null
	,leftIcon: null
	,rightIcon: null
	,create: function() {
		this.curSection = ChartingState.lastSection;
		this.gridBG = flixel_addons_display_FlxGridOverlay.create(this.GRID_SIZE,this.GRID_SIZE,this.GRID_SIZE * 8,this.GRID_SIZE * 16);
		this.add(this.gridBG);
		this.leftIcon = new HealthIcon("bf");
		this.rightIcon = new HealthIcon("dad");
		this.leftIcon.scrollFactor.set(1,1);
		this.rightIcon.scrollFactor.set(1,1);
		this.leftIcon.setGraphicSize(0,45);
		this.rightIcon.setGraphicSize(0,45);
		this.add(this.leftIcon);
		this.add(this.rightIcon);
		this.leftIcon.setPosition(0,-100);
		this.rightIcon.setPosition(this.gridBG.get_width() / 2,-100);
		var gridBlackLine = new flixel_FlxSprite(this.gridBG.x + this.gridBG.get_width() / 2).makeGraphic(2,this.gridBG.get_height() | 0,-16777216);
		this.add(gridBlackLine);
		this.curRenderedNotes = new flixel_group_FlxTypedGroup();
		this.curRenderedSustains = new flixel_group_FlxTypedGroup();
		if(PlayState.SONG != null) {
			this._song = PlayState.SONG;
		} else {
			this._song = { song : "Test", notes : [], bpm : 150, needsVoices : true, player1 : "bf", player2 : "dad", speed : 1, validScore : false};
		}
		flixel_FlxG.mouse.set_visible(true);
		flixel_FlxG.save.bind("funkin","ninjamuffin99");
		this.tempBpm = this._song.bpm;
		this.addSection();
		this.updateGrid();
		this.loadSong(this._song.song);
		Conductor.changeBPM(this._song.bpm);
		Conductor.mapBPMChanges(this._song);
		this.bpmTxt = new flixel_text_FlxText(1000,50,0,"",16);
		this.bpmTxt.scrollFactor.set();
		this.add(this.bpmTxt);
		this.strumLine = new flixel_FlxSprite(0,50).makeGraphic(flixel_FlxG.width / 2 | 0,4);
		this.add(this.strumLine);
		this.dummyArrow = new flixel_FlxSprite().makeGraphic(this.GRID_SIZE,this.GRID_SIZE);
		this.add(this.dummyArrow);
		var tabs = [{ name : "Song", label : "Song"},{ name : "Section", label : "Section"},{ name : "Note", label : "Note"}];
		this.UI_box = new flixel_addons_ui_FlxUITabMenu(null,null,tabs,null,true);
		this.UI_box.resize(300,400);
		this.UI_box.set_x(flixel_FlxG.width / 2);
		this.UI_box.set_y(20);
		this.add(this.UI_box);
		this.addSongUI();
		this.addSectionUI();
		this.addNoteUI();
		this.add(this.curRenderedNotes);
		this.add(this.curRenderedSustains);
		this.changeSection();
		MusicBeatState.prototype.create.call(this);
	}
	,addSongUI: function() {
		var _gthis = this;
		var UI_songTitle = new flixel_addons_ui_FlxUIInputText(10,10,70,this._song.song,8);
		this.typingShit = UI_songTitle;
		var check_voices = new flixel_addons_ui_FlxUICheckBox(10,25,null,null,"Has voice track",100);
		check_voices.set_checked(this._song.needsVoices);
		check_voices.callback = function() {
			_gthis._song.needsVoices = check_voices.checked;
			haxe_Log.trace("CHECKED!",{ fileName : "source/ChartingState.hx", lineNumber : 187, className : "ChartingState", methodName : "addSongUI"});
		};
		var check_mute_inst = new flixel_addons_ui_FlxUICheckBox(10,200,null,null,"Mute Instrumental (in editor)",100);
		check_mute_inst.set_checked(false);
		check_mute_inst.callback = function() {
			var vol = 1;
			if(check_mute_inst.checked) {
				vol = 0;
			}
			flixel_FlxG.sound.music.set_volume(vol);
		};
		var saveButton = new flixel_ui_FlxButton(110,8,"Save",function() {
			_gthis.saveLevel();
		});
		var reloadSong = new flixel_ui_FlxButton(saveButton.x + saveButton.get_width() + 10,saveButton.y,"Reload Audio",function() {
			_gthis.loadSong(_gthis._song.song);
		});
		var reloadSongJson = new flixel_ui_FlxButton(reloadSong.x,saveButton.y + 30,"Reload JSON",function() {
			_gthis.loadJson(_gthis._song.song.toLowerCase());
		});
		var loadAutosaveBtn = new flixel_ui_FlxButton(reloadSongJson.x,reloadSongJson.y + 30,"load autosave",$bind(this,this.loadAutosave));
		var stepperSpeed = new flixel_addons_ui_FlxUINumericStepper(10,80,0.1,1,0.1,10,2);
		stepperSpeed.set_value(this._song.speed);
		stepperSpeed.name = "song_speed";
		var stepperBPM = new flixel_addons_ui_FlxUINumericStepper(10,65,1,100,1,999,3);
		stepperBPM.set_value(Conductor.bpm);
		stepperBPM.name = "song_bpm";
		var characters = CoolUtil.coolTextFile(Paths.getPath("data/" + "characterList" + ".txt","TEXT",null));
		var player1DropDown = new flixel_addons_ui_FlxUIDropDownMenu(10,100,flixel_addons_ui_FlxUIDropDownMenu.makeStrIdLabelArray(characters,true),function(character) {
			_gthis._song.player1 = characters[Std.parseInt(character)];
			_gthis.updateHeads();
		});
		player1DropDown.set_selectedLabel(this._song.player1);
		var player2DropDown = new flixel_addons_ui_FlxUIDropDownMenu(140,100,flixel_addons_ui_FlxUIDropDownMenu.makeStrIdLabelArray(characters,true),function(character) {
			_gthis._song.player2 = characters[Std.parseInt(character)];
			_gthis.updateHeads();
		});
		player2DropDown.set_selectedLabel(this._song.player2);
		var tab_group_song = new flixel_addons_ui_FlxUI(null,this.UI_box);
		tab_group_song.name = "Song";
		tab_group_song.add(UI_songTitle);
		tab_group_song.add(check_voices);
		tab_group_song.add(check_mute_inst);
		tab_group_song.add(saveButton);
		tab_group_song.add(reloadSong);
		tab_group_song.add(reloadSongJson);
		tab_group_song.add(loadAutosaveBtn);
		tab_group_song.add(stepperBPM);
		tab_group_song.add(stepperSpeed);
		tab_group_song.add(player1DropDown);
		tab_group_song.add(player2DropDown);
		this.UI_box.addGroup(tab_group_song);
		this.UI_box.scrollFactor.set();
		flixel_FlxG.camera.follow(this.strumLine);
	}
	,stepperLength: null
	,check_mustHitSection: null
	,check_changeBPM: null
	,stepperSectionBPM: null
	,check_altAnim: null
	,addSectionUI: function() {
		var _gthis = this;
		var tab_group_section = new flixel_addons_ui_FlxUI(null,this.UI_box);
		tab_group_section.name = "Section";
		this.stepperLength = new flixel_addons_ui_FlxUINumericStepper(10,10,4,0,0,999,0);
		this.stepperLength.set_value(this._song.notes[this.curSection].lengthInSteps);
		this.stepperLength.name = "section_length";
		this.stepperSectionBPM = new flixel_addons_ui_FlxUINumericStepper(10,80,1,Conductor.bpm,1,999,3);
		this.stepperSectionBPM.set_value(Conductor.bpm);
		this.stepperSectionBPM.name = "section_bpm";
		var stepperCopy = new flixel_addons_ui_FlxUINumericStepper(110,130,1,1,-999,999,0);
		var copyButton = new flixel_ui_FlxButton(10,130,"Copy last section",function() {
			_gthis.copySection(stepperCopy.value | 0);
		});
		var clearSectionButton = new flixel_ui_FlxButton(10,150,"Clear",$bind(this,this.clearSection));
		var swapSection = new flixel_ui_FlxButton(10,170,"Swap section",function() {
			var _g = 0;
			var _g1 = _gthis._song.notes[_gthis.curSection].sectionNotes.length;
			while(_g < _g1) {
				var i = _g++;
				var note = _gthis._song.notes[_gthis.curSection].sectionNotes[i];
				note[1] = (note[1] + 4) % 8;
				_gthis._song.notes[_gthis.curSection].sectionNotes[i] = note;
				_gthis.updateGrid();
			}
		});
		this.check_mustHitSection = new flixel_addons_ui_FlxUICheckBox(10,30,null,null,"Must hit section",100);
		this.check_mustHitSection.name = "check_mustHit";
		this.check_mustHitSection.set_checked(true);
		this.check_altAnim = new flixel_addons_ui_FlxUICheckBox(10,400,null,null,"Alt Animation",100);
		this.check_altAnim.name = "check_altAnim";
		this.check_changeBPM = new flixel_addons_ui_FlxUICheckBox(10,60,null,null,"Change BPM",100);
		this.check_changeBPM.name = "check_changeBPM";
		tab_group_section.add(this.stepperLength);
		tab_group_section.add(this.stepperSectionBPM);
		tab_group_section.add(stepperCopy);
		tab_group_section.add(this.check_mustHitSection);
		tab_group_section.add(this.check_altAnim);
		tab_group_section.add(this.check_changeBPM);
		tab_group_section.add(copyButton);
		tab_group_section.add(clearSectionButton);
		tab_group_section.add(swapSection);
		this.UI_box.addGroup(tab_group_section);
	}
	,stepperSusLength: null
	,addNoteUI: function() {
		var tab_group_note = new flixel_addons_ui_FlxUI(null,this.UI_box);
		tab_group_note.name = "Note";
		this.stepperSusLength = new flixel_addons_ui_FlxUINumericStepper(10,10,Conductor.stepCrochet / 2,0,0,Conductor.stepCrochet * 16);
		this.stepperSusLength.set_value(0);
		this.stepperSusLength.name = "note_susLength";
		var applyLength = new flixel_ui_FlxButton(100,10,"Apply");
		tab_group_note.add(this.stepperSusLength);
		tab_group_note.add(applyLength);
		this.UI_box.addGroup(tab_group_note);
	}
	,loadSong: function(daSong) {
		var _gthis = this;
		if(flixel_FlxG.sound.music != null) {
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
		}
		flixel_FlxG.sound.playMusic("songs:assets/songs/" + daSong.toLowerCase() + "/Inst." + "mp3",0.6);
		this.vocals = new flixel_system_FlxSound().loadEmbedded("songs:assets/songs/" + daSong.toLowerCase() + "/Voices." + "mp3");
		flixel_FlxG.sound.list.add(this.vocals);
		flixel_FlxG.sound.music.pause();
		this.vocals.pause();
		flixel_FlxG.sound.music.onComplete = function() {
			_gthis.vocals.pause();
			_gthis.vocals.set_time(0);
			flixel_FlxG.sound.music.pause();
			flixel_FlxG.sound.music.set_time(0);
			_gthis.changeSection();
		};
	}
	,generateUI: function() {
		while(this.bullshitUI.members.length > 0) this.bullshitUI.remove(this.bullshitUI.members[0],true);
		var title = new flixel_text_FlxText(this.UI_box.x + 20,this.UI_box.y + 20,0);
		this.bullshitUI.add(title);
	}
	,getEvent: function(id,sender,data,params) {
		if(id == "click_check_box") {
			var check = sender;
			var label = check.getLabel().text;
			switch(label) {
			case "Alt Animation":
				this._song.notes[this.curSection].altAnim = check.checked;
				break;
			case "Change BPM":
				this._song.notes[this.curSection].changeBPM = check.checked;
				break;
			case "Must hit section":
				this._song.notes[this.curSection].mustHitSection = check.checked;
				this.updateHeads();
				break;
			}
		} else if(id == "change_numeric_stepper" && ((sender) instanceof flixel_addons_ui_FlxUINumericStepper)) {
			var nums = sender;
			var wname = nums.name;
			if(wname == "section_length") {
				this._song.notes[this.curSection].lengthInSteps = nums.value | 0;
				this.updateGrid();
			} else if(wname == "song_speed") {
				this._song.speed = nums.value;
			} else if(wname == "song_bpm") {
				this.tempBpm = nums.value;
				Conductor.mapBPMChanges(this._song);
				Conductor.changeBPM(nums.value);
			} else if(wname == "note_susLength") {
				this.curSelectedNote[2] = nums.value;
				this.updateGrid();
			} else if(wname == "section_bpm") {
				this._song.notes[this.curSection].bpm = nums.value;
				this.updateGrid();
			}
		}
	}
	,updatedSection: null
	,sectionStartTime: function() {
		var daBPM = this._song.bpm;
		var daPos = 0;
		var _g = 0;
		var _g1 = this.curSection;
		while(_g < _g1) {
			var i = _g++;
			if(this._song.notes[i].changeBPM) {
				daBPM = this._song.notes[i].bpm;
			}
			daPos += 4 * (60000 / daBPM);
		}
		return daPos;
	}
	,update: function(elapsed) {
		var _gthis = this;
		this.curStep = this.recalculateSteps();
		Conductor.songPosition = flixel_FlxG.sound.music._time;
		this._song.song = this.typingShit.text;
		this.strumLine.set_y(this.getYfromStrum((Conductor.songPosition - this.sectionStartTime()) % (Conductor.stepCrochet * this._song.notes[this.curSection].lengthInSteps)));
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(88,_this.status)) {
			this.toggleAltAnimNote();
		}
		if(this.curBeat % 4 == 0 && this.curStep >= 16 * (this.curSection + 1)) {
			haxe_Log.trace(this.curStep,{ fileName : "source/ChartingState.hx", lineNumber : 487, className : "ChartingState", methodName : "update"});
			haxe_Log.trace(this._song.notes[this.curSection].lengthInSteps * (this.curSection + 1),{ fileName : "source/ChartingState.hx", lineNumber : 488, className : "ChartingState", methodName : "update"});
			haxe_Log.trace("DUMBSHIT",{ fileName : "source/ChartingState.hx", lineNumber : 489, className : "ChartingState", methodName : "update"});
			if(this._song.notes[this.curSection + 1] == null) {
				this.addSection();
			}
			this.changeSection(this.curSection + 1,false);
		}
		if(flixel_FlxG.mouse._leftButton.current == 2) {
			if(flixel_FlxG.mouse.overlaps(this.curRenderedNotes)) {
				this.curRenderedNotes.forEach(function(note) {
					if(flixel_FlxG.mouse.overlaps(note)) {
						var _this = flixel_FlxG.keys.pressed;
						if(_this.keyManager.checkStatus(17,_this.status)) {
							_gthis.selectNote(note);
						} else {
							haxe_Log.trace("tryin to delete note...",{ fileName : "source/ChartingState.hx", lineNumber : 516, className : "ChartingState", methodName : "update"});
							_gthis.deleteNote(note);
						}
					}
				});
			} else if(flixel_FlxG.mouse.x > this.gridBG.x && flixel_FlxG.mouse.x < this.gridBG.x + this.gridBG.get_width() && flixel_FlxG.mouse.y > this.gridBG.y && flixel_FlxG.mouse.y < this.gridBG.y + this.GRID_SIZE * this._song.notes[this.curSection].lengthInSteps) {
				this.addNote();
			}
		}
		if(flixel_FlxG.mouse.x > this.gridBG.x && flixel_FlxG.mouse.x < this.gridBG.x + this.gridBG.get_width() && flixel_FlxG.mouse.y > this.gridBG.y && flixel_FlxG.mouse.y < this.gridBG.y + this.GRID_SIZE * this._song.notes[this.curSection].lengthInSteps) {
			this.dummyArrow.set_x(Math.floor(flixel_FlxG.mouse.x / this.GRID_SIZE) * this.GRID_SIZE);
			var _this = flixel_FlxG.keys.pressed;
			if(_this.keyManager.checkStatus(16,_this.status)) {
				this.dummyArrow.set_y(flixel_FlxG.mouse.y);
			} else {
				this.dummyArrow.set_y(Math.floor(flixel_FlxG.mouse.y / this.GRID_SIZE) * this.GRID_SIZE);
			}
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(13,_this.status)) {
			ChartingState.lastSection = this.curSection;
			PlayState.SONG = this._song;
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
			var _this = this.vocals;
			_this.cleanup(_this.autoDestroy,true);
			var nextState = new PlayState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(69,_this.status)) {
			this.changeNoteSustain(Conductor.stepCrochet);
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(81,_this.status)) {
			this.changeNoteSustain(-Conductor.stepCrochet);
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(9,_this.status)) {
			var _this = flixel_FlxG.keys.pressed;
			if(_this.keyManager.checkStatus(16,_this.status)) {
				var _g = this.UI_box;
				_g.set_selected_tab(_g.get_selected_tab() - 1);
				if(this.UI_box.get_selected_tab() < 0) {
					this.UI_box.set_selected_tab(2);
				}
			} else {
				var _g = this.UI_box;
				_g.set_selected_tab(_g.get_selected_tab() + 1);
				if(this.UI_box.get_selected_tab() >= 3) {
					this.UI_box.set_selected_tab(0);
				}
			}
		}
		if(!this.typingShit.hasFocus) {
			var _this = flixel_FlxG.keys.justPressed;
			if(_this.keyManager.checkStatus(32,_this.status)) {
				if(flixel_FlxG.sound.music._channel != null) {
					flixel_FlxG.sound.music.pause();
					this.vocals.pause();
				} else {
					this.vocals.play();
					flixel_FlxG.sound.music.play();
				}
			}
			var _this = flixel_FlxG.keys.justPressed;
			if(_this.keyManager.checkStatus(82,_this.status)) {
				var _this = flixel_FlxG.keys.pressed;
				if(_this.keyManager.checkStatus(16,_this.status)) {
					this.resetSection(true);
				} else {
					this.resetSection();
				}
			}
			if(flixel_FlxG.mouse.wheel != 0) {
				flixel_FlxG.sound.music.pause();
				this.vocals.pause();
				var _g = flixel_FlxG.sound.music;
				_g.set_time(_g._time - flixel_FlxG.mouse.wheel * Conductor.stepCrochet * 0.4);
				this.vocals.set_time(flixel_FlxG.sound.music._time);
			}
			var _this = flixel_FlxG.keys.pressed;
			if(!_this.keyManager.checkStatus(16,_this.status)) {
				var tmp;
				var _this = flixel_FlxG.keys.pressed;
				if(!_this.keyManager.checkStatus(87,_this.status)) {
					var _this = flixel_FlxG.keys.pressed;
					tmp = _this.keyManager.checkStatus(83,_this.status);
				} else {
					tmp = true;
				}
				if(tmp) {
					flixel_FlxG.sound.music.pause();
					this.vocals.pause();
					var daTime = 700 * flixel_FlxG.elapsed;
					var _this = flixel_FlxG.keys.pressed;
					if(_this.keyManager.checkStatus(87,_this.status)) {
						var _g = flixel_FlxG.sound.music;
						_g.set_time(_g._time - daTime);
					} else {
						var _g = flixel_FlxG.sound.music;
						_g.set_time(_g._time + daTime);
					}
					this.vocals.set_time(flixel_FlxG.sound.music._time);
				}
			} else {
				var tmp;
				var _this = flixel_FlxG.keys.justPressed;
				if(!_this.keyManager.checkStatus(87,_this.status)) {
					var _this = flixel_FlxG.keys.justPressed;
					tmp = _this.keyManager.checkStatus(83,_this.status);
				} else {
					tmp = true;
				}
				if(tmp) {
					flixel_FlxG.sound.music.pause();
					this.vocals.pause();
					var daTime = Conductor.stepCrochet * 2;
					var _this = flixel_FlxG.keys.justPressed;
					if(_this.keyManager.checkStatus(87,_this.status)) {
						var _g = flixel_FlxG.sound.music;
						_g.set_time(_g._time - daTime);
					} else {
						var _g = flixel_FlxG.sound.music;
						_g.set_time(_g._time + daTime);
					}
					this.vocals.set_time(flixel_FlxG.sound.music._time);
				}
			}
		}
		this._song.bpm = this.tempBpm;
		var shiftThing = 1;
		var _this = flixel_FlxG.keys.pressed;
		if(_this.keyManager.checkStatus(16,_this.status)) {
			shiftThing = 4;
		}
		var tmp;
		var _this = flixel_FlxG.keys.justPressed;
		if(!_this.keyManager.checkStatus(39,_this.status)) {
			var _this = flixel_FlxG.keys.justPressed;
			tmp = _this.keyManager.checkStatus(68,_this.status);
		} else {
			tmp = true;
		}
		if(tmp) {
			this.changeSection(this.curSection + shiftThing);
		}
		var tmp;
		var _this = flixel_FlxG.keys.justPressed;
		if(!_this.keyManager.checkStatus(37,_this.status)) {
			var _this = flixel_FlxG.keys.justPressed;
			tmp = _this.keyManager.checkStatus(65,_this.status);
		} else {
			tmp = true;
		}
		if(tmp) {
			this.changeSection(this.curSection - shiftThing);
		}
		this.bpmTxt.set_text(this.bpmTxt.set_text(Std.string(flixel_math_FlxMath.roundDecimal(Conductor.songPosition / 1000,2)) + " / " + Std.string(flixel_math_FlxMath.roundDecimal(flixel_FlxG.sound.music._length / 1000,2)) + "\nSection: " + this.curSection));
		MusicBeatState.prototype.update.call(this,elapsed);
	}
	,changeNoteSustain: function(value) {
		if(this.curSelectedNote != null) {
			if(this.curSelectedNote[2] != null) {
				this.curSelectedNote[2] += value;
				this.curSelectedNote[2] = Math.max(this.curSelectedNote[2],0);
			}
		}
		this.updateNoteUI();
		this.updateGrid();
	}
	,toggleAltAnimNote: function() {
		if(this.curSelectedNote != null) {
			if(this.curSelectedNote[3] != null) {
				haxe_Log.trace("ALT NOTE SHIT",{ fileName : "source/ChartingState.hx", lineNumber : 699, className : "ChartingState", methodName : "toggleAltAnimNote"});
				this.curSelectedNote[3] = !this.curSelectedNote[3];
				haxe_Log.trace(this.curSelectedNote[3],{ fileName : "source/ChartingState.hx", lineNumber : 701, className : "ChartingState", methodName : "toggleAltAnimNote"});
			} else {
				this.curSelectedNote[3] = true;
			}
		}
	}
	,recalculateSteps: function() {
		var lastChange = { stepTime : 0, songTime : 0, bpm : 0};
		var _g = 0;
		var _g1 = Conductor.bpmChangeMap.length;
		while(_g < _g1) {
			var i = _g++;
			if(flixel_FlxG.sound.music._time > Conductor.bpmChangeMap[i].songTime) {
				lastChange = Conductor.bpmChangeMap[i];
			}
		}
		this.curStep = lastChange.stepTime + Math.floor((flixel_FlxG.sound.music._time - lastChange.songTime) / Conductor.stepCrochet);
		this.updateBeat();
		return this.curStep;
	}
	,resetSection: function(songBeginning) {
		if(songBeginning == null) {
			songBeginning = false;
		}
		this.updateGrid();
		flixel_FlxG.sound.music.pause();
		this.vocals.pause();
		flixel_FlxG.sound.music.set_time(this.sectionStartTime());
		if(songBeginning) {
			flixel_FlxG.sound.music.set_time(0);
			this.curSection = 0;
		}
		this.vocals.set_time(flixel_FlxG.sound.music._time);
		this.updateCurStep();
		this.updateGrid();
		this.updateSectionUI();
	}
	,changeSection: function(sec,updateMusic) {
		if(updateMusic == null) {
			updateMusic = true;
		}
		if(sec == null) {
			sec = 0;
		}
		haxe_Log.trace("changing section" + sec,{ fileName : "source/ChartingState.hx", lineNumber : 752, className : "ChartingState", methodName : "changeSection"});
		if(this._song.notes[sec] != null) {
			this.curSection = sec;
			this.updateGrid();
			if(updateMusic) {
				flixel_FlxG.sound.music.pause();
				this.vocals.pause();
				flixel_FlxG.sound.music.set_time(this.sectionStartTime());
				this.vocals.set_time(flixel_FlxG.sound.music._time);
				this.updateCurStep();
			}
			this.updateGrid();
			this.updateSectionUI();
		}
	}
	,copySection: function(sectionNum) {
		if(sectionNum == null) {
			sectionNum = 1;
		}
		var a = this.curSection;
		var daSec = a > sectionNum ? a : sectionNum;
		var _g = 0;
		var _g1 = this._song.notes[daSec - sectionNum].sectionNotes;
		while(_g < _g1.length) {
			var note = _g1[_g];
			++_g;
			var strum = note[0] + Conductor.stepCrochet * (this._song.notes[daSec].lengthInSteps * sectionNum);
			var copiedNote = [strum,note[1],note[2]];
			this._song.notes[daSec].sectionNotes.push(copiedNote);
		}
		this.updateGrid();
	}
	,updateSectionUI: function() {
		var sec = this._song.notes[this.curSection];
		this.stepperLength.set_value(sec.lengthInSteps);
		this.check_mustHitSection.set_checked(sec.mustHitSection);
		this.check_altAnim.set_checked(sec.altAnim);
		this.check_changeBPM.set_checked(sec.changeBPM);
		this.stepperSectionBPM.set_value(sec.bpm);
		this.updateHeads();
	}
	,updateHeads: function() {
		if(this.check_mustHitSection.checked) {
			this.leftIcon.changeIcon(this._song.player1);
			this.rightIcon.changeIcon(this._song.player2);
		} else {
			this.leftIcon.changeIcon(this._song.player2);
			this.rightIcon.changeIcon(this._song.player1);
		}
	}
	,updateNoteUI: function() {
		if(this.curSelectedNote != null) {
			this.stepperSusLength.set_value(this.curSelectedNote[2]);
		}
	}
	,updateGrid: function() {
		while(this.curRenderedNotes.members.length > 0) this.curRenderedNotes.remove(this.curRenderedNotes.members[0],true);
		while(this.curRenderedSustains.members.length > 0) this.curRenderedSustains.remove(this.curRenderedSustains.members[0],true);
		var sectionInfo = this._song.notes[this.curSection].sectionNotes;
		if(this._song.notes[this.curSection].changeBPM && this._song.notes[this.curSection].bpm > 0) {
			Conductor.changeBPM(this._song.notes[this.curSection].bpm);
		} else {
			var daBPM = this._song.bpm;
			var _g = 0;
			var _g1 = this.curSection;
			while(_g < _g1) {
				var i = _g++;
				if(this._song.notes[i].changeBPM) {
					daBPM = this._song.notes[i].bpm;
				}
			}
			Conductor.changeBPM(daBPM);
		}
		var _g = 0;
		while(_g < sectionInfo.length) {
			var i = sectionInfo[_g];
			++_g;
			var daNoteInfo = i[1];
			var daStrumTime = i[0];
			var daSus = i[2];
			var note = new Note(daStrumTime,daNoteInfo % 4);
			note.sustainLength = daSus;
			note.setGraphicSize(this.GRID_SIZE,this.GRID_SIZE);
			note.updateHitbox();
			note.set_x(Math.floor(daNoteInfo * this.GRID_SIZE));
			note.set_y(Math.floor(this.getYfromStrum((daStrumTime - this.sectionStartTime()) % (Conductor.stepCrochet * this._song.notes[this.curSection].lengthInSteps))));
			this.curRenderedNotes.add(note);
			if(daSus > 0) {
				var sustainVis = new flixel_FlxSprite(note.x + this.GRID_SIZE / 2,note.y + this.GRID_SIZE).makeGraphic(8,Math.floor(flixel_math_FlxMath.remapToRange(daSus,0,Conductor.stepCrochet * 16,0,this.gridBG.get_height())));
				this.curRenderedSustains.add(sustainVis);
			}
		}
	}
	,addSection: function(lengthInSteps) {
		if(lengthInSteps == null) {
			lengthInSteps = 16;
		}
		var sec = { lengthInSteps : lengthInSteps, bpm : this._song.bpm, changeBPM : false, mustHitSection : true, sectionNotes : [], typeOfSection : 0, altAnim : false};
		this._song.notes.push(sec);
	}
	,selectNote: function(note) {
		var swagNum = 0;
		var _g = 0;
		var _g1 = this._song.notes[this.curSection].sectionNotes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.strumTime == note.strumTime && i.noteData % 4 == note.noteData) {
				this.curSelectedNote = this._song.notes[this.curSection].sectionNotes[swagNum];
			}
			++swagNum;
		}
		this.updateGrid();
		this.updateNoteUI();
	}
	,deleteNote: function(note) {
		var _g = 0;
		var _g1 = this._song.notes[this.curSection].sectionNotes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i[0] == note.strumTime && i[1] % 4 == note.noteData) {
				HxOverrides.remove(this._song.notes[this.curSection].sectionNotes,i);
			}
		}
		this.updateGrid();
	}
	,clearSection: function() {
		this._song.notes[this.curSection].sectionNotes = [];
		this.updateGrid();
	}
	,clearSong: function() {
		var _g = 0;
		var _g1 = this._song.notes.length;
		while(_g < _g1) {
			var daSection = _g++;
			this._song.notes[daSection].sectionNotes = [];
		}
		this.updateGrid();
	}
	,addNote: function() {
		var noteStrum = this.getStrumTime(this.dummyArrow.y) + this.sectionStartTime();
		var noteData = Math.floor(flixel_FlxG.mouse.x / this.GRID_SIZE);
		this._song.notes[this.curSection].sectionNotes.push([noteStrum,noteData,0,false]);
		this.curSelectedNote = this._song.notes[this.curSection].sectionNotes[this._song.notes[this.curSection].sectionNotes.length - 1];
		var _this = flixel_FlxG.keys.pressed;
		if(_this.keyManager.checkStatus(17,_this.status)) {
			this._song.notes[this.curSection].sectionNotes.push([noteStrum,(noteData + 4) % 8,0,false]);
		}
		haxe_Log.trace(noteStrum,{ fileName : "source/ChartingState.hx", lineNumber : 977, className : "ChartingState", methodName : "addNote"});
		haxe_Log.trace(this.curSection,{ fileName : "source/ChartingState.hx", lineNumber : 978, className : "ChartingState", methodName : "addNote"});
		this.updateGrid();
		this.updateNoteUI();
		this.autosaveSong();
	}
	,getStrumTime: function(yPos) {
		return flixel_math_FlxMath.remapToRange(yPos,this.gridBG.y,this.gridBG.y + this.gridBG.get_height(),0,16 * Conductor.stepCrochet);
	}
	,getYfromStrum: function(strumTime) {
		return flixel_math_FlxMath.remapToRange(strumTime,0,16 * Conductor.stepCrochet,this.gridBG.y,this.gridBG.y + this.gridBG.get_height());
	}
	,daSpacing: null
	,loadLevel: function() {
		haxe_Log.trace(this._song.notes,{ fileName : "source/ChartingState.hx", lineNumber : 1023, className : "ChartingState", methodName : "loadLevel"});
	}
	,getNotes: function() {
		var noteData = [];
		var _g = 0;
		var _g1 = this._song.notes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			noteData.push(i.sectionNotes);
		}
		return noteData;
	}
	,loadJson: function(song) {
		PlayState.SONG = Song.loadFromJson(song.toLowerCase(),song.toLowerCase());
		var nextState = Type.createInstance(js_Boot.getClass(flixel_FlxG.game._state),[]);
		if(flixel_FlxG.game._state.switchTo(nextState)) {
			flixel_FlxG.game._requestedState = nextState;
		}
	}
	,loadAutosave: function() {
		PlayState.SONG = Song.parseJSONshit(flixel_FlxG.save.data.autosave);
		var nextState = Type.createInstance(js_Boot.getClass(flixel_FlxG.game._state),[]);
		if(flixel_FlxG.game._state.switchTo(nextState)) {
			flixel_FlxG.game._requestedState = nextState;
		}
	}
	,autosaveSong: function() {
		flixel_FlxG.save.data.autosave = JSON.stringify({ "song" : this._song});
		flixel_FlxG.save.flush();
	}
	,saveLevel: function() {
		var json = { "song" : this._song};
		var data = JSON.stringify(json);
		if(data != null && data.length > 0) {
			this._file = new openfl_net_FileReference();
			this._file.addEventListener("complete",$bind(this,this.onSaveComplete));
			this._file.addEventListener("cancel",$bind(this,this.onSaveCancel));
			this._file.addEventListener("ioError",$bind(this,this.onSaveError));
			this._file.save(StringTools.trim(data),this._song.song.toLowerCase() + ".json");
		}
	}
	,onSaveComplete: function(_) {
		this._file.removeEventListener("complete",$bind(this,this.onSaveComplete));
		this._file.removeEventListener("cancel",$bind(this,this.onSaveCancel));
		this._file.removeEventListener("ioError",$bind(this,this.onSaveError));
		this._file = null;
	}
	,onSaveCancel: function(_) {
		this._file.removeEventListener("complete",$bind(this,this.onSaveComplete));
		this._file.removeEventListener("cancel",$bind(this,this.onSaveCancel));
		this._file.removeEventListener("ioError",$bind(this,this.onSaveError));
		this._file = null;
	}
	,onSaveError: function(_) {
		this._file.removeEventListener("complete",$bind(this,this.onSaveComplete));
		this._file.removeEventListener("cancel",$bind(this,this.onSaveCancel));
		this._file.removeEventListener("ioError",$bind(this,this.onSaveError));
		this._file = null;
	}
	,__class__: ChartingState
});
var Conductor = function() {
};
$hxClasses["Conductor"] = Conductor;
Conductor.__name__ = "Conductor";
Conductor.songPosition = null;
Conductor.lastSongPos = null;
Conductor.mapBPMChanges = function(song) {
	Conductor.bpmChangeMap = [];
	var curBPM = song.bpm;
	var totalSteps = 0;
	var totalPos = 0;
	var _g = 0;
	var _g1 = song.notes.length;
	while(_g < _g1) {
		var i = _g++;
		if(song.notes[i].changeBPM && song.notes[i].bpm != curBPM) {
			curBPM = song.notes[i].bpm;
			var event = { stepTime : totalSteps, songTime : totalPos, bpm : curBPM};
			Conductor.bpmChangeMap.push(event);
		}
		var deltaSteps = song.notes[i].lengthInSteps;
		totalSteps += deltaSteps;
		totalPos += 60 / curBPM * 1000 / 4 * deltaSteps;
	}
	haxe_Log.trace("new BPM map BUDDY " + Std.string(Conductor.bpmChangeMap),{ fileName : "source/Conductor.hx", lineNumber : 59, className : "Conductor", methodName : "mapBPMChanges"});
};
Conductor.changeBPM = function(newBpm) {
	Conductor.bpm = newBpm;
	Conductor.crochet = 60 / Conductor.bpm * 1000;
	Conductor.stepCrochet = Conductor.crochet / 4;
};
Conductor.prototype = {
	__class__: Conductor
};
var Device = $hxEnums["Device"] = { __ename__ : "Device", __constructs__ : ["Keys","Gamepad"]
	,Keys: {_hx_index:0,__enum__:"Device",toString:$estr}
	,Gamepad: ($_=function(id) { return {_hx_index:1,id:id,__enum__:"Device",toString:$estr}; },$_.__params__ = ["id"],$_)
};
Device.__empty_constructs__ = [Device.Keys];
var Control = $hxEnums["Control"] = { __ename__ : "Control", __constructs__ : ["NOTE_LEFT","NOTE_DOWN","NOTE_UP","NOTE_RIGHT","UI_UP","UI_LEFT","UI_RIGHT","UI_DOWN","RESET","ACCEPT","BACK","PAUSE"]
	,NOTE_LEFT: {_hx_index:0,__enum__:"Control",toString:$estr}
	,NOTE_DOWN: {_hx_index:1,__enum__:"Control",toString:$estr}
	,NOTE_UP: {_hx_index:2,__enum__:"Control",toString:$estr}
	,NOTE_RIGHT: {_hx_index:3,__enum__:"Control",toString:$estr}
	,UI_UP: {_hx_index:4,__enum__:"Control",toString:$estr}
	,UI_LEFT: {_hx_index:5,__enum__:"Control",toString:$estr}
	,UI_RIGHT: {_hx_index:6,__enum__:"Control",toString:$estr}
	,UI_DOWN: {_hx_index:7,__enum__:"Control",toString:$estr}
	,RESET: {_hx_index:8,__enum__:"Control",toString:$estr}
	,ACCEPT: {_hx_index:9,__enum__:"Control",toString:$estr}
	,BACK: {_hx_index:10,__enum__:"Control",toString:$estr}
	,PAUSE: {_hx_index:11,__enum__:"Control",toString:$estr}
};
Control.__empty_constructs__ = [Control.NOTE_LEFT,Control.NOTE_DOWN,Control.NOTE_UP,Control.NOTE_RIGHT,Control.UI_UP,Control.UI_LEFT,Control.UI_RIGHT,Control.UI_DOWN,Control.RESET,Control.ACCEPT,Control.BACK,Control.PAUSE];
var KeyboardScheme = $hxEnums["KeyboardScheme"] = { __ename__ : "KeyboardScheme", __constructs__ : ["Solo","Duo","None","Custom"]
	,Solo: {_hx_index:0,__enum__:"KeyboardScheme",toString:$estr}
	,Duo: ($_=function(first) { return {_hx_index:1,first:first,__enum__:"KeyboardScheme",toString:$estr}; },$_.__params__ = ["first"],$_)
	,None: {_hx_index:2,__enum__:"KeyboardScheme",toString:$estr}
	,Custom: {_hx_index:3,__enum__:"KeyboardScheme",toString:$estr}
};
KeyboardScheme.__empty_constructs__ = [KeyboardScheme.Solo,KeyboardScheme.None,KeyboardScheme.Custom];
var flixel_input_actions_FlxActionSet = function(Name,DigitalActions,AnalogActions) {
	this.active = true;
	this.name = "";
	this.name = Name;
	if(DigitalActions == null) {
		DigitalActions = [];
	}
	if(AnalogActions == null) {
		AnalogActions = [];
	}
	this.digitalActions = DigitalActions;
	this.analogActions = AnalogActions;
};
$hxClasses["flixel.input.actions.FlxActionSet"] = flixel_input_actions_FlxActionSet;
flixel_input_actions_FlxActionSet.__name__ = "flixel.input.actions.FlxActionSet";
flixel_input_actions_FlxActionSet.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_input_actions_FlxActionSet.fromJson = function(Data,CallbackDigital,CallbackAnalog) {
	var digitalActions = [];
	var analogActions = [];
	if(Data == null) {
		return null;
	}
	if(Data.digitalActions != null) {
		var arrD = Data.digitalActions;
		var _g = 0;
		while(_g < arrD.length) {
			var d = arrD[_g];
			++_g;
			var dName = d;
			var action = new flixel_input_actions_FlxActionDigital(dName,CallbackDigital);
			digitalActions.push(action);
		}
	}
	if(Data.analogActions != null) {
		var arrA = Data.analogActions;
		var _g = 0;
		while(_g < arrA.length) {
			var a = arrA[_g];
			++_g;
			var aName = a;
			var action = new flixel_input_actions_FlxActionAnalog(aName,CallbackAnalog);
			analogActions.push(action);
		}
	}
	if(Data.name != null) {
		var name = Data.name;
		var set = new flixel_input_actions_FlxActionSet(name,digitalActions,analogActions);
		return set;
	}
	return null;
};
flixel_input_actions_FlxActionSet.prototype = {
	name: null
	,digitalActions: null
	,analogActions: null
	,active: null
	,toJson: function() {
		var space = "\t";
		return JSON.stringify(this,function(key,value) {
			if(((value) instanceof flixel_input_actions_FlxAction)) {
				var fa = value;
				return { "type" : fa.type, "name" : fa.name, "steamHandle" : fa.steamHandle};
			}
			return value;
		},space);
	}
	,attachSteamController: function(Handle,Attach) {
		if(Attach == null) {
			Attach = true;
		}
		this.attachSteamControllerSub(Handle,Attach,flixel_input_actions_FlxInputType.DIGITAL,this.digitalActions,null);
		this.attachSteamControllerSub(Handle,Attach,flixel_input_actions_FlxInputType.ANALOG,null,this.analogActions);
	}
	,add: function(Action1) {
		if(Action1.type == flixel_input_actions_FlxInputType.DIGITAL) {
			var dAction = Action1;
			if(this.digitalActions.indexOf(dAction) != -1) {
				return false;
			}
			this.digitalActions.push(dAction);
			return true;
		} else if(Action1.type == flixel_input_actions_FlxInputType.ANALOG) {
			var aAction = Action1;
			if(this.analogActions.indexOf(aAction) != -1) {
				return false;
			}
			this.analogActions.push(aAction);
			return true;
		}
		return false;
	}
	,destroy: function() {
		this.digitalActions = flixel_util_FlxDestroyUtil.destroyArray(this.digitalActions);
		this.analogActions = flixel_util_FlxDestroyUtil.destroyArray(this.analogActions);
	}
	,remove: function(Action1,Destroy) {
		if(Destroy == null) {
			Destroy = true;
		}
		var result = false;
		if(Action1.type == flixel_input_actions_FlxInputType.DIGITAL) {
			result = HxOverrides.remove(this.digitalActions,Action1);
			if(result && Destroy) {
				Action1.destroy();
			}
		} else if(Action1.type == flixel_input_actions_FlxInputType.ANALOG) {
			result = HxOverrides.remove(this.analogActions,Action1);
			if(result && Destroy) {
				Action1.destroy();
			}
		}
		return result;
	}
	,update: function() {
		if(!this.active) {
			return;
		}
		var _g = 0;
		var _g1 = this.digitalActions;
		while(_g < _g1.length) {
			var digitalAction = _g1[_g];
			++_g;
			digitalAction.update();
		}
		var _g = 0;
		var _g1 = this.analogActions;
		while(_g < _g1.length) {
			var analogAction = _g1[_g];
			++_g;
			analogAction.update();
		}
	}
	,attachSteamControllerSub: function(Handle,Attach,InputType,DigitalActions,AnalogActions) {
		var length = InputType == flixel_input_actions_FlxInputType.DIGITAL ? DigitalActions.length : AnalogActions.length;
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			var action = InputType == flixel_input_actions_FlxInputType.DIGITAL ? DigitalActions[i] : AnalogActions[i];
			if(action.steamHandle != -1) {
				var inputExists = false;
				var theInput = null;
				if(action.inputs != null) {
					var _g2 = 0;
					var _g3 = action.inputs;
					while(_g2 < _g3.length) {
						var input = _g3[_g2];
						++_g2;
						if(input.device == flixel_input_actions_FlxInputDevice.STEAM_CONTROLLER && input.deviceID == Handle) {
							inputExists = true;
							theInput = input;
						}
					}
				}
				if(Attach) {
					if(!inputExists) {
						if(InputType == flixel_input_actions_FlxInputType.DIGITAL) {
							DigitalActions[i].add(new flixel_input_actions_FlxActionInputDigitalSteam(action.steamHandle,2,Handle));
						} else if(InputType == flixel_input_actions_FlxInputType.ANALOG) {
							AnalogActions[i].add(new flixel_input_actions_FlxActionInputAnalogSteam(action.steamHandle,1,3,Handle));
						}
					}
				} else if(inputExists) {
					action.remove(theInput);
				}
			}
		}
	}
	,__class__: flixel_input_actions_FlxActionSet
};
var Controls = function(name,scheme) {
	if(scheme == null) {
		scheme = KeyboardScheme.None;
	}
	this.keyboardScheme = KeyboardScheme.None;
	this.gamepadsAdded = [];
	this.byName = new haxe_ds_StringMap();
	this._reset = new flixel_input_actions_FlxActionDigital("reset");
	this._pause = new flixel_input_actions_FlxActionDigital("pause");
	this._back = new flixel_input_actions_FlxActionDigital("back");
	this._accept = new flixel_input_actions_FlxActionDigital("accept");
	this._note_downR = new flixel_input_actions_FlxActionDigital("note_down-release");
	this._note_rightR = new flixel_input_actions_FlxActionDigital("note_right-release");
	this._note_leftR = new flixel_input_actions_FlxActionDigital("note_left-release");
	this._note_upR = new flixel_input_actions_FlxActionDigital("note_up-release");
	this._note_downP = new flixel_input_actions_FlxActionDigital("note_down-press");
	this._note_rightP = new flixel_input_actions_FlxActionDigital("note_right-press");
	this._note_leftP = new flixel_input_actions_FlxActionDigital("note_left-press");
	this._note_upP = new flixel_input_actions_FlxActionDigital("note_up-press");
	this._note_down = new flixel_input_actions_FlxActionDigital("note_down");
	this._note_right = new flixel_input_actions_FlxActionDigital("note_right");
	this._note_left = new flixel_input_actions_FlxActionDigital("note_left");
	this._note_up = new flixel_input_actions_FlxActionDigital("note_up");
	this._ui_downR = new flixel_input_actions_FlxActionDigital("ui_down-release");
	this._ui_rightR = new flixel_input_actions_FlxActionDigital("ui_right-release");
	this._ui_leftR = new flixel_input_actions_FlxActionDigital("ui_left-release");
	this._ui_upR = new flixel_input_actions_FlxActionDigital("ui_up-release");
	this._ui_downP = new flixel_input_actions_FlxActionDigital("ui_down-press");
	this._ui_rightP = new flixel_input_actions_FlxActionDigital("ui_right-press");
	this._ui_leftP = new flixel_input_actions_FlxActionDigital("ui_left-press");
	this._ui_upP = new flixel_input_actions_FlxActionDigital("ui_up-press");
	this._ui_down = new flixel_input_actions_FlxActionDigital("ui_down");
	this._ui_right = new flixel_input_actions_FlxActionDigital("ui_right");
	this._ui_left = new flixel_input_actions_FlxActionDigital("ui_left");
	this._ui_up = new flixel_input_actions_FlxActionDigital("ui_up");
	flixel_input_actions_FlxActionSet.call(this,name);
	this.add(this._ui_up);
	this.add(this._ui_left);
	this.add(this._ui_right);
	this.add(this._ui_down);
	this.add(this._ui_upP);
	this.add(this._ui_leftP);
	this.add(this._ui_rightP);
	this.add(this._ui_downP);
	this.add(this._ui_upR);
	this.add(this._ui_leftR);
	this.add(this._ui_rightR);
	this.add(this._ui_downR);
	this.add(this._note_up);
	this.add(this._note_left);
	this.add(this._note_right);
	this.add(this._note_down);
	this.add(this._note_upP);
	this.add(this._note_leftP);
	this.add(this._note_rightP);
	this.add(this._note_downP);
	this.add(this._note_upR);
	this.add(this._note_leftR);
	this.add(this._note_rightR);
	this.add(this._note_downR);
	this.add(this._accept);
	this.add(this._back);
	this.add(this._pause);
	this.add(this._reset);
	var _g = 0;
	var _g1 = this.digitalActions;
	while(_g < _g1.length) {
		var action = _g1[_g];
		++_g;
		this.byName.h[action.name] = action;
	}
	this.setKeyboardScheme(scheme,false);
};
$hxClasses["Controls"] = Controls;
Controls.__name__ = "Controls";
Controls.__super__ = flixel_input_actions_FlxActionSet;
Controls.prototype = $extend(flixel_input_actions_FlxActionSet.prototype,{
	_ui_up: null
	,_ui_left: null
	,_ui_right: null
	,_ui_down: null
	,_ui_upP: null
	,_ui_leftP: null
	,_ui_rightP: null
	,_ui_downP: null
	,_ui_upR: null
	,_ui_leftR: null
	,_ui_rightR: null
	,_ui_downR: null
	,_note_up: null
	,_note_left: null
	,_note_right: null
	,_note_down: null
	,_note_upP: null
	,_note_leftP: null
	,_note_rightP: null
	,_note_downP: null
	,_note_upR: null
	,_note_leftR: null
	,_note_rightR: null
	,_note_downR: null
	,_accept: null
	,_back: null
	,_pause: null
	,_reset: null
	,byName: null
	,gamepadsAdded: null
	,keyboardScheme: null
	,get_UI_UP: function() {
		return this._ui_up.check();
	}
	,get_UI_LEFT: function() {
		return this._ui_left.check();
	}
	,get_UI_RIGHT: function() {
		return this._ui_right.check();
	}
	,get_UI_DOWN: function() {
		return this._ui_down.check();
	}
	,get_UI_UP_P: function() {
		return this._ui_upP.check();
	}
	,get_UI_LEFT_P: function() {
		return this._ui_leftP.check();
	}
	,get_UI_RIGHT_P: function() {
		return this._ui_rightP.check();
	}
	,get_UI_DOWN_P: function() {
		return this._ui_downP.check();
	}
	,get_UI_UP_R: function() {
		return this._ui_upR.check();
	}
	,get_UI_LEFT_R: function() {
		return this._ui_leftR.check();
	}
	,get_UI_RIGHT_R: function() {
		return this._ui_rightR.check();
	}
	,get_UI_DOWN_R: function() {
		return this._ui_downR.check();
	}
	,get_NOTE_UP: function() {
		return this._note_up.check();
	}
	,get_NOTE_LEFT: function() {
		return this._note_left.check();
	}
	,get_NOTE_RIGHT: function() {
		return this._note_right.check();
	}
	,get_NOTE_DOWN: function() {
		return this._note_down.check();
	}
	,get_NOTE_UP_P: function() {
		return this._note_upP.check();
	}
	,get_NOTE_LEFT_P: function() {
		return this._note_leftP.check();
	}
	,get_NOTE_RIGHT_P: function() {
		return this._note_rightP.check();
	}
	,get_NOTE_DOWN_P: function() {
		return this._note_downP.check();
	}
	,get_NOTE_UP_R: function() {
		return this._note_upR.check();
	}
	,get_NOTE_LEFT_R: function() {
		return this._note_leftR.check();
	}
	,get_NOTE_RIGHT_R: function() {
		return this._note_rightR.check();
	}
	,get_NOTE_DOWN_R: function() {
		return this._note_downR.check();
	}
	,get_ACCEPT: function() {
		return this._accept.check();
	}
	,get_BACK: function() {
		return this._back.check();
	}
	,get_PAUSE: function() {
		return this._pause.check();
	}
	,get_RESET: function() {
		return this._reset.check();
	}
	,getActionFromControl: function(control) {
		switch(control._hx_index) {
		case 0:
			return this._note_left;
		case 1:
			return this._note_down;
		case 2:
			return this._note_up;
		case 3:
			return this._note_right;
		case 4:
			return this._ui_up;
		case 5:
			return this._ui_left;
		case 6:
			return this._ui_right;
		case 7:
			return this._ui_down;
		case 8:
			return this._reset;
		case 9:
			return this._accept;
		case 10:
			return this._back;
		case 11:
			return this._pause;
		}
	}
	,forEachBound: function(control,func) {
		switch(control._hx_index) {
		case 0:
			func(this._note_left,1);
			func(this._note_leftP,2);
			func(this._note_leftR,-1);
			break;
		case 1:
			func(this._note_down,1);
			func(this._note_downP,2);
			func(this._note_downR,-1);
			break;
		case 2:
			func(this._note_up,1);
			func(this._note_upP,2);
			func(this._note_upR,-1);
			break;
		case 3:
			func(this._note_right,1);
			func(this._note_rightP,2);
			func(this._note_rightR,-1);
			break;
		case 4:
			func(this._ui_up,1);
			func(this._ui_upP,2);
			func(this._ui_upR,-1);
			break;
		case 5:
			func(this._ui_left,1);
			func(this._ui_leftP,2);
			func(this._ui_leftR,-1);
			break;
		case 6:
			func(this._ui_right,1);
			func(this._ui_rightP,2);
			func(this._ui_rightR,-1);
			break;
		case 7:
			func(this._ui_down,1);
			func(this._ui_downP,2);
			func(this._ui_downR,-1);
			break;
		case 8:
			func(this._reset,2);
			break;
		case 9:
			func(this._accept,2);
			break;
		case 10:
			func(this._back,2);
			break;
		case 11:
			func(this._pause,2);
			break;
		}
	}
	,replaceBinding: function(control,device,toAdd,toRemove) {
		var _gthis = this;
		if(toAdd != toRemove) {
			switch(device._hx_index) {
			case 0:
				this.forEachBound(control,function(action,state) {
					_gthis.replaceKey(action,toAdd,toRemove);
				});
				break;
			case 1:
				var id = device.id;
				this.forEachBound(control,function(action,state) {
					_gthis.replaceButton(action,id,toAdd,toRemove);
				});
				break;
			}
		}
	}
	,replaceKey: function(action,toAdd,toRemove) {
		var _g = 0;
		var _g1 = action.inputs.length;
		while(_g < _g1) {
			var i = _g++;
			var input = action.inputs[i];
			if(input.device == flixel_input_actions_FlxInputDevice.KEYBOARD && input.inputID == toRemove) {
				action.inputs[i].inputID = toAdd;
			}
		}
	}
	,replaceButton: function(action,id,toAdd,toRemove) {
		var _g = 0;
		var _g1 = action.inputs.length;
		while(_g < _g1) {
			var i = _g++;
			var input = action.inputs[i];
			if(input.device == flixel_input_actions_FlxInputDevice.GAMEPAD && id != -1 && input.deviceID == id && input.inputID == toRemove) {
				action.inputs[i].inputID = toAdd;
			}
		}
	}
	,bindKeys: function(control,keys) {
		switch(control._hx_index) {
		case 0:
			var action = this._note_left;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._note_leftP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._note_leftR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 1:
			var action = this._note_down;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._note_downP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._note_downR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 2:
			var action = this._note_up;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._note_upP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._note_upR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 3:
			var action = this._note_right;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._note_rightP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._note_rightR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 4:
			var action = this._ui_up;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._ui_upP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._ui_upR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 5:
			var action = this._ui_left;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._ui_leftP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._ui_leftR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 6:
			var action = this._ui_right;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._ui_rightP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._ui_rightR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 7:
			var action = this._ui_down;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._ui_downP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._ui_downR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 8:
			var action = this._reset;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 9:
			var action = this._accept;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 10:
			var action = this._back;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 11:
			var action = this._pause;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		}
	}
	,setKeyboardScheme: function(scheme,reset) {
		if(reset == null) {
			reset = true;
		}
		if(reset) {
			this.removeKeyboard();
		}
		this.keyboardScheme = scheme;
		switch(scheme._hx_index) {
		case 0:
			var keys = [87,38];
			switch(Control.UI_UP._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			var keys = [83,40];
			switch(Control.UI_DOWN._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			var keys = [65,37];
			switch(Control.UI_LEFT._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			var keys = [68,39];
			switch(Control.UI_RIGHT._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			var keys = [87,38];
			switch(Control.NOTE_UP._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			var keys = [83,40];
			switch(Control.NOTE_DOWN._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			var keys = [65,37];
			switch(Control.NOTE_LEFT._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			var keys = [68,39];
			switch(Control.NOTE_RIGHT._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			var keys = [90,32,13];
			switch(Control.ACCEPT._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			var keys = [88,8,27];
			switch(Control.BACK._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			var keys = [80,13,27];
			switch(Control.PAUSE._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			var keys = [82];
			switch(Control.RESET._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			break;
		case 1:
			if(scheme.first) {
				var keys = [87];
				switch(Control.UI_UP._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [83];
				switch(Control.UI_DOWN._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [65];
				switch(Control.UI_LEFT._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [68];
				switch(Control.UI_RIGHT._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [87];
				switch(Control.NOTE_UP._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [83];
				switch(Control.NOTE_DOWN._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [65];
				switch(Control.NOTE_LEFT._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [68];
				switch(Control.NOTE_RIGHT._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [71,90];
				switch(Control.ACCEPT._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [72,88];
				switch(Control.BACK._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [49];
				switch(Control.PAUSE._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [82];
				switch(Control.RESET._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
			} else {
				var keys = [38];
				switch(Control.UI_UP._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [40];
				switch(Control.UI_DOWN._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [37];
				switch(Control.UI_LEFT._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [39];
				switch(Control.UI_RIGHT._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [38];
				switch(Control.NOTE_UP._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [40];
				switch(Control.NOTE_DOWN._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [37];
				switch(Control.NOTE_LEFT._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [39];
				switch(Control.NOTE_RIGHT._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [79];
				switch(Control.ACCEPT._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [80];
				switch(Control.BACK._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [13];
				switch(Control.PAUSE._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [8];
				switch(Control.RESET._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
			}
			break;
		case 2:
			break;
		case 3:
			break;
		}
	}
	,removeKeyboard: function() {
		var _g = 0;
		var _g1 = this.digitalActions;
		while(_g < _g1.length) {
			var action = _g1[_g];
			++_g;
			var i = action.inputs.length;
			while(i-- > 0) {
				var input = action.inputs[i];
				if(input.device == flixel_input_actions_FlxInputDevice.KEYBOARD) {
					action.remove(input);
				}
			}
		}
	}
	,addGamepadWithSaveData: function(id,data) {
		this.gamepadsAdded.push(id);
		this.fromSaveData(data,Device.Gamepad(id));
	}
	,addDefaultGamepad: function(id) {
		var map = new haxe_ds_EnumValueMap();
		map.set(Control.ACCEPT,[65]);
		map.set(Control.BACK,[66,this._back.check()]);
		map.set(Control.UI_UP,[11,34]);
		map.set(Control.UI_DOWN,[12,36]);
		map.set(Control.UI_LEFT,[13,37]);
		map.set(Control.UI_RIGHT,[14,35]);
		map.set(Control.NOTE_UP,[11,89,34,38]);
		map.set(Control.NOTE_DOWN,[12,65,36,40]);
		map.set(Control.NOTE_LEFT,[13,88,37,41]);
		map.set(Control.NOTE_RIGHT,[14,66,35,39]);
		map.set(Control.PAUSE,[7]);
		map.set(Control.RESET,[89]);
		this.gamepadsAdded.push(id);
		var keys;
		while(true) {
			keys = map.keys();
			if(!keys.hasNext()) {
				break;
			}
			var next = keys.next();
			this.bindButtons(next,id,map.get(next));
		}
	}
	,bindButtons: function(control,id,buttons) {
		switch(control._hx_index) {
		case 0:
			var action = this._note_left;
			var state = 1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._note_leftP;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._note_leftR;
			var state = -1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 1:
			var action = this._note_down;
			var state = 1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._note_downP;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._note_downR;
			var state = -1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 2:
			var action = this._note_up;
			var state = 1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._note_upP;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._note_upR;
			var state = -1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 3:
			var action = this._note_right;
			var state = 1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._note_rightP;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._note_rightR;
			var state = -1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 4:
			var action = this._ui_up;
			var state = 1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._ui_upP;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._ui_upR;
			var state = -1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 5:
			var action = this._ui_left;
			var state = 1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._ui_leftP;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._ui_leftR;
			var state = -1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 6:
			var action = this._ui_right;
			var state = 1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._ui_rightP;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._ui_rightR;
			var state = -1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 7:
			var action = this._ui_down;
			var state = 1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._ui_downP;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._ui_downR;
			var state = -1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 8:
			var action = this._reset;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 9:
			var action = this._accept;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 10:
			var action = this._back;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 11:
			var action = this._pause;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		}
	}
	,getInputsFor: function(control,device,list) {
		if(list == null) {
			list = [];
		}
		switch(device._hx_index) {
		case 0:
			var _g = 0;
			var _g1 = this.getActionFromControl(control).inputs;
			while(_g < _g1.length) {
				var input = _g1[_g];
				++_g;
				if(input.device == flixel_input_actions_FlxInputDevice.KEYBOARD) {
					list.push(input.inputID);
				}
			}
			break;
		case 1:
			var id = device.id;
			var _g = 0;
			var _g1 = this.getActionFromControl(control).inputs;
			while(_g < _g1.length) {
				var input = _g1[_g];
				++_g;
				if(input.device == flixel_input_actions_FlxInputDevice.GAMEPAD && input.deviceID != -1 && input.deviceID == id) {
					list.push(input.inputID);
				}
			}
			break;
		}
		return list;
	}
	,fromSaveData: function(data,device) {
		var _g = 0;
		var _g1 = Control.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			var inputs = Reflect.field(data,$hxEnums[button.__enum__].__constructs__[button._hx_index]);
			if(inputs != null) {
				switch(device._hx_index) {
				case 0:
					this.bindKeys(button,inputs);
					break;
				case 1:
					var id = device.id;
					this.bindButtons(button,id,inputs);
					break;
				}
			}
		}
	}
	,createSaveData: function(device) {
		var cannotReturn = true;
		var obj = { };
		var _g = 0;
		var _g1 = Control.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			var inputs = this.getInputsFor(button,device);
			cannotReturn = cannotReturn && inputs.length == 0;
			obj[$hxEnums[button.__enum__].__constructs__[button._hx_index]] = inputs;
		}
		if(cannotReturn) {
			return null;
		} else {
			return obj;
		}
	}
	,__class__: Controls
	,__properties__: {get_RESET:"get_RESET",get_PAUSE:"get_PAUSE",get_BACK:"get_BACK",get_ACCEPT:"get_ACCEPT",get_NOTE_DOWN_R:"get_NOTE_DOWN_R",get_NOTE_RIGHT_R:"get_NOTE_RIGHT_R",get_NOTE_LEFT_R:"get_NOTE_LEFT_R",get_NOTE_UP_R:"get_NOTE_UP_R",get_NOTE_DOWN_P:"get_NOTE_DOWN_P",get_NOTE_RIGHT_P:"get_NOTE_RIGHT_P",get_NOTE_LEFT_P:"get_NOTE_LEFT_P",get_NOTE_UP_P:"get_NOTE_UP_P",get_NOTE_DOWN:"get_NOTE_DOWN",get_NOTE_RIGHT:"get_NOTE_RIGHT",get_NOTE_LEFT:"get_NOTE_LEFT",get_NOTE_UP:"get_NOTE_UP",get_UI_DOWN_R:"get_UI_DOWN_R",get_UI_RIGHT_R:"get_UI_RIGHT_R",get_UI_LEFT_R:"get_UI_LEFT_R",get_UI_UP_R:"get_UI_UP_R",get_UI_DOWN_P:"get_UI_DOWN_P",get_UI_RIGHT_P:"get_UI_RIGHT_P",get_UI_LEFT_P:"get_UI_LEFT_P",get_UI_UP_P:"get_UI_UP_P",get_UI_DOWN:"get_UI_DOWN",get_UI_RIGHT:"get_UI_RIGHT",get_UI_LEFT:"get_UI_LEFT",get_UI_UP:"get_UI_UP"}
});
var CoolUtil = function() { };
$hxClasses["CoolUtil"] = CoolUtil;
CoolUtil.__name__ = "CoolUtil";
CoolUtil.difficultyString = function() {
	return CoolUtil.difficultyArray[PlayState.storyDifficulty];
};
CoolUtil.coolTextFile = function(path) {
	var daList = StringTools.trim(lime_utils_Assets.getText(path)).split("\n");
	var _g = 0;
	var _g1 = daList.length;
	while(_g < _g1) {
		var i = _g++;
		daList[i] = StringTools.trim(daList[i]);
	}
	return daList;
};
CoolUtil.numberArray = function(max,min) {
	if(min == null) {
		min = 0;
	}
	var dumbArray = [];
	var _g = min;
	var _g1 = max;
	while(_g < _g1) {
		var i = _g++;
		dumbArray.push(i);
	}
	return dumbArray;
};
CoolUtil.camLerpShit = function(ratio) {
	return flixel_FlxG.elapsed / 0.016666666666666666 * ratio;
};
CoolUtil.coolLerp = function(a,b,ratio) {
	return a + CoolUtil.camLerpShit(ratio) * (b - a);
};
var CutsceneAnimTestState = function() {
	this.curSelected = 0;
	flixel_FlxState.call(this);
	var grid = flixel_addons_display_FlxGridOverlay.create(10,10);
	grid.scrollFactor.set(0.5,0.5);
	this.add(grid);
	this.debugTxt = new flixel_text_FlxText(900,20,0,"",20);
	this.debugTxt.set_color(-16776961);
	this.add(this.debugTxt);
	var tankman = new animate_FlxAnimate(600,200);
	this.add(tankman);
};
$hxClasses["CutsceneAnimTestState"] = CutsceneAnimTestState;
CutsceneAnimTestState.__name__ = "CutsceneAnimTestState";
CutsceneAnimTestState.__super__ = flixel_FlxState;
CutsceneAnimTestState.prototype = $extend(flixel_FlxState.prototype,{
	curSelected: null
	,debugTxt: null
	,update: function(elapsed) {
		flixel_FlxState.prototype.update.call(this,elapsed);
	}
	,__class__: CutsceneAnimTestState
});
var DialogueBox = function(talkingRight,dialogueList) {
	if(talkingRight == null) {
		talkingRight = true;
	}
	this.isEnding = false;
	this.dialogueEnded = false;
	this.dialogueStarted = false;
	this.dialogueOpened = false;
	this.dialogueList = [];
	this.curCharacter = "";
	var _gthis = this;
	flixel_group_FlxTypedSpriteGroup.call(this);
	switch(PlayState.SONG.song.toLowerCase()) {
	case "senpai":
		flixel_FlxG.sound.playMusic(Paths.getPath("music/" + "Lunchbox" + "." + "mp3","MUSIC",null),0);
		var _this = flixel_FlxG.sound.music;
		var Duration = 1;
		var From = 0;
		var To = 0.8;
		if(To == null) {
			To = 1;
		}
		if(From == null) {
			From = 0;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(_this._channel == null) {
			_this.play();
		}
		if(_this.fadeTween != null) {
			_this.fadeTween.cancel();
		}
		_this.fadeTween = flixel_tweens_FlxTween.num(From,To,Duration,{ onComplete : null},$bind(_this,_this.volumeTween));
		break;
	case "thorns":
		flixel_FlxG.sound.playMusic(Paths.getPath("music/" + "LunchboxScary" + "." + "mp3","MUSIC",null),0);
		var _this = flixel_FlxG.sound.music;
		var Duration = 1;
		var From = 0;
		var To = 0.8;
		if(To == null) {
			To = 1;
		}
		if(From == null) {
			From = 0;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(_this._channel == null) {
			_this.play();
		}
		if(_this.fadeTween != null) {
			_this.fadeTween.cancel();
		}
		_this.fadeTween = flixel_tweens_FlxTween.num(From,To,Duration,{ onComplete : null},$bind(_this,_this.volumeTween));
		break;
	}
	this.bgFade = new flixel_FlxSprite(-200,-200).makeGraphic(flixel_FlxG.width * 1.3 | 0,flixel_FlxG.height * 1.3 | 0,-4988968);
	this.bgFade.scrollFactor.set();
	this.bgFade.set_alpha(0);
	this.add(this.bgFade);
	new flixel_util_FlxTimer().start(0.83,function(tmr) {
		var _g = _gthis.bgFade;
		_g.set_alpha(_g.alpha + 0.13999999999999999);
		if(_gthis.bgFade.alpha > 0.7) {
			_gthis.bgFade.set_alpha(0.7);
		}
	},5);
	this.portraitLeft = new flixel_FlxSprite(-20,40);
	var library = null;
	this.portraitLeft.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/senpaiPortrait" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/senpaiPortrait" + ".xml","TEXT",library)));
	this.portraitLeft.animation.addByPrefix("enter","Senpai Portrait Enter",24,false);
	this.portraitLeft.setGraphicSize(this.portraitLeft.get_width() * PlayState.daPixelZoom * 0.9 | 0);
	this.portraitLeft.updateHitbox();
	this.portraitLeft.scrollFactor.set();
	this.add(this.portraitLeft);
	this.portraitLeft.set_visible(false);
	this.portraitRight = new flixel_FlxSprite(0,40);
	var library = null;
	this.portraitRight.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/bfPortrait" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/bfPortrait" + ".xml","TEXT",library)));
	this.portraitRight.animation.addByPrefix("enter","Boyfriend portrait enter",24,false);
	this.portraitRight.setGraphicSize(this.portraitRight.get_width() * PlayState.daPixelZoom * 0.9 | 0);
	this.portraitRight.updateHitbox();
	this.portraitRight.scrollFactor.set();
	this.add(this.portraitRight);
	this.portraitRight.set_visible(false);
	this.box = new flixel_FlxSprite(-20,45);
	var hasDialog = false;
	switch(PlayState.SONG.song.toLowerCase()) {
	case "roses":
		hasDialog = true;
		flixel_FlxG.sound.play(Paths.sound("ANGRY_TEXT_BOX"));
		var library = null;
		this.box.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/pixelUI/dialogueBox-senpaiMad" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/pixelUI/dialogueBox-senpaiMad" + ".xml","TEXT",library)));
		this.box.animation.addByPrefix("normalOpen","SENPAI ANGRY IMPACT SPEECH",24,false);
		this.box.animation.addByIndices("normal","SENPAI ANGRY IMPACT SPEECH",[4],"",24);
		break;
	case "senpai":
		hasDialog = true;
		var library = null;
		this.box.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/pixelUI/dialogueBox-pixel" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/pixelUI/dialogueBox-pixel" + ".xml","TEXT",library)));
		this.box.animation.addByPrefix("normalOpen","Text Box Appear",24,false);
		this.box.animation.addByIndices("normal","Text Box Appear",[4],"",24);
		break;
	case "thorns":
		hasDialog = true;
		var library = null;
		this.box.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/pixelUI/dialogueBox-evil" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/pixelUI/dialogueBox-evil" + ".xml","TEXT",library)));
		this.box.animation.addByPrefix("normalOpen","Spirit Textbox spawn",24,false);
		this.box.animation.addByIndices("normal","Spirit Textbox spawn",[11],"",24);
		var face = new flixel_FlxSprite(320,170).loadGraphic(Paths.getPath("images/" + "weeb/spiritFaceForward" + ".png","IMAGE",null));
		face.setGraphicSize(face.get_width() * 6 | 0);
		this.add(face);
		break;
	}
	this.dialogueList = dialogueList;
	if(!hasDialog) {
		return;
	}
	this.box.animation.play("normalOpen");
	this.box.setGraphicSize(this.box.get_width() * PlayState.daPixelZoom * 0.9 | 0);
	this.box.updateHitbox();
	this.add(this.box);
	this.box.screenCenter(flixel_util_FlxAxes.X);
	this.portraitLeft.screenCenter(flixel_util_FlxAxes.X);
	this.handSelect = new flixel_FlxSprite(1042,590).loadGraphic(Paths.getPath("images/" + "weeb/pixelUI/hand_textbox" + ".png","IMAGE",null));
	this.handSelect.setGraphicSize(this.handSelect.get_width() * PlayState.daPixelZoom * 0.9 | 0);
	this.handSelect.updateHitbox();
	this.handSelect.set_visible(false);
	this.add(this.handSelect);
	talkingRight = !talkingRight;
	this.dropText = new flixel_text_FlxText(242,502,flixel_FlxG.width * 0.6 | 0,"",32);
	this.dropText.set_font("Pixel Arial 11 Bold");
	this.dropText.set_color(-2583404);
	this.add(this.dropText);
	this.swagDialogue = new flixel_addons_text_FlxTypeText(240,500,flixel_FlxG.width * 0.6 | 0,"",32);
	this.swagDialogue.set_font("Pixel Arial 11 Bold");
	this.swagDialogue.set_color(-12640223);
	var tmp = flixel_FlxG.sound.load(Paths.sound("pixelText"),0.6);
	this.swagDialogue.sounds = [tmp];
	this.add(this.swagDialogue);
	this.dialogue = new Alphabet(0,80,"",false,true);
};
$hxClasses["DialogueBox"] = DialogueBox;
DialogueBox.__name__ = "DialogueBox";
DialogueBox.__super__ = flixel_group_FlxTypedSpriteGroup;
DialogueBox.prototype = $extend(flixel_group_FlxTypedSpriteGroup.prototype,{
	box: null
	,curCharacter: null
	,dialogue: null
	,dialogueList: null
	,swagDialogue: null
	,dropText: null
	,finishThing: null
	,portraitLeft: null
	,portraitRight: null
	,handSelect: null
	,bgFade: null
	,dialogueOpened: null
	,dialogueStarted: null
	,dialogueEnded: null
	,update: function(elapsed) {
		var _gthis = this;
		if(PlayState.SONG.song.toLowerCase() == "roses") {
			this.portraitLeft.set_visible(false);
		}
		if(PlayState.SONG.song.toLowerCase() == "thorns") {
			this.portraitLeft.set_color(-16777216);
			this.swagDialogue.set_color(-1);
			this.dropText.set_color(-16777216);
		}
		this.dropText.set_text(this.swagDialogue.text);
		if(this.box.animation._curAnim != null) {
			if(this.box.animation._curAnim.name == "normalOpen" && this.box.animation._curAnim.finished) {
				this.box.animation.play("normal");
				this.dialogueOpened = true;
			}
		}
		if(this.dialogueOpened && !this.dialogueStarted) {
			this.startDialogue();
			this.dialogueStarted = true;
		}
		if(flixel_FlxG.keys.justPressed.get_ANY() && this.dialogueEnded) {
			this.remove(this.dialogue);
			flixel_FlxG.sound.play(Paths.sound("clickText"),0.8);
			if(this.dialogueList[1] == null && this.dialogueList[0] != null) {
				if(!this.isEnding) {
					this.isEnding = true;
					if(PlayState.SONG.song.toLowerCase() == "senpai" || PlayState.SONG.song.toLowerCase() == "thorns") {
						var _this = flixel_FlxG.sound.music;
						var Duration = 2.2;
						var To = 0;
						if(To == null) {
							To = 0;
						}
						if(Duration == null) {
							Duration = 1;
						}
						if(_this.fadeTween != null) {
							_this.fadeTween.cancel();
						}
						_this.fadeTween = flixel_tweens_FlxTween.num(_this._volume,To,Duration,{ onComplete : null},$bind(_this,_this.volumeTween));
					}
					new flixel_util_FlxTimer().start(0.2,function(tmr) {
						var _g = _gthis.box;
						_g.set_alpha(_g.alpha - 0.2);
						var _g = _gthis.bgFade;
						_g.set_alpha(_g.alpha - 0.13999999999999999);
						_gthis.portraitLeft.set_visible(false);
						_gthis.portraitRight.set_visible(false);
						var _g = _gthis.swagDialogue;
						_g.set_alpha(_g.alpha - 0.2);
						var _g = _gthis.handSelect;
						_g.set_alpha(_g.alpha - 0.2);
						_gthis.dropText.set_alpha(_gthis.swagDialogue.alpha);
					},5);
					new flixel_util_FlxTimer().start(1.2,function(tmr) {
						_gthis.finishThing();
						_gthis.kill();
					});
				}
			} else {
				HxOverrides.remove(this.dialogueList,this.dialogueList[0]);
				this.startDialogue();
			}
		} else if(flixel_FlxG.keys.justPressed.get_ANY() && this.dialogueStarted) {
			this.swagDialogue.skip();
		}
		flixel_group_FlxTypedSpriteGroup.prototype.update.call(this,elapsed);
	}
	,isEnding: null
	,startDialogue: function() {
		var _gthis = this;
		this.cleanDialog();
		this.swagDialogue.resetText(this.dialogueList[0]);
		this.swagDialogue.start(0.04,true);
		this.swagDialogue.completeCallback = function() {
			haxe_Log.trace("dialogue finish",{ fileName : "source/DialogueBox.hx", lineNumber : 242, className : "DialogueBox", methodName : "startDialogue"});
			_gthis.handSelect.set_visible(true);
			_gthis.dialogueEnded = true;
		};
		this.handSelect.set_visible(false);
		this.dialogueEnded = false;
		switch(this.curCharacter) {
		case "bf":
			this.portraitLeft.set_visible(false);
			if(!this.portraitRight.visible) {
				this.portraitRight.set_visible(true);
				this.portraitRight.animation.play("enter");
			}
			break;
		case "dad":
			this.portraitRight.set_visible(false);
			if(!this.portraitLeft.visible) {
				this.portraitLeft.set_visible(true);
				this.portraitLeft.animation.play("enter");
			}
			break;
		}
	}
	,cleanDialog: function() {
		var splitName = this.dialogueList[0].split(":");
		this.curCharacter = splitName[1];
		this.dialogueList[0] = StringTools.trim(HxOverrides.substr(this.dialogueList[0],splitName[1].length + 2,null));
	}
	,__class__: DialogueBox
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var FlxVideo = function(VideoAsset) {
	flixel_FlxBasic.call(this);
	this.video = new openfl_media_Video();
	this.video.set_x(0);
	this.video.set_y(0);
	flixel_FlxG.addChildBelowMouse(this.video);
	var netConnection = new openfl_net_NetConnection();
	netConnection.connect(null);
	this.netStream = new openfl_net_NetStream(netConnection);
	this.netStream.client = { onMetaData : $bind(this,this.client_onMetaData)};
	netConnection.addEventListener("netStatus",$bind(this,this.netConnection_onNetStatus));
	this.netStream.play(Paths.getPath(VideoAsset,"TEXT",null));
};
$hxClasses["FlxVideo"] = FlxVideo;
FlxVideo.__name__ = "FlxVideo";
FlxVideo.__super__ = flixel_FlxBasic;
FlxVideo.prototype = $extend(flixel_FlxBasic.prototype,{
	video: null
	,netStream: null
	,finishCallback: null
	,finishVideo: function() {
		this.netStream.dispose();
		if(flixel_FlxG.game.contains(this.video)) {
			flixel_FlxG.game.removeChild(this.video);
		}
		if(this.finishCallback != null) {
			this.finishCallback();
		}
	}
	,client_onMetaData: function(e) {
		this.video.attachNetStream(this.netStream);
		this.video.set_width(flixel_FlxG.width);
		this.video.set_height(flixel_FlxG.height);
	}
	,netConnection_onNetStatus: function(e) {
		if(e.info.code == "NetStream.Play.Complete") {
			this.finishVideo();
		}
	}
	,__class__: FlxVideo
});
var FreeplayState = function(TransIn,TransOut) {
	this.iconArray = [];
	this.curPlaying = false;
	this.coolColors = [-7179779,-7179779,-14535868,-7072173,-223529,-6237697,-34625,-608764];
	this.intendedScore = 0;
	this.lerpScore = 0;
	this.curDifficulty = 1;
	this.curSelected = 0;
	this.songs = [];
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["FreeplayState"] = FreeplayState;
FreeplayState.__name__ = "FreeplayState";
FreeplayState.__super__ = MusicBeatState;
FreeplayState.prototype = $extend(MusicBeatState.prototype,{
	songs: null
	,selector: null
	,curSelected: null
	,curDifficulty: null
	,bg: null
	,scoreBG: null
	,scoreText: null
	,diffText: null
	,lerpScore: null
	,intendedScore: null
	,grpSongs: null
	,coolColors: null
	,curPlaying: null
	,iconArray: null
	,create: function() {
		var initSonglist = CoolUtil.coolTextFile(Paths.getPath("data/" + "freeplaySonglist" + ".txt","TEXT",null));
		var _g = 0;
		var _g1 = initSonglist.length;
		while(_g < _g1) {
			var i = _g++;
			this.songs.push(new SongMetadata(initSonglist[i],1,"gf"));
		}
		if(flixel_FlxG.sound.music._channel == null) {
			flixel_FlxG.sound.playMusic(Paths.getPath("music/" + "freakyMenu" + "." + "mp3","MUSIC",null));
		}
		if(StoryMenuState.weekUnlocked[2]) {
			this.addWeek(["Bopeebo","Fresh","Dadbattle"],1,["dad"]);
		}
		if(StoryMenuState.weekUnlocked[2]) {
			this.addWeek(["Spookeez","South","Monster"],2,["spooky","spooky","monster"]);
		}
		if(StoryMenuState.weekUnlocked[3]) {
			this.addWeek(["Pico","Philly","Blammed"],3,["pico"]);
		}
		if(StoryMenuState.weekUnlocked[4]) {
			this.addWeek(["Satin-Panties","High","Milf"],4,["mom"]);
		}
		if(StoryMenuState.weekUnlocked[5]) {
			this.addWeek(["Cocoa","Eggnog","Winter-Horrorland"],5,["parents-christmas","parents-christmas","monster-christmas"]);
		}
		if(StoryMenuState.weekUnlocked[6]) {
			this.addWeek(["Senpai","Roses","Thorns"],6,["senpai","senpai","spirit"]);
		}
		if(StoryMenuState.weekUnlocked[7]) {
			this.addWeek(["Ugh","Guns","Stress"],7,["tankman"]);
		}
		this.bg = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + "menuDesat" + ".png","IMAGE",null));
		this.add(this.bg);
		this.grpSongs = new flixel_group_FlxTypedGroup();
		this.add(this.grpSongs);
		var _g = 0;
		var _g1 = this.songs.length;
		while(_g < _g1) {
			var i = _g++;
			var songText = new Alphabet(0,70 * i + 30,this.songs[i].songName,true,false);
			songText.isMenuItem = true;
			songText.targetY = i;
			this.grpSongs.add(songText);
			var icon = new HealthIcon(this.songs[i].songCharacter);
			icon.sprTracker = songText;
			this.iconArray.push(icon);
			this.add(icon);
		}
		this.scoreText = new flixel_text_FlxText(flixel_FlxG.width * 0.7,5,0,"",32);
		this.scoreText.setFormat("assets/fonts/" + "vcr.ttf",32,-1,"right");
		this.scoreBG = new flixel_FlxSprite(this.scoreText.x - 6,0).makeGraphic(1,66,-16777216);
		this.scoreBG.set_antialiasing(false);
		this.scoreBG.set_alpha(0.6);
		this.add(this.scoreBG);
		this.diffText = new flixel_text_FlxText(this.scoreText.x,this.scoreText.y + 36,0,"",24);
		this.diffText.set_font(this.scoreText._font);
		this.add(this.diffText);
		this.add(this.scoreText);
		this.changeSelection();
		this.changeDiff();
		this.selector = new flixel_text_FlxText();
		this.selector.set_size(40);
		this.selector.set_text(">");
		var swag = new Alphabet(1,0,"swag");
		MusicBeatState.prototype.create.call(this);
	}
	,addSong: function(songName,weekNum,songCharacter) {
		this.songs.push(new SongMetadata(songName,weekNum,songCharacter));
	}
	,addWeek: function(songs,weekNum,songCharacters) {
		if(songCharacters == null) {
			songCharacters = ["bf"];
		}
		var num = 0;
		var _g = 0;
		while(_g < songs.length) {
			var song = songs[_g];
			++_g;
			this.addSong(song,weekNum,songCharacters[num]);
			if(songCharacters.length != 1) {
				++num;
			}
		}
	}
	,update: function(elapsed) {
		MusicBeatState.prototype.update.call(this,elapsed);
		if(flixel_FlxG.sound.music != null && flixel_FlxG.sound.music._volume < 0.7) {
			var _g = flixel_FlxG.sound.music;
			_g.set_volume(_g._volume + 0.5 * flixel_FlxG.elapsed);
		}
		this.lerpScore = CoolUtil.coolLerp(this.lerpScore,this.intendedScore,0.4);
		var tmp = this.bg;
		var Color1 = this.bg.color;
		var Color2 = this.coolColors[this.songs[this.curSelected].week % this.coolColors.length];
		var Factor = CoolUtil.camLerpShit(0.045);
		if(Factor == null) {
			Factor = 0.5;
		}
		var r = ((Color2 >> 16 & 255) - (Color1 >> 16 & 255)) * Factor + (Color1 >> 16 & 255) | 0;
		var g = ((Color2 >> 8 & 255) - (Color1 >> 8 & 255)) * Factor + (Color1 >> 8 & 255) | 0;
		var b = ((Color2 & 255) - (Color1 & 255)) * Factor + (Color1 & 255) | 0;
		var a = ((Color2 >> 24 & 255) - (Color1 >> 24 & 255)) * Factor + (Color1 >> 24 & 255) | 0;
		var Alpha = a;
		if(Alpha == null) {
			Alpha = 255;
		}
		var color = flixel_util_FlxColor._new();
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 255;
		}
		color &= -16711681;
		color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
		color &= -65281;
		color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
		color &= -256;
		color |= b > 255 ? 255 : b < 0 ? 0 : b;
		color &= 16777215;
		color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
		tmp.set_color(color);
		this.scoreText.set_text("PERSONAL BEST:" + Math.round(this.lerpScore));
		this.positionHighscore();
		var upP = PlayerSettings.player1.controls._ui_upP.check();
		var downP = PlayerSettings.player1.controls._ui_downP.check();
		var accepted = PlayerSettings.player1.controls._accept.check();
		if(upP) {
			this.changeSelection(-1);
		}
		if(downP) {
			this.changeSelection(1);
		}
		if(flixel_FlxG.mouse.wheel != 0) {
			this.changeSelection(-Math.round(flixel_FlxG.mouse.wheel / 4));
		}
		if(PlayerSettings.player1.controls._ui_leftP.check()) {
			this.changeDiff(-1);
		}
		if(PlayerSettings.player1.controls._ui_rightP.check()) {
			this.changeDiff(1);
		}
		if(PlayerSettings.player1.controls._back.check()) {
			flixel_FlxG.sound.play(Paths.sound("cancelMenu"));
			var nextState = new MainMenuState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
		if(accepted) {
			var poop = Highscore.formatSong(this.songs[this.curSelected].songName.toLowerCase(),this.curDifficulty);
			PlayState.SONG = Song.loadFromJson(poop,this.songs[this.curSelected].songName.toLowerCase());
			PlayState.isStoryMode = false;
			PlayState.storyDifficulty = this.curDifficulty;
			PlayState.storyWeek = this.songs[this.curSelected].week;
			haxe_Log.trace("CUR WEEK" + PlayState.storyWeek,{ fileName : "source/FreeplayState.hx", lineNumber : 236, className : "FreeplayState", methodName : "update"});
			var nextState = LoadingState.getNextState(new PlayState(),false);
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
	}
	,changeDiff: function(change) {
		if(change == null) {
			change = 0;
		}
		this.curDifficulty += change;
		if(this.curDifficulty < 0) {
			this.curDifficulty = 2;
		}
		if(this.curDifficulty > 2) {
			this.curDifficulty = 0;
		}
		this.intendedScore = Highscore.getScore(this.songs[this.curSelected].songName,this.curDifficulty);
		PlayState.storyDifficulty = this.curDifficulty;
		this.diffText.set_text("< " + CoolUtil.difficultyString() + " >");
		this.positionHighscore();
	}
	,changeSelection: function(change) {
		if(change == null) {
			change = 0;
		}
		flixel_FlxG.sound.play(Paths.sound("scrollMenu"),0.4);
		this.curSelected += change;
		if(this.curSelected < 0) {
			this.curSelected = this.songs.length - 1;
		}
		if(this.curSelected >= this.songs.length) {
			this.curSelected = 0;
		}
		this.intendedScore = Highscore.getScore(this.songs[this.curSelected].songName,this.curDifficulty);
		var bullShit = 0;
		var _g = 0;
		var _g1 = this.iconArray.length;
		while(_g < _g1) {
			var i = _g++;
			this.iconArray[i].set_alpha(0.6);
		}
		this.iconArray[this.curSelected].set_alpha(1);
		var _g = 0;
		var _g1 = this.grpSongs.members;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.targetY = bullShit - this.curSelected;
			++bullShit;
			item.set_alpha(0.6);
			if(item.targetY == 0) {
				item.set_alpha(1);
			}
		}
	}
	,positionHighscore: function() {
		this.scoreText.set_x(flixel_FlxG.width - this.scoreText.get_width() - 6);
		this.scoreBG.scale.set_x(flixel_FlxG.width - this.scoreText.x + 6);
		this.scoreBG.set_x(flixel_FlxG.width - this.scoreBG.scale.x / 2);
		this.diffText.set_x(this.scoreBG.x + this.scoreBG.get_width() / 2);
		var _g = this.diffText;
		_g.set_x(_g.x - this.diffText.get_width() / 2);
	}
	,__class__: FreeplayState
});
var SongMetadata = function(song,week,songCharacter) {
	this.songCharacter = "";
	this.week = 0;
	this.songName = "";
	this.songName = song;
	this.week = week;
	this.songCharacter = songCharacter;
};
$hxClasses["SongMetadata"] = SongMetadata;
SongMetadata.__name__ = "SongMetadata";
SongMetadata.prototype = {
	songName: null
	,week: null
	,songCharacter: null
	,__class__: SongMetadata
};
var flixel_FlxSubState = function(BGColor) {
	if(BGColor == null) {
		BGColor = 0;
	}
	this._created = false;
	flixel_FlxState.call(this);
	this.closeCallback = null;
	this.openCallback = null;
	if(flixel_FlxG.renderTile) {
		this._bgSprite = new flixel_system_FlxBGSprite();
	}
	this.set_bgColor(BGColor);
};
$hxClasses["flixel.FlxSubState"] = flixel_FlxSubState;
flixel_FlxSubState.__name__ = "flixel.FlxSubState";
flixel_FlxSubState.__super__ = flixel_FlxState;
flixel_FlxSubState.prototype = $extend(flixel_FlxState.prototype,{
	openCallback: null
	,closeCallback: null
	,_bgSprite: null
	,_parentState: null
	,_bgColor: null
	,_created: null
	,draw: function() {
		if(flixel_FlxG.renderBlit) {
			var _g = 0;
			var _g1 = this.get_cameras();
			while(_g < _g1.length) {
				var camera = _g1[_g];
				++_g;
				camera.fill(this._bgColor);
			}
		} else {
			this._bgSprite.draw();
		}
		flixel_FlxState.prototype.draw.call(this);
	}
	,destroy: function() {
		flixel_FlxState.prototype.destroy.call(this);
		this.closeCallback = null;
		this.openCallback = null;
		this._parentState = null;
		this._bgSprite = null;
	}
	,close: function() {
		if(this._parentState != null && this._parentState.subState == this) {
			this._parentState.closeSubState();
		}
	}
	,get_bgColor: function() {
		return this._bgColor;
	}
	,set_bgColor: function(Value) {
		if(flixel_FlxG.renderTile && this._bgSprite != null) {
			this._bgSprite.get_pixels().setPixel32(0,0,Value);
		}
		return this._bgColor = Value;
	}
	,__class__: flixel_FlxSubState
});
var MusicBeatSubstate = function() {
	this.curBeat = 0;
	this.curStep = 0;
	flixel_FlxSubState.call(this);
};
$hxClasses["MusicBeatSubstate"] = MusicBeatSubstate;
MusicBeatSubstate.__name__ = "MusicBeatSubstate";
MusicBeatSubstate.__super__ = flixel_FlxSubState;
MusicBeatSubstate.prototype = $extend(flixel_FlxSubState.prototype,{
	curStep: null
	,curBeat: null
	,get_controls: function() {
		return PlayerSettings.player1.controls;
	}
	,update: function(elapsed) {
		var oldStep = this.curStep;
		this.updateCurStep();
		this.curBeat = Math.floor(this.curStep / 4);
		if(oldStep != this.curStep && this.curStep >= 0) {
			this.stepHit();
		}
		flixel_FlxSubState.prototype.update.call(this,elapsed);
	}
	,updateCurStep: function() {
		var lastChange = { stepTime : 0, songTime : 0, bpm : 0};
		var _g = 0;
		var _g1 = Conductor.bpmChangeMap.length;
		while(_g < _g1) {
			var i = _g++;
			if(Conductor.songPosition > Conductor.bpmChangeMap[i].songTime) {
				lastChange = Conductor.bpmChangeMap[i];
			}
		}
		this.curStep = lastChange.stepTime + Math.floor((Conductor.songPosition - lastChange.songTime) / Conductor.stepCrochet);
	}
	,stepHit: function() {
		if(this.curStep % 4 == 0) {
			this.beatHit();
		}
	}
	,beatHit: function() {
	}
	,__class__: MusicBeatSubstate
	,__properties__: $extend(flixel_FlxSubState.prototype.__properties__,{get_controls:"get_controls"})
});
var GameOverSubstate = function(x,y) {
	this.isEnding = false;
	this.playingDeathSound = false;
	this.randomGameover = 1;
	this.stageSuffix = "";
	var daStage = PlayState.curStage;
	var daBf = "";
	switch(daStage) {
	case "school":case "schoolEvil":
		this.stageSuffix = "-pixel";
		daBf = "bf-pixel-dead";
		break;
	default:
		daBf = "bf";
	}
	if(PlayState.SONG.song.toLowerCase() == "stress") {
		daBf = "bf-holding-gf-dead";
	}
	MusicBeatSubstate.call(this);
	Conductor.songPosition = 0;
	this.bf = new Boyfriend(x,y,daBf);
	this.add(this.bf);
	this.camFollow = new flixel_FlxObject(this.bf.getGraphicMidpoint().x,this.bf.getGraphicMidpoint().y,1,1);
	this.add(this.camFollow);
	flixel_FlxG.sound.play(Paths.sound("fnf_loss_sfx" + this.stageSuffix));
	Conductor.changeBPM(100);
	flixel_FlxG.camera.scroll.set();
	flixel_FlxG.camera.target = null;
	this.bf.playAnim("firstDeath");
	var exclude = [];
	if(ui_PreferencesMenu.getPref("censor-naughty")) {
		exclude = [1,3,8,13,17,21];
	}
	this.randomGameover = flixel_FlxG.random.int(1,25,exclude);
};
$hxClasses["GameOverSubstate"] = GameOverSubstate;
GameOverSubstate.__name__ = "GameOverSubstate";
GameOverSubstate.__super__ = MusicBeatSubstate;
GameOverSubstate.prototype = $extend(MusicBeatSubstate.prototype,{
	bf: null
	,camFollow: null
	,stageSuffix: null
	,randomGameover: null
	,playingDeathSound: null
	,update: function(elapsed) {
		MusicBeatSubstate.prototype.update.call(this,elapsed);
		if(PlayerSettings.player1.controls._accept.check()) {
			this.endBullshit();
		}
		if(PlayerSettings.player1.controls._back.check()) {
			PlayState.deathCounter = 0;
			PlayState.seenCutscene = false;
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
			if(PlayState.isStoryMode) {
				var nextState = new StoryMenuState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			} else {
				var nextState = new FreeplayState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			}
		}
		if(this.bf.animation._curAnim.name == "firstDeath" && this.bf.animation._curAnim.curFrame == 12) {
			flixel_FlxG.camera.follow(this.camFollow,flixel_FlxCameraFollowStyle.LOCKON,0.01);
		}
		if(PlayState.storyWeek == 7) {
			if(this.bf.animation._curAnim.name == "firstDeath" && this.bf.animation._curAnim.finished && !this.playingDeathSound) {
				this.playingDeathSound = true;
				this.bf.startedDeath = true;
				this.coolStartDeath(0.2);
				flixel_FlxG.sound.play(Paths.sound("jeffGameover/jeffGameover-" + this.randomGameover),1,false,null,true,function() {
					var _this = flixel_FlxG.sound.music;
					var Duration = 4;
					var From = 0.2;
					var To = 1;
					if(To == null) {
						To = 1;
					}
					if(From == null) {
						From = 0;
					}
					if(Duration == null) {
						Duration = 1;
					}
					if(_this._channel == null) {
						_this.play();
					}
					if(_this.fadeTween != null) {
						_this.fadeTween.cancel();
					}
					_this.fadeTween = flixel_tweens_FlxTween.num(From,To,Duration,{ onComplete : null},$bind(_this,_this.volumeTween));
				});
			}
		} else if(this.bf.animation._curAnim.name == "firstDeath" && this.bf.animation._curAnim.finished) {
			this.bf.startedDeath = true;
			this.coolStartDeath();
		}
		if(flixel_FlxG.sound.music._channel != null) {
			Conductor.songPosition = flixel_FlxG.sound.music._time;
		}
	}
	,coolStartDeath: function(startVol) {
		if(startVol == null) {
			startVol = 1;
		}
		flixel_FlxG.sound.playMusic(Paths.getPath("music/" + ("gameOver" + this.stageSuffix) + "." + "mp3","MUSIC",null),startVol);
	}
	,beatHit: function() {
		MusicBeatSubstate.prototype.beatHit.call(this);
	}
	,isEnding: null
	,endBullshit: function() {
		if(!this.isEnding) {
			this.isEnding = true;
			this.bf.playAnim("deathConfirm",true);
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
			flixel_FlxG.sound.play(Paths.getPath("music/" + ("gameOverEnd" + this.stageSuffix) + "." + "mp3","MUSIC",null));
			new flixel_util_FlxTimer().start(0.7,function(tmr) {
				flixel_FlxG.camera.fade(-16777216,2,false,function() {
					var nextState = LoadingState.getNextState(new PlayState(),false);
					if(flixel_FlxG.game._state.switchTo(nextState)) {
						flixel_FlxG.game._requestedState = nextState;
					}
				});
			});
		}
	}
	,__class__: GameOverSubstate
});
var GitarooPause = function() {
	this.replaySelect = false;
	MusicBeatState.call(this);
};
$hxClasses["GitarooPause"] = GitarooPause;
GitarooPause.__name__ = "GitarooPause";
GitarooPause.__super__ = MusicBeatState;
GitarooPause.prototype = $extend(MusicBeatState.prototype,{
	replayButton: null
	,cancelButton: null
	,replaySelect: null
	,create: function() {
		if(flixel_FlxG.sound.music != null) {
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
		}
		var bg = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + "pauseAlt/pauseBG" + ".png","IMAGE",null));
		this.add(bg);
		var bf = new flixel_FlxSprite(0,30);
		var library = null;
		bf.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "pauseAlt/bfLol" + ".png","IMAGE",library),Paths.getPath("images/" + "pauseAlt/bfLol" + ".xml","TEXT",library)));
		bf.animation.addByPrefix("lol","funnyThing",13);
		bf.animation.play("lol");
		this.add(bf);
		bf.screenCenter(flixel_util_FlxAxes.X);
		this.replayButton = new flixel_FlxSprite(flixel_FlxG.width * 0.28,flixel_FlxG.height * 0.7);
		var library = null;
		this.replayButton.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "pauseAlt/pauseUI" + ".png","IMAGE",library),Paths.getPath("images/" + "pauseAlt/pauseUI" + ".xml","TEXT",library)));
		this.replayButton.animation.addByPrefix("selected","bluereplay",0,false);
		this.replayButton.animation.appendByPrefix("selected","yellowreplay");
		this.replayButton.animation.play("selected");
		this.add(this.replayButton);
		this.cancelButton = new flixel_FlxSprite(flixel_FlxG.width * 0.58,this.replayButton.y);
		var library = null;
		this.cancelButton.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "pauseAlt/pauseUI" + ".png","IMAGE",library),Paths.getPath("images/" + "pauseAlt/pauseUI" + ".xml","TEXT",library)));
		this.cancelButton.animation.addByPrefix("selected","bluecancel",0,false);
		this.cancelButton.animation.appendByPrefix("selected","cancelyellow");
		this.cancelButton.animation.play("selected");
		this.add(this.cancelButton);
		this.changeThing();
		MusicBeatState.prototype.create.call(this);
	}
	,update: function(elapsed) {
		if(PlayerSettings.player1.controls._ui_leftP.check() || PlayerSettings.player1.controls._ui_rightP.check()) {
			this.changeThing();
		}
		if(PlayerSettings.player1.controls._accept.check()) {
			if(this.replaySelect) {
				var nextState = new PlayState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			} else {
				var nextState = new MainMenuState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			}
		}
		MusicBeatState.prototype.update.call(this,elapsed);
	}
	,changeThing: function() {
		this.replaySelect = !this.replaySelect;
		if(this.replaySelect) {
			this.cancelButton.animation._curAnim.set_curFrame(0);
			this.replayButton.animation._curAnim.set_curFrame(1);
		} else {
			this.cancelButton.animation._curAnim.set_curFrame(1);
			this.replayButton.animation._curAnim.set_curFrame(0);
		}
	}
	,__class__: GitarooPause
});
var HealthIcon = function(char,isPlayer) {
	if(isPlayer == null) {
		isPlayer = false;
	}
	if(char == null) {
		char = "bf";
	}
	this.isOldIcon = false;
	this.isPlayer = false;
	flixel_FlxSprite.call(this);
	this.isPlayer = isPlayer;
	this.changeIcon(char);
	this.set_antialiasing(true);
	this.scrollFactor.set();
};
$hxClasses["HealthIcon"] = HealthIcon;
HealthIcon.__name__ = "HealthIcon";
HealthIcon.__super__ = flixel_FlxSprite;
HealthIcon.prototype = $extend(flixel_FlxSprite.prototype,{
	sprTracker: null
	,char: null
	,isPlayer: null
	,isOldIcon: null
	,swapOldIcon: function() {
		this.isOldIcon = !this.isOldIcon;
		if(this.isOldIcon) {
			this.changeIcon("bf-old");
		} else {
			this.changeIcon("bf");
		}
	}
	,changeIcon: function(char) {
		if(char != "bf-pixel" && char != "bf-old") {
			char = StringTools.trim(char.split("-")[0]);
		}
		if(char != this.char) {
			if(this.animation._animations.h[char] == null) {
				this.loadGraphic(Paths.getPath("images/" + ("icons/icon-" + char) + ".png","IMAGE",null),true,150,150);
				this.animation.add(char,[0,1],0,false,this.isPlayer);
			}
			this.animation.play(char);
			this.char = char;
		}
	}
	,update: function(elapsed) {
		flixel_FlxSprite.prototype.update.call(this,elapsed);
		if(this.sprTracker != null) {
			this.setPosition(this.sprTracker.x + this.sprTracker.get_width() + 10,this.sprTracker.y - 30);
		}
	}
	,__class__: HealthIcon
});
var Highscore = function() { };
$hxClasses["Highscore"] = Highscore;
Highscore.__name__ = "Highscore";
Highscore.saveScore = function(song,score,diff) {
	if(diff == null) {
		diff = 0;
	}
	if(score == null) {
		score = 0;
	}
	var daSong = Highscore.formatSong(song,diff);
	if(Object.prototype.hasOwnProperty.call(Highscore.songScores.h,daSong)) {
		if(Highscore.songScores.h[daSong] < score) {
			Highscore.setScore(daSong,score);
		}
	} else {
		Highscore.setScore(daSong,score);
	}
};
Highscore.saveWeekScore = function(week,score,diff) {
	if(diff == null) {
		diff = 0;
	}
	if(score == null) {
		score = 0;
	}
	if(week == null) {
		week = 1;
	}
	var daWeek = Highscore.formatSong("week" + week,diff);
	if(Object.prototype.hasOwnProperty.call(Highscore.songScores.h,daWeek)) {
		if(Highscore.songScores.h[daWeek] < score) {
			Highscore.setScore(daWeek,score);
		}
	} else {
		Highscore.setScore(daWeek,score);
	}
};
Highscore.setScore = function(song,score) {
	Highscore.songScores.h[song] = score;
	flixel_FlxG.save.data.songScores = Highscore.songScores;
	flixel_FlxG.save.flush();
};
Highscore.formatSong = function(song,diff) {
	var daSong = song;
	if(diff == 0) {
		daSong += "-easy";
	} else if(diff == 2) {
		daSong += "-hard";
	}
	return daSong;
};
Highscore.getScore = function(song,diff) {
	var this1 = Highscore.songScores;
	var key = Highscore.formatSong(song,diff);
	if(!Object.prototype.hasOwnProperty.call(this1.h,key)) {
		Highscore.setScore(Highscore.formatSong(song,diff),0);
	}
	var this1 = Highscore.songScores;
	var key = Highscore.formatSong(song,diff);
	return this1.h[key];
};
Highscore.getWeekScore = function(week,diff) {
	var this1 = Highscore.songScores;
	var key = Highscore.formatSong("week" + week,diff);
	if(!Object.prototype.hasOwnProperty.call(this1.h,key)) {
		Highscore.setScore(Highscore.formatSong("week" + week,diff),0);
	}
	var this1 = Highscore.songScores;
	var key = Highscore.formatSong("week" + week,diff);
	return this1.h[key];
};
Highscore.load = function() {
	if(flixel_FlxG.save.data.songScores != null) {
		Highscore.songScores = flixel_FlxG.save.data.songScores;
	}
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var InputFormatter = function() { };
$hxClasses["InputFormatter"] = InputFormatter;
InputFormatter.__name__ = "InputFormatter";
InputFormatter.format = function(input,dev) {
	switch(dev._hx_index) {
	case 0:
		return InputFormatter.getKeyName(input);
	case 1:
		var id = dev.id;
		return InputFormatter.shortenButtonName(flixel_FlxG.gamepads._activeGamepads[id].mapping.getInputLabel(input));
	}
};
InputFormatter.getKeyName = function(key) {
	switch(key) {
	case 8:
		return "BckSpc";
	case 17:
		return "Ctrl";
	case 18:
		return "Alt";
	case 20:
		return "Caps";
	case 33:
		return "PgUp";
	case 34:
		return "PgDown";
	case 48:
		return "0";
	case 49:
		return "1";
	case 50:
		return "2";
	case 51:
		return "3";
	case 52:
		return "4";
	case 53:
		return "5";
	case 54:
		return "6";
	case 55:
		return "7";
	case 56:
		return "8";
	case 57:
		return "9";
	case 96:
		return "#0";
	case 97:
		return "#1";
	case 98:
		return "#2";
	case 99:
		return "#3";
	case 100:
		return "#4";
	case 101:
		return "#5";
	case 102:
		return "#6";
	case 103:
		return "#7";
	case 104:
		return "#8";
	case 105:
		return "#9";
	case 106:
		return "#*";
	case 107:
		return "#+";
	case 109:
		return "#-";
	case 110:
		return "#.";
	case 186:
		return ";";
	case 188:
		return ",";
	case 190:
		return ".";
	case 191:
		return "/";
	case 192:
		return "`";
	case 219:
		return "[";
	case 220:
		return "\\";
	case 221:
		return "]";
	case 222:
		return "'";
	case 301:
		return "PrtScrn";
	default:
		var name = flixel_input_keyboard_FlxKey.toStringMap.h[key];
		return name.charAt(0).toUpperCase() + HxOverrides.substr(name,1,null).toLowerCase();
	}
};
InputFormatter.shortenButtonName = function(button) {
	if(button == null) {
		button = "";
	}
	button = button.toLowerCase();
	if(button == "") {
		return "[?]";
	}
	if(InputFormatter.dirReg.match(button)) {
		var a = InputFormatter.dirReg.matched(1).toUpperCase() + " ";
		var b = InputFormatter.dirReg.matched(2);
		return a + (b.charAt(0).toUpperCase() + HxOverrides.substr(b,1,null).toLowerCase());
	}
	return button.charAt(0).toUpperCase() + HxOverrides.substr(button,1,null).toLowerCase();
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = "IntIterator";
IntIterator.prototype = {
	min: null
	,max: null
	,hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
var LoadingState = function(target,stopMusic) {
	this.danceLeft = false;
	this.stopMusic = false;
	this.targetShit = 0;
	MusicBeatState.call(this);
	this.target = target;
	this.stopMusic = stopMusic;
};
$hxClasses["LoadingState"] = LoadingState;
LoadingState.__name__ = "LoadingState";
LoadingState.getSongPath = function() {
	return "songs:assets/songs/" + PlayState.SONG.song.toLowerCase() + "/Inst." + "mp3";
};
LoadingState.getVocalPath = function() {
	return "songs:assets/songs/" + PlayState.SONG.song.toLowerCase() + "/Voices." + "mp3";
};
LoadingState.loadAndSwitchState = function(target,stopMusic) {
	if(stopMusic == null) {
		stopMusic = false;
	}
	var nextState = LoadingState.getNextState(target,stopMusic);
	if(flixel_FlxG.game._state.switchTo(nextState)) {
		flixel_FlxG.game._requestedState = nextState;
	}
};
LoadingState.getNextState = function(target,stopMusic) {
	if(stopMusic == null) {
		stopMusic = false;
	}
	Paths.setCurrentLevel("week" + PlayState.storyWeek);
	var loaded = LoadingState.isSoundLoaded(LoadingState.getSongPath()) && (!PlayState.SONG.needsVoices || LoadingState.isSoundLoaded(LoadingState.getVocalPath())) && LoadingState.isLibraryLoaded("shared");
	if(!loaded) {
		return new LoadingState(target,stopMusic);
	}
	if(stopMusic && flixel_FlxG.sound.music != null) {
		var _this = flixel_FlxG.sound.music;
		_this.cleanup(_this.autoDestroy,true);
	}
	return target;
};
LoadingState.isSoundLoaded = function(path) {
	return openfl_utils_Assets.cache.hasSound(path);
};
LoadingState.isLibraryLoaded = function(library) {
	return openfl_utils_Assets.getLibrary(library) != null;
};
LoadingState.initSongsManifest = function() {
	var id = "songs";
	var promise = new lime_app_Promise();
	var library = lime_utils_Assets.getLibrary(id);
	if(library != null) {
		return lime_app_Future.withValue(library);
	}
	var path = id;
	var rootPath = null;
	var libraryPaths = lime_utils_Assets.libraryPaths;
	if(Object.prototype.hasOwnProperty.call(libraryPaths.h,id)) {
		path = libraryPaths.h[id];
		rootPath = haxe_io_Path.directory(path);
	} else {
		if(StringTools.endsWith(path,".bundle")) {
			rootPath = path;
			path += "/library.json";
		} else {
			rootPath = haxe_io_Path.directory(path);
		}
		path = lime_utils_Assets.__cacheBreak(path);
	}
	lime_utils_AssetManifest.loadFromFile(path,rootPath).onComplete(function(manifest) {
		if(manifest == null) {
			promise.error("Cannot parse asset manifest for library \"" + id + "\"");
			return;
		}
		var library = lime_utils_AssetLibrary.fromManifest(manifest);
		if(library == null) {
			promise.error("Cannot open library \"" + id + "\"");
		} else {
			lime_utils_Assets.libraries.h[id] = library;
			library.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
			promise.completeWith(lime_app_Future.withValue(library));
		}
	}).onError(function(_) {
		promise.error("There is no asset library with an ID of \"" + id + "\"");
	});
	return promise.future;
};
LoadingState.__super__ = MusicBeatState;
LoadingState.prototype = $extend(MusicBeatState.prototype,{
	target: null
	,targetShit: null
	,stopMusic: null
	,callbacks: null
	,logo: null
	,gfDance: null
	,danceLeft: null
	,funkay: null
	,loadBar: null
	,create: function() {
		var _gthis = this;
		var bg = new flixel_FlxSprite().makeGraphic(flixel_FlxG.width,flixel_FlxG.height,-3473587);
		this.add(bg);
		this.funkay = new flixel_FlxSprite();
		this.funkay.loadGraphic(Paths.getPath("images/" + "funkay" + ".png","IMAGE",null));
		this.funkay.setGraphicSize(0,flixel_FlxG.height);
		this.funkay.updateHitbox();
		this.funkay.set_antialiasing(true);
		this.add(this.funkay);
		this.funkay.scrollFactor.set();
		this.funkay.screenCenter();
		this.loadBar = new flixel_FlxSprite(0,flixel_FlxG.height - 20).makeGraphic(flixel_FlxG.width,10,-59694);
		this.loadBar.screenCenter(flixel_util_FlxAxes.X);
		this.add(this.loadBar);
		LoadingState.initSongsManifest().onComplete(function(lib) {
			_gthis.callbacks = new MultiCallback($bind(_gthis,_gthis.onLoad));
			var introComplete = _gthis.callbacks.add("introComplete");
			_gthis.checkLoadSong(LoadingState.getSongPath());
			if(PlayState.SONG.needsVoices) {
				_gthis.checkLoadSong(LoadingState.getVocalPath());
			}
			_gthis.checkLibrary("shared");
			if(PlayState.storyWeek > 0) {
				_gthis.checkLibrary("week" + PlayState.storyWeek);
			} else {
				_gthis.checkLibrary("tutorial");
			}
			flixel_FlxG.camera.fade(flixel_FlxG.camera.bgColor,0.5,true);
			new flixel_util_FlxTimer().start(1.5,function(_) {
				introComplete();
			});
		});
	}
	,checkLoadSong: function(path) {
		if(!openfl_utils_Assets.cache.hasSound(path)) {
			var library = openfl_utils_Assets.getLibrary("songs");
			var symbolPath = path.split(":").pop();
			var callback = this.callbacks.add("song:" + path);
			openfl_utils_Assets.loadSound(path).onComplete(function(_) {
				callback();
			});
		}
	}
	,checkLibrary: function(library) {
		haxe_Log.trace(openfl_utils_Assets.hasLibrary(library),{ fileName : "source/LoadingState.hx", lineNumber : 98, className : "LoadingState", methodName : "checkLibrary"});
		if(openfl_utils_Assets.getLibrary(library) == null) {
			if(!Object.prototype.hasOwnProperty.call(lime_utils_Assets.libraryPaths.h,library)) {
				throw haxe_Exception.thrown("Missing library: " + library);
			}
			var callback = this.callbacks.add("library:" + library);
			openfl_utils_Assets.loadLibrary(library).onComplete(function(_) {
				callback();
			});
		}
	}
	,beatHit: function() {
		MusicBeatState.prototype.beatHit.call(this);
		this.danceLeft = !this.danceLeft;
	}
	,update: function(elapsed) {
		MusicBeatState.prototype.update.call(this,elapsed);
		var wacky = flixel_FlxG.width * 0.88;
		this.funkay.setGraphicSize(wacky + 0.9 * (this.funkay.get_width() - wacky) | 0);
		this.funkay.updateHitbox();
		if(PlayerSettings.player1.controls._accept.check()) {
			this.funkay.setGraphicSize(this.funkay.get_width() + 60 | 0);
			this.funkay.updateHitbox();
		}
		if(this.callbacks != null) {
			this.targetShit = flixel_math_FlxMath.remapToRange(this.callbacks.numRemaining / this.callbacks.length,1,0,0,1);
			var _g = this.loadBar.scale;
			_g.set_x(_g.x + 0.5 * (this.targetShit - this.loadBar.scale.x));
		}
	}
	,onLoad: function() {
		if(this.stopMusic && flixel_FlxG.sound.music != null) {
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
		}
		var nextState = this.target;
		if(flixel_FlxG.game._state.switchTo(nextState)) {
			flixel_FlxG.game._requestedState = nextState;
		}
	}
	,destroy: function() {
		MusicBeatState.prototype.destroy.call(this);
		this.callbacks = null;
	}
	,__class__: LoadingState
});
var MultiCallback = function(callback,logId) {
	this.fired = [];
	this.unfired = new haxe_ds_StringMap();
	this.numRemaining = 0;
	this.length = 0;
	this.logId = null;
	this.callback = callback;
	this.logId = logId;
};
$hxClasses["MultiCallback"] = MultiCallback;
MultiCallback.__name__ = "MultiCallback";
MultiCallback.prototype = {
	callback: null
	,logId: null
	,length: null
	,numRemaining: null
	,unfired: null
	,fired: null
	,add: function(id) {
		if(id == null) {
			id = "untitled";
		}
		var _gthis = this;
		id = "" + this.length + ":" + id;
		this.length++;
		this.numRemaining++;
		var func = null;
		func = function() {
			if(Object.prototype.hasOwnProperty.call(_gthis.unfired.h,id)) {
				var _this = _gthis.unfired;
				if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
					delete(_this.h[id]);
				}
				_gthis.fired.push(id);
				_gthis.numRemaining--;
				if(_gthis.logId != null) {
					if(_gthis.logId != null) {
						haxe_Log.trace("" + _gthis.logId + ": " + ("fired " + id + ", " + _gthis.numRemaining + " remaining"),{ fileName : "source/LoadingState.hx", lineNumber : 314, className : "MultiCallback", methodName : "log"});
					}
				}
				if(_gthis.numRemaining == 0) {
					if(_gthis.logId != null) {
						if(_gthis.logId != null) {
							haxe_Log.trace("" + _gthis.logId + ": " + "all callbacks fired",{ fileName : "source/LoadingState.hx", lineNumber : 314, className : "MultiCallback", methodName : "log"});
						}
					}
					_gthis.callback();
				}
			} else if(_gthis.logId != null) {
				haxe_Log.trace("" + _gthis.logId + ": " + ("already fired " + id),{ fileName : "source/LoadingState.hx", lineNumber : 314, className : "MultiCallback", methodName : "log"});
			}
		};
		this.unfired.h[id] = func;
		return func;
	}
	,log: function(msg) {
		if(this.logId != null) {
			haxe_Log.trace("" + this.logId + ": " + msg,{ fileName : "source/LoadingState.hx", lineNumber : 314, className : "MultiCallback", methodName : "log"});
		}
	}
	,getFired: function() {
		return this.fired.slice();
	}
	,getUnfired: function() {
		var _g = [];
		var id = haxe_ds_StringMap.keysIterator(this.unfired.h);
		while(id.hasNext()) {
			var id1 = id.next();
			_g.push(id1);
		}
		return _g;
	}
	,__class__: MultiCallback
};
var MainMenuState = function(TransIn,TransOut) {
	this.optionShit = ["story mode","freeplay","donate","options"];
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["MainMenuState"] = MainMenuState;
MainMenuState.__name__ = "MainMenuState";
MainMenuState.__super__ = MusicBeatState;
MainMenuState.prototype = $extend(MusicBeatState.prototype,{
	menuItems: null
	,optionShit: null
	,magenta: null
	,camFollow: null
	,create: function() {
		var _gthis = this;
		this.transIn = flixel_addons_transition_FlxTransitionableState.defaultTransIn;
		this.transOut = flixel_addons_transition_FlxTransitionableState.defaultTransOut;
		if(flixel_FlxG.sound.music._channel == null) {
			flixel_FlxG.sound.playMusic(Paths.getPath("music/" + "freakyMenu" + "." + "mp3","MUSIC",null));
		}
		this.persistentUpdate = this.persistentDraw = true;
		var bg = new flixel_FlxSprite(null,null,Paths.getPath("images/" + "menuBG" + ".png","IMAGE",null));
		bg.scrollFactor.set_x(0);
		bg.scrollFactor.set_y(0.17);
		bg.setGraphicSize(bg.get_width() * 1.2 | 0);
		bg.updateHitbox();
		bg.screenCenter();
		bg.set_antialiasing(true);
		this.add(bg);
		this.camFollow = new flixel_FlxObject(0,0,1,1);
		this.add(this.camFollow);
		this.magenta = new flixel_FlxSprite(null,null,Paths.getPath("images/" + "menuDesat" + ".png","IMAGE",null));
		this.magenta.scrollFactor.set_x(bg.scrollFactor.x);
		this.magenta.scrollFactor.set_y(bg.scrollFactor.y);
		this.magenta.setGraphicSize(bg.get_width() | 0);
		this.magenta.updateHitbox();
		this.magenta.set_x(bg.x);
		this.magenta.set_y(bg.y);
		this.magenta.set_visible(false);
		this.magenta.set_antialiasing(true);
		this.magenta.set_color(-167525);
		if(ui_PreferencesMenu.preferences.h["flashing-menu"]) {
			this.add(this.magenta);
		}
		this.menuItems = new MainMenuList();
		this.add(this.menuItems);
		this.menuItems.onChange.add($bind(this,this.onMenuItemChange));
		this.menuItems.onAcceptPress.add(function(item) {
			flixel_effects_FlxFlicker.flicker(_gthis.magenta,1.1,0.15,false,true);
		});
		this.menuItems.enabled = false;
		this.menuItems.createItem(null,null,"story mode",function() {
			_gthis.startExitState(new StoryMenuState());
		});
		this.menuItems.createItem(null,null,"freeplay",function() {
			_gthis.startExitState(new FreeplayState());
		});
		if(VideoState.seenVideo) {
			this.menuItems.createItem(null,null,"kickstarter",$bind(this,this.selectDonate),true);
		} else {
			this.menuItems.createItem(null,null,"donate",$bind(this,this.selectDonate),true);
		}
		this.menuItems.createItem(0,0,"options",function() {
			_gthis.startExitState(new ui_OptionsState());
		});
		var pos = (flixel_FlxG.height - 160 * (this.menuItems.length - 1)) / 2;
		var _g = 0;
		var _g1 = this.menuItems.length;
		while(_g < _g1) {
			var i = _g++;
			var item = this.menuItems.members[i];
			item.set_x(flixel_FlxG.width / 2);
			item.set_y(pos + 160 * i);
		}
		flixel_FlxG.camera.follow(this.camFollow,null,0.06);
		var versionShit = new flixel_text_FlxText(5,flixel_FlxG.height - 18,0,"v" + lime_app_Application.current.meta.h["version"],12);
		versionShit.scrollFactor.set();
		versionShit.setFormat("VCR OSD Mono",16,-1,"left",flixel_text_FlxTextBorderStyle.OUTLINE,-16777216);
		this.add(versionShit);
		var _g = versionShit;
		_g.set_text(_g.text + "(Newgrounds exclusive preview)");
		MusicBeatState.prototype.create.call(this);
	}
	,finishTransIn: function() {
		MusicBeatState.prototype.finishTransIn.call(this);
		this.menuItems.enabled = true;
	}
	,onMenuItemChange: function(item) {
		this.camFollow.setPosition(item.getGraphicMidpoint().x,item.getGraphicMidpoint().y);
	}
	,selectDonate: function() {
		var prefix = "";
		if(!new EReg("^https?://","").match("https://www.kickstarter.com/projects/funkin/friday-night-funkin-the-full-ass-game/")) {
			prefix = "http://";
		}
		openfl_Lib.getURL(new openfl_net_URLRequest(prefix + "https://www.kickstarter.com/projects/funkin/friday-night-funkin-the-full-ass-game/"),"_blank");
	}
	,startExitState: function(nextState) {
		var _gthis = this;
		this.menuItems.enabled = false;
		this.menuItems.forEach(function(item) {
			if(_gthis.menuItems.selectedIndex != item.ID) {
				flixel_tweens_FlxTween.tween(item,{ alpha : 0},0.4,{ ease : flixel_tweens_FlxEase.quadOut});
			} else {
				item.set_visible(false);
			}
		});
		new flixel_util_FlxTimer().start(0.4,function(tmr) {
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		});
	}
	,update: function(elapsed) {
		flixel_FlxG.camera.set_followLerp(CoolUtil.camLerpShit(0.06));
		if(flixel_FlxG.sound.music._volume < 0.8) {
			var _g = flixel_FlxG.sound.music;
			_g.set_volume(_g._volume + 0.5 * flixel_FlxG.elapsed);
		}
		if(this._exiting) {
			this.menuItems.enabled = false;
		}
		if(PlayerSettings.player1.controls._back.check() && this.menuItems.enabled && !this.menuItems.busy) {
			var nextState = new TitleState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
		MusicBeatState.prototype.update.call(this,elapsed);
	}
	,__class__: MainMenuState
});
var ui_MenuItem = function(x,y,name,callback) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.fireInstantly = false;
	flixel_FlxSprite.call(this,x,y);
	this.set_antialiasing(true);
	this.setData(name,callback);
	this.idle();
};
$hxClasses["ui.MenuItem"] = ui_MenuItem;
ui_MenuItem.__name__ = "ui.MenuItem";
ui_MenuItem.__super__ = flixel_FlxSprite;
ui_MenuItem.prototype = $extend(flixel_FlxSprite.prototype,{
	fireInstantly: null
	,name: null
	,callback: null
	,get_selected: function() {
		return this.alpha == 1;
	}
	,setData: function(name,callback) {
		this.name = name;
		if(callback != null) {
			this.callback = callback;
		}
	}
	,setItem: function(name,callback) {
		this.setData(name,callback);
		if(this.get_selected()) {
			this.select();
		} else {
			this.idle();
		}
	}
	,idle: function() {
		this.set_alpha(0.6);
	}
	,select: function() {
		this.set_alpha(1);
	}
	,__class__: ui_MenuItem
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{get_selected:"get_selected"})
});
var ui_AtlasMenuItem = function(x,y,name,atlas,callback) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.atlas = atlas;
	ui_MenuItem.call(this,x,y,name,callback);
};
$hxClasses["ui.AtlasMenuItem"] = ui_AtlasMenuItem;
ui_AtlasMenuItem.__name__ = "ui.AtlasMenuItem";
ui_AtlasMenuItem.__super__ = ui_MenuItem;
ui_AtlasMenuItem.prototype = $extend(ui_MenuItem.prototype,{
	atlas: null
	,setData: function(name,callback) {
		this.set_frames(this.atlas);
		this.animation.addByPrefix("idle","" + name + " idle",24);
		this.animation.addByPrefix("selected","" + name + " selected",24);
		ui_MenuItem.prototype.setData.call(this,name,callback);
	}
	,changeAnim: function(anim) {
		this.animation.play(anim);
		this.updateHitbox();
	}
	,idle: function() {
		this.changeAnim("idle");
	}
	,select: function() {
		this.changeAnim("selected");
	}
	,get_selected: function() {
		if(this.animation._curAnim != null) {
			return this.animation._curAnim.name == "selected";
		} else {
			return false;
		}
	}
	,destroy: function() {
		ui_MenuItem.prototype.destroy.call(this);
		this.atlas = null;
	}
	,__class__: ui_AtlasMenuItem
});
var MainMenuItem = function(x,y,name,atlas,callback) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	ui_AtlasMenuItem.call(this,x,y,name,atlas,callback);
	this.scrollFactor.set();
};
$hxClasses["MainMenuItem"] = MainMenuItem;
MainMenuItem.__name__ = "MainMenuItem";
MainMenuItem.__super__ = ui_AtlasMenuItem;
MainMenuItem.prototype = $extend(ui_AtlasMenuItem.prototype,{
	changeAnim: function(anim) {
		ui_AtlasMenuItem.prototype.changeAnim.call(this,anim);
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
		var _this = this.offset;
		var point = this.origin;
		_this.set_x(point.x);
		_this.set_y(point.y);
		if(point._weak) {
			point.put();
		}
	}
	,__class__: MainMenuItem
});
var ui_MenuTypedList = function(dir,wrapDir) {
	if(dir == null) {
		dir = ui_NavControls.Vertical;
	}
	this.busy = false;
	this.byName = new haxe_ds_StringMap();
	this.wrapMode = ui_WrapMode.Both;
	this.enabled = true;
	this.onAcceptPress = new flixel_util__$FlxSignal_FlxSignal1();
	this.onChange = new flixel_util__$FlxSignal_FlxSignal1();
	this.selectedIndex = 0;
	this.navControls = dir;
	if(wrapDir != null) {
		this.wrapMode = wrapDir;
	} else {
		switch(dir._hx_index) {
		case 0:
			this.wrapMode = ui_WrapMode.Horizontal;
			break;
		case 1:
			this.wrapMode = ui_WrapMode.Vertical;
			break;
		default:
			this.wrapMode = ui_WrapMode.Both;
		}
	}
	flixel_group_FlxTypedGroup.call(this);
};
$hxClasses["ui.MenuTypedList"] = ui_MenuTypedList;
ui_MenuTypedList.__name__ = "ui.MenuTypedList";
ui_MenuTypedList.__super__ = flixel_group_FlxTypedGroup;
ui_MenuTypedList.prototype = $extend(flixel_group_FlxTypedGroup.prototype,{
	selectedIndex: null
	,onChange: null
	,onAcceptPress: null
	,enabled: null
	,navControls: null
	,wrapMode: null
	,byName: null
	,busy: null
	,addItem: function(name,item) {
		if(this.selectedIndex == this.length) {
			item.select();
		}
		this.byName.h[name] = item;
		return this.add(item);
	}
	,resetItem: function(name,newName,callback) {
		if(!Object.prototype.hasOwnProperty.call(this.byName.h,name)) {
			throw haxe_Exception.thrown("No item named:" + name);
		}
		var item = this.byName.h[name];
		var _this = this.byName;
		if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
			delete(_this.h[name]);
		}
		this.byName.h[newName] = item;
		item.setItem(newName,callback);
		return item;
	}
	,update: function(elapsed) {
		flixel_group_FlxTypedGroup.prototype.update.call(this,elapsed);
		if(this.enabled && !this.busy) {
			var controls = PlayerSettings.player1.controls;
			var wrapHorizontal;
			var wrapVertical;
			var nextIndex;
			switch(this.wrapMode._hx_index) {
			case 0:case 2:
				wrapHorizontal = true;
				break;
			default:
				wrapHorizontal = false;
			}
			switch(this.wrapMode._hx_index) {
			case 1:case 2:
				wrapVertical = true;
				break;
			default:
				wrapVertical = false;
			}
			var _g = this.navControls;
			switch(_g._hx_index) {
			case 0:
				var leftP = controls._ui_leftP.check();
				var rightP = controls._ui_rightP.check();
				nextIndex = this.navAxis(this.selectedIndex,this.length,leftP,rightP,wrapHorizontal);
				break;
			case 1:
				var upP = controls._ui_upP.check();
				var downP = controls._ui_downP.check();
				nextIndex = this.navAxis(this.selectedIndex,this.length,upP,downP,wrapVertical);
				break;
			case 2:
				var backwards = controls._ui_leftP.check() || controls._ui_upP.check();
				var forwards = controls._ui_rightP.check() || controls._ui_downP.check();
				nextIndex = this.navAxis(this.selectedIndex,this.length,backwards,forwards,this.wrapMode != ui_WrapMode.None);
				break;
			case 3:
				var num = _g.num;
				nextIndex = this.navGrid(num,controls._ui_leftP.check(),controls._ui_rightP.check(),wrapHorizontal,controls._ui_upP.check(),controls._ui_downP.check(),wrapVertical);
				break;
			case 4:
				var num = _g.num;
				nextIndex = this.navGrid(num,controls._ui_upP.check(),controls._ui_downP.check(),wrapVertical,controls._ui_leftP.check(),controls._ui_rightP.check(),wrapHorizontal);
				break;
			}
			if(nextIndex != this.selectedIndex) {
				flixel_FlxG.sound.play(Paths.sound("scrollMenu"));
				this.selectItem(nextIndex);
			}
			if(controls._accept.check()) {
				this.accept();
			}
		}
	}
	,navAxis: function(selected,maxLength,goBack,goForward,doWrap) {
		if(goBack == goForward) {
			return selected;
		}
		if(goBack) {
			if(selected > 0) {
				--selected;
			} else if(doWrap) {
				selected = maxLength - 1;
			}
		} else if(selected < maxLength - 1) {
			++selected;
		} else if(doWrap) {
			selected = 0;
		}
		return selected;
	}
	,navGrid: function(gridLength,hBack,hForward,hWrap,vBack,vForward,vWrap) {
		var itemLength = Math.ceil(this.length / gridLength);
		var curItem = Math.floor(this.selectedIndex / gridLength);
		var curGrid = this.selectedIndex % gridLength;
		var selectedX = this.navAxis(curGrid,gridLength,hBack,hForward,hWrap);
		var selectedY = this.navAxis(curItem,itemLength,vBack,vForward,vWrap);
		return Math.min(this.length - 1,selectedY * gridLength + selectedX) | 0;
	}
	,accept: function() {
		var _gthis = this;
		var selected = this.members[this.selectedIndex];
		this.onAcceptPress.dispatch(selected);
		if(selected.fireInstantly) {
			selected.callback();
		} else {
			this.busy = true;
			flixel_FlxG.sound.play(Paths.sound("confirmMenu"));
			flixel_effects_FlxFlicker.flicker(selected,1,0.06,true,false,function(flicker) {
				_gthis.busy = false;
				selected.callback();
			});
		}
	}
	,selectItem: function(index) {
		this.members[this.selectedIndex].idle();
		this.selectedIndex = index;
		this.members[this.selectedIndex].select();
		this.onChange.dispatch(this.members[this.selectedIndex]);
	}
	,has: function(name) {
		return Object.prototype.hasOwnProperty.call(this.byName.h,name);
	}
	,getItem: function(name) {
		return this.byName.h[name];
	}
	,destroy: function() {
		flixel_group_FlxTypedGroup.prototype.destroy.call(this);
		this.byName = null;
		this.onChange = null;
		this.onAcceptPress = null;
	}
	,__class__: ui_MenuTypedList
});
var MainMenuList = function() {
	var library = null;
	this.atlas = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "main_menu" + ".png","IMAGE",library),Paths.getPath("images/" + "main_menu" + ".xml","TEXT",library));
	ui_MenuTypedList.call(this,ui_NavControls.Vertical);
};
$hxClasses["MainMenuList"] = MainMenuList;
MainMenuList.__name__ = "MainMenuList";
MainMenuList.__super__ = ui_MenuTypedList;
MainMenuList.prototype = $extend(ui_MenuTypedList.prototype,{
	atlas: null
	,createItem: function(x,y,name,callback,fireInstantly) {
		if(fireInstantly == null) {
			fireInstantly = false;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var item = new MainMenuItem(x,y,name,this.atlas,callback);
		item.fireInstantly = fireInstantly;
		item.ID = this.length;
		return this.addItem(name,item);
	}
	,__class__: MainMenuList
});
var ManifestResources = function() { };
$hxClasses["ManifestResources"] = ManifestResources;
ManifestResources.__name__ = "ManifestResources";
ManifestResources.preloadLibraries = null;
ManifestResources.preloadLibraryNames = null;
ManifestResources.rootPath = null;
ManifestResources.init = function(config) {
	ManifestResources.preloadLibraries = [];
	ManifestResources.preloadLibraryNames = [];
	ManifestResources.rootPath = null;
	if(config != null && Object.prototype.hasOwnProperty.call(config,"rootPath")) {
		ManifestResources.rootPath = Reflect.field(config,"rootPath");
	}
	if(ManifestResources.rootPath == null) {
		ManifestResources.rootPath = "./";
	}
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$pixel_$otf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$vcr_$ttf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf);
	var bundle;
	var v = ManifestResources.rootPath + "manifest/songs.json";
	lime_utils_Assets.libraryPaths.h["songs"] = v;
	var v = ManifestResources.rootPath + "manifest/shared.json";
	lime_utils_Assets.libraryPaths.h["shared"] = v;
	var v = ManifestResources.rootPath + "manifest/tutorial.json";
	lime_utils_Assets.libraryPaths.h["tutorial"] = v;
	var v = ManifestResources.rootPath + "manifest/week1.json";
	lime_utils_Assets.libraryPaths.h["week1"] = v;
	var v = ManifestResources.rootPath + "manifest/week2.json";
	lime_utils_Assets.libraryPaths.h["week2"] = v;
	var v = ManifestResources.rootPath + "manifest/week3.json";
	lime_utils_Assets.libraryPaths.h["week3"] = v;
	var v = ManifestResources.rootPath + "manifest/week4.json";
	lime_utils_Assets.libraryPaths.h["week4"] = v;
	var v = ManifestResources.rootPath + "manifest/week5.json";
	lime_utils_Assets.libraryPaths.h["week5"] = v;
	var v = ManifestResources.rootPath + "manifest/week6.json";
	lime_utils_Assets.libraryPaths.h["week6"] = v;
	var v = ManifestResources.rootPath + "manifest/week7.json";
	lime_utils_Assets.libraryPaths.h["week7"] = v;
	var data = "{\"name\":null,\"assets\":\"aoy4:pathy36:assets%2Fdata%2FfreeplaySonglist.txty4:sizei8y4:typey4:TEXTy2:idR1y7:preloadtgoR0y43:assets%2Fdata%2Fblammed%2Fblammed-easy.jsonR2i8488R3R4R5R7R6tgoR0y43:assets%2Fdata%2Fblammed%2Fblammed-hard.jsonR2i12097R3R4R5R8R6tgoR0y38:assets%2Fdata%2Fblammed%2Fblammed.jsonR2i9687R3R4R5R9R6tgoR0y43:assets%2Fdata%2Fbopeebo%2Fbopeebo-easy.jsonR2i3912R3R4R5R10R6tgoR0y43:assets%2Fdata%2Fbopeebo%2Fbopeebo-hard.jsonR2i4140R3R4R5R11R6tgoR0y38:assets%2Fdata%2Fbopeebo%2Fbopeebo.jsonR2i4044R3R4R5R12R6tgoR0y39:assets%2Fdata%2Fcocoa%2Fcocoa-easy.jsonR2i7062R3R4R5R13R6tgoR0y39:assets%2Fdata%2Fcocoa%2Fcocoa-hard.jsonR2i10443R3R4R5R14R6tgoR0y34:assets%2Fdata%2Fcocoa%2Fcocoa.jsonR2i8278R3R4R5R15R6tgoR0y47:assets%2Fdata%2Fdadbattle%2Fdadbattle-easy.jsonR2i7936R3R4R5R16R6tgoR0y47:assets%2Fdata%2Fdadbattle%2Fdadbattle-hard.jsonR2i9755R3R4R5R17R6tgoR0y42:assets%2Fdata%2Fdadbattle%2Fdadbattle.jsonR2i8912R3R4R5R18R6tgoR0y41:assets%2Fdata%2Feggnog%2Feggnog-easy.jsonR2i9239R3R4R5R19R6tgoR0y41:assets%2Fdata%2Feggnog%2Feggnog-hard.jsonR2i11689R3R4R5R20R6tgoR0y36:assets%2Fdata%2Feggnog%2Feggnog.jsonR2i10333R3R4R5R21R6tgoR0y39:assets%2Fdata%2Ffresh%2Ffresh-easy.jsonR2i5857R3R4R5R22R6tgoR0y39:assets%2Fdata%2Ffresh%2Ffresh-hard.jsonR2i6905R3R4R5R23R6tgoR0y34:assets%2Fdata%2Ffresh%2Ffresh.jsonR2i6493R3R4R5R24R6tgoR0y37:assets%2Fdata%2Fguns%2Fguns-easy.jsonR2i15146R3R4R5R25R6tgoR0y37:assets%2Fdata%2Fguns%2Fguns-hard.jsonR2i23500R3R4R5R26R6tgoR0y32:assets%2Fdata%2Fguns%2Fguns.jsonR2i20620R3R4R5R27R6tgoR0y37:assets%2Fdata%2Fhigh%2Fhigh-easy.jsonR2i8563R3R4R5R28R6tgoR0y37:assets%2Fdata%2Fhigh%2Fhigh-hard.jsonR2i11553R3R4R5R29R6tgoR0y32:assets%2Fdata%2Fhigh%2Fhigh.jsonR2i9757R3R4R5R30R6tgoR0y37:assets%2Fdata%2Fmilf%2Fmilf-easy.jsonR2i13522R3R4R5R31R6tgoR0y37:assets%2Fdata%2Fmilf%2Fmilf-hard.jsonR2i18135R3R4R5R32R6tgoR0y32:assets%2Fdata%2Fmilf%2Fmilf.jsonR2i15192R3R4R5R33R6tgoR0y43:assets%2Fdata%2Fmonster%2Fmonster-easy.jsonR2i12175R3R4R5R34R6tgoR0y43:assets%2Fdata%2Fmonster%2Fmonster-hard.jsonR2i14163R3R4R5R35R6tgoR0y38:assets%2Fdata%2Fmonster%2Fmonster.jsonR2i13445R3R4R5R36R6tgoR0y41:assets%2Fdata%2Fphilly%2Fphilly-easy.jsonR2i8062R3R4R5R37R6tgoR0y41:assets%2Fdata%2Fphilly%2Fphilly-hard.jsonR2i12551R3R4R5R38R6tgoR0y36:assets%2Fdata%2Fphilly%2Fphilly.jsonR2i10098R3R4R5R39R6tgoR0y37:assets%2Fdata%2Fpico%2Fpico-easy.jsonR2i6089R3R4R5R40R6tgoR0y37:assets%2Fdata%2Fpico%2Fpico-hard.jsonR2i8768R3R4R5R41R6tgoR0y32:assets%2Fdata%2Fpico%2Fpico.jsonR2i7493R3R4R5R42R6tgoR0y34:assets%2Fdata%2Fridge%2Fridge.jsonR2i22981R3R4R5R43R6tgoR0y39:assets%2Fdata%2Froses%2Froses-easy.jsonR2i6725R3R4R5R44R6tgoR0y39:assets%2Fdata%2Froses%2Froses-hard.jsonR2i10432R3R4R5R45R6tgoR0y34:assets%2Fdata%2Froses%2Froses.jsonR2i8609R3R4R5R46R6tgoR0y41:assets%2Fdata%2Froses%2FrosesDialogue.txtR2i155R3R4R5R47R6tgoR0y55:assets%2Fdata%2Fsatin-panties%2Fsatin-panties-easy.jsonR2i8817R3R4R5R48R6tgoR0y55:assets%2Fdata%2Fsatin-panties%2Fsatin-panties-hard.jsonR2i12704R3R4R5R49R6tgoR0y50:assets%2Fdata%2Fsatin-panties%2Fsatin-panties.jsonR2i10725R3R4R5R50R6tgoR0y41:assets%2Fdata%2Fsenpai%2Fsenpai-easy.jsonR2i9027R3R4R5R51R6tgoR0y41:assets%2Fdata%2Fsenpai%2Fsenpai-hard.jsonR2i10778R3R4R5R52R6tgoR0y36:assets%2Fdata%2Fsenpai%2Fsenpai.jsonR2i10016R3R4R5R53R6tgoR0y43:assets%2Fdata%2Fsenpai%2FsenpaiDialogue.txtR2i164R3R4R5R54R6tgoR0y34:assets%2Fdata%2Fsmash%2Fsmash.jsonR2i102R3R4R5R55R6tgoR0y39:assets%2Fdata%2Fsouth%2Fsouth-easy.jsonR2i8435R3R4R5R56R6tgoR0y39:assets%2Fdata%2Fsouth%2Fsouth-hard.jsonR2i10170R3R4R5R57R6tgoR0y34:assets%2Fdata%2Fsouth%2Fsouth.jsonR2i10097R3R4R5R58R6tgoR0y45:assets%2Fdata%2Fspookeez%2Fspookeez-easy.jsonR2i8876R3R4R5R59R6tgoR0y45:assets%2Fdata%2Fspookeez%2Fspookeez-hard.jsonR2i10706R3R4R5R60R6tgoR0y40:assets%2Fdata%2Fspookeez%2Fspookeez.jsonR2i10026R3R4R5R61R6tgoR0y41:assets%2Fdata%2Fstress%2Fpicospeaker.jsonR2i18286R3R4R5R62R6tgoR0y41:assets%2Fdata%2Fstress%2Fstress-easy.jsonR2i14993R3R4R5R63R6tgoR0y41:assets%2Fdata%2Fstress%2Fstress-hard.jsonR2i22493R3R4R5R64R6tgoR0y36:assets%2Fdata%2Fstress%2Fstress.jsonR2i19661R3R4R5R65R6tgoR0y32:assets%2Fdata%2Ftest%2Ftest.jsonR2i12402R3R4R5R66R6tgoR0y41:assets%2Fdata%2Fthorns%2Fthorns-easy.jsonR2i10437R3R4R5R67R6tgoR0y41:assets%2Fdata%2Fthorns%2Fthorns-hard.jsonR2i15444R3R4R5R68R6tgoR0y36:assets%2Fdata%2Fthorns%2Fthorns.jsonR2i12691R3R4R5R69R6tgoR0y43:assets%2Fdata%2Fthorns%2FthornsDialogue.txtR2i309R3R4R5R70R6tgoR0y45:assets%2Fdata%2Ftutorial%2Ftutorial-easy.jsonR2i5739R3R4R5R71R6tgoR0y45:assets%2Fdata%2Ftutorial%2Ftutorial-hard.jsonR2i6335R3R4R5R72R6tgoR0y40:assets%2Fdata%2Ftutorial%2Ftutorial.jsonR2i5739R3R4R5R73R6tgoR0y35:assets%2Fdata%2Fugh%2Fugh-easy.jsonR2i8550R3R4R5R74R6tgoR0y35:assets%2Fdata%2Fugh%2Fugh-hard.jsonR2i12496R3R4R5R75R6tgoR0y30:assets%2Fdata%2Fugh%2Fugh.jsonR2i11354R3R4R5R76R6tgoR0y63:assets%2Fdata%2Fwinter-horrorland%2Fwinter-horrorland-easy.jsonR2i11846R3R4R5R77R6tgoR0y63:assets%2Fdata%2Fwinter-horrorland%2Fwinter-horrorland-hard.jsonR2i14558R3R4R5R78R6tgoR0y58:assets%2Fdata%2Fwinter-horrorland%2Fwinter-horrorland.jsonR2i12808R3R4R5R79R6tgoR0y33:assets%2Fdata%2FcharacterList.txtR2i200R3R4R5R80R6tgoR0y28:assets%2Fdata%2Fcontrols.txtR2i355R3R4R5R81R6tgoR0y25:assets%2Fdata%2Fcreds.txtR2i492R3R4R5R82R6tgoR0y34:assets%2Fdata%2Fdata-goes-here.txtR2zR3R4R5R83R6tgoR0y29:assets%2Fdata%2FintroText.txtR2i1481R3R4R5R84R6tgoR0y29:assets%2Fdata%2Fmain-view.xmlR2i125R3R4R5R85R6tgoR0y33:assets%2Fdata%2FspecialThanks.txtR2i339R3R4R5R86R6tgoR0y33:assets%2Fimages%2FNOTE_assets.pngR2i712820R3y5:IMAGER5R87R6tgoR0y30:assets%2Fimages%2Falphabet.pngR2i139836R3R88R5R89R6tgoR0y45:assets%2Fimages%2Fcampaign_menu_UI_assets.pngR2i27171R3R88R5R90R6tgoR0y49:assets%2Fimages%2Fcampaign_menu_UI_characters.pngR2i2548341R3R88R5R91R6tgoR0y49:assets%2Fimages%2Fcampaign_menu_UI_characters.xmlR2i24733R3R4R5R92R6tgoR0y37:assets%2Fimages%2FcheckboxThingie.pngR2i21263R3R88R5R93R6tgoR0y28:assets%2Fimages%2Ffunkay.pngR2i366131R3R88R5R94R6tgoR0y34:assets%2Fimages%2FgfDanceTitle.pngR2i1221436R3R88R5R95R6tgoR0y36:assets%2Fimages%2FloadingFunkers.pngR2i283045R3R88R5R96R6tgoR0y35:assets%2Fimages%2FloadingLoader.pngR2i84013R3R88R5R97R6tgoR0y26:assets%2Fimages%2Flogo.pngR2i86924R3R88R5R98R6tgoR0y32:assets%2Fimages%2FlogoBumpin.pngR2i592724R3R88R5R99R6tgoR0y31:assets%2Fimages%2Fmain_menu.pngR2i397830R3R88R5R100R6tgoR0y31:assets%2Fimages%2Fmain_menu.xmlR2i6093R3R4R5R101R6tgoR0y28:assets%2Fimages%2FmenuBG.pngR2i620342R3R88R5R102R6tgoR0y32:assets%2Fimages%2FmenuBGBlue.pngR2i614586R3R88R5R103R6tgoR0y35:assets%2Fimages%2FmenuBGMagenta.pngR2i553468R3R88R5R104R6tgoR0y31:assets%2Fimages%2FmenuDesat.pngR2i357911R3R88R5R105R6tgoR0y27:assets%2Fimages%2Fmoney.pngR2i320309R3R88R5R106R6tgoR0y37:assets%2Fimages%2Fnewgrounds_logo.pngR2i57747R3R88R5R107R6tgoR0y26:assets%2Fimages%2Fnum0.pngR2i3738R3R88R5R108R6tgoR0y26:assets%2Fimages%2Fnum1.pngR2i3390R3R88R5R109R6tgoR0y26:assets%2Fimages%2Fnum2.pngR2i3990R3R88R5R110R6tgoR0y26:assets%2Fimages%2Fnum3.pngR2i4022R3R88R5R111R6tgoR0y26:assets%2Fimages%2Fnum4.pngR2i3989R3R88R5R112R6tgoR0y26:assets%2Fimages%2Fnum5.pngR2i4113R3R88R5R113R6tgoR0y26:assets%2Fimages%2Fnum6.pngR2i4181R3R88R5R114R6tgoR0y26:assets%2Fimages%2Fnum7.pngR2i3692R3R88R5R115R6tgoR0y26:assets%2Fimages%2Fnum8.pngR2i3914R3R88R5R116R6tgoR0y26:assets%2Fimages%2Fnum9.pngR2i3687R3R88R5R117R6tgoR0y37:assets%2Fimages%2Fprompt-ng_login.pngR2i79491R3R88R5R118R6tgoR0y32:assets%2Fimages%2FtitleEnter.pngR2i1449202R3R88R5R119R6tgoR0y34:assets%2Fimages%2Ffonts%2Fbold.pngR2i95090R3R88R5R120R6tgoR0y37:assets%2Fimages%2Ffonts%2Fdefault.pngR2i78822R3R88R5R121R6tgoR0y34:assets%2Fimages%2Ffonts%2Fbold.xmlR2i17911R3R4R5R122R6tgoR0y37:assets%2Fimages%2Ffonts%2Fdefault.xmlR2i27630R3R4R5R123R6tgoR0y42:assets%2Fimages%2FgfDemon%2FAnimation.jsonR2i279376R3R4R5R124R6tgoR0y43:assets%2Fimages%2FgfDemon%2Fspritemap1.jsonR2i4539R3R4R5R125R6tgoR0y42:assets%2Fimages%2FgfDemon%2Fspritemap1.pngR2i320324R3R88R5R126R6tgoR0y48:assets%2Fimages%2FgfDemonNoSkew%2FAnimation.jsonR2i330591R3R4R5R127R6tgoR0y49:assets%2Fimages%2FgfDemonNoSkew%2Fspritemap1.jsonR2i25481R3R4R5R128R6tgoR0y48:assets%2Fimages%2FgfDemonNoSkew%2Fspritemap1.pngR2i2901489R3R88R5R129R6tgoR0y41:assets%2Fimages%2Ficons%2Ficon-bf-old.pngR2i10263R3R88R5R130R6tgoR0y43:assets%2Fimages%2Ficons%2Ficon-bf-pixel.pngR2i1301R3R88R5R131R6tgoR0y37:assets%2Fimages%2Ficons%2Ficon-bf.pngR2i19936R3R88R5R132R6tgoR0y38:assets%2Fimages%2Ficons%2Ficon-dad.pngR2i15108R3R88R5R133R6tgoR0y39:assets%2Fimages%2Ficons%2Ficon-face.pngR2i7096R3R88R5R134R6tgoR0y37:assets%2Fimages%2Ficons%2Ficon-gf.pngR2i12010R3R88R5R135R6tgoR0y38:assets%2Fimages%2Ficons%2Ficon-mom.pngR2i15612R3R88R5R136R6tgoR0y42:assets%2Fimages%2Ficons%2Ficon-monster.pngR2i23064R3R88R5R137R6tgoR0y42:assets%2Fimages%2Ficons%2Ficon-parents.pngR2i22667R3R88R5R138R6tgoR0y39:assets%2Fimages%2Ficons%2Ficon-pico.pngR2i21559R3R88R5R139R6tgoR0y41:assets%2Fimages%2Ficons%2Ficon-senpai.pngR2i1441R3R88R5R140R6tgoR0y41:assets%2Fimages%2Ficons%2Ficon-spirit.pngR2i1286R3R88R5R141R6tgoR0y41:assets%2Fimages%2Ficons%2Ficon-spooky.pngR2i10457R3R88R5R142R6tgoR0y42:assets%2Fimages%2Ficons%2Ficon-tankman.pngR2i7072R3R88R5R143R6tgoR0y43:assets%2Fimages%2FpicoKill%2FAnimation.jsonR2i515064R3R4R5R144R6tgoR0y44:assets%2Fimages%2FpicoKill%2Fspritemap1.jsonR2i8871R3R4R5R145R6tgoR0y43:assets%2Fimages%2FpicoKill%2Fspritemap1.pngR2i964113R3R88R5R146R6tgoR0y44:assets%2Fimages%2FpicoShoot%2FAnimation.jsonR2i515064R3R4R5R147R6tgoR0y45:assets%2Fimages%2FpicoShoot%2Fspritemap1.jsonR2i8871R3R4R5R148R6tgoR0y44:assets%2Fimages%2FpicoShoot%2Fspritemap1.pngR2i964113R3R88R5R149R6tgoR0y43:assets%2Fimages%2FskewTest%2FAnimation.jsonR2i260845R3R4R5R150R6tgoR0y44:assets%2Fimages%2FskewTest%2Fspritemap1.jsonR2i19335R3R4R5R151R6tgoR0y43:assets%2Fimages%2FskewTest%2Fspritemap1.pngR2i454108R3R88R5R152R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek0.pngR2i7056R3R88R5R153R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek1.pngR2i6261R3R88R5R154R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek2.pngR2i6517R3R88R5R155R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek3.pngR2i7148R3R88R5R156R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek4.pngR2i6262R3R88R5R157R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek5.pngR2i6440R3R88R5R158R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek6.pngR2i8979R3R88R5R159R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek7.pngR2i7349R3R88R5R160R6tgoR0y44:assets%2Fimages%2FtightBars%2FAnimation.jsonR2i2454984R3R4R5R161R6tgoR0y45:assets%2Fimages%2FtightBars%2Fspritemap1.jsonR2i2180R3R4R5R162R6tgoR0y44:assets%2Fimages%2FtightBars%2Fspritemap1.pngR2i85619R3R88R5R163R6tgoR0y43:assets%2Fimages%2FFNF_main_menu_assets.jsonR2i14694R3R4R5R164R6tgoR0y33:assets%2Fimages%2FNOTE_assets.xmlR2i9116R3R4R5R165R6tgoR0y30:assets%2Fimages%2Falphabet.xmlR2i39571R3R4R5R166R6tgoR0y45:assets%2Fimages%2Fcampaign_menu_UI_assets.xmlR2i1917R3R4R5R167R6tgoR0y37:assets%2Fimages%2FcheckboxThingie.xmlR2i2323R3R4R5R168R6tgoR0y34:assets%2Fimages%2FgfDanceTitle.xmlR2i4291R3R4R5R169R6tgoR0y32:assets%2Fimages%2FlogoBumpin.xmlR2i2194R3R4R5R170R6tgoR0y28:assets%2Fimages%2Fmoney.jsonR2i4541R3R4R5R171R6tgoR0y37:assets%2Fimages%2Fprompt-ng_login.xmlR2i1763R3R4R5R172R6tgoR0y32:assets%2Fimages%2FtitleEnter.xmlR2i4931R3R4R5R173R6tgoR2i2309657R3y5:MUSICR5y31:assets%2Fmusic%2FfreakyMenu.mp3y9:pathGroupaR175hR6tgoR0y33:assets%2Fmusic%2FgunsCutscene.mp4R2i11317389R3y6:BINARYR5R177R6tgoR0y39:assets%2Fmusic%2FkickstarterTrailer.mp4R2i19552536R3R178R5R179R6tgoR0y35:assets%2Fmusic%2FstressCutscene.mp4R2i16478289R3R178R5R180R6tgoR0y32:assets%2Fmusic%2FughCutscene.mp4R2i13938137R3R178R5R181R6tgoR2i17762R3R174R5y32:assets%2Fsounds%2FcancelMenu.mp3R176aR182hR6tgoR2i91950R3R174R5y33:assets%2Fsounds%2FconfirmMenu.mp3R176aR183hR6tgoR2i17762R3R174R5y32:assets%2Fsounds%2FscrollMenu.mp3R176aR184hR6tgoR0y48:mods%2FintroMod%2F_append%2Fdata%2FintroText.txtR2i20R3R4R5R185goR0y18:mods%2FmodList.txtR2i8R3R4R5R186goR0y17:mods%2Freadme.txtR2i91R3R4R5R187goR0y21:do%20NOT%20readme.txtR2i4602R3R4R5R188R6tgoR0y13:changelog.txtR2i8236R3R4R5R189R6tgoR0y34:assets%2Ffonts%2Ffonts-go-here.txtR2zR3R4R5R190R6tgoR2i14656R3y4:FONTy9:classNamey31:__ASSET__assets_fonts_pixel_otfR5y26:assets%2Ffonts%2Fpixel.otfR6tgoR2i75864R3R191R192y29:__ASSET__assets_fonts_vcr_ttfR5y24:assets%2Ffonts%2Fvcr.ttfR6tgoR2i2114R3R174R5y26:flixel%2Fsounds%2Fbeep.mp3R176aR197y26:flixel%2Fsounds%2Fbeep.ogghR6tgoR2i39706R3R174R5y28:flixel%2Fsounds%2Fflixel.mp3R176aR199y28:flixel%2Fsounds%2Fflixel.ogghR6tgoR2i5794R3y5:SOUNDR5R198R176aR197R198hgoR2i33629R3R201R5R200R176aR199R200hgoR2i15744R3R191R192y35:__ASSET__flixel_fonts_nokiafc22_ttfR5y30:flixel%2Ffonts%2Fnokiafc22.ttfR6tgoR2i29724R3R191R192y36:__ASSET__flixel_fonts_monsterrat_ttfR5y31:flixel%2Ffonts%2Fmonsterrat.ttfR6tgoR0y33:flixel%2Fimages%2Fui%2Fbutton.pngR2i519R3R88R5R206R6tgoR0y36:flixel%2Fimages%2Flogo%2Fdefault.pngR2i3280R3R88R5R207R6tgoR0y34:flixel%2Fflixel-ui%2Fimg%2Fbox.pngR2i912R3R88R5R208R6tgoR0y37:flixel%2Fflixel-ui%2Fimg%2Fbutton.pngR2i433R3R88R5R209R6tgoR0y48:flixel%2Fflixel-ui%2Fimg%2Fbutton_arrow_down.pngR2i446R3R88R5R210R6tgoR0y48:flixel%2Fflixel-ui%2Fimg%2Fbutton_arrow_left.pngR2i459R3R88R5R211R6tgoR0y49:flixel%2Fflixel-ui%2Fimg%2Fbutton_arrow_right.pngR2i511R3R88R5R212R6tgoR0y46:flixel%2Fflixel-ui%2Fimg%2Fbutton_arrow_up.pngR2i493R3R88R5R213R6tgoR0y42:flixel%2Fflixel-ui%2Fimg%2Fbutton_thin.pngR2i247R3R88R5R214R6tgoR0y44:flixel%2Fflixel-ui%2Fimg%2Fbutton_toggle.pngR2i534R3R88R5R215R6tgoR0y40:flixel%2Fflixel-ui%2Fimg%2Fcheck_box.pngR2i922R3R88R5R216R6tgoR0y41:flixel%2Fflixel-ui%2Fimg%2Fcheck_mark.pngR2i946R3R88R5R217R6tgoR0y37:flixel%2Fflixel-ui%2Fimg%2Fchrome.pngR2i253R3R88R5R218R6tgoR0y42:flixel%2Fflixel-ui%2Fimg%2Fchrome_flat.pngR2i212R3R88R5R219R6tgoR0y43:flixel%2Fflixel-ui%2Fimg%2Fchrome_inset.pngR2i192R3R88R5R220R6tgoR0y43:flixel%2Fflixel-ui%2Fimg%2Fchrome_light.pngR2i214R3R88R5R221R6tgoR0y44:flixel%2Fflixel-ui%2Fimg%2Fdropdown_mark.pngR2i156R3R88R5R222R6tgoR0y41:flixel%2Fflixel-ui%2Fimg%2Ffinger_big.pngR2i1724R3R88R5R223R6tgoR0y43:flixel%2Fflixel-ui%2Fimg%2Ffinger_small.pngR2i294R3R88R5R224R6tgoR0y38:flixel%2Fflixel-ui%2Fimg%2Fhilight.pngR2i129R3R88R5R225R6tgoR0y36:flixel%2Fflixel-ui%2Fimg%2Finvis.pngR2i128R3R88R5R226R6tgoR0y41:flixel%2Fflixel-ui%2Fimg%2Fminus_mark.pngR2i136R3R88R5R227R6tgoR0y40:flixel%2Fflixel-ui%2Fimg%2Fplus_mark.pngR2i147R3R88R5R228R6tgoR0y36:flixel%2Fflixel-ui%2Fimg%2Fradio.pngR2i191R3R88R5R229R6tgoR0y40:flixel%2Fflixel-ui%2Fimg%2Fradio_dot.pngR2i153R3R88R5R230R6tgoR0y37:flixel%2Fflixel-ui%2Fimg%2Fswatch.pngR2i185R3R88R5R231R6tgoR0y34:flixel%2Fflixel-ui%2Fimg%2Ftab.pngR2i201R3R88R5R232R6tgoR0y39:flixel%2Fflixel-ui%2Fimg%2Ftab_back.pngR2i210R3R88R5R233R6tgoR0y44:flixel%2Fflixel-ui%2Fimg%2Ftooltip_arrow.pngR2i18509R3R88R5R234R6tgoR0y39:flixel%2Fflixel-ui%2Fxml%2Fdefaults.xmlR2i1263R3R4R5R235R6tgoR0y53:flixel%2Fflixel-ui%2Fxml%2Fdefault_loading_screen.xmlR2i1953R3R4R5R236R6tgoR0y44:flixel%2Fflixel-ui%2Fxml%2Fdefault_popup.xmlR2i1848R3R4R5R237R6tgh\",\"rootPath\":null,\"version\":2,\"libraryArgs\":[],\"libraryType\":null}";
	var manifest = lime_utils_AssetManifest.parse(data,ManifestResources.rootPath);
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	lime_utils_Assets.registerLibrary("default",library);
	library = lime_utils_Assets.getLibrary("default");
	if(library != null) {
		ManifestResources.preloadLibraries.push(library);
	} else {
		ManifestResources.preloadLibraryNames.push("default");
	}
};
var lime_text_Font = function(name) {
	if(name != null) {
		this.name = name;
	}
	if(!this.__init) {
		if(this.ascender == undefined) {
			this.ascender = 0;
		}
		if(this.descender == undefined) {
			this.descender = 0;
		}
		if(this.height == undefined) {
			this.height = 0;
		}
		if(this.numGlyphs == undefined) {
			this.numGlyphs = 0;
		}
		if(this.underlinePosition == undefined) {
			this.underlinePosition = 0;
		}
		if(this.underlineThickness == undefined) {
			this.underlineThickness = 0;
		}
		if(this.unitsPerEM == undefined) {
			this.unitsPerEM = 0;
		}
		if(this.__fontID != null) {
			if(lime_utils_Assets.isLocal(this.__fontID)) {
				this.__fromBytes(lime_utils_Assets.getBytes(this.__fontID));
			}
		} else if(this.__fontPath != null) {
			this.__fromFile(this.__fontPath);
		}
	}
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = "lime.text.Font";
lime_text_Font.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_text_Font.fromBytes(bytes));
};
lime_text_Font.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$text_$Font();
	return request.load(path).then(function(font) {
		if(font != null) {
			return lime_app_Future.withValue(font);
		} else {
			return lime_app_Future.withError("");
		}
	});
};
lime_text_Font.loadFromName = function(path) {
	var font = new lime_text_Font();
	return font.__loadFromName(path);
};
lime_text_Font.__measureFontNode = function(fontFamily) {
	var node = window.document.createElement("span");
	node.setAttribute("aria-hidden","true");
	var text = window.document.createTextNode("BESbswy");
	node.appendChild(text);
	var style = node.style;
	style.display = "block";
	style.position = "absolute";
	style.top = "-9999px";
	style.left = "-9999px";
	style.fontSize = "300px";
	style.width = "auto";
	style.height = "auto";
	style.lineHeight = "normal";
	style.margin = "0";
	style.padding = "0";
	style.fontVariant = "normal";
	style.whiteSpace = "nowrap";
	style.fontFamily = fontFamily;
	window.document.body.appendChild(node);
	return node;
};
lime_text_Font.prototype = {
	ascender: null
	,descender: null
	,height: null
	,name: null
	,numGlyphs: null
	,src: null
	,underlinePosition: null
	,underlineThickness: null
	,unitsPerEM: null
	,__fontID: null
	,__fontPath: null
	,__init: null
	,decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) {
			characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		}
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__copyFrom: function(other) {
		if(other != null) {
			this.ascender = other.ascender;
			this.descender = other.descender;
			this.height = other.height;
			this.name = other.name;
			this.numGlyphs = other.numGlyphs;
			this.src = other.src;
			this.underlinePosition = other.underlinePosition;
			this.underlineThickness = other.underlineThickness;
			this.unitsPerEM = other.unitsPerEM;
			this.__fontID = other.__fontID;
			this.__fontPath = other.__fontPath;
			this.__init = true;
		}
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__initializeSource: function() {
		this.__init = true;
	}
	,__loadFromName: function(name) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		this.name = name;
		var userAgent = $global.navigator.userAgent.toLowerCase();
		var isSafari = userAgent.indexOf(" safari/") >= 0 && userAgent.indexOf(" chrome/") < 0;
		var isUIWebView = new EReg("(iPhone|iPod|iPad).*AppleWebKit(?!.*Version)","i").match(userAgent);
		if(!isSafari && !isUIWebView && (window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load)))) {
			window.document.fonts.load("1em '" + name + "'").then(function(_) {
				promise.complete(_gthis);
			},function(_) {
				lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "lime/text/Font.hx", lineNumber : 513, className : "lime.text.Font", methodName : "__loadFromName"});
				promise.complete(_gthis);
			});
		} else {
			var node1 = lime_text_Font.__measureFontNode("'" + name + "', sans-serif");
			var node2 = lime_text_Font.__measureFontNode("'" + name + "', serif");
			var width1 = node1.offsetWidth;
			var width2 = node2.offsetWidth;
			var interval = -1;
			var timeout = 3000;
			var intervalLength = 50;
			var intervalCount = 0;
			var loaded;
			var timeExpired;
			var checkFont = function() {
				intervalCount += 1;
				loaded = node1.offsetWidth != width1 || node2.offsetWidth != width2;
				timeExpired = intervalCount * intervalLength >= timeout;
				if(loaded || timeExpired) {
					window.clearInterval(interval);
					node1.parentNode.removeChild(node1);
					node2.parentNode.removeChild(node2);
					node1 = null;
					node2 = null;
					if(timeExpired) {
						lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "lime/text/Font.hx", lineNumber : 548, className : "lime.text.Font", methodName : "__loadFromName"});
					}
					promise.complete(_gthis);
				}
			};
			interval = window.setInterval(checkFont,intervalLength);
		}
		return promise.future;
	}
	,__setSize: function(size) {
	}
	,__class__: lime_text_Font
};
var _$_$ASSET_$_$assets_$fonts_$pixel_$otf = $hx_exports["__ASSET__assets_fonts_pixel_otf"] = function() {
	this.ascender = 1125;
	this.descender = -250;
	this.height = 1375;
	this.numGlyphs = 262;
	this.underlinePosition = -143;
	this.underlineThickness = 20;
	this.unitsPerEM = 1000;
	this.name = "Pixel Arial 11 Bold";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__assets_fonts_pixel_otf"] = _$_$ASSET_$_$assets_$fonts_$pixel_$otf;
_$_$ASSET_$_$assets_$fonts_$pixel_$otf.__name__ = "__ASSET__assets_fonts_pixel_otf";
_$_$ASSET_$_$assets_$fonts_$pixel_$otf.__super__ = lime_text_Font;
_$_$ASSET_$_$assets_$fonts_$pixel_$otf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$assets_$fonts_$pixel_$otf
});
var _$_$ASSET_$_$assets_$fonts_$vcr_$ttf = $hx_exports["__ASSET__assets_fonts_vcr_ttf"] = function() {
	this.ascender = 1800;
	this.descender = 0;
	this.height = 2000;
	this.numGlyphs = 204;
	this.underlinePosition = -292;
	this.underlineThickness = 150;
	this.unitsPerEM = 2048;
	this.name = "VCR OSD Mono";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__assets_fonts_vcr_ttf"] = _$_$ASSET_$_$assets_$fonts_$vcr_$ttf;
_$_$ASSET_$_$assets_$fonts_$vcr_$ttf.__name__ = "__ASSET__assets_fonts_vcr_ttf";
_$_$ASSET_$_$assets_$fonts_$vcr_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$assets_$fonts_$vcr_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$assets_$fonts_$vcr_$ttf
});
var _$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf = $hx_exports["__ASSET__flixel_fonts_nokiafc22_ttf"] = function() {
	this.ascender = 2048;
	this.descender = -512;
	this.height = 2816;
	this.numGlyphs = 172;
	this.underlinePosition = -640;
	this.underlineThickness = 256;
	this.unitsPerEM = 2048;
	this.name = "Nokia Cellphone FC Small";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__flixel_fonts_nokiafc22_ttf"] = _$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf;
_$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf.__name__ = "__ASSET__flixel_fonts_nokiafc22_ttf";
_$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf
});
var _$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf = $hx_exports["__ASSET__flixel_fonts_monsterrat_ttf"] = function() {
	this.ascender = 968;
	this.descender = -251;
	this.height = 1219;
	this.numGlyphs = 263;
	this.underlinePosition = -150;
	this.underlineThickness = 50;
	this.unitsPerEM = 1000;
	this.name = "Monsterrat";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__flixel_fonts_monsterrat_ttf"] = _$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf;
_$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf.__name__ = "__ASSET__flixel_fonts_monsterrat_ttf";
_$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf
});
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = "openfl.text.Font";
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) {
		enumerateDeviceFonts = false;
	}
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.fromBytes = function(bytes) {
	var font = new openfl_text_Font();
	font.__fromBytes(openfl_utils_ByteArray.toBytes(bytes));
	return font;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.loadFromBytes = function(bytes) {
	return lime_text_Font.loadFromBytes(openfl_utils_ByteArray.toBytes(bytes)).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.loadFromFile = function(path) {
	return lime_text_Font.loadFromFile(path).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.loadFromName = function(path) {
	return lime_text_Font.loadFromName(path).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.registerFont = function(font) {
	var instance = null;
	if(js_Boot.getClass(font) == null) {
		instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	} else {
		instance = js_Boot.__cast(font , openfl_text_Font);
	}
	if(instance != null) {
		openfl_text_Font.__registeredFonts.push(instance);
		openfl_text_Font.__fontByName.h[instance.name] = instance;
	}
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	fontStyle: null
	,fontType: null
	,__initialized: null
	,__fromLimeFont: function(font) {
		this.__copyFrom(font);
	}
	,__initialize: function() {
		return this.__initialized;
	}
	,get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl_text_Font
	,__properties__: {set_fontName:"set_fontName",get_fontName:"get_fontName"}
});
var _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$pixel_$otf = $hx_exports["__ASSET__OPENFL__assets_fonts_pixel_otf"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$assets_$fonts_$pixel_$otf());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__assets_fonts_pixel_otf"] = _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$pixel_$otf;
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$pixel_$otf.__name__ = "__ASSET__OPENFL__assets_fonts_pixel_otf";
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$pixel_$otf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$pixel_$otf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$pixel_$otf
});
var _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$vcr_$ttf = $hx_exports["__ASSET__OPENFL__assets_fonts_vcr_ttf"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$assets_$fonts_$vcr_$ttf());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__assets_fonts_vcr_ttf"] = _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$vcr_$ttf;
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$vcr_$ttf.__name__ = "__ASSET__OPENFL__assets_fonts_vcr_ttf";
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$vcr_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$vcr_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$vcr_$ttf
});
var _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf = $hx_exports["__ASSET__OPENFL__flixel_fonts_nokiafc22_ttf"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__flixel_fonts_nokiafc22_ttf"] = _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf;
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf.__name__ = "__ASSET__OPENFL__flixel_fonts_nokiafc22_ttf";
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf
});
var _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf = $hx_exports["__ASSET__OPENFL__flixel_fonts_monsterrat_ttf"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__flixel_fonts_monsterrat_ttf"] = _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf;
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf.__name__ = "__ASSET__OPENFL__flixel_fonts_monsterrat_ttf";
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf
});
Math.__name__ = "Math";
var MenuCharacter = function(x,character) {
	if(character == null) {
		character = "bf";
	}
	flixel_FlxSprite.call(this,x);
	this.character = character;
	var library = null;
	var tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "campaign_menu_UI_characters" + ".png","IMAGE",library),Paths.getPath("images/" + "campaign_menu_UI_characters" + ".xml","TEXT",library));
	this.set_frames(tex);
	this.animation.addByPrefix("bf","BF idle dance white",24);
	this.animation.addByPrefix("bfConfirm","BF HEY!!",24,false);
	this.animation.addByPrefix("gf","GF Dancing Beat WHITE",24);
	this.animation.addByPrefix("dad","Dad idle dance BLACK LINE",24);
	this.animation.addByPrefix("spooky","spooky dance idle BLACK LINES",24);
	this.animation.addByPrefix("pico","Pico Idle Dance",24);
	this.animation.addByPrefix("mom","Mom Idle BLACK LINES",24);
	this.animation.addByPrefix("parents-christmas","Parent Christmas Idle",24);
	this.animation.addByPrefix("senpai","SENPAI idle Black Lines",24);
	this.animation.addByPrefix("tankman","Tankman Menu BLACK",24);
	this.animation.play(character);
	this.updateHitbox();
};
$hxClasses["MenuCharacter"] = MenuCharacter;
MenuCharacter.__name__ = "MenuCharacter";
MenuCharacter.__super__ = flixel_FlxSprite;
MenuCharacter.prototype = $extend(flixel_FlxSprite.prototype,{
	character: null
	,__class__: MenuCharacter
});
var MenuItem = function(x,y,weekNum) {
	if(weekNum == null) {
		weekNum = 0;
	}
	this.fakeFramerate = Math.round(1 / flixel_FlxG.elapsed / 10);
	this.isFlashing = false;
	this.flashingInt = 0;
	this.targetY = 0;
	flixel_group_FlxTypedSpriteGroup.call(this,x,y);
	this.week = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + ("storymenu/week" + weekNum) + ".png","IMAGE",null));
	this.add(this.week);
};
$hxClasses["MenuItem"] = MenuItem;
MenuItem.__name__ = "MenuItem";
MenuItem.__super__ = flixel_group_FlxTypedSpriteGroup;
MenuItem.prototype = $extend(flixel_group_FlxTypedSpriteGroup.prototype,{
	targetY: null
	,week: null
	,flashingInt: null
	,isFlashing: null
	,startFlashing: function() {
		this.isFlashing = true;
	}
	,fakeFramerate: null
	,update: function(elapsed) {
		flixel_group_FlxTypedSpriteGroup.prototype.update.call(this,elapsed);
		this.set_y(CoolUtil.coolLerp(this.y,this.targetY * 120 + 480,0.17));
		if(this.isFlashing) {
			this.flashingInt += 1;
		}
		if(this.flashingInt % this.fakeFramerate >= Math.floor(this.fakeFramerate / 2)) {
			this.week.set_color(-13369345);
		} else {
			this.week.set_color(-1);
		}
	}
	,__class__: MenuItem
});
var Note = function(strumTime,noteData,prevNote,sustainNote) {
	if(sustainNote == null) {
		sustainNote = false;
	}
	this.isSustainNote = false;
	this.sustainLength = 0;
	this.altNote = false;
	this.willMiss = false;
	this.wasGoodHit = false;
	this.tooLate = false;
	this.canBeHit = false;
	this.noteData = 0;
	this.mustPress = false;
	this.strumTime = 0;
	flixel_FlxSprite.call(this);
	if(prevNote == null) {
		prevNote = this;
	}
	this.prevNote = prevNote;
	this.isSustainNote = sustainNote;
	var _g = this;
	_g.set_x(_g.x + 50);
	var _g = this;
	_g.set_y(_g.y - 2000);
	this.strumTime = strumTime;
	this.noteData = noteData;
	switch(PlayState.curStage) {
	case "school":case "schoolEvil":
		this.loadGraphic(Paths.getPath("images/" + "weeb/pixelUI/arrows-pixels" + ".png","IMAGE",null),true,17,17);
		this.animation.add("greenScroll",[6]);
		this.animation.add("redScroll",[7]);
		this.animation.add("blueScroll",[5]);
		this.animation.add("purpleScroll",[4]);
		if(this.isSustainNote) {
			this.loadGraphic(Paths.getPath("images/" + "weeb/pixelUI/arrowEnds" + ".png","IMAGE",null),true,7,6);
			this.animation.add("purpleholdend",[4]);
			this.animation.add("greenholdend",[6]);
			this.animation.add("redholdend",[7]);
			this.animation.add("blueholdend",[5]);
			this.animation.add("purplehold",[0]);
			this.animation.add("greenhold",[2]);
			this.animation.add("redhold",[3]);
			this.animation.add("bluehold",[1]);
		}
		this.setGraphicSize(this.get_width() * PlayState.daPixelZoom | 0);
		this.updateHitbox();
		break;
	default:
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "NOTE_assets" + ".png","IMAGE",library),Paths.getPath("images/" + "NOTE_assets" + ".xml","TEXT",library)));
		this.animation.addByPrefix("greenScroll","green instance");
		this.animation.addByPrefix("redScroll","red instance");
		this.animation.addByPrefix("blueScroll","blue instance");
		this.animation.addByPrefix("purpleScroll","purple instance");
		this.animation.addByPrefix("purpleholdend","pruple end hold");
		this.animation.addByPrefix("greenholdend","green hold end");
		this.animation.addByPrefix("redholdend","red hold end");
		this.animation.addByPrefix("blueholdend","blue hold end");
		this.animation.addByPrefix("purplehold","purple hold piece");
		this.animation.addByPrefix("greenhold","green hold piece");
		this.animation.addByPrefix("redhold","red hold piece");
		this.animation.addByPrefix("bluehold","blue hold piece");
		this.setGraphicSize(this.get_width() * 0.7 | 0);
		this.updateHitbox();
		this.set_antialiasing(true);
	}
	this.colorSwap = new shaderslmfao_ColorSwap();
	this.shader = this.colorSwap.shader;
	this.updateColors();
	switch(noteData) {
	case 0:
		var _g = this;
		_g.set_x(_g.x + Note.swagWidth * 0);
		this.animation.play("purpleScroll");
		break;
	case 1:
		var _g = this;
		_g.set_x(_g.x + Note.swagWidth);
		this.animation.play("blueScroll");
		break;
	case 2:
		var _g = this;
		_g.set_x(_g.x + Note.swagWidth * 2);
		this.animation.play("greenScroll");
		break;
	case 3:
		var _g = this;
		_g.set_x(_g.x + Note.swagWidth * 3);
		this.animation.play("redScroll");
		break;
	}
	if(this.isSustainNote && prevNote != null) {
		this.set_alpha(0.6);
		if(ui_PreferencesMenu.getPref("downscroll")) {
			this.set_angle(180);
		}
		var _g = this;
		_g.set_x(_g.x + this.get_width() / 2);
		switch(noteData) {
		case 0:
			this.animation.play("purpleholdend");
			break;
		case 1:
			this.animation.play("blueholdend");
			break;
		case 2:
			this.animation.play("greenholdend");
			break;
		case 3:
			this.animation.play("redholdend");
			break;
		}
		this.updateHitbox();
		var _g = this;
		_g.set_x(_g.x - this.get_width() / 2);
		if(StringTools.startsWith(PlayState.curStage,"school")) {
			var _g = this;
			_g.set_x(_g.x + 30);
		}
		if(prevNote.isSustainNote) {
			switch(prevNote.noteData) {
			case 0:
				prevNote.animation.play("purplehold");
				break;
			case 1:
				prevNote.animation.play("bluehold");
				break;
			case 2:
				prevNote.animation.play("greenhold");
				break;
			case 3:
				prevNote.animation.play("redhold");
				break;
			}
			var _g = prevNote.scale;
			_g.set_y(_g.y * (Conductor.stepCrochet / 100 * 1.5 * PlayState.SONG.speed));
			prevNote.updateHitbox();
		}
	}
};
$hxClasses["Note"] = Note;
Note.__name__ = "Note";
Note.__super__ = flixel_FlxSprite;
Note.prototype = $extend(flixel_FlxSprite.prototype,{
	strumTime: null
	,mustPress: null
	,noteData: null
	,canBeHit: null
	,tooLate: null
	,wasGoodHit: null
	,willMiss: null
	,altNote: null
	,prevNote: null
	,sustainLength: null
	,isSustainNote: null
	,colorSwap: null
	,updateColors: function() {
		this.colorSwap.update(Note.arrowColors[this.noteData]);
	}
	,update: function(elapsed) {
		flixel_FlxSprite.prototype.update.call(this,elapsed);
		if(this.mustPress) {
			if(this.willMiss && !this.wasGoodHit) {
				this.tooLate = true;
				this.canBeHit = false;
			} else if(this.strumTime > Conductor.songPosition - Conductor.safeZoneOffset) {
				if(this.strumTime < Conductor.songPosition + 0.5 * Conductor.safeZoneOffset) {
					this.canBeHit = true;
				}
			} else {
				this.willMiss = true;
				this.canBeHit = true;
			}
		} else {
			this.canBeHit = false;
			if(this.strumTime <= Conductor.songPosition) {
				this.wasGoodHit = true;
			}
		}
		if(this.tooLate) {
			if(this.alpha > 0.3) {
				this.set_alpha(0.3);
			}
		}
	}
	,__class__: Note
});
var NoteSplash = function(x,y,notedata) {
	if(notedata == null) {
		notedata = 0;
	}
	flixel_FlxSprite.call(this,x,y);
	var library = null;
	this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "noteSplashes" + ".png","IMAGE",library),Paths.getPath("images/" + "noteSplashes" + ".xml","TEXT",library)));
	this.animation.addByPrefix("note1-0","note impact 1  blue",24,false);
	this.animation.addByPrefix("note2-0","note impact 1 green",24,false);
	this.animation.addByPrefix("note0-0","note impact 1 purple",24,false);
	this.animation.addByPrefix("note3-0","note impact 1 red",24,false);
	this.animation.addByPrefix("note1-1","note impact 2 blue",24,false);
	this.animation.addByPrefix("note2-1","note impact 2 green",24,false);
	this.animation.addByPrefix("note0-1","note impact 2 purple",24,false);
	this.animation.addByPrefix("note3-1","note impact 2 red",24,false);
	this.setupNoteSplash(x,y,notedata);
};
$hxClasses["NoteSplash"] = NoteSplash;
NoteSplash.__name__ = "NoteSplash";
NoteSplash.__super__ = flixel_FlxSprite;
NoteSplash.prototype = $extend(flixel_FlxSprite.prototype,{
	setupNoteSplash: function(x,y,notedata) {
		if(notedata == null) {
			notedata = 0;
		}
		this.setPosition(x,y);
		this.set_alpha(0.6);
		this.animation.play("note" + notedata + "-" + flixel_FlxG.random.int(0,1),true);
		var _g = this.animation._curAnim;
		_g.set_frameRate(_g.frameRate + flixel_FlxG.random.int(-2,2));
		this.updateHitbox();
		this.offset.set(this.get_width() * 0.3,this.get_height() * 0.3);
	}
	,update: function(elapsed) {
		if(this.animation._curAnim.finished) {
			this.kill();
		}
		flixel_FlxSprite.prototype.update.call(this,elapsed);
	}
	,__class__: NoteSplash
});
var OutdatedSubState = function(TransIn,TransOut) {
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["OutdatedSubState"] = OutdatedSubState;
OutdatedSubState.__name__ = "OutdatedSubState";
OutdatedSubState.__super__ = MusicBeatState;
OutdatedSubState.prototype = $extend(MusicBeatState.prototype,{
	create: function() {
		MusicBeatState.prototype.create.call(this);
		var bg = new flixel_FlxSprite().makeGraphic(flixel_FlxG.width,flixel_FlxG.height,-16777216);
		this.add(bg);
		var txt = new flixel_text_FlxText(0,0,flixel_FlxG.width,"HEY! You're running an outdated version of the game!\nCurrent version is v" + lime_app_Application.current.meta.h["version"] + " while the most recent version is " + "v0.2.8" + "! Press Space to go to itch.io, or ESCAPE to ignore this!!",32);
		txt.setFormat("VCR OSD Mono",32,-1,"center");
		txt.screenCenter();
		this.add(txt);
	}
	,update: function(elapsed) {
		if(PlayerSettings.player1.controls._accept.check()) {
			var prefix = "";
			if(!new EReg("^https?://","").match("https://ninja-muffin24.itch.io/funkin")) {
				prefix = "http://";
			}
			openfl_Lib.getURL(new openfl_net_URLRequest(prefix + "https://ninja-muffin24.itch.io/funkin"),"_blank");
		}
		if(PlayerSettings.player1.controls._back.check()) {
			OutdatedSubState.leftState = true;
			var nextState = new MainMenuState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
		MusicBeatState.prototype.update.call(this,elapsed);
	}
	,__class__: OutdatedSubState
});
var Paths = function() { };
$hxClasses["Paths"] = Paths;
Paths.__name__ = "Paths";
Paths.currentLevel = null;
Paths.setCurrentLevel = function(name) {
	Paths.currentLevel = name.toLowerCase();
};
Paths.getPath = function(file,type,library) {
	if(library != null) {
		return Paths.getLibraryPath(file,library);
	}
	if(Paths.currentLevel != null) {
		var library = Paths.currentLevel;
		var levelPath = "" + library + ":assets/" + library + "/" + file;
		if(openfl_utils_Assets.exists(levelPath,type)) {
			return levelPath;
		}
		levelPath = "shared" + ":assets/" + "shared" + "/" + file;
		if(openfl_utils_Assets.exists(levelPath,type)) {
			return levelPath;
		}
	}
	return "assets/" + file;
};
Paths.getLibraryPath = function(file,library) {
	if(library == null) {
		library = "preload";
	}
	if(library == "preload" || library == "default") {
		return "assets/" + file;
	} else {
		return "" + library + ":assets/" + library + "/" + file;
	}
};
Paths.getLibraryPathForce = function(file,library) {
	return "" + library + ":assets/" + library + "/" + file;
};
Paths.getPreloadPath = function(file) {
	return "assets/" + file;
};
Paths.file = function(file,type,library) {
	if(type == null) {
		type = "TEXT";
	}
	return Paths.getPath(file,type,library);
};
Paths.txt = function(key,library) {
	return Paths.getPath("data/" + key + ".txt","TEXT",library);
};
Paths.xml = function(key,library) {
	return Paths.getPath("data/" + key + ".xml","TEXT",library);
};
Paths.json = function(key,library) {
	return Paths.getPath("data/" + key + ".json","TEXT",library);
};
Paths.sound = function(key,library) {
	return Paths.getPath("sounds/" + key + "." + "mp3","SOUND",library);
};
Paths.soundRandom = function(key,min,max,library) {
	return Paths.sound(key + flixel_FlxG.random.int(min,max),library);
};
Paths.music = function(key,library) {
	return Paths.getPath("music/" + key + "." + "mp3","MUSIC",library);
};
Paths.voices = function(song) {
	return "songs:assets/songs/" + song.toLowerCase() + "/Voices." + "mp3";
};
Paths.inst = function(song) {
	return "songs:assets/songs/" + song.toLowerCase() + "/Inst." + "mp3";
};
Paths.image = function(key,library) {
	return Paths.getPath("images/" + key + ".png","IMAGE",library);
};
Paths.font = function(key) {
	return "assets/fonts/" + key;
};
Paths.video = function(key,library) {
	return Paths.getPath("music/" + key + ".mp4","TEXT",library);
};
Paths.getSparrowAtlas = function(key,library) {
	return flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + key + ".png","IMAGE",library),Paths.getPath("images/" + key + ".xml","TEXT",library));
};
Paths.getPackerAtlas = function(key,library) {
	return flixel_graphics_frames_FlxAtlasFrames.fromSpriteSheetPacker(Paths.getPath("images/" + key + ".png","IMAGE",library),Paths.getPath("images/" + key + ".txt","TEXT",library));
};
var PauseSubState = function(x,y) {
	this.curSelected = 0;
	this.menuItems = [];
	this.difficultyChoices = ["EASY","NORMAL","HARD","BACK"];
	this.pauseOG = ["Resume","Restart Song","Change Difficulty","Toggle Practice Mode","Exit to menu"];
	MusicBeatSubstate.call(this);
	this.menuItems = this.pauseOG;
	this.pauseMusic = new flixel_system_FlxSound().loadEmbedded(Paths.getPath("music/" + "breakfast" + "." + "mp3","MUSIC",null),true,true);
	this.pauseMusic.set_volume(0);
	this.pauseMusic.play(false,flixel_FlxG.random.int(0,this.pauseMusic._length / 2 | 0));
	flixel_FlxG.sound.list.add(this.pauseMusic);
	var bg = new flixel_FlxSprite().makeGraphic(flixel_FlxG.width,flixel_FlxG.height,-16777216);
	bg.set_alpha(0);
	bg.scrollFactor.set();
	this.add(bg);
	var levelInfo = new flixel_text_FlxText(20,15,0,"",32);
	var _g = levelInfo;
	_g.set_text(_g.text + PlayState.SONG.song);
	levelInfo.scrollFactor.set();
	levelInfo.setFormat("assets/fonts/" + "vcr.ttf",32);
	levelInfo.updateHitbox();
	this.add(levelInfo);
	var levelDifficulty = new flixel_text_FlxText(20,47,0,"",32);
	var _g = levelDifficulty;
	_g.set_text(_g.text + CoolUtil.difficultyString());
	levelDifficulty.scrollFactor.set();
	levelDifficulty.setFormat("assets/fonts/" + "vcr.ttf",32);
	levelDifficulty.updateHitbox();
	this.add(levelDifficulty);
	var deathCounter = new flixel_text_FlxText(20,79,0,"",32);
	deathCounter.set_text("Blue balled: " + PlayState.deathCounter);
	deathCounter.scrollFactor.set();
	deathCounter.setFormat("assets/fonts/" + "vcr.ttf",32);
	deathCounter.updateHitbox();
	this.add(deathCounter);
	this.practiceText = new flixel_text_FlxText(20,111,0,"PRACTICE MODE",32);
	this.practiceText.scrollFactor.set();
	this.practiceText.setFormat("assets/fonts/" + "vcr.ttf",32);
	this.practiceText.updateHitbox();
	this.practiceText.set_x(flixel_FlxG.width - (this.practiceText.get_width() + 20));
	this.practiceText.set_visible(PlayState.practiceMode);
	this.add(this.practiceText);
	levelDifficulty.set_alpha(0);
	levelInfo.set_alpha(0);
	deathCounter.set_alpha(0);
	levelInfo.set_x(flixel_FlxG.width - (levelInfo.get_width() + 20));
	levelDifficulty.set_x(flixel_FlxG.width - (levelDifficulty.get_width() + 20));
	deathCounter.set_x(flixel_FlxG.width - (deathCounter.get_width() + 20));
	flixel_tweens_FlxTween.tween(bg,{ alpha : 0.6},0.4,{ ease : flixel_tweens_FlxEase.quartInOut});
	flixel_tweens_FlxTween.tween(levelInfo,{ alpha : 1, y : 20},0.4,{ ease : flixel_tweens_FlxEase.quartInOut, startDelay : 0.3});
	flixel_tweens_FlxTween.tween(levelDifficulty,{ alpha : 1, y : levelDifficulty.y + 5},0.4,{ ease : flixel_tweens_FlxEase.quartInOut, startDelay : 0.5});
	flixel_tweens_FlxTween.tween(deathCounter,{ alpha : 1, y : deathCounter.y + 5},0.4,{ ease : flixel_tweens_FlxEase.quartInOut, startDelay : 0.7});
	this.grpMenuShit = new flixel_group_FlxTypedGroup();
	this.add(this.grpMenuShit);
	this.regenMenu();
};
$hxClasses["PauseSubState"] = PauseSubState;
PauseSubState.__name__ = "PauseSubState";
PauseSubState.__super__ = MusicBeatSubstate;
PauseSubState.prototype = $extend(MusicBeatSubstate.prototype,{
	grpMenuShit: null
	,pauseOG: null
	,difficultyChoices: null
	,menuItems: null
	,curSelected: null
	,pauseMusic: null
	,practiceText: null
	,regenMenu: function() {
		while(this.grpMenuShit.members.length > 0) this.grpMenuShit.remove(this.grpMenuShit.members[0],true);
		var _g = 0;
		var _g1 = this.menuItems.length;
		while(_g < _g1) {
			var i = _g++;
			var menuItem = new Alphabet(0,70 * i + 30,this.menuItems[i],true,false);
			menuItem.isMenuItem = true;
			menuItem.targetY = i;
			this.grpMenuShit.add(menuItem);
		}
		this.curSelected = 0;
		this.changeSelection();
	}
	,update: function(elapsed) {
		if(this.pauseMusic._volume < 0.5) {
			var _g = this.pauseMusic;
			_g.set_volume(_g._volume + 0.01 * elapsed);
		}
		MusicBeatSubstate.prototype.update.call(this,elapsed);
		var upP = PlayerSettings.player1.controls._ui_upP.check();
		var downP = PlayerSettings.player1.controls._ui_downP.check();
		var accepted = PlayerSettings.player1.controls._accept.check();
		if(upP) {
			this.changeSelection(-1);
		}
		if(downP) {
			this.changeSelection(1);
		}
		if(accepted) {
			var daSelected = this.menuItems[this.curSelected];
			switch(daSelected) {
			case "BACK":
				this.menuItems = this.pauseOG;
				this.regenMenu();
				break;
			case "Change Difficulty":
				this.menuItems = this.difficultyChoices;
				this.regenMenu();
				break;
			case "Exit to menu":
				PlayState.seenCutscene = false;
				PlayState.deathCounter = 0;
				if(PlayState.isStoryMode) {
					var nextState = new StoryMenuState();
					if(flixel_FlxG.game._state.switchTo(nextState)) {
						flixel_FlxG.game._requestedState = nextState;
					}
				} else {
					var nextState = new FreeplayState();
					if(flixel_FlxG.game._state.switchTo(nextState)) {
						flixel_FlxG.game._requestedState = nextState;
					}
				}
				break;
			case "EASY":case "HARD":case "NORMAL":
				PlayState.SONG = Song.loadFromJson(Highscore.formatSong(PlayState.SONG.song.toLowerCase(),this.curSelected),PlayState.SONG.song.toLowerCase());
				PlayState.storyDifficulty = this.curSelected;
				var nextState = Type.createInstance(js_Boot.getClass(flixel_FlxG.game._state),[]);
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
				break;
			case "Restart Song":
				var nextState = Type.createInstance(js_Boot.getClass(flixel_FlxG.game._state),[]);
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
				break;
			case "Resume":
				this.close();
				break;
			case "Toggle Practice Mode":
				PlayState.practiceMode = !PlayState.practiceMode;
				this.practiceText.set_visible(PlayState.practiceMode);
				break;
			}
		}
		var _this = flixel_FlxG.keys.justPressed;
		var tmp = _this.keyManager.checkStatus(74,_this.status);
	}
	,destroy: function() {
		this.pauseMusic.destroy();
		MusicBeatSubstate.prototype.destroy.call(this);
	}
	,changeSelection: function(change) {
		if(change == null) {
			change = 0;
		}
		flixel_FlxG.sound.play(Paths.sound("scrollMenu"),0.4);
		this.curSelected += change;
		if(this.curSelected < 0) {
			this.curSelected = this.menuItems.length - 1;
		}
		if(this.curSelected >= this.menuItems.length) {
			this.curSelected = 0;
		}
		var bullShit = 0;
		var _g = 0;
		var _g1 = this.grpMenuShit.members;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.targetY = bullShit - this.curSelected;
			++bullShit;
			item.set_alpha(0.6);
			if(item.targetY == 0) {
				item.set_alpha(1);
			}
		}
	}
	,__class__: PauseSubState
});
var PlayState = function(TransIn,TransOut) {
	this.curLight = 0;
	this.lightningOffset = 8;
	this.lightningStrikeBeat = 0;
	this.startedMoving = false;
	this.trainCooldown = 0;
	this.trainFinishing = false;
	this.trainCars = 8;
	this.trainFrameTiming = 0;
	this.trainMoving = false;
	this.tankX = 400;
	this.tankSpeed = flixel_FlxG.random.float(5,7);
	this.tankAngle = flixel_FlxG.random.int(-90,45);
	this.tankMoving = false;
	this.tankResetShit = false;
	this.fastCarCanDrive = true;
	this.endingSong = false;
	this.cameraRightSide = false;
	this.canPause = true;
	this.startedCountdown = false;
	this.paused = false;
	this.debugNum = 0;
	this.songTime = 0;
	this.lastReportedPlayheadPosition = 0;
	this.previousFrameTime = 0;
	this.perfectMode = false;
	this.startTimer = new flixel_util_FlxTimer();
	this.inCutscene = false;
	this.defaultCamZoom = 1.05;
	this.songScore = 0;
	this.talking = true;
	this.wiggleShit = new WiggleEffect();
	this.isHalloween = false;
	this.dialogue = ["blah blah blah","coolswag"];
	this.startingSong = false;
	this.generatedMusic = false;
	this.combo = 0;
	this.health = 1;
	this.gfSpeed = 1;
	this.curSong = "";
	this.camZooming = false;
	this.curSection = 0;
	this.unspawnNotes = [];
	this.vocalsFinished = false;
	this.halloweenLevel = false;
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["PlayState"] = PlayState;
PlayState.__name__ = "PlayState";
PlayState.SONG = null;
PlayState.prevCamFollow = null;
PlayState.__super__ = MusicBeatState;
PlayState.prototype = $extend(MusicBeatState.prototype,{
	halloweenLevel: null
	,vocals: null
	,vocalsFinished: null
	,dad: null
	,gf: null
	,boyfriend: null
	,notes: null
	,unspawnNotes: null
	,strumLine: null
	,curSection: null
	,camFollow: null
	,camPos: null
	,strumLineNotes: null
	,playerStrums: null
	,grpNoteSplashes: null
	,camZooming: null
	,curSong: null
	,gfSpeed: null
	,health: null
	,combo: null
	,healthBarBG: null
	,healthBar: null
	,generatedMusic: null
	,startingSong: null
	,iconP1: null
	,iconP2: null
	,camHUD: null
	,camGame: null
	,dialogue: null
	,halloweenBG: null
	,isHalloween: null
	,foregroundSprites: null
	,phillyCityLights: null
	,phillyTrain: null
	,trainSound: null
	,lightFadeShader: null
	,limo: null
	,grpLimoDancers: null
	,fastCar: null
	,upperBoppers: null
	,bottomBoppers: null
	,santa: null
	,bgGirls: null
	,wiggleShit: null
	,tankWatchtower: null
	,tankGround: null
	,tankmanRun: null
	,gfCutsceneLayer: null
	,bfTankCutsceneLayer: null
	,talking: null
	,songScore: null
	,scoreTxt: null
	,defaultCamZoom: null
	,inCutscene: null
	,create: function() {
		var _gthis = this;
		if(flixel_FlxG.sound.music != null) {
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
		}
		var instPath = "songs:assets/songs/" + PlayState.SONG.song.toLowerCase().toLowerCase() + "/Inst." + "mp3";
		if(openfl_utils_Assets.exists(instPath,"SOUND") || openfl_utils_Assets.exists(instPath,"MUSIC")) {
			openfl_utils_Assets.getSound(instPath,true);
		}
		var vocalsPath = "songs:assets/songs/" + PlayState.SONG.song.toLowerCase().toLowerCase() + "/Voices." + "mp3";
		if(openfl_utils_Assets.exists(vocalsPath,"SOUND") || openfl_utils_Assets.exists(vocalsPath,"MUSIC")) {
			openfl_utils_Assets.getSound(vocalsPath,true);
		}
		this.camGame = new flixel_FlxCamera();
		this.camHUD = new flixel_FlxCamera();
		this.camHUD.bgColor &= 16777215;
		this.camHUD.bgColor |= 0;
		flixel_FlxG.cameras.reset(this.camGame);
		flixel_FlxG.cameras.add(this.camHUD,false);
		this.grpNoteSplashes = new flixel_group_FlxTypedGroup();
		var splash = new NoteSplash(100,100,0);
		this.grpNoteSplashes.add(splash);
		splash.set_alpha(0.1);
		this.persistentUpdate = true;
		this.persistentDraw = true;
		if(PlayState.SONG == null) {
			PlayState.SONG = Song.loadFromJson("tutorial");
		}
		Conductor.mapBPMChanges(PlayState.SONG);
		Conductor.changeBPM(PlayState.SONG.bpm);
		this.foregroundSprites = new flixel_group_FlxTypedGroup();
		switch(PlayState.SONG.song.toLowerCase()) {
		case "bopeebo":
			this.dialogue = ["HEY!","You think you can just sing\nwith my daughter like that?","If you want to date her...","You're going to have to go \nthrough ME first!"];
			break;
		case "dadbattle":
			this.dialogue = ["gah you think you're hot stuff?","If you can beat me here...","Only then I will even CONSIDER letting you\ndate my daughter!"];
			break;
		case "fresh":
			this.dialogue = ["Not too shabby boy.",""];
			break;
		case "roses":
			this.dialogue = CoolUtil.coolTextFile(Paths.getPath("data/" + "roses/rosesDialogue" + ".txt","TEXT",null));
			break;
		case "senpai":
			this.dialogue = CoolUtil.coolTextFile(Paths.getPath("data/" + "senpai/senpaiDialogue" + ".txt","TEXT",null));
			break;
		case "thorns":
			this.dialogue = CoolUtil.coolTextFile(Paths.getPath("data/" + "thorns/thornsDialogue" + ".txt","TEXT",null));
			break;
		case "tutorial":
			this.dialogue = ["Hey you're pretty cute.","Use the arrow keys to keep up \nwith me singing."];
			break;
		}
		switch(PlayState.SONG.song.toLowerCase()) {
		case "cocoa":case "eggnog":
			PlayState.curStage = "mall";
			this.defaultCamZoom = 0.80;
			var bg = new flixel_FlxSprite(-1000,-500).loadGraphic(Paths.getPath("images/" + "christmas/bgWalls" + ".png","IMAGE",null));
			bg.set_antialiasing(true);
			bg.scrollFactor.set(0.2,0.2);
			bg.set_active(false);
			bg.setGraphicSize(bg.get_width() * 0.8 | 0);
			bg.updateHitbox();
			this.add(bg);
			this.upperBoppers = new flixel_FlxSprite(-240,-90);
			var library = null;
			this.upperBoppers.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "christmas/upperBop" + ".png","IMAGE",library),Paths.getPath("images/" + "christmas/upperBop" + ".xml","TEXT",library)));
			this.upperBoppers.animation.addByPrefix("bop","Upper Crowd Bob",24,false);
			this.upperBoppers.set_antialiasing(true);
			this.upperBoppers.scrollFactor.set(0.33,0.33);
			this.upperBoppers.setGraphicSize(this.upperBoppers.get_width() * 0.85 | 0);
			this.upperBoppers.updateHitbox();
			this.add(this.upperBoppers);
			var bgEscalator = new flixel_FlxSprite(-1100,-600).loadGraphic(Paths.getPath("images/" + "christmas/bgEscalator" + ".png","IMAGE",null));
			bgEscalator.set_antialiasing(true);
			bgEscalator.scrollFactor.set(0.3,0.3);
			bgEscalator.set_active(false);
			bgEscalator.setGraphicSize(bgEscalator.get_width() * 0.9 | 0);
			bgEscalator.updateHitbox();
			this.add(bgEscalator);
			var tree = new flixel_FlxSprite(370,-250).loadGraphic(Paths.getPath("images/" + "christmas/christmasTree" + ".png","IMAGE",null));
			tree.set_antialiasing(true);
			tree.scrollFactor.set(0.40,0.40);
			this.add(tree);
			this.bottomBoppers = new flixel_FlxSprite(-300,140);
			var library = null;
			this.bottomBoppers.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "christmas/bottomBop" + ".png","IMAGE",library),Paths.getPath("images/" + "christmas/bottomBop" + ".xml","TEXT",library)));
			this.bottomBoppers.animation.addByPrefix("bop","Bottom Level Boppers",24,false);
			this.bottomBoppers.set_antialiasing(true);
			this.bottomBoppers.scrollFactor.set(0.9,0.9);
			this.bottomBoppers.setGraphicSize(this.bottomBoppers.get_width() | 0);
			this.bottomBoppers.updateHitbox();
			this.add(this.bottomBoppers);
			var fgSnow = new flixel_FlxSprite(-600,700).loadGraphic(Paths.getPath("images/" + "christmas/fgSnow" + ".png","IMAGE",null));
			fgSnow.set_active(false);
			fgSnow.set_antialiasing(true);
			this.add(fgSnow);
			this.santa = new flixel_FlxSprite(-840,150);
			var library = null;
			this.santa.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "christmas/santa" + ".png","IMAGE",library),Paths.getPath("images/" + "christmas/santa" + ".xml","TEXT",library)));
			this.santa.animation.addByPrefix("idle","santa idle in fear",24,false);
			this.santa.set_antialiasing(true);
			this.add(this.santa);
			break;
		case "monster":case "south":case "spookeez":
			PlayState.curStage = "spooky";
			this.halloweenLevel = true;
			var library = null;
			var hallowTex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "halloween_bg" + ".png","IMAGE",library),Paths.getPath("images/" + "halloween_bg" + ".xml","TEXT",library));
			this.halloweenBG = new flixel_FlxSprite(-200,-100);
			this.halloweenBG.set_frames(hallowTex);
			this.halloweenBG.animation.addByPrefix("idle","halloweem bg0");
			this.halloweenBG.animation.addByPrefix("lightning","halloweem bg lightning strike",24,false);
			this.halloweenBG.animation.play("idle");
			this.halloweenBG.set_antialiasing(true);
			this.add(this.halloweenBG);
			this.isHalloween = true;
			break;
		case "blammed":case "philly":case "pico":
			PlayState.curStage = "philly";
			var bg = new flixel_FlxSprite(-100).loadGraphic(Paths.getPath("images/" + "philly/sky" + ".png","IMAGE",null));
			bg.scrollFactor.set(0.1,0.1);
			this.add(bg);
			var city = new flixel_FlxSprite(-10).loadGraphic(Paths.getPath("images/" + "philly/city" + ".png","IMAGE",null));
			city.scrollFactor.set(0.3,0.3);
			city.setGraphicSize(city.get_width() * 0.85 | 0);
			city.updateHitbox();
			this.add(city);
			this.lightFadeShader = new shaderslmfao_BuildingShaders();
			this.phillyCityLights = new flixel_group_FlxTypedGroup();
			this.add(this.phillyCityLights);
			var light = new flixel_FlxSprite(city.x).loadGraphic(Paths.getPath("images/" + ("philly/win" + 0) + ".png","IMAGE",null));
			light.scrollFactor.set(0.3,0.3);
			light.set_visible(false);
			light.setGraphicSize(light.get_width() * 0.85 | 0);
			light.updateHitbox();
			light.set_antialiasing(true);
			light.shader = this.lightFadeShader.shader;
			this.phillyCityLights.add(light);
			var light = new flixel_FlxSprite(city.x).loadGraphic(Paths.getPath("images/" + ("philly/win" + 1) + ".png","IMAGE",null));
			light.scrollFactor.set(0.3,0.3);
			light.set_visible(false);
			light.setGraphicSize(light.get_width() * 0.85 | 0);
			light.updateHitbox();
			light.set_antialiasing(true);
			light.shader = this.lightFadeShader.shader;
			this.phillyCityLights.add(light);
			var light = new flixel_FlxSprite(city.x).loadGraphic(Paths.getPath("images/" + ("philly/win" + 2) + ".png","IMAGE",null));
			light.scrollFactor.set(0.3,0.3);
			light.set_visible(false);
			light.setGraphicSize(light.get_width() * 0.85 | 0);
			light.updateHitbox();
			light.set_antialiasing(true);
			light.shader = this.lightFadeShader.shader;
			this.phillyCityLights.add(light);
			var light = new flixel_FlxSprite(city.x).loadGraphic(Paths.getPath("images/" + ("philly/win" + 3) + ".png","IMAGE",null));
			light.scrollFactor.set(0.3,0.3);
			light.set_visible(false);
			light.setGraphicSize(light.get_width() * 0.85 | 0);
			light.updateHitbox();
			light.set_antialiasing(true);
			light.shader = this.lightFadeShader.shader;
			this.phillyCityLights.add(light);
			var light = new flixel_FlxSprite(city.x).loadGraphic(Paths.getPath("images/" + ("philly/win" + 4) + ".png","IMAGE",null));
			light.scrollFactor.set(0.3,0.3);
			light.set_visible(false);
			light.setGraphicSize(light.get_width() * 0.85 | 0);
			light.updateHitbox();
			light.set_antialiasing(true);
			light.shader = this.lightFadeShader.shader;
			this.phillyCityLights.add(light);
			var streetBehind = new flixel_FlxSprite(-40,50).loadGraphic(Paths.getPath("images/" + "philly/behindTrain" + ".png","IMAGE",null));
			this.add(streetBehind);
			this.phillyTrain = new flixel_FlxSprite(2000,360).loadGraphic(Paths.getPath("images/" + "philly/train" + ".png","IMAGE",null));
			this.add(this.phillyTrain);
			this.trainSound = new flixel_system_FlxSound().loadEmbedded(Paths.sound("train_passes"));
			flixel_FlxG.sound.list.add(this.trainSound);
			var street = new flixel_FlxSprite(-40,streetBehind.y).loadGraphic(Paths.getPath("images/" + "philly/street" + ".png","IMAGE",null));
			this.add(street);
			break;
		case "high":case "milf":case "satin-panties":
			PlayState.curStage = "limo";
			this.defaultCamZoom = 0.90;
			var skyBG = new flixel_FlxSprite(-120,-50).loadGraphic(Paths.getPath("images/" + "limo/limoSunset" + ".png","IMAGE",null));
			skyBG.scrollFactor.set(0.1,0.1);
			this.add(skyBG);
			var bgLimo = new flixel_FlxSprite(-200,480);
			var library = null;
			bgLimo.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "limo/bgLimo" + ".png","IMAGE",library),Paths.getPath("images/" + "limo/bgLimo" + ".xml","TEXT",library)));
			bgLimo.animation.addByPrefix("drive","background limo pink",24);
			bgLimo.animation.play("drive");
			bgLimo.scrollFactor.set(0.4,0.4);
			this.add(bgLimo);
			this.grpLimoDancers = new flixel_group_FlxTypedGroup();
			this.add(this.grpLimoDancers);
			var dancer = new BackgroundDancer(130,bgLimo.y - 400);
			dancer.scrollFactor.set(0.4,0.4);
			this.grpLimoDancers.add(dancer);
			var dancer = new BackgroundDancer(500,bgLimo.y - 400);
			dancer.scrollFactor.set(0.4,0.4);
			this.grpLimoDancers.add(dancer);
			var dancer = new BackgroundDancer(870,bgLimo.y - 400);
			dancer.scrollFactor.set(0.4,0.4);
			this.grpLimoDancers.add(dancer);
			var dancer = new BackgroundDancer(1240,bgLimo.y - 400);
			dancer.scrollFactor.set(0.4,0.4);
			this.grpLimoDancers.add(dancer);
			var dancer = new BackgroundDancer(1610,bgLimo.y - 400);
			dancer.scrollFactor.set(0.4,0.4);
			this.grpLimoDancers.add(dancer);
			var overlayShit = new flixel_FlxSprite(-500,-600).loadGraphic(Paths.getPath("images/" + "limo/limoOverlay" + ".png","IMAGE",null));
			overlayShit.set_alpha(0.5);
			this.limo = new flixel_FlxSprite(-120,550);
			var library = null;
			this.limo.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "limo/limoDrive" + ".png","IMAGE",library),Paths.getPath("images/" + "limo/limoDrive" + ".xml","TEXT",library)));
			this.limo.animation.addByPrefix("drive","Limo stage",24);
			this.limo.animation.play("drive");
			this.limo.set_antialiasing(true);
			this.fastCar = new flixel_FlxSprite(-300,160).loadGraphic(Paths.getPath("images/" + "limo/fastCarLol" + ".png","IMAGE",null));
			break;
		case "roses":case "senpai":
			PlayState.curStage = "school";
			var bgSky = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + "weeb/weebSky" + ".png","IMAGE",null));
			bgSky.scrollFactor.set(0.1,0.1);
			this.add(bgSky);
			var repositionShit = -200;
			var bgSchool = new flixel_FlxSprite(repositionShit,0).loadGraphic(Paths.getPath("images/" + "weeb/weebSchool" + ".png","IMAGE",null));
			bgSchool.scrollFactor.set(0.6,0.90);
			this.add(bgSchool);
			var bgStreet = new flixel_FlxSprite(repositionShit).loadGraphic(Paths.getPath("images/" + "weeb/weebStreet" + ".png","IMAGE",null));
			bgStreet.scrollFactor.set(0.95,0.95);
			this.add(bgStreet);
			var fgTrees = new flixel_FlxSprite(repositionShit + 170,130).loadGraphic(Paths.getPath("images/" + "weeb/weebTreesBack" + ".png","IMAGE",null));
			fgTrees.scrollFactor.set(0.9,0.9);
			this.add(fgTrees);
			var bgTrees = new flixel_FlxSprite(repositionShit - 380,-800);
			var library = null;
			var treetex = flixel_graphics_frames_FlxAtlasFrames.fromSpriteSheetPacker(Paths.getPath("images/" + "weeb/weebTrees" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/weebTrees" + ".txt","TEXT",library));
			bgTrees.set_frames(treetex);
			bgTrees.animation.add("treeLoop",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],12);
			bgTrees.animation.play("treeLoop");
			bgTrees.scrollFactor.set(0.85,0.85);
			this.add(bgTrees);
			var treeLeaves = new flixel_FlxSprite(repositionShit,-40);
			var library = null;
			treeLeaves.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/petals" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/petals" + ".xml","TEXT",library)));
			treeLeaves.animation.addByPrefix("leaves","PETALS ALL",24,true);
			treeLeaves.animation.play("leaves");
			treeLeaves.scrollFactor.set(0.85,0.85);
			this.add(treeLeaves);
			var widShit = bgSky.get_width() * 6 | 0;
			bgSky.setGraphicSize(widShit);
			bgSchool.setGraphicSize(widShit);
			bgStreet.setGraphicSize(widShit);
			bgTrees.setGraphicSize(widShit * 1.4 | 0);
			fgTrees.setGraphicSize(widShit * 0.8 | 0);
			treeLeaves.setGraphicSize(widShit);
			fgTrees.updateHitbox();
			bgSky.updateHitbox();
			bgSchool.updateHitbox();
			bgStreet.updateHitbox();
			bgTrees.updateHitbox();
			treeLeaves.updateHitbox();
			this.bgGirls = new BackgroundGirls(-100,190);
			this.bgGirls.scrollFactor.set(0.9,0.9);
			if(PlayState.SONG.song.toLowerCase() == "roses") {
				this.bgGirls.getScared();
			}
			this.bgGirls.setGraphicSize(this.bgGirls.get_width() * PlayState.daPixelZoom | 0);
			this.bgGirls.updateHitbox();
			this.add(this.bgGirls);
			break;
		case "thorns":
			PlayState.curStage = "schoolEvil";
			var waveEffectBG = new flixel_addons_effects_chainable_FlxWaveEffect(flixel_addons_effects_chainable_FlxWaveMode.ALL,2,-1,3,2);
			var waveEffectFG = new flixel_addons_effects_chainable_FlxWaveEffect(flixel_addons_effects_chainable_FlxWaveMode.ALL,2,-1,5,2);
			var posX = 400;
			var posY = 200;
			var bg = new flixel_FlxSprite(posX,posY);
			var library = null;
			bg.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/animatedEvilSchool" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/animatedEvilSchool" + ".xml","TEXT",library)));
			bg.animation.addByPrefix("idle","background 2",24);
			bg.animation.play("idle");
			bg.scrollFactor.set(0.8,0.9);
			bg.scale.set(6,6);
			this.add(bg);
			break;
		case "guns":case "stress":case "ugh":
			this.defaultCamZoom = 0.9;
			PlayState.curStage = "tank";
			var sky = new BGSprite("tankSky",-400,-400,0,0);
			this.add(sky);
			var clouds = new BGSprite("tankClouds",flixel_FlxG.random.int(-700,-100),flixel_FlxG.random.int(-20,20),0.1,0.1);
			clouds.set_active(true);
			clouds.velocity.set_x(flixel_FlxG.random.float(5,15));
			this.add(clouds);
			var mountains = new BGSprite("tankMountains",-300,-20,0.2,0.2);
			mountains.setGraphicSize(mountains.get_width() * 1.2 | 0);
			mountains.updateHitbox();
			this.add(mountains);
			var buildings = new BGSprite("tankBuildings",-200,0,0.3,0.3);
			buildings.setGraphicSize(buildings.get_width() * 1.1 | 0);
			buildings.updateHitbox();
			this.add(buildings);
			var ruins = new BGSprite("tankRuins",-200,0,0.35,0.35);
			ruins.setGraphicSize(ruins.get_width() * 1.1 | 0);
			ruins.updateHitbox();
			this.add(ruins);
			var smokeL = new BGSprite("smokeLeft",-200,-100,0.4,0.4,["SmokeBlurLeft"],true);
			this.add(smokeL);
			var smokeR = new BGSprite("smokeRight",1100,-100,0.4,0.4,["SmokeRight"],true);
			this.add(smokeR);
			this.tankWatchtower = new BGSprite("tankWatchtower",100,50,0.5,0.5,["watchtower gradient color"]);
			this.add(this.tankWatchtower);
			this.tankGround = new BGSprite("tankRolling",300,300,0.5,0.5,["BG tank w lighting"],true);
			this.add(this.tankGround);
			this.tankmanRun = new flixel_group_FlxTypedGroup();
			this.add(this.tankmanRun);
			var ground = new BGSprite("tankGround",-420,-150);
			ground.setGraphicSize(ground.get_width() * 1.15 | 0);
			ground.updateHitbox();
			this.add(ground);
			this.moveTank();
			var tankdude0 = new BGSprite("tank0",-500,650,1.7,1.5,["fg"]);
			this.foregroundSprites.add(tankdude0);
			var tankdude1 = new BGSprite("tank1",-300,750,2,0.2,["fg"]);
			this.foregroundSprites.add(tankdude1);
			var tankdude2 = new BGSprite("tank2",450,940,1.5,1.5,["foreground"]);
			this.foregroundSprites.add(tankdude2);
			var tankdude4 = new BGSprite("tank4",1300,900,1.5,1.5,["fg"]);
			this.foregroundSprites.add(tankdude4);
			var tankdude5 = new BGSprite("tank5",1620,700,1.5,1.5,["fg"]);
			this.foregroundSprites.add(tankdude5);
			var tankdude3 = new BGSprite("tank3",1300,1200,3.5,2.5,["fg"]);
			this.foregroundSprites.add(tankdude3);
			break;
		case "winter-horrorland":
			PlayState.curStage = "mallEvil";
			var bg = new flixel_FlxSprite(-400,-500).loadGraphic(Paths.getPath("images/" + "christmas/evilBG" + ".png","IMAGE",null));
			bg.set_antialiasing(true);
			bg.scrollFactor.set(0.2,0.2);
			bg.set_active(false);
			bg.setGraphicSize(bg.get_width() * 0.8 | 0);
			bg.updateHitbox();
			this.add(bg);
			var evilTree = new flixel_FlxSprite(300,-300).loadGraphic(Paths.getPath("images/" + "christmas/evilTree" + ".png","IMAGE",null));
			evilTree.set_antialiasing(true);
			evilTree.scrollFactor.set(0.2,0.2);
			this.add(evilTree);
			var evilSnow = new flixel_FlxSprite(-200,700).loadGraphic(Paths.getPath("images/" + "christmas/evilSnow" + ".png","IMAGE",null));
			evilSnow.set_antialiasing(true);
			this.add(evilSnow);
			break;
		default:
			this.defaultCamZoom = 0.9;
			PlayState.curStage = "stage";
			var bg = new BGSprite("stageback",-600,-200,0.9,0.9);
			this.add(bg);
			var stageFront = new flixel_FlxSprite(-650,600).loadGraphic(Paths.getPath("images/" + "stagefront" + ".png","IMAGE",null));
			stageFront.setGraphicSize(stageFront.get_width() * 1.1 | 0);
			stageFront.updateHitbox();
			stageFront.set_antialiasing(true);
			stageFront.scrollFactor.set(0.9,0.9);
			stageFront.set_active(false);
			this.add(stageFront);
			var stageCurtains = new flixel_FlxSprite(-500,-300).loadGraphic(Paths.getPath("images/" + "stagecurtains" + ".png","IMAGE",null));
			stageCurtains.setGraphicSize(stageCurtains.get_width() * 0.9 | 0);
			stageCurtains.updateHitbox();
			stageCurtains.set_antialiasing(true);
			stageCurtains.scrollFactor.set(1.3,1.3);
			stageCurtains.set_active(false);
			this.add(stageCurtains);
		}
		var gfVersion = "gf";
		switch(PlayState.curStage) {
		case "limo":
			gfVersion = "gf-car";
			break;
		case "mall":case "mallEvil":
			gfVersion = "gf-christmas";
			break;
		case "school":
			gfVersion = "gf-pixel";
			break;
		case "schoolEvil":
			gfVersion = "gf-pixel";
			break;
		case "tank":
			gfVersion = "gf-tankmen";
			break;
		}
		if(PlayState.SONG.song.toLowerCase() == "stress") {
			gfVersion = "pico-speaker";
		}
		this.gf = new Character(400,130,gfVersion);
		this.gf.scrollFactor.set(0.95,0.95);
		if(gfVersion == "pico-speaker") {
			var _g = this.gf;
			_g.set_x(_g.x - 50);
			var _g = this.gf;
			_g.set_y(_g.y - 200);
			var tankmen = new TankmenBG(20,500,true);
			tankmen.strumTime = 10;
			tankmen.resetShit(20,600,true);
			this.tankmanRun.add(tankmen);
			var _g = 0;
			var _g1 = TankmenBG.animationNotes.length;
			while(_g < _g1) {
				var i = _g++;
				var Chance = 16;
				if(Chance == null) {
					Chance = 50;
				}
				if(flixel_FlxG.random.float(0,100) < Chance) {
					var man = this.tankmanRun.recycle(TankmenBG);
					man.strumTime = TankmenBG.animationNotes[i][0];
					man.resetShit(500,200 + flixel_FlxG.random.int(50,100),TankmenBG.animationNotes[i][1] < 2);
					this.tankmanRun.add(man);
				}
			}
		}
		this.dad = new Character(100,100,PlayState.SONG.player2);
		this.camPos = new flixel_math_FlxPoint(this.dad.getGraphicMidpoint().x,this.dad.getGraphicMidpoint().y);
		switch(PlayState.SONG.player2) {
		case "dad":
			var _g = this.camPos;
			_g.set_x(_g.x + 400);
			break;
		case "gf":
			this.dad.setPosition(this.gf.x,this.gf.y);
			this.gf.set_visible(false);
			if(PlayState.isStoryMode) {
				var _g = this.camPos;
				_g.set_x(_g.x + 600);
				this.tweenCamIn();
			}
			break;
		case "monster":
			var _g = this.dad;
			_g.set_y(_g.y + 100);
			break;
		case "monster-christmas":
			var _g = this.dad;
			_g.set_y(_g.y + 130);
			break;
		case "parents-christmas":
			var _g = this.dad;
			_g.set_x(_g.x - 500);
			break;
		case "pico":
			var _g = this.camPos;
			_g.set_x(_g.x + 600);
			var _g = this.dad;
			_g.set_y(_g.y + 300);
			break;
		case "senpai":
			var _g = this.dad;
			_g.set_x(_g.x + 150);
			var _g = this.dad;
			_g.set_y(_g.y + 360);
			this.camPos.set(this.dad.getGraphicMidpoint().x + 300,this.dad.getGraphicMidpoint().y);
			break;
		case "senpai-angry":
			var _g = this.dad;
			_g.set_x(_g.x + 150);
			var _g = this.dad;
			_g.set_y(_g.y + 360);
			this.camPos.set(this.dad.getGraphicMidpoint().x + 300,this.dad.getGraphicMidpoint().y);
			break;
		case "spirit":
			var _g = this.dad;
			_g.set_x(_g.x - 150);
			var _g = this.dad;
			_g.set_y(_g.y + 100);
			this.camPos.set(this.dad.getGraphicMidpoint().x + 300,this.dad.getGraphicMidpoint().y);
			break;
		case "spooky":
			var _g = this.dad;
			_g.set_y(_g.y + 200);
			break;
		case "tankman":
			var _g = this.dad;
			_g.set_y(_g.y + 180);
			break;
		}
		this.boyfriend = new Boyfriend(770,450,PlayState.SONG.player1);
		switch(PlayState.curStage) {
		case "limo":
			var _g = this.boyfriend;
			_g.set_y(_g.y - 220);
			var _g = this.boyfriend;
			_g.set_x(_g.x + 260);
			this.resetFastCar();
			this.add(this.fastCar);
			break;
		case "mall":
			var _g = this.boyfriend;
			_g.set_x(_g.x + 200);
			break;
		case "mallEvil":
			var _g = this.boyfriend;
			_g.set_x(_g.x + 320);
			var _g = this.dad;
			_g.set_y(_g.y - 80);
			break;
		case "school":
			var _g = this.boyfriend;
			_g.set_x(_g.x + 200);
			var _g = this.boyfriend;
			_g.set_y(_g.y + 220);
			var _g = this.gf;
			_g.set_x(_g.x + 180);
			var _g = this.gf;
			_g.set_y(_g.y + 300);
			break;
		case "schoolEvil":
			var evilTrail = new flixel_addons_effects_FlxTrail(this.dad,null,4,24,0.3,0.069);
			this.add(evilTrail);
			var _g = this.boyfriend;
			_g.set_x(_g.x + 200);
			var _g = this.boyfriend;
			_g.set_y(_g.y + 220);
			var _g = this.gf;
			_g.set_x(_g.x + 180);
			var _g = this.gf;
			_g.set_y(_g.y + 300);
			break;
		case "tank":
			var _g = this.gf;
			_g.set_y(_g.y + 10);
			var _g = this.gf;
			_g.set_x(_g.x - 30);
			var _g = this.boyfriend;
			_g.set_x(_g.x + 40);
			var _g = this.boyfriend;
			_g.set_y(_g.y);
			var _g = this.dad;
			_g.set_y(_g.y + 60);
			var _g = this.dad;
			_g.set_x(_g.x - 80);
			if(gfVersion != "pico-speaker") {
				var _g = this.gf;
				_g.set_x(_g.x - 170);
				var _g = this.gf;
				_g.set_y(_g.y - 75);
			}
			break;
		}
		this.add(this.gf);
		this.gfCutsceneLayer = new flixel_group_FlxTypedGroup();
		this.add(this.gfCutsceneLayer);
		this.bfTankCutsceneLayer = new flixel_group_FlxTypedGroup();
		this.add(this.bfTankCutsceneLayer);
		if(PlayState.curStage == "limo") {
			this.add(this.limo);
		}
		this.add(this.dad);
		this.add(this.boyfriend);
		this.add(this.foregroundSprites);
		var doof = new DialogueBox(false,this.dialogue);
		doof.scrollFactor.set();
		doof.finishThing = $bind(this,this.startCountdown);
		Conductor.songPosition = -5000;
		this.strumLine = new flixel_FlxSprite(0,50).makeGraphic(flixel_FlxG.width,10);
		if(ui_PreferencesMenu.getPref("downscroll")) {
			this.strumLine.set_y(flixel_FlxG.height - 150);
		}
		this.strumLine.scrollFactor.set();
		this.strumLineNotes = new flixel_group_FlxTypedGroup();
		this.add(this.strumLineNotes);
		this.add(this.grpNoteSplashes);
		this.playerStrums = new flixel_group_FlxTypedGroup();
		this.generateSong();
		this.camFollow = new flixel_FlxObject(0,0,1,1);
		this.camFollow.setPosition(this.camPos.x,this.camPos.y);
		if(PlayState.prevCamFollow != null) {
			this.camFollow = PlayState.prevCamFollow;
			PlayState.prevCamFollow = null;
		}
		this.add(this.camFollow);
		flixel_FlxG.camera.follow(this.camFollow,flixel_FlxCameraFollowStyle.LOCKON,0.04);
		flixel_FlxG.camera.set_zoom(this.defaultCamZoom);
		var _this = flixel_FlxG.camera;
		var point = this.camFollow.getPosition();
		_this.scroll.set(point.x - _this.width * 0.5,point.y - _this.height * 0.5);
		if(point._weak) {
			point.put();
		}
		var _this = flixel_FlxG.worldBounds;
		var X = 0;
		var Y = 0;
		var Width = flixel_FlxG.width;
		var Height = flixel_FlxG.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		flixel_FlxG.fixedTimestep = false;
		this.healthBarBG = new flixel_FlxSprite(0,flixel_FlxG.height * 0.9).loadGraphic(Paths.getPath("images/" + "healthBar" + ".png","IMAGE",null));
		this.healthBarBG.screenCenter(flixel_util_FlxAxes.X);
		this.healthBarBG.scrollFactor.set();
		this.add(this.healthBarBG);
		if(ui_PreferencesMenu.getPref("downscroll")) {
			this.healthBarBG.set_y(flixel_FlxG.height * 0.1);
		}
		this.healthBar = new flixel_ui_FlxBar(this.healthBarBG.x + 4,this.healthBarBG.y + 4,flixel_ui_FlxBarFillDirection.RIGHT_TO_LEFT,this.healthBarBG.get_width() - 8 | 0,this.healthBarBG.get_height() - 8 | 0,this,"health",0,2);
		this.healthBar.scrollFactor.set();
		this.healthBar.createFilledBar(-65536,-10027213);
		this.add(this.healthBar);
		this.scoreTxt = new flixel_text_FlxText(this.healthBarBG.x + this.healthBarBG.get_width() - 190,this.healthBarBG.y + 30,0,"",20);
		this.scoreTxt.setFormat("assets/fonts/" + "vcr.ttf",16,-1,"right",flixel_text_FlxTextBorderStyle.OUTLINE,-16777216);
		this.scoreTxt.scrollFactor.set();
		this.add(this.scoreTxt);
		this.iconP1 = new HealthIcon(PlayState.SONG.player1,true);
		this.iconP1.set_y(this.healthBar.y - this.iconP1.get_height() / 2);
		this.add(this.iconP1);
		this.iconP2 = new HealthIcon(PlayState.SONG.player2,false);
		this.iconP2.set_y(this.healthBar.y - this.iconP2.get_height() / 2);
		this.add(this.iconP2);
		this.grpNoteSplashes.set_cameras([this.camHUD]);
		this.strumLineNotes.set_cameras([this.camHUD]);
		this.notes.set_cameras([this.camHUD]);
		this.healthBar.set_cameras([this.camHUD]);
		this.healthBarBG.set_cameras([this.camHUD]);
		this.iconP1.set_cameras([this.camHUD]);
		this.iconP2.set_cameras([this.camHUD]);
		this.scoreTxt.set_cameras([this.camHUD]);
		doof.set_cameras([this.camHUD]);
		this.startingSong = true;
		if(PlayState.isStoryMode && !PlayState.seenCutscene) {
			PlayState.seenCutscene = true;
			switch(this.curSong.toLowerCase()) {
			case "guns":
				this.gunsIntro();
				break;
			case "roses":
				flixel_FlxG.sound.play(Paths.sound("ANGRY"));
				this.schoolIntro(doof);
				break;
			case "senpai":
				this.schoolIntro(doof);
				break;
			case "stress":
				this.stressIntro();
				break;
			case "thorns":
				this.schoolIntro(doof);
				break;
			case "ugh":
				this.ughIntro();
				break;
			case "winter-horrorland":
				var blackScreen = new flixel_FlxSprite(0,0).makeGraphic(flixel_FlxG.width * 2 | 0,flixel_FlxG.height * 2 | 0,-16777216);
				this.add(blackScreen);
				blackScreen.scrollFactor.set();
				this.camHUD.set_visible(false);
				new flixel_util_FlxTimer().start(0.1,function(tmr) {
					_gthis.remove(blackScreen);
					flixel_FlxG.sound.play(Paths.sound("Lights_Turn_On"));
					_gthis.camFollow.set_y(-2050);
					var _g = _gthis.camFollow;
					_g.set_x(_g.x + 200);
					var _this = flixel_FlxG.camera;
					var point = _gthis.camFollow.getPosition();
					_this.scroll.set(point.x - _this.width * 0.5,point.y - _this.height * 0.5);
					if(point._weak) {
						point.put();
					}
					flixel_FlxG.camera.set_zoom(1.5);
					new flixel_util_FlxTimer().start(0.8,function(tmr) {
						_gthis.camHUD.set_visible(true);
						_gthis.remove(blackScreen);
						flixel_tweens_FlxTween.tween(flixel_FlxG.camera,{ zoom : _gthis.defaultCamZoom},2.5,{ ease : flixel_tweens_FlxEase.quadInOut, onComplete : function(twn) {
							_gthis.startCountdown();
						}});
					});
				});
				break;
			default:
				this.startCountdown();
			}
		} else {
			var _g = this.curSong.toLowerCase();
			this.startCountdown();
		}
		MusicBeatState.prototype.create.call(this);
	}
	,ughIntro: function() {
		var _gthis = this;
		this.inCutscene = true;
		var black = new flixel_FlxSprite(-200,-200).makeGraphic(flixel_FlxG.width * 2,flixel_FlxG.height * 2,-16777216);
		black.scrollFactor.set();
		this.add(black);
		new FlxVideo("music/ughCutscene.mp4").finishCallback = function() {
			_gthis.remove(black);
			flixel_tweens_FlxTween.tween(flixel_FlxG.camera,{ zoom : _gthis.defaultCamZoom},Conductor.stepCrochet / 1000 * 5,{ ease : flixel_tweens_FlxEase.quadInOut});
			_gthis.startCountdown();
			_gthis.cameraMovement();
		};
		flixel_FlxG.camera.set_zoom(this.defaultCamZoom * 1.2);
		var _g = this.camFollow;
		_g.set_x(_g.x + 100);
		var _g = this.camFollow;
		_g.set_y(_g.y + 100);
	}
	,gunsIntro: function() {
		var _gthis = this;
		this.inCutscene = true;
		var black = new flixel_FlxSprite(-200,-200).makeGraphic(flixel_FlxG.width * 2,flixel_FlxG.height * 2,-16777216);
		black.scrollFactor.set();
		this.add(black);
		new FlxVideo("music/gunsCutscene.mp4").finishCallback = function() {
			_gthis.remove(black);
			flixel_tweens_FlxTween.tween(flixel_FlxG.camera,{ zoom : _gthis.defaultCamZoom},Conductor.stepCrochet / 1000 * 5,{ ease : flixel_tweens_FlxEase.quadInOut});
			_gthis.startCountdown();
			_gthis.cameraMovement();
		};
	}
	,stressIntro: function() {
		var _gthis = this;
		this.inCutscene = true;
		var black = new flixel_FlxSprite(-200,-200).makeGraphic(flixel_FlxG.width * 2,flixel_FlxG.height * 2,-16777216);
		black.scrollFactor.set();
		this.add(black);
		new FlxVideo("music/stressCutscene.mp4").finishCallback = function() {
			_gthis.remove(black);
			flixel_tweens_FlxTween.tween(flixel_FlxG.camera,{ zoom : _gthis.defaultCamZoom},Conductor.stepCrochet / 1000 * 5,{ ease : flixel_tweens_FlxEase.quadInOut});
			_gthis.startCountdown();
			_gthis.cameraMovement();
		};
	}
	,initDiscord: function() {
	}
	,schoolIntro: function(dialogueBox) {
		var _gthis = this;
		var black = new flixel_FlxSprite(-100,-100).makeGraphic(flixel_FlxG.width * 2,flixel_FlxG.height * 2,-16777216);
		black.scrollFactor.set();
		this.add(black);
		var red = new flixel_FlxSprite(-100,-100).makeGraphic(flixel_FlxG.width * 2,flixel_FlxG.height * 2,-58575);
		red.scrollFactor.set();
		var senpaiEvil = new flixel_FlxSprite();
		var library = null;
		senpaiEvil.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/senpaiCrazy" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/senpaiCrazy" + ".xml","TEXT",library)));
		senpaiEvil.animation.addByPrefix("idle","Senpai Pre Explosion",24,false);
		senpaiEvil.setGraphicSize(senpaiEvil.get_width() * PlayState.daPixelZoom | 0);
		senpaiEvil.scrollFactor.set();
		senpaiEvil.updateHitbox();
		senpaiEvil.screenCenter();
		var _g = senpaiEvil;
		_g.set_x(_g.x + senpaiEvil.get_width() / 5);
		this.camFollow.setPosition(this.camPos.x,this.camPos.y);
		if(PlayState.SONG.song.toLowerCase() == "roses" || PlayState.SONG.song.toLowerCase() == "thorns") {
			this.remove(black);
			if(PlayState.SONG.song.toLowerCase() == "thorns") {
				this.add(red);
				this.camHUD.set_visible(false);
			}
		}
		new flixel_util_FlxTimer().start(0.3,function(tmr) {
			var _g = black;
			_g.set_alpha(_g.alpha - 0.15);
			if(black.alpha > 0) {
				tmr.reset(0.3);
			} else {
				if(dialogueBox != null) {
					_gthis.inCutscene = true;
					if(PlayState.SONG.song.toLowerCase() == "thorns") {
						_gthis.add(senpaiEvil);
						senpaiEvil.set_alpha(0);
						new flixel_util_FlxTimer().start(0.3,function(swagTimer) {
							var _g = senpaiEvil;
							_g.set_alpha(_g.alpha + 0.15);
							if(senpaiEvil.alpha < 1) {
								swagTimer.reset();
							} else {
								senpaiEvil.animation.play("idle");
								flixel_FlxG.sound.play(Paths.sound("Senpai_Dies"),1,false,null,true,function() {
									_gthis.remove(senpaiEvil);
									_gthis.remove(red);
									flixel_FlxG.camera.fade(-1,0.01,true,function() {
										_gthis.add(dialogueBox);
										_gthis.camHUD.set_visible(true);
									},true);
								});
								new flixel_util_FlxTimer().start(3.2,function(deadTime) {
									flixel_FlxG.camera.fade(-1,1.6,false);
								});
							}
						});
					} else {
						_gthis.add(dialogueBox);
					}
				} else {
					_gthis.startCountdown();
				}
				_gthis.remove(black);
			}
		});
	}
	,startTimer: null
	,perfectMode: null
	,startCountdown: function() {
		var _gthis = this;
		this.inCutscene = false;
		this.camHUD.set_visible(true);
		this.generateStaticArrows(0);
		this.generateStaticArrows(1);
		this.talking = false;
		this.startedCountdown = true;
		Conductor.songPosition = 0;
		Conductor.songPosition -= Conductor.crochet * 5;
		var swagCounter = 0;
		this.startTimer.start(Conductor.crochet / 1000,function(tmr) {
			if(swagCounter % _gthis.gfSpeed == 0) {
				_gthis.gf.dance();
			}
			if(swagCounter % 2 == 0) {
				if(!StringTools.startsWith(_gthis.boyfriend.animation._curAnim.name,"sing")) {
					_gthis.boyfriend.playAnim("idle");
				}
				if(!StringTools.startsWith(_gthis.dad.animation._curAnim.name,"sing")) {
					_gthis.dad.dance();
				}
			} else if(_gthis.dad.curCharacter == "spooky" && !StringTools.startsWith(_gthis.dad.animation._curAnim.name,"sing")) {
				_gthis.dad.dance();
			}
			if(_gthis.generatedMusic) {
				_gthis.notes.members.sort(function(Obj1,Obj2) {
					return _gthis.sortNotes(1,Obj1,Obj2);
				});
			}
			var introAssets_h = Object.create(null);
			introAssets_h["default"] = ["ready","set","go"];
			introAssets_h["school"] = ["weeb/pixelUI/ready-pixel","weeb/pixelUI/set-pixel","weeb/pixelUI/date-pixel"];
			introAssets_h["schoolEvil"] = ["weeb/pixelUI/ready-pixel","weeb/pixelUI/set-pixel","weeb/pixelUI/date-pixel"];
			var introAlts = introAssets_h["default"];
			var altSuffix = "";
			var value = haxe_ds_StringMap.keysIterator(introAssets_h);
			while(value.hasNext()) {
				var value1 = value.next();
				if(value1 == PlayState.curStage) {
					introAlts = introAssets_h[value1];
					altSuffix = "-pixel";
				}
			}
			switch(swagCounter) {
			case 0:
				flixel_FlxG.sound.play(Paths.sound("intro3" + altSuffix),0.6);
				break;
			case 1:
				var ready = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + introAlts[0] + ".png","IMAGE",null));
				ready.scrollFactor.set();
				ready.updateHitbox();
				if(StringTools.startsWith(PlayState.curStage,"school")) {
					ready.setGraphicSize(ready.get_width() * PlayState.daPixelZoom | 0);
				}
				ready.screenCenter();
				_gthis.add(ready);
				var _g = ready;
				flixel_tweens_FlxTween.tween(ready,{ y : _g.set_y(_g.y + 100), alpha : 0},Conductor.crochet / 1000,{ ease : flixel_tweens_FlxEase.cubeInOut, onComplete : function(twn) {
					ready.destroy();
				}});
				flixel_FlxG.sound.play(Paths.sound("intro2" + altSuffix),0.6);
				break;
			case 2:
				var set = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + introAlts[1] + ".png","IMAGE",null));
				set.scrollFactor.set();
				if(StringTools.startsWith(PlayState.curStage,"school")) {
					set.setGraphicSize(set.get_width() * PlayState.daPixelZoom | 0);
				}
				set.screenCenter();
				_gthis.add(set);
				var _g = set;
				flixel_tweens_FlxTween.tween(set,{ y : _g.set_y(_g.y + 100), alpha : 0},Conductor.crochet / 1000,{ ease : flixel_tweens_FlxEase.cubeInOut, onComplete : function(twn) {
					set.destroy();
				}});
				flixel_FlxG.sound.play(Paths.sound("intro1" + altSuffix),0.6);
				break;
			case 3:
				var go = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + introAlts[2] + ".png","IMAGE",null));
				go.scrollFactor.set();
				if(StringTools.startsWith(PlayState.curStage,"school")) {
					go.setGraphicSize(go.get_width() * PlayState.daPixelZoom | 0);
				}
				go.updateHitbox();
				go.screenCenter();
				_gthis.add(go);
				var _g = go;
				flixel_tweens_FlxTween.tween(go,{ y : _g.set_y(_g.y + 100), alpha : 0},Conductor.crochet / 1000,{ ease : flixel_tweens_FlxEase.cubeInOut, onComplete : function(twn) {
					go.destroy();
				}});
				flixel_FlxG.sound.play(Paths.sound("introGo" + altSuffix),0.6);
				break;
			case 4:
				break;
			}
			swagCounter += 1;
		},4);
	}
	,previousFrameTime: null
	,lastReportedPlayheadPosition: null
	,songTime: null
	,startSong: function() {
		this.startingSong = false;
		this.previousFrameTime = flixel_FlxG.game.ticks;
		this.lastReportedPlayheadPosition = 0;
		if(!this.paused) {
			flixel_FlxG.sound.playMusic("songs:assets/songs/" + PlayState.SONG.song.toLowerCase() + "/Inst." + "mp3",1,false);
		}
		flixel_FlxG.sound.music.onComplete = $bind(this,this.endSong);
		this.vocals.play();
	}
	,debugNum: null
	,generateSong: function() {
		var _gthis = this;
		var songData = PlayState.SONG;
		Conductor.changeBPM(songData.bpm);
		this.curSong = songData.song;
		if(PlayState.SONG.needsVoices) {
			var tmp = "songs:assets/songs/" + PlayState.SONG.song.toLowerCase() + "/Voices." + "mp3";
			this.vocals = new flixel_system_FlxSound().loadEmbedded(tmp);
		} else {
			this.vocals = new flixel_system_FlxSound();
		}
		this.vocals.onComplete = function() {
			_gthis.vocalsFinished = true;
		};
		flixel_FlxG.sound.list.add(this.vocals);
		this.notes = new flixel_group_FlxTypedGroup();
		this.add(this.notes);
		var noteData = songData.notes;
		var playerCounter = 0;
		var daBeats = 0;
		var _g = 0;
		while(_g < noteData.length) {
			var section = noteData[_g];
			++_g;
			var coolSection = section.lengthInSteps / 4 | 0;
			var _g1 = 0;
			var _g2 = section.sectionNotes;
			while(_g1 < _g2.length) {
				var songNotes = _g2[_g1];
				++_g1;
				var daStrumTime = songNotes[0];
				var daNoteData = songNotes[1] % 4 | 0;
				var gottaHitNote = section.mustHitSection;
				if(songNotes[1] > 3) {
					gottaHitNote = !section.mustHitSection;
				}
				var oldNote;
				if(this.unspawnNotes.length > 0) {
					oldNote = this.unspawnNotes[this.unspawnNotes.length - 1 | 0];
				} else {
					oldNote = null;
				}
				var swagNote = new Note(daStrumTime,daNoteData,oldNote);
				swagNote.sustainLength = songNotes[2];
				swagNote.altNote = songNotes[3];
				swagNote.scrollFactor.set(0,0);
				var susLength = swagNote.sustainLength;
				susLength /= Conductor.stepCrochet;
				this.unspawnNotes.push(swagNote);
				var _g3 = 0;
				var _g4 = Math.floor(susLength);
				while(_g3 < _g4) {
					var susNote = _g3++;
					oldNote = this.unspawnNotes[this.unspawnNotes.length - 1 | 0];
					var sustainNote = new Note(daStrumTime + Conductor.stepCrochet * susNote + Conductor.stepCrochet,daNoteData,oldNote,true);
					sustainNote.scrollFactor.set();
					this.unspawnNotes.push(sustainNote);
					sustainNote.mustPress = gottaHitNote;
					if(sustainNote.mustPress) {
						var _g5 = sustainNote;
						_g5.set_x(_g5.x + flixel_FlxG.width / 2);
					}
				}
				swagNote.mustPress = gottaHitNote;
				if(swagNote.mustPress) {
					var _g6 = swagNote;
					_g6.set_x(_g6.x + flixel_FlxG.width / 2);
				}
			}
			++daBeats;
		}
		this.unspawnNotes.sort($bind(this,this.sortByShit));
		this.generatedMusic = true;
	}
	,sortByShit: function(Obj1,Obj2) {
		return this.sortNotes(-1,Obj1,Obj2);
	}
	,sortNotes: function(Sort,Obj1,Obj2) {
		if(Sort == null) {
			Sort = -1;
		}
		if(Obj1.strumTime < Obj2.strumTime) {
			return Sort;
		} else if(Obj1.strumTime > Obj2.strumTime) {
			return -Sort;
		} else {
			return 0;
		}
	}
	,generateStaticArrows: function(player) {
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var babyArrow = new flixel_FlxSprite(0,this.strumLine.y);
			var colorSwap = new shaderslmfao_ColorSwap();
			babyArrow.shader = colorSwap.shader;
			colorSwap.update(Note.arrowColors[i]);
			switch(PlayState.curStage) {
			case "school":case "schoolEvil":
				babyArrow.loadGraphic(Paths.getPath("images/" + "weeb/pixelUI/arrows-pixels" + ".png","IMAGE",null),true,17,17);
				babyArrow.animation.add("green",[6]);
				babyArrow.animation.add("red",[7]);
				babyArrow.animation.add("blue",[5]);
				babyArrow.animation.add("purplel",[4]);
				babyArrow.setGraphicSize(babyArrow.get_width() * PlayState.daPixelZoom | 0);
				babyArrow.updateHitbox();
				babyArrow.set_antialiasing(false);
				switch(Math.abs(i)) {
				case 0:
					var _g1 = babyArrow;
					_g1.set_x(_g1.x + Note.swagWidth * 0);
					babyArrow.animation.add("static",[0]);
					babyArrow.animation.add("pressed",[4,8],12,false);
					babyArrow.animation.add("confirm",[12,16],24,false);
					break;
				case 1:
					var _g2 = babyArrow;
					_g2.set_x(_g2.x + Note.swagWidth);
					babyArrow.animation.add("static",[1]);
					babyArrow.animation.add("pressed",[5,9],12,false);
					babyArrow.animation.add("confirm",[13,17],24,false);
					break;
				case 2:
					var _g3 = babyArrow;
					_g3.set_x(_g3.x + Note.swagWidth * 2);
					babyArrow.animation.add("static",[2]);
					babyArrow.animation.add("pressed",[6,10],12,false);
					babyArrow.animation.add("confirm",[14,18],12,false);
					break;
				case 3:
					var _g4 = babyArrow;
					_g4.set_x(_g4.x + Note.swagWidth * 3);
					babyArrow.animation.add("static",[3]);
					babyArrow.animation.add("pressed",[7,11],12,false);
					babyArrow.animation.add("confirm",[15,19],24,false);
					break;
				}
				break;
			default:
				var library = null;
				babyArrow.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "NOTE_assets" + ".png","IMAGE",library),Paths.getPath("images/" + "NOTE_assets" + ".xml","TEXT",library)));
				babyArrow.animation.addByPrefix("green","arrowUP");
				babyArrow.animation.addByPrefix("blue","arrowDOWN");
				babyArrow.animation.addByPrefix("purple","arrowLEFT");
				babyArrow.animation.addByPrefix("red","arrowRIGHT");
				babyArrow.set_antialiasing(true);
				babyArrow.setGraphicSize(babyArrow.get_width() * 0.7 | 0);
				switch(Math.abs(i)) {
				case 0:
					var _g5 = babyArrow;
					_g5.set_x(_g5.x + Note.swagWidth * 0);
					babyArrow.animation.addByPrefix("static","arrow static instance 1");
					babyArrow.animation.addByPrefix("pressed","left press",24,false);
					babyArrow.animation.addByPrefix("confirm","left confirm",24,false);
					break;
				case 1:
					var _g6 = babyArrow;
					_g6.set_x(_g6.x + Note.swagWidth);
					babyArrow.animation.addByPrefix("static","arrow static instance 2");
					babyArrow.animation.addByPrefix("pressed","down press",24,false);
					babyArrow.animation.addByPrefix("confirm","down confirm",24,false);
					break;
				case 2:
					var _g7 = babyArrow;
					_g7.set_x(_g7.x + Note.swagWidth * 2);
					babyArrow.animation.addByPrefix("static","arrow static instance 4");
					babyArrow.animation.addByPrefix("pressed","up press",24,false);
					babyArrow.animation.addByPrefix("confirm","up confirm",24,false);
					break;
				case 3:
					var _g8 = babyArrow;
					_g8.set_x(_g8.x + Note.swagWidth * 3);
					babyArrow.animation.addByPrefix("static","arrow static instance 3");
					babyArrow.animation.addByPrefix("pressed","right press",24,false);
					babyArrow.animation.addByPrefix("confirm","right confirm",24,false);
					break;
				}
			}
			babyArrow.updateHitbox();
			babyArrow.scrollFactor.set();
			if(!PlayState.isStoryMode) {
				var _g9 = babyArrow;
				_g9.set_y(_g9.y - 10);
				babyArrow.set_alpha(0);
				flixel_tweens_FlxTween.tween(babyArrow,{ y : babyArrow.y + 10, alpha : 1},1,{ ease : flixel_tweens_FlxEase.circOut, startDelay : 0.5 + 0.2 * i});
			}
			babyArrow.ID = i;
			if(player == 1) {
				this.playerStrums.add(babyArrow);
			}
			babyArrow.animation.play("static");
			var _g10 = babyArrow;
			_g10.set_x(_g10.x + 50);
			var _g11 = babyArrow;
			_g11.set_x(_g11.x + flixel_FlxG.width / 2 * player);
			this.strumLineNotes.add(babyArrow);
		}
	}
	,tweenCamIn: function() {
		flixel_tweens_FlxTween.tween(flixel_FlxG.camera,{ zoom : 1.3},Conductor.stepCrochet * 4 / 1000,{ ease : flixel_tweens_FlxEase.elasticInOut});
	}
	,openSubState: function(SubState) {
		if(this.paused) {
			if(flixel_FlxG.sound.music != null) {
				flixel_FlxG.sound.music.pause();
				this.vocals.pause();
			}
			if(!this.startTimer.finished) {
				this.startTimer.active = false;
			}
		}
		MusicBeatState.prototype.openSubState.call(this,SubState);
	}
	,closeSubState: function() {
		if(this.paused) {
			if(flixel_FlxG.sound.music != null && !this.startingSong) {
				this.resyncVocals();
			}
			if(!this.startTimer.finished) {
				this.startTimer.active = true;
			}
			this.paused = false;
		}
		MusicBeatState.prototype.closeSubState.call(this);
	}
	,resyncVocals: function() {
		if(!this._exiting) {
			this.vocals.pause();
			flixel_FlxG.sound.music.play();
			Conductor.songPosition = flixel_FlxG.sound.music._time + Conductor.offset;
			if(!this.vocalsFinished) {
				this.vocals.set_time(Conductor.songPosition);
				this.vocals.play();
			}
		}
	}
	,paused: null
	,startedCountdown: null
	,canPause: null
	,cameraRightSide: null
	,update: function(elapsed) {
		var _gthis = this;
		flixel_FlxG.camera.set_followLerp(CoolUtil.camLerpShit(0.04));
		this.perfectMode = false;
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(57,_this.status)) {
			this.iconP1.swapOldIcon();
		}
		if(this.startingSong) {
			if(this.startedCountdown) {
				Conductor.songPosition += flixel_FlxG.elapsed * 1000;
				if(Conductor.songPosition >= 0) {
					this.startSong();
				}
			}
		} else {
			Conductor.songPosition = flixel_FlxG.sound.music._time + Conductor.offset;
			if(!this.paused) {
				this.songTime += flixel_FlxG.game.ticks - this.previousFrameTime;
				this.previousFrameTime = flixel_FlxG.game.ticks;
				if(Conductor.lastSongPos != Conductor.songPosition) {
					this.songTime = (this.songTime + Conductor.songPosition) / 2;
					Conductor.lastSongPos = Conductor.songPosition;
				}
			}
		}
		switch(PlayState.curStage) {
		case "philly":
			if(this.trainMoving) {
				this.trainFrameTiming += elapsed;
				if(this.trainFrameTiming >= 0.041666666666666664) {
					this.updateTrainPos();
					this.trainFrameTiming = 0;
				}
			}
			this.lightFadeShader.update(1.5 * (Conductor.crochet / 1000) * flixel_FlxG.elapsed);
			break;
		case "tank":
			this.moveTank();
			break;
		}
		MusicBeatState.prototype.update.call(this,elapsed);
		this.scoreTxt.set_text("Score:" + this.songScore);
		if(PlayerSettings.player1.controls._pause.check() && this.startedCountdown && this.canPause) {
			this.persistentUpdate = false;
			this.persistentDraw = true;
			this.paused = true;
			var Chance = 0.1;
			if(Chance == null) {
				Chance = 50;
			}
			if(flixel_FlxG.random.float(0,100) < Chance) {
				var nextState = new GitarooPause();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			} else {
				var screenPos = this.boyfriend.getScreenPosition();
				var pauseMenu = new PauseSubState(screenPos.x,screenPos.y);
				this.openSubState(pauseMenu);
				pauseMenu.set_camera(this.camHUD);
			}
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(55,_this.status)) {
			var nextState = new ChartingState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
		this.iconP1.setGraphicSize(150 + 0.85 * (this.iconP1.get_width() - 150) | 0);
		this.iconP2.setGraphicSize(150 + 0.85 * (this.iconP2.get_width() - 150) | 0);
		this.iconP1.updateHitbox();
		this.iconP2.updateHitbox();
		var iconOffset = 26;
		this.iconP1.set_x(this.healthBar.x + (this.healthBar.get_width() * (flixel_math_FlxMath.remapToRange(this.healthBar.get_percent(),0,100,100,0) * 0.01) - iconOffset));
		this.iconP2.set_x(this.healthBar.x + this.healthBar.get_width() * (flixel_math_FlxMath.remapToRange(this.healthBar.get_percent(),0,100,100,0) * 0.01) - (this.iconP2.get_width() - iconOffset));
		if(this.health > 2) {
			this.health = 2;
		}
		if(this.healthBar.get_percent() < 20) {
			this.iconP1.animation._curAnim.set_curFrame(1);
		} else {
			this.iconP1.animation._curAnim.set_curFrame(0);
		}
		if(this.healthBar.get_percent() > 80) {
			this.iconP2.animation._curAnim.set_curFrame(1);
		} else {
			this.iconP2.animation._curAnim.set_curFrame(0);
		}
		if(this.generatedMusic && PlayState.SONG.notes[this.curStep / 16 | 0] != null) {
			var tmp = this.curBeat % 4 == 0;
			this.cameraRightSide = PlayState.SONG.notes[this.curStep / 16 | 0].mustHitSection;
			this.cameraMovement();
		}
		if(this.camZooming) {
			var a = this.defaultCamZoom;
			flixel_FlxG.camera.set_zoom(a + 0.95 * (flixel_FlxG.camera.zoom - a));
			this.camHUD.set_zoom(1 + 0.95 * (this.camHUD.zoom - 1));
		}
		if(this.curSong == "Fresh") {
			switch(this.curBeat) {
			case 16:
				this.camZooming = true;
				this.gfSpeed = 2;
				break;
			case 48:
				this.gfSpeed = 1;
				break;
			case 80:
				this.gfSpeed = 2;
				break;
			case 112:
				this.gfSpeed = 1;
				break;
			}
		}
		if(this.curSong == "Bopeebo") {
			switch(this.curBeat) {
			case 128:case 129:case 130:
				this.vocals.set_volume(0);
				break;
			}
		}
		if(!this.inCutscene && !this._exiting) {
			if(PlayerSettings.player1.controls._reset.check()) {
				this.health = 0;
				haxe_Log.trace("RESET = True",{ fileName : "source/PlayState.hx", lineNumber : 1785, className : "PlayState", methodName : "update"});
			}
			if(this.health <= 0 && !PlayState.practiceMode) {
				this.boyfriend.stunned = true;
				this.persistentUpdate = false;
				this.persistentDraw = false;
				this.paused = true;
				var _this = this.vocals;
				_this.cleanup(_this.autoDestroy,true);
				var _this = flixel_FlxG.sound.music;
				_this.cleanup(_this.autoDestroy,true);
				PlayState.deathCounter += 1;
				this.openSubState(new GameOverSubstate(this.boyfriend.getScreenPosition().x,this.boyfriend.getScreenPosition().y));
			}
		}
		while(this.unspawnNotes[0] != null) if(this.unspawnNotes[0].strumTime - Conductor.songPosition < 1800 / PlayState.SONG.speed) {
			var dunceNote = this.unspawnNotes[0];
			this.notes.add(dunceNote);
			var index = this.unspawnNotes.indexOf(dunceNote);
			this.unspawnNotes.shift();
		} else {
			break;
		}
		if(this.generatedMusic) {
			this.notes.forEachAlive(function(daNote) {
				if(daNote.y > flixel_FlxG.height) {
					daNote.set_active(false);
					daNote.set_visible(false);
				} else {
					daNote.set_visible(true);
					daNote.set_active(true);
				}
				var center = _gthis.strumLine.y + Note.swagWidth / 2;
				if(ui_PreferencesMenu.getPref("downscroll")) {
					daNote.set_y(_gthis.strumLine.y + 0.45 * (Conductor.songPosition - daNote.strumTime) * flixel_math_FlxMath.roundDecimal(PlayState.SONG.speed,2));
					if(daNote.isSustainNote) {
						if(StringTools.endsWith(daNote.animation._curAnim.name,"end") && daNote.prevNote != null) {
							var _g = daNote;
							_g.set_y(_g.y + daNote.prevNote.get_height());
						} else {
							var _g = daNote;
							_g.set_y(_g.y + daNote.get_height() / 2);
						}
						if(daNote.y - daNote.offset.y * daNote.scale.y + daNote.get_height() >= center && (!daNote.mustPress || (daNote.wasGoodHit || daNote.prevNote.wasGoodHit && !daNote.canBeHit))) {
							var swagRect = new flixel_math_FlxRect(0,0,daNote.frameWidth,daNote.frameHeight);
							swagRect.height = (center - daNote.y) / daNote.scale.y;
							swagRect.y = daNote.frameHeight - swagRect.height;
							daNote.set_clipRect(swagRect);
						}
					}
				} else {
					daNote.set_y(_gthis.strumLine.y - 0.45 * (Conductor.songPosition - daNote.strumTime) * flixel_math_FlxMath.roundDecimal(PlayState.SONG.speed,2));
					if(daNote.isSustainNote && daNote.y + daNote.offset.y * daNote.scale.y <= center && (!daNote.mustPress || (daNote.wasGoodHit || daNote.prevNote.wasGoodHit && !daNote.canBeHit))) {
						var swagRect = new flixel_math_FlxRect(0,0,daNote.get_width() / daNote.scale.x,daNote.get_height() / daNote.scale.y);
						swagRect.y = (center - daNote.y) / daNote.scale.y;
						swagRect.height -= swagRect.y;
						daNote.set_clipRect(swagRect);
					}
				}
				if(!daNote.mustPress && daNote.wasGoodHit) {
					if(PlayState.SONG.song != "Tutorial") {
						_gthis.camZooming = true;
					}
					var altAnim = "";
					if(PlayState.SONG.notes[Math.floor(_gthis.curStep / 16)] != null) {
						if(PlayState.SONG.notes[Math.floor(_gthis.curStep / 16)].altAnim) {
							altAnim = "-alt";
						}
					}
					if(daNote.altNote) {
						altAnim = "-alt";
					}
					switch(Math.abs(daNote.noteData)) {
					case 0:
						_gthis.dad.playAnim("singLEFT" + altAnim,true);
						break;
					case 1:
						_gthis.dad.playAnim("singDOWN" + altAnim,true);
						break;
					case 2:
						_gthis.dad.playAnim("singUP" + altAnim,true);
						break;
					case 3:
						_gthis.dad.playAnim("singRIGHT" + altAnim,true);
						break;
					}
					_gthis.dad.holdTimer = 0;
					if(PlayState.SONG.needsVoices) {
						_gthis.vocals.set_volume(1);
					}
					daNote.kill();
					_gthis.notes.remove(daNote,true);
					daNote.destroy();
				}
				var doKill = daNote.y < -daNote.get_height();
				if(ui_PreferencesMenu.getPref("downscroll")) {
					doKill = daNote.y > flixel_FlxG.height;
				}
				if(doKill) {
					if(daNote.tooLate || !daNote.wasGoodHit) {
						_gthis.health -= 0.0475;
						_gthis.vocals.set_volume(0);
					}
					daNote.set_active(false);
					daNote.set_visible(false);
					daNote.kill();
					_gthis.notes.remove(daNote,true);
					daNote.destroy();
				}
			});
		}
		if(!this.inCutscene) {
			this.keyShit();
		}
	}
	,endSong: function() {
		PlayState.seenCutscene = false;
		PlayState.deathCounter = 0;
		this.canPause = false;
		flixel_FlxG.sound.music.set_volume(0);
		this.vocals.set_volume(0);
		if(PlayState.SONG.validScore) {
			Highscore.saveScore(PlayState.SONG.song,this.songScore,PlayState.storyDifficulty);
		}
		if(PlayState.isStoryMode) {
			PlayState.campaignScore += this.songScore;
			HxOverrides.remove(PlayState.storyPlaylist,PlayState.storyPlaylist[0]);
			if(PlayState.storyPlaylist.length <= 0) {
				flixel_FlxG.sound.playMusic(Paths.getPath("music/" + "freakyMenu" + "." + "mp3","MUSIC",null));
				this.transIn = flixel_addons_transition_FlxTransitionableState.defaultTransIn;
				this.transOut = flixel_addons_transition_FlxTransitionableState.defaultTransOut;
				if(PlayState.storyWeek == 7) {
					var nextState = new VideoState();
					if(flixel_FlxG.game._state.switchTo(nextState)) {
						flixel_FlxG.game._requestedState = nextState;
					}
				} else {
					var nextState = new StoryMenuState();
					if(flixel_FlxG.game._state.switchTo(nextState)) {
						flixel_FlxG.game._requestedState = nextState;
					}
				}
				StoryMenuState.weekUnlocked[Math.min(PlayState.storyWeek + 1,StoryMenuState.weekUnlocked.length - 1) | 0] = true;
				if(PlayState.SONG.validScore) {
					Highscore.saveWeekScore(PlayState.storyWeek,PlayState.campaignScore,PlayState.storyDifficulty);
				}
				flixel_FlxG.save.data.weekUnlocked = StoryMenuState.weekUnlocked;
				flixel_FlxG.save.flush();
			} else {
				var difficulty = "";
				if(PlayState.storyDifficulty == 0) {
					difficulty = "-easy";
				}
				if(PlayState.storyDifficulty == 2) {
					difficulty = "-hard";
				}
				haxe_Log.trace("LOADING NEXT SONG",{ fileName : "source/PlayState.hx", lineNumber : 2015, className : "PlayState", methodName : "endSong"});
				haxe_Log.trace(PlayState.storyPlaylist[0].toLowerCase() + difficulty,{ fileName : "source/PlayState.hx", lineNumber : 2016, className : "PlayState", methodName : "endSong"});
				flixel_addons_transition_FlxTransitionableState.skipNextTransIn = true;
				flixel_addons_transition_FlxTransitionableState.skipNextTransOut = true;
				var _this = flixel_FlxG.sound.music;
				_this.cleanup(_this.autoDestroy,true);
				var _this = this.vocals;
				_this.cleanup(_this.autoDestroy,true);
				if(PlayState.SONG.song.toLowerCase() == "eggnog") {
					var blackShit = new flixel_FlxSprite(-flixel_FlxG.width * flixel_FlxG.camera.zoom,-flixel_FlxG.height * flixel_FlxG.camera.zoom).makeGraphic(flixel_FlxG.width * 3,flixel_FlxG.height * 3,-16777216);
					blackShit.scrollFactor.set();
					this.add(blackShit);
					this.camHUD.set_visible(false);
					flixel_FlxG.sound.play(Paths.sound("Lights_Shut_off"),1,false,null,true,function() {
						PlayState.SONG = Song.loadFromJson(PlayState.storyPlaylist[0].toLowerCase() + difficulty,PlayState.storyPlaylist[0]);
						var nextState = LoadingState.getNextState(new PlayState(),false);
						if(flixel_FlxG.game._state.switchTo(nextState)) {
							flixel_FlxG.game._requestedState = nextState;
						}
					});
				} else {
					PlayState.prevCamFollow = this.camFollow;
					PlayState.SONG = Song.loadFromJson(PlayState.storyPlaylist[0].toLowerCase() + difficulty,PlayState.storyPlaylist[0]);
					var nextState = LoadingState.getNextState(new PlayState(),false);
					if(flixel_FlxG.game._state.switchTo(nextState)) {
						flixel_FlxG.game._requestedState = nextState;
					}
				}
			}
		} else {
			haxe_Log.trace("WENT BACK TO FREEPLAY??",{ fileName : "source/PlayState.hx", lineNumber : 2050, className : "PlayState", methodName : "endSong"});
			var nextState = new FreeplayState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
	}
	,endingSong: null
	,popUpScore: function(strumtime,daNote) {
		var noteDiff = Math.abs(strumtime - Conductor.songPosition);
		this.vocals.set_volume(1);
		var placement = Std.string(this.combo);
		var coolText = new flixel_text_FlxText(0,0,0,placement,32);
		coolText.screenCenter();
		coolText.set_x(flixel_FlxG.width * 0.55);
		var rating = new flixel_FlxSprite();
		var score = 350;
		var daRating = "sick";
		var doSplash = true;
		if(noteDiff > Conductor.safeZoneOffset * 0.9) {
			daRating = "shit";
			score = 50;
			doSplash = false;
		} else if(noteDiff > Conductor.safeZoneOffset * 0.75) {
			daRating = "bad";
			score = 100;
			doSplash = false;
		} else if(noteDiff > Conductor.safeZoneOffset * 0.2) {
			daRating = "good";
			score = 200;
			doSplash = false;
		}
		if(doSplash) {
			var splash = this.grpNoteSplashes.recycle(NoteSplash);
			splash.setupNoteSplash(daNote.x,daNote.y,daNote.noteData);
			this.grpNoteSplashes.add(splash);
		}
		if(!PlayState.practiceMode) {
			this.songScore += score;
		}
		var pixelShitPart1 = "";
		var pixelShitPart2 = "";
		if(StringTools.startsWith(PlayState.curStage,"school")) {
			pixelShitPart1 = "weeb/pixelUI/";
			pixelShitPart2 = "-pixel";
		}
		rating.loadGraphic(Paths.getPath("images/" + (pixelShitPart1 + daRating + pixelShitPart2) + ".png","IMAGE",null));
		rating.screenCenter();
		rating.set_x(coolText.x - 40);
		var _g = rating;
		_g.set_y(_g.y - 60);
		rating.acceleration.set_y(550);
		var _g = rating.velocity;
		_g.set_y(_g.y - flixel_FlxG.random.int(140,175));
		var _g = rating.velocity;
		_g.set_x(_g.x - flixel_FlxG.random.int(0,10));
		var comboSpr = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + (pixelShitPart1 + "combo" + pixelShitPart2) + ".png","IMAGE",null));
		comboSpr.screenCenter();
		comboSpr.set_x(coolText.x);
		comboSpr.acceleration.set_y(600);
		var _g = comboSpr.velocity;
		_g.set_y(_g.y - 150);
		var _g = comboSpr.velocity;
		_g.set_x(_g.x + flixel_FlxG.random.int(1,10));
		this.add(rating);
		if(!StringTools.startsWith(PlayState.curStage,"school")) {
			rating.setGraphicSize(rating.get_width() * 0.7 | 0);
			rating.set_antialiasing(true);
			comboSpr.setGraphicSize(comboSpr.get_width() * 0.7 | 0);
			comboSpr.set_antialiasing(true);
		} else {
			rating.setGraphicSize(rating.get_width() * PlayState.daPixelZoom * 0.7 | 0);
			comboSpr.setGraphicSize(comboSpr.get_width() * PlayState.daPixelZoom * 0.7 | 0);
		}
		comboSpr.updateHitbox();
		rating.updateHitbox();
		var seperatedScore = [];
		seperatedScore.push(Math.floor(this.combo / 100));
		seperatedScore.push(Math.floor((this.combo - seperatedScore[0] * 100) / 10));
		seperatedScore.push(this.combo % 10);
		var daLoop = 0;
		var _g = 0;
		while(_g < seperatedScore.length) {
			var i = seperatedScore[_g];
			++_g;
			var numScore = [new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + (pixelShitPart1 + "num" + (i | 0) + pixelShitPart2) + ".png","IMAGE",null))];
			numScore[0].screenCenter();
			numScore[0].set_x(coolText.x + 43 * daLoop - 90);
			var _g1 = numScore[0];
			_g1.set_y(_g1.y + 80);
			if(!StringTools.startsWith(PlayState.curStage,"school")) {
				numScore[0].set_antialiasing(true);
				numScore[0].setGraphicSize(numScore[0].get_width() * 0.5 | 0);
			} else {
				numScore[0].setGraphicSize(numScore[0].get_width() * PlayState.daPixelZoom | 0);
			}
			numScore[0].updateHitbox();
			numScore[0].acceleration.set_y(flixel_FlxG.random.int(200,300));
			var _g2 = numScore[0].velocity;
			_g2.set_y(_g2.y - flixel_FlxG.random.int(140,160));
			numScore[0].velocity.set_x(flixel_FlxG.random.float(-5,5));
			if(this.combo >= 10 || this.combo == 0) {
				this.add(numScore[0]);
			}
			flixel_tweens_FlxTween.tween(numScore[0],{ alpha : 0},0.2,{ onComplete : (function(numScore) {
				return function(tween) {
					numScore[0].destroy();
				};
			})(numScore), startDelay : Conductor.crochet * 0.002});
			++daLoop;
		}
		coolText.set_text(Std.string(seperatedScore));
		flixel_tweens_FlxTween.tween(rating,{ alpha : 0},0.2,{ startDelay : Conductor.crochet * 0.001});
		flixel_tweens_FlxTween.tween(comboSpr,{ alpha : 0},0.2,{ onComplete : function(tween) {
			coolText.destroy();
			comboSpr.destroy();
			rating.destroy();
		}, startDelay : Conductor.crochet * 0.001});
		this.curSection += 1;
	}
	,cameraMovement: function() {
		if(this.camFollow.x != this.dad.getMidpoint().x + 150 && !this.cameraRightSide) {
			this.camFollow.setPosition(this.dad.getMidpoint().x + 150,this.dad.getMidpoint().y - 100);
			switch(this.dad.curCharacter) {
			case "mom":
				this.camFollow.set_y(this.dad.getMidpoint().y);
				break;
			case "senpai":case "senpai-angry":
				this.camFollow.set_y(this.dad.getMidpoint().y - 430);
				this.camFollow.set_x(this.dad.getMidpoint().x - 100);
				break;
			}
			if(this.dad.curCharacter == "mom") {
				this.vocals.set_volume(1);
			}
			if(PlayState.SONG.song.toLowerCase() == "tutorial") {
				this.tweenCamIn();
			}
		}
		if(this.cameraRightSide && this.camFollow.x != this.boyfriend.getMidpoint().x - 100) {
			this.camFollow.setPosition(this.boyfriend.getMidpoint().x - 100,this.boyfriend.getMidpoint().y - 100);
			switch(PlayState.curStage) {
			case "limo":
				this.camFollow.set_x(this.boyfriend.getMidpoint().x - 300);
				break;
			case "mall":
				this.camFollow.set_y(this.boyfriend.getMidpoint().y - 200);
				break;
			case "school":
				this.camFollow.set_x(this.boyfriend.getMidpoint().x - 200);
				this.camFollow.set_y(this.boyfriend.getMidpoint().y - 200);
				break;
			case "schoolEvil":
				this.camFollow.set_x(this.boyfriend.getMidpoint().x - 200);
				this.camFollow.set_y(this.boyfriend.getMidpoint().y - 200);
				break;
			}
			if(PlayState.SONG.song.toLowerCase() == "tutorial") {
				flixel_tweens_FlxTween.tween(flixel_FlxG.camera,{ zoom : 1},Conductor.stepCrochet * 4 / 1000,{ ease : flixel_tweens_FlxEase.elasticInOut});
			}
		}
	}
	,keyShit: function() {
		var _gthis = this;
		var holdingArray = [PlayerSettings.player1.controls._note_left.check(),PlayerSettings.player1.controls._note_down.check(),PlayerSettings.player1.controls._note_up.check(),PlayerSettings.player1.controls._note_right.check()];
		var controlArray = [PlayerSettings.player1.controls._note_leftP.check(),PlayerSettings.player1.controls._note_downP.check(),PlayerSettings.player1.controls._note_upP.check(),PlayerSettings.player1.controls._note_rightP.check()];
		var releaseArray_0 = PlayerSettings.player1.controls._note_leftR.check();
		var releaseArray_1 = PlayerSettings.player1.controls._note_downR.check();
		var releaseArray_2 = PlayerSettings.player1.controls._note_upR.check();
		var releaseArray_3 = PlayerSettings.player1.controls._note_rightR.check();
		if(holdingArray.indexOf(true) != -1 && this.generatedMusic) {
			this.notes.forEachAlive(function(daNote) {
				if(daNote.isSustainNote && daNote.canBeHit && daNote.mustPress && holdingArray[daNote.noteData]) {
					_gthis.goodNoteHit(daNote);
				}
			});
		}
		if(controlArray.indexOf(true) != -1 && this.generatedMusic) {
			this.boyfriend.holdTimer = 0;
			var possibleNotes = [];
			var ignoreList = [];
			var removeList = [];
			this.notes.forEachAlive(function(daNote) {
				if(daNote.canBeHit && daNote.mustPress && !daNote.tooLate && !daNote.wasGoodHit) {
					if(ignoreList.indexOf(daNote.noteData) != -1) {
						var _g = 0;
						while(_g < possibleNotes.length) {
							var possibleNote = possibleNotes[_g];
							++_g;
							if(possibleNote.noteData == daNote.noteData && Math.abs(daNote.strumTime - possibleNote.strumTime) < 10) {
								removeList.push(daNote);
							} else if(possibleNote.noteData == daNote.noteData && daNote.strumTime < possibleNote.strumTime) {
								HxOverrides.remove(possibleNotes,possibleNote);
								possibleNotes.push(daNote);
							}
						}
					} else {
						possibleNotes.push(daNote);
						ignoreList.push(daNote.noteData);
					}
				}
			});
			var _g = 0;
			while(_g < removeList.length) {
				var badNote = removeList[_g];
				++_g;
				badNote.kill();
				this.notes.remove(badNote,true);
				badNote.destroy();
			}
			possibleNotes.sort(function(note1,note2) {
				return note1.strumTime - note2.strumTime | 0;
			});
			if(this.perfectMode) {
				this.goodNoteHit(possibleNotes[0]);
			} else if(possibleNotes.length > 0) {
				var _g = 0;
				var _g1 = controlArray.length;
				while(_g < _g1) {
					var i = _g++;
					if(controlArray[i] && ignoreList.indexOf(i) == -1) {
						this.badNoteHit();
					}
				}
				var _g = 0;
				while(_g < possibleNotes.length) {
					var possibleNote = possibleNotes[_g];
					++_g;
					if(controlArray[possibleNote.noteData]) {
						this.goodNoteHit(possibleNote);
					}
				}
			} else {
				this.badNoteHit();
			}
		}
		if(this.boyfriend.holdTimer > 0.004 * Conductor.stepCrochet && holdingArray.indexOf(true) == -1 && StringTools.startsWith(this.boyfriend.animation._curAnim.name,"sing") && !StringTools.endsWith(this.boyfriend.animation._curAnim.name,"miss")) {
			this.boyfriend.playAnim("idle");
		}
		this.playerStrums.forEach(function(spr) {
			if(controlArray[spr.ID] && spr.animation._curAnim.name != "confirm") {
				spr.animation.play("pressed");
			}
			if(!holdingArray[spr.ID]) {
				spr.animation.play("static");
			}
			if(spr.animation._curAnim.name != "confirm" || StringTools.startsWith(PlayState.curStage,"school")) {
				spr.centerOffsets();
			} else {
				spr.centerOffsets();
				var _g = spr.offset;
				_g.set_x(_g.x - 13);
				var _g = spr.offset;
				_g.set_y(_g.y - 13);
			}
		});
	}
	,noteMiss: function(direction) {
		if(direction == null) {
			direction = 1;
		}
		var _gthis = this;
		if(!this.boyfriend.stunned) {
			this.health -= 0.04;
			if(this.combo > 5 && Object.prototype.hasOwnProperty.call(this.gf.animOffsets.h,"sad")) {
				this.gf.playAnim("sad");
			}
			this.combo = 0;
			if(!PlayState.practiceMode) {
				this.songScore -= 10;
			}
			flixel_FlxG.sound.play(Paths.sound("missnote" + flixel_FlxG.random.int(1,3),null),flixel_FlxG.random.float(0.1,0.2));
			this.boyfriend.stunned = true;
			new flixel_util_FlxTimer().start(0.083333333333333329,function(tmr) {
				_gthis.boyfriend.stunned = false;
			});
			switch(direction) {
			case 0:
				this.boyfriend.playAnim("singLEFTmiss",true);
				break;
			case 1:
				this.boyfriend.playAnim("singDOWNmiss",true);
				break;
			case 2:
				this.boyfriend.playAnim("singUPmiss",true);
				break;
			case 3:
				this.boyfriend.playAnim("singRIGHTmiss",true);
				break;
			}
		}
	}
	,badNoteHit: function() {
		var leftP = PlayerSettings.player1.controls._note_leftP.check();
		var downP = PlayerSettings.player1.controls._note_downP.check();
		var upP = PlayerSettings.player1.controls._note_upP.check();
		var rightP = PlayerSettings.player1.controls._note_rightP.check();
		if(leftP) {
			this.noteMiss(0);
		}
		if(downP) {
			this.noteMiss(1);
		}
		if(upP) {
			this.noteMiss(2);
		}
		if(rightP) {
			this.noteMiss(3);
		}
	}
	,goodNoteHit: function(note) {
		if(!note.wasGoodHit) {
			if(!note.isSustainNote) {
				this.popUpScore(note.strumTime,note);
				this.combo += 1;
			}
			if(note.noteData >= 0) {
				this.health += 0.023;
			} else {
				this.health += 0.004;
			}
			switch(note.noteData) {
			case 0:
				this.boyfriend.playAnim("singLEFT",true);
				break;
			case 1:
				this.boyfriend.playAnim("singDOWN",true);
				break;
			case 2:
				this.boyfriend.playAnim("singUP",true);
				break;
			case 3:
				this.boyfriend.playAnim("singRIGHT",true);
				break;
			}
			this.playerStrums.forEach(function(spr) {
				if(Math.abs(note.noteData) == spr.ID) {
					spr.animation.play("confirm",true);
				}
			});
			note.wasGoodHit = true;
			this.vocals.set_volume(1);
			if(!note.isSustainNote) {
				note.kill();
				this.notes.remove(note,true);
				note.destroy();
			}
		}
	}
	,fastCarCanDrive: null
	,resetFastCar: function() {
		this.fastCar.set_x(-12600);
		this.fastCar.set_y(flixel_FlxG.random.int(140,250));
		this.fastCar.velocity.set_x(0);
		this.fastCarCanDrive = true;
	}
	,fastCarDrive: function() {
		var _gthis = this;
		flixel_FlxG.sound.play(Paths.sound("carPass" + flixel_FlxG.random.int(0,1),null),0.7);
		this.fastCar.velocity.set_x(flixel_FlxG.random.int(170,220) / flixel_FlxG.elapsed * 3);
		this.fastCarCanDrive = false;
		new flixel_util_FlxTimer().start(2,function(tmr) {
			_gthis.resetFastCar();
		});
	}
	,tankResetShit: null
	,tankMoving: null
	,tankAngle: null
	,tankSpeed: null
	,tankX: null
	,moveTank: function() {
		if(!this.inCutscene) {
			this.tankAngle += this.tankSpeed * flixel_FlxG.elapsed;
			this.tankGround.set_angle(this.tankAngle - 90 + 15);
			this.tankGround.set_x(this.tankX + 1500 * Math.cos(Math.PI / 180 * (this.tankAngle + 180)));
			this.tankGround.set_y(1300 + 1100 * Math.sin(Math.PI / 180 * (this.tankAngle + 180)));
		}
	}
	,trainMoving: null
	,trainFrameTiming: null
	,trainCars: null
	,trainFinishing: null
	,trainCooldown: null
	,trainStart: function() {
		this.trainMoving = true;
		this.trainSound.play(true);
	}
	,startedMoving: null
	,updateTrainPos: function() {
		if(this.trainSound._time >= 4700) {
			this.startedMoving = true;
			this.gf.playAnim("hairBlow");
		}
		if(this.startedMoving) {
			var _g = this.phillyTrain;
			_g.set_x(_g.x - 400);
			if(this.phillyTrain.x < -2000 && !this.trainFinishing) {
				this.phillyTrain.set_x(-1150);
				this.trainCars -= 1;
				if(this.trainCars <= 0) {
					this.trainFinishing = true;
				}
			}
			if(this.phillyTrain.x < -4000 && this.trainFinishing) {
				this.trainReset();
			}
		}
	}
	,trainReset: function() {
		this.gf.playAnim("hairFall");
		this.phillyTrain.set_x(flixel_FlxG.width + 200);
		this.trainMoving = false;
		this.trainCars = 8;
		this.trainFinishing = false;
		this.startedMoving = false;
	}
	,lightningStrikeShit: function() {
		flixel_FlxG.sound.play(Paths.sound("thunder_" + flixel_FlxG.random.int(1,2),null));
		this.halloweenBG.animation.play("lightning");
		this.lightningStrikeBeat = this.curBeat;
		this.lightningOffset = flixel_FlxG.random.int(8,24);
		this.boyfriend.playAnim("scared",true);
		this.gf.playAnim("scared",true);
	}
	,stepHit: function() {
		MusicBeatState.prototype.stepHit.call(this);
		if(Math.abs(flixel_FlxG.sound.music._time - (Conductor.songPosition - Conductor.offset)) > 20 || PlayState.SONG.needsVoices && Math.abs(this.vocals._time - (Conductor.songPosition - Conductor.offset)) > 20) {
			this.resyncVocals();
		}
		var tmp = this.dad.curCharacter == "spooky" && this.curStep % 4 == 2;
	}
	,lightningStrikeBeat: null
	,lightningOffset: null
	,beatHit: function() {
		var _gthis = this;
		MusicBeatState.prototype.beatHit.call(this);
		if(this.generatedMusic) {
			this.notes.members.sort(function(note1,note2) {
				return _gthis.sortNotes(1,note1,note2);
			});
		}
		if(PlayState.SONG.notes[Math.floor(this.curStep / 16)] != null) {
			if(PlayState.SONG.notes[Math.floor(this.curStep / 16)].changeBPM) {
				Conductor.changeBPM(PlayState.SONG.notes[Math.floor(this.curStep / 16)].bpm);
			}
		}
		this.wiggleShit.update(Conductor.crochet);
		if(ui_PreferencesMenu.getPref("camera-zoom")) {
			if(this.curSong.toLowerCase() == "milf" && this.curBeat >= 168 && this.curBeat < 200 && this.camZooming && flixel_FlxG.camera.zoom < 1.35) {
				var _g = flixel_FlxG.camera;
				_g.set_zoom(_g.zoom + 0.015);
				var _g = this.camHUD;
				_g.set_zoom(_g.zoom + 0.03);
			}
			if(this.camZooming && flixel_FlxG.camera.zoom < 1.35 && this.curBeat % 4 == 0) {
				var _g = flixel_FlxG.camera;
				_g.set_zoom(_g.zoom + 0.015);
				var _g = this.camHUD;
				_g.set_zoom(_g.zoom + 0.03);
			}
		}
		this.iconP1.setGraphicSize(this.iconP1.get_width() + 30 | 0);
		this.iconP2.setGraphicSize(this.iconP2.get_width() + 30 | 0);
		this.iconP1.updateHitbox();
		this.iconP2.updateHitbox();
		if(this.curBeat % this.gfSpeed == 0) {
			this.gf.dance();
		}
		if(this.curBeat % 2 == 0) {
			if(!StringTools.startsWith(this.boyfriend.animation._curAnim.name,"sing")) {
				this.boyfriend.playAnim("idle");
			}
			if(!StringTools.startsWith(this.dad.animation._curAnim.name,"sing")) {
				this.dad.dance();
			}
		} else if(this.dad.curCharacter == "spooky") {
			if(!StringTools.startsWith(this.dad.animation._curAnim.name,"sing")) {
				this.dad.dance();
			}
		}
		if(this.curBeat % 8 == 7 && this.curSong == "Bopeebo") {
			this.boyfriend.playAnim("hey",true);
		}
		if(this.curBeat % 16 == 15 && PlayState.SONG.song == "Tutorial" && this.dad.curCharacter == "gf" && this.curBeat > 16 && this.curBeat < 48) {
			this.boyfriend.playAnim("hey",true);
			this.dad.playAnim("cheer",true);
		}
		this.foregroundSprites.forEach(function(spr) {
			spr.dance();
		});
		switch(PlayState.curStage) {
		case "limo":
			this.grpLimoDancers.forEach(function(dancer) {
				dancer.dance();
			});
			var Chance = 10;
			if(Chance == null) {
				Chance = 50;
			}
			if(flixel_FlxG.random.float(0,100) < Chance && this.fastCarCanDrive) {
				this.fastCarDrive();
			}
			break;
		case "mall":
			this.upperBoppers.animation.play("bop",true);
			this.bottomBoppers.animation.play("bop",true);
			this.santa.animation.play("idle",true);
			break;
		case "philly":
			if(!this.trainMoving) {
				this.trainCooldown += 1;
			}
			if(this.curBeat % 4 == 0) {
				this.lightFadeShader.reset();
				this.phillyCityLights.forEach(function(light) {
					light.set_visible(false);
				});
				this.curLight = flixel_FlxG.random.int(0,this.phillyCityLights.length - 1);
				this.phillyCityLights.members[this.curLight].set_visible(true);
			}
			var tmp;
			if(this.curBeat % 8 == 4) {
				var Chance = 30;
				if(Chance == null) {
					Chance = 50;
				}
				tmp = flixel_FlxG.random.float(0,100) < Chance;
			} else {
				tmp = false;
			}
			if(tmp && !this.trainMoving && this.trainCooldown > 8) {
				this.trainCooldown = flixel_FlxG.random.int(-4,0);
				this.trainStart();
			}
			break;
		case "school":
			this.bgGirls.dance();
			break;
		case "tank":
			this.tankWatchtower.dance();
			break;
		}
		var tmp;
		if(this.isHalloween) {
			var Chance = 10;
			if(Chance == null) {
				Chance = 50;
			}
			tmp = flixel_FlxG.random.float(0,100) < Chance;
		} else {
			tmp = false;
		}
		if(tmp && this.curBeat > this.lightningStrikeBeat + this.lightningOffset) {
			this.lightningStrikeShit();
		}
	}
	,curLight: null
	,__class__: PlayState
});
var flixel_util_FlxTypedSignal = {};
flixel_util_FlxTypedSignal.__properties__ = {get_dispatch:"get_dispatch"};
flixel_util_FlxTypedSignal.add = function(this1,listener) {
	this1.add(listener);
};
flixel_util_FlxTypedSignal.addOnce = function(this1,listener) {
	this1.addOnce(listener);
};
flixel_util_FlxTypedSignal.remove = function(this1,listener) {
	this1.remove(listener);
};
flixel_util_FlxTypedSignal.has = function(this1,listener) {
	return this1.has(listener);
};
flixel_util_FlxTypedSignal.removeAll = function(this1) {
	this1.removeAll();
};
flixel_util_FlxTypedSignal.get_dispatch = function(this1) {
	return this1.dispatch;
};
flixel_util_FlxTypedSignal.toSignal0 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal0();
};
flixel_util_FlxTypedSignal.toSignal1 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal1();
};
flixel_util_FlxTypedSignal.toSignal2 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal2();
};
flixel_util_FlxTypedSignal.toSignal3 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal3();
};
flixel_util_FlxTypedSignal.toSignal4 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal4();
};
var PlayerSettings = function(id) {
	this.id = id;
	this.controls = new Controls("player" + id,KeyboardScheme.None);
	var setDefault = true;
	var saveControls = flixel_FlxG.save.data.controls;
	if(saveControls != null) {
		var keys = null;
		if(id == 0 && saveControls.p1 != null && saveControls.p1.keys != null) {
			keys = saveControls.p1.keys;
		} else if(id == 1 && saveControls.p2 != null && saveControls.p2.keys != null) {
			keys = saveControls.p2.keys;
		}
		if(keys != null) {
			setDefault = false;
			haxe_Log.trace("loaded key data: " + JSON.stringify(keys),{ fileName : "source/PlayerSettings.hx", lineNumber : 58, className : "PlayerSettings", methodName : "new"});
			this.controls.fromSaveData(keys,Device.Keys);
		}
	}
	if(setDefault) {
		this.controls.setKeyboardScheme(KeyboardScheme.Solo);
	}
};
$hxClasses["PlayerSettings"] = PlayerSettings;
PlayerSettings.__name__ = "PlayerSettings";
PlayerSettings.player1 = null;
PlayerSettings.player2 = null;
PlayerSettings.init = function() {
	if(PlayerSettings.player1 == null) {
		PlayerSettings.player1 = new PlayerSettings(0);
		PlayerSettings.numPlayers++;
	}
	flixel_FlxG.gamepads.deviceConnected.add(PlayerSettings.onGamepadAdded);
	var _g = 0;
	var _g1 = flixel_FlxG.gamepads.getActiveGamepads();
	while(_g < _g1.length) {
		var pad = _g1[_g];
		++_g;
		if(pad != null) {
			PlayerSettings.onGamepadAdded(pad);
		}
	}
};
PlayerSettings.onGamepadAdded = function(pad) {
	PlayerSettings.player1.addGamepad(pad);
};
PlayerSettings.prototype = {
	id: null
	,controls: null
	,addGamepad: function(pad) {
		var setDefault = true;
		var saveControls = flixel_FlxG.save.data.controls;
		if(saveControls != null) {
			var pad1 = null;
			if(this.id == 0 && saveControls.p1 != null && saveControls.p1.pad != null) {
				pad1 = saveControls.p1.pad;
			} else if(this.id == 1 && saveControls.p2 != null && saveControls.p2.pad != null) {
				pad1 = saveControls.p2.pad;
			}
			if(pad1 != null) {
				setDefault = false;
				haxe_Log.trace("loaded pad data: " + JSON.stringify(pad1),{ fileName : "source/PlayerSettings.hx", lineNumber : 86, className : "PlayerSettings", methodName : "addGamepad"});
				this.controls.addGamepadWithSaveData(pad1.id,pad1);
			}
		}
		if(setDefault) {
			this.controls.addDefaultGamepad(pad.id);
		}
	}
	,saveControls: function() {
		if(flixel_FlxG.save.data.controls == null) {
			flixel_FlxG.save.data.controls = { };
		}
		var keydata = null;
		if(this.id == 0) {
			if(flixel_FlxG.save.data.controls.p1 == null) {
				flixel_FlxG.save.data.controls.p1 = { };
			}
			keydata = flixel_FlxG.save.data.controls.p1;
		} else {
			if(flixel_FlxG.save.data.controls.p2 == null) {
				flixel_FlxG.save.data.controls.p2 = { };
			}
			keydata = flixel_FlxG.save.data.controls.p2;
		}
		var savedata = this.controls.createSaveData(Device.Keys);
		if(savedata != null) {
			keydata.keys = savedata;
			haxe_Log.trace("saving key data: " + JSON.stringify(savedata),{ fileName : "source/PlayerSettings.hx", lineNumber : 123, className : "PlayerSettings", methodName : "saveControls"});
		}
		if(this.controls.gamepadsAdded.length > 0) {
			savedata = this.controls.createSaveData(Device.Gamepad(this.controls.gamepadsAdded[0]));
			if(savedata != null) {
				haxe_Log.trace("saving pad data: " + JSON.stringify(savedata),{ fileName : "source/PlayerSettings.hx", lineNumber : 130, className : "PlayerSettings", methodName : "saveControls"});
				keydata.pad = savedata;
			}
		}
		flixel_FlxG.save.flush();
	}
	,__class__: PlayerSettings
};
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice;
		var a1 = arguments;
		var a2 = a.call(a1);
		return f(a2);
	};
};
var Section = function(lengthInSteps) {
	if(lengthInSteps == null) {
		lengthInSteps = 16;
	}
	this.mustHitSection = true;
	this.typeOfSection = 0;
	this.lengthInSteps = 16;
	this.sectionNotes = [];
	this.lengthInSteps = lengthInSteps;
};
$hxClasses["Section"] = Section;
Section.__name__ = "Section";
Section.prototype = {
	sectionNotes: null
	,lengthInSteps: null
	,typeOfSection: null
	,mustHitSection: null
	,__class__: Section
};
var Song = function(song,notes,bpm) {
	this.player2 = "dad";
	this.player1 = "bf";
	this.speed = 1;
	this.needsVoices = true;
	this.song = song;
	this.notes = notes;
	this.bpm = bpm;
};
$hxClasses["Song"] = Song;
Song.__name__ = "Song";
Song.loadFromJson = function(jsonInput,folder) {
	var rawJson = StringTools.trim(lime_utils_Assets.getText(Paths.getPath("data/" + (folder.toLowerCase() + "/" + jsonInput.toLowerCase()) + ".json","TEXT",null)));
	while(!StringTools.endsWith(rawJson,"}")) rawJson = HxOverrides.substr(rawJson,0,rawJson.length - 1);
	return Song.parseJSONshit(rawJson);
};
Song.parseJSONshit = function(rawJson) {
	var swagShit = JSON.parse(rawJson).song;
	swagShit.validScore = true;
	return swagShit;
};
Song.prototype = {
	song: null
	,notes: null
	,bpm: null
	,needsVoices: null
	,speed: null
	,player1: null
	,player2: null
	,__class__: Song
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StoryMenuState = function(TransIn,TransOut) {
	this.intendedScore = 0;
	this.lerpScore = 0;
	this.stopspamming = false;
	this.selectedWeek = false;
	this.movedBack = false;
	this.curWeek = 0;
	this.weekNames = ";Daddy Dearest;Spooky Month;PICO;MOMMY MUST MURDER;RED SNOW;hating simulator ft. moawling;TANKMAN".split(";");
	this.weekCharacters = [["dad","bf","gf"],["dad","bf","gf"],["spooky","bf","gf"],["pico","bf","gf"],["mom","bf","gf"],["parents-christmas","bf","gf"],["senpai","bf","gf"],["tankman","bf","gf"]];
	this.curDifficulty = 1;
	this.weekData = [["Tutorial"],["Bopeebo","Fresh","Dadbattle"],["Spookeez","South","Monster"],["Pico","Philly","Blammed"],["Satin-Panties","High","Milf"],["Cocoa","Eggnog","Winter-Horrorland"],["Senpai","Roses","Thorns"],["Ugh","Guns","Stress"]];
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["StoryMenuState"] = StoryMenuState;
StoryMenuState.__name__ = "StoryMenuState";
StoryMenuState.__super__ = MusicBeatState;
StoryMenuState.prototype = $extend(MusicBeatState.prototype,{
	scoreText: null
	,weekData: null
	,curDifficulty: null
	,weekCharacters: null
	,weekNames: null
	,txtWeekTitle: null
	,curWeek: null
	,txtTracklist: null
	,grpWeekText: null
	,grpWeekCharacters: null
	,grpLocks: null
	,difficultySelectors: null
	,sprDifficulty: null
	,leftArrow: null
	,rightArrow: null
	,create: function() {
		this.transIn = flixel_addons_transition_FlxTransitionableState.defaultTransIn;
		this.transOut = flixel_addons_transition_FlxTransitionableState.defaultTransOut;
		if(flixel_FlxG.sound.music != null) {
			if(flixel_FlxG.sound.music._channel == null) {
				flixel_FlxG.sound.playMusic(Paths.getPath("music/" + "freakyMenu" + "." + "mp3","MUSIC",null));
			}
		}
		this.persistentUpdate = this.persistentDraw = true;
		this.scoreText = new flixel_text_FlxText(10,10,0,"SCORE: 49324858",36);
		this.scoreText.setFormat("VCR OSD Mono",32);
		this.txtWeekTitle = new flixel_text_FlxText(flixel_FlxG.width * 0.7,10,0,"",32);
		this.txtWeekTitle.setFormat("VCR OSD Mono",32,-1,"right");
		this.txtWeekTitle.set_alpha(0.7);
		var rankText = new flixel_text_FlxText(0,10);
		rankText.set_text("RANK: GREAT");
		rankText.setFormat("assets/fonts/" + "vcr.ttf",32);
		rankText.set_size(this.scoreText._defaultFormat.size | 0);
		rankText.screenCenter(flixel_util_FlxAxes.X);
		var library = null;
		var ui_tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "campaign_menu_UI_assets" + ".png","IMAGE",library),Paths.getPath("images/" + "campaign_menu_UI_assets" + ".xml","TEXT",library));
		var yellowBG = new flixel_FlxSprite(0,56).makeGraphic(flixel_FlxG.width,400,-405679);
		this.grpWeekText = new flixel_group_FlxTypedGroup();
		this.add(this.grpWeekText);
		var blackBarThingie = new flixel_FlxSprite().makeGraphic(flixel_FlxG.width,56,-16777216);
		this.add(blackBarThingie);
		this.grpWeekCharacters = new flixel_group_FlxTypedGroup();
		this.grpLocks = new flixel_group_FlxTypedGroup();
		this.add(this.grpLocks);
		haxe_Log.trace("Line 70",{ fileName : "source/StoryMenuState.hx", lineNumber : 108, className : "StoryMenuState", methodName : "create"});
		var _g = 0;
		var _g1 = this.weekData.length;
		while(_g < _g1) {
			var i = _g++;
			var weekThing = new MenuItem(0,yellowBG.y + yellowBG.get_height() + 10,i);
			var _g2 = weekThing;
			_g2.set_y(_g2.y + (weekThing.get_height() + 20) * i);
			weekThing.targetY = i;
			this.grpWeekText.add(weekThing);
			weekThing.screenCenter(flixel_util_FlxAxes.X);
			weekThing.set_antialiasing(true);
			if(!StoryMenuState.weekUnlocked[i]) {
				var lock = new flixel_FlxSprite(weekThing.get_width() + 10 + weekThing.x);
				lock.set_frames(ui_tex);
				lock.animation.addByPrefix("lock","lock");
				lock.animation.play("lock");
				lock.ID = i;
				lock.set_antialiasing(true);
				this.grpLocks.add(lock);
			}
		}
		haxe_Log.trace("Line 96",{ fileName : "source/StoryMenuState.hx", lineNumber : 139, className : "StoryMenuState", methodName : "create"});
		var _g = 0;
		while(_g < 3) {
			var char = _g++;
			var weekCharacterThing = new MenuCharacter(flixel_FlxG.width * 0.25 * (1 + char) - 150,this.weekCharacters[this.curWeek][char]);
			var _g1 = weekCharacterThing;
			_g1.set_y(_g1.y + 70);
			weekCharacterThing.set_antialiasing(true);
			switch(weekCharacterThing.character) {
			case "bf":
				weekCharacterThing.setGraphicSize(weekCharacterThing.get_width() * 0.9 | 0);
				weekCharacterThing.updateHitbox();
				var _g2 = weekCharacterThing;
				_g2.set_x(_g2.x - 80);
				break;
			case "dad":
				weekCharacterThing.setGraphicSize(weekCharacterThing.get_width() * 0.5 | 0);
				weekCharacterThing.updateHitbox();
				break;
			case "gf":
				weekCharacterThing.setGraphicSize(weekCharacterThing.get_width() * 0.5 | 0);
				weekCharacterThing.updateHitbox();
				break;
			case "parents-christmas":
				weekCharacterThing.setGraphicSize(weekCharacterThing.get_width() * 0.9 | 0);
				weekCharacterThing.updateHitbox();
				break;
			case "pico":
				weekCharacterThing.set_flipX(true);
				break;
			}
			this.grpWeekCharacters.add(weekCharacterThing);
		}
		this.difficultySelectors = new flixel_group_FlxTypedGroup();
		this.add(this.difficultySelectors);
		haxe_Log.trace("Line 124",{ fileName : "source/StoryMenuState.hx", lineNumber : 171, className : "StoryMenuState", methodName : "create"});
		this.leftArrow = new flixel_FlxSprite(this.grpWeekText.members[0].x + this.grpWeekText.members[0].get_width() + 10,this.grpWeekText.members[0].y + 10);
		this.leftArrow.set_frames(ui_tex);
		this.leftArrow.animation.addByPrefix("idle","arrow left");
		this.leftArrow.animation.addByPrefix("press","arrow push left");
		this.leftArrow.animation.play("idle");
		this.difficultySelectors.add(this.leftArrow);
		this.sprDifficulty = new flixel_FlxSprite(this.leftArrow.x + 130,this.leftArrow.y);
		this.sprDifficulty.set_frames(ui_tex);
		this.sprDifficulty.animation.addByPrefix("easy","EASY");
		this.sprDifficulty.animation.addByPrefix("normal","NORMAL");
		this.sprDifficulty.animation.addByPrefix("hard","HARD");
		this.sprDifficulty.animation.play("easy");
		this.changeDifficulty();
		this.difficultySelectors.add(this.sprDifficulty);
		this.rightArrow = new flixel_FlxSprite(this.sprDifficulty.x + this.sprDifficulty.get_width() + 50,this.leftArrow.y);
		this.rightArrow.set_frames(ui_tex);
		this.rightArrow.animation.addByPrefix("idle","arrow right");
		this.rightArrow.animation.addByPrefix("press","arrow push right",24,false);
		this.rightArrow.animation.play("idle");
		this.difficultySelectors.add(this.rightArrow);
		haxe_Log.trace("Line 150",{ fileName : "source/StoryMenuState.hx", lineNumber : 197, className : "StoryMenuState", methodName : "create"});
		this.add(yellowBG);
		this.add(this.grpWeekCharacters);
		this.txtTracklist = new flixel_text_FlxText(flixel_FlxG.width * 0.05,yellowBG.x + yellowBG.get_height() + 100,0,"Tracks",32);
		this.txtTracklist.set_alignment("center");
		this.txtTracklist.set_font(rankText._font);
		this.txtTracklist.set_color(-1747081);
		this.add(this.txtTracklist);
		this.add(this.scoreText);
		this.add(this.txtWeekTitle);
		this.updateText();
		haxe_Log.trace("Line 165",{ fileName : "source/StoryMenuState.hx", lineNumber : 213, className : "StoryMenuState", methodName : "create"});
		MusicBeatState.prototype.create.call(this);
	}
	,update: function(elapsed) {
		var _gthis = this;
		this.lerpScore = CoolUtil.coolLerp(this.lerpScore,this.intendedScore,0.5);
		this.scoreText.set_text("WEEK SCORE:" + Math.round(this.lerpScore));
		this.txtWeekTitle.set_text(this.weekNames[this.curWeek].toUpperCase());
		this.txtWeekTitle.set_x(flixel_FlxG.width - (this.txtWeekTitle.get_width() + 10));
		this.difficultySelectors.set_visible(StoryMenuState.weekUnlocked[this.curWeek]);
		this.grpLocks.forEach(function(lock) {
			lock.set_y(_gthis.grpWeekText.members[lock.ID].y);
		});
		if(!this.movedBack) {
			if(!this.selectedWeek) {
				if(PlayerSettings.player1.controls._ui_upP.check()) {
					this.changeWeek(-1);
				}
				if(PlayerSettings.player1.controls._ui_downP.check()) {
					this.changeWeek(1);
				}
				if(PlayerSettings.player1.controls._ui_right.check()) {
					this.rightArrow.animation.play("press");
				} else {
					this.rightArrow.animation.play("idle");
				}
				if(PlayerSettings.player1.controls._ui_left.check()) {
					this.leftArrow.animation.play("press");
				} else {
					this.leftArrow.animation.play("idle");
				}
				if(PlayerSettings.player1.controls._ui_rightP.check()) {
					this.changeDifficulty(1);
				}
				if(PlayerSettings.player1.controls._ui_leftP.check()) {
					this.changeDifficulty(-1);
				}
			}
			if(PlayerSettings.player1.controls._accept.check()) {
				this.selectWeek();
			}
		}
		if(PlayerSettings.player1.controls._back.check() && !this.movedBack && !this.selectedWeek) {
			flixel_FlxG.sound.play(Paths.sound("cancelMenu"));
			this.movedBack = true;
			var nextState = new MainMenuState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
		MusicBeatState.prototype.update.call(this,elapsed);
	}
	,movedBack: null
	,selectedWeek: null
	,stopspamming: null
	,selectWeek: function() {
		if(StoryMenuState.weekUnlocked[this.curWeek]) {
			if(this.stopspamming == false) {
				flixel_FlxG.sound.play(Paths.sound("confirmMenu"));
				this.grpWeekText.members[this.curWeek].startFlashing();
				this.grpWeekCharacters.members[1].animation.play("bfConfirm");
				this.stopspamming = true;
			}
			PlayState.storyPlaylist = this.weekData[this.curWeek];
			PlayState.isStoryMode = true;
			this.selectedWeek = true;
			var diffic = "";
			switch(this.curDifficulty) {
			case 0:
				diffic = "-easy";
				break;
			case 2:
				diffic = "-hard";
				break;
			}
			PlayState.storyDifficulty = this.curDifficulty;
			PlayState.SONG = Song.loadFromJson(PlayState.storyPlaylist[0].toLowerCase() + diffic,PlayState.storyPlaylist[0].toLowerCase());
			PlayState.storyWeek = this.curWeek;
			PlayState.campaignScore = 0;
			new flixel_util_FlxTimer().start(1,function(tmr) {
				var target = new PlayState();
				var stopMusic = true;
				if(stopMusic == null) {
					stopMusic = false;
				}
				var nextState = LoadingState.getNextState(target,stopMusic);
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			});
		}
	}
	,changeDifficulty: function(change) {
		if(change == null) {
			change = 0;
		}
		this.curDifficulty += change;
		if(this.curDifficulty < 0) {
			this.curDifficulty = 2;
		}
		if(this.curDifficulty > 2) {
			this.curDifficulty = 0;
		}
		this.sprDifficulty.offset.set_x(0);
		switch(this.curDifficulty) {
		case 0:
			this.sprDifficulty.animation.play("easy");
			this.sprDifficulty.offset.set_x(20);
			break;
		case 1:
			this.sprDifficulty.animation.play("normal");
			this.sprDifficulty.offset.set_x(70);
			break;
		case 2:
			this.sprDifficulty.animation.play("hard");
			this.sprDifficulty.offset.set_x(20);
			break;
		}
		this.sprDifficulty.set_alpha(0);
		this.sprDifficulty.set_y(this.leftArrow.y - 15);
		this.intendedScore = Highscore.getWeekScore(this.curWeek,this.curDifficulty);
		flixel_tweens_FlxTween.tween(this.sprDifficulty,{ y : this.leftArrow.y + 15, alpha : 1},0.07);
	}
	,lerpScore: null
	,intendedScore: null
	,changeWeek: function(change) {
		if(change == null) {
			change = 0;
		}
		this.curWeek += change;
		if(this.curWeek >= this.weekData.length) {
			this.curWeek = 0;
		}
		if(this.curWeek < 0) {
			this.curWeek = this.weekData.length - 1;
		}
		var bullShit = 0;
		var _g = 0;
		var _g1 = this.grpWeekText.members;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.targetY = bullShit - this.curWeek;
			if(item.targetY == 0 && StoryMenuState.weekUnlocked[this.curWeek]) {
				item.set_alpha(1);
			} else {
				item.set_alpha(0.6);
			}
			++bullShit;
		}
		flixel_FlxG.sound.play(Paths.sound("scrollMenu"));
		this.updateText();
	}
	,updateText: function() {
		this.grpWeekCharacters.members[0].animation.play(this.weekCharacters[this.curWeek][0]);
		this.grpWeekCharacters.members[1].animation.play(this.weekCharacters[this.curWeek][1]);
		this.grpWeekCharacters.members[2].animation.play(this.weekCharacters[this.curWeek][2]);
		this.txtTracklist.set_text("Tracks\n");
		switch(this.grpWeekCharacters.members[0].animation._curAnim.name) {
		case "dad":
			this.grpWeekCharacters.members[0].offset.set(120,200);
			this.grpWeekCharacters.members[0].setGraphicSize(this.grpWeekCharacters.members[0].get_width() | 0);
			break;
		case "mom":
			this.grpWeekCharacters.members[0].offset.set(100,200);
			this.grpWeekCharacters.members[0].setGraphicSize(this.grpWeekCharacters.members[0].get_width() | 0);
			break;
		case "parents-christmas":
			this.grpWeekCharacters.members[0].offset.set(200,200);
			this.grpWeekCharacters.members[0].setGraphicSize(this.grpWeekCharacters.members[0].get_width() * 0.99 | 0);
			break;
		case "senpai":
			this.grpWeekCharacters.members[0].offset.set(130,0);
			this.grpWeekCharacters.members[0].setGraphicSize(this.grpWeekCharacters.members[0].get_width() * 1.4 | 0);
			break;
		case "tankman":
			this.grpWeekCharacters.members[0].offset.set(60,-20);
			this.grpWeekCharacters.members[0].setGraphicSize(this.grpWeekCharacters.members[0].get_width() | 0);
			break;
		default:
			this.grpWeekCharacters.members[0].offset.set(100,100);
			this.grpWeekCharacters.members[0].setGraphicSize(this.grpWeekCharacters.members[0].get_width() | 0);
		}
		var stringThing = this.weekData[this.curWeek];
		var _g = 0;
		while(_g < stringThing.length) {
			var i = stringThing[_g];
			++_g;
			var _g1 = this.txtTracklist;
			_g1.set_text(_g1.text + ("\n" + i));
		}
		this.txtTracklist.set_text(this.txtTracklist.text.toUpperCase());
		this.txtTracklist.screenCenter(flixel_util_FlxAxes.X);
		var _g = this.txtTracklist;
		_g.set_x(_g.x - flixel_FlxG.width * 0.35);
		this.intendedScore = Highscore.getWeekScore(this.curWeek,this.curDifficulty);
	}
	,__class__: StoryMenuState
});
var _$String_String_$Impl_$ = function() { };
$hxClasses["_String.String_Impl_"] = _$String_String_$Impl_$;
_$String_String_$Impl_$.__name__ = "_String.String_Impl_";
_$String_String_$Impl_$.fromCharCode = function(code) {
	return String.fromCodePoint(code);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var TankmenBG = function(x,y,uhh) {
	this.tankSpeed = 0.7;
	this.goingRight = false;
	this.strumTime = 0;
	flixel_FlxSprite.call(this,x,y);
	var library = null;
	this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "tankmanKilled1" + ".png","IMAGE",library),Paths.getPath("images/" + "tankmanKilled1" + ".xml","TEXT",library)));
	this.set_antialiasing(true);
	this.animation.addByPrefix("run","tankman running",24,true);
	this.animation.addByPrefix("shot","John Shot " + flixel_FlxG.random.int(1,2),24,false);
	this.animation.play("run");
	this.animation._curAnim.set_curFrame(flixel_FlxG.random.int(0,this.animation._curAnim.frames.length - 1));
	this.updateHitbox();
	this.setGraphicSize(this.get_width() * 0.8 | 0);
	this.updateHitbox();
};
$hxClasses["TankmenBG"] = TankmenBG;
TankmenBG.__name__ = "TankmenBG";
TankmenBG.__super__ = flixel_FlxSprite;
TankmenBG.prototype = $extend(flixel_FlxSprite.prototype,{
	strumTime: null
	,goingRight: null
	,tankSpeed: null
	,endingOffset: null
	,resetShit: function(x,y,goRight) {
		this.setPosition(x,y);
		this.goingRight = goRight;
		this.endingOffset = flixel_FlxG.random.float(50,200);
		this.tankSpeed = flixel_FlxG.random.float(0.6,1);
		if(this.goingRight) {
			this.set_flipX(true);
		}
	}
	,update: function(elapsed) {
		flixel_FlxSprite.prototype.update.call(this,elapsed);
		if(this.x >= flixel_FlxG.width * 1.2 || this.x <= flixel_FlxG.width * -0.5) {
			this.set_visible(false);
		} else {
			this.set_visible(true);
		}
		if(this.animation._curAnim.name == "run") {
			var wackyShit = flixel_FlxG.width * 0.74 + this.endingOffset;
			if(this.goingRight) {
				wackyShit = flixel_FlxG.width * 0.02 - this.endingOffset;
				this.set_x(wackyShit + (Conductor.songPosition - this.strumTime) * this.tankSpeed);
			} else {
				this.set_x(wackyShit - (Conductor.songPosition - this.strumTime) * this.tankSpeed);
			}
		}
		if(Conductor.songPosition > this.strumTime) {
			this.animation.play("shot");
			if(this.goingRight) {
				this.offset.set_y(200);
				this.offset.set_x(300);
			}
		}
		if(this.animation._curAnim.name == "shot" && this.animation._curAnim.curFrame >= this.animation._curAnim.frames.length - 1) {
			this.kill();
		}
	}
	,__class__: TankmenBG
});
var TitleState = function(TransIn,TransOut) {
	this.skippedIntro = false;
	this.isRainbow = false;
	this.transitioning = false;
	this.danceLeft = false;
	this.lastBeat = 0;
	this.curWacky = [];
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["TitleState"] = TitleState;
TitleState.__name__ = "TitleState";
TitleState.__super__ = MusicBeatState;
TitleState.prototype = $extend(MusicBeatState.prototype,{
	blackScreen: null
	,credGroup: null
	,credTextShit: null
	,textGroup: null
	,ngSpr: null
	,curWacky: null
	,wackyImage: null
	,lastBeat: null
	,swagShader: null
	,alphaShader: null
	,video: null
	,netStream: null
	,overlay: null
	,create: function() {
		var _gthis = this;
		polymod_Polymod.init({ modRoot : "mods", dirs : ["introMod"], framework : polymod_Framework.OPENFL});
		flixel_FlxG.game.focusLostFramerate = 60;
		this.swagShader = new shaderslmfao_ColorSwap();
		this.alphaShader = new shaderslmfao_BuildingShaders();
		flixel_FlxG.sound.muteKeys = [48];
		this.curWacky = flixel_FlxG.random.getObject_Array_String(this.getIntroTextShit());
		MusicBeatState.prototype.create.call(this);
		flixel_FlxG.save.bind("funkin","ninjamuffin99");
		ui_PreferencesMenu.initPrefs();
		PlayerSettings.init();
		Highscore.load();
		if(flixel_FlxG.save.data.weekUnlocked != null) {
			if(StoryMenuState.weekUnlocked.length < 4) {
				StoryMenuState.weekUnlocked.splice(0,0,true);
			}
			if(!StoryMenuState.weekUnlocked[0]) {
				StoryMenuState.weekUnlocked[0] = true;
			}
		}
		if(flixel_FlxG.save.data.seenVideo != null) {
			VideoState.seenVideo = flixel_FlxG.save.data.seenVideo;
		}
		new flixel_util_FlxTimer().start(1,function(tmr) {
			_gthis.startIntro();
		});
	}
	,client_onMetaData: function(e) {
		this.video.attachNetStream(this.netStream);
		this.video.set_width(this.video.get_videoWidth());
		this.video.set_height(this.video.get_videoHeight());
	}
	,netStream_onAsyncError: function(e) {
		haxe_Log.trace("Error loading video",{ fileName : "source/TitleState.hx", lineNumber : 136, className : "TitleState", methodName : "netStream_onAsyncError"});
	}
	,netConnection_onNetStatus: function(e) {
		if(e.info.code == "NetStream.Play.Complete") {
			this.startIntro();
		}
		haxe_Log.trace(e.toString(),{ fileName : "source/TitleState.hx", lineNumber : 145, className : "TitleState", methodName : "netConnection_onNetStatus"});
	}
	,overlay_onMouseDown: function(e) {
		this.netStream.get_soundTransform().volume = 0.2;
		this.netStream.get_soundTransform().pan = -1;
		openfl_Lib.get_current().stage.removeChild(this.overlay);
	}
	,logoBl: null
	,gfDance: null
	,danceLeft: null
	,titleText: null
	,startIntro: function() {
		if(!TitleState.initialized) {
			var diamond = flixel_graphics_FlxGraphic.fromClass(flixel_addons_transition_GraphicTransTileDiamond);
			diamond.persist = true;
			diamond.set_destroyOnNoUse(false);
			flixel_addons_transition_FlxTransitionableState.defaultTransIn = new flixel_addons_transition_TransitionData("fade",-16777216,1,new flixel_math_FlxPoint(0,-1),{ asset : diamond, width : 32, height : 32},new flixel_math_FlxRect(-200,-200,flixel_FlxG.width * 1.4,flixel_FlxG.height * 1.4));
			flixel_addons_transition_FlxTransitionableState.defaultTransOut = new flixel_addons_transition_TransitionData("fade",-16777216,0.7,new flixel_math_FlxPoint(0,1),{ asset : diamond, width : 32, height : 32},new flixel_math_FlxRect(-200,-200,flixel_FlxG.width * 1.4,flixel_FlxG.height * 1.4));
			this.transIn = flixel_addons_transition_FlxTransitionableState.defaultTransIn;
			this.transOut = flixel_addons_transition_FlxTransitionableState.defaultTransOut;
			flixel_FlxG.sound.playMusic(Paths.getPath("music/" + "freakyMenu" + "." + "mp3","MUSIC",null),0);
			var _this = flixel_FlxG.sound.music;
			var Duration = 4;
			var From = 0;
			var To = 0.7;
			if(To == null) {
				To = 1;
			}
			if(From == null) {
				From = 0;
			}
			if(Duration == null) {
				Duration = 1;
			}
			if(_this._channel == null) {
				_this.play();
			}
			if(_this.fadeTween != null) {
				_this.fadeTween.cancel();
			}
			_this.fadeTween = flixel_tweens_FlxTween.num(From,To,Duration,{ onComplete : null},$bind(_this,_this.volumeTween));
		}
		Conductor.changeBPM(102);
		this.persistentUpdate = true;
		var bg = new flixel_FlxSprite().makeGraphic(flixel_FlxG.width,flixel_FlxG.height,-16777216);
		this.add(bg);
		this.logoBl = new flixel_FlxSprite(-150,-100);
		var library = null;
		this.logoBl.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "logoBumpin" + ".png","IMAGE",library),Paths.getPath("images/" + "logoBumpin" + ".xml","TEXT",library)));
		this.logoBl.set_antialiasing(true);
		this.logoBl.animation.addByPrefix("bump","logo bumpin",24);
		this.logoBl.animation.play("bump");
		this.logoBl.updateHitbox();
		this.logoBl.shader = this.swagShader.shader;
		this.gfDance = new flixel_FlxSprite(flixel_FlxG.width * 0.4,flixel_FlxG.height * 0.07);
		var library = null;
		this.gfDance.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "gfDanceTitle" + ".png","IMAGE",library),Paths.getPath("images/" + "gfDanceTitle" + ".xml","TEXT",library)));
		this.gfDance.animation.addByIndices("danceLeft","gfDance",[30,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"",24,false);
		this.gfDance.animation.addByIndices("danceRight","gfDance",[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"",24,false);
		this.gfDance.set_antialiasing(true);
		this.add(this.gfDance);
		this.gfDance.shader = this.swagShader.shader;
		this.add(this.logoBl);
		this.titleText = new flixel_FlxSprite(100,flixel_FlxG.height * 0.8);
		var library = null;
		this.titleText.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "titleEnter" + ".png","IMAGE",library),Paths.getPath("images/" + "titleEnter" + ".xml","TEXT",library)));
		this.titleText.animation.addByPrefix("idle","Press Enter to Begin",24);
		this.titleText.animation.addByPrefix("press","ENTER PRESSED",24);
		this.titleText.set_antialiasing(true);
		this.titleText.animation.play("idle");
		this.titleText.updateHitbox();
		this.add(this.titleText);
		var logo = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + "logo" + ".png","IMAGE",null));
		logo.screenCenter();
		logo.set_antialiasing(true);
		this.credGroup = new flixel_group_FlxTypedGroup();
		this.add(this.credGroup);
		this.textGroup = new flixel_group_FlxTypedGroup();
		this.blackScreen = new flixel_FlxSprite().makeGraphic(flixel_FlxG.width,flixel_FlxG.height,-16777216);
		this.credGroup.add(this.blackScreen);
		this.credTextShit = new Alphabet(0,0,"ninjamuffin99\nPhantomArcade\nkawaisprite\nevilsk8er",true);
		this.credTextShit.screenCenter();
		this.credTextShit.set_visible(false);
		this.ngSpr = new flixel_FlxSprite(0,flixel_FlxG.height * 0.52).loadGraphic(Paths.getPath("images/" + "newgrounds_logo" + ".png","IMAGE",null));
		this.add(this.ngSpr);
		this.ngSpr.set_visible(false);
		this.ngSpr.setGraphicSize(this.ngSpr.get_width() * 0.8 | 0);
		this.ngSpr.updateHitbox();
		this.ngSpr.screenCenter(flixel_util_FlxAxes.X);
		this.ngSpr.set_antialiasing(true);
		flixel_tweens_FlxTween.tween(this.credTextShit,{ y : this.credTextShit.y + 20},2.9,{ ease : flixel_tweens_FlxEase.quadInOut, type : 4});
		flixel_FlxG.mouse.set_visible(false);
		if(TitleState.initialized) {
			this.skipIntro();
		} else {
			TitleState.initialized = true;
		}
		if(flixel_FlxG.sound.music != null) {
			flixel_FlxG.sound.music.onComplete = function() {
				var nextState = new VideoState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			};
		}
	}
	,getIntroTextShit: function() {
		var fullText = openfl_utils_Assets.getText(Paths.getPath("data/" + "introText" + ".txt","TEXT",null));
		var firstArray = fullText.split("\n");
		var swagGoodArray = [];
		var _g = 0;
		while(_g < firstArray.length) {
			var i = firstArray[_g];
			++_g;
			swagGoodArray.push(i.split("--"));
		}
		return swagGoodArray;
	}
	,transitioning: null
	,isRainbow: null
	,update: function(elapsed) {
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(56,_this.status)) {
			var nextState = new CutsceneAnimTestState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
		if(flixel_FlxG.sound.music != null) {
			Conductor.songPosition = flixel_FlxG.sound.music._time;
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(70,_this.status)) {
			flixel_FlxG.set_fullscreen(!flixel_FlxG.get_fullscreen());
		}
		var _this = flixel_FlxG.keys.justPressed;
		var pressedEnter = _this.keyManager.checkStatus(13,_this.status);
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(53,_this.status)) {
			var nextState = new CutsceneAnimTestState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
		var gamepad = flixel_FlxG.gamepads.lastActive;
		if(gamepad != null) {
			var _this = gamepad.justPressed;
			var id = 7;
			var _this1 = _this.gamepad;
			var Status = _this.status;
			var tmp;
			switch(id) {
			case -2:
				tmp = _this1.anyButton(Status);
				break;
			case -1:
				tmp = !_this1.anyButton(Status);
				break;
			default:
				var RawID = _this1.mapping.getRawID(id);
				var button = _this1.buttons[RawID];
				tmp = button != null && button.hasState(Status);
			}
			if(tmp) {
				pressedEnter = true;
			}
		}
		if(pressedEnter && !this.transitioning && this.skippedIntro) {
			if(flixel_FlxG.sound.music != null) {
				flixel_FlxG.sound.music.onComplete = null;
			}
			var tmp = new Date().getDay() == 5;
			this.titleText.animation.play("press");
			flixel_FlxG.camera.flash(-1,1);
			flixel_FlxG.sound.play(Paths.sound("confirmMenu"),0.7);
			this.transitioning = true;
			if(!OutdatedSubState.leftState) {
				var nextState = new MainMenuState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			}
		}
		if(pressedEnter && !this.skippedIntro && TitleState.initialized) {
			this.skipIntro();
		}
		if(PlayerSettings.player1.controls._ui_left.check()) {
			this.swagShader.update(elapsed * 0.1);
		}
		if(PlayerSettings.player1.controls._ui_right.check()) {
			this.swagShader.update(-elapsed * 0.1);
		}
		MusicBeatState.prototype.update.call(this,elapsed);
	}
	,createCoolText: function(textArray) {
		var _g = 0;
		var _g1 = textArray.length;
		while(_g < _g1) {
			var i = _g++;
			var money = new Alphabet(0,0,textArray[i],true,false);
			money.screenCenter(flixel_util_FlxAxes.X);
			var _g2 = money;
			_g2.set_y(_g2.y + (i * 60 + 200));
			this.credGroup.add(money);
			this.textGroup.add(money);
		}
	}
	,addMoreText: function(text) {
		var coolText = new Alphabet(0,0,text,true,false);
		coolText.screenCenter(flixel_util_FlxAxes.X);
		var _g = coolText;
		_g.set_y(_g.y + (this.textGroup.length * 60 + 200));
		this.credGroup.add(coolText);
		this.textGroup.add(coolText);
	}
	,deleteCoolText: function() {
		while(this.textGroup.members.length > 0) {
			this.credGroup.remove(this.textGroup.members[0],true);
			this.textGroup.remove(this.textGroup.members[0],true);
		}
	}
	,beatHit: function() {
		MusicBeatState.prototype.beatHit.call(this);
		this.logoBl.animation.play("bump");
		this.danceLeft = !this.danceLeft;
		if(this.danceLeft) {
			this.gfDance.animation.play("danceRight");
		} else {
			this.gfDance.animation.play("danceLeft");
		}
		if(this.curBeat > this.lastBeat) {
			var _g = this.lastBeat;
			var _g1 = this.curBeat;
			while(_g < _g1) {
				var i = _g++;
				switch(i + 1) {
				case 1:
					this.createCoolText(["ninjamuffin99","phantomArcade","kawaisprite","evilsk8er"]);
					break;
				case 3:
					this.addMoreText("present");
					break;
				case 4:
					this.deleteCoolText();
					break;
				case 5:
					this.createCoolText(["In association","with"]);
					break;
				case 7:
					this.addMoreText("newgrounds");
					this.ngSpr.set_visible(true);
					break;
				case 8:
					this.deleteCoolText();
					this.ngSpr.set_visible(false);
					break;
				case 9:
					this.createCoolText([this.curWacky[0]]);
					break;
				case 11:
					this.addMoreText(this.curWacky[1]);
					break;
				case 12:
					this.deleteCoolText();
					break;
				case 13:
					this.addMoreText("Friday");
					break;
				case 14:
					this.addMoreText("Night");
					break;
				case 15:
					this.addMoreText("Funkin");
					break;
				case 16:
					this.skipIntro();
					break;
				}
			}
		}
		this.lastBeat = this.curBeat;
	}
	,skippedIntro: null
	,skipIntro: function() {
		if(!this.skippedIntro) {
			this.remove(this.ngSpr);
			flixel_FlxG.camera.flash(-1,4);
			this.remove(this.credGroup);
			this.skippedIntro = true;
		}
	}
	,__class__: TitleState
});
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return $hxEnums[o.__enum__];
};
Type.resolveEnum = function(name) {
	return $hxEnums[name];
};
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var ctorName = enm.__constructs__[a._hx_index];
		var params = enm[ctorName].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var UInt = {};
UInt.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
UInt.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var UnicodeString = {};
UnicodeString.__properties__ = {get_length:"get_length"};
UnicodeString.charCodeAt = function(this1,index) {
	if(index < 0) {
		return null;
	}
	var unicodeOffset = 0;
	var nativeOffset = 0;
	while(nativeOffset < this1.length) {
		var index1 = nativeOffset++;
		var c = this1.charCodeAt(index1);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | this1.charCodeAt(index1 + 1) & 1023;
		}
		var c1 = c;
		if(unicodeOffset == index) {
			return c1;
		}
		if(c1 >= 65536) {
			++nativeOffset;
		}
		++unicodeOffset;
	}
	return null;
};
UnicodeString.substr = function(this1,pos,len) {
	if(pos < 0) {
		pos = UnicodeString.get_length(this1) + pos;
		if(pos < 0) {
			pos = 0;
		}
	}
	if(len != null) {
		if(len < 0) {
			len = UnicodeString.get_length(this1) + len;
		}
		if(len <= 0) {
			return "";
		}
	}
	var unicodeOffset = 0;
	var nativeOffset = 0;
	var fromOffset = -1;
	var subLength = 0;
	while(nativeOffset < this1.length) {
		var c = this1.charCodeAt(nativeOffset);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | this1.charCodeAt(nativeOffset + 1) & 1023;
		}
		var c1 = c;
		if(unicodeOffset >= pos) {
			if(fromOffset < 0) {
				if(len == null) {
					return HxOverrides.substr(this1,nativeOffset,null);
				}
				fromOffset = nativeOffset;
			}
			++subLength;
			if(subLength >= len) {
				var lastOffset = c1 < 65536 ? nativeOffset : nativeOffset + 1;
				return HxOverrides.substr(this1,fromOffset,lastOffset - fromOffset + 1);
			}
		}
		nativeOffset += c1 >= 65536 ? 2 : 1;
		++unicodeOffset;
	}
	if(fromOffset < 0) {
		return "";
	} else {
		return HxOverrides.substr(this1,fromOffset,null);
	}
};
UnicodeString.get_length = function(this1) {
	var l = 0;
	var _g_offset = 0;
	var _g_s = this1;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var c2 = c1;
		++l;
	}
	return l;
};
var VideoState = function(TransIn,TransOut) {
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["VideoState"] = VideoState;
VideoState.__name__ = "VideoState";
VideoState.__super__ = MusicBeatState;
VideoState.prototype = $extend(MusicBeatState.prototype,{
	video: null
	,netStream: null
	,overlay: null
	,create: function() {
		MusicBeatState.prototype.create.call(this);
		VideoState.seenVideo = true;
		flixel_FlxG.save.data.seenVideo = true;
		flixel_FlxG.save.flush();
		if(flixel_FlxG.sound.music != null) {
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
		}
		this.video = new openfl_media_Video();
		flixel_FlxG.addChildBelowMouse(this.video);
		var netConnection = new openfl_net_NetConnection();
		netConnection.connect(null);
		this.netStream = new openfl_net_NetStream(netConnection);
		this.netStream.client = { onMetaData : $bind(this,this.client_onMetaData)};
		this.netStream.addEventListener("asyncError",$bind(this,this.netStream_onAsyncError));
		netConnection.addEventListener("netStatus",$bind(this,this.netConnection_onNetStatus));
		this.netStream.play(Paths.getPath("music/" + "kickstarterTrailer" + ".mp4","TEXT",null));
		this.overlay = new openfl_display_Sprite();
		this.overlay.get_graphics().beginFill(0,0.5);
		this.overlay.get_graphics().drawRect(0,0,1280,720);
		this.overlay.addEventListener("mouseDown",$bind(this,this.overlay_onMouseDown));
		this.overlay.set_buttonMode(true);
	}
	,update: function(elapsed) {
		if(PlayerSettings.player1.controls._accept.check()) {
			this.finishVid();
		}
		MusicBeatState.prototype.update.call(this,elapsed);
	}
	,finishVid: function() {
		this.netStream.dispose();
		if(flixel_FlxG.game.contains(this.video)) {
			flixel_FlxG.game.removeChild(this.video);
		}
		TitleState.initialized = false;
		var nextState = new TitleState();
		if(flixel_FlxG.game._state.switchTo(nextState)) {
			flixel_FlxG.game._requestedState = nextState;
		}
	}
	,client_onMetaData: function(e) {
		this.video.attachNetStream(this.netStream);
		this.video.set_width(this.video.get_videoWidth());
		this.video.set_height(this.video.get_videoHeight());
	}
	,netStream_onAsyncError: function(e) {
		haxe_Log.trace("Error loading video",{ fileName : "source/VideoState.hx", lineNumber : 85, className : "VideoState", methodName : "netStream_onAsyncError"});
	}
	,netConnection_onNetStatus: function(e) {
		if(e.info.code == "NetStream.Play.Complete") {
			this.finishVid();
		}
		haxe_Log.trace(e.toString(),{ fileName : "source/VideoState.hx", lineNumber : 94, className : "VideoState", methodName : "netConnection_onNetStatus"});
	}
	,overlay_onMouseDown: function(e) {
		this.netStream.get_soundTransform().volume = 0.2;
		this.netStream.get_soundTransform().pan = -1;
		openfl_Lib.get_current().stage.removeChild(this.overlay);
	}
	,__class__: VideoState
});
var WiggleEffect = function() {
	this.shader = new WiggleShader();
	this.shader.uTime.value = [0];
};
$hxClasses["WiggleEffect"] = WiggleEffect;
WiggleEffect.__name__ = "WiggleEffect";
WiggleEffect.prototype = {
	shader: null
	,update: function(elapsed) {
		this.shader.uTime.value[0] += elapsed;
	}
	,__class__: WiggleEffect
};
var openfl_display_Shader = function(code) {
	this.byteCode = code;
	this.precisionHint = 1;
	this.__glSourceDirty = true;
	this.__numPasses = 1;
	this.__data = openfl_display_ShaderData._new(code);
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = "openfl.display.Shader";
openfl_display_Shader.prototype = {
	byteCode: null
	,glProgram: null
	,precisionHint: null
	,program: null
	,__alpha: null
	,__bitmap: null
	,__colorMultiplier: null
	,__colorOffset: null
	,__context: null
	,__data: null
	,__glFragmentSource: null
	,__glSourceDirty: null
	,__glVertexSource: null
	,__hasColorTransform: null
	,__inputBitmapData: null
	,__isGenerated: null
	,__matrix: null
	,__numPasses: null
	,__paramBool: null
	,__paramFloat: null
	,__paramInt: null
	,__position: null
	,__textureCoord: null
	,__texture: null
	,__textureSize: null
	,__clearUseArray: function() {
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
		var _g = 0;
		var _g1 = this.__paramInt;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
	}
	,__createGLShader: function(source,type) {
		var gl = this.__context.gl;
		var shader = gl.createShader(type);
		gl.shaderSource(shader,source);
		gl.compileShader(shader);
		var shaderInfoLog = gl.getShaderInfoLog(shader);
		var compileStatus = gl.getShaderParameter(shader,gl.COMPILE_STATUS);
		if(shaderInfoLog != null || compileStatus == 0) {
			var message = compileStatus == 0 ? "Error" : "Info";
			message += type == gl.VERTEX_SHADER ? " compiling vertex shader" : " compiling fragment shader";
			message += "\n" + shaderInfoLog;
			message += "\n" + source;
			if(compileStatus == 0) {
				lime_utils_Log.error(message,{ fileName : "openfl/display/Shader.hx", lineNumber : 334, className : "openfl.display.Shader", methodName : "__createGLShader"});
			} else if(shaderInfoLog != null) {
				lime_utils_Log.debug(message,{ fileName : "openfl/display/Shader.hx", lineNumber : 335, className : "openfl.display.Shader", methodName : "__createGLShader"});
			}
		}
		return shader;
	}
	,__createGLProgram: function(vertexSource,fragmentSource) {
		var gl = this.__context.gl;
		var vertexShader = this.__createGLShader(vertexSource,gl.VERTEX_SHADER);
		var fragmentShader = this.__createGLShader(fragmentSource,gl.FRAGMENT_SHADER);
		var program = gl.createProgram();
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var param = _g1[_g];
			++_g;
			if(param.name.indexOf("Position") > -1 && StringTools.startsWith(param.name,"openfl_")) {
				gl.bindAttribLocation(program,0,param.name);
				break;
			}
		}
		gl.attachShader(program,vertexShader);
		gl.attachShader(program,fragmentShader);
		gl.linkProgram(program);
		if(gl.getProgramParameter(program,gl.LINK_STATUS) == 0) {
			var message = "Unable to initialize the shader program";
			message += "\n" + gl.getProgramInfoLog(program);
			lime_utils_Log.error(message,{ fileName : "openfl/display/Shader.hx", lineNumber : 368, className : "openfl.display.Shader", methodName : "__createGLProgram"});
		}
		return program;
	}
	,__disable: function() {
		if(this.program != null) {
			this.__disableGL();
		}
	}
	,__disableGL: function() {
		var gl = this.__context.gl;
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.__disableGL(this.__context,textureCount);
			++textureCount;
			if(textureCount == gl.MAX_TEXTURE_IMAGE_UNITS) {
				break;
			}
		}
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__disableGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__disableGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramInt;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__disableGL(this.__context);
		}
		this.__context.__bindGLArrayBuffer(null);
		if(this.__context.__context.type == "opengl") {
			gl.disable(gl.TEXTURE_2D);
		}
	}
	,__enable: function() {
		this.__init();
		if(this.program != null) {
			this.__enableGL();
		}
	}
	,__enableGL: function() {
		var textureCount = 0;
		var gl = this.__context.gl;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			gl.uniform1i(input.index,textureCount);
			++textureCount;
		}
		if(this.__context.__context.type == "opengl" && textureCount > 0) {
			gl.enable(gl.TEXTURE_2D);
		}
	}
	,__init: function() {
		if(this.__data == null) {
			this.__data = openfl_display_ShaderData._new(null);
		}
		if(this.__glFragmentSource != null && this.__glVertexSource != null && (this.program == null || this.__glSourceDirty)) {
			this.__initGL();
		}
	}
	,__initGL: function() {
		if(this.__glSourceDirty || this.__paramBool == null) {
			this.__glSourceDirty = false;
			this.program = null;
			this.__inputBitmapData = [];
			this.__paramBool = [];
			this.__paramFloat = [];
			this.__paramInt = [];
			this.__processGLData(this.get_glVertexSource(),"attribute");
			this.__processGLData(this.get_glVertexSource(),"uniform");
			this.__processGLData(this.get_glFragmentSource(),"uniform");
		}
		if(this.__context != null && this.program == null) {
			var gl = this.__context.gl;
			var prefix = this.precisionHint == 1 ? "precision mediump float;\n" : "precision lowp float;\n";
			var vertex = prefix + this.get_glVertexSource();
			var fragment = prefix + this.get_glFragmentSource();
			var id = vertex + fragment;
			if(Object.prototype.hasOwnProperty.call(this.__context.__programs.h,id)) {
				this.program = this.__context.__programs.h[id];
			} else {
				this.program = this.__context.createProgram(1);
				this.program.__glProgram = this.__createGLProgram(vertex,fragment);
				this.__context.__programs.h[id] = this.program;
			}
			if(this.program != null) {
				this.glProgram = this.program.__glProgram;
				var _g = 0;
				var _g1 = this.__inputBitmapData;
				while(_g < _g1.length) {
					var input = _g1[_g];
					++_g;
					if(input.__isUniform) {
						input.index = gl.getUniformLocation(this.glProgram,input.name);
					} else {
						input.index = gl.getAttribLocation(this.glProgram,input.name);
					}
				}
				var _g = 0;
				var _g1 = this.__paramBool;
				while(_g < _g1.length) {
					var parameter = _g1[_g];
					++_g;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g = 0;
				var _g1 = this.__paramFloat;
				while(_g < _g1.length) {
					var parameter = _g1[_g];
					++_g;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g = 0;
				var _g1 = this.__paramInt;
				while(_g < _g1.length) {
					var parameter = _g1[_g];
					++_g;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
			}
		}
	}
	,__processGLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") {
			regex = new EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		} else {
			regex = new EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		}
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if(StringTools.startsWith(name,"gl_")) {
				continue;
			}
			var isUniform = storageType == "uniform";
			if(StringTools.startsWith(type,"sampler")) {
				var input = new openfl_display_ShaderInput();
				input.name = name;
				input.__isUniform = isUniform;
				this.__inputBitmapData.push(input);
				switch(name) {
				case "bitmap":
					this.__bitmap = input;
					break;
				case "openfl_Texture":
					this.__texture = input;
					break;
				default:
				}
				this.__data[name] = input;
				if(this.__isGenerated) {
					this[name] = input;
				}
			} else if(!Object.prototype.hasOwnProperty.call(this.__data,name) || Reflect.field(this.__data,name) == null) {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = 0;
					break;
				case "bvec2":
					parameterType = 1;
					break;
				case "bvec3":
					parameterType = 2;
					break;
				case "bvec4":
					parameterType = 3;
					break;
				case "dvec2":case "vec2":
					parameterType = 5;
					break;
				case "dvec3":case "vec3":
					parameterType = 6;
					break;
				case "double":case "float":
					parameterType = 4;
					break;
				case "ivec3":case "uvec3":
					parameterType = 10;
					break;
				case "ivec4":case "uvec4":
					parameterType = 11;
					break;
				case "mat2":case "mat2x2":
					parameterType = 12;
					break;
				case "mat2x3":
					parameterType = 13;
					break;
				case "mat2x4":
					parameterType = 14;
					break;
				case "mat3x2":
					parameterType = 15;
					break;
				case "mat3":case "mat3x3":
					parameterType = 16;
					break;
				case "mat3x4":
					parameterType = 17;
					break;
				case "mat4":case "mat4x4":
					parameterType = 20;
					break;
				case "mat4x2":
					parameterType = 18;
					break;
				case "mat4x3":
					parameterType = 19;
					break;
				case "int":case "uint":
					parameterType = 8;
					break;
				case "ivec2":case "uvec2":
					parameterType = 9;
					break;
				case "dvec4":case "vec4":
					parameterType = 7;
					break;
				default:
					parameterType = null;
				}
				var length;
				switch(parameterType) {
				case 1:case 5:case 9:
					length = 2;
					break;
				case 3:case 7:case 11:case 12:
					length = 4;
					break;
				case 2:case 6:case 10:
					length = 3;
					break;
				case 16:
					length = 9;
					break;
				case 20:
					length = 16;
					break;
				default:
					length = 1;
				}
				var arrayLength;
				switch(parameterType) {
				case 12:
					arrayLength = 2;
					break;
				case 16:
					arrayLength = 3;
					break;
				case 20:
					arrayLength = 4;
					break;
				default:
					arrayLength = 1;
				}
				switch(parameterType) {
				case 0:case 1:case 2:case 3:
					var parameter = new openfl_display_ShaderParameter();
					parameter.set_name(name);
					parameter.type = parameterType;
					parameter.__arrayLength = arrayLength;
					parameter.__isBool = true;
					parameter.__isUniform = isUniform;
					parameter.__length = length;
					this.__paramBool.push(parameter);
					if(name == "openfl_HasColorTransform") {
						this.__hasColorTransform = parameter;
					}
					this.__data[name] = parameter;
					if(this.__isGenerated) {
						this[name] = parameter;
					}
					break;
				case 8:case 9:case 10:case 11:
					var parameter1 = new openfl_display_ShaderParameter();
					parameter1.set_name(name);
					parameter1.type = parameterType;
					parameter1.__arrayLength = arrayLength;
					parameter1.__isInt = true;
					parameter1.__isUniform = isUniform;
					parameter1.__length = length;
					this.__paramInt.push(parameter1);
					this.__data[name] = parameter1;
					if(this.__isGenerated) {
						this[name] = parameter1;
					}
					break;
				default:
					var parameter2 = new openfl_display_ShaderParameter();
					parameter2.set_name(name);
					parameter2.type = parameterType;
					parameter2.__arrayLength = arrayLength;
					if(arrayLength > 0) {
						var elements = arrayLength * arrayLength;
						var array = null;
						var vector = null;
						var view = null;
						var buffer = null;
						var len = null;
						var this1;
						if(elements != null) {
							this1 = new Float32Array(elements);
						} else if(array != null) {
							this1 = new Float32Array(array);
						} else if(vector != null) {
							this1 = new Float32Array(vector.__array);
						} else if(view != null) {
							this1 = new Float32Array(view);
						} else if(buffer != null) {
							if(len == null) {
								this1 = new Float32Array(buffer,0);
							} else {
								this1 = new Float32Array(buffer,0,len);
							}
						} else {
							this1 = null;
						}
						parameter2.__uniformMatrix = this1;
					}
					parameter2.__isFloat = true;
					parameter2.__isUniform = isUniform;
					parameter2.__length = length;
					this.__paramFloat.push(parameter2);
					if(StringTools.startsWith(name,"openfl_")) {
						switch(name) {
						case "openfl_Alpha":
							this.__alpha = parameter2;
							break;
						case "openfl_ColorMultiplier":
							this.__colorMultiplier = parameter2;
							break;
						case "openfl_ColorOffset":
							this.__colorOffset = parameter2;
							break;
						case "openfl_Matrix":
							this.__matrix = parameter2;
							break;
						case "openfl_Position":
							this.__position = parameter2;
							break;
						case "openfl_TextureCoord":
							this.__textureCoord = parameter2;
							break;
						case "openfl_TextureSize":
							this.__textureSize = parameter2;
							break;
						default:
						}
					}
					this.__data[name] = parameter2;
					if(this.__isGenerated) {
						this[name] = parameter2;
					}
				}
			}
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	}
	,__update: function() {
		if(this.program != null) {
			this.__updateGL();
		}
	}
	,__updateFromBuffer: function(shaderBuffer,bufferOffset) {
		if(this.program != null) {
			this.__updateGLFromBuffer(shaderBuffer,bufferOffset);
		}
	}
	,__updateGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.__updateGL(this.__context,textureCount);
			++textureCount;
		}
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__updateGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__updateGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramInt;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__updateGL(this.__context);
		}
	}
	,__updateGLFromBuffer: function(shaderBuffer,bufferOffset) {
		var textureCount = 0;
		var input;
		var inputData;
		var inputFilter;
		var inputMipFilter;
		var inputWrap;
		var _g = 0;
		var _g1 = shaderBuffer.inputCount;
		while(_g < _g1) {
			var i = _g++;
			input = shaderBuffer.inputRefs[i];
			inputData = shaderBuffer.inputs[i];
			inputFilter = shaderBuffer.inputFilter[i];
			inputMipFilter = shaderBuffer.inputMipFilter[i];
			inputWrap = shaderBuffer.inputWrap[i];
			if(inputData != null) {
				input.__updateGL(this.__context,textureCount,inputData,inputFilter,inputMipFilter,inputWrap);
				++textureCount;
			}
		}
		var gl = this.__context.gl;
		if(shaderBuffer.paramDataLength > 0) {
			if(shaderBuffer.paramDataBuffer == null) {
				shaderBuffer.paramDataBuffer = gl.createBuffer();
			}
			this.__context.__bindGLArrayBuffer(shaderBuffer.paramDataBuffer);
			lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,shaderBuffer.paramData,gl.DYNAMIC_DRAW);
		} else {
			this.__context.__bindGLArrayBuffer(null);
		}
		var boolIndex = 0;
		var floatIndex = 0;
		var intIndex = 0;
		var boolCount = shaderBuffer.paramBoolCount;
		var floatCount = shaderBuffer.paramFloatCount;
		var paramData = shaderBuffer.paramData;
		var boolRef;
		var floatRef;
		var intRef;
		var hasOverride;
		var overrideBoolValue = null;
		var overrideFloatValue = null;
		var overrideIntValue = null;
		var _g = 0;
		var _g1 = shaderBuffer.paramCount;
		while(_g < _g1) {
			var i = _g++;
			hasOverride = false;
			if(i < boolCount) {
				boolRef = shaderBuffer.paramRefs_Bool[boolIndex];
				var _g2 = 0;
				var _g3 = shaderBuffer.overrideBoolCount;
				while(_g2 < _g3) {
					var j = _g2++;
					if(boolRef.name == shaderBuffer.overrideBoolNames[j]) {
						overrideBoolValue = shaderBuffer.overrideBoolValues[j];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					boolRef.__updateGL(this.__context,overrideBoolValue);
				} else {
					boolRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i],shaderBuffer.paramLengths[i],bufferOffset);
				}
				++boolIndex;
			} else if(i < boolCount + floatCount) {
				floatRef = shaderBuffer.paramRefs_Float[floatIndex];
				var _g4 = 0;
				var _g5 = shaderBuffer.overrideFloatCount;
				while(_g4 < _g5) {
					var j1 = _g4++;
					if(floatRef.name == shaderBuffer.overrideFloatNames[j1]) {
						overrideFloatValue = shaderBuffer.overrideFloatValues[j1];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					floatRef.__updateGL(this.__context,overrideFloatValue);
				} else {
					floatRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i],shaderBuffer.paramLengths[i],bufferOffset);
				}
				++floatIndex;
			} else {
				intRef = shaderBuffer.paramRefs_Int[intIndex];
				var _g6 = 0;
				var _g7 = shaderBuffer.overrideIntCount;
				while(_g6 < _g7) {
					var j2 = _g6++;
					if(intRef.name == shaderBuffer.overrideIntNames[j2]) {
						overrideIntValue = shaderBuffer.overrideIntValues[j2];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					intRef.__updateGL(this.__context,overrideIntValue);
				} else {
					intRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i],shaderBuffer.paramLengths[i],bufferOffset);
				}
				++intIndex;
			}
		}
	}
	,get_data: function() {
		if(this.__glSourceDirty || this.__data == null) {
			this.__init();
		}
		return this.__data;
	}
	,set_data: function(value) {
		return this.__data = value;
	}
	,get_glFragmentSource: function() {
		return this.__glFragmentSource;
	}
	,set_glFragmentSource: function(value) {
		if(value != this.__glFragmentSource) {
			this.__glSourceDirty = true;
		}
		return this.__glFragmentSource = value;
	}
	,get_glVertexSource: function() {
		return this.__glVertexSource;
	}
	,set_glVertexSource: function(value) {
		if(value != this.__glVertexSource) {
			this.__glSourceDirty = true;
		}
		return this.__glVertexSource = value;
	}
	,__class__: openfl_display_Shader
	,__properties__: {set_glVertexSource:"set_glVertexSource",get_glVertexSource:"get_glVertexSource",set_glFragmentSource:"set_glFragmentSource",get_glFragmentSource:"get_glFragmentSource",set_data:"set_data",get_data:"get_data"}
};
var openfl_display_GraphicsShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tvoid main(void) {\n\n\t\t\tvec4 color = texture2D (bitmap, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}\n\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t}";
	}
	openfl_display_Shader.call(this,code);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.display.GraphicsShader"] = openfl_display_GraphicsShader;
openfl_display_GraphicsShader.__name__ = "openfl.display.GraphicsShader";
openfl_display_GraphicsShader.__super__ = openfl_display_Shader;
openfl_display_GraphicsShader.prototype = $extend(openfl_display_Shader.prototype,{
	openfl_Alpha: null
	,openfl_ColorMultiplier: null
	,openfl_ColorOffset: null
	,openfl_Position: null
	,openfl_TextureCoord: null
	,openfl_Matrix: null
	,openfl_HasColorTransform: null
	,openfl_TextureSize: null
	,bitmap: null
	,__class__: openfl_display_GraphicsShader
});
var flixel_graphics_tile_FlxGraphicsShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tuniform bool hasTransform;\n\t\tuniform bool hasColorTransform;\n\n\t\tvec4 flixel_texture2D(sampler2D bitmap, vec2 coord)\n\t\t{\n\t\t\tvec4 color = texture2D(bitmap, coord);\n\t\t\tif (!hasTransform)\n\t\t\t{\n\t\t\t\treturn color;\n\t\t\t}\n\n\t\t\tif (color.a == 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t}\n\n\t\t\tif (!hasColorTransform)\n\t\t\t{\n\t\t\t\treturn color * openfl_Alphav;\n\t\t\t}\n\n\t\t\tcolor = vec4(color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4(0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp(openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t}\n\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t}\n\t\n\t\t\n\t\tvoid main(void)\n\t\t{\n\t\t\tgl_FragColor = flixel_texture2D(bitmap, openfl_TextureCoordv);\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "\n\t\tattribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\t\n\t\tattribute float alpha;\n\t\tattribute vec4 colorMultiplier;\n\t\tattribute vec4 colorOffset;\n\t\tuniform bool hasColorTransform;\n\t\t\n\t\tvoid main(void)\n\t\t{\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t\t\n\t\t\topenfl_Alphav = openfl_Alpha * alpha;\n\t\t\t\n\t\t\tif (hasColorTransform)\n\t\t\t{\n\t\t\t\topenfl_ColorOffsetv = colorOffset / 255.0;\n\t\t\t\topenfl_ColorMultiplierv = colorMultiplier;\n\t\t\t}\n\t\t}";
	}
	openfl_display_GraphicsShader.call(this);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["flixel.graphics.tile.FlxGraphicsShader"] = flixel_graphics_tile_FlxGraphicsShader;
flixel_graphics_tile_FlxGraphicsShader.__name__ = "flixel.graphics.tile.FlxGraphicsShader";
flixel_graphics_tile_FlxGraphicsShader.__super__ = openfl_display_GraphicsShader;
flixel_graphics_tile_FlxGraphicsShader.prototype = $extend(openfl_display_GraphicsShader.prototype,{
	alpha: null
	,colorMultiplier: null
	,colorOffset: null
	,hasColorTransform: null
	,hasTransform: null
	,__class__: flixel_graphics_tile_FlxGraphicsShader
});
var WiggleShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tuniform bool hasTransform;\n\t\tuniform bool hasColorTransform;\n\n\t\tvec4 flixel_texture2D(sampler2D bitmap, vec2 coord)\n\t\t{\n\t\t\tvec4 color = texture2D(bitmap, coord);\n\t\t\tif (!hasTransform)\n\t\t\t{\n\t\t\t\treturn color;\n\t\t\t}\n\n\t\t\tif (color.a == 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t}\n\n\t\t\tif (!hasColorTransform)\n\t\t\t{\n\t\t\t\treturn color * openfl_Alphav;\n\t\t\t}\n\n\t\t\tcolor = vec4(color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4(0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp(openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t}\n\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t}\n\t\n\n\t\t//uniform float tx, ty; // x,y waves phase\n\t\tuniform float uTime;\n\t\t\n\t\tconst int EFFECT_TYPE_DREAMY = 0;\n\t\tconst int EFFECT_TYPE_WAVY = 1;\n\t\tconst int EFFECT_TYPE_HEAT_WAVE_HORIZONTAL = 2;\n\t\tconst int EFFECT_TYPE_HEAT_WAVE_VERTICAL = 3;\n\t\tconst int EFFECT_TYPE_FLAG = 4;\n\t\t\n\t\tuniform int effectType;\n\t\t\n\t\t/**\n\t\t * How fast the waves move over time\n\t\t */\n\t\tuniform float uSpeed;\n\t\t\n\t\t/**\n\t\t * Number of waves over time\n\t\t */\n\t\tuniform float uFrequency;\n\t\t\n\t\t/**\n\t\t * How much the pixels are going to stretch over the waves\n\t\t */\n\t\tuniform float uWaveAmplitude;\n\n\t\tvec2 sineWave(vec2 pt)\n\t\t{\n\t\t\tfloat x = 0.0;\n\t\t\tfloat y = 0.0;\n\t\t\t\n\t\t\tif (effectType == EFFECT_TYPE_DREAMY) \n\t\t\t{\n\t\t\t\tfloat offsetX = sin(pt.y * uFrequency + uTime * uSpeed) * uWaveAmplitude;\n                pt.x += offsetX; // * (pt.y - 1.0); // <- Uncomment to stop bottom part of the screen from moving\n\t\t\t}\n\t\t\telse if (effectType == EFFECT_TYPE_WAVY) \n\t\t\t{\n\t\t\t\tfloat offsetY = sin(pt.x * uFrequency + uTime * uSpeed) * uWaveAmplitude;\n\t\t\t\tpt.y += offsetY; // * (pt.y - 1.0); // <- Uncomment to stop bottom part of the screen from moving\n\t\t\t}\n\t\t\telse if (effectType == EFFECT_TYPE_HEAT_WAVE_HORIZONTAL)\n\t\t\t{\n\t\t\t\tx = sin(pt.x * uFrequency + uTime * uSpeed) * uWaveAmplitude;\n\t\t\t}\n\t\t\telse if (effectType == EFFECT_TYPE_HEAT_WAVE_VERTICAL)\n\t\t\t{\n\t\t\t\ty = sin(pt.y * uFrequency + uTime * uSpeed) * uWaveAmplitude;\n\t\t\t}\n\t\t\telse if (effectType == EFFECT_TYPE_FLAG)\n\t\t\t{\n\t\t\t\ty = sin(pt.y * uFrequency + 10.0 * pt.x + uTime * uSpeed) * uWaveAmplitude;\n\t\t\t\tx = sin(pt.x * uFrequency + 5.0 * pt.y + uTime * uSpeed) * uWaveAmplitude;\n\t\t\t}\n\t\t\t\n\t\t\treturn vec2(pt.x + x, pt.y + y);\n\t\t}\n\n\t\tvoid main()\n\t\t{\n\t\t\tvec2 uv = sineWave(openfl_TextureCoordv);\n\t\t\tgl_FragColor = texture2D(bitmap, uv);\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "\n\t\tattribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\t\n\t\tattribute float alpha;\n\t\tattribute vec4 colorMultiplier;\n\t\tattribute vec4 colorOffset;\n\t\tuniform bool hasColorTransform;\n\t\t\n\t\tvoid main(void)\n\t\t{\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t\t\n\t\t\topenfl_Alphav = openfl_Alpha * alpha;\n\t\t\t\n\t\t\tif (hasColorTransform)\n\t\t\t{\n\t\t\t\topenfl_ColorOffsetv = colorOffset / 255.0;\n\t\t\t\topenfl_ColorMultiplierv = colorMultiplier;\n\t\t\t}\n\t\t}";
	}
	flixel_graphics_tile_FlxGraphicsShader.call(this);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["WiggleShader"] = WiggleShader;
WiggleShader.__name__ = "WiggleShader";
WiggleShader.__super__ = flixel_graphics_tile_FlxGraphicsShader;
WiggleShader.prototype = $extend(flixel_graphics_tile_FlxGraphicsShader.prototype,{
	tx: null
	,uTime: null
	,effectType: null
	,uSpeed: null
	,uFrequency: null
	,uWaveAmplitude: null
	,__class__: WiggleShader
});
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return haxe_ds_StringMap.keysIterator(this.attributeMap.h);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,insertChild: function(x,pos) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			HxOverrides.remove(x.parent.children,x);
		}
		this.children.splice(pos,0,x);
		x.parent = this;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var animate_FlxSymbol = function(x,y,coolParsed) {
	this._skewMatrix = new openfl_geom_Matrix();
	this.transformMatrix = new openfl_geom_Matrix();
	this.drawQueue = [];
	this.symbolMap = new haxe_ds_StringMap();
	this.symbolAtlasShit = new haxe_ds_StringMap();
	flixel_FlxSprite.call(this,x,y);
	this.coolParse = coolParsed;
	var hasSymbolDictionary = Object.prototype.hasOwnProperty.call(this.coolParse,"SD");
	if(hasSymbolDictionary) {
		this.symbolAtlasShit = this.parseSymbolDictionary(this.coolParse);
	}
};
$hxClasses["animate.FlxSymbol"] = animate_FlxSymbol;
animate_FlxSymbol.__name__ = "animate.FlxSymbol";
animate_FlxSymbol.__super__ = flixel_FlxSprite;
animate_FlxSymbol.prototype = $extend(flixel_FlxSprite.prototype,{
	hasFrameByPass: null
	,symbolAtlasShit: null
	,symbolMap: null
	,drawQueue: null
	,daFrame: null
	,nestDepth: null
	,transformMatrix: null
	,_skewMatrix: null
	,matrixExposed: null
	,coolParse: null
	,draw: function() {
		flixel_FlxSprite.prototype.draw.call(this);
	}
	,renderFrame: function(TL,coolParsed,traceShit) {
		if(traceShit == null) {
			traceShit = false;
		}
		this.drawQueue = [];
		var _g = 0;
		var _g1 = TL.L;
		while(_g < _g1.length) {
			var layer = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = layer.FR;
			while(_g2 < _g3.length) {
				var swagFrame = _g3[_g2];
				++_g2;
				if(this.daFrame >= swagFrame.I && this.daFrame < swagFrame.I + swagFrame.DU) {
					var _g4 = 0;
					var _g5 = swagFrame.E;
					while(_g4 < _g5.length) {
						var element = _g5[_g4];
						++_g4;
						if(Object.prototype.hasOwnProperty.call(element,"ASI")) {
							var m3d = element.ASI.M3D;
							var dumbassMatrix = new openfl_geom_Matrix(m3d[0],m3d[1],m3d[4],m3d[5],m3d[12],m3d[13]);
							var spr = new animate_FlxSymbol(0,0,coolParsed);
							this.matrixExposed = true;
							spr.set_frames(this.frames);
							spr.set_frame(spr.frames.framesHash.h[element.ASI.N]);
							dumbassMatrix.concat(this._matrix);
							spr.matrixExposed = true;
							spr.transformMatrix.concat(dumbassMatrix);
							spr.origin.set();
							var _g6 = spr.origin;
							_g6.set_x(_g6.x + this.origin.x);
							var _g7 = spr.origin;
							_g7.set_y(_g7.y + this.origin.y);
							spr.set_antialiasing(true);
							spr.draw();
						} else {
							var nestedSymbol = this.symbolMap.h[element.SI.SN];
							var nestedShit = new animate_FlxSymbol(0,0,this.coolParse);
							nestedShit.set_frames(this.frames);
							var swagMatrix = new flixel_math_FlxMatrix(element.SI.M3D[0],element.SI.M3D[1],element.SI.M3D[4],element.SI.M3D[5],element.SI.M3D[12],element.SI.M3D[13]);
							swagMatrix.concat(this._matrix);
							nestedShit._matrix.concat(swagMatrix);
							nestedShit.origin.set(element.SI.TRP.x,element.SI.TRP.y);
							var tmp = Object.prototype.hasOwnProperty.call(this.symbolAtlasShit.h,nestedSymbol.SN);
							nestedShit.hasFrameByPass = true;
							nestedShit.nestDepth = this.nestDepth + 1;
							nestedShit.renderFrame(nestedSymbol.TL,coolParsed);
						}
					}
				}
			}
		}
	}
	,changeFrame: function(frameChange) {
		if(frameChange == null) {
			frameChange = 0;
		}
		this.daFrame += frameChange;
	}
	,parseSymbolDictionary: function(coolParsed) {
		var awesomeMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = coolParsed.SD.S;
		while(_g < _g1.length) {
			var symbol = _g1[_g];
			++_g;
			this.symbolMap.h[symbol.SN] = symbol;
			var symbolName = symbol.SN;
			var _g2 = 0;
			var _g3 = symbol.TL.L;
			while(_g2 < _g3.length) {
				var layer = _g3[_g2];
				++_g2;
				var _g4 = 0;
				var _g5 = layer.FR;
				while(_g4 < _g5.length) {
					var frame = _g5[_g4];
					++_g4;
					var _g6 = 0;
					var _g7 = frame.E;
					while(_g6 < _g7.length) {
						var element = _g7[_g6];
						++_g6;
						if(Object.prototype.hasOwnProperty.call(element,"ASI")) {
							awesomeMap.h[symbolName] = element.ASI.N;
						}
					}
				}
			}
		}
		return awesomeMap;
	}
	,drawComplex: function(camera) {
		var doFlipX = this.flipX != this._frame.flipX;
		var doFlipY = this.flipY != this._frame.flipY;
		this._frame.prepareMatrix(this._matrix,0,this.animation._curAnim != null ? doFlipX != this.animation._curAnim.flipX : doFlipX,this.animation._curAnim != null ? doFlipY != this.animation._curAnim.flipY : doFlipY);
		this._matrix.translate(-this.origin.x,-this.origin.y);
		this._matrix.scale(this.scale.x,this.scale.y);
		if(this.matrixExposed) {
			this._matrix.concat(this.transformMatrix);
		} else {
			if(this.bakedRotationAngle <= 0) {
				if(this._angleChanged) {
					var radians = this.angle * (Math.PI / 180);
					this._sinAngle = Math.sin(radians);
					this._cosAngle = Math.cos(radians);
					this._angleChanged = false;
				}
				if(this.angle != 0) {
					var _this = this._matrix;
					var cos = this._cosAngle;
					var sin = this._sinAngle;
					var a1 = _this.a * cos - _this.b * sin;
					_this.b = _this.a * sin + _this.b * cos;
					_this.a = a1;
					var c1 = _this.c * cos - _this.d * sin;
					_this.d = _this.c * sin + _this.d * cos;
					_this.c = c1;
					var tx1 = _this.tx * cos - _this.ty * sin;
					_this.ty = _this.tx * sin + _this.ty * cos;
					_this.tx = tx1;
				}
			}
			this._matrix.concat(this._skewMatrix);
		}
		this._point.addPoint(this.origin);
		if(this.isPixelPerfectRender(camera)) {
			this._point.set_x(Math.floor(this._point.x));
			this._point.set_y(Math.floor(this._point.y));
		}
		this._matrix.translate(this._point.x,this._point.y);
		camera.drawPixels(this._frame,this.framePixels,this._matrix,this.colorTransform,this.blend,this.antialiasing);
	}
	,__class__: animate_FlxSymbol
});
var animate_FlxAnimate = function(x,y) {
	this.frameTickTypeShit = 0;
	this.playingAnim = false;
	this.coolParse = JSON.parse(lime_utils_Assets.getText(Paths.getPath("images/tightBars/Animation.json","TEXT",null)));
	this.coolParse.AN.TL.L.reverse();
	animate_FlxSymbol.call(this,x,y,this.coolParse);
	this.set_frames(animate_FlxAnimate.fromAnimate(Paths.getPath("images/tightBars/spritemap1.png","TEXT",null),Paths.getPath("images/tightBars/spritemap1.json","TEXT",null)));
};
$hxClasses["animate.FlxAnimate"] = animate_FlxAnimate;
animate_FlxAnimate.__name__ = "animate.FlxAnimate";
animate_FlxAnimate.fromAnimate = function(Source,Description) {
	var graphic = flixel_FlxG.bitmap.add(Source);
	if(graphic == null) {
		return null;
	}
	var frames = flixel_graphics_frames_FlxAtlasFrames.findFrame(graphic);
	if(frames != null) {
		return frames;
	}
	if(graphic == null || Description == null) {
		return null;
	}
	frames = new flixel_graphics_frames_FlxAtlasFrames(graphic);
	haxe_Log.trace(Description,{ fileName : "source/animate/FlxAnimate.hx", lineNumber : 52, className : "animate.FlxAnimate", methodName : "fromAnimate"});
	if(lime_utils_Assets.exists(Description)) {
		Description = lime_utils_Assets.getText(Description);
	}
	var data = JSON.parse(Description);
	var _g = 0;
	var _g1 = data.ATLAS.SPRITES;
	while(_g < _g1.length) {
		var sprites = _g1[_g];
		++_g;
		var spr = sprites.SPRITE;
		var X = spr.x;
		var Y = spr.y;
		var Width = spr.w;
		var Height = spr.h;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _this = flixel_math_FlxRect._pool.get();
		var X1 = X;
		var Y1 = Y;
		var Width1 = Width;
		var Height1 = Height;
		if(Height1 == null) {
			Height1 = 0;
		}
		if(Width1 == null) {
			Width1 = 0;
		}
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		_this.x = X1;
		_this.y = Y1;
		_this.width = Width1;
		_this.height = Height1;
		var rect = _this;
		rect._inPool = false;
		var rect1 = rect;
		var size = new openfl_geom_Rectangle(0,0,rect1.width,rect1.height);
		var X2 = -size.get_left();
		var Y2 = -size.get_top();
		if(Y2 == null) {
			Y2 = 0;
		}
		if(X2 == null) {
			X2 = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X2,Y2);
		point._inPool = false;
		var offset = point;
		var X3 = size.width;
		var Y3 = size.height;
		if(Y3 == null) {
			Y3 = 0;
		}
		if(X3 == null) {
			X3 = 0;
		}
		var point1 = flixel_math_FlxPoint._pool.get().set(X3,Y3);
		point1._inPool = false;
		var sourceSize = point1;
		frames.addAtlasFrame(rect1,sourceSize,offset,spr.name);
	}
	return frames;
};
animate_FlxAnimate.__super__ = animate_FlxSymbol;
animate_FlxAnimate.prototype = $extend(animate_FlxSymbol.prototype,{
	playingAnim: null
	,frameTickTypeShit: null
	,draw: function() {
		animate_FlxSymbol.prototype.draw.call(this);
		this.renderFrame(this.coolParse.AN.TL,this.coolParse,true);
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(69,_this.status)) {
			var key = animate_FlxSymbol.nestedShit.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				var _g = 0;
				var _g1 = animate_FlxSymbol.nestedShit.h[key1];
				while(_g < _g1.length) {
					var symbol = _g1[_g];
					++_g;
					symbol.draw();
				}
			}
			animate_FlxSymbol.nestedShit.h = { };
		}
	}
	,update: function(elapsed) {
		animate_FlxSymbol.prototype.update.call(this,elapsed);
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(32,_this.status)) {
			this.playingAnim = !this.playingAnim;
		}
		if(this.playingAnim) {
			this.frameTickTypeShit += elapsed;
			if(this.frameTickTypeShit >= 0.041666666666666664) {
				this.changeFrame(1);
				this.frameTickTypeShit = 0;
			}
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(39,_this.status)) {
			this.changeFrame(1);
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(37,_this.status)) {
			this.changeFrame(-1);
		}
	}
	,__class__: animate_FlxAnimate
});
var flixel_IFlxBasic = function() { };
$hxClasses["flixel.IFlxBasic"] = flixel_IFlxBasic;
flixel_IFlxBasic.__name__ = "flixel.IFlxBasic";
flixel_IFlxBasic.__isInterface__ = true;
flixel_IFlxBasic.prototype = {
	set_active: null
	,set_visible: null
	,set_alive: null
	,set_exists: null
	,ID: null
	,active: null
	,visible: null
	,alive: null
	,exists: null
	,draw: null
	,update: null
	,destroy: null
	,kill: null
	,revive: null
	,toString: null
	,__class__: flixel_IFlxBasic
	,__properties__: {set_exists:"set_exists",set_alive:"set_alive",set_visible:"set_visible",set_active:"set_active"}
};
var flixel_util_FlxPool_$flixel_$math_$FlxPoint = function(classObj) {
	this._count = 0;
	this._pool = [];
	this._class = classObj;
};
$hxClasses["flixel.util.FlxPool_flixel_math_FlxPoint"] = flixel_util_FlxPool_$flixel_$math_$FlxPoint;
flixel_util_FlxPool_$flixel_$math_$FlxPoint.__name__ = "flixel.util.FlxPool_flixel_math_FlxPoint";
flixel_util_FlxPool_$flixel_$math_$FlxPoint.__interfaces__ = [flixel_util_IFlxPool];
flixel_util_FlxPool_$flixel_$math_$FlxPoint.prototype = {
	_pool: null
	,_class: null
	,_count: null
	,get: function() {
		if(this._count == 0) {
			return Type.createInstance(this._class,[]);
		}
		return this._pool[--this._count];
	}
	,put: function(obj) {
		if(obj != null) {
			var i = this._pool.indexOf(obj);
			if(i == -1 || i >= this._count) {
				obj.destroy();
				this._pool[this._count++] = obj;
			}
		}
	}
	,putUnsafe: function(obj) {
		if(obj != null) {
			obj.destroy();
			this._pool[this._count++] = obj;
		}
	}
	,preAllocate: function(numObjects) {
		while(numObjects-- > 0) this._pool[this._count++] = Type.createInstance(this._class,[]);
	}
	,clear: function() {
		this._count = 0;
		var oldPool = this._pool;
		this._pool = [];
		return oldPool;
	}
	,get_length: function() {
		return this._count;
	}
	,__class__: flixel_util_FlxPool_$flixel_$math_$FlxPoint
	,__properties__: {get_length:"get_length"}
};
var flixel_math_FlxPoint = function(X,Y) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._inPool = false;
	this._weak = false;
	this.y = 0;
	this.x = 0;
	this.set(X,Y);
};
$hxClasses["flixel.math.FlxPoint"] = flixel_math_FlxPoint;
flixel_math_FlxPoint.__name__ = "flixel.math.FlxPoint";
flixel_math_FlxPoint.__interfaces__ = [flixel_util_IFlxPooled];
flixel_math_FlxPoint.__properties__ = {get_pool:"get_pool"};
flixel_math_FlxPoint.get = function(X,Y) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	return point;
};
flixel_math_FlxPoint.weak = function(X,Y) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var X1 = X;
	var Y1 = Y;
	if(Y1 == null) {
		Y1 = 0;
	}
	if(X1 == null) {
		X1 = 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(X1,Y1);
	point._inPool = false;
	var point1 = point;
	point1._weak = true;
	return point1;
};
flixel_math_FlxPoint.get_pool = function() {
	return flixel_math_FlxPoint._pool;
};
flixel_math_FlxPoint.prototype = {
	x: null
	,y: null
	,_weak: null
	,_inPool: null
	,put: function() {
		if(!this._inPool) {
			this._inPool = true;
			this._weak = false;
			flixel_math_FlxPoint._pool.putUnsafe(this);
		}
	}
	,putWeak: function() {
		if(this._weak) {
			this.put();
		}
	}
	,set: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.set_x(X);
		this.set_y(Y);
		return this;
	}
	,add: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _g = this;
		_g.set_x(_g.x + X);
		var _g = this;
		_g.set_y(_g.y + Y);
		return this;
	}
	,addPoint: function(point) {
		var _g = this;
		_g.set_x(_g.x + point.x);
		var _g = this;
		_g.set_y(_g.y + point.y);
		if(point._weak) {
			point.put();
		}
		return this;
	}
	,addPointWeak: function(point) {
		var _g = this;
		_g.set_x(_g.x + point.x);
		var _g = this;
		_g.set_y(_g.y + point.y);
		return this;
	}
	,subtract: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _g = this;
		_g.set_x(_g.x - X);
		var _g = this;
		_g.set_y(_g.y - Y);
		return this;
	}
	,subtractPoint: function(point) {
		var _g = this;
		_g.set_x(_g.x - point.x);
		var _g = this;
		_g.set_y(_g.y - point.y);
		if(point._weak) {
			point.put();
		}
		return this;
	}
	,subtractPointWeak: function(point) {
		var _g = this;
		_g.set_x(_g.x - point.x);
		var _g = this;
		_g.set_y(_g.y - point.y);
		return this;
	}
	,scale: function(k) {
		var _g = this;
		_g.set_x(_g.x * k);
		var _g = this;
		_g.set_y(_g.y * k);
		return this;
	}
	,copyFrom: function(point) {
		this.set_x(point.x);
		this.set_y(point.y);
		if(point._weak) {
			point.put();
		}
		return this;
	}
	,copyTo: function(point) {
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		point.set_x(this.x);
		point.set_y(this.y);
		return point;
	}
	,copyFromFlash: function(FlashPoint) {
		this.set_x(FlashPoint.x);
		this.set_y(FlashPoint.y);
		return this;
	}
	,copyToFlash: function(FlashPoint) {
		if(FlashPoint == null) {
			FlashPoint = new openfl_geom_Point();
		}
		FlashPoint.x = this.x;
		FlashPoint.y = this.y;
		return FlashPoint;
	}
	,addToFlash: function(FlashPoint) {
		FlashPoint.x += this.x;
		FlashPoint.y += this.y;
		return FlashPoint;
	}
	,subtractFromFlash: function(FlashPoint) {
		FlashPoint.x -= this.x;
		FlashPoint.y -= this.y;
		return FlashPoint;
	}
	,inCoords: function(RectX,RectY,RectWidth,RectHeight) {
		return flixel_math_FlxMath.pointInCoordinates(this.x,this.y,RectX,RectY,RectWidth,RectHeight);
	}
	,inRect: function(Rect) {
		return flixel_math_FlxMath.pointInFlxRect(this.x,this.y,Rect);
	}
	,distanceTo: function(point) {
		var dx = this.x - point.x;
		var dy = this.y - point.y;
		if(point._weak) {
			point.put();
		}
		return Math.sqrt(dx * dx + dy * dy);
	}
	,floor: function() {
		this.set_x(Math.floor(this.x));
		this.set_y(Math.floor(this.y));
		return this;
	}
	,ceil: function() {
		this.set_x(Math.ceil(this.x));
		this.set_y(Math.ceil(this.y));
		return this;
	}
	,round: function() {
		this.set_x(Math.round(this.x));
		this.set_y(Math.round(this.y));
		return this;
	}
	,rotate: function(Pivot,Angle) {
		var radians = Angle * (Math.PI / 180);
		var n = radians;
		n *= 0.3183098862;
		if(n > 1) {
			n -= Math.ceil(n) >> 1 << 1;
		} else if(n < -1) {
			n += Math.ceil(-n) >> 1 << 1;
		}
		var sin = n > 0 ? n * (3.1 + n * (0.5 + n * (-7.2 + n * 3.6))) : n * (3.1 - n * (0.5 + n * (7.2 + n * 3.6)));
		var n = radians + 1.570796327;
		n *= 0.3183098862;
		if(n > 1) {
			n -= Math.ceil(n) >> 1 << 1;
		} else if(n < -1) {
			n += Math.ceil(-n) >> 1 << 1;
		}
		var cos = n > 0 ? n * (3.1 + n * (0.5 + n * (-7.2 + n * 3.6))) : n * (3.1 - n * (0.5 + n * (7.2 + n * 3.6)));
		var dx = this.x - Pivot.x;
		var dy = this.y - Pivot.y;
		this.set_x(cos * dx - sin * dy + Pivot.x);
		this.set_y(sin * dx + cos * dy + Pivot.y);
		if(Pivot._weak) {
			Pivot.put();
		}
		return this;
	}
	,angleBetween: function(point) {
		var x = point.x - this.x;
		var y = point.y - this.y;
		var angle = 0;
		if(x != 0 || y != 0) {
			var c1 = Math.PI * 0.25;
			var c2 = 3 * c1;
			var ay = y < 0 ? -y : y;
			if(x >= 0) {
				angle = c1 - c1 * ((x - ay) / (x + ay));
			} else {
				angle = c2 - c1 * ((x + ay) / (ay - x));
			}
			angle = (y < 0 ? -angle : angle) * (180 / Math.PI);
			if(angle > 90) {
				angle -= 270;
			} else {
				angle += 90;
			}
		}
		if(point._weak) {
			point.put();
		}
		return angle;
	}
	,toVector: function() {
		var x = this.x;
		var y = this.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var X = x;
		var Y = y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		return point;
	}
	,equals: function(point) {
		var result = Math.abs(this.x - point.x) <= 0.0000001 && Math.abs(this.y - point.y) <= 0.0000001;
		if(point._weak) {
			point.put();
		}
		return result;
	}
	,destroy: function() {
	}
	,transform: function(matrix) {
		var x1 = this.x * matrix.a + this.y * matrix.c + matrix.tx;
		var y1 = this.x * matrix.b + this.y * matrix.d + matrix.ty;
		return this.set(x1,y1);
	}
	,toString: function() {
		var value = this.x;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "x";
		_this.value = value;
		var value = this.y;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "y";
		_this1.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1]);
	}
	,set_x: function(Value) {
		return this.x = Value;
	}
	,set_y: function(Value) {
		return this.y = Value;
	}
	,__class__: flixel_math_FlxPoint
	,__properties__: {set_y:"set_y",set_x:"set_x"}
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = "lime.math.Matrix3";
lime_math_Matrix3.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector4.x;
			this.b = vector4.y;
		} else if(column == 1) {
			this.c = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
			this.tx = vector4.z;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
			this.ty = vector4.z;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(matrix3) {
		if(matrix3 != null && this.tx == matrix3.tx && this.ty == matrix3.ty && this.a == matrix3.a && this.b == matrix3.b && this.c == matrix3.c) {
			return this.d == matrix3.d;
		} else {
			return false;
		}
	}
	,deltaTransformVector: function(Vector2,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = Vector2.x * this.a + Vector2.y * this.c;
		result.y = Vector2.x * this.b + Vector2.y * this.d;
		return result;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformRect: function(rect,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		var tx0 = this.a * rect.x + this.c * rect.y;
		var tx1 = tx0;
		var ty0 = this.b * rect.x + this.d * rect.y;
		var ty1 = ty0;
		var tx = this.a * (rect.x + rect.width) + this.c * rect.y;
		var ty = this.b * (rect.x + rect.width) + this.d * rect.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = this.a * (rect.x + rect.width) + this.c * (rect.y + rect.height);
		ty = this.b * (rect.x + rect.width) + this.d * (rect.y + rect.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = this.a * rect.x + this.c * (rect.y + rect.height);
		ty = this.b * rect.x + this.d * (rect.y + rect.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		result.setTo(tx0 + tx,ty0 + ty,tx1 - tx0,ty1 - ty0);
		return result;
	}
	,transformVector: function(pos,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = pos.x * this.a + pos.y * this.c + this.tx;
		result.y = pos.x * this.b + pos.y * this.d + this.ty;
		return result;
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__class__: lime_math_Matrix3
};
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = "openfl.geom.Matrix";
openfl_geom_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,__array: null
	,clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector3D.x;
			this.b = vector3D.y;
		} else if(column == 1) {
			this.c = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
			this.tx = vector3D.z;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
			this.ty = vector3D.z;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.setTo(0,0,1);
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		if(matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c) {
			return this.d == matrix.d;
		} else {
			return false;
		}
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,toArray: function(transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(this.__array == null) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1 = new Float32Array(9);
			this.__array = this1;
		}
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__toMatrix3: function() {
		openfl_geom_Matrix.__matrix3.setTo(this.a,this.b,this.c,this.d,this.tx,this.ty);
		return openfl_geom_Matrix.__matrix3;
	}
	,__transformInversePoint: function(point) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			point.x = -this.tx;
			point.y = -this.ty;
		} else {
			var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
			point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
			point.x = px;
		}
	}
	,__transformInverseX: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.tx;
		} else {
			return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
		}
	}
	,__transformInverseY: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.ty;
		} else {
			return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
		}
	}
	,__transformPoint: function(point) {
		var px = point.x;
		var py = point.y;
		point.x = px * this.a + py * this.c + this.tx;
		point.y = px * this.b + py * this.d + this.ty;
	}
	,__transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,__transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__translateTransformed: function(px,py) {
		this.tx = px * this.a + py * this.c + this.tx;
		this.ty = px * this.b + py * this.d + this.ty;
	}
	,__class__: openfl_geom_Matrix
};
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) {
		alphaOffset = 0;
	}
	if(blueOffset == null) {
		blueOffset = 0;
	}
	if(greenOffset == null) {
		greenOffset = 0;
	}
	if(redOffset == null) {
		redOffset = 0;
	}
	if(alphaMultiplier == null) {
		alphaMultiplier = 1;
	}
	if(blueMultiplier == null) {
		blueMultiplier = 1;
	}
	if(greenMultiplier == null) {
		greenMultiplier = 1;
	}
	if(redMultiplier == null) {
		redMultiplier = 1;
	}
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = "openfl.geom.ColorTransform";
openfl_geom_ColorTransform.__limeColorMatrix = null;
openfl_geom_ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,concat: function(second) {
		this.redOffset = second.redOffset * this.redMultiplier + this.redOffset;
		this.greenOffset = second.greenOffset * this.greenMultiplier + this.greenOffset;
		this.blueOffset = second.blueOffset * this.blueMultiplier + this.blueOffset;
		this.alphaOffset = second.alphaOffset * this.alphaMultiplier + this.alphaOffset;
		this.redMultiplier *= second.redMultiplier;
		this.greenMultiplier *= second.greenMultiplier;
		this.blueMultiplier *= second.blueMultiplier;
		this.alphaMultiplier *= second.alphaMultiplier;
	}
	,toString: function() {
		return "(redMultiplier=" + this.redMultiplier + ", greenMultiplier=" + this.greenMultiplier + ", blueMultiplier=" + this.blueMultiplier + ", alphaMultiplier=" + this.alphaMultiplier + ", redOffset=" + this.redOffset + ", greenOffset=" + this.greenOffset + ", blueOffset=" + this.blueOffset + ", alphaOffset=" + this.alphaOffset + ")";
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__copyFrom: function(ct) {
		this.redMultiplier = ct.redMultiplier;
		this.greenMultiplier = ct.greenMultiplier;
		this.blueMultiplier = ct.blueMultiplier;
		this.alphaMultiplier = ct.alphaMultiplier;
		this.redOffset = ct.redOffset;
		this.greenOffset = ct.greenOffset;
		this.blueOffset = ct.blueOffset;
		this.alphaOffset = ct.alphaOffset;
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__identity: function() {
		this.redMultiplier = 1;
		this.greenMultiplier = 1;
		this.blueMultiplier = 1;
		this.alphaMultiplier = 1;
		this.redOffset = 0;
		this.greenOffset = 0;
		this.blueOffset = 0;
		this.alphaOffset = 0;
	}
	,__invert: function() {
		this.redMultiplier = this.redMultiplier != 0 ? 1 / this.redMultiplier : 1;
		this.greenMultiplier = this.greenMultiplier != 0 ? 1 / this.greenMultiplier : 1;
		this.blueMultiplier = this.blueMultiplier != 0 ? 1 / this.blueMultiplier : 1;
		this.alphaMultiplier = this.alphaMultiplier != 0 ? 1 / this.alphaMultiplier : 1;
		this.redOffset = -this.redOffset;
		this.greenOffset = -this.greenOffset;
		this.blueOffset = -this.blueOffset;
		this.alphaOffset = -this.alphaOffset;
	}
	,__equals: function(ct,ignoreAlphaMultiplier) {
		if(ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (ignoreAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset) {
			return this.alphaOffset == ct.alphaOffset;
		} else {
			return false;
		}
	}
	,__isDefault: function(ignoreAlphaMultiplier) {
		if(ignoreAlphaMultiplier) {
			if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
				return this.alphaOffset == 0;
			} else {
				return false;
			}
		} else if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
			return this.alphaOffset == 0;
		} else {
			return false;
		}
	}
	,__setArrays: function(colorMultipliers,colorOffsets) {
		colorMultipliers[0] = this.redMultiplier;
		colorMultipliers[1] = this.greenMultiplier;
		colorMultipliers[2] = this.blueMultiplier;
		colorMultipliers[3] = this.alphaMultiplier;
		colorOffsets[0] = this.redOffset;
		colorOffsets[1] = this.greenOffset;
		colorOffsets[2] = this.blueOffset;
		colorOffsets[3] = this.alphaOffset;
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		if(openfl_geom_ColorTransform.__limeColorMatrix == null) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1 = new Float32Array(20);
			openfl_geom_ColorTransform.__limeColorMatrix = this1;
		}
		openfl_geom_ColorTransform.__limeColorMatrix[0] = this.redMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[4] = this.redOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[6] = this.greenMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[9] = this.greenOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[12] = this.blueMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[14] = this.blueOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[18] = this.alphaMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[19] = this.alphaOffset / 255;
		return openfl_geom_ColorTransform.__limeColorMatrix;
	}
	,__class__: openfl_geom_ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
var flixel_FlxCamera = function(X,Y,Width,Height,Zoom) {
	if(Zoom == null) {
		Zoom = 0;
	}
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._helperPoint = new openfl_geom_Point();
	this._helperMatrix = new flixel_math_FlxMatrix();
	var _this = flixel_math_FlxRect._pool.get();
	_this.x = 0;
	_this.y = 0;
	_this.width = 0;
	_this.height = 0;
	_this._inPool = false;
	this._bounds = _this;
	this._scrollRect = new openfl_display_Sprite();
	this.initialZoom = 1;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this._point = point;
	this._fxShakeAxes = flixel_util_FlxAxes.XY;
	this._fxShakeDuration = 0;
	this._fxShakeIntensity = 0;
	this._fxFadeAlpha = 0;
	this._fxFadeCompleted = true;
	this._fxFadeComplete = null;
	this._fxFadeIn = false;
	this._fxFadeDuration = 0;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this._scrollTarget = point;
	this._fxFadeColor = 0;
	this._fxFlashAlpha = 0;
	this._fxFlashComplete = null;
	this._fxFlashDuration = 0;
	this._fxFlashColor = 0;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this._flashOffset = point;
	this._flashPoint = new openfl_geom_Point();
	this.filtersEnabled = true;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.followLead = point;
	this.antialiasing = false;
	this.color = -1;
	this.angle = 0;
	this.alpha = 1;
	this._useBlitMatrix = false;
	this._blitMatrix = new flixel_math_FlxMatrix();
	this.viewHeight = 0;
	this.viewWidth = 0;
	this.viewOffsetHeight = 0;
	this.viewOffsetWidth = 0;
	this.viewOffsetY = 0;
	this.viewOffsetX = 0;
	this.height = 0;
	this.width = 0;
	this.flashSprite = new openfl_display_Sprite();
	this.useBgAlphaBlending = false;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.scroll = point;
	this.followLerp = 60 / flixel_FlxG.updateFramerate;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.targetOffset = point;
	this.scaleY = 0;
	this.scaleX = 0;
	this.y = 0;
	this.x = 0;
	flixel_FlxBasic.call(this);
	this.set_x(X);
	this.set_y(Y);
	this.set_width(Width <= 0 ? flixel_FlxG.width : Width);
	this.set_height(Height <= 0 ? flixel_FlxG.height : Height);
	this._flashRect = new openfl_geom_Rectangle(0,0,this.width,this.height);
	this.flashSprite.addChild(this._scrollRect);
	this._scrollRect.set_scrollRect(new openfl_geom_Rectangle());
	this.pixelPerfectRender = flixel_FlxG.renderBlit;
	if(flixel_FlxG.renderBlit) {
		this.screen = new flixel_FlxSprite();
		this.buffer = new openfl_display_BitmapData(this.width,this.height,true,0);
		this.screen.set_pixels(this.buffer);
		this.screen.origin.set();
		this._flashBitmap = new openfl_display_Bitmap(this.buffer);
		this._scrollRect.addChild(this._flashBitmap);
		this._fill = new openfl_display_BitmapData(this.width,this.height,true,0);
	} else {
		this.canvas = new openfl_display_Sprite();
		this._scrollRect.addChild(this.canvas);
	}
	this.set_color(-1);
	this.initialZoom = Zoom == 0 ? flixel_FlxCamera.defaultZoom : Zoom;
	this.set_zoom(Zoom);
	this.updateScrollRect();
	this.updateFlashOffset();
	this.updateFlashSpritePosition();
	this.updateInternalSpritePositions();
	this.bgColor = flixel_FlxG.cameras.get_bgColor();
};
$hxClasses["flixel.FlxCamera"] = flixel_FlxCamera;
flixel_FlxCamera.__name__ = "flixel.FlxCamera";
flixel_FlxCamera.__properties__ = {set_defaultCameras:"set_defaultCameras",get_defaultCameras:"get_defaultCameras"};
flixel_FlxCamera.defaultZoom = null;
flixel_FlxCamera._defaultCameras = null;
flixel_FlxCamera._storageTilesHead = null;
flixel_FlxCamera._storageTrianglesHead = null;
flixel_FlxCamera.get_defaultCameras = function() {
	return flixel_FlxCamera._defaultCameras;
};
flixel_FlxCamera.set_defaultCameras = function(value) {
	return flixel_FlxCamera._defaultCameras = value;
};
flixel_FlxCamera.__super__ = flixel_FlxBasic;
flixel_FlxCamera.prototype = $extend(flixel_FlxBasic.prototype,{
	x: null
	,y: null
	,scaleX: null
	,scaleY: null
	,totalScaleX: null
	,totalScaleY: null
	,style: null
	,target: null
	,targetOffset: null
	,followLerp: null
	,deadzone: null
	,minScrollX: null
	,maxScrollX: null
	,minScrollY: null
	,maxScrollY: null
	,scroll: null
	,buffer: null
	,bgColor: null
	,screen: null
	,useBgAlphaBlending: null
	,flashSprite: null
	,pixelPerfectRender: null
	,width: null
	,height: null
	,zoom: null
	,viewOffsetX: null
	,viewOffsetY: null
	,viewOffsetWidth: null
	,viewOffsetHeight: null
	,viewWidth: null
	,viewHeight: null
	,_blitMatrix: null
	,_useBlitMatrix: null
	,alpha: null
	,angle: null
	,color: null
	,antialiasing: null
	,followLead: null
	,filtersEnabled: null
	,_flashRect: null
	,_flashPoint: null
	,_flashOffset: null
	,_fxFlashColor: null
	,_fxFlashDuration: null
	,_fxFlashComplete: null
	,_fxFlashAlpha: null
	,_fxFadeColor: null
	,_lastTargetPosition: null
	,_scrollTarget: null
	,_fxFadeDuration: null
	,_fxFadeIn: null
	,_fxFadeComplete: null
	,_fxFadeCompleted: null
	,_fxFadeAlpha: null
	,_fxShakeIntensity: null
	,_fxShakeDuration: null
	,_fxShakeComplete: null
	,_fxShakeAxes: null
	,_point: null
	,_filters: null
	,initialZoom: null
	,_fill: null
	,_flashBitmap: null
	,_scrollRect: null
	,_bounds: null
	,canvas: null
	,_helperMatrix: null
	,_helperPoint: null
	,_currentDrawItem: null
	,_headOfDrawStack: null
	,_headTiles: null
	,_headTriangles: null
	,startQuadBatch: function(graphic,colored,hasColorOffsets,blend,smooth,shader) {
		if(smooth == null) {
			smooth = false;
		}
		if(hasColorOffsets == null) {
			hasColorOffsets = false;
		}
		var itemToReturn = null;
		var blendInt = flixel_graphics_tile_FlxDrawBaseItem.blendToInt(blend);
		if(this._currentDrawItem != null && this._currentDrawItem.type == flixel_graphics_tile_FlxDrawItemType.TILES && this._headTiles.graphics == graphic && this._headTiles.colored == colored && this._headTiles.hasColorOffsets == hasColorOffsets && this._headTiles.blending == blendInt && this._headTiles.blend == blend && this._headTiles.antialiasing == smooth && this._headTiles.shader == shader) {
			return this._headTiles;
		}
		if(flixel_FlxCamera._storageTilesHead != null) {
			itemToReturn = flixel_FlxCamera._storageTilesHead;
			var newHead = flixel_FlxCamera._storageTilesHead.nextTyped;
			itemToReturn.reset();
			flixel_FlxCamera._storageTilesHead = newHead;
		} else {
			itemToReturn = new flixel_graphics_tile_FlxDrawQuadsItem();
		}
		itemToReturn.graphics = graphic;
		itemToReturn.antialiasing = smooth;
		itemToReturn.colored = colored;
		itemToReturn.hasColorOffsets = hasColorOffsets;
		itemToReturn.blending = blendInt;
		itemToReturn.blend = blend;
		itemToReturn.shader = shader;
		itemToReturn.nextTyped = this._headTiles;
		this._headTiles = itemToReturn;
		if(this._headOfDrawStack == null) {
			this._headOfDrawStack = itemToReturn;
		}
		if(this._currentDrawItem != null) {
			this._currentDrawItem.next = itemToReturn;
		}
		this._currentDrawItem = itemToReturn;
		return itemToReturn;
	}
	,startTrianglesBatch: function(graphic,smoothing,isColored,blend) {
		if(isColored == null) {
			isColored = false;
		}
		if(smoothing == null) {
			smoothing = false;
		}
		var blendInt = flixel_graphics_tile_FlxDrawBaseItem.blendToInt(blend);
		if(this._currentDrawItem != null && this._currentDrawItem.type == flixel_graphics_tile_FlxDrawItemType.TRIANGLES && this._headTriangles.graphics == graphic && this._headTriangles.antialiasing == smoothing && this._headTriangles.colored == isColored && this._headTriangles.blending == blendInt) {
			return this._headTriangles;
		}
		return this.getNewDrawTrianglesItem(graphic,smoothing,isColored,blend);
	}
	,getNewDrawTrianglesItem: function(graphic,smoothing,isColored,blend) {
		if(isColored == null) {
			isColored = false;
		}
		if(smoothing == null) {
			smoothing = false;
		}
		var itemToReturn = null;
		var blendInt = flixel_graphics_tile_FlxDrawBaseItem.blendToInt(blend);
		if(flixel_FlxCamera._storageTrianglesHead != null) {
			itemToReturn = flixel_FlxCamera._storageTrianglesHead;
			var newHead = flixel_FlxCamera._storageTrianglesHead.nextTyped;
			itemToReturn.reset();
			flixel_FlxCamera._storageTrianglesHead = newHead;
		} else {
			itemToReturn = new flixel_graphics_tile_FlxDrawTrianglesItem();
		}
		itemToReturn.graphics = graphic;
		itemToReturn.antialiasing = smoothing;
		itemToReturn.colored = isColored;
		itemToReturn.blending = blendInt;
		itemToReturn.nextTyped = this._headTriangles;
		this._headTriangles = itemToReturn;
		if(this._headOfDrawStack == null) {
			this._headOfDrawStack = itemToReturn;
		}
		if(this._currentDrawItem != null) {
			this._currentDrawItem.next = itemToReturn;
		}
		this._currentDrawItem = itemToReturn;
		return itemToReturn;
	}
	,clearDrawStack: function() {
		var currTiles = this._headTiles;
		var newTilesHead;
		while(currTiles != null) {
			newTilesHead = currTiles.nextTyped;
			currTiles.reset();
			currTiles.nextTyped = flixel_FlxCamera._storageTilesHead;
			flixel_FlxCamera._storageTilesHead = currTiles;
			currTiles = newTilesHead;
		}
		var currTriangles = this._headTriangles;
		var newTrianglesHead;
		while(currTriangles != null) {
			newTrianglesHead = currTriangles.nextTyped;
			currTriangles.reset();
			currTriangles.nextTyped = flixel_FlxCamera._storageTrianglesHead;
			flixel_FlxCamera._storageTrianglesHead = currTriangles;
			currTriangles = newTrianglesHead;
		}
		this._currentDrawItem = null;
		this._headOfDrawStack = null;
		this._headTiles = null;
		this._headTriangles = null;
	}
	,render: function() {
		var currItem = this._headOfDrawStack;
		while(currItem != null) {
			currItem.render(this);
			currItem = currItem.next;
		}
	}
	,drawPixels: function(frame,pixels,matrix,transform,blend,smoothing,shader) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(flixel_FlxG.renderBlit) {
			this._helperMatrix.copyFrom(matrix);
			if(this._useBlitMatrix) {
				this._helperMatrix.concat(this._blitMatrix);
				this.buffer.draw(pixels,this._helperMatrix,null,null,null,smoothing || this.antialiasing);
			} else {
				this._helperMatrix.translate(-this.viewOffsetX,-this.viewOffsetY);
				this.buffer.draw(pixels,this._helperMatrix,null,blend,null,smoothing || this.antialiasing);
			}
		} else {
			var isColored = transform != null && flixel_util_FlxColorTransformUtil.hasRGBMultipliers(transform);
			var hasColorOffsets = transform != null && flixel_util_FlxColorTransformUtil.hasRGBAOffsets(transform);
			var drawItem = this.startQuadBatch(frame.parent,isColored,hasColorOffsets,blend,smoothing,shader);
			drawItem.addQuad(frame,matrix,transform);
		}
	}
	,copyPixels: function(frame,pixels,sourceRect,destPoint,transform,blend,smoothing,shader) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(flixel_FlxG.renderBlit) {
			if(pixels != null) {
				if(this._useBlitMatrix) {
					this._helperMatrix.identity();
					this._helperMatrix.translate(destPoint.x,destPoint.y);
					this._helperMatrix.concat(this._blitMatrix);
					this.buffer.draw(pixels,this._helperMatrix,null,null,null,smoothing || this.antialiasing);
				} else {
					this._helperPoint.x = destPoint.x - (this.viewOffsetX | 0);
					this._helperPoint.y = destPoint.y - (this.viewOffsetY | 0);
					this.buffer.copyPixels(pixels,sourceRect,this._helperPoint,null,null,true);
				}
			} else if(frame != null) {
				frame.paint(this.buffer,destPoint,true);
			}
		} else {
			this._helperMatrix.identity();
			this._helperMatrix.translate(destPoint.x + frame.offset.x,destPoint.y + frame.offset.y);
			var isColored = transform != null && flixel_util_FlxColorTransformUtil.hasRGBMultipliers(transform);
			var hasColorOffsets = transform != null && flixel_util_FlxColorTransformUtil.hasRGBAOffsets(transform);
			var drawItem = this.startQuadBatch(frame.parent,isColored,hasColorOffsets,blend,smoothing,shader);
			drawItem.addQuad(frame,this._helperMatrix,transform);
		}
	}
	,drawTriangles: function(graphic,vertices,indices,uvtData,colors,position,blend,repeat,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(repeat == null) {
			repeat = false;
		}
		if(flixel_FlxG.renderBlit) {
			if(position == null) {
				position = flixel_FlxCamera.renderPoint.set();
			}
			var _this = this._bounds;
			var X = 0;
			var Y = 0;
			var Width = this.width;
			var Height = this.height;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var verticesLength = vertices.get_length();
			var currentVertexPosition = 0;
			var tempX;
			var tempY;
			var i = 0;
			var _this = flixel_FlxCamera.renderRect;
			_this.x = 0;
			_this.y = 0;
			_this.width = 0;
			_this.height = 0;
			var bounds = _this;
			flixel_FlxCamera.drawVertices.splice(0,flixel_FlxCamera.drawVertices.get_length());
			while(i < verticesLength) {
				tempX = position.x + vertices.get(i);
				tempY = position.y + vertices.get(i + 1);
				flixel_FlxCamera.drawVertices.set(currentVertexPosition++,tempX);
				flixel_FlxCamera.drawVertices.set(currentVertexPosition++,tempY);
				if(i == 0) {
					var X = tempX;
					var Y = tempY;
					var Width = 0;
					var Height = 0;
					if(Height == null) {
						Height = 0;
					}
					if(Width == null) {
						Width = 0;
					}
					if(Y == null) {
						Y = 0;
					}
					if(X == null) {
						X = 0;
					}
					bounds.x = X;
					bounds.y = Y;
					bounds.width = Width;
					bounds.height = Height;
				} else {
					if(tempX < bounds.x) {
						bounds.width += bounds.x - tempX;
						bounds.x = tempX;
					}
					if(tempY < bounds.y) {
						bounds.height += bounds.y - tempY;
						bounds.y = tempY;
					}
					if(tempX > bounds.x + bounds.width) {
						bounds.width = tempX - bounds.x;
					}
					if(tempY > bounds.y + bounds.height) {
						bounds.height = tempY - bounds.y;
					}
				}
				i += 2;
			}
			if(position._weak) {
				position.put();
			}
			var _this = this._bounds;
			var result = bounds.x + bounds.width > _this.x && bounds.x < _this.x + _this.width && bounds.y + bounds.height > _this.y && bounds.y < _this.y + _this.height;
			if(bounds._weak) {
				if(!bounds._inPool) {
					bounds._inPool = true;
					bounds._weak = false;
					flixel_math_FlxRect._pool.putUnsafe(bounds);
				}
			}
			if(!result) {
				flixel_FlxCamera.drawVertices.splice(flixel_FlxCamera.drawVertices.get_length() - verticesLength,verticesLength);
			} else {
				flixel_FlxCamera.trianglesSprite.get_graphics().clear();
				flixel_FlxCamera.trianglesSprite.get_graphics().beginBitmapFill(graphic.bitmap,null,repeat,smoothing);
				flixel_FlxCamera.trianglesSprite.get_graphics().drawTriangles(flixel_FlxCamera.drawVertices,indices,uvtData);
				flixel_FlxCamera.trianglesSprite.get_graphics().endFill();
				if(this._useBlitMatrix) {
					this._helperMatrix.copyFrom(this._blitMatrix);
				} else {
					this._helperMatrix.identity();
					this._helperMatrix.translate(-this.viewOffsetX,-this.viewOffsetY);
				}
				this.buffer.draw(flixel_FlxCamera.trianglesSprite,this._helperMatrix);
			}
			if(!bounds._inPool) {
				bounds._inPool = true;
				bounds._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(bounds);
			}
		} else {
			var _this = this._bounds;
			var X = 0;
			var Y = 0;
			var Width = this.width;
			var Height = this.height;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var isColored = colors != null && colors.get_length() != 0;
			var drawItem = this.startTrianglesBatch(graphic,smoothing,isColored,blend);
			drawItem.addTriangles(vertices,indices,uvtData,colors,position,this._bounds);
		}
	}
	,transformRect: function(rect) {
		if(flixel_FlxG.renderBlit) {
			rect.x += -this.viewOffsetX;
			rect.y += -this.viewOffsetY;
			if(this._useBlitMatrix) {
				rect.x *= this.zoom;
				rect.y *= this.zoom;
				rect.width *= this.zoom;
				rect.height *= this.zoom;
			}
		}
		return rect;
	}
	,transformPoint: function(point) {
		if(flixel_FlxG.renderBlit) {
			var X = this.viewOffsetX;
			var Y = this.viewOffsetY;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _g = point;
			_g.set_x(_g.x - X);
			var _g = point;
			_g.set_y(_g.y - Y);
			if(this._useBlitMatrix) {
				point.scale(this.zoom);
			}
		}
		return point;
	}
	,transformVector: function(vector) {
		if(flixel_FlxG.renderBlit && this._useBlitMatrix) {
			vector.scale(this.zoom);
		}
		return vector;
	}
	,transformObject: function(object) {
		var _g = object;
		_g.set_scaleX(_g.get_scaleX() * this.totalScaleX);
		var _g = object;
		_g.set_scaleY(_g.get_scaleY() * this.totalScaleY);
		var _g = object;
		_g.set_x(_g.get_x() - this.scroll.x * this.totalScaleX);
		var _g = object;
		_g.set_y(_g.get_y() - this.scroll.y * this.totalScaleY);
		var _g = object;
		_g.set_x(_g.get_x() - 0.5 * this.width * (this.scaleX - this.initialZoom) * flixel_FlxG.scaleMode.scale.x);
		var _g = object;
		_g.set_y(_g.get_y() - 0.5 * this.height * (this.scaleY - this.initialZoom) * flixel_FlxG.scaleMode.scale.y);
		return object;
	}
	,destroy: function() {
		flixel_util_FlxDestroyUtil.removeChild(this.flashSprite,this._scrollRect);
		if(flixel_FlxG.renderBlit) {
			flixel_util_FlxDestroyUtil.removeChild(this._scrollRect,this._flashBitmap);
			this.screen = flixel_util_FlxDestroyUtil.destroy(this.screen);
			this.buffer = null;
			this._flashBitmap = null;
			this._fill = flixel_util_FlxDestroyUtil.dispose(this._fill);
		} else {
			flixel_util_FlxDestroyUtil.removeChild(this._scrollRect,this.canvas);
			if(this.canvas != null) {
				var _g = 0;
				var _g1 = this.canvas.get_numChildren();
				while(_g < _g1) {
					var i = _g++;
					this.canvas.removeChildAt(0);
				}
				this.canvas = null;
			}
			if(this._headOfDrawStack != null) {
				this.clearDrawStack();
			}
			this._blitMatrix = null;
			this._helperMatrix = null;
			this._helperPoint = null;
		}
		this._bounds = null;
		this.scroll = flixel_util_FlxDestroyUtil.put(this.scroll);
		this.targetOffset = flixel_util_FlxDestroyUtil.put(this.targetOffset);
		this.deadzone = flixel_util_FlxDestroyUtil.put(this.deadzone);
		this.target = null;
		this.flashSprite = null;
		this._scrollRect = null;
		this._flashRect = null;
		this._flashPoint = null;
		this._fxFlashComplete = null;
		this._fxFadeComplete = null;
		this._fxShakeComplete = null;
		flixel_FlxBasic.prototype.destroy.call(this);
	}
	,update: function(elapsed) {
		if(this.target != null) {
			this.updateFollow();
		}
		this.updateScroll();
		this.updateFlash(elapsed);
		this.updateFade(elapsed);
		this.flashSprite.set_filters(this.filtersEnabled ? this._filters : null);
		this.updateFlashSpritePosition();
		this.updateShake(elapsed);
	}
	,updateScroll: function() {
		var zoom = this.zoom / flixel_FlxG.initialZoom;
		var minX = this.minScrollX == null ? null : this.minScrollX - (zoom - 1) * this.width / (2 * zoom);
		var maxX = this.maxScrollX == null ? null : this.maxScrollX + (zoom - 1) * this.width / (2 * zoom);
		var minY = this.minScrollY == null ? null : this.minScrollY - (zoom - 1) * this.height / (2 * zoom);
		var maxY = this.maxScrollY == null ? null : this.maxScrollY + (zoom - 1) * this.height / (2 * zoom);
		var Value = this.scroll.x;
		var Max = maxX != null ? maxX - this.width : null;
		var lowerBound = minX != null && Value < minX ? minX : Value;
		this.scroll.set_x(Max != null && lowerBound > Max ? Max : lowerBound);
		var Value = this.scroll.y;
		var Max = maxY != null ? maxY - this.height : null;
		var lowerBound = minY != null && Value < minY ? minY : Value;
		this.scroll.set_y(Max != null && lowerBound > Max ? Max : lowerBound);
	}
	,updateFollow: function() {
		if(this.deadzone == null) {
			this.target.getMidpoint(this._point);
			this._point.addPoint(this.targetOffset);
			var point = this._point;
			this.scroll.set(point.x - this.width * 0.5,point.y - this.height * 0.5);
			if(point._weak) {
				point.put();
			}
		} else {
			var edge;
			var targetX = this.target.x + this.targetOffset.x;
			var targetY = this.target.y + this.targetOffset.y;
			if(this.style == flixel_FlxCameraFollowStyle.SCREEN_BY_SCREEN) {
				if(targetX >= this.scroll.x + this.width) {
					var _g = this._scrollTarget;
					_g.set_x(_g.x + this.width);
				} else if(targetX < this.scroll.x) {
					var _g = this._scrollTarget;
					_g.set_x(_g.x - this.width);
				}
				if(targetY >= this.scroll.y + this.height) {
					var _g = this._scrollTarget;
					_g.set_y(_g.y + this.height);
				} else if(targetY < this.scroll.y) {
					var _g = this._scrollTarget;
					_g.set_y(_g.y - this.height);
				}
			} else {
				edge = targetX - this.deadzone.x;
				if(this._scrollTarget.x > edge) {
					this._scrollTarget.set_x(edge);
				}
				edge = targetX + this.target.get_width() - this.deadzone.x - this.deadzone.width;
				if(this._scrollTarget.x < edge) {
					this._scrollTarget.set_x(edge);
				}
				edge = targetY - this.deadzone.y;
				if(this._scrollTarget.y > edge) {
					this._scrollTarget.set_y(edge);
				}
				edge = targetY + this.target.get_height() - this.deadzone.y - this.deadzone.height;
				if(this._scrollTarget.y < edge) {
					this._scrollTarget.set_y(edge);
				}
			}
			if(((this.target) instanceof flixel_FlxSprite)) {
				if(this._lastTargetPosition == null) {
					var X = this.target.x;
					var Y = this.target.y;
					if(Y == null) {
						Y = 0;
					}
					if(X == null) {
						X = 0;
					}
					var point = flixel_math_FlxPoint._pool.get().set(X,Y);
					point._inPool = false;
					this._lastTargetPosition = point;
				}
				var _g = this._scrollTarget;
				_g.set_x(_g.x + (this.target.x - this._lastTargetPosition.x) * this.followLead.x);
				var _g = this._scrollTarget;
				_g.set_y(_g.y + (this.target.y - this._lastTargetPosition.y) * this.followLead.y);
				this._lastTargetPosition.set_x(this.target.x);
				this._lastTargetPosition.set_y(this.target.y);
			}
			if(this.followLerp >= 60 / flixel_FlxG.updateFramerate) {
				var _this = this.scroll;
				var point = this._scrollTarget;
				_this.set_x(point.x);
				_this.set_y(point.y);
				if(point._weak) {
					point.put();
				}
			} else {
				var _g = this.scroll;
				_g.set_x(_g.x + (this._scrollTarget.x - this.scroll.x) * this.followLerp * flixel_FlxG.updateFramerate / 60);
				var _g = this.scroll;
				_g.set_y(_g.y + (this._scrollTarget.y - this.scroll.y) * this.followLerp * flixel_FlxG.updateFramerate / 60);
			}
		}
	}
	,updateFlash: function(elapsed) {
		if(this._fxFlashAlpha > 0.0) {
			this._fxFlashAlpha -= elapsed / this._fxFlashDuration;
			if(this._fxFlashAlpha <= 0 && this._fxFlashComplete != null) {
				this._fxFlashComplete();
			}
		}
	}
	,updateFade: function(elapsed) {
		if(this._fxFadeCompleted) {
			return;
		}
		if(this._fxFadeIn) {
			this._fxFadeAlpha -= elapsed / this._fxFadeDuration;
			if(this._fxFadeAlpha <= 0.0) {
				this._fxFadeAlpha = 0.0;
				this.completeFade();
			}
		} else {
			this._fxFadeAlpha += elapsed / this._fxFadeDuration;
			if(this._fxFadeAlpha >= 1.0) {
				this._fxFadeAlpha = 1.0;
				this.completeFade();
			}
		}
	}
	,completeFade: function() {
		this._fxFadeCompleted = true;
		if(this._fxFadeComplete != null) {
			this._fxFadeComplete();
		}
	}
	,updateShake: function(elapsed) {
		if(this._fxShakeDuration > 0) {
			this._fxShakeDuration -= elapsed;
			if(this._fxShakeDuration <= 0) {
				if(this._fxShakeComplete != null) {
					this._fxShakeComplete();
				}
			} else {
				if(this._fxShakeAxes != flixel_util_FlxAxes.Y) {
					var _g = this.flashSprite;
					_g.set_x(_g.get_x() + flixel_FlxG.random.float(-this._fxShakeIntensity * this.width,this._fxShakeIntensity * this.width) * this.zoom * flixel_FlxG.scaleMode.scale.x);
				}
				if(this._fxShakeAxes != flixel_util_FlxAxes.X) {
					var _g = this.flashSprite;
					_g.set_y(_g.get_y() + flixel_FlxG.random.float(-this._fxShakeIntensity * this.height,this._fxShakeIntensity * this.height) * this.zoom * flixel_FlxG.scaleMode.scale.y);
				}
			}
		}
	}
	,updateFlashSpritePosition: function() {
		if(this.flashSprite != null) {
			this.flashSprite.set_x(this.x * flixel_FlxG.scaleMode.scale.x + this._flashOffset.x);
			this.flashSprite.set_y(this.y * flixel_FlxG.scaleMode.scale.y + this._flashOffset.y);
		}
	}
	,updateFlashOffset: function() {
		this._flashOffset.set_x(this.width * 0.5 * flixel_FlxG.scaleMode.scale.x * this.initialZoom);
		this._flashOffset.set_y(this.height * 0.5 * flixel_FlxG.scaleMode.scale.y * this.initialZoom);
	}
	,updateScrollRect: function() {
		var rect = this._scrollRect != null ? this._scrollRect.get_scrollRect() : null;
		if(rect != null) {
			rect.x = rect.y = 0;
			rect.width = this.width * this.initialZoom * flixel_FlxG.scaleMode.scale.x;
			rect.height = this.height * this.initialZoom * flixel_FlxG.scaleMode.scale.y;
			this._scrollRect.set_scrollRect(rect);
			this._scrollRect.set_x(-0.5 * rect.width);
			this._scrollRect.set_y(-0.5 * rect.height);
		}
	}
	,updateInternalSpritePositions: function() {
		if(flixel_FlxG.renderBlit) {
			if(this._flashBitmap != null) {
				this._flashBitmap.set_x(0);
				this._flashBitmap.set_y(0);
			}
		} else if(this.canvas != null) {
			this.canvas.set_x(-0.5 * this.width * (this.scaleX - this.initialZoom) * flixel_FlxG.scaleMode.scale.x);
			this.canvas.set_y(-0.5 * this.height * (this.scaleY - this.initialZoom) * flixel_FlxG.scaleMode.scale.y);
			this.canvas.set_scaleX(this.totalScaleX);
			this.canvas.set_scaleY(this.totalScaleY);
		}
	}
	,follow: function(Target,Style,Lerp) {
		if(Style == null) {
			Style = flixel_FlxCameraFollowStyle.LOCKON;
		}
		if(Lerp == null) {
			Lerp = 60 / flixel_FlxG.updateFramerate;
		}
		this.style = Style;
		this.target = Target;
		this.set_followLerp(Lerp);
		var helper;
		var w = 0;
		var h = 0;
		this._lastTargetPosition = null;
		switch(Style._hx_index) {
		case 0:
			if(this.target != null) {
				w = this.target.get_width();
				h = this.target.get_height();
			}
			var X = (this.width - w) / 2;
			var Y = (this.height - h) / 2 - h * 0.25;
			var Width = w;
			var Height = h;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
			var rect = _this;
			rect._inPool = false;
			this.deadzone = rect;
			break;
		case 1:
			var w = this.width / 8;
			var h = this.height / 3;
			var X = (this.width - w) / 2;
			var Y = (this.height - h) / 2 - h * 0.25;
			var Width = w;
			var Height = h;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
			var rect = _this;
			rect._inPool = false;
			this.deadzone = rect;
			break;
		case 2:
			helper = Math.max(this.width,this.height) / 4;
			var X = (this.width - helper) / 2;
			var Y = (this.height - helper) / 2;
			var Width = helper;
			var Height = helper;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
			var rect = _this;
			rect._inPool = false;
			this.deadzone = rect;
			break;
		case 3:
			helper = Math.max(this.width,this.height) / 8;
			var X = (this.width - helper) / 2;
			var Y = (this.height - helper) / 2;
			var Width = helper;
			var Height = helper;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
			var rect = _this;
			rect._inPool = false;
			this.deadzone = rect;
			break;
		case 4:
			var X = 0;
			var Y = 0;
			var Width = this.width;
			var Height = this.height;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
			var rect = _this;
			rect._inPool = false;
			this.deadzone = rect;
			break;
		case 5:
			this.deadzone = null;
			break;
		}
	}
	,snapToTarget: function() {
		this.updateFollow();
		var _this = this.scroll;
		var point = this._scrollTarget;
		_this.set_x(point.x);
		_this.set_y(point.y);
		if(point._weak) {
			point.put();
		}
	}
	,focusOn: function(point) {
		this.scroll.set(point.x - this.width * 0.5,point.y - this.height * 0.5);
		if(point._weak) {
			point.put();
		}
	}
	,flash: function(Color,Duration,OnComplete,Force) {
		if(Force == null) {
			Force = false;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(Color == null) {
			Color = -1;
		}
		if(!Force && this._fxFlashAlpha > 0.0) {
			return;
		}
		this._fxFlashColor = Color;
		if(Duration <= 0) {
			Duration = 0.000001;
		}
		this._fxFlashDuration = Duration;
		this._fxFlashComplete = OnComplete;
		this._fxFlashAlpha = 1.0;
	}
	,fade: function(Color,Duration,FadeIn,OnComplete,Force) {
		if(Force == null) {
			Force = false;
		}
		if(FadeIn == null) {
			FadeIn = false;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(Color == null) {
			Color = -16777216;
		}
		if(!this._fxFadeCompleted && !Force) {
			return;
		}
		this._fxFadeColor = Color;
		if(Duration <= 0) {
			Duration = 0.000001;
		}
		this._fxFadeIn = FadeIn;
		this._fxFadeDuration = Duration;
		this._fxFadeComplete = OnComplete;
		this._fxFadeAlpha = this._fxFadeIn ? 0.999999 : 0.000001;
		this._fxFadeCompleted = false;
	}
	,shake: function(Intensity,Duration,OnComplete,Force,Axes) {
		if(Force == null) {
			Force = true;
		}
		if(Duration == null) {
			Duration = 0.5;
		}
		if(Intensity == null) {
			Intensity = 0.05;
		}
		if(Axes == null) {
			Axes = flixel_util_FlxAxes.XY;
		}
		if(!Force && this._fxShakeDuration > 0) {
			return;
		}
		this._fxShakeIntensity = Intensity;
		this._fxShakeDuration = Duration;
		this._fxShakeComplete = OnComplete;
		this._fxShakeAxes = Axes;
	}
	,stopFX: function() {
		this._fxFlashAlpha = 0.0;
		this._fxFadeAlpha = 0.0;
		this._fxShakeDuration = 0;
		this.updateFlashSpritePosition();
	}
	,setFilters: function(filters) {
		this._filters = filters;
	}
	,copyFrom: function(Camera) {
		this.setScrollBounds(Camera.minScrollX,Camera.maxScrollX,Camera.minScrollY,Camera.maxScrollY);
		this.target = Camera.target;
		if(this.target != null) {
			if(Camera.deadzone == null) {
				this.deadzone = null;
			} else {
				if(this.deadzone == null) {
					var _this = flixel_math_FlxRect._pool.get();
					var X = 0;
					var Y = 0;
					var Width = 0;
					var Height = 0;
					if(Height == null) {
						Height = 0;
					}
					if(Width == null) {
						Width = 0;
					}
					if(Y == null) {
						Y = 0;
					}
					if(X == null) {
						X = 0;
					}
					_this.x = X;
					_this.y = Y;
					_this.width = Width;
					_this.height = Height;
					var rect = _this;
					rect._inPool = false;
					this.deadzone = rect;
				}
				var _this = this.deadzone;
				var Rect = Camera.deadzone;
				_this.x = Rect.x;
				_this.y = Rect.y;
				_this.width = Rect.width;
				_this.height = Rect.height;
				if(Rect._weak) {
					if(!Rect._inPool) {
						Rect._inPool = true;
						Rect._weak = false;
						flixel_math_FlxRect._pool.putUnsafe(Rect);
					}
				}
			}
		}
		return this;
	}
	,fill: function(Color,BlendAlpha,FxAlpha,graphics) {
		if(FxAlpha == null) {
			FxAlpha = 1.0;
		}
		if(BlendAlpha == null) {
			BlendAlpha = true;
		}
		if(flixel_FlxG.renderBlit) {
			if(BlendAlpha) {
				this._fill.fillRect(this._flashRect,Color);
				this.buffer.copyPixels(this._fill,this._flashRect,this._flashPoint,null,null,BlendAlpha);
			} else {
				this.buffer.fillRect(this._flashRect,Color);
			}
		} else {
			if(FxAlpha == 0) {
				return;
			}
			var targetGraphics = graphics == null ? this.canvas.get_graphics() : graphics;
			targetGraphics.beginFill(Color,FxAlpha);
			targetGraphics.drawRect(this.viewOffsetX - 1,this.viewOffsetY - 1,this.viewWidth + 2,this.viewHeight + 2);
			targetGraphics.endFill();
		}
	}
	,drawFX: function() {
		var alphaComponent;
		if(this._fxFlashAlpha > 0.0) {
			alphaComponent = this._fxFlashColor >> 24 & 255;
			if(flixel_FlxG.renderBlit) {
				this.fill((((alphaComponent <= 0 ? 255 : alphaComponent) * this._fxFlashAlpha | 0) << 24) + (this._fxFlashColor & 16777215));
			} else {
				this.fill(this._fxFlashColor & 16777215,true,(alphaComponent <= 0 ? 255 : alphaComponent) * this._fxFlashAlpha / 255,this.canvas.get_graphics());
			}
		}
		if(this._fxFadeAlpha > 0.0) {
			alphaComponent = this._fxFadeColor >> 24 & 255;
			if(flixel_FlxG.renderBlit) {
				this.fill((((alphaComponent <= 0 ? 255 : alphaComponent) * this._fxFadeAlpha | 0) << 24) + (this._fxFadeColor & 16777215));
			} else {
				this.fill(this._fxFadeColor & 16777215,true,(alphaComponent <= 0 ? 255 : alphaComponent) * this._fxFadeAlpha / 255,this.canvas.get_graphics());
			}
		}
	}
	,checkResize: function() {
		if(flixel_FlxG.renderBlit) {
			if(this.width != this.buffer.width || this.height != this.buffer.height) {
				var oldBuffer = this.screen.graphic;
				this.buffer = new openfl_display_BitmapData(this.width,this.height,true,0);
				this.screen.set_pixels(this.buffer);
				this.screen.origin.set();
				this._flashBitmap.set_bitmapData(this.buffer);
				this._flashRect.width = this.width;
				this._flashRect.height = this.height;
				this._fill = flixel_util_FlxDestroyUtil.dispose(this._fill);
				this._fill = new openfl_display_BitmapData(this.width,this.height,true,0);
				flixel_FlxG.bitmap.removeIfNoUse(oldBuffer);
			}
			this._blitMatrix.identity();
			this._blitMatrix.translate(-this.viewOffsetX,-this.viewOffsetY);
			this._blitMatrix.scale(this.scaleX,this.scaleY);
			this._useBlitMatrix = this.scaleX < this.initialZoom || this.scaleY < this.initialZoom;
		}
	}
	,updateBlitMatrix: function() {
		this._blitMatrix.identity();
		this._blitMatrix.translate(-this.viewOffsetX,-this.viewOffsetY);
		this._blitMatrix.scale(this.scaleX,this.scaleY);
		this._useBlitMatrix = this.scaleX < this.initialZoom || this.scaleY < this.initialZoom;
	}
	,setSize: function(Width,Height) {
		this.set_width(Width);
		this.set_height(Height);
	}
	,setPosition: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.set_x(X);
		this.set_y(Y);
	}
	,setScrollBoundsRect: function(X,Y,Width,Height,UpdateWorld) {
		if(UpdateWorld == null) {
			UpdateWorld = false;
		}
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		if(UpdateWorld) {
			var _this = flixel_FlxG.worldBounds;
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
		}
		this.setScrollBounds(X,X + Width,Y,Y + Height);
	}
	,setScrollBounds: function(MinX,MaxX,MinY,MaxY) {
		this.minScrollX = MinX;
		this.maxScrollX = MaxX;
		this.minScrollY = MinY;
		this.maxScrollY = MaxY;
		this.updateScroll();
	}
	,setScale: function(X,Y) {
		this.scaleX = X;
		this.scaleY = Y;
		this.totalScaleX = this.scaleX * flixel_FlxG.scaleMode.scale.x;
		this.totalScaleY = this.scaleY * flixel_FlxG.scaleMode.scale.y;
		if(flixel_FlxG.renderBlit) {
			this._blitMatrix.identity();
			this._blitMatrix.translate(-this.viewOffsetX,-this.viewOffsetY);
			this._blitMatrix.scale(this.scaleX,this.scaleY);
			this._useBlitMatrix = this.scaleX < this.initialZoom || this.scaleY < this.initialZoom;
			if(this._useBlitMatrix) {
				this._flashBitmap.set_scaleX(this.initialZoom * flixel_FlxG.scaleMode.scale.x);
				this._flashBitmap.set_scaleY(this.initialZoom * flixel_FlxG.scaleMode.scale.y);
			} else {
				this._flashBitmap.set_scaleX(this.totalScaleX);
				this._flashBitmap.set_scaleY(this.totalScaleY);
			}
		}
		this.viewOffsetX = 0.5 * this.width * (this.scaleX - this.initialZoom) / this.scaleX;
		this.viewOffsetWidth = this.width - this.viewOffsetX;
		this.viewWidth = this.width - 2 * this.viewOffsetX;
		this.viewOffsetY = 0.5 * this.height * (this.scaleY - this.initialZoom) / this.scaleY;
		this.viewOffsetHeight = this.height - this.viewOffsetY;
		this.viewHeight = this.height - 2 * this.viewOffsetY;
		this.updateScrollRect();
		this.updateInternalSpritePositions();
		flixel_FlxG.cameras.cameraResized.dispatch(this);
	}
	,onResize: function() {
		this.updateFlashOffset();
		this.setScale(this.scaleX,this.scaleY);
	}
	,containsPoint: function(point,width,height) {
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 0;
		}
		if(point.x + width > this.viewOffsetX && point.x < this.viewOffsetWidth && point.y + height > this.viewOffsetY) {
			return point.y < this.viewOffsetHeight;
		} else {
			return false;
		}
	}
	,set_followLerp: function(Value) {
		var Max = 60 / flixel_FlxG.updateFramerate;
		var lowerBound = Value < 0 ? 0 : Value;
		return this.followLerp = Max != null && lowerBound > Max ? Max : lowerBound;
	}
	,set_width: function(Value) {
		if(this.width != Value && Value > 0) {
			this.width = Value;
			this.viewOffsetX = 0.5 * this.width * (this.scaleX - this.initialZoom) / this.scaleX;
			this.viewOffsetWidth = this.width - this.viewOffsetX;
			this.viewWidth = this.width - 2 * this.viewOffsetX;
			this.updateFlashOffset();
			this.updateScrollRect();
			this.updateInternalSpritePositions();
			flixel_FlxG.cameras.cameraResized.dispatch(this);
		}
		return Value;
	}
	,set_height: function(Value) {
		if(this.height != Value && Value > 0) {
			this.height = Value;
			this.viewOffsetY = 0.5 * this.height * (this.scaleY - this.initialZoom) / this.scaleY;
			this.viewOffsetHeight = this.height - this.viewOffsetY;
			this.viewHeight = this.height - 2 * this.viewOffsetY;
			this.updateFlashOffset();
			this.updateScrollRect();
			this.updateInternalSpritePositions();
			flixel_FlxG.cameras.cameraResized.dispatch(this);
		}
		return Value;
	}
	,set_zoom: function(Zoom) {
		this.zoom = Zoom == 0 ? flixel_FlxCamera.defaultZoom : Zoom;
		this.setScale(this.zoom,this.zoom);
		return this.zoom;
	}
	,set_alpha: function(Alpha) {
		var lowerBound = Alpha < 0 ? 0 : Alpha;
		this.alpha = lowerBound > 1 ? 1 : lowerBound;
		if(flixel_FlxG.renderBlit) {
			this._flashBitmap.set_alpha(Alpha);
		} else {
			this.canvas.set_alpha(Alpha);
		}
		return Alpha;
	}
	,set_angle: function(Angle) {
		this.angle = Angle;
		this.flashSprite.set_rotation(Angle);
		return Angle;
	}
	,set_color: function(Color) {
		this.color = Color;
		var colorTransform;
		if(flixel_FlxG.renderBlit) {
			if(this._flashBitmap == null) {
				return Color;
			}
			colorTransform = this._flashBitmap.get_transform().get_colorTransform();
		} else {
			colorTransform = this.canvas.get_transform().get_colorTransform();
		}
		colorTransform.redMultiplier = (this.color >> 16 & 255) / 255;
		colorTransform.greenMultiplier = (this.color >> 8 & 255) / 255;
		colorTransform.blueMultiplier = (this.color & 255) / 255;
		if(flixel_FlxG.renderBlit) {
			this._flashBitmap.get_transform().set_colorTransform(colorTransform);
		} else {
			this.canvas.get_transform().set_colorTransform(colorTransform);
		}
		return Color;
	}
	,set_antialiasing: function(Antialiasing) {
		this.antialiasing = Antialiasing;
		if(flixel_FlxG.renderBlit) {
			this._flashBitmap.smoothing = Antialiasing;
		}
		return Antialiasing;
	}
	,set_x: function(x) {
		this.x = x;
		this.updateFlashSpritePosition();
		return x;
	}
	,set_y: function(y) {
		this.y = y;
		this.updateFlashSpritePosition();
		return y;
	}
	,set_visible: function(visible) {
		if(this.flashSprite != null) {
			this.flashSprite.set_visible(visible);
		}
		return this.visible = visible;
	}
	,calcOffsetX: function() {
		this.viewOffsetX = 0.5 * this.width * (this.scaleX - this.initialZoom) / this.scaleX;
		this.viewOffsetWidth = this.width - this.viewOffsetX;
		this.viewWidth = this.width - 2 * this.viewOffsetX;
	}
	,calcOffsetY: function() {
		this.viewOffsetY = 0.5 * this.height * (this.scaleY - this.initialZoom) / this.scaleY;
		this.viewOffsetHeight = this.height - this.viewOffsetY;
		this.viewHeight = this.height - 2 * this.viewOffsetY;
	}
	,__class__: flixel_FlxCamera
	,__properties__: $extend(flixel_FlxBasic.prototype.__properties__,{set_antialiasing:"set_antialiasing",set_color:"set_color",set_angle:"set_angle",set_alpha:"set_alpha",set_zoom:"set_zoom",set_height:"set_height",set_width:"set_width",set_followLerp:"set_followLerp",set_y:"set_y",set_x:"set_x"})
});
var flixel_FlxCameraFollowStyle = $hxEnums["flixel.FlxCameraFollowStyle"] = { __ename__ : "flixel.FlxCameraFollowStyle", __constructs__ : ["LOCKON","PLATFORMER","TOPDOWN","TOPDOWN_TIGHT","SCREEN_BY_SCREEN","NO_DEAD_ZONE"]
	,LOCKON: {_hx_index:0,__enum__:"flixel.FlxCameraFollowStyle",toString:$estr}
	,PLATFORMER: {_hx_index:1,__enum__:"flixel.FlxCameraFollowStyle",toString:$estr}
	,TOPDOWN: {_hx_index:2,__enum__:"flixel.FlxCameraFollowStyle",toString:$estr}
	,TOPDOWN_TIGHT: {_hx_index:3,__enum__:"flixel.FlxCameraFollowStyle",toString:$estr}
	,SCREEN_BY_SCREEN: {_hx_index:4,__enum__:"flixel.FlxCameraFollowStyle",toString:$estr}
	,NO_DEAD_ZONE: {_hx_index:5,__enum__:"flixel.FlxCameraFollowStyle",toString:$estr}
};
flixel_FlxCameraFollowStyle.__empty_constructs__ = [flixel_FlxCameraFollowStyle.LOCKON,flixel_FlxCameraFollowStyle.PLATFORMER,flixel_FlxCameraFollowStyle.TOPDOWN,flixel_FlxCameraFollowStyle.TOPDOWN_TIGHT,flixel_FlxCameraFollowStyle.SCREEN_BY_SCREEN,flixel_FlxCameraFollowStyle.NO_DEAD_ZONE];
var flixel_system_FlxVersion = function(Major,Minor,Patch) {
	this.major = Major;
	this.minor = Minor;
	this.patch = Patch;
};
$hxClasses["flixel.system.FlxVersion"] = flixel_system_FlxVersion;
flixel_system_FlxVersion.__name__ = "flixel.system.FlxVersion";
flixel_system_FlxVersion.prototype = {
	major: null
	,minor: null
	,patch: null
	,toString: function() {
		var sha = flixel_system_FlxVersion.sha;
		if(sha != "") {
			sha = "@" + sha.substring(0,7);
		}
		return "HaxeFlixel " + this.major + "." + this.minor + "." + this.patch + sha;
	}
	,__class__: flixel_system_FlxVersion
};
var flixel_system_frontEnds_BitmapFrontEnd = function() {
	this._lastUniqueKeyIndex = 0;
	this.reset();
};
$hxClasses["flixel.system.frontEnds.BitmapFrontEnd"] = flixel_system_frontEnds_BitmapFrontEnd;
flixel_system_frontEnds_BitmapFrontEnd.__name__ = "flixel.system.frontEnds.BitmapFrontEnd";
flixel_system_frontEnds_BitmapFrontEnd.prototype = {
	_cache: null
	,_whitePixel: null
	,_lastUniqueKeyIndex: null
	,onAssetsReload: function(_) {
		var key = haxe_ds_StringMap.keysIterator(this._cache.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var obj = this._cache.h[key1];
			if(obj != null && (obj.assetsClass != null || obj.assetsKey != null)) {
				obj.onAssetsReload();
			}
		}
	}
	,onContext: function() {
		var key = haxe_ds_StringMap.keysIterator(this._cache.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var obj = this._cache.h[key1];
			if(obj != null && obj.isDumped) {
				obj.onContext();
			}
		}
	}
	,dumpCache: function() {
	}
	,undumpCache: function() {
	}
	,checkCache: function(Key) {
		return this._cache.h[Key] != null;
	}
	,create: function(Width,Height,Color,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		return flixel_graphics_FlxGraphic.fromRectangle(Width,Height,Color,Unique,Key);
	}
	,add: function(Graphic,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(((Graphic) instanceof flixel_graphics_FlxGraphic)) {
			return flixel_graphics_FlxGraphic.fromGraphic(Graphic,Unique,Key);
		} else if(((Graphic) instanceof openfl_display_BitmapData)) {
			return flixel_graphics_FlxGraphic.fromBitmapData(Graphic,Unique,Key);
		}
		return flixel_graphics_FlxGraphic.fromAssetKey(Std.string(Graphic),Unique,Key);
	}
	,addGraphic: function(graphic) {
		this._cache.h[graphic.key] = graphic;
		return graphic;
	}
	,get: function(key) {
		return this._cache.h[key];
	}
	,findKeyForBitmap: function(bmd) {
		var key = haxe_ds_StringMap.keysIterator(this._cache.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var obj = this._cache.h[key1];
			if(obj != null && obj.bitmap == bmd) {
				return key1;
			}
		}
		return null;
	}
	,getKeyForClass: function(source) {
		return source.__name__;
	}
	,generateKey: function(systemKey,userKey,unique) {
		if(unique == null) {
			unique = false;
		}
		var key = userKey;
		if(key == null) {
			key = systemKey;
		}
		if(unique || key == null) {
			key = this.getUniqueKey(key);
		}
		return key;
	}
	,getUniqueKey: function(baseKey) {
		if(baseKey == null) {
			baseKey = "pixels";
		}
		if(this._cache.h[baseKey] == null) {
			return baseKey;
		}
		var i = this._lastUniqueKeyIndex;
		var uniqueKey;
		while(true) {
			++i;
			uniqueKey = baseKey + i;
			if(!(this._cache.h[uniqueKey] != null)) {
				break;
			}
		}
		this._lastUniqueKeyIndex = i;
		return uniqueKey;
	}
	,getKeyWithSpacesAndBorders: function(baseKey,frameSize,frameSpacing,frameBorder,region) {
		var result = baseKey;
		if(region != null) {
			result += "_Region:" + region.x + "_" + region.y + "_" + region.width + "_" + region.height;
		}
		if(frameSize != null) {
			result += "_FrameSize:" + frameSize.x + "_" + frameSize.y;
		}
		if(frameSpacing != null) {
			result += "_Spaces:" + frameSpacing.x + "_" + frameSpacing.y;
		}
		if(frameBorder != null) {
			result += "_Border:" + frameBorder.x + "_" + frameBorder.y;
		}
		return result;
	}
	,remove: function(graphic) {
		if(graphic != null) {
			var key = graphic.key;
			if(key != null) {
				openfl_utils_Assets.cache.removeBitmapData(key);
				var _this = this._cache;
				if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
					delete(_this.h[key]);
				}
			}
			graphic.destroy();
		}
	}
	,removeByKey: function(key) {
		if(key != null) {
			var obj = this._cache.h[key];
			if(key != null) {
				openfl_utils_Assets.cache.removeBitmapData(key);
				var _this = this._cache;
				if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
					delete(_this.h[key]);
				}
			}
			if(obj != null) {
				obj.destroy();
			}
		}
	}
	,removeIfNoUse: function(graphic) {
		if(graphic != null && graphic.get_useCount() == 0 && !graphic.persist) {
			this.remove(graphic);
		}
	}
	,clearCache: function() {
		if(this._cache == null) {
			this._cache = new haxe_ds_StringMap();
			return;
		}
		var key = haxe_ds_StringMap.keysIterator(this._cache.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var obj = this._cache.h[key1];
			if(obj != null && !obj.persist && obj.get_useCount() <= 0) {
				if(key1 != null) {
					openfl_utils_Assets.cache.removeBitmapData(key1);
					var _this = this._cache;
					if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
						delete(_this.h[key1]);
					}
				}
				obj.destroy();
			}
		}
	}
	,removeKey: function(key) {
		if(key != null) {
			openfl_utils_Assets.cache.removeBitmapData(key);
			var _this = this._cache;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
		}
	}
	,reset: function() {
		if(this._cache == null) {
			this._cache = new haxe_ds_StringMap();
			return;
		}
		var key = haxe_ds_StringMap.keysIterator(this._cache.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var obj = this._cache.h[key1];
			if(key1 != null) {
				openfl_utils_Assets.cache.removeBitmapData(key1);
				var _this = this._cache;
				if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
					delete(_this.h[key1]);
				}
			}
			if(obj != null) {
				obj.destroy();
			}
		}
	}
	,clearUnused: function() {
		var key = haxe_ds_StringMap.keysIterator(this._cache.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var obj = this._cache.h[key1];
			if(obj != null && obj.get_useCount() <= 0 && !obj.persist && obj.get_destroyOnNoUse()) {
				this.removeByKey(key1);
			}
		}
	}
	,get_maxTextureSize: function() {
		return lime_graphics_opengl_GL.context.getParameter(3379);
	}
	,get_whitePixel: function() {
		if(this._whitePixel == null) {
			var bd = new openfl_display_BitmapData(10,10,true,-1);
			var graphic = flixel_FlxG.bitmap.add(bd,true,"whitePixels");
			graphic.persist = true;
			this._whitePixel = graphic.get_imageFrame().get_frame();
		}
		return this._whitePixel;
	}
	,__class__: flixel_system_frontEnds_BitmapFrontEnd
	,__properties__: {get_whitePixel:"get_whitePixel",get_maxTextureSize:"get_maxTextureSize"}
};
var flixel_system_frontEnds_BitmapLogFrontEnd = function() {
};
$hxClasses["flixel.system.frontEnds.BitmapLogFrontEnd"] = flixel_system_frontEnds_BitmapLogFrontEnd;
flixel_system_frontEnds_BitmapLogFrontEnd.__name__ = "flixel.system.frontEnds.BitmapLogFrontEnd";
flixel_system_frontEnds_BitmapLogFrontEnd.prototype = {
	add: function(Data,Name) {
		if(Name == null) {
			Name = "";
		}
	}
	,clear: function() {
	}
	,clearAt: function(Index) {
		if(Index == null) {
			Index = -1;
		}
	}
	,viewCache: function() {
	}
	,__class__: flixel_system_frontEnds_BitmapLogFrontEnd
};
var flixel_system_frontEnds_CameraFrontEnd = function() {
	this._cameraRect = new openfl_geom_Rectangle();
	this.useBufferLocking = false;
	this.cameraResized = new flixel_util__$FlxSignal_FlxSignal1();
	this.cameraRemoved = new flixel_util__$FlxSignal_FlxSignal1();
	this.cameraAdded = new flixel_util__$FlxSignal_FlxSignal1();
	this.defaults = [];
	this.list = [];
	flixel_FlxCamera._defaultCameras = this.defaults;
};
$hxClasses["flixel.system.frontEnds.CameraFrontEnd"] = flixel_system_frontEnds_CameraFrontEnd;
flixel_system_frontEnds_CameraFrontEnd.__name__ = "flixel.system.frontEnds.CameraFrontEnd";
flixel_system_frontEnds_CameraFrontEnd.prototype = {
	list: null
	,defaults: null
	,cameraAdded: null
	,cameraRemoved: null
	,cameraResized: null
	,useBufferLocking: null
	,_cameraRect: null
	,add: function(NewCamera,DefaultDrawTarget) {
		if(DefaultDrawTarget == null) {
			DefaultDrawTarget = true;
		}
		flixel_FlxG.game.addChildAt(NewCamera.flashSprite,flixel_FlxG.game.getChildIndex(flixel_FlxG.game._inputContainer));
		this.list.push(NewCamera);
		if(DefaultDrawTarget) {
			this.defaults.push(NewCamera);
		}
		NewCamera.ID = this.list.length - 1;
		this.cameraAdded.dispatch(NewCamera);
		return NewCamera;
	}
	,remove: function(Camera,Destroy) {
		if(Destroy == null) {
			Destroy = true;
		}
		var index = this.list.indexOf(Camera);
		if(Camera != null && index != -1) {
			flixel_FlxG.game.removeChild(Camera.flashSprite);
			this.list.splice(index,1);
			HxOverrides.remove(this.defaults,Camera);
		} else {
			return;
		}
		if(flixel_FlxG.renderTile) {
			var _g = 0;
			var _g1 = this.list.length;
			while(_g < _g1) {
				var i = _g++;
				this.list[i].ID = i;
			}
		}
		if(Destroy) {
			Camera.destroy();
		}
		this.cameraRemoved.dispatch(Camera);
	}
	,setDefaultDrawTarget: function(camera,value) {
		if(this.list.indexOf(camera) == -1) {
			return;
		}
		var index = this.defaults.indexOf(camera);
		if(value && index == -1) {
			this.defaults.push(camera);
		} else if(!value) {
			this.defaults.splice(index,1);
		}
	}
	,reset: function(NewCamera) {
		while(this.list.length > 0) this.remove(this.list[0]);
		if(NewCamera == null) {
			NewCamera = new flixel_FlxCamera(0,0,flixel_FlxG.width,flixel_FlxG.height);
		}
		flixel_FlxG.camera = this.add(NewCamera);
		NewCamera.ID = 0;
		flixel_FlxCamera._defaultCameras = this.defaults;
	}
	,flash: function(Color,Duration,OnComplete,Force) {
		if(Force == null) {
			Force = false;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(Color == null) {
			Color = -1;
		}
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.flash(Color,Duration,OnComplete,Force);
		}
	}
	,fade: function(Color,Duration,FadeIn,OnComplete,Force) {
		if(Force == null) {
			Force = false;
		}
		if(FadeIn == null) {
			FadeIn = false;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(Color == null) {
			Color = -16777216;
		}
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.fade(Color,Duration,FadeIn,OnComplete,Force);
		}
	}
	,shake: function(Intensity,Duration,OnComplete,Force,Axes) {
		if(Force == null) {
			Force = true;
		}
		if(Duration == null) {
			Duration = 0.5;
		}
		if(Intensity == null) {
			Intensity = 0.05;
		}
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.shake(Intensity,Duration,OnComplete,Force,Axes);
		}
	}
	,lock: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera == null || !camera.exists || !camera.visible) {
				continue;
			}
			if(flixel_FlxG.renderBlit) {
				camera.checkResize();
				if(this.useBufferLocking) {
					camera.buffer.lock();
				}
			}
			if(flixel_FlxG.renderTile) {
				camera.clearDrawStack();
				camera.canvas.get_graphics().clear();
			}
			if(flixel_FlxG.renderBlit) {
				camera.fill(camera.bgColor,camera.useBgAlphaBlending);
				camera.screen.dirty = true;
			} else {
				camera.fill(camera.bgColor & 16777215,camera.useBgAlphaBlending,(camera.bgColor >> 24 & 255) / 255);
			}
		}
	}
	,render: function() {
		if(flixel_FlxG.renderTile) {
			var _g = 0;
			var _g1 = this.list;
			while(_g < _g1.length) {
				var camera = _g1[_g];
				++_g;
				if(camera != null && camera.exists && camera.visible) {
					camera.render();
				}
			}
		}
	}
	,unlock: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera == null || !camera.exists || !camera.visible) {
				continue;
			}
			camera.drawFX();
			if(flixel_FlxG.renderBlit) {
				if(this.useBufferLocking) {
					camera.buffer.unlock();
				}
				camera.screen.dirty = true;
			}
		}
	}
	,update: function(elapsed) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera != null && camera.exists && camera.active) {
				camera.update(elapsed);
			}
		}
	}
	,resize: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.onResize();
		}
	}
	,get_bgColor: function() {
		if(flixel_FlxG.camera == null) {
			return -16777216;
		} else {
			return flixel_FlxG.camera.bgColor;
		}
	}
	,set_bgColor: function(Color) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.bgColor = Color;
		}
		return Color;
	}
	,__class__: flixel_system_frontEnds_CameraFrontEnd
	,__properties__: {set_bgColor:"set_bgColor",get_bgColor:"get_bgColor"}
};
var flixel_system_frontEnds_ConsoleFrontEnd = function() {
	this.stepAfterCommand = true;
	this.autoPause = true;
};
$hxClasses["flixel.system.frontEnds.ConsoleFrontEnd"] = flixel_system_frontEnds_ConsoleFrontEnd;
flixel_system_frontEnds_ConsoleFrontEnd.__name__ = "flixel.system.frontEnds.ConsoleFrontEnd";
flixel_system_frontEnds_ConsoleFrontEnd.prototype = {
	autoPause: null
	,stepAfterCommand: null
	,registerFunction: function(FunctionAlias,Function1) {
	}
	,registerObject: function(ObjectAlias,AnyObject) {
	}
	,registerClass: function(cl) {
	}
	,registerEnum: function(e) {
	}
	,__class__: flixel_system_frontEnds_ConsoleFrontEnd
};
var flixel_system_frontEnds_DebuggerFrontEnd = function() {
	this.visible = false;
	this.visibilityChanged = new flixel_util__$FlxSignal_FlxSignal0();
	this.drawDebugChanged = new flixel_util__$FlxSignal_FlxSignal0();
	this.drawDebug = false;
	this.toggleKeys = [113,192,220];
	this.precision = 3;
};
$hxClasses["flixel.system.frontEnds.DebuggerFrontEnd"] = flixel_system_frontEnds_DebuggerFrontEnd;
flixel_system_frontEnds_DebuggerFrontEnd.__name__ = "flixel.system.frontEnds.DebuggerFrontEnd";
flixel_system_frontEnds_DebuggerFrontEnd.prototype = {
	precision: null
	,toggleKeys: null
	,drawDebug: null
	,drawDebugChanged: null
	,visibilityChanged: null
	,visible: null
	,setLayout: function(Layout) {
	}
	,resetLayout: function() {
	}
	,addButton: function(Alignment,Icon,UpHandler,ToggleMode,UpdateLayout) {
		if(UpdateLayout == null) {
			UpdateLayout = true;
		}
		if(ToggleMode == null) {
			ToggleMode = false;
		}
		return null;
	}
	,track: function(ObjectOrClass,WindowTitle) {
		return null;
	}
	,addTrackerProfile: function(Profile) {
	}
	,removeButton: function(Button,UpdateLayout) {
		if(UpdateLayout == null) {
			UpdateLayout = true;
		}
	}
	,set_drawDebug: function(Value) {
		if(this.drawDebug == Value) {
			return this.drawDebug;
		}
		this.drawDebug = Value;
		return this.drawDebug;
	}
	,set_visible: function(Value) {
		if(this.visible == Value) {
			return this.visible;
		}
		this.visible = Value;
		return this.visible;
	}
	,__class__: flixel_system_frontEnds_DebuggerFrontEnd
	,__properties__: {set_visible:"set_visible",set_drawDebug:"set_drawDebug"}
};
var flixel_system_frontEnds_HTML5FrontEnd = function() {
	this.browser = this.getBrowser();
	this.platform = this.getPlatform();
	this.onMobile = this.getOnMobile();
};
$hxClasses["flixel.system.frontEnds.HTML5FrontEnd"] = flixel_system_frontEnds_HTML5FrontEnd;
flixel_system_frontEnds_HTML5FrontEnd.__name__ = "flixel.system.frontEnds.HTML5FrontEnd";
flixel_system_frontEnds_HTML5FrontEnd.prototype = {
	browser: null
	,platform: null
	,onMobile: null
	,browserPosition: null
	,getBrowser: function() {
		if(this.userAgentContains(" OPR/")) {
			return flixel_system_frontEnds_FlxBrowser.OPERA;
		} else if(this.userAgentContains("chrome",true)) {
			return flixel_system_frontEnds_FlxBrowser.CHROME;
		} else if($global.navigator.appName == "Netscape") {
			return flixel_system_frontEnds_FlxBrowser.FIREFOX;
		} else if(document.documentMode) {
			return flixel_system_frontEnds_FlxBrowser.INTERNET_EXPLORER;
		} else if(Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor") > 0) {
			return flixel_system_frontEnds_FlxBrowser.SAFARI;
		}
		return flixel_system_frontEnds_FlxBrowser.UNKNOWN;
	}
	,getPlatform: function() {
		if(this.userAgentContains("Win")) {
			return flixel_system_frontEnds_FlxPlatform.WINDOWS;
		} else if(this.userAgentContains("IEMobile")) {
			return flixel_system_frontEnds_FlxPlatform.WINDOWS_PHONE;
		} else if(this.userAgentContains("Android")) {
			return flixel_system_frontEnds_FlxPlatform.ANDROID;
		} else if(this.userAgentContains("Linux")) {
			return flixel_system_frontEnds_FlxPlatform.LINUX;
		} else if(this.userAgentContains("BlackBerry")) {
			return flixel_system_frontEnds_FlxPlatform.BLACKBERRY;
		} else if(this.userAgentContains("iPhone")) {
			return flixel_system_frontEnds_FlxPlatform.IOS(flixel_system_frontEnds_FlxIOSDevice.IPHONE);
		} else if(this.userAgentContains("iPad")) {
			return flixel_system_frontEnds_FlxPlatform.IOS(flixel_system_frontEnds_FlxIOSDevice.IPAD);
		} else if(this.userAgentContains("iPod")) {
			return flixel_system_frontEnds_FlxPlatform.IOS(flixel_system_frontEnds_FlxIOSDevice.IPOD);
		} else if(this.userAgentContains("Mac")) {
			return flixel_system_frontEnds_FlxPlatform.MAC;
		} else {
			return flixel_system_frontEnds_FlxPlatform.UNKNOWN;
		}
	}
	,getOnMobile: function() {
		var _g = this.platform;
		switch(_g._hx_index) {
		case 3:case 4:case 5:
			return true;
		case 6:
			var _g1 = _g.device;
			return true;
		default:
			return false;
		}
	}
	,userAgentContains: function(substring,toLowerCase) {
		if(toLowerCase == null) {
			toLowerCase = false;
		}
		var userAgent = $global.navigator.userAgent;
		if(toLowerCase) {
			userAgent = userAgent.toLowerCase();
		}
		return userAgent.indexOf(substring) != -1;
	}
	,get_browserPosition: function() {
		if(this.browserPosition == null) {
			var X = 0;
			var Y = 0;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			this.browserPosition = point;
		}
		this.browserPosition.set(window.screenX,window.screenY);
		return this.browserPosition;
	}
	,get_browserWidth: function() {
		return window.innerWidth;
	}
	,get_browserHeight: function() {
		return window.innerHeight;
	}
	,__class__: flixel_system_frontEnds_HTML5FrontEnd
	,__properties__: {get_browserPosition:"get_browserPosition",get_browserHeight:"get_browserHeight",get_browserWidth:"get_browserWidth"}
};
var flixel_system_frontEnds_InputFrontEnd = function() {
	this.resetOnStateSwitch = true;
	this.list = [];
};
$hxClasses["flixel.system.frontEnds.InputFrontEnd"] = flixel_system_frontEnds_InputFrontEnd;
flixel_system_frontEnds_InputFrontEnd.__name__ = "flixel.system.frontEnds.InputFrontEnd";
flixel_system_frontEnds_InputFrontEnd.prototype = {
	add_flixel_input_gamepad_FlxGamepadManager: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.getClassName(Input,true) == flixel_util_FlxStringUtil.getClassName(input,true)) {
				return Input;
			}
		}
		this.list.push(Input);
		return Input;
	}
	,add_flixel_input_touch_FlxTouchManager: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.getClassName(Input,true) == flixel_util_FlxStringUtil.getClassName(input,true)) {
				return Input;
			}
		}
		this.list.push(Input);
		return Input;
	}
	,add_flixel_input_keyboard_FlxKeyboard: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.getClassName(Input,true) == flixel_util_FlxStringUtil.getClassName(input,true)) {
				return Input;
			}
		}
		this.list.push(Input);
		return Input;
	}
	,replace_flixel_input_mouse_FlxMouse: function(Old,New) {
		var i = 0;
		var success = false;
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(input == Old) {
				this.list[i] = New;
				success = true;
				break;
			}
			++i;
		}
		if(success) {
			return New;
		}
		return null;
	}
	,add_flixel_input_mouse_FlxMouse: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.getClassName(Input,true) == flixel_util_FlxStringUtil.getClassName(input,true)) {
				return Input;
			}
		}
		this.list.push(Input);
		return Input;
	}
	,list: null
	,resetOnStateSwitch: null
	,reset: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.reset();
		}
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.update();
		}
	}
	,onFocus: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.onFocus();
		}
	}
	,onFocusLost: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.onFocusLost();
		}
	}
	,onStateSwitch: function() {
		if(this.resetOnStateSwitch) {
			this.reset();
		}
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input = flixel_util_FlxDestroyUtil.destroy(input);
		}
	}
	,__class__: flixel_system_frontEnds_InputFrontEnd
};
var flixel_system_frontEnds_LogFrontEnd = function() {
	this.redirectTraces = false;
	this._standardTraceFunction = haxe_Log.trace;
};
$hxClasses["flixel.system.frontEnds.LogFrontEnd"] = flixel_system_frontEnds_LogFrontEnd;
flixel_system_frontEnds_LogFrontEnd.__name__ = "flixel.system.frontEnds.LogFrontEnd";
flixel_system_frontEnds_LogFrontEnd.prototype = {
	redirectTraces: null
	,_standardTraceFunction: null
	,add: function(Data) {
	}
	,warn: function(Data) {
	}
	,error: function(Data) {
	}
	,notice: function(Data) {
	}
	,advanced: function(Data,Style,FireOnce) {
		if(FireOnce == null) {
			FireOnce = false;
		}
	}
	,clear: function() {
	}
	,set_redirectTraces: function(Redirect) {
		haxe_Log.trace = Redirect ? $bind(this,this.processTraceData) : this._standardTraceFunction;
		return this.redirectTraces = Redirect;
	}
	,processTraceData: function(Data,Info) {
		var paramArray = [Data];
		if(Info.customParams != null) {
			var _g = 0;
			var _g1 = Info.customParams;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				paramArray.push(i);
			}
		}
		this.advanced(paramArray,flixel_system_debug_log_LogStyle.NORMAL);
	}
	,__class__: flixel_system_frontEnds_LogFrontEnd
	,__properties__: {set_redirectTraces:"set_redirectTraces"}
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__toStr = null;
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var flixel_math_FlxRandom = function(InitialSeed) {
	this.internalSeed = 1;
	this._floatNormalRho = 0;
	this._twoPI = Math.PI * 2;
	this._floatNormalRand2 = 0;
	this._floatNormalRand1 = 0;
	this._hasFloatNormalSpare = false;
	this.initialSeed = 1;
	if(InitialSeed != null) {
		var lowerBound = InitialSeed < 1 ? 1 : InitialSeed;
		var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		this.initialSeed = (this.internalSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0) | 0;
	} else {
		var Value = Math.random() * 2147483647 | 0;
		var lowerBound = Value < 1 ? 1 : Value;
		var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		this.initialSeed = (this.internalSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0) | 0;
	}
};
$hxClasses["flixel.math.FlxRandom"] = flixel_math_FlxRandom;
flixel_math_FlxRandom.__name__ = "flixel.math.FlxRandom";
flixel_math_FlxRandom.rangeBound = function(Value) {
	var lowerBound = Value < 1 ? 1 : Value;
	return (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
};
flixel_math_FlxRandom.prototype = {
	getObject_flixel_group_FlxTypedGroup_T: function(Objects,WeightsArray,StartIndex,EndIndex) {
		if(StartIndex == null) {
			StartIndex = 0;
		}
		var selected = null;
		if(Objects.length != 0) {
			if(WeightsArray == null) {
				var _g = [];
				var _g1 = 0;
				var _g2 = Objects.length;
				while(_g1 < _g2) {
					var i = _g1++;
					_g.push(1);
				}
				WeightsArray = _g;
			}
			if(EndIndex == null) {
				EndIndex = Objects.length - 1;
			}
			var Max = Objects.length - 1;
			var lowerBound = StartIndex < 0 ? 0 : StartIndex;
			StartIndex = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
			var Max = Objects.length - 1;
			var lowerBound = EndIndex < 0 ? 0 : EndIndex;
			EndIndex = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
			if(EndIndex < StartIndex) {
				StartIndex += EndIndex;
				EndIndex = StartIndex - EndIndex;
				StartIndex -= EndIndex;
			}
			if(EndIndex > WeightsArray.length - 1) {
				EndIndex = WeightsArray.length - 1;
			}
			var _g = [];
			var _g1 = StartIndex;
			var _g2 = EndIndex + 1;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(WeightsArray[i]);
			}
			flixel_math_FlxRandom._arrayFloatHelper = _g;
			selected = Objects[StartIndex + this.weightedPick(flixel_math_FlxRandom._arrayFloatHelper)];
		}
		return selected;
	}
	,getObject_Array_String: function(Objects,WeightsArray,StartIndex,EndIndex) {
		if(StartIndex == null) {
			StartIndex = 0;
		}
		var selected = null;
		if(Objects.length != 0) {
			if(WeightsArray == null) {
				var _g = [];
				var _g1 = 0;
				var _g2 = Objects.length;
				while(_g1 < _g2) {
					var i = _g1++;
					_g.push(1);
				}
				WeightsArray = _g;
			}
			if(EndIndex == null) {
				EndIndex = Objects.length - 1;
			}
			var Max = Objects.length - 1;
			var lowerBound = StartIndex < 0 ? 0 : StartIndex;
			StartIndex = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
			var Max = Objects.length - 1;
			var lowerBound = EndIndex < 0 ? 0 : EndIndex;
			EndIndex = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
			if(EndIndex < StartIndex) {
				StartIndex += EndIndex;
				EndIndex = StartIndex - EndIndex;
				StartIndex -= EndIndex;
			}
			if(EndIndex > WeightsArray.length - 1) {
				EndIndex = WeightsArray.length - 1;
			}
			var _g = [];
			var _g1 = StartIndex;
			var _g2 = EndIndex + 1;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(WeightsArray[i]);
			}
			flixel_math_FlxRandom._arrayFloatHelper = _g;
			selected = Objects[StartIndex + this.weightedPick(flixel_math_FlxRandom._arrayFloatHelper)];
		}
		return selected;
	}
	,getObject_flixel_system_FlxSound: function(Objects,WeightsArray,StartIndex,EndIndex) {
		if(StartIndex == null) {
			StartIndex = 0;
		}
		var selected = null;
		if(Objects.length != 0) {
			if(WeightsArray == null) {
				var _g = [];
				var _g1 = 0;
				var _g2 = Objects.length;
				while(_g1 < _g2) {
					var i = _g1++;
					_g.push(1);
				}
				WeightsArray = _g;
			}
			if(EndIndex == null) {
				EndIndex = Objects.length - 1;
			}
			var Max = Objects.length - 1;
			var lowerBound = StartIndex < 0 ? 0 : StartIndex;
			StartIndex = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
			var Max = Objects.length - 1;
			var lowerBound = EndIndex < 0 ? 0 : EndIndex;
			EndIndex = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
			if(EndIndex < StartIndex) {
				StartIndex += EndIndex;
				EndIndex = StartIndex - EndIndex;
				StartIndex -= EndIndex;
			}
			if(EndIndex > WeightsArray.length - 1) {
				EndIndex = WeightsArray.length - 1;
			}
			var _g = [];
			var _g1 = StartIndex;
			var _g2 = EndIndex + 1;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(WeightsArray[i]);
			}
			flixel_math_FlxRandom._arrayFloatHelper = _g;
			selected = Objects[StartIndex + this.weightedPick(flixel_math_FlxRandom._arrayFloatHelper)];
		}
		return selected;
	}
	,initialSeed: null
	,resetInitialSeed: function() {
		var Value = Math.random() * 2147483647 | 0;
		var lowerBound = Value < 1 ? 1 : Value;
		var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		return this.initialSeed = (this.internalSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0) | 0;
	}
	,int: function(Min,Max,Excludes) {
		if(Max == null) {
			Max = 2147483647;
		}
		if(Min == null) {
			Min = 0;
		}
		if(Min == 0 && Max == 2147483647 && Excludes == null) {
			return (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) | 0;
		} else if(Min == Max) {
			return Min;
		} else {
			if(Min > Max) {
				Min += Max;
				Max = Min - Max;
				Min -= Max;
			}
			if(Excludes == null) {
				return Math.floor(Min + (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647 * (Max - Min + 1));
			} else {
				var result = 0;
				while(true) {
					result = Math.floor(Min + (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647 * (Max - Min + 1));
					if(!(Excludes.indexOf(result) >= 0)) {
						break;
					}
				}
				return result;
			}
		}
	}
	,float: function(Min,Max,Excludes) {
		if(Max == null) {
			Max = 1;
		}
		if(Min == null) {
			Min = 0;
		}
		var result = 0;
		if(Min == 0 && Max == 1 && Excludes == null) {
			return (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647;
		} else if(Min == Max) {
			result = Min;
		} else {
			if(Min > Max) {
				Min += Max;
				Max = Min - Max;
				Min -= Max;
			}
			if(Excludes == null) {
				result = Min + (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647 * (Max - Min);
			} else {
				while(true) {
					result = Min + (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647 * (Max - Min);
					if(!(Excludes.indexOf(result) >= 0)) {
						break;
					}
				}
			}
		}
		return result;
	}
	,_hasFloatNormalSpare: null
	,_floatNormalRand1: null
	,_floatNormalRand2: null
	,_twoPI: null
	,_floatNormalRho: null
	,floatNormal: function(Mean,StdDev) {
		if(StdDev == null) {
			StdDev = 1;
		}
		if(Mean == null) {
			Mean = 0;
		}
		if(this._hasFloatNormalSpare) {
			this._hasFloatNormalSpare = false;
			var scale = StdDev * this._floatNormalRho;
			return Mean + scale * this._floatNormalRand2;
		}
		this._hasFloatNormalSpare = true;
		var theta = this._twoPI * ((this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647);
		this._floatNormalRho = Math.sqrt(-2 * Math.log(1 - (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647));
		var scale = StdDev * this._floatNormalRho;
		this._floatNormalRand1 = Math.cos(theta);
		this._floatNormalRand2 = Math.sin(theta);
		return Mean + scale * this._floatNormalRand1;
	}
	,bool: function(Chance) {
		if(Chance == null) {
			Chance = 50;
		}
		return this.float(0,100) < Chance;
	}
	,sign: function(Chance) {
		if(Chance == null) {
			Chance = 50;
		}
		var Chance1 = Chance;
		if(Chance1 == null) {
			Chance1 = 50;
		}
		if(this.float(0,100) < Chance1) {
			return 1;
		} else {
			return -1;
		}
	}
	,weightedPick: function(WeightsArray) {
		var totalWeight = 0;
		var pick = 0;
		var _g = 0;
		while(_g < WeightsArray.length) {
			var i = WeightsArray[_g];
			++_g;
			totalWeight += i;
		}
		totalWeight = this.float(0,totalWeight);
		var _g = 0;
		var _g1 = WeightsArray.length;
		while(_g < _g1) {
			var i = _g++;
			if(totalWeight < WeightsArray[i]) {
				pick = i;
				break;
			}
			totalWeight -= WeightsArray[i];
		}
		return pick;
	}
	,color: function(Min,Max,Alpha,GreyScale) {
		if(GreyScale == null) {
			GreyScale = false;
		}
		var red;
		var green;
		var blue;
		var alpha;
		if(Min == null && Max == null) {
			red = this.int(0,255);
			green = this.int(0,255);
			blue = this.int(0,255);
			alpha = Alpha == null ? this.int(0,255) : Alpha;
		} else if(Max == null) {
			red = this.int(Min >> 16 & 255,255);
			green = GreyScale ? red : this.int(Min >> 8 & 255,255);
			blue = GreyScale ? red : this.int(Min & 255,255);
			alpha = Alpha == null ? this.int(Min >> 24 & 255,255) : Alpha;
		} else if(Min == null) {
			red = this.int(0,Max >> 16 & 255);
			green = GreyScale ? red : this.int(0,Max >> 8 & 255);
			blue = GreyScale ? red : this.int(0,Max & 255);
			alpha = Alpha == null ? this.int(0,Max >> 24 & 255) : Alpha;
		} else {
			red = this.int(Min >> 16 & 255,Max >> 16 & 255);
			green = GreyScale ? red : this.int(Min >> 8 & 255,Max >> 8 & 255);
			blue = GreyScale ? red : this.int(Min & 255,Max & 255);
			alpha = Alpha == null ? this.int(Min >> 24 & 255,Max >> 24 & 255) : Alpha;
		}
		var Alpha = alpha;
		if(Alpha == null) {
			Alpha = 255;
		}
		var color = flixel_util_FlxColor._new();
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 255;
		}
		color &= -16711681;
		color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
		color &= -65281;
		color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
		color &= -256;
		color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
		color &= 16777215;
		color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
		return color;
	}
	,generate: function() {
		return this.internalSeed = this.internalSeed * 48271.0 % 2147483647;
	}
	,internalSeed: null
	,set_initialSeed: function(NewSeed) {
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		return this.initialSeed = (this.internalSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0) | 0;
	}
	,get_currentSeed: function() {
		return this.internalSeed | 0;
	}
	,set_currentSeed: function(NewSeed) {
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		return (this.internalSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0) | 0;
	}
	,__class__: flixel_math_FlxRandom
	,__properties__: {set_currentSeed:"set_currentSeed",get_currentSeed:"get_currentSeed",set_initialSeed:"set_initialSeed"}
};
var flixel_util_FlxSave = function() {
	this._closeRequested = false;
};
$hxClasses["flixel.util.FlxSave"] = flixel_util_FlxSave;
flixel_util_FlxSave.__name__ = "flixel.util.FlxSave";
flixel_util_FlxSave.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_util_FlxSave.prototype = {
	data: null
	,name: null
	,path: null
	,_sharedObject: null
	,_onComplete: null
	,_closeRequested: null
	,destroy: function() {
		this._sharedObject = null;
		this.name = null;
		this.path = null;
		this.data = null;
		this._onComplete = null;
		this._closeRequested = false;
	}
	,bind: function(Name,Path) {
		this.destroy();
		this.name = Name;
		this.path = Path;
		try {
			this._sharedObject = openfl_net_SharedObject.getLocal(this.name,this.path);
		} catch( _g ) {
			if(((haxe_Exception.caught(_g)) instanceof openfl_errors_Error)) {
				this.destroy();
				return false;
			} else {
				throw _g;
			}
		}
		this.data = this._sharedObject.data;
		return true;
	}
	,close: function(MinFileSize,OnComplete) {
		if(MinFileSize == null) {
			MinFileSize = 0;
		}
		this._closeRequested = true;
		return this.flush(MinFileSize,OnComplete);
	}
	,flush: function(MinFileSize,OnComplete) {
		if(MinFileSize == null) {
			MinFileSize = 0;
		}
		if(!this.checkBinding()) {
			return false;
		}
		this._onComplete = OnComplete;
		var result = null;
		try {
			result = this._sharedObject.flush();
		} catch( _g ) {
			if(((haxe_Exception.caught(_g)) instanceof openfl_errors_Error)) {
				return this.onDone(flixel_util_FlxSaveStatus.ERROR);
			} else {
				throw _g;
			}
		}
		return this.onDone(result == 0 ? flixel_util_FlxSaveStatus.SUCCESS : flixel_util_FlxSaveStatus.PENDING);
	}
	,erase: function() {
		if(!this.checkBinding()) {
			return false;
		}
		this._sharedObject.clear();
		this.data = { };
		return true;
	}
	,onDone: function(Result) {
		switch(Result._hx_index) {
		case 1:
			break;
		case 2:
			break;
		default:
		}
		if(this._onComplete != null) {
			this._onComplete(Result == flixel_util_FlxSaveStatus.SUCCESS);
		}
		if(this._closeRequested) {
			this.destroy();
		}
		return Result == flixel_util_FlxSaveStatus.SUCCESS;
	}
	,checkBinding: function() {
		if(this._sharedObject == null) {
			return false;
		}
		return true;
	}
	,__class__: flixel_util_FlxSave
};
var flixel_system_scaleModes_BaseScaleMode = function() {
	this.verticalAlign = flixel_util_FlxVerticalAlign.CENTER;
	this.horizontalAlign = flixel_util_FlxHorizontalAlign.CENTER;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.deviceSize = point;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.gameSize = point;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.scale = point;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.offset = point;
};
$hxClasses["flixel.system.scaleModes.BaseScaleMode"] = flixel_system_scaleModes_BaseScaleMode;
flixel_system_scaleModes_BaseScaleMode.__name__ = "flixel.system.scaleModes.BaseScaleMode";
flixel_system_scaleModes_BaseScaleMode.prototype = {
	deviceSize: null
	,gameSize: null
	,scale: null
	,offset: null
	,horizontalAlign: null
	,verticalAlign: null
	,onMeasure: function(Width,Height) {
		flixel_FlxG.width = flixel_FlxG.initialWidth;
		flixel_FlxG.height = flixel_FlxG.initialHeight;
		this.updateGameSize(Width,Height);
		this.updateDeviceSize(Width,Height);
		this.updateScaleOffset();
		this.updateGamePosition();
	}
	,updateGameSize: function(Width,Height) {
		this.gameSize.set(Width,Height);
	}
	,updateDeviceSize: function(Width,Height) {
		this.deviceSize.set(Width,Height);
	}
	,updateScaleOffset: function() {
		this.scale.set_x(this.gameSize.x / (flixel_FlxG.width * flixel_FlxG.initialZoom));
		this.scale.set_y(this.gameSize.y / (flixel_FlxG.height * flixel_FlxG.initialZoom));
		this.updateOffsetX();
		this.updateOffsetY();
	}
	,updateOffsetX: function() {
		var tmp;
		switch(this.horizontalAlign._hx_index) {
		case 0:
			tmp = 0;
			break;
		case 1:
			tmp = Math.ceil((this.deviceSize.x - this.gameSize.x) * 0.5);
			break;
		case 2:
			tmp = this.deviceSize.x - this.gameSize.x;
			break;
		}
		this.offset.set_x(tmp);
	}
	,updateOffsetY: function() {
		var tmp;
		switch(this.verticalAlign._hx_index) {
		case 0:
			tmp = 0;
			break;
		case 1:
			tmp = Math.ceil((this.deviceSize.y - this.gameSize.y) * 0.5);
			break;
		case 2:
			tmp = this.deviceSize.y - this.gameSize.y;
			break;
		}
		this.offset.set_y(tmp);
	}
	,updateGamePosition: function() {
		if(flixel_FlxG.game == null) {
			return;
		}
		flixel_FlxG.game.set_x(this.offset.x);
		flixel_FlxG.game.set_y(this.offset.y);
	}
	,set_horizontalAlign: function(value) {
		this.horizontalAlign = value;
		if(this.offset != null) {
			this.updateOffsetX();
			this.updateGamePosition();
		}
		return value;
	}
	,set_verticalAlign: function(value) {
		this.verticalAlign = value;
		if(this.offset != null) {
			this.updateOffsetY();
			this.updateGamePosition();
		}
		return value;
	}
	,__class__: flixel_system_scaleModes_BaseScaleMode
	,__properties__: {set_verticalAlign:"set_verticalAlign",set_horizontalAlign:"set_horizontalAlign"}
};
var flixel_system_scaleModes_RatioScaleMode = function(fillScreen) {
	if(fillScreen == null) {
		fillScreen = false;
	}
	flixel_system_scaleModes_BaseScaleMode.call(this);
	this.fillScreen = fillScreen;
};
$hxClasses["flixel.system.scaleModes.RatioScaleMode"] = flixel_system_scaleModes_RatioScaleMode;
flixel_system_scaleModes_RatioScaleMode.__name__ = "flixel.system.scaleModes.RatioScaleMode";
flixel_system_scaleModes_RatioScaleMode.__super__ = flixel_system_scaleModes_BaseScaleMode;
flixel_system_scaleModes_RatioScaleMode.prototype = $extend(flixel_system_scaleModes_BaseScaleMode.prototype,{
	fillScreen: null
	,updateGameSize: function(Width,Height) {
		var ratio = flixel_FlxG.width / flixel_FlxG.height;
		var realRatio = Width / Height;
		var scaleY = realRatio < ratio;
		if(this.fillScreen) {
			scaleY = !scaleY;
		}
		if(scaleY) {
			this.gameSize.set_x(Width);
			this.gameSize.set_y(Math.floor(this.gameSize.x / ratio));
		} else {
			this.gameSize.set_y(Height);
			this.gameSize.set_x(Math.floor(this.gameSize.y * ratio));
		}
	}
	,__class__: flixel_system_scaleModes_RatioScaleMode
});
var flixel_system_frontEnds_SignalFrontEnd = function() {
	this.focusLost = new flixel_util__$FlxSignal_FlxSignal0();
	this.focusGained = new flixel_util__$FlxSignal_FlxSignal0();
	this.postDraw = new flixel_util__$FlxSignal_FlxSignal0();
	this.preDraw = new flixel_util__$FlxSignal_FlxSignal0();
	this.postUpdate = new flixel_util__$FlxSignal_FlxSignal0();
	this.preUpdate = new flixel_util__$FlxSignal_FlxSignal0();
	this.postGameStart = new flixel_util__$FlxSignal_FlxSignal0();
	this.preGameStart = new flixel_util__$FlxSignal_FlxSignal0();
	this.postGameReset = new flixel_util__$FlxSignal_FlxSignal0();
	this.preGameReset = new flixel_util__$FlxSignal_FlxSignal0();
	this.gameResized = new flixel_util__$FlxSignal_FlxSignal2();
	this.preStateCreate = new flixel_util__$FlxSignal_FlxSignal1();
	this.postStateSwitch = new flixel_util__$FlxSignal_FlxSignal0();
	this.preStateSwitch = new flixel_util__$FlxSignal_FlxSignal0();
};
$hxClasses["flixel.system.frontEnds.SignalFrontEnd"] = flixel_system_frontEnds_SignalFrontEnd;
flixel_system_frontEnds_SignalFrontEnd.__name__ = "flixel.system.frontEnds.SignalFrontEnd";
flixel_system_frontEnds_SignalFrontEnd.prototype = {
	preStateSwitch: null
	,postStateSwitch: null
	,preStateCreate: null
	,gameResized: null
	,preGameReset: null
	,postGameReset: null
	,preGameStart: null
	,postGameStart: null
	,preUpdate: null
	,postUpdate: null
	,preDraw: null
	,postDraw: null
	,focusGained: null
	,focusLost: null
	,get_stateSwitched: function() {
		return this.preStateSwitch;
	}
	,get_gameStarted: function() {
		return this.postGameStart;
	}
	,__class__: flixel_system_frontEnds_SignalFrontEnd
	,__properties__: {get_gameStarted:"get_gameStarted",get_stateSwitched:"get_stateSwitched"}
};
var flixel_system_frontEnds_WatchFrontEnd = function() {
};
$hxClasses["flixel.system.frontEnds.WatchFrontEnd"] = flixel_system_frontEnds_WatchFrontEnd;
flixel_system_frontEnds_WatchFrontEnd.__name__ = "flixel.system.frontEnds.WatchFrontEnd";
flixel_system_frontEnds_WatchFrontEnd.prototype = {
	add: function(object,field,displayName) {
	}
	,remove: function(object,field) {
	}
	,addQuick: function(displayName,value) {
	}
	,removeQuick: function(displayName) {
	}
	,addExpression: function(expression,displayName) {
	}
	,removeExpression: function(displayName) {
	}
	,addMouse: function() {
	}
	,removeMouse: function() {
	}
	,__class__: flixel_system_frontEnds_WatchFrontEnd
};
var flixel_FlxG = function() { };
$hxClasses["flixel.FlxG"] = flixel_FlxG;
flixel_FlxG.__name__ = "flixel.FlxG";
flixel_FlxG.__properties__ = {set_mouse:"set_mouse",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_scaleMode:"set_scaleMode",get_onMobile:"get_onMobile",set_drawFramerate:"set_drawFramerate",set_updateFramerate:"set_updateFramerate",get_state:"get_state",get_stage:"get_stage"};
flixel_FlxG.camera = null;
flixel_FlxG.game = null;
flixel_FlxG.updateFramerate = null;
flixel_FlxG.drawFramerate = null;
flixel_FlxG.renderMethod = null;
flixel_FlxG.renderBlit = null;
flixel_FlxG.renderTile = null;
flixel_FlxG.width = null;
flixel_FlxG.height = null;
flixel_FlxG.mouse = null;
flixel_FlxG.touches = null;
flixel_FlxG.keys = null;
flixel_FlxG.gamepads = null;
flixel_FlxG.accelerometer = null;
flixel_FlxG.vcr = null;
flixel_FlxG.plugins = null;
flixel_FlxG.sound = null;
flixel_FlxG.resizeGame = function(Width,Height) {
	flixel_FlxG.scaleMode.onMeasure(Width,Height);
};
flixel_FlxG.resizeWindow = function(Width,Height) {
};
flixel_FlxG.resetGame = function() {
	flixel_FlxG.game._resetGame = true;
};
flixel_FlxG.switchState = function(nextState) {
	if(flixel_FlxG.game._state.switchTo(nextState)) {
		flixel_FlxG.game._requestedState = nextState;
	}
};
flixel_FlxG.resetState = function() {
	var nextState = Type.createInstance(js_Boot.getClass(flixel_FlxG.game._state),[]);
	if(flixel_FlxG.game._state.switchTo(nextState)) {
		flixel_FlxG.game._requestedState = nextState;
	}
};
flixel_FlxG.overlap = function(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,ProcessCallback) {
	if(ObjectOrGroup1 == null) {
		ObjectOrGroup1 = flixel_FlxG.game._state;
	}
	if(ObjectOrGroup2 == ObjectOrGroup1) {
		ObjectOrGroup2 = null;
	}
	flixel_system_FlxQuadTree.divisions = flixel_FlxG.worldDivisions;
	var quadTree = flixel_system_FlxQuadTree.recycle(flixel_FlxG.worldBounds.x,flixel_FlxG.worldBounds.y,flixel_FlxG.worldBounds.width,flixel_FlxG.worldBounds.height);
	quadTree.load(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,ProcessCallback);
	var result = quadTree.execute();
	quadTree.destroy();
	return result;
};
flixel_FlxG.pixelPerfectOverlap = function(Sprite1,Sprite2,AlphaTolerance,Camera) {
	if(AlphaTolerance == null) {
		AlphaTolerance = 255;
	}
	return flixel_util_FlxCollision.pixelPerfectCheck(Sprite1,Sprite2,AlphaTolerance,Camera);
};
flixel_FlxG.collide = function(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback) {
	return flixel_FlxG.overlap(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,flixel_FlxObject.separate);
};
flixel_FlxG.addChildBelowMouse = function(Child,IndexModifier) {
	if(IndexModifier == null) {
		IndexModifier = 0;
	}
	var index = flixel_FlxG.game.getChildIndex(flixel_FlxG.game._inputContainer);
	var max = flixel_FlxG.game.get_numChildren();
	index = flixel_math_FlxMath.maxAdd(index,IndexModifier,max);
	flixel_FlxG.game.addChildAt(Child,index);
	return Child;
};
flixel_FlxG.removeChild = function(Child) {
	if(flixel_FlxG.game.contains(Child)) {
		flixel_FlxG.game.removeChild(Child);
	}
	return Child;
};
flixel_FlxG.addPostProcess = function(postProcess) {
	return postProcess;
};
flixel_FlxG.removePostProcess = function(postProcess) {
};
flixel_FlxG.openURL = function(URL1,Target) {
	if(Target == null) {
		Target = "_blank";
	}
	var prefix = "";
	if(!new EReg("^https?://","").match(URL1)) {
		prefix = "http://";
	}
	openfl_Lib.getURL(new openfl_net_URLRequest(prefix + URL1),Target);
};
flixel_FlxG.init = function(Game,Width,Height,Zoom) {
	flixel_FlxG.game = Game;
	flixel_FlxG.width = Math.abs(Width) | 0;
	flixel_FlxG.height = Math.abs(Height) | 0;
	flixel_FlxG.initRenderMethod();
	flixel_FlxG.initialWidth = flixel_FlxG.width;
	flixel_FlxG.initialHeight = flixel_FlxG.height;
	flixel_FlxG.initialZoom = flixel_FlxCamera.defaultZoom = Zoom;
	var Width = openfl_Lib.get_current().stage.stageWidth;
	var Height = openfl_Lib.get_current().stage.stageHeight;
	flixel_FlxG.scaleMode.onMeasure(Width,Height);
	flixel_FlxG.keys = flixel_FlxG.inputs.add_flixel_input_keyboard_FlxKeyboard(new flixel_input_keyboard_FlxKeyboard());
	flixel_FlxG.set_mouse(flixel_FlxG.inputs.add_flixel_input_mouse_FlxMouse(new flixel_input_mouse_FlxMouse(flixel_FlxG.game._inputContainer)));
	flixel_FlxG.touches = flixel_FlxG.inputs.add_flixel_input_touch_FlxTouchManager(new flixel_input_touch_FlxTouchManager());
	flixel_FlxG.gamepads = flixel_FlxG.inputs.add_flixel_input_gamepad_FlxGamepadManager(new flixel_input_gamepad_FlxGamepadManager());
	flixel_FlxG.accelerometer = new flixel_input_FlxAccelerometer();
	flixel_FlxG.save.bind("flixel");
	flixel_FlxG.plugins = new flixel_system_frontEnds_PluginFrontEnd();
	flixel_FlxG.vcr = new flixel_system_frontEnds_VCRFrontEnd();
	flixel_FlxG.sound = new flixel_system_frontEnds_SoundFrontEnd();
};
flixel_FlxG.initRenderMethod = function() {
	flixel_FlxG.renderMethod = flixel_FlxRenderMethod.BLITTING;
	var tmp;
	switch(openfl_Lib.get_current().stage.window.context.type) {
	case "opengl":case "opengles":case "webgl":
		tmp = flixel_FlxRenderMethod.DRAW_TILES;
		break;
	default:
		tmp = flixel_FlxRenderMethod.BLITTING;
	}
	flixel_FlxG.renderMethod = tmp;
	flixel_FlxG.renderBlit = flixel_FlxG.renderMethod == flixel_FlxRenderMethod.BLITTING;
	flixel_FlxG.renderTile = flixel_FlxG.renderMethod == flixel_FlxRenderMethod.DRAW_TILES;
	flixel_FlxObject.defaultPixelPerfectPosition = flixel_FlxG.renderBlit;
};
flixel_FlxG.reset = function() {
	var _this = flixel_FlxG.random;
	var Value = Math.random() * 2147483647 | 0;
	var lowerBound = Value < 1 ? 1 : Value;
	var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
	var lowerBound = NewSeed < 1 ? 1 : NewSeed;
	var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
	var lowerBound = NewSeed < 1 ? 1 : NewSeed;
	_this.initialSeed = (_this.internalSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0) | 0;
	flixel_FlxG.bitmap.reset();
	flixel_FlxG.inputs.reset();
	flixel_FlxG.sound.destroy(true);
	flixel_FlxG.autoPause = true;
	flixel_FlxG.fixedTimestep = true;
	flixel_FlxG.timeScale = 1.0;
	flixel_FlxG.elapsed = 0;
	flixel_FlxG.maxElapsed = 0.1;
	var _this = flixel_FlxG.worldBounds;
	var X = -10;
	var Y = -10;
	var Width = flixel_FlxG.width + 20;
	var Height = flixel_FlxG.height + 20;
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	_this.x = X;
	_this.y = Y;
	_this.width = Width;
	_this.height = Height;
	flixel_FlxG.worldDivisions = 6;
};
flixel_FlxG.set_scaleMode = function(ScaleMode) {
	flixel_FlxG.scaleMode = ScaleMode;
	flixel_FlxG.game.onResize(null);
	return ScaleMode;
};
flixel_FlxG.set_mouse = function(NewMouse) {
	if(flixel_FlxG.mouse == null) {
		flixel_FlxG.mouse = flixel_FlxG.inputs.add_flixel_input_mouse_FlxMouse(NewMouse);
		return flixel_FlxG.mouse;
	}
	var oldMouse = flixel_FlxG.mouse;
	var result = flixel_FlxG.inputs.replace_flixel_input_mouse_FlxMouse(oldMouse,NewMouse);
	if(result != null) {
		flixel_FlxG.mouse = result;
		oldMouse.destroy();
		return NewMouse;
	}
	return oldMouse;
};
flixel_FlxG.set_updateFramerate = function(Framerate) {
	var tmp = Framerate < flixel_FlxG.drawFramerate;
	flixel_FlxG.updateFramerate = Framerate;
	flixel_FlxG.game._stepMS = Math.abs(1000 / Framerate);
	flixel_FlxG.game._stepSeconds = flixel_FlxG.game._stepMS / 1000;
	if(flixel_FlxG.game._maxAccumulation < flixel_FlxG.game._stepMS) {
		flixel_FlxG.game._maxAccumulation = flixel_FlxG.game._stepMS;
	}
	return Framerate;
};
flixel_FlxG.set_drawFramerate = function(Framerate) {
	var tmp = Framerate > flixel_FlxG.updateFramerate;
	flixel_FlxG.drawFramerate = Math.abs(Framerate) | 0;
	if(flixel_FlxG.game.stage != null) {
		flixel_FlxG.game.stage.set_frameRate(flixel_FlxG.drawFramerate);
	}
	flixel_FlxG.game._maxAccumulation = 2000 / flixel_FlxG.drawFramerate - 1;
	if(flixel_FlxG.game._maxAccumulation < flixel_FlxG.game._stepMS) {
		flixel_FlxG.game._maxAccumulation = flixel_FlxG.game._stepMS;
	}
	return Framerate;
};
flixel_FlxG.get_fullscreen = function() {
	if(openfl_Lib.get_current().stage.get_displayState() != 0) {
		return openfl_Lib.get_current().stage.get_displayState() == 1;
	} else {
		return true;
	}
};
flixel_FlxG.set_fullscreen = function(Value) {
	openfl_Lib.get_current().stage.set_displayState(Value ? 0 : 2);
	return Value;
};
flixel_FlxG.get_stage = function() {
	return openfl_Lib.get_current().stage;
};
flixel_FlxG.get_state = function() {
	return flixel_FlxG.game._state;
};
flixel_FlxG.get_onMobile = function() {
	return flixel_FlxG.html5.onMobile;
};
var flixel_FlxRenderMethod = $hxEnums["flixel.FlxRenderMethod"] = { __ename__ : "flixel.FlxRenderMethod", __constructs__ : ["DRAW_TILES","BLITTING"]
	,DRAW_TILES: {_hx_index:0,__enum__:"flixel.FlxRenderMethod",toString:$estr}
	,BLITTING: {_hx_index:1,__enum__:"flixel.FlxRenderMethod",toString:$estr}
};
flixel_FlxRenderMethod.__empty_constructs__ = [flixel_FlxRenderMethod.DRAW_TILES,flixel_FlxRenderMethod.BLITTING];
var flixel_FlxGame = function(GameWidth,GameHeight,InitialState,Zoom,UpdateFramerate,DrawFramerate,SkipSplash,StartFullscreen) {
	if(StartFullscreen == null) {
		StartFullscreen = false;
	}
	if(SkipSplash == null) {
		SkipSplash = false;
	}
	if(DrawFramerate == null) {
		DrawFramerate = 60;
	}
	if(UpdateFramerate == null) {
		UpdateFramerate = 60;
	}
	if(Zoom == null) {
		Zoom = 1;
	}
	if(GameHeight == null) {
		GameHeight = 0;
	}
	if(GameWidth == null) {
		GameWidth = 0;
	}
	this._resetGame = false;
	this._skipSplash = false;
	this._customSoundTray = flixel_system_ui_FlxSoundTray;
	this._lostFocus = false;
	this._startTime = 0;
	this._total = 0;
	this._gameJustStarted = false;
	this.filtersEnabled = true;
	this.ticks = 0;
	this.focusLostFramerate = 10;
	openfl_display_Sprite.call(this);
	this._inputContainer = new openfl_display_Sprite();
	if(GameWidth == 0) {
		GameWidth = openfl_Lib.get_current().stage.stageWidth;
	}
	if(GameHeight == 0) {
		GameHeight = openfl_Lib.get_current().stage.stageHeight;
	}
	flixel_FlxG.init(this,GameWidth,GameHeight,Zoom);
	flixel_FlxG.set_updateFramerate(UpdateFramerate);
	flixel_FlxG.set_drawFramerate(DrawFramerate);
	this._accumulator = this._stepMS;
	this._skipSplash = SkipSplash;
	this._initialState = InitialState == null ? flixel_FlxState : InitialState;
	this.addEventListener("addedToStage",$bind(this,this.create));
};
$hxClasses["flixel.FlxGame"] = flixel_FlxGame;
flixel_FlxGame.__name__ = "flixel.FlxGame";
flixel_FlxGame.__super__ = openfl_display_Sprite;
flixel_FlxGame.prototype = $extend(openfl_display_Sprite.prototype,{
	focusLostFramerate: null
	,soundTray: null
	,ticks: null
	,filtersEnabled: null
	,_gameJustStarted: null
	,_initialState: null
	,_state: null
	,_total: null
	,_startTime: null
	,_accumulator: null
	,_elapsedMS: null
	,_stepMS: null
	,_stepSeconds: null
	,_maxAccumulation: null
	,_lostFocus: null
	,_filters: null
	,_inputContainer: null
	,_customSoundTray: null
	,_skipSplash: null
	,_requestedState: null
	,_resetGame: null
	,setFilters: function(filters) {
		this._filters = filters;
	}
	,create: function(_) {
		if(this.stage == null) {
			return;
		}
		this.removeEventListener("addedToStage",$bind(this,this.create));
		this._startTime = this.getTimer();
		this._total = this.getTimer() - this._startTime;
		this.stage.set_scaleMode(2);
		this.stage.align = 6;
		this.stage.set_frameRate(flixel_FlxG.drawFramerate);
		this.addChild(this._inputContainer);
		this.soundTray = Type.createInstance(this._customSoundTray,[]);
		this.addChild(this.soundTray);
		this.stage.addEventListener("deactivate",$bind(this,this.onFocusLost));
		this.stage.addEventListener("activate",$bind(this,this.onFocus));
		flixel_FlxG.signals.preGameReset.dispatch();
		if(this._skipSplash || flixel_system_FlxSplash.nextState != null) {
			this._requestedState = Type.createInstance(this._initialState,[]);
			if(flixel_system_FlxSplash.nextState == null) {
				this._gameJustStarted = true;
			}
		} else {
			flixel_system_FlxSplash.nextState = this._initialState;
			this._requestedState = new flixel_system_FlxSplash();
			this._skipSplash = true;
		}
		flixel_FlxG.reset();
		flixel_FlxG.signals.postGameReset.dispatch();
		this.switchState();
		var tmp = flixel_FlxG.updateFramerate < flixel_FlxG.drawFramerate;
		this.stage.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
		this.stage.addEventListener("resize",$bind(this,this.onResize));
		this.resizeGame(openfl_Lib.get_current().stage.stageWidth,openfl_Lib.get_current().stage.stageHeight);
		openfl_utils_Assets.addEventListener("change",($_=flixel_FlxG.bitmap,$bind($_,$_.onAssetsReload)));
	}
	,onFocus: function(_) {
		this._lostFocus = false;
		flixel_FlxG.signals.focusGained.dispatch();
		this._state.onFocus();
		if(!flixel_FlxG.autoPause) {
			return;
		}
		this.stage.set_frameRate(flixel_FlxG.drawFramerate);
		flixel_FlxG.sound.onFocus();
		var _g = 0;
		var _g1 = flixel_FlxG.inputs.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.onFocus();
		}
	}
	,onFocusLost: function(event) {
		this._lostFocus = true;
		flixel_FlxG.signals.focusLost.dispatch();
		this._state.onFocusLost();
		if(!flixel_FlxG.autoPause) {
			return;
		}
		this.stage.set_frameRate(this.focusLostFramerate);
		flixel_FlxG.sound.onFocusLost();
		var _g = 0;
		var _g1 = flixel_FlxG.inputs.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.onFocusLost();
		}
	}
	,onResize: function(_) {
		var width = openfl_Lib.get_current().stage.stageWidth;
		var height = openfl_Lib.get_current().stage.stageHeight;
		if(flixel_FlxG.renderTile) {
			flixel_FlxG.bitmap.onContext();
		}
		this.resizeGame(width,height);
	}
	,resizeGame: function(width,height) {
		flixel_FlxG.scaleMode.onMeasure(width,height);
		this._state.onResize(width,height);
		flixel_FlxG.cameras.resize();
		flixel_FlxG.signals.gameResized.dispatch(width,height);
		if(this.soundTray != null) {
			this.soundTray.screenCenter();
		}
	}
	,onEnterFrame: function(_) {
		this.ticks = this.getTimer() - this._startTime;
		this._elapsedMS = this.ticks - this._total;
		this._total = this.ticks;
		if(this.soundTray != null && this.soundTray.active) {
			this.soundTray.update(this._elapsedMS);
		}
		if(!this._lostFocus || !flixel_FlxG.autoPause) {
			if(flixel_FlxG.vcr.paused) {
				if(flixel_FlxG.vcr.stepRequested) {
					flixel_FlxG.vcr.stepRequested = false;
				} else if(this._state == this._requestedState) {
					return;
				}
			}
			if(flixel_FlxG.fixedTimestep) {
				this._accumulator += this._elapsedMS;
				this._accumulator = this._accumulator > this._maxAccumulation ? this._maxAccumulation : this._accumulator;
				while(this._accumulator >= this._stepMS) {
					this.step();
					this._accumulator -= this._stepMS;
				}
			} else {
				this.step();
			}
			this.draw();
		}
	}
	,resetGame: function() {
		flixel_FlxG.signals.preGameReset.dispatch();
		if(this._skipSplash || flixel_system_FlxSplash.nextState != null) {
			this._requestedState = Type.createInstance(this._initialState,[]);
			if(flixel_system_FlxSplash.nextState == null) {
				this._gameJustStarted = true;
			}
		} else {
			flixel_system_FlxSplash.nextState = this._initialState;
			this._requestedState = new flixel_system_FlxSplash();
			this._skipSplash = true;
		}
		flixel_FlxG.reset();
		flixel_FlxG.signals.postGameReset.dispatch();
	}
	,switchState: function() {
		flixel_FlxG.cameras.reset();
		flixel_FlxG.inputs.onStateSwitch();
		flixel_FlxG.sound.destroy();
		flixel_FlxG.signals.preStateSwitch.dispatch();
		if(this._state != null) {
			this._state.destroy();
		}
		flixel_FlxG.bitmap.clearCache();
		this._state = this._requestedState;
		if(this._gameJustStarted) {
			flixel_FlxG.signals.preGameStart.dispatch();
		}
		flixel_FlxG.signals.preStateCreate.dispatch(this._state);
		this._state.create();
		if(this._gameJustStarted) {
			this.gameStart();
		}
		flixel_FlxG.signals.postStateSwitch.dispatch();
	}
	,gameStart: function() {
		flixel_FlxG.signals.postGameStart.dispatch();
		this._gameJustStarted = false;
	}
	,step: function() {
		if(this._resetGame) {
			flixel_FlxG.signals.preGameReset.dispatch();
			if(this._skipSplash || flixel_system_FlxSplash.nextState != null) {
				this._requestedState = Type.createInstance(this._initialState,[]);
				if(flixel_system_FlxSplash.nextState == null) {
					this._gameJustStarted = true;
				}
			} else {
				flixel_system_FlxSplash.nextState = this._initialState;
				this._requestedState = new flixel_system_FlxSplash();
				this._skipSplash = true;
			}
			flixel_FlxG.reset();
			flixel_FlxG.signals.postGameReset.dispatch();
			this._resetGame = false;
		}
		this.handleReplayRequests();
		this.update();
	}
	,handleReplayRequests: function() {
	}
	,update: function() {
		if(!this._state.active || !this._state.exists) {
			return;
		}
		if(this._state != this._requestedState) {
			this.switchState();
		}
		this.updateElapsed();
		flixel_FlxG.signals.preUpdate.dispatch();
		this.updateInput();
		flixel_FlxG.sound.update(flixel_FlxG.elapsed);
		var elapsed = flixel_FlxG.elapsed;
		var _g = 0;
		var _g1 = flixel_FlxG.plugins.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(plugin.exists && plugin.active) {
				plugin.update(elapsed);
			}
		}
		this._state.tryUpdate(flixel_FlxG.elapsed);
		var elapsed = flixel_FlxG.elapsed;
		var _g = 0;
		var _g1 = flixel_FlxG.cameras.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera != null && camera.exists && camera.active) {
				camera.update(elapsed);
			}
		}
		flixel_FlxG.signals.postUpdate.dispatch();
		flixel_util_FlxArrayUtil.clearArray(flixel_FlxG.swipes);
		this.set_filters(this.filtersEnabled ? this._filters : null);
	}
	,updateElapsed: function() {
		if(flixel_FlxG.fixedTimestep) {
			flixel_FlxG.elapsed = flixel_FlxG.timeScale * this._stepSeconds;
		} else {
			flixel_FlxG.elapsed = flixel_FlxG.timeScale * (this._elapsedMS / 1000);
			var max = flixel_FlxG.maxElapsed * flixel_FlxG.timeScale;
			if(flixel_FlxG.elapsed > max) {
				flixel_FlxG.elapsed = max;
			}
		}
	}
	,updateInput: function() {
		var _g = 0;
		var _g1 = flixel_FlxG.inputs.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.update();
		}
	}
	,draw: function() {
		if(!this._state.visible || !this._state.exists) {
			return;
		}
		flixel_FlxG.signals.preDraw.dispatch();
		if(flixel_FlxG.renderTile) {
			flixel_graphics_tile_FlxDrawBaseItem.drawCalls = 0;
		}
		var _this = flixel_FlxG.cameras;
		var _g = 0;
		var _g1 = _this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera == null || !camera.exists || !camera.visible) {
				continue;
			}
			if(flixel_FlxG.renderBlit) {
				camera.checkResize();
				if(_this.useBufferLocking) {
					camera.buffer.lock();
				}
			}
			if(flixel_FlxG.renderTile) {
				camera.clearDrawStack();
				camera.canvas.get_graphics().clear();
			}
			if(flixel_FlxG.renderBlit) {
				camera.fill(camera.bgColor,camera.useBgAlphaBlending);
				camera.screen.dirty = true;
			} else {
				camera.fill(camera.bgColor & 16777215,camera.useBgAlphaBlending,(camera.bgColor >> 24 & 255) / 255);
			}
		}
		var _g = 0;
		var _g1 = flixel_FlxG.plugins.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(plugin.exists && plugin.visible) {
				plugin.draw();
			}
		}
		this._state.draw();
		if(flixel_FlxG.renderTile) {
			if(flixel_FlxG.renderTile) {
				var _g = 0;
				var _g1 = flixel_FlxG.cameras.list;
				while(_g < _g1.length) {
					var camera = _g1[_g];
					++_g;
					if(camera != null && camera.exists && camera.visible) {
						camera.render();
					}
				}
			}
		}
		var _this = flixel_FlxG.cameras;
		var _g = 0;
		var _g1 = _this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera == null || !camera.exists || !camera.visible) {
				continue;
			}
			camera.drawFX();
			if(flixel_FlxG.renderBlit) {
				if(_this.useBufferLocking) {
					camera.buffer.unlock();
				}
				camera.screen.dirty = true;
			}
		}
		flixel_FlxG.signals.postDraw.dispatch();
	}
	,getTicks: function() {
		return this.getTimer() - this._startTime;
	}
	,getTimer: function() {
		return openfl_Lib.getTimer();
	}
	,__class__: flixel_FlxGame
});
var flixel_IFlxSprite = function() { };
$hxClasses["flixel.IFlxSprite"] = flixel_IFlxSprite;
flixel_IFlxSprite.__name__ = "flixel.IFlxSprite";
flixel_IFlxSprite.__isInterface__ = true;
flixel_IFlxSprite.__interfaces__ = [flixel_IFlxBasic];
flixel_IFlxSprite.prototype = {
	set_x: null
	,set_y: null
	,set_alpha: null
	,set_angle: null
	,set_facing: null
	,set_moves: null
	,set_immovable: null
	,x: null
	,y: null
	,alpha: null
	,angle: null
	,facing: null
	,moves: null
	,immovable: null
	,offset: null
	,origin: null
	,scale: null
	,velocity: null
	,maxVelocity: null
	,acceleration: null
	,drag: null
	,scrollFactor: null
	,reset: null
	,setPosition: null
	,__class__: flixel_IFlxSprite
	,__properties__: {set_immovable:"set_immovable",set_moves:"set_moves",set_facing:"set_facing",set_angle:"set_angle",set_alpha:"set_alpha",set_y:"set_y",set_x:"set_x"}
};
var flixel_addons_display_FlxGridOverlay = function() { };
$hxClasses["flixel.addons.display.FlxGridOverlay"] = flixel_addons_display_FlxGridOverlay;
flixel_addons_display_FlxGridOverlay.__name__ = "flixel.addons.display.FlxGridOverlay";
flixel_addons_display_FlxGridOverlay.create = function(CellWidth,CellHeight,Width,Height,Alternate,Color1,Color2) {
	if(Color2 == null) {
		Color2 = -2501163;
	}
	if(Color1 == null) {
		Color1 = -1579290;
	}
	if(Alternate == null) {
		Alternate = true;
	}
	if(Height == null) {
		Height = -1;
	}
	if(Width == null) {
		Width = -1;
	}
	if(Width == -1) {
		Width = flixel_FlxG.width;
	}
	if(Height == -1) {
		Height = flixel_FlxG.height;
	}
	if(Width < CellWidth || Height < CellHeight) {
		return null;
	}
	var grid = flixel_addons_display_FlxGridOverlay.createGrid(CellWidth,CellHeight,Width,Height,Alternate,Color1,Color2);
	var output = new flixel_FlxSprite();
	output.set_pixels(grid);
	output.dirty = true;
	return output;
};
flixel_addons_display_FlxGridOverlay.overlay = function(Sprite,CellWidth,CellHeight,Width,Height,Alternate,Color1,Color2) {
	if(Color2 == null) {
		Color2 = -1998989867;
	}
	if(Color1 == null) {
		Color1 = -1998067994;
	}
	if(Alternate == null) {
		Alternate = true;
	}
	if(Height == null) {
		Height = -1;
	}
	if(Width == null) {
		Width = -1;
	}
	if(Width == -1) {
		Width = flixel_FlxG.width;
	}
	if(Height == -1) {
		Height = flixel_FlxG.height;
	}
	if(Width < CellWidth || Height < CellHeight) {
		return null;
	}
	var grid = flixel_addons_display_FlxGridOverlay.createGrid(CellWidth,CellHeight,Width,Height,Alternate,Color1,Color2);
	Sprite.get_pixels().copyPixels(grid,new openfl_geom_Rectangle(0,0,Width,Height),new openfl_geom_Point(0,0),null,null,true);
	return Sprite;
};
flixel_addons_display_FlxGridOverlay.createGrid = function(CellWidth,CellHeight,Width,Height,Alternate,Color1,Color2) {
	var rowColor = Color1;
	var lastColor = Color1;
	var grid = new openfl_display_BitmapData(Width,Height,true);
	var y = 0;
	while(y <= Height) {
		if(y > 0 && lastColor == rowColor && Alternate) {
			if(lastColor == Color1) {
				lastColor = Color2;
			} else {
				lastColor = Color1;
			}
		} else if(y > 0 && lastColor != rowColor && Alternate == false) {
			if(lastColor == Color2) {
				lastColor = Color1;
			} else {
				lastColor = Color2;
			}
		}
		var x = 0;
		while(x <= Width) {
			if(x == 0) {
				rowColor = lastColor;
			}
			grid.fillRect(new openfl_geom_Rectangle(x,y,CellWidth,CellHeight),lastColor);
			if(lastColor == Color1) {
				lastColor = Color2;
			} else {
				lastColor = Color1;
			}
			x += CellWidth;
		}
		y += CellHeight;
	}
	return grid;
};
var flixel_addons_effects_FlxTrail = function(Target,Graphic,Length,Delay,Alpha,Diff) {
	if(Diff == null) {
		Diff = 0.05;
	}
	if(Alpha == null) {
		Alpha = 0.4;
	}
	if(Delay == null) {
		Delay = 3;
	}
	if(Length == null) {
		Length = 10;
	}
	this._recentAnimations = [];
	this._recentFlipY = [];
	this._recentFlipX = [];
	this._recentFrames = [];
	this._recentScales = [];
	this._recentAngles = [];
	this._recentPositions = [];
	this._transp = 1;
	this._trailLength = 0;
	this._counter = 0;
	this.framesEnabled = true;
	this.scalesEnabled = true;
	this.rotationsEnabled = true;
	this.yEnabled = true;
	this.xEnabled = true;
	flixel_group_FlxTypedSpriteGroup.call(this);
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	var _this = point;
	var point = Target.origin;
	_this.set_x(point.x);
	_this.set_y(point.y);
	if(point._weak) {
		point.put();
	}
	this._spriteOrigin = _this;
	this.target = Target;
	this.delay = Delay;
	this._graphic = Graphic;
	this._transp = Alpha;
	this._difference = Diff;
	this.increaseLength(Length);
	this.set_solid(false);
};
$hxClasses["flixel.addons.effects.FlxTrail"] = flixel_addons_effects_FlxTrail;
flixel_addons_effects_FlxTrail.__name__ = "flixel.addons.effects.FlxTrail";
flixel_addons_effects_FlxTrail.__super__ = flixel_group_FlxTypedSpriteGroup;
flixel_addons_effects_FlxTrail.prototype = $extend(flixel_group_FlxTypedSpriteGroup.prototype,{
	target: null
	,delay: null
	,xEnabled: null
	,yEnabled: null
	,rotationsEnabled: null
	,scalesEnabled: null
	,framesEnabled: null
	,_counter: null
	,_trailLength: null
	,_graphic: null
	,_transp: null
	,_difference: null
	,_recentPositions: null
	,_recentAngles: null
	,_recentScales: null
	,_recentFrames: null
	,_recentFlipX: null
	,_recentFlipY: null
	,_recentAnimations: null
	,_spriteOrigin: null
	,destroy: function() {
		flixel_util_FlxDestroyUtil.putArray(this._recentPositions);
		flixel_util_FlxDestroyUtil.putArray(this._recentScales);
		this._recentAngles = null;
		this._recentPositions = null;
		this._recentScales = null;
		this._recentFrames = null;
		this._recentFlipX = null;
		this._recentFlipY = null;
		this._recentAnimations = null;
		this._spriteOrigin = null;
		this.target = null;
		this._graphic = null;
		flixel_group_FlxTypedSpriteGroup.prototype.destroy.call(this);
	}
	,update: function(elapsed) {
		this._counter++;
		if(this._counter >= this.delay && this._trailLength >= 1) {
			this._counter = 0;
			var spritePosition = null;
			if(this._recentPositions.length == this._trailLength) {
				spritePosition = this._recentPositions.pop();
			} else {
				var point = flixel_math_FlxPoint._pool.get().set(0,0);
				point._inPool = false;
				spritePosition = point;
			}
			spritePosition.set(this.target.x - this.target.offset.x,this.target.y - this.target.offset.y);
			this._recentPositions.unshift(spritePosition);
			if(this.rotationsEnabled) {
				this.cacheValue(this._recentAngles,this.target.angle);
			}
			if(this.scalesEnabled) {
				var spriteScale = null;
				if(this._recentScales.length == this._trailLength) {
					spriteScale = this._recentScales.pop();
				} else {
					var point = flixel_math_FlxPoint._pool.get().set(0,0);
					point._inPool = false;
					spriteScale = point;
				}
				spriteScale.set(this.target.scale.x,this.target.scale.y);
				this._recentScales.unshift(spriteScale);
			}
			if(this.framesEnabled && this._graphic == null) {
				this.cacheValue(this._recentFrames,this.target.animation.frameIndex);
				this.cacheValue(this._recentFlipX,this.target.flipX);
				this.cacheValue(this._recentFlipY,this.target.flipY);
				this.cacheValue(this._recentAnimations,this.target.animation._curAnim);
			}
			var trailSprite;
			var _g = 0;
			var _g1 = this._recentPositions.length;
			while(_g < _g1) {
				var i = _g++;
				trailSprite = this.group.members[i];
				trailSprite.set_x(this._recentPositions[i].x);
				trailSprite.set_y(this._recentPositions[i].y);
				if(this.rotationsEnabled) {
					trailSprite.set_angle(this._recentAngles[i]);
					trailSprite.origin.set_x(this._spriteOrigin.x);
					trailSprite.origin.set_y(this._spriteOrigin.y);
				}
				if(this.scalesEnabled) {
					trailSprite.scale.set_x(this._recentScales[i].x);
					trailSprite.scale.set_y(this._recentScales[i].y);
				}
				if(this.framesEnabled && this._graphic == null) {
					trailSprite.animation.set_frameIndex(this._recentFrames[i]);
					trailSprite.set_flipX(this._recentFlipX[i]);
					trailSprite.set_flipY(this._recentFlipY[i]);
					var _this = trailSprite.animation;
					var Anim = this._recentAnimations[i];
					if(Anim != _this._curAnim) {
						if(_this._curAnim != null) {
							_this._curAnim.stop();
						}
						if(Anim != null) {
							Anim.play();
						}
					}
					_this._curAnim = Anim;
				}
				trailSprite.set_exists(true);
			}
		}
		flixel_group_FlxTypedSpriteGroup.prototype.update.call(this,elapsed);
	}
	,cacheValue: function(array,value) {
		array.unshift(value);
		flixel_util_FlxArrayUtil.setLength_cacheValue_T(array,this._trailLength);
	}
	,resetTrail: function() {
		this._recentPositions.splice(0,this._recentPositions.length);
		this._recentAngles.splice(0,this._recentAngles.length);
		this._recentScales.splice(0,this._recentScales.length);
		this._recentFrames.splice(0,this._recentFrames.length);
		this._recentFlipX.splice(0,this._recentFlipX.length);
		this._recentFlipY.splice(0,this._recentFlipY.length);
		this._recentAnimations.splice(0,this._recentAnimations.length);
		var _g = 0;
		var _g1 = this.group.members.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.group.members[i] != null) {
				this.group.members[i].set_exists(false);
			}
		}
	}
	,increaseLength: function(Amount) {
		if(Amount <= 0) {
			return;
		}
		this._trailLength += Amount;
		var _g = 0;
		var _g1 = Amount;
		while(_g < _g1) {
			var i = _g++;
			var trailSprite = new flixel_FlxSprite(0,0);
			if(this._graphic == null) {
				trailSprite.loadGraphicFromSprite(this.target);
			} else {
				trailSprite.loadGraphic(this._graphic);
			}
			trailSprite.set_exists(false);
			trailSprite.set_active(false);
			this.add(trailSprite);
			trailSprite.set_alpha(this._transp);
			this._transp -= this._difference;
			trailSprite.set_solid((this.allowCollisions & 4369) > 0);
			if(trailSprite.alpha <= 0) {
				trailSprite.kill();
			}
		}
	}
	,changeGraphic: function(Image1) {
		this._graphic = Image1;
		var _g = 0;
		var _g1 = this._trailLength;
		while(_g < _g1) {
			var i = _g++;
			this.group.members[i].loadGraphic(Image1);
		}
	}
	,changeValuesEnabled: function(Angle,X,Y,Scale) {
		if(Scale == null) {
			Scale = true;
		}
		if(Y == null) {
			Y = true;
		}
		if(X == null) {
			X = true;
		}
		this.rotationsEnabled = Angle;
		this.xEnabled = X;
		this.yEnabled = Y;
		this.scalesEnabled = Scale;
	}
	,__class__: flixel_addons_effects_FlxTrail
});
var flixel_addons_effects_FlxTrailArea = function(X,Y,Width,Height,AlphaMultiplier,Delay,SimpleRender,Antialiasing,TrailBlendMode) {
	if(Antialiasing == null) {
		Antialiasing = false;
	}
	if(SimpleRender == null) {
		SimpleRender = false;
	}
	if(Delay == null) {
		Delay = 2;
	}
	if(AlphaMultiplier == null) {
		AlphaMultiplier = 0.8;
	}
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._height = 1;
	this._width = 1;
	this._counter = 0;
	this.alphaOffset = 0;
	this.blueOffset = 0;
	this.greenOffset = 0;
	this.redOffset = 0;
	this.blueMultiplier = 1;
	this.greenMultiplier = 1;
	this.redMultiplier = 1;
	this.blendMode = null;
	this.simpleRender = false;
	this.delay = 2;
	flixel_FlxSprite.call(this,X,Y);
	this.group = new flixel_group_FlxTypedGroup();
	this.delay = Delay;
	this.simpleRender = SimpleRender;
	this.blendMode = TrailBlendMode;
	this.set_antialiasing(Antialiasing);
	this.alphaMultiplier = AlphaMultiplier;
	this.setSize(Width,Height);
	this.set_pixels(this._areaPixels);
};
$hxClasses["flixel.addons.effects.FlxTrailArea"] = flixel_addons_effects_FlxTrailArea;
flixel_addons_effects_FlxTrailArea.__name__ = "flixel.addons.effects.FlxTrailArea";
flixel_addons_effects_FlxTrailArea.__super__ = flixel_FlxSprite;
flixel_addons_effects_FlxTrailArea.prototype = $extend(flixel_FlxSprite.prototype,{
	delay: null
	,simpleRender: null
	,blendMode: null
	,group: null
	,redMultiplier: null
	,greenMultiplier: null
	,blueMultiplier: null
	,alphaMultiplier: null
	,redOffset: null
	,greenOffset: null
	,blueOffset: null
	,alphaOffset: null
	,_counter: null
	,_width: null
	,_height: null
	,_areaPixels: null
	,setSize: function(Width,Height) {
		if(Width <= 0) {
			Width = flixel_FlxG.width;
		}
		if(Height <= 0) {
			Height = flixel_FlxG.height;
		}
		if(Width != this._width || Height != this._height) {
			this._width = Width;
			this._height = Height;
			this._areaPixels = new openfl_display_BitmapData(this._width | 0,this._height | 0,true,0);
		}
	}
	,destroy: function() {
		this.group = flixel_util_FlxDestroyUtil.destroy(this.group);
		this.blendMode = null;
		if(this.get_pixels() != this._areaPixels) {
			this._areaPixels.dispose();
		}
		this._areaPixels = null;
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,draw: function() {
		this._counter++;
		if(this._counter >= this.delay) {
			this._counter = 0;
			this._areaPixels.lock();
			var cTrans = new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
			this._areaPixels.colorTransform(new openfl_geom_Rectangle(0,0,this._areaPixels.width,this._areaPixels.height),cTrans);
			var _g = 0;
			var _g1 = this.group.members;
			while(_g < _g1.length) {
				var member = _g1[_g];
				++_g;
				if(member.exists) {
					var finalX = member.x - this.x - member.offset.x;
					var finalY = member.y - this.y - member.offset.y;
					if(this.simpleRender) {
						this._areaPixels.copyPixels(member.updateFramePixels(),new openfl_geom_Rectangle(0,0,member.frameWidth,member.frameHeight),new openfl_geom_Point(finalX,finalY),null,null,true);
					} else {
						var scaled = member.scale.x != 1 || member.scale.y != 1;
						var rotated = member.angle != 0 && member.bakedRotationAngle <= 0;
						this._matrix.identity();
						if(rotated || scaled) {
							this._matrix.translate(-member.origin.x,-member.origin.y);
							if(scaled) {
								this._matrix.scale(member.scale.x,member.scale.y);
							}
							if(rotated) {
								this._matrix.rotate(member.angle * (Math.PI / 180));
							}
							this._matrix.translate(member.origin.x,member.origin.y);
						}
						this._matrix.translate(finalX,finalY);
						this._areaPixels.draw(member.updateFramePixels(),this._matrix,member.colorTransform,this.blendMode,null,this.antialiasing);
					}
				}
			}
			this._areaPixels.unlock();
			this.set_pixels(this._areaPixels);
		}
		flixel_FlxSprite.prototype.draw.call(this);
	}
	,resetTrail: function() {
		this._areaPixels.fillRect(new openfl_geom_Rectangle(0,0,this._areaPixels.width,this._areaPixels.height),0);
	}
	,add: function(Sprite) {
		return this.group.add(Sprite);
	}
	,get_width: function() {
		return this._width;
	}
	,set_width: function(Width) {
		if(Width <= 0) {
			Width = flixel_FlxG.width;
		}
		if(Width != this._width) {
			this._areaPixels = new openfl_display_BitmapData(Width | 0,this._height | 0,true,0);
		}
		return this._width = Width;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(Height) {
		if(Height <= 0) {
			Height = flixel_FlxG.height;
		}
		if(Height != this._height) {
			this._areaPixels = new openfl_display_BitmapData(this._width | 0,Height | 0,true,0);
		}
		return this._height = Height;
	}
	,__class__: flixel_addons_effects_FlxTrailArea
});
var flixel_addons_effects_chainable_FlxEffectSprite = function(Target,Effects) {
	this.updateTargetAnimation = true;
	this.effectsEnabled = true;
	flixel_FlxSprite.call(this);
	this.target = Target;
	this.effects = Effects != null ? Effects : [];
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this._effectOffset = point;
};
$hxClasses["flixel.addons.effects.chainable.FlxEffectSprite"] = flixel_addons_effects_chainable_FlxEffectSprite;
flixel_addons_effects_chainable_FlxEffectSprite.__name__ = "flixel.addons.effects.chainable.FlxEffectSprite";
flixel_addons_effects_chainable_FlxEffectSprite.__super__ = flixel_FlxSprite;
flixel_addons_effects_chainable_FlxEffectSprite.prototype = $extend(flixel_FlxSprite.prototype,{
	effectsEnabled: null
	,target: null
	,updateTargetAnimation: null
	,effects: null
	,_effectOffset: null
	,destroy: function() {
		this.effects = flixel_util_FlxDestroyUtil.destroyArray(this.effects);
		this._effectOffset = flixel_util_FlxDestroyUtil.put(this._effectOffset);
		this.target = null;
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,getScreenPosition: function(point,Camera) {
		return flixel_FlxSprite.prototype.getScreenPosition.call(this,point,Camera).addPoint(this._effectOffset);
	}
	,draw: function() {
		if(this.target.dirty) {
			this.target.drawFrame();
		}
		if(this.target.framePixels == null) {
			flixel_FlxSprite.prototype.draw.call(this);
			return;
		}
		if(this.get_pixels() != null && this.get_pixels().width == this.target.framePixels.width && this.get_pixels().height == this.target.framePixels.height) {
			this.get_pixels().fillRect(this.get_pixels().rect,0);
			this.get_pixels().draw(this.target.framePixels);
		} else {
			flixel_util_FlxDestroyUtil.dispose(this.get_pixels());
			this.set_pixels(this.target.framePixels.clone());
		}
		this._effectOffset.set(0,0);
		if(this.effectsEnabled) {
			this.get_pixels().lock();
			var _g = 0;
			var _g1 = this.effects;
			while(_g < _g1.length) {
				var effect = _g1[_g];
				++_g;
				if(effect.active) {
					this.set_pixels(effect.apply(this.get_pixels()));
					if(effect.offset != null) {
						this._effectOffset.addPoint(effect.offset);
					}
				}
			}
			this.get_pixels().unlock();
			this._flashRect = this.get_pixels().rect;
		}
		flixel_FlxSprite.prototype.draw.call(this);
	}
	,update: function(elapsed) {
		if(this.updateTargetAnimation && this.target.animation._sprite.numFrames > 1) {
			this.target.updateAnimation(elapsed);
		}
		if(this.effectsEnabled) {
			var _g = 0;
			var _g1 = this.effects;
			while(_g < _g1.length) {
				var effect = _g1[_g];
				++_g;
				if(effect.active) {
					effect.update(elapsed);
				}
			}
		}
		flixel_FlxSprite.prototype.update.call(this,elapsed);
	}
	,__class__: flixel_addons_effects_chainable_FlxEffectSprite
});
var flixel_addons_effects_chainable_IFlxEffect = function() { };
$hxClasses["flixel.addons.effects.chainable.IFlxEffect"] = flixel_addons_effects_chainable_IFlxEffect;
flixel_addons_effects_chainable_IFlxEffect.__name__ = "flixel.addons.effects.chainable.IFlxEffect";
flixel_addons_effects_chainable_IFlxEffect.__isInterface__ = true;
flixel_addons_effects_chainable_IFlxEffect.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_addons_effects_chainable_IFlxEffect.prototype = {
	active: null
	,offset: null
	,update: null
	,apply: null
	,__class__: flixel_addons_effects_chainable_IFlxEffect
};
var flixel_addons_effects_chainable_FlxWaveEffect = function(Mode,Strength,Center,Speed,Wavelength,Direction,InterlaceOffset) {
	if(InterlaceOffset == null) {
		InterlaceOffset = 0;
	}
	if(Wavelength == null) {
		Wavelength = 5;
	}
	if(Speed == null) {
		Speed = 3;
	}
	if(Center == null) {
		Center = 0.5;
	}
	if(Strength == null) {
		Strength = 10;
	}
	this._flashRect = new openfl_geom_Rectangle();
	this._flashPoint = new openfl_geom_Point();
	this._time = 0;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.offset = point;
	this.active = true;
	this.strength = Strength;
	this.mode = Mode == null ? flixel_addons_effects_chainable_FlxWaveMode.ALL : Mode;
	this.speed = Speed;
	this.wavelength = Wavelength;
	this.direction = Direction != null ? Direction : flixel_addons_effects_chainable_FlxWaveDirection.HORIZONTAL;
	this.center = Center;
	this.set_interlaceOffset(InterlaceOffset);
};
$hxClasses["flixel.addons.effects.chainable.FlxWaveEffect"] = flixel_addons_effects_chainable_FlxWaveEffect;
flixel_addons_effects_chainable_FlxWaveEffect.__name__ = "flixel.addons.effects.chainable.FlxWaveEffect";
flixel_addons_effects_chainable_FlxWaveEffect.__interfaces__ = [flixel_addons_effects_chainable_IFlxEffect];
flixel_addons_effects_chainable_FlxWaveEffect.prototype = {
	active: null
	,offset: null
	,mode: null
	,speed: null
	,center: null
	,direction: null
	,wavelength: null
	,strength: null
	,interlaceOffset: null
	,_time: null
	,_flashPoint: null
	,_flashRect: null
	,_pixels: null
	,destroy: function() {
		this._flashPoint = null;
		this._flashRect = null;
		this.offset = flixel_util_FlxDestroyUtil.put(this.offset);
		this._pixels = flixel_util_FlxDestroyUtil.dispose(this._pixels);
	}
	,update: function(elapsed) {
		this._time += elapsed * this.speed;
	}
	,apply: function(bitmapData) {
		var horizontalStrength = this.direction == flixel_addons_effects_chainable_FlxWaveDirection.HORIZONTAL ? this.strength : 0;
		var verticalStrength = this.direction == flixel_addons_effects_chainable_FlxWaveDirection.VERTICAL ? this.strength : 0;
		this.offset.set(-horizontalStrength,-verticalStrength);
		if(this._pixels == null || this._pixels.width < bitmapData.width + horizontalStrength * 2 || this._pixels.height < bitmapData.height + verticalStrength * 2) {
			flixel_util_FlxDestroyUtil.dispose(this._pixels);
			this._pixels = new openfl_display_BitmapData(bitmapData.width + horizontalStrength * 2,bitmapData.height + verticalStrength * 2,true,0);
		} else {
			this._pixels.fillRect(this._pixels.rect,0);
		}
		var length = this.direction == flixel_addons_effects_chainable_FlxWaveDirection.HORIZONTAL ? bitmapData.height : bitmapData.width;
		var p = 0;
		while(p < length) {
			var pixelOffset = 0;
			var offsetP = length * this.center;
			var size = 1;
			switch(this.mode._hx_index) {
			case 0:
				offsetP = this.strength;
				break;
			case 1:
				if(p <= offsetP) {
					offsetP = (1 - p / offsetP) * this.strength;
				} else {
					size = length - p;
					offsetP = 0;
				}
				break;
			case 2:
				if(p >= offsetP) {
					offsetP = (1 - (1 - p / length) / (1 - this.center)) * this.strength;
				} else {
					size = Math.ceil(offsetP);
					offsetP = 0;
				}
				break;
			}
			var waveOffset = 0;
			if(this.interlaceOffset != 0 && this.interlaceOffset != 1 && ((p | 0) & 1) != 0) {
				waveOffset = Math.PI * 2 * this.interlaceOffset;
			}
			var n = p / this.wavelength + this._time + waveOffset;
			n *= 0.3183098862;
			if(n > 1) {
				n -= Math.ceil(n) >> 1 << 1;
			} else if(n < -1) {
				n += Math.ceil(-n) >> 1 << 1;
			}
			pixelOffset = offsetP * (n > 0 ? n * (3.1 + n * (0.5 + n * (-7.2 + n * 3.6))) : n * (3.1 - n * (0.5 + n * (7.2 + n * 3.6))));
			if(this.direction == flixel_addons_effects_chainable_FlxWaveDirection.HORIZONTAL) {
				this._flashPoint.setTo(this.strength + pixelOffset,p);
				this._flashRect.setTo(0,p,bitmapData.width,size);
			} else {
				this._flashPoint.setTo(p,this.strength + pixelOffset);
				this._flashRect.setTo(p,0,size,bitmapData.height);
			}
			this._pixels.copyPixels(bitmapData,this._flashRect,this._flashPoint);
			p += size;
		}
		flixel_util_FlxDestroyUtil.dispose(bitmapData);
		return this._pixels.clone();
	}
	,calculateOffset: function(p,length) {
		var waveOffset = 0;
		if(this.interlaceOffset != 0 && this.interlaceOffset != 1 && ((p | 0) & 1) != 0) {
			waveOffset = Math.PI * 2 * this.interlaceOffset;
		}
		var n = p / this.wavelength + this._time + waveOffset;
		n *= 0.3183098862;
		if(n > 1) {
			n -= Math.ceil(n) >> 1 << 1;
		} else if(n < -1) {
			n += Math.ceil(-n) >> 1 << 1;
		}
		if(n > 0) {
			return n * (3.1 + n * (0.5 + n * (-7.2 + n * 3.6)));
		} else {
			return n * (3.1 - n * (0.5 + n * (7.2 + n * 3.6)));
		}
	}
	,set_interlaceOffset: function(InterlaceOffset) {
		var lowerBound = InterlaceOffset < 0 ? 0 : InterlaceOffset;
		return this.interlaceOffset = lowerBound > 1 ? 1 : lowerBound;
	}
	,__class__: flixel_addons_effects_chainable_FlxWaveEffect
	,__properties__: {set_interlaceOffset:"set_interlaceOffset"}
};
var flixel_addons_effects_chainable_FlxWaveMode = $hxEnums["flixel.addons.effects.chainable.FlxWaveMode"] = { __ename__ : "flixel.addons.effects.chainable.FlxWaveMode", __constructs__ : ["ALL","START","END"]
	,ALL: {_hx_index:0,__enum__:"flixel.addons.effects.chainable.FlxWaveMode",toString:$estr}
	,START: {_hx_index:1,__enum__:"flixel.addons.effects.chainable.FlxWaveMode",toString:$estr}
	,END: {_hx_index:2,__enum__:"flixel.addons.effects.chainable.FlxWaveMode",toString:$estr}
};
flixel_addons_effects_chainable_FlxWaveMode.__empty_constructs__ = [flixel_addons_effects_chainable_FlxWaveMode.ALL,flixel_addons_effects_chainable_FlxWaveMode.START,flixel_addons_effects_chainable_FlxWaveMode.END];
var flixel_addons_effects_chainable_FlxWaveDirection = $hxEnums["flixel.addons.effects.chainable.FlxWaveDirection"] = { __ename__ : "flixel.addons.effects.chainable.FlxWaveDirection", __constructs__ : ["HORIZONTAL","VERTICAL"]
	,HORIZONTAL: {_hx_index:0,__enum__:"flixel.addons.effects.chainable.FlxWaveDirection",toString:$estr}
	,VERTICAL: {_hx_index:1,__enum__:"flixel.addons.effects.chainable.FlxWaveDirection",toString:$estr}
};
flixel_addons_effects_chainable_FlxWaveDirection.__empty_constructs__ = [flixel_addons_effects_chainable_FlxWaveDirection.HORIZONTAL,flixel_addons_effects_chainable_FlxWaveDirection.VERTICAL];
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) {
		this.load(stream,context);
	}
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = "openfl.media.Sound";
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.fromFile = function(path) {
	return openfl_media_Sound.fromAudioBuffer(lime_media_AudioBuffer.fromFile(path));
};
openfl_media_Sound.loadFromFile = function(path) {
	return lime_media_AudioBuffer.loadFromFile(path).then(function(audioBuffer) {
		return lime_app_Future.withValue(openfl_media_Sound.fromAudioBuffer(audioBuffer));
	});
};
openfl_media_Sound.loadFromFiles = function(paths) {
	return lime_media_AudioBuffer.loadFromFiles(paths).then(function(audioBuffer) {
		return lime_app_Future.withValue(openfl_media_Sound.fromAudioBuffer(audioBuffer));
	});
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,isBuffering: null
	,url: null
	,__buffer: null
	,close: function() {
		if(this.__buffer != null) {
			this.__buffer.dispose();
			this.__buffer = null;
		}
	}
	,load: function(stream,context) {
		var _gthis = this;
		this.url = stream.url;
		var defaultLibrary = lime_utils_Assets.getLibrary("default");
		if(defaultLibrary != null && Object.prototype.hasOwnProperty.call(defaultLibrary.cachedAudioBuffers.h,this.url)) {
			this.AudioBuffer_onURLLoad(defaultLibrary.cachedAudioBuffers.h[this.url]);
		} else {
			lime_media_AudioBuffer.loadFromFile(this.url).onComplete($bind(this,this.AudioBuffer_onURLLoad)).onError(function(_) {
				_gthis.AudioBuffer_onURLLoad(null);
			});
		}
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength) {
		if(bytes == null || bytesLength <= 0) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
			return;
		}
		if(UInt.gt(bytes.position,0) || UInt.gt(openfl_utils_ByteArray.get_length(bytes),bytesLength)) {
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			var this1 = new openfl_utils_ByteArrayData(length);
			var copy = this1;
			var offset = bytes.position;
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			if(offset == null) {
				offset = 0;
			}
			copy.writeBytes(bytes,offset,length);
			bytes = copy;
		}
		this.__buffer = lime_media_AudioBuffer.fromBytes(openfl_utils_ByteArray.toBytes(bytes));
		if(this.__buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
		if(format == null) {
			format = "float";
		}
		if(bytes == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
			return;
		}
		var bitsPerSample = format == "float" ? 32 : 16;
		var channels = stereo ? 2 : 1;
		var bytesLength = samples * channels * (bitsPerSample / 8) | 0;
		if(UInt.gt(bytes.position,0) || UInt.gt(openfl_utils_ByteArray.get_length(bytes),bytesLength)) {
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			var this1 = new openfl_utils_ByteArrayData(length);
			var copy = this1;
			var offset = bytes.position;
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			if(offset == null) {
				offset = 0;
			}
			copy.writeBytes(bytes,offset,length);
			bytes = copy;
		}
		var audioBuffer = new lime_media_AudioBuffer();
		audioBuffer.bitsPerSample = bitsPerSample;
		audioBuffer.channels = channels;
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var buffer = openfl_utils_ByteArray.toArrayBuffer(bytes);
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer,0);
			} else {
				this1 = new Uint8Array(buffer,0,len);
			}
		} else {
			this1 = null;
		}
		audioBuffer.data = this1;
		audioBuffer.sampleRate = sampleRate | 0;
		this.__buffer = audioBuffer;
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0.0;
		}
		if(this.__buffer == null || openfl_media_SoundMixer.__soundChannels.length >= 32) {
			return null;
		}
		if(sndTransform == null) {
			sndTransform = new openfl_media_SoundTransform();
		} else {
			sndTransform = sndTransform.clone();
		}
		var pan = openfl_media_SoundMixer.__soundTransform.pan + sndTransform.pan;
		if(pan > 1) {
			pan = 1;
		}
		if(pan < -1) {
			pan = -1;
		}
		var volume = openfl_media_SoundMixer.__soundTransform.volume * sndTransform.volume;
		var source = new lime_media_AudioSource(this.__buffer);
		source.offset = startTime | 0;
		if(loops > 1) {
			source.set_loops(loops - 1);
		}
		source.set_gain(volume);
		var position = source.get_position();
		position.x = pan;
		position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
		source.set_position(position);
		return new openfl_media_SoundChannel(source,sndTransform);
	}
	,get_id3: function() {
		return new openfl_media_ID3Info();
	}
	,get_length: function() {
		if(this.__buffer != null) {
			return this.__buffer.get_src().duration() * 1000 | 0;
		}
		return 0;
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		if(buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__class__: openfl_media_Sound
	,__properties__: {get_length:"get_length",get_id3:"get_id3"}
});
var flixel_addons_text_TypeSound = function(stream,context) {
	openfl_media_Sound.call(this,stream,context);
};
$hxClasses["flixel.addons.text.TypeSound"] = flixel_addons_text_TypeSound;
flixel_addons_text_TypeSound.__name__ = "flixel.addons.text.TypeSound";
flixel_addons_text_TypeSound.__super__ = openfl_media_Sound;
flixel_addons_text_TypeSound.prototype = $extend(openfl_media_Sound.prototype,{
	__class__: flixel_addons_text_TypeSound
});
var flixel_text_FlxText = function(X,Y,FieldWidth,Text1,Size,EmbeddedFont) {
	if(EmbeddedFont == null) {
		EmbeddedFont = true;
	}
	if(Size == null) {
		Size = 8;
	}
	if(FieldWidth == null) {
		FieldWidth = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._hasBorderAlpha = false;
	this._regen = true;
	this._formatRanges = [];
	this.borderQuality = 1;
	this.borderSize = 1;
	this.borderColor = 0;
	this.borderStyle = flixel_text_FlxTextBorderStyle.NONE;
	this.text = "";
	flixel_FlxSprite.call(this,X,Y);
	if(Text1 == null || Text1 == "") {
		this.set_text("");
		Text1 = " ";
	} else {
		this.set_text(Text1);
	}
	this.textField = new openfl_text_TextField();
	this.textField.set_selectable(false);
	this.textField.set_multiline(true);
	this.textField.set_wordWrap(true);
	this._defaultFormat = new openfl_text_TextFormat(null,Size,16777215);
	this.set_font(flixel_system_FlxAssets.FONT_DEFAULT);
	this._formatAdjusted = new openfl_text_TextFormat();
	this.textField.set_defaultTextFormat(this._defaultFormat);
	this.textField.set_text(Text1);
	this.set_fieldWidth(FieldWidth);
	this.textField.set_embedFonts(EmbeddedFont);
	this.textField.set_sharpness(100);
	this.textField.set_height(Text1.length <= 0 ? 1 : 10);
	this.set_allowCollisions(0);
	this.set_moves(false);
	this.drawFrame();
	var X = 1;
	var Y = 1;
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	this.shadowOffset = point;
};
$hxClasses["flixel.text.FlxText"] = flixel_text_FlxText;
flixel_text_FlxText.__name__ = "flixel.text.FlxText";
flixel_text_FlxText.__super__ = flixel_FlxSprite;
flixel_text_FlxText.prototype = $extend(flixel_FlxSprite.prototype,{
	text: null
	,borderStyle: null
	,borderColor: null
	,borderSize: null
	,borderQuality: null
	,textField: null
	,shadowOffset: null
	,_defaultFormat: null
	,_formatAdjusted: null
	,_formatRanges: null
	,_font: null
	,_regen: null
	,_borderPixels: null
	,_borderColorTransform: null
	,_hasBorderAlpha: null
	,destroy: function() {
		this.textField = null;
		this._font = null;
		this._defaultFormat = null;
		this._formatAdjusted = null;
		this.shadowOffset = flixel_util_FlxDestroyUtil.put(this.shadowOffset);
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,drawFrame: function(Force) {
		if(Force == null) {
			Force = false;
		}
		this._regen = this._regen || Force;
		flixel_FlxSprite.prototype.drawFrame.call(this,this._regen);
	}
	,stampOnAtlas: function(atlas) {
		this.regenGraphic();
		var node = atlas.addNode(this.graphic.bitmap,this.graphic.key);
		var result = node != null;
		if(node != null) {
			this.set_frames(node.getImageFrame());
		}
		return result;
	}
	,applyMarkup: function(input,rules) {
		if(rules == null || rules.length == 0) {
			return this;
		}
		this.clearFormats();
		var rangeStarts = [];
		var rangeEnds = [];
		var rulesToApply = [];
		var i = 0;
		var _g = 0;
		while(_g < rules.length) {
			var rule = rules[_g];
			++_g;
			if(rule.marker == null || rule.format == null) {
				continue;
			}
			var start = false;
			var markerLength = UnicodeString.get_length(rule.marker);
			if(input.indexOf(rule.marker) == -1) {
				continue;
			}
			var _g1 = 0;
			var _g2 = UnicodeString.get_length(input);
			while(_g1 < _g2) {
				var charIndex = _g1++;
				if(UnicodeString.substr(input,charIndex,markerLength) != rule.marker) {
					continue;
				}
				if(start) {
					start = false;
					rangeEnds.push(charIndex);
				} else {
					start = true;
					rangeStarts.push(charIndex);
					rulesToApply.push(rule);
				}
			}
			if(start) {
				rangeEnds.push(-1);
			}
			++i;
		}
		var _g = 0;
		while(_g < rules.length) {
			var rule = rules[_g];
			++_g;
			input = StringTools.replace(input,rule.marker,"");
		}
		var _g = 0;
		var _g1 = rangeStarts.length;
		while(_g < _g1) {
			var i = _g++;
			var delIndex = rangeStarts[i];
			var markerLength = UnicodeString.get_length(rulesToApply[i].marker);
			var _g2 = 0;
			var _g3 = rangeStarts.length;
			while(_g2 < _g3) {
				var j = _g2++;
				if(rangeStarts[j] > delIndex) {
					rangeStarts[j] -= markerLength;
				}
				if(rangeEnds[j] > delIndex) {
					rangeEnds[j] -= markerLength;
				}
			}
			delIndex = rangeEnds[i];
			var _g4 = 0;
			var _g5 = rangeStarts.length;
			while(_g4 < _g5) {
				var j1 = _g4++;
				if(rangeStarts[j1] > delIndex) {
					rangeStarts[j1] -= markerLength;
				}
				if(rangeEnds[j1] > delIndex) {
					rangeEnds[j1] -= markerLength;
				}
			}
		}
		this.set_text(input);
		var _g = 0;
		var _g1 = rangeStarts.length;
		while(_g < _g1) {
			var i = _g++;
			this.addFormat(rulesToApply[i].format,rangeStarts[i],rangeEnds[i]);
		}
		return this;
	}
	,addFormat: function(Format,Start,End) {
		if(End == null) {
			End = -1;
		}
		if(Start == null) {
			Start = -1;
		}
		this._formatRanges.push(new flixel_text__$FlxText_FlxTextFormatRange(Format,Start,End));
		this._formatRanges.sort(function(left,right) {
			if(left.range.start < right.range.start) {
				return -1;
			} else {
				return 1;
			}
		});
		this._regen = true;
		return this;
	}
	,removeFormat: function(Format,Start,End) {
		var i = this._formatRanges.length;
		while(i-- > 0) {
			var formatRange = this._formatRanges[i];
			if(formatRange.format != Format) {
				continue;
			}
			if(Start != null && End != null) {
				var range = formatRange.range;
				if(Start >= range.end || End <= range.start) {
					continue;
				}
				if(Start > range.start && End < range.end) {
					this.addFormat(formatRange.format,End + 1,range.end);
					range.end = Start;
					continue;
				}
				if(Start <= range.start && End < range.end) {
					range.start = End;
					continue;
				}
				if(Start > range.start && End >= range.end) {
					range.end = Start;
					continue;
				}
			}
			HxOverrides.remove(this._formatRanges,formatRange);
		}
		this._regen = true;
		return this;
	}
	,clearFormats: function() {
		this._formatRanges = [];
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return this;
	}
	,setFormat: function(Font,Size,Color,Alignment,BorderStyle,BorderColor,EmbeddedFont) {
		if(EmbeddedFont == null) {
			EmbeddedFont = true;
		}
		if(BorderColor == null) {
			BorderColor = 0;
		}
		if(Color == null) {
			Color = -1;
		}
		if(Size == null) {
			Size = 8;
		}
		if(BorderStyle == null) {
			BorderStyle = flixel_text_FlxTextBorderStyle.NONE;
		}
		if(EmbeddedFont) {
			this.set_font(Font);
		} else if(Font != null) {
			this.set_systemFont(Font);
		}
		this.set_size(Size);
		this.set_color(Color);
		if(Alignment != null) {
			this.set_alignment(Alignment);
		}
		var Color = BorderColor;
		if(Color == null) {
			Color = 0;
		}
		this.set_borderStyle(BorderStyle);
		this.set_borderColor(Color);
		this.set_borderSize(1);
		this.set_borderQuality(1);
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return this;
	}
	,setBorderStyle: function(Style,Color,Size,Quality) {
		if(Quality == null) {
			Quality = 1;
		}
		if(Size == null) {
			Size = 1;
		}
		if(Color == null) {
			Color = 0;
		}
		this.set_borderStyle(Style);
		this.set_borderColor(Color);
		this.set_borderSize(Size);
		this.set_borderQuality(Quality);
		return this;
	}
	,updateHitbox: function() {
		this.regenGraphic();
		flixel_FlxSprite.prototype.updateHitbox.call(this);
	}
	,set_fieldWidth: function(value) {
		if(this.textField == null) {
			return value;
		}
		if(value <= 0) {
			this.set_wordWrap(false);
			this.set_autoSize(true);
		} else {
			this.set_autoSize(false);
			this.set_wordWrap(true);
			this.textField.set_width(value);
		}
		this._regen = true;
		return value;
	}
	,get_fieldWidth: function() {
		if(this.textField != null) {
			return this.textField.get_width();
		} else {
			return 0;
		}
	}
	,set_autoSize: function(value) {
		if(this.textField != null) {
			this.textField.set_autoSize(value ? 1 : 2);
			this._regen = true;
		}
		return value;
	}
	,get_autoSize: function() {
		if(this.textField != null) {
			return this.textField.get_autoSize() != 2;
		} else {
			return false;
		}
	}
	,set_text: function(Text1) {
		this.text = Text1;
		if(this.textField != null) {
			var ot = this.textField.get_text();
			this.textField.set_text(Text1);
			this._regen = this.textField.get_text() != ot || this._regen;
		}
		return Text1;
	}
	,get_size: function() {
		return this._defaultFormat.size | 0;
	}
	,set_size: function(Size) {
		this._defaultFormat.size = Size;
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return Size;
	}
	,set_color: function(Color) {
		if(this._defaultFormat.color == (Color & 16777215)) {
			return Color;
		}
		this._defaultFormat.color = Color & 16777215;
		this.color = Color;
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return Color;
	}
	,get_font: function() {
		return this._font;
	}
	,set_font: function(Font) {
		this.textField.set_embedFonts(true);
		if(Font != null) {
			var newFontName = Font;
			if(openfl_utils_Assets.exists(Font,"FONT")) {
				newFontName = openfl_utils_Assets.getFont(Font).name;
			}
			this._defaultFormat.font = newFontName;
		} else {
			this._defaultFormat.font = flixel_system_FlxAssets.FONT_DEFAULT;
		}
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return this._font = this._defaultFormat.font;
	}
	,get_embedded: function() {
		return this.textField.set_embedFonts(true);
	}
	,get_systemFont: function() {
		return this._defaultFormat.font;
	}
	,set_systemFont: function(Font) {
		this.textField.set_embedFonts(false);
		this._defaultFormat.font = Font;
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return Font;
	}
	,get_bold: function() {
		return this._defaultFormat.bold;
	}
	,set_bold: function(value) {
		if(this._defaultFormat.bold != value) {
			this._defaultFormat.bold = value;
			this.textField.set_defaultTextFormat(this._defaultFormat);
			this.textField.setTextFormat(this._defaultFormat);
			this._regen = true;
		}
		return value;
	}
	,get_italic: function() {
		return this._defaultFormat.italic;
	}
	,set_italic: function(value) {
		if(this._defaultFormat.italic != value) {
			this._defaultFormat.italic = value;
			this.textField.set_defaultTextFormat(this._defaultFormat);
			this.textField.setTextFormat(this._defaultFormat);
			this._regen = true;
		}
		return value;
	}
	,get_wordWrap: function() {
		return this.textField.get_wordWrap();
	}
	,set_wordWrap: function(value) {
		if(this.textField.get_wordWrap() != value) {
			this.textField.set_wordWrap(value);
			this._regen = true;
		}
		return value;
	}
	,get_alignment: function() {
		return flixel_text_FlxTextAlign.fromOpenFL(this._defaultFormat.align);
	}
	,set_alignment: function(Alignment) {
		this._defaultFormat.align = flixel_text_FlxTextAlign.toOpenFL(Alignment);
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return Alignment;
	}
	,set_borderStyle: function(style) {
		if(style != this.borderStyle) {
			this._regen = true;
		}
		return this.borderStyle = style;
	}
	,set_borderColor: function(Color) {
		if(this.borderColor != Color && this.borderStyle != flixel_text_FlxTextBorderStyle.NONE) {
			this._regen = true;
		}
		this._hasBorderAlpha = (Color >> 24 & 255) / 255 < 1;
		return this.borderColor = Color;
	}
	,set_borderSize: function(Value) {
		if(Value != this.borderSize && this.borderStyle != flixel_text_FlxTextBorderStyle.NONE) {
			this._regen = true;
		}
		return this.borderSize = Value;
	}
	,set_borderQuality: function(Value) {
		var lowerBound = Value < 0 ? 0 : Value;
		Value = lowerBound > 1 ? 1 : lowerBound;
		if(Value != this.borderQuality && this.borderStyle != flixel_text_FlxTextBorderStyle.NONE) {
			this._regen = true;
		}
		return this.borderQuality = Value;
	}
	,set_graphic: function(Value) {
		var oldGraphic = this.graphic;
		var graph = flixel_FlxSprite.prototype.set_graphic.call(this,Value);
		flixel_FlxG.bitmap.removeIfNoUse(oldGraphic);
		return graph;
	}
	,get_width: function() {
		this.regenGraphic();
		return flixel_FlxSprite.prototype.get_width.call(this);
	}
	,get_height: function() {
		this.regenGraphic();
		return flixel_FlxSprite.prototype.get_height.call(this);
	}
	,updateColorTransform: function() {
		if(this.colorTransform == null) {
			this.colorTransform = new openfl_geom_ColorTransform();
		}
		if(this.alpha != 1) {
			this.colorTransform.alphaMultiplier = this.alpha;
			this.useColorTransform = true;
		} else {
			this.colorTransform.alphaMultiplier = 1;
			this.useColorTransform = false;
		}
		this.dirty = true;
	}
	,regenGraphic: function() {
		if(this.textField == null || !this._regen) {
			return;
		}
		var oldWidth = 0;
		var oldHeight = 4;
		if(this.graphic != null) {
			oldWidth = this.graphic.width;
			oldHeight = this.graphic.height;
		}
		var newWidth = this.textField.get_width();
		var newHeight = this.textField.get_textHeight() + 4;
		if(this.textField.get_textHeight() == 0) {
			newHeight = oldHeight;
		}
		if(oldWidth != newWidth || oldHeight != newHeight) {
			this.set_height(newHeight);
			var key = flixel_FlxG.bitmap.getUniqueKey("text");
			this.makeGraphic(newWidth | 0,newHeight | 0,0,false,key);
			if(this._hasBorderAlpha) {
				this._borderPixels = this.graphic.bitmap.clone();
			}
			this.frameHeight = this.get_height() | 0;
			this.textField.set_height(this.get_height() * 1.2);
			this._flashRect.x = 0;
			this._flashRect.y = 0;
			this._flashRect.width = newWidth;
			this._flashRect.height = newHeight;
		} else {
			this.graphic.bitmap.fillRect(this._flashRect,0);
			if(this._hasBorderAlpha) {
				if(this._borderPixels == null) {
					this._borderPixels = new openfl_display_BitmapData(this.frameWidth,this.frameHeight,true);
				} else {
					this._borderPixels.fillRect(this._flashRect,0);
				}
			}
		}
		if(this.textField != null && this.textField.get_text() != null && this.textField.get_text().length > 0) {
			this.copyTextFormat(this._defaultFormat,this._formatAdjusted);
			this._matrix.identity();
			this.applyBorderStyle();
			if(this._hasBorderAlpha) {
				if(this._borderColorTransform == null) {
					this._borderColorTransform = new openfl_geom_ColorTransform();
				}
				this._borderColorTransform.alphaMultiplier = (this.borderColor >> 24 & 255) / 255;
				this._borderPixels.colorTransform(this._borderPixels.rect,this._borderColorTransform);
				this.graphic.bitmap.draw(this._borderPixels);
			}
			this.applyFormats(this._formatAdjusted,false);
			this.drawTextFieldTo(this.graphic.bitmap);
		}
		this._regen = false;
		this.set_frame(this.frame);
	}
	,drawTextFieldTo: function(graphic) {
		graphic.draw(this.textField,this._matrix);
	}
	,draw: function() {
		this.regenGraphic();
		flixel_FlxSprite.prototype.draw.call(this);
	}
	,calcFrame: function(RunOnCpp) {
		if(RunOnCpp == null) {
			RunOnCpp = false;
		}
		if(this.textField == null) {
			return;
		}
		if(flixel_FlxG.renderTile && !RunOnCpp) {
			return;
		}
		this.regenGraphic();
		flixel_FlxSprite.prototype.calcFrame.call(this,RunOnCpp);
	}
	,applyBorderStyle: function() {
		var iterations = this.borderSize * this.borderQuality | 0;
		if(iterations <= 0) {
			iterations = 1;
		}
		var delta = this.borderSize / iterations;
		switch(this.borderStyle._hx_index) {
		case 0:
			break;
		case 1:
			this.applyFormats(this._formatAdjusted,true);
			var _g = 0;
			var _g1 = iterations;
			while(_g < _g1) {
				var i = _g++;
				var graphic = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(delta,delta);
				this.drawTextFieldTo(graphic);
			}
			this._matrix.translate(-this.shadowOffset.x * this.borderSize,-this.shadowOffset.y * this.borderSize);
			break;
		case 2:
			this.applyFormats(this._formatAdjusted,true);
			var curDelta = delta;
			var _g = 0;
			var _g1 = iterations;
			while(_g < _g1) {
				var i = _g++;
				var graphic = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(-curDelta,-curDelta);
				this.drawTextFieldTo(graphic);
				var graphic1 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(curDelta,0);
				this.drawTextFieldTo(graphic1);
				var graphic2 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(curDelta,0);
				this.drawTextFieldTo(graphic2);
				var graphic3 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(0,curDelta);
				this.drawTextFieldTo(graphic3);
				var graphic4 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(0,curDelta);
				this.drawTextFieldTo(graphic4);
				var graphic5 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(-curDelta,0);
				this.drawTextFieldTo(graphic5);
				var graphic6 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(-curDelta,0);
				this.drawTextFieldTo(graphic6);
				var graphic7 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(0,-curDelta);
				this.drawTextFieldTo(graphic7);
				this._matrix.translate(curDelta,0);
				curDelta += delta;
			}
			break;
		case 3:
			this.applyFormats(this._formatAdjusted,true);
			var curDelta = delta;
			var _g = 0;
			var _g1 = iterations;
			while(_g < _g1) {
				var i = _g++;
				var graphic = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(-curDelta,-curDelta);
				this.drawTextFieldTo(graphic);
				var graphic1 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(curDelta * 2,0);
				this.drawTextFieldTo(graphic1);
				var graphic2 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(0,curDelta * 2);
				this.drawTextFieldTo(graphic2);
				var graphic3 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(-curDelta * 2,0);
				this.drawTextFieldTo(graphic3);
				this._matrix.translate(curDelta,-curDelta);
				curDelta += delta;
			}
			break;
		}
	}
	,applyBorderTransparency: function() {
		if(!this._hasBorderAlpha) {
			return;
		}
		if(this._borderColorTransform == null) {
			this._borderColorTransform = new openfl_geom_ColorTransform();
		}
		this._borderColorTransform.alphaMultiplier = (this.borderColor >> 24 & 255) / 255;
		this._borderPixels.colorTransform(this._borderPixels.rect,this._borderColorTransform);
		this.graphic.bitmap.draw(this._borderPixels);
	}
	,copyTextWithOffset: function(x,y) {
		var graphic = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
		this._matrix.translate(x,y);
		this.drawTextFieldTo(graphic);
	}
	,applyFormats: function(FormatAdjusted,UseBorderColor) {
		if(UseBorderColor == null) {
			UseBorderColor = false;
		}
		this.copyTextFormat(this._defaultFormat,FormatAdjusted,false);
		FormatAdjusted.color = UseBorderColor ? this.borderColor & 16777215 : this._defaultFormat.color;
		this.textField.setTextFormat(FormatAdjusted);
		var _g = 0;
		var _g1 = this._formatRanges;
		while(_g < _g1.length) {
			var formatRange = _g1[_g];
			++_g;
			if(this.textField.get_text().length - 1 < formatRange.range.start) {
				break;
			} else {
				var textFormat = formatRange.format.format;
				this.copyTextFormat(textFormat,FormatAdjusted,false);
				FormatAdjusted.color = UseBorderColor ? formatRange.format.borderColor & 16777215 : textFormat.color;
			}
			this.textField.setTextFormat(FormatAdjusted,formatRange.range.start,Math.min(formatRange.range.end,this.textField.get_text().length) | 0);
		}
	}
	,copyTextFormat: function(from,to,withAlign) {
		if(withAlign == null) {
			withAlign = true;
		}
		to.font = from.font;
		to.bold = from.bold;
		to.italic = from.italic;
		to.size = from.size;
		to.color = from.color;
		to.leading = from.leading;
		if(withAlign) {
			to.align = from.align;
		}
	}
	,dtfCopy: function() {
		var dtf = this.textField.get_defaultTextFormat();
		return new openfl_text_TextFormat(dtf.font,dtf.size,dtf.color,dtf.bold,dtf.italic,dtf.underline,dtf.url,dtf.target,dtf.align);
	}
	,updateDefaultFormat: function() {
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
	}
	,set_frames: function(Frames) {
		flixel_FlxSprite.prototype.set_frames.call(this,Frames);
		this._regen = false;
		return Frames;
	}
	,__class__: flixel_text_FlxText
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_fieldWidth:"set_fieldWidth",get_fieldWidth:"get_fieldWidth",set_borderQuality:"set_borderQuality",set_borderSize:"set_borderSize",set_borderColor:"set_borderColor",set_borderStyle:"set_borderStyle",set_alignment:"set_alignment",get_alignment:"get_alignment",set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_italic:"set_italic",get_italic:"get_italic",set_bold:"set_bold",get_bold:"get_bold",set_systemFont:"set_systemFont",get_systemFont:"get_systemFont",get_embedded:"get_embedded",set_font:"set_font",get_font:"get_font",set_size:"set_size",get_size:"get_size",set_text:"set_text"})
});
var flixel_addons_text_FlxTypeText = function(X,Y,Width,Text1,Size,EmbeddedFont) {
	if(EmbeddedFont == null) {
		EmbeddedFont = true;
	}
	if(Size == null) {
		Size = 8;
	}
	this._typeVarPercent = 0.5;
	this._typingVariation = false;
	this._cursorTimer = 0.0;
	this._waiting = false;
	this._erasing = false;
	this._typing = false;
	this._length = 0;
	this._waitTimer = 0.0;
	this._timer = 0.0;
	this._finalText = "";
	this.skipKeys = [];
	this.finishSounds = false;
	this.useDefaultSound = false;
	this.paused = false;
	this.waitTime = 1.0;
	this.autoErase = false;
	this.prefix = "";
	this.cursorBlinkSpeed = 0.5;
	this.cursorCharacter = "|";
	this.showCursor = false;
	this.eraseDelay = 0.02;
	this.delay = 0.05;
	flixel_text_FlxText.call(this,X,Y,Width,"",Size,EmbeddedFont);
	this._finalText = Text1;
};
$hxClasses["flixel.addons.text.FlxTypeText"] = flixel_addons_text_FlxTypeText;
flixel_addons_text_FlxTypeText.__name__ = "flixel.addons.text.FlxTypeText";
flixel_addons_text_FlxTypeText.__super__ = flixel_text_FlxText;
flixel_addons_text_FlxTypeText.prototype = $extend(flixel_text_FlxText.prototype,{
	delay: null
	,eraseDelay: null
	,showCursor: null
	,cursorCharacter: null
	,cursorBlinkSpeed: null
	,prefix: null
	,autoErase: null
	,waitTime: null
	,paused: null
	,sounds: null
	,useDefaultSound: null
	,finishSounds: null
	,skipKeys: null
	,completeCallback: null
	,eraseCallback: null
	,_finalText: null
	,_timer: null
	,_waitTimer: null
	,_length: null
	,_typing: null
	,_erasing: null
	,_waiting: null
	,_cursorTimer: null
	,_typingVariation: null
	,_typeVarPercent: null
	,_sound: null
	,start: function(Delay,ForceRestart,AutoErase,SkipKeys,Callback) {
		if(AutoErase == null) {
			AutoErase = false;
		}
		if(ForceRestart == null) {
			ForceRestart = false;
		}
		if(Delay != null) {
			this.delay = Delay;
		}
		this._typing = true;
		this._erasing = false;
		this.paused = false;
		this._waiting = false;
		if(ForceRestart) {
			this.set_text("");
			this._length = 0;
		}
		this.autoErase = AutoErase;
		if(SkipKeys != null) {
			this.skipKeys = SkipKeys;
		}
		if(Callback != null) {
			this.completeCallback = Callback;
		}
		this.insertBreakLines();
		if(this.useDefaultSound) {
			this.loadDefaultSound();
		}
	}
	,applyMarkup: function(input,rules) {
		flixel_text_FlxText.prototype.applyMarkup.call(this,input,rules);
		this.resetText(this.text);
		return this;
	}
	,insertBreakLines: function() {
		var saveText = this.text;
		var last = this._finalText.length;
		var n0 = 0;
		var n1 = 0;
		while(true) {
			last = HxOverrides.substr(this._finalText,0,last).lastIndexOf(" ");
			if(last <= 0) {
				break;
			}
			this.set_text(this.prefix + this._finalText);
			n0 = this.textField.get_numLines();
			var nextText = HxOverrides.substr(this._finalText,0,last) + "\n" + HxOverrides.substr(this._finalText,last + 1,this._finalText.length);
			this.set_text(this.prefix + nextText);
			n1 = this.textField.get_numLines();
			if(n0 == n1) {
				this._finalText = nextText;
			}
		}
		this.set_text(saveText);
	}
	,erase: function(Delay,ForceRestart,SkipKeys,Callback) {
		if(ForceRestart == null) {
			ForceRestart = false;
		}
		this._erasing = true;
		this._typing = false;
		this.paused = false;
		this._waiting = false;
		if(Delay != null) {
			this.eraseDelay = Delay;
		}
		if(ForceRestart) {
			this._length = this._finalText.length;
			this.set_text(this._finalText);
		}
		if(SkipKeys != null) {
			this.skipKeys = SkipKeys;
		}
		this.eraseCallback = Callback;
		if(this.useDefaultSound) {
			this.loadDefaultSound();
		}
	}
	,resetText: function(Text1) {
		this.set_text("");
		this._finalText = Text1;
		this._typing = false;
		this._erasing = false;
		this.paused = false;
		this._waiting = false;
		this._length = 0;
	}
	,setTypingVariation: function(Amount,On) {
		if(On == null) {
			On = true;
		}
		if(Amount == null) {
			Amount = 0.5;
		}
		this._typingVariation = On;
		var lowerBound = Amount < 0 ? 0 : Amount;
		this._typeVarPercent = lowerBound > 1 ? 1 : lowerBound;
	}
	,onComplete: function() {
		this._timer = 0;
		this._typing = false;
		if(this.useDefaultSound) {
			var _this = this._sound;
			_this.cleanup(_this.autoDestroy,true);
		} else if(this.sounds != null) {
			var _g = 0;
			var _g1 = this.sounds;
			while(_g < _g1.length) {
				var sound = _g1[_g];
				++_g;
				sound.cleanup(sound.autoDestroy,true);
			}
		}
		if(this.completeCallback != null) {
			this.completeCallback();
		}
		if(this.autoErase && this.waitTime <= 0) {
			this._erasing = true;
		} else if(this.autoErase) {
			this._waitTimer = this.waitTime;
			this._waiting = true;
		}
	}
	,onErased: function() {
		this._timer = 0;
		this._erasing = false;
		if(this.eraseCallback != null) {
			this.eraseCallback();
		}
	}
	,update: function(elapsed) {
		if(this.skipKeys != null && this.skipKeys.length > 0 && flixel_FlxG.keys.checkKeyArrayState(this.skipKeys,2)) {
			this.skip();
		}
		if(this._waiting && !this.paused) {
			this._waitTimer -= elapsed;
			if(this._waitTimer <= 0) {
				this._waiting = false;
				this._erasing = true;
			}
		}
		if(!this._waiting && !this.paused) {
			if(this._length < this._finalText.length && this._typing) {
				this._timer += elapsed;
			}
			if(this._length > 0 && this._erasing) {
				this._timer += elapsed;
			}
		}
		if(this._typing || this._erasing) {
			if(this._typing && this._timer >= this.delay) {
				this._length += this._timer / this.delay | 0;
				if(this._length > this._finalText.length) {
					this._length = this._finalText.length;
				}
			}
			if(this._erasing && this._timer >= this.eraseDelay) {
				this._length -= this._timer / this.eraseDelay | 0;
				if(this._length < 0) {
					this._length = 0;
				}
			}
			if(this._typing && this._timer >= this.delay || this._erasing && this._timer >= this.eraseDelay) {
				if(this._typingVariation) {
					if(this._typing) {
						this._timer = flixel_FlxG.random.float(-this.delay * this._typeVarPercent / 2,this.delay * this._typeVarPercent / 2);
					} else {
						this._timer = flixel_FlxG.random.float(-this.eraseDelay * this._typeVarPercent / 2,this.eraseDelay * this._typeVarPercent / 2);
					}
				} else {
					this._timer %= this.delay;
				}
				if(this.sounds != null && !this.useDefaultSound) {
					if(!this.finishSounds) {
						var _g = 0;
						var _g1 = this.sounds;
						while(_g < _g1.length) {
							var sound = _g1[_g];
							++_g;
							sound.cleanup(sound.autoDestroy,true);
						}
					}
					flixel_FlxG.random.getObject_flixel_system_FlxSound(this.sounds).play(!this.finishSounds);
				} else if(this.useDefaultSound) {
					this._sound.play(!this.finishSounds);
				}
			}
		}
		flixel_addons_text_FlxTypeText.helperString = this.prefix + HxOverrides.substr(this._finalText,0,this._length);
		if(this.showCursor) {
			this._cursorTimer += elapsed;
			var isBreakLine = (this.prefix + this._finalText).charAt(flixel_addons_text_FlxTypeText.helperString.length) == "\n";
			if(this._cursorTimer > this.cursorBlinkSpeed / 2 && !isBreakLine) {
				flixel_addons_text_FlxTypeText.helperString += this.cursorCharacter.charAt(0);
			}
			if(this._cursorTimer > this.cursorBlinkSpeed) {
				this._cursorTimer = 0;
			}
		}
		if(flixel_addons_text_FlxTypeText.helperString != this.text) {
			this.set_text(flixel_addons_text_FlxTypeText.helperString);
			if(this._length >= this._finalText.length && this._typing && !this._waiting && !this._erasing) {
				this.onComplete();
			}
			if(this._length == 0 && this._erasing && !this._typing && !this._waiting) {
				this.onErased();
			}
		}
		flixel_text_FlxText.prototype.update.call(this,elapsed);
	}
	,skip: function() {
		if(this._erasing || this._waiting) {
			this._length = 0;
			this._waiting = false;
		} else if(this._typing) {
			this._length = this._finalText.length;
		}
	}
	,loadDefaultSound: function() {
		this._sound = flixel_FlxG.sound.load(new flixel_addons_text_TypeSound());
	}
	,__class__: flixel_addons_text_FlxTypeText
});
var lime_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = "lime.math.Vector2";
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f,result) {
	if(result == null) {
		result = new lime_math_Vector2();
	}
	result.x = pt2.x + f * (pt1.x - pt2.x);
	result.y = pt2.y + f * (pt1.y - pt2.y);
	return result;
};
lime_math_Vector2.polar = function(len,angle,result) {
	if(result == null) {
		result = new lime_math_Vector2();
	}
	var ya = len * Math.sin(angle);
	result.x = len * Math.cos(angle);
	result.y = ya;
	return result;
};
lime_math_Vector2.prototype = {
	x: null
	,y: null
	,add: function(v,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = v.x + this.x;
		result.y = v.y + this.y;
		return result;
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = this.x - v.x;
		result.y = this.y - v.y;
		return result;
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y;
	}
	,__class__: lime_math_Vector2
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) {
		fillColor = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	this.__drawableType = 0;
	this.transparent = transparent;
	if(width == null) {
		width = 0;
	}
	if(height == null) {
		height = 0;
	}
	if(width < 0) {
		width = 0;
	}
	if(height < 0) {
		height = 0;
	}
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	this.__textureWidth = width;
	this.__textureHeight = height;
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) {
				fillColor = 0;
			}
		} else {
			fillColor = -16777216 | fillColor & 16777215;
		}
		fillColor = fillColor << 8 | fillColor >>> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
		this.readable = true;
	}
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderable = true;
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = "openfl.display.BitmapData";
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.__textureFormat = null;
openfl_display_BitmapData.__textureInternalFormat = null;
openfl_display_BitmapData.fromBase64 = function(base64,type) {
	return null;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha) {
	return null;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(canvas == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path) {
	return null;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(image == null || image.buffer == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	if(bitmapData.image != null) {
		return bitmapData;
	} else {
		return null;
	}
};
openfl_display_BitmapData.fromTexture = function(texture) {
	if(texture == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(texture.__width,texture.__height,true,0);
	bitmapData.readable = false;
	bitmapData.__texture = texture;
	bitmapData.__textureContext = texture.__textureContext;
	bitmapData.image = null;
	return bitmapData;
};
openfl_display_BitmapData.loadFromBase64 = function(base64,type) {
	return lime_graphics_Image.loadFromBase64(base64,type).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.loadFromBytes = function(bytes,rawAlpha) {
	return lime_graphics_Image.loadFromBytes(openfl_utils_ByteArray.toBytes(bytes)).then(function(image) {
		var bitmapData = openfl_display_BitmapData.fromImage(image);
		if(rawAlpha != null) {
			bitmapData.__applyAlpha(rawAlpha);
		}
		return lime_app_Future.withValue(bitmapData);
	});
};
openfl_display_BitmapData.loadFromFile = function(path) {
	return lime_graphics_Image.loadFromFile(path).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.prototype = {
	height: null
	,image: null
	,readable: null
	,rect: null
	,transparent: null
	,width: null
	,__blendMode: null
	,__drawableType: null
	,__framebuffer: null
	,__framebufferContext: null
	,__indexBuffer: null
	,__indexBufferContext: null
	,__indexBufferData: null
	,__indexBufferGrid: null
	,__isMask: null
	,__isValid: null
	,__mask: null
	,__renderable: null
	,__renderTransform: null
	,__scrollRect: null
	,__stencilBuffer: null
	,__surface: null
	,__texture: null
	,__textureContext: null
	,__textureHeight: null
	,__textureVersion: null
	,__textureWidth: null
	,__transform: null
	,__uvRect: null
	,__vertexBuffer: null
	,__vertexBufferContext: null
	,__vertexBufferData: null
	,__vertexBufferGrid: null
	,__vertexBufferHeight: null
	,__vertexBufferScaleX: null
	,__vertexBufferScaleY: null
	,__vertexBufferWidth: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable) {
			return;
		}
		var needSecondBitmapData = filter.__needSecondBitmapData;
		var needCopyOfOriginal = filter.__preserveObject;
		var bitmapData2 = null;
		var bitmapData3 = null;
		if(needSecondBitmapData) {
			bitmapData2 = new openfl_display_BitmapData(this.width,this.height,true,0);
		} else {
			bitmapData2 = this;
		}
		if(needCopyOfOriginal) {
			bitmapData3 = new openfl_display_BitmapData(this.width,this.height,true,0);
		}
		if(filter.__preserveObject) {
			bitmapData3.copyPixels(this,this.rect,destPoint);
		}
		var lastBitmap = filter.__applyFilter(bitmapData2,this,sourceRect,destPoint);
		if(filter.__preserveObject) {
			lastBitmap.draw(bitmapData3,null,null);
		}
		if(needSecondBitmapData && lastBitmap == bitmapData2) {
			bitmapData2.image.version = this.image.version;
			this.image = bitmapData2.image;
		}
		this.image.dirty = true;
		this.image.version++;
	}
	,clone: function() {
		var bitmapData;
		if(!this.__isValid) {
			bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent,0);
		} else if(!this.readable && this.image == null) {
			bitmapData = new openfl_display_BitmapData(0,0,this.transparent,0);
			bitmapData.width = this.width;
			bitmapData.height = this.height;
			bitmapData.__textureWidth = this.__textureWidth;
			bitmapData.__textureHeight = this.__textureHeight;
			bitmapData.rect.copyFrom(this.rect);
			bitmapData.__framebuffer = this.__framebuffer;
			bitmapData.__framebufferContext = this.__framebufferContext;
			bitmapData.__texture = this.__texture;
			bitmapData.__textureContext = this.__textureContext;
			bitmapData.__isValid = true;
		} else {
			bitmapData = openfl_display_BitmapData.fromImage(this.image.clone(),this.transparent);
		}
		bitmapData.__worldTransform.copyFrom(this.__worldTransform);
		bitmapData.__renderTransform.copyFrom(this.__renderTransform);
		return bitmapData;
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.readable) {
			return;
		}
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
	}
	,compare: function(otherBitmapData) {
		if(otherBitmapData == this) {
			return 0;
		} else if(otherBitmapData == null) {
			return -1;
		} else if(this.readable == false || otherBitmapData.readable == false) {
			return -2;
		} else if(this.width != otherBitmapData.width) {
			return -3;
		} else if(this.height != otherBitmapData.height) {
			return -4;
		}
		if(this.image != null && otherBitmapData.image != null && this.image.get_format() == otherBitmapData.image.get_format()) {
			var bytes = this.image.get_data();
			var otherBytes = otherBitmapData.image.get_data();
			var equal = true;
			var _g = 0;
			var _g1 = bytes.length;
			while(_g < _g1) {
				var i = _g++;
				if(bytes[i] != otherBytes[i]) {
					equal = false;
					break;
				}
			}
			if(equal) {
				return 0;
			}
		}
		var bitmapData = null;
		var foundDifference;
		var pixel;
		var otherPixel;
		var comparePixel;
		var r;
		var g;
		var b;
		var a;
		var _g = 0;
		var _g1 = this.height;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g3 = this.width;
			while(_g2 < _g3) {
				var x = _g2++;
				foundDifference = false;
				pixel = this.getPixel32(x,y);
				otherPixel = otherBitmapData.getPixel32(x,y);
				comparePixel = 0;
				if(pixel != otherPixel) {
					r = (pixel >>> 16 & 255) - (otherPixel >>> 16 & 255);
					g = (pixel >>> 8 & 255) - (otherPixel >>> 8 & 255);
					b = (pixel & 255) - (otherPixel & 255);
					if(r < 0) {
						r *= -1;
					}
					if(g < 0) {
						g *= -1;
					}
					if(b < 0) {
						b *= -1;
					}
					if(r == 0 && g == 0 && b == 0) {
						a = (pixel >>> 24 & 255) - (otherPixel >>> 24 & 255);
						if(a != 0) {
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | 16711680 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | 65280 | comparePixel & 255 & 255;
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | 255;
							comparePixel = (a & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							foundDifference = true;
						}
					} else {
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (r & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (g & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | b & 255;
						comparePixel = -16777216 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						foundDifference = true;
					}
				}
				if(foundDifference) {
					if(bitmapData == null) {
						bitmapData = new