(function ($hx_exports, $global) { "use strict"; var $hx_script = (function (exports, global) { // Generated by Haxe 4.1.5
(function ($hx_exports, $global) { "use strict";
$hx_exports["lime"] = $hx_exports["lime"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var flixel_util_IFlxDestroyable = function() { };
$hxClasses["flixel.util.IFlxDestroyable"] = flixel_util_IFlxDestroyable;
flixel_util_IFlxDestroyable.__name__ = "flixel.util.IFlxDestroyable";
flixel_util_IFlxDestroyable.__isInterface__ = true;
flixel_util_IFlxDestroyable.prototype = {
	destroy: null
	,__class__: flixel_util_IFlxDestroyable
};
var flixel_FlxBasic = function() {
	this.flixelType = 0;
	this.exists = true;
	this.alive = true;
	this.visible = true;
	this.active = true;
	this.ID = flixel_FlxBasic.idEnumerator++;
};
$hxClasses["flixel.FlxBasic"] = flixel_FlxBasic;
flixel_FlxBasic.__name__ = "flixel.FlxBasic";
flixel_FlxBasic.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_FlxBasic.prototype = {
	ID: null
	,active: null
	,visible: null
	,alive: null
	,exists: null
	,flixelType: null
	,_cameras: null
	,destroy: function() {
		this.set_exists(false);
		this._cameras = null;
	}
	,kill: function() {
		this.set_alive(false);
		this.set_exists(false);
	}
	,revive: function() {
		this.set_alive(true);
		this.set_exists(true);
	}
	,update: function(elapsed) {
	}
	,draw: function() {
	}
	,toString: function() {
		var value = this.active;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "active";
		_this.value = value;
		var value = this.visible;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "visible";
		_this1.value = value;
		var value = this.alive;
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "alive";
		_this2.value = value;
		var value = this.exists;
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "exists";
		_this3.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3]);
	}
	,set_visible: function(Value) {
		return this.visible = Value;
	}
	,set_active: function(Value) {
		return this.active = Value;
	}
	,set_exists: function(Value) {
		return this.exists = Value;
	}
	,set_alive: function(Value) {
		return this.alive = Value;
	}
	,get_camera: function() {
		if(this._cameras == null || this._cameras.length == 0) {
			return flixel_FlxCamera._defaultCameras[0];
		} else {
			return this._cameras[0];
		}
	}
	,set_camera: function(Value) {
		if(this._cameras == null) {
			this._cameras = [Value];
		} else {
			this._cameras[0] = Value;
		}
		return Value;
	}
	,get_cameras: function() {
		if(this._cameras == null) {
			return flixel_FlxCamera._defaultCameras;
		} else {
			return this._cameras;
		}
	}
	,set_cameras: function(Value) {
		return this._cameras = Value;
	}
	,__class__: flixel_FlxBasic
	,__properties__: {set_cameras:"set_cameras",get_cameras:"get_cameras",set_camera:"set_camera",get_camera:"get_camera",set_exists:"set_exists",set_alive:"set_alive",set_visible:"set_visible",set_active:"set_active"}
};
var flixel_util_IFlxPooled = function() { };
$hxClasses["flixel.util.IFlxPooled"] = flixel_util_IFlxPooled;
flixel_util_IFlxPooled.__name__ = "flixel.util.IFlxPooled";
flixel_util_IFlxPooled.__isInterface__ = true;
flixel_util_IFlxPooled.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_util_IFlxPooled.prototype = {
	put: null
	,_inPool: null
	,__class__: flixel_util_IFlxPooled
};
var flixel_util_IFlxPool = function() { };
$hxClasses["flixel.util.IFlxPool"] = flixel_util_IFlxPool;
flixel_util_IFlxPool.__name__ = "flixel.util.IFlxPool";
flixel_util_IFlxPool.__isInterface__ = true;
flixel_util_IFlxPool.prototype = {
	preAllocate: null
	,clear: null
	,__class__: flixel_util_IFlxPool
};
var flixel_util_FlxPool_$flixel_$math_$FlxRect = function(classObj) {
	this._count = 0;
	this._pool = [];
	this._class = classObj;
};
$hxClasses["flixel.util.FlxPool_flixel_math_FlxRect"] = flixel_util_FlxPool_$flixel_$math_$FlxRect;
flixel_util_FlxPool_$flixel_$math_$FlxRect.__name__ = "flixel.util.FlxPool_flixel_math_FlxRect";
flixel_util_FlxPool_$flixel_$math_$FlxRect.__interfaces__ = [flixel_util_IFlxPool];
flixel_util_FlxPool_$flixel_$math_$FlxRect.prototype = {
	_pool: null
	,_class: null
	,_count: null
	,get: function() {
		if(this._count == 0) {
			return Type.createInstance(this._class,[]);
		}
		return this._pool[--this._count];
	}
	,put: function(obj) {
		if(obj != null) {
			var i = this._pool.indexOf(obj);
			if(i == -1 || i >= this._count) {
				obj.destroy();
				this._pool[this._count++] = obj;
			}
		}
	}
	,putUnsafe: function(obj) {
		if(obj != null) {
			obj.destroy();
			this._pool[this._count++] = obj;
		}
	}
	,preAllocate: function(numObjects) {
		while(numObjects-- > 0) this._pool[this._count++] = Type.createInstance(this._class,[]);
	}
	,clear: function() {
		this._count = 0;
		var oldPool = this._pool;
		this._pool = [];
		return oldPool;
	}
	,get_length: function() {
		return this._count;
	}
	,__class__: flixel_util_FlxPool_$flixel_$math_$FlxRect
	,__properties__: {get_length:"get_length"}
};
var flixel_math_FlxRect = function(X,Y,Width,Height) {
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._inPool = false;
	this._weak = false;
	var X1 = X;
	var Y1 = Y;
	var Width1 = Width;
	var Height1 = Height;
	if(Height1 == null) {
		Height1 = 0;
	}
	if(Width1 == null) {
		Width1 = 0;
	}
	if(Y1 == null) {
		Y1 = 0;
	}
	if(X1 == null) {
		X1 = 0;
	}
	this.x = X1;
	this.y = Y1;
	this.width = Width1;
	this.height = Height1;
};
$hxClasses["flixel.math.FlxRect"] = flixel_math_FlxRect;
flixel_math_FlxRect.__name__ = "flixel.math.FlxRect";
flixel_math_FlxRect.__interfaces__ = [flixel_util_IFlxPooled];
flixel_math_FlxRect.__properties__ = {get_pool:"get_pool"};
flixel_math_FlxRect.get = function(X,Y,Width,Height) {
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var _this = flixel_math_FlxRect._pool.get();
	var X1 = X;
	var Y1 = Y;
	var Width1 = Width;
	var Height1 = Height;
	if(Height1 == null) {
		Height1 = 0;
	}
	if(Width1 == null) {
		Width1 = 0;
	}
	if(Y1 == null) {
		Y1 = 0;
	}
	if(X1 == null) {
		X1 = 0;
	}
	_this.x = X1;
	_this.y = Y1;
	_this.width = Width1;
	_this.height = Height1;
	var rect = _this;
	rect._inPool = false;
	return rect;
};
flixel_math_FlxRect.weak = function(X,Y,Width,Height) {
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var X1 = X;
	var Y1 = Y;
	var Width1 = Width;
	var Height1 = Height;
	if(Height1 == null) {
		Height1 = 0;
	}
	if(Width1 == null) {
		Width1 = 0;
	}
	if(Y1 == null) {
		Y1 = 0;
	}
	if(X1 == null) {
		X1 = 0;
	}
	var _this = flixel_math_FlxRect._pool.get();
	var X = X1;
	var Y = Y1;
	var Width = Width1;
	var Height = Height1;
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	_this.x = X;
	_this.y = Y;
	_this.width = Width;
	_this.height = Height;
	var rect = _this;
	rect._inPool = false;
	var rect1 = rect;
	rect1._weak = true;
	return rect1;
};
flixel_math_FlxRect.get_pool = function() {
	return flixel_math_FlxRect._pool;
};
flixel_math_FlxRect.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,_weak: null
	,_inPool: null
	,put: function() {
		if(!this._inPool) {
			this._inPool = true;
			this._weak = false;
			flixel_math_FlxRect._pool.putUnsafe(this);
		}
	}
	,putWeak: function() {
		if(this._weak) {
			if(!this._inPool) {
				this._inPool = true;
				this._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(this);
			}
		}
	}
	,setSize: function(Width,Height) {
		this.width = Width;
		this.height = Height;
		return this;
	}
	,setPosition: function(x,y) {
		this.x = x;
		this.y = y;
		return this;
	}
	,set: function(X,Y,Width,Height) {
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.x = X;
		this.y = Y;
		this.width = Width;
		this.height = Height;
		return this;
	}
	,copyFrom: function(Rect) {
		this.x = Rect.x;
		this.y = Rect.y;
		this.width = Rect.width;
		this.height = Rect.height;
		if(Rect._weak) {
			if(!Rect._inPool) {
				Rect._inPool = true;
				Rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(Rect);
			}
		}
		return this;
	}
	,copyTo: function(Rect) {
		Rect.x = this.x;
		Rect.y = this.y;
		Rect.width = this.width;
		Rect.height = this.height;
		if(Rect._weak) {
			if(!Rect._inPool) {
				Rect._inPool = true;
				Rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(Rect);
			}
		}
		return Rect;
	}
	,copyFromFlash: function(FlashRect) {
		this.x = FlashRect.x;
		this.y = FlashRect.y;
		this.width = FlashRect.width;
		this.height = FlashRect.height;
		return this;
	}
	,copyToFlash: function(FlashRect) {
		if(FlashRect == null) {
			FlashRect = new openfl_geom_Rectangle();
		}
		FlashRect.x = this.x;
		FlashRect.y = this.y;
		FlashRect.width = this.width;
		FlashRect.height = this.height;
		return FlashRect;
	}
	,overlaps: function(Rect) {
		var result = Rect.x + Rect.width > this.x && Rect.x < this.x + this.width && Rect.y + Rect.height > this.y && Rect.y < this.y + this.height;
		if(Rect._weak) {
			if(!Rect._inPool) {
				Rect._inPool = true;
				Rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(Rect);
			}
		}
		return result;
	}
	,containsPoint: function(Point) {
		var result = flixel_math_FlxMath.pointInFlxRect(Point.x,Point.y,this);
		if(Point._weak) {
			Point.put();
		}
		return result;
	}
	,union: function(Rect) {
		var minX = Math.min(this.x,Rect.x);
		var minY = Math.min(this.y,Rect.y);
		var maxX = Math.max(this.x + this.width,Rect.x + Rect.width);
		var maxY = Math.max(this.y + this.height,Rect.y + Rect.height);
		if(Rect._weak) {
			if(!Rect._inPool) {
				Rect._inPool = true;
				Rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(Rect);
			}
		}
		var X = minX;
		var Y = minY;
		var Width = maxX - minX;
		var Height = maxY - minY;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.x = X;
		this.y = Y;
		this.width = Width;
		this.height = Height;
		return this;
	}
	,floor: function() {
		this.x = Math.floor(this.x);
		this.y = Math.floor(this.y);
		this.width = Math.floor(this.width);
		this.height = Math.floor(this.height);
		return this;
	}
	,ceil: function() {
		this.x = Math.ceil(this.x);
		this.y = Math.ceil(this.y);
		this.width = Math.ceil(this.width);
		this.height = Math.ceil(this.height);
		return this;
	}
	,round: function() {
		this.x = Math.round(this.x);
		this.y = Math.round(this.y);
		this.width = Math.round(this.width);
		this.height = Math.round(this.height);
		return this;
	}
	,fromTwoPoints: function(Point1,Point2) {
		var minX = Math.min(Point1.x,Point2.x);
		var minY = Math.min(Point1.y,Point2.y);
		var maxX = Math.max(Point1.x,Point2.x);
		var maxY = Math.max(Point1.y,Point2.y);
		if(Point1._weak) {
			Point1.put();
		}
		if(Point2._weak) {
			Point2.put();
		}
		var X = minX;
		var Y = minY;
		var Width = maxX - minX;
		var Height = maxY - minY;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.x = X;
		this.y = Y;
		this.width = Width;
		this.height = Height;
		return this;
	}
	,unionWithPoint: function(Point) {
		var minX = Math.min(this.x,Point.x);
		var minY = Math.min(this.y,Point.y);
		var maxX = Math.max(this.x + this.width,Point.x);
		var maxY = Math.max(this.y + this.height,Point.y);
		if(Point._weak) {
			Point.put();
		}
		var X = minX;
		var Y = minY;
		var Width = maxX - minX;
		var Height = maxY - minY;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.x = X;
		this.y = Y;
		this.width = Width;
		this.height = Height;
		return this;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
		return this;
	}
	,destroy: function() {
	}
	,equals: function(rect) {
		var result = Math.abs(this.x - rect.x) <= 0.0000001 && Math.abs(this.y - rect.y) <= 0.0000001 && Math.abs(this.width - rect.width) <= 0.0000001 && Math.abs(this.height - rect.height) <= 0.0000001;
		if(rect._weak) {
			if(!rect._inPool) {
				rect._inPool = true;
				rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(rect);
			}
		}
		return result;
	}
	,intersection: function(rect,result) {
		if(result == null) {
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect1 = _this;
			rect1._inPool = false;
			result = rect1;
		}
		var x0 = this.x < rect.x ? rect.x : this.x;
		var x1 = this.x + this.width > rect.x + rect.width ? rect.x + rect.width : this.x + this.width;
		if(x1 <= x0) {
			if(rect._weak) {
				if(!rect._inPool) {
					rect._inPool = true;
					rect._weak = false;
					flixel_math_FlxRect._pool.putUnsafe(rect);
				}
			}
			return result;
		}
		var y0 = this.y < rect.y ? rect.y : this.y;
		var y1 = this.y + this.height > rect.y + rect.height ? rect.y + rect.height : this.y + this.height;
		if(y1 <= y0) {
			if(rect._weak) {
				if(!rect._inPool) {
					rect._inPool = true;
					rect._weak = false;
					flixel_math_FlxRect._pool.putUnsafe(rect);
				}
			}
			return result;
		}
		if(rect._weak) {
			if(!rect._inPool) {
				rect._inPool = true;
				rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(rect);
			}
		}
		var X = x0;
		var Y = y0;
		var Width = x1 - x0;
		var Height = y1 - y0;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		result.x = X;
		result.y = Y;
		result.width = Width;
		result.height = Height;
		return result;
	}
	,toString: function() {
		var value = this.x;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "x";
		_this.value = value;
		var value = this.y;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "y";
		_this1.value = value;
		var value = this.width;
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "w";
		_this2.value = value;
		var value = this.height;
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "h";
		_this3.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3]);
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(Value) {
		this.width -= Value - this.x;
		return this.x = Value;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(Value) {
		this.width = Value - this.x;
		return Value;
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(Value) {
		this.height -= Value - this.y;
		return this.y = Value;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(Value) {
		this.height = Value - this.y;
		return Value;
	}
	,get_isEmpty: function() {
		if(this.width != 0) {
			return this.height == 0;
		} else {
			return true;
		}
	}
	,__class__: flixel_math_FlxRect
	,__properties__: {get_isEmpty:"get_isEmpty",set_bottom:"set_bottom",get_bottom:"get_bottom",set_top:"set_top",get_top:"get_top",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left"}
};
var flixel_FlxObject = function(X,Y,Width,Height) {
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var _this = flixel_math_FlxRect._pool.get();
	_this.x = 0;
	_this.y = 0;
	_this.width = 0;
	_this.height = 0;
	_this._inPool = false;
	this._rect = _this;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this._point = point;
	this.path = null;
	this.collisonXDrag = true;
	this.allowCollisions = 4369;
	this.wasTouching = 0;
	this.touching = 0;
	this.health = 1;
	this.maxAngular = 10000;
	this.angularDrag = 0;
	this.angularAcceleration = 0;
	this.angularVelocity = 0;
	this.elasticity = 0;
	this.mass = 1;
	this.immovable = false;
	this.moves = true;
	this.angle = 0;
	this.pixelPerfectPosition = true;
	this.y = 0;
	this.x = 0;
	flixel_FlxBasic.call(this);
	this.set_x(X);
	this.set_y(Y);
	this.set_width(Width);
	this.set_height(Height);
	this.initVars();
};
$hxClasses["flixel.FlxObject"] = flixel_FlxObject;
flixel_FlxObject.__name__ = "flixel.FlxObject";
flixel_FlxObject.separate = function(Object1,Object2) {
	var separatedX = flixel_FlxObject.separateX(Object1,Object2);
	var separatedY = flixel_FlxObject.separateY(Object1,Object2);
	if(!separatedX) {
		return separatedY;
	} else {
		return true;
	}
};
flixel_FlxObject.updateTouchingFlags = function(Object1,Object2) {
	var touchingX = flixel_FlxObject.updateTouchingFlagsX(Object1,Object2);
	var touchingY = flixel_FlxObject.updateTouchingFlagsY(Object1,Object2);
	if(!touchingX) {
		return touchingY;
	} else {
		return true;
	}
};
flixel_FlxObject.computeOverlapX = function(Object1,Object2,checkMaxOverlap) {
	if(checkMaxOverlap == null) {
		checkMaxOverlap = true;
	}
	var overlap = 0;
	var obj1delta = Object1.x - Object1.last.x;
	var obj2delta = Object2.x - Object2.last.x;
	if(obj1delta != obj2delta) {
		var obj1deltaAbs = obj1delta > 0 ? obj1delta : -obj1delta;
		var obj2deltaAbs = obj2delta > 0 ? obj2delta : -obj2delta;
		var _this = flixel_FlxObject._firstSeparateFlxRect;
		var X = Object1.x - (obj1delta > 0 ? obj1delta : 0);
		var Y = Object1.last.y;
		var Width = Object1.get_width() + obj1deltaAbs;
		var Height = Object1.get_height();
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var obj1rect = _this;
		var _this = flixel_FlxObject._secondSeparateFlxRect;
		var X = Object2.x - (obj2delta > 0 ? obj2delta : 0);
		var Y = Object2.last.y;
		var Width = Object2.get_width() + obj2deltaAbs;
		var Height = Object2.get_height();
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var obj2rect = _this;
		if(obj1rect.x + obj1rect.width > obj2rect.x && obj1rect.x < obj2rect.x + obj2rect.width && obj1rect.y + obj1rect.height > obj2rect.y && obj1rect.y < obj2rect.y + obj2rect.height) {
			var maxOverlap = checkMaxOverlap ? obj1deltaAbs + obj2deltaAbs + flixel_FlxObject.SEPARATE_BIAS : 0;
			if(obj1delta > obj2delta) {
				overlap = Object1.x + Object1.get_width() - Object2.x;
				if(checkMaxOverlap && overlap > maxOverlap || (Object1.allowCollisions & 16) == 0 || (Object2.allowCollisions & 1) == 0) {
					overlap = 0;
				} else {
					Object1.touching |= 16;
					Object2.touching |= 1;
				}
			} else if(obj1delta < obj2delta) {
				overlap = Object1.x - Object2.get_width() - Object2.x;
				if(checkMaxOverlap && -overlap > maxOverlap || (Object1.allowCollisions & 1) == 0 || (Object2.allowCollisions & 16) == 0) {
					overlap = 0;
				} else {
					Object1.touching |= 1;
					Object2.touching |= 16;
				}
			}
		}
	}
	return overlap;
};
flixel_FlxObject.separateX = function(Object1,Object2) {
	var obj1immovable = Object1.immovable;
	var obj2immovable = Object2.immovable;
	if(obj1immovable && obj2immovable) {
		return false;
	}
	if(Object1.flixelType == 3) {
		var tilemap = Object1;
		return tilemap.overlapsWithCallback(Object2,flixel_FlxObject.separateX);
	}
	if(Object2.flixelType == 3) {
		var tilemap = Object2;
		return tilemap.overlapsWithCallback(Object1,flixel_FlxObject.separateX,true);
	}
	var overlap = flixel_FlxObject.computeOverlapX(Object1,Object2);
	if(overlap != 0) {
		var obj1v = Object1.velocity.x;
		var obj2v = Object2.velocity.x;
		if(!obj1immovable && !obj2immovable) {
			overlap *= 0.5;
			Object1.set_x(Object1.x - overlap);
			var _g = Object2;
			_g.set_x(_g.x + overlap);
			var obj1velocity = Math.sqrt(obj2v * obj2v * Object2.mass / Object1.mass) * (obj2v > 0 ? 1 : -1);
			var obj2velocity = Math.sqrt(obj1v * obj1v * Object1.mass / Object2.mass) * (obj1v > 0 ? 1 : -1);
			var average = (obj1velocity + obj2velocity) * 0.5;
			obj1velocity -= average;
			obj2velocity -= average;
			Object1.velocity.set_x(average + obj1velocity * Object1.elasticity);
			Object2.velocity.set_x(average + obj2velocity * Object2.elasticity);
		} else if(!obj1immovable) {
			Object1.set_x(Object1.x - overlap);
			Object1.velocity.set_x(obj2v - obj1v * Object1.elasticity);
		} else if(!obj2immovable) {
			var _g = Object2;
			_g.set_x(_g.x + overlap);
			Object2.velocity.set_x(obj1v - obj2v * Object2.elasticity);
		}
		return true;
	}
	return false;
};
flixel_FlxObject.updateTouchingFlagsX = function(Object1,Object2) {
	if(Object1.flixelType == 3) {
		var tilemap = Object1;
		return tilemap.overlapsWithCallback(Object2,flixel_FlxObject.updateTouchingFlagsX);
	}
	if(Object2.flixelType == 3) {
		var tilemap = Object2;
		return tilemap.overlapsWithCallback(Object1,flixel_FlxObject.updateTouchingFlagsX,true);
	}
	return flixel_FlxObject.computeOverlapX(Object1,Object2,false) != 0;
};
flixel_FlxObject.computeOverlapY = function(Object1,Object2,checkMaxOverlap) {
	if(checkMaxOverlap == null) {
		checkMaxOverlap = true;
	}
	var overlap = 0;
	var obj1delta = Object1.y - Object1.last.y;
	var obj2delta = Object2.y - Object2.last.y;
	if(obj1delta != obj2delta) {
		var obj1deltaAbs = obj1delta > 0 ? obj1delta : -obj1delta;
		var obj2deltaAbs = obj2delta > 0 ? obj2delta : -obj2delta;
		var _this = flixel_FlxObject._firstSeparateFlxRect;
		var X = Object1.x;
		var Y = Object1.y - (obj1delta > 0 ? obj1delta : 0);
		var Width = Object1.get_width();
		var Height = Object1.get_height() + obj1deltaAbs;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var obj1rect = _this;
		var _this = flixel_FlxObject._secondSeparateFlxRect;
		var X = Object2.x;
		var Y = Object2.y - (obj2delta > 0 ? obj2delta : 0);
		var Width = Object2.get_width();
		var Height = Object2.get_height() + obj2deltaAbs;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var obj2rect = _this;
		if(obj1rect.x + obj1rect.width > obj2rect.x && obj1rect.x < obj2rect.x + obj2rect.width && obj1rect.y + obj1rect.height > obj2rect.y && obj1rect.y < obj2rect.y + obj2rect.height) {
			var maxOverlap = checkMaxOverlap ? obj1deltaAbs + obj2deltaAbs + flixel_FlxObject.SEPARATE_BIAS : 0;
			if(obj1delta > obj2delta) {
				overlap = Object1.y + Object1.get_height() - Object2.y;
				if(checkMaxOverlap && overlap > maxOverlap || (Object1.allowCollisions & 4096) == 0 || (Object2.allowCollisions & 256) == 0) {
					overlap = 0;
				} else {
					Object1.touching |= 4096;
					Object2.touching |= 256;
				}
			} else if(obj1delta < obj2delta) {
				overlap = Object1.y - Object2.get_height() - Object2.y;
				if(checkMaxOverlap && -overlap > maxOverlap || (Object1.allowCollisions & 256) == 0 || (Object2.allowCollisions & 4096) == 0) {
					overlap = 0;
				} else {
					Object1.touching |= 256;
					Object2.touching |= 4096;
				}
			}
		}
	}
	return overlap;
};
flixel_FlxObject.separateY = function(Object1,Object2) {
	var obj1immovable = Object1.immovable;
	var obj2immovable = Object2.immovable;
	if(obj1immovable && obj2immovable) {
		return false;
	}
	if(Object1.flixelType == 3) {
		var tilemap = Object1;
		return tilemap.overlapsWithCallback(Object2,flixel_FlxObject.separateY);
	}
	if(Object2.flixelType == 3) {
		var tilemap = Object2;
		return tilemap.overlapsWithCallback(Object1,flixel_FlxObject.separateY,true);
	}
	var overlap = flixel_FlxObject.computeOverlapY(Object1,Object2);
	if(overlap != 0) {
		var obj1delta = Object1.y - Object1.last.y;
		var obj2delta = Object2.y - Object2.last.y;
		var obj1v = Object1.velocity.y;
		var obj2v = Object2.velocity.y;
		if(!obj1immovable && !obj2immovable) {
			overlap *= 0.5;
			Object1.set_y(Object1.y - overlap);
			var _g = Object2;
			_g.set_y(_g.y + overlap);
			var obj1velocity = Math.sqrt(obj2v * obj2v * Object2.mass / Object1.mass) * (obj2v > 0 ? 1 : -1);
			var obj2velocity = Math.sqrt(obj1v * obj1v * Object1.mass / Object2.mass) * (obj1v > 0 ? 1 : -1);
			var average = (obj1velocity + obj2velocity) * 0.5;
			obj1velocity -= average;
			obj2velocity -= average;
			Object1.velocity.set_y(average + obj1velocity * Object1.elasticity);
			Object2.velocity.set_y(average + obj2velocity * Object2.elasticity);
		} else if(!obj1immovable) {
			Object1.set_y(Object1.y - overlap);
			Object1.velocity.set_y(obj2v - obj1v * Object1.elasticity);
			if(Object1.collisonXDrag && Object2.active && Object2.moves && obj1delta > obj2delta) {
				var _g = Object1;
				_g.set_x(_g.x + (Object2.x - Object2.last.x));
			}
		} else if(!obj2immovable) {
			var _g = Object2;
			_g.set_y(_g.y + overlap);
			Object2.velocity.set_y(obj1v - obj2v * Object2.elasticity);
			if(Object2.collisonXDrag && Object1.active && Object1.moves && obj1delta < obj2delta) {
				var _g = Object2;
				_g.set_x(_g.x + (Object1.x - Object1.last.x));
			}
		}
		return true;
	}
	return false;
};
flixel_FlxObject.updateTouchingFlagsY = function(Object1,Object2) {
	if(Object1.flixelType == 3) {
		var tilemap = Object1;
		return tilemap.overlapsWithCallback(Object2,flixel_FlxObject.updateTouchingFlagsY);
	}
	if(Object2.flixelType == 3) {
		var tilemap = Object2;
		return tilemap.overlapsWithCallback(Object1,flixel_FlxObject.updateTouchingFlagsY,true);
	}
	return flixel_FlxObject.computeOverlapY(Object1,Object2,false) != 0;
};
flixel_FlxObject.__super__ = flixel_FlxBasic;
flixel_FlxObject.prototype = $extend(flixel_FlxBasic.prototype,{
	x: null
	,y: null
	,width: null
	,height: null
	,pixelPerfectRender: null
	,pixelPerfectPosition: null
	,angle: null
	,moves: null
	,immovable: null
	,scrollFactor: null
	,velocity: null
	,acceleration: null
	,drag: null
	,maxVelocity: null
	,last: null
	,mass: null
	,elasticity: null
	,angularVelocity: null
	,angularAcceleration: null
	,angularDrag: null
	,maxAngular: null
	,health: null
	,touching: null
	,wasTouching: null
	,allowCollisions: null
	,collisonXDrag: null
	,path: null
	,_point: null
	,_rect: null
	,initVars: function() {
		this.flixelType = 1;
		var X = this.x;
		var Y = this.y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.last = point;
		var X = 1;
		var Y = 1;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.scrollFactor = point;
		this.pixelPerfectPosition = flixel_FlxObject.defaultPixelPerfectPosition;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.velocity = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.acceleration = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.drag = point;
		var X = 10000;
		var Y = 10000;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.maxVelocity = point;
	}
	,initMotionVars: function() {
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.velocity = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.acceleration = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.drag = point;
		var X = 10000;
		var Y = 10000;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.maxVelocity = point;
	}
	,destroy: function() {
		flixel_FlxBasic.prototype.destroy.call(this);
		this.velocity = flixel_util_FlxDestroyUtil.put(this.velocity);
		this.acceleration = flixel_util_FlxDestroyUtil.put(this.acceleration);
		this.drag = flixel_util_FlxDestroyUtil.put(this.drag);
		this.maxVelocity = flixel_util_FlxDestroyUtil.put(this.maxVelocity);
		this.scrollFactor = flixel_util_FlxDestroyUtil.put(this.scrollFactor);
		this.last = flixel_util_FlxDestroyUtil.put(this.last);
		this._point = flixel_util_FlxDestroyUtil.put(this._point);
		this._rect = flixel_util_FlxDestroyUtil.put(this._rect);
	}
	,update: function(elapsed) {
		this.last.set(this.x,this.y);
		if(this.path != null && this.path.active) {
			this.path.update(elapsed);
		}
		if(this.moves) {
			this.updateMotion(elapsed);
		}
		this.wasTouching = this.touching;
		this.touching = 0;
	}
	,updateMotion: function(elapsed) {
		var velocityDelta = 0.5 * (flixel_math_FlxVelocity.computeVelocity(this.angularVelocity,this.angularAcceleration,this.angularDrag,this.maxAngular,elapsed) - this.angularVelocity);
		this.angularVelocity += velocityDelta;
		var _g = this;
		_g.set_angle(_g.angle + this.angularVelocity * elapsed);
		this.angularVelocity += velocityDelta;
		velocityDelta = 0.5 * (flixel_math_FlxVelocity.computeVelocity(this.velocity.x,this.acceleration.x,this.drag.x,this.maxVelocity.x,elapsed) - this.velocity.x);
		var _g = this.velocity;
		_g.set_x(_g.x + velocityDelta);
		var delta = this.velocity.x * elapsed;
		var _g = this.velocity;
		_g.set_x(_g.x + velocityDelta);
		var _g = this;
		_g.set_x(_g.x + delta);
		velocityDelta = 0.5 * (flixel_math_FlxVelocity.computeVelocity(this.velocity.y,this.acceleration.y,this.drag.y,this.maxVelocity.y,elapsed) - this.velocity.y);
		var _g = this.velocity;
		_g.set_y(_g.y + velocityDelta);
		delta = this.velocity.y * elapsed;
		var _g = this.velocity;
		_g.set_y(_g.y + velocityDelta);
		var _g = this;
		_g.set_y(_g.y + delta);
	}
	,draw: function() {
	}
	,overlaps: function(ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		var group = flixel_group_FlxTypedGroup.resolveGroup(ObjectOrGroup);
		if(group != null) {
			return flixel_group_FlxTypedGroup.overlaps($bind(this,this.overlapsCallback),group,0,0,InScreenSpace,Camera);
		}
		if(ObjectOrGroup.flixelType == 3) {
			var tilemap = ObjectOrGroup;
			return tilemap.overlaps(this,InScreenSpace,Camera);
		}
		var object = ObjectOrGroup;
		if(!InScreenSpace) {
			if(object.x + object.get_width() > this.x && object.x < this.x + this.get_width() && object.y + object.get_height() > this.y) {
				return object.y < this.y + this.get_height();
			} else {
				return false;
			}
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		var objectScreenPos = object.getScreenPosition(null,Camera);
		this.getScreenPosition(this._point,Camera);
		if(objectScreenPos.x + object.get_width() > this._point.x && objectScreenPos.x < this._point.x + this.get_width() && objectScreenPos.y + object.get_height() > this._point.y) {
			return objectScreenPos.y < this._point.y + this.get_height();
		} else {
			return false;
		}
	}
	,overlapsCallback: function(ObjectOrGroup,X,Y,InScreenSpace,Camera) {
		return this.overlaps(ObjectOrGroup,InScreenSpace,Camera);
	}
	,overlapsAt: function(X,Y,ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		var group = flixel_group_FlxTypedGroup.resolveGroup(ObjectOrGroup);
		if(group != null) {
			return flixel_group_FlxTypedGroup.overlaps($bind(this,this.overlapsAtCallback),group,X,Y,InScreenSpace,Camera);
		}
		if(ObjectOrGroup.flixelType == 3) {
			var tilemap = ObjectOrGroup;
			return tilemap.overlapsAt(tilemap.x - (X - this.x),tilemap.y - (Y - this.y),this,InScreenSpace,Camera);
		}
		var object = ObjectOrGroup;
		if(!InScreenSpace) {
			if(object.x + object.get_width() > X && object.x < X + this.get_width() && object.y + object.get_height() > Y) {
				return object.y < Y + this.get_height();
			} else {
				return false;
			}
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		var objectScreenPos = object.getScreenPosition(null,Camera);
		this.getScreenPosition(this._point,Camera);
		if(objectScreenPos.x + object.get_width() > this._point.x && objectScreenPos.x < this._point.x + this.get_width() && objectScreenPos.y + object.get_height() > this._point.y) {
			return objectScreenPos.y < this._point.y + this.get_height();
		} else {
			return false;
		}
	}
	,overlapsAtCallback: function(ObjectOrGroup,X,Y,InScreenSpace,Camera) {
		return this.overlapsAt(X,Y,ObjectOrGroup,InScreenSpace,Camera);
	}
	,overlapsPoint: function(point,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		if(!InScreenSpace) {
			if(point.x >= this.x && point.x < this.x + this.get_width() && point.y >= this.y) {
				return point.y < this.y + this.get_height();
			} else {
				return false;
			}
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		var xPos = point.x - Camera.scroll.x;
		var yPos = point.y - Camera.scroll.y;
		this.getScreenPosition(this._point,Camera);
		if(point._weak) {
			point.put();
		}
		if(xPos >= this._point.x && xPos < this._point.x + this.get_width() && yPos >= this._point.y) {
			return yPos < this._point.y + this.get_height();
		} else {
			return false;
		}
	}
	,inWorldBounds: function() {
		var tmp;
		if(this.x + this.get_width() > flixel_FlxG.worldBounds.x) {
			var _this = flixel_FlxG.worldBounds;
			tmp = this.x < _this.x + _this.width;
		} else {
			tmp = false;
		}
		if(tmp && this.y + this.get_height() > flixel_FlxG.worldBounds.y) {
			var _this = flixel_FlxG.worldBounds;
			return this.y < _this.y + _this.height;
		} else {
			return false;
		}
	}
	,getScreenPosition: function(point,Camera) {
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		point.set(this.x,this.y);
		if(this.pixelPerfectPosition) {
			point.set_x(Math.floor(point.x));
			point.set_y(Math.floor(point.y));
		}
		var X = Camera.scroll.x * this.scrollFactor.x;
		var Y = Camera.scroll.y * this.scrollFactor.y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _g = point;
		_g.set_x(_g.x - X);
		var _g = point;
		_g.set_y(_g.y - Y);
		return point;
	}
	,getPosition: function(point) {
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		return point.set(this.x,this.y);
	}
	,getMidpoint: function(point) {
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		return point.set(this.x + this.get_width() * 0.5,this.y + this.get_height() * 0.5);
	}
	,getHitbox: function(rect) {
		if(rect == null) {
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect1 = _this;
			rect1._inPool = false;
			rect = rect1;
		}
		var X = this.x;
		var Y = this.y;
		var Width = this.get_width();
		var Height = this.get_height();
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		rect.x = X;
		rect.y = Y;
		rect.width = Width;
		rect.height = Height;
		return rect;
	}
	,reset: function(X,Y) {
		this.touching = 0;
		this.wasTouching = 0;
		this.setPosition(X,Y);
		this.last.set(this.x,this.y);
		this.velocity.set();
		this.revive();
	}
	,isOnScreen: function(Camera) {
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		this.getScreenPosition(this._point,Camera);
		var point = this._point;
		var width = this.get_width();
		var height = this.get_height();
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 0;
		}
		if(point.x + width > Camera.viewOffsetX && point.x < Camera.viewOffsetWidth && point.y + height > Camera.viewOffsetY) {
			return point.y < Camera.viewOffsetHeight;
		} else {
			return false;
		}
	}
	,isPixelPerfectRender: function(Camera) {
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		if(this.pixelPerfectRender == null) {
			return Camera.pixelPerfectRender;
		} else {
			return this.pixelPerfectRender;
		}
	}
	,isTouching: function(Direction) {
		return (this.touching & Direction) > 0;
	}
	,justTouched: function(Direction) {
		if((this.touching & Direction) > 0) {
			return (this.wasTouching & Direction) <= 0;
		} else {
			return false;
		}
	}
	,hurt: function(Damage) {
		this.health -= Damage;
		if(this.health <= 0) {
			this.kill();
		}
	}
	,screenCenter: function(axes) {
		if(axes == null) {
			axes = flixel_util_FlxAxes.XY;
		}
		if(axes != flixel_util_FlxAxes.Y) {
			this.set_x(flixel_FlxG.width / 2 - this.get_width() / 2);
		}
		if(axes != flixel_util_FlxAxes.X) {
			this.set_y(flixel_FlxG.height / 2 - this.get_height() / 2);
		}
		return this;
	}
	,setPosition: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.set_x(X);
		this.set_y(Y);
	}
	,setSize: function(Width,Height) {
		this.set_width(Width);
		this.set_height(Height);
	}
	,getBoundingBox: function(camera) {
		this.getScreenPosition(this._point,camera);
		var _this = this._rect;
		var X = this._point.x;
		var Y = this._point.y;
		var Width = this.get_width();
		var Height = this.get_height();
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		this._rect = camera.transformRect(this._rect);
		if(this.isPixelPerfectRender(camera)) {
			var _this = this._rect;
			_this.x = Math.floor(_this.x);
			_this.y = Math.floor(_this.y);
			_this.width = Math.floor(_this.width);
			_this.height = Math.floor(_this.height);
		}
		return this._rect;
	}
	,toString: function() {
		var value = this.x;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "x";
		_this.value = value;
		var value = this.y;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "y";
		_this1.value = value;
		var value = this.get_width();
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "w";
		_this2.value = value;
		var value = this.get_height();
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "h";
		_this3.value = value;
		var value = this.visible;
		var _this4 = flixel_util_LabelValuePair._pool.get();
		_this4.label = "visible";
		_this4.value = value;
		var value = this.velocity;
		var _this5 = flixel_util_LabelValuePair._pool.get();
		_this5.label = "velocity";
		_this5.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3,_this4,_this5]);
	}
	,set_x: function(NewX) {
		return this.x = NewX;
	}
	,set_y: function(NewY) {
		return this.y = NewY;
	}
	,set_width: function(Width) {
		return this.width = Width;
	}
	,set_height: function(Height) {
		return this.height = Height;
	}
	,get_width: function() {
		return this.width;
	}
	,get_height: function() {
		return this.height;
	}
	,get_solid: function() {
		return (this.allowCollisions & 4369) > 0;
	}
	,set_solid: function(Solid) {
		this.set_allowCollisions(Solid ? 4369 : 0);
		return Solid;
	}
	,set_angle: function(Value) {
		return this.angle = Value;
	}
	,set_moves: function(Value) {
		return this.moves = Value;
	}
	,set_immovable: function(Value) {
		return this.immovable = Value;
	}
	,set_pixelPerfectRender: function(Value) {
		return this.pixelPerfectRender = Value;
	}
	,set_allowCollisions: function(Value) {
		return this.allowCollisions = Value;
	}
	,set_path: function(path) {
		if(this.path == path) {
			return path;
		}
		if(this.path != null) {
			this.path.object = null;
		}
		if(path != null) {
			path.object = this;
		}
		return this.path = path;
	}
	,__class__: flixel_FlxObject
	,__properties__: $extend(flixel_FlxBasic.prototype.__properties__,{set_path:"set_path",set_allowCollisions:"set_allowCollisions",set_solid:"set_solid",get_solid:"get_solid",set_immovable:"set_immovable",set_moves:"set_moves",set_angle:"set_angle",set_pixelPerfectRender:"set_pixelPerfectRender",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",set_x:"set_x"})
});
var flixel_FlxSprite = function(X,Y,SimpleGraphic) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._facingFlip = new haxe_ds_IntMap();
	this._angleChanged = true;
	this._cosAngle = 1;
	this._sinAngle = 0;
	this._facingVerticalMult = 1;
	this._facingHorizontalMult = 1;
	this.useColorTransform = false;
	this.color = 16777215;
	this.flipY = false;
	this.flipX = false;
	this.facing = 16;
	this.alpha = 1.0;
	this.bakedRotationAngle = 0;
	this.numFrames = 0;
	this.frameHeight = 0;
	this.frameWidth = 0;
	this.dirty = true;
	this.antialiasing = false;
	this.useFramePixels = true;
	flixel_FlxObject.call(this,X,Y);
	this.set_useFramePixels(flixel_FlxG.renderBlit);
	if(SimpleGraphic != null) {
		this.loadGraphic(SimpleGraphic);
	}
};
$hxClasses["flixel.FlxSprite"] = flixel_FlxSprite;
flixel_FlxSprite.__name__ = "flixel.FlxSprite";
flixel_FlxSprite.__super__ = flixel_FlxObject;
flixel_FlxSprite.prototype = $extend(flixel_FlxObject.prototype,{
	animation: null
	,framePixels: null
	,useFramePixels: null
	,antialiasing: null
	,dirty: null
	,frame: null
	,frameWidth: null
	,frameHeight: null
	,numFrames: null
	,frames: null
	,graphic: null
	,bakedRotationAngle: null
	,alpha: null
	,facing: null
	,flipX: null
	,flipY: null
	,origin: null
	,offset: null
	,scale: null
	,blend: null
	,color: null
	,colorTransform: null
	,useColorTransform: null
	,clipRect: null
	,shader: null
	,_frame: null
	,_frameGraphic: null
	,_facingHorizontalMult: null
	,_facingVerticalMult: null
	,_flashPoint: null
	,_flashRect: null
	,_flashRect2: null
	,_flashPointZero: null
	,_matrix: null
	,_halfSize: null
	,_sinAngle: null
	,_cosAngle: null
	,_angleChanged: null
	,_facingFlip: null
	,initVars: function() {
		flixel_FlxObject.prototype.initVars.call(this);
		this.animation = new flixel_animation_FlxAnimationController(this);
		this._flashPoint = new openfl_geom_Point();
		this._flashRect = new openfl_geom_Rectangle();
		this._flashRect2 = new openfl_geom_Rectangle();
		this._flashPointZero = new openfl_geom_Point();
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.offset = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.origin = point;
		var X = 1;
		var Y = 1;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.scale = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this._halfSize = point;
		this._matrix = new flixel_math_FlxMatrix();
		this.colorTransform = new openfl_geom_ColorTransform();
	}
	,destroy: function() {
		flixel_FlxObject.prototype.destroy.call(this);
		this.animation = flixel_util_FlxDestroyUtil.destroy(this.animation);
		this.offset = flixel_util_FlxDestroyUtil.put(this.offset);
		this.origin = flixel_util_FlxDestroyUtil.put(this.origin);
		this.scale = flixel_util_FlxDestroyUtil.put(this.scale);
		this._halfSize = flixel_util_FlxDestroyUtil.put(this._halfSize);
		this.framePixels = flixel_util_FlxDestroyUtil.dispose(this.framePixels);
		this._flashPoint = null;
		this._flashRect = null;
		this._flashRect2 = null;
		this._flashPointZero = null;
		this._matrix = null;
		this.colorTransform = null;
		this.set_blend(null);
		this.set_frames(null);
		this.set_graphic(null);
		this._frame = flixel_util_FlxDestroyUtil.destroy(this._frame);
		this._frameGraphic = flixel_util_FlxDestroyUtil.destroy(this._frameGraphic);
		this.shader = null;
	}
	,clone: function() {
		return new flixel_FlxSprite().loadGraphicFromSprite(this);
	}
	,loadGraphicFromSprite: function(Sprite) {
		this.set_frames(Sprite.frames);
		this.bakedRotationAngle = Sprite.bakedRotationAngle;
		if(this.bakedRotationAngle > 0) {
			this.set_width(Sprite.get_width());
			this.set_height(Sprite.get_height());
			this.centerOffsets();
		}
		this.set_antialiasing(Sprite.antialiasing);
		this.animation.copyFrom(Sprite.animation);
		this.graphicLoaded();
		this.set_clipRect(Sprite.clipRect);
		return this;
	}
	,loadGraphic: function(Graphic,Animated,Width,Height,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Animated == null) {
			Animated = false;
		}
		var graph = flixel_FlxG.bitmap.add(Graphic,Unique,Key);
		if(graph == null) {
			return this;
		}
		if(Width == 0) {
			Width = Animated ? graph.height : graph.width;
			if(Width > graph.width) {
				Width = graph.width;
			}
		}
		if(Height == 0) {
			Height = Animated ? Width : graph.height;
			if(Height > graph.height) {
				Height = graph.height;
			}
		}
		if(Animated) {
			var X = Width;
			var Y = Height;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			this.set_frames(flixel_graphics_frames_FlxTileFrames.fromGraphic(graph,point));
		} else {
			this.set_frames(graph.get_imageFrame());
		}
		return this;
	}
	,loadRotatedGraphic: function(Graphic,Rotations,Frame,AntiAliasing,AutoBuffer,Key) {
		if(AutoBuffer == null) {
			AutoBuffer = false;
		}
		if(AntiAliasing == null) {
			AntiAliasing = false;
		}
		if(Frame == null) {
			Frame = -1;
		}
		if(Rotations == null) {
			Rotations = 16;
		}
		var brushGraphic = flixel_FlxG.bitmap.add(Graphic,false,Key);
		if(brushGraphic == null) {
			return this;
		}
		var brush = brushGraphic.bitmap;
		var key = brushGraphic.key;
		if(Frame >= 0) {
			var brushSize = brush.height;
			var framesNum = brush.width / brushSize | 0;
			if(framesNum <= Frame) {
				Frame %= framesNum;
			}
			key += ":" + Frame;
			var full = brush;
			brush = new openfl_display_BitmapData(brushSize,brushSize,true,0);
			this._flashRect.setTo(Frame * brushSize,0,brushSize,brushSize);
			brush.copyPixels(full,this._flashRect,this._flashPointZero);
		}
		key += ":" + Rotations + ":" + (AutoBuffer == null ? "null" : "" + AutoBuffer);
		var tempGraph = flixel_FlxG.bitmap._cache.h[key];
		if(tempGraph == null) {
			var bitmap = flixel_util_FlxBitmapDataUtil.generateRotations(brush,Rotations,AntiAliasing,AutoBuffer);
			tempGraph = flixel_graphics_FlxGraphic.fromBitmapData(bitmap,false,key);
		}
		var max = brush.height > brush.width ? brush.height : brush.width;
		if(AutoBuffer) {
			max = max * 1.5 | 0;
		}
		var X = max;
		var Y = max;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.set_frames(flixel_graphics_frames_FlxTileFrames.fromGraphic(tempGraph,point));
		if(AutoBuffer) {
			this.set_width(brush.width);
			this.set_height(brush.height);
			this.centerOffsets();
		}
		this.bakedRotationAngle = 360 / Rotations;
		this.animation.createPrerotated();
		return this;
	}
	,loadRotatedFrame: function(Frame,Rotations,AntiAliasing,AutoBuffer) {
		if(AutoBuffer == null) {
			AutoBuffer = false;
		}
		if(AntiAliasing == null) {
			AntiAliasing = false;
		}
		if(Rotations == null) {
			Rotations = 16;
		}
		var key = Frame.parent.key;
		if(Frame.name != null) {
			key += ":" + Frame.name;
		} else {
			var _this = Frame.frame;
			var value = _this.x;
			var _this1 = flixel_util_LabelValuePair._pool.get();
			_this1.label = "x";
			_this1.value = value;
			var value = _this.y;
			var _this2 = flixel_util_LabelValuePair._pool.get();
			_this2.label = "y";
			_this2.value = value;
			var value = _this.width;
			var _this3 = flixel_util_LabelValuePair._pool.get();
			_this3.label = "w";
			_this3.value = value;
			var value = _this.height;
			var _this = flixel_util_LabelValuePair._pool.get();
			_this.label = "h";
			_this.value = value;
			key += ":" + flixel_util_FlxStringUtil.getDebugString([_this1,_this2,_this3,_this]);
		}
		var graphic = flixel_FlxG.bitmap._cache.h[key];
		if(graphic == null) {
			graphic = flixel_graphics_FlxGraphic.fromBitmapData(Frame.paint(),false,key);
		}
		return this.loadRotatedGraphic(graphic,Rotations,-1,AntiAliasing,AutoBuffer);
	}
	,makeGraphic: function(Width,Height,Color,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(Color == null) {
			Color = -1;
		}
		var graph = flixel_FlxG.bitmap.create(Width,Height,Color,Unique,Key);
		this.set_frames(graph.get_imageFrame());
		return this;
	}
	,graphicLoaded: function() {
	}
	,resetSize: function() {
		this._flashRect.x = 0;
		this._flashRect.y = 0;
		this._flashRect.width = this.frameWidth;
		this._flashRect.height = this.frameHeight;
	}
	,resetFrameSize: function() {
		if(this.frame != null) {
			this.frameWidth = this.frame.sourceSize.x | 0;
			this.frameHeight = this.frame.sourceSize.y | 0;
		}
		this._halfSize.set(0.5 * this.frameWidth,0.5 * this.frameHeight);
		this._flashRect.x = 0;
		this._flashRect.y = 0;
		this._flashRect.width = this.frameWidth;
		this._flashRect.height = this.frameHeight;
	}
	,resetSizeFromFrame: function() {
		this.set_width(this.frameWidth);
		this.set_height(this.frameHeight);
	}
	,resetFrame: function() {
		this.set_frame(this.frame);
	}
	,setGraphicSize: function(Width,Height) {
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Width <= 0 && Height <= 0) {
			return;
		}
		var newScaleX = Width / this.frameWidth;
		var newScaleY = Height / this.frameHeight;
		this.scale.set(newScaleX,newScaleY);
		if(Width <= 0) {
			this.scale.set_x(newScaleY);
		} else if(Height <= 0) {
			this.scale.set_y(newScaleX);
		}
	}
	,updateHitbox: function() {
		this.set_width(Math.abs(this.scale.x) * this.frameWidth);
		this.set_height(Math.abs(this.scale.y) * this.frameHeight);
		this.offset.set(-0.5 * (this.get_width() - this.frameWidth),-0.5 * (this.get_height() - this.frameHeight));
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
	}
	,resetHelpers: function() {
		if(this.frame != null) {
			this.frameWidth = this.frame.sourceSize.x | 0;
			this.frameHeight = this.frame.sourceSize.y | 0;
		}
		this._halfSize.set(0.5 * this.frameWidth,0.5 * this.frameHeight);
		this._flashRect.x = 0;
		this._flashRect.y = 0;
		this._flashRect.width = this.frameWidth;
		this._flashRect.height = this.frameHeight;
		this.set_width(this.frameWidth);
		this.set_height(this.frameHeight);
		this._flashRect2.x = 0;
		this._flashRect2.y = 0;
		if(this.graphic != null) {
			this._flashRect2.width = this.graphic.width;
			this._flashRect2.height = this.graphic.height;
		}
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
		if(flixel_FlxG.renderBlit) {
			this.dirty = true;
			this.updateFramePixels();
		}
	}
	,update: function(elapsed) {
		flixel_FlxObject.prototype.update.call(this,elapsed);
		this.updateAnimation(elapsed);
	}
	,updateAnimation: function(elapsed) {
		this.animation.update(elapsed);
	}
	,checkEmptyFrame: function() {
		if(this._frame == null) {
			this.loadGraphic("flixel/images/logo/default.png");
		}
	}
	,draw: function() {
		this.checkEmptyFrame();
		if(this.alpha == 0 || this._frame.type == 2) {
			return;
		}
		if(this.dirty) {
			this.calcFrame(this.useFramePixels);
		}
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(!camera.visible || !camera.exists || !this.isOnScreen(camera)) {
				continue;
			}
			this.getScreenPosition(this._point,camera).subtractPoint(this.offset);
			if(this.isSimpleRender(camera)) {
				this.drawSimple(camera);
			} else {
				this.drawComplex(camera);
			}
		}
	}
	,drawSimple: function(camera) {
		if(this.isPixelPerfectRender(camera)) {
			var _this = this._point;
			_this.set_x(Math.floor(_this.x));
			_this.set_y(Math.floor(_this.y));
		}
		var _this = this._point;
		var FlashPoint = this._flashPoint;
		if(FlashPoint == null) {
			FlashPoint = new openfl_geom_Point();
		}
		FlashPoint.x = _this.x;
		FlashPoint.y = _this.y;
		camera.copyPixels(this._frame,this.framePixels,this._flashRect,this._flashPoint,this.colorTransform,this.blend,this.antialiasing);
	}
	,drawComplex: function(camera) {
		var doFlipX = this.flipX != this._frame.flipX;
		var doFlipY = this.flipY != this._frame.flipY;
		this._frame.prepareMatrix(this._matrix,0,this.animation._curAnim != null ? doFlipX != this.animation._curAnim.flipX : doFlipX,this.animation._curAnim != null ? doFlipY != this.animation._curAnim.flipY : doFlipY);
		this._matrix.translate(-this.origin.x,-this.origin.y);
		this._matrix.scale(this.scale.x,this.scale.y);
		if(this.bakedRotationAngle <= 0) {
			if(this._angleChanged) {
				var radians = this.angle * (Math.PI / 180);
				this._sinAngle = Math.sin(radians);
				this._cosAngle = Math.cos(radians);
				this._angleChanged = false;
			}
			if(this.angle != 0) {
				var _this = this._matrix;
				var cos = this._cosAngle;
				var sin = this._sinAngle;
				var a1 = _this.a * cos - _this.b * sin;
				_this.b = _this.a * sin + _this.b * cos;
				_this.a = a1;
				var c1 = _this.c * cos - _this.d * sin;
				_this.d = _this.c * sin + _this.d * cos;
				_this.c = c1;
				var tx1 = _this.tx * cos - _this.ty * sin;
				_this.ty = _this.tx * sin + _this.ty * cos;
				_this.tx = tx1;
			}
		}
		var _this = this._point;
		var X = this.origin.x;
		var Y = this.origin.y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _g = _this;
		_g.set_x(_g.x + X);
		var _g = _this;
		_g.set_y(_g.y + Y);
		this._matrix.translate(this._point.x,this._point.y);
		if(this.isPixelPerfectRender(camera)) {
			this._matrix.tx = Math.floor(this._matrix.tx);
			this._matrix.ty = Math.floor(this._matrix.ty);
		}
		camera.drawPixels(this._frame,this.framePixels,this._matrix,this.colorTransform,this.blend,this.antialiasing,this.shader);
	}
	,stamp: function(Brush,X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		Brush.drawFrame();
		if(this.graphic == null || Brush.graphic == null) {
			throw haxe_Exception.thrown("Cannot stamp to or from a FlxSprite with no graphics.");
		}
		var bitmapData = Brush.framePixels;
		if(this.isSimpleRenderBlit()) {
			this._flashPoint.x = X + this.frame.frame.x;
			this._flashPoint.y = Y + this.frame.frame.y;
			this._flashRect2.width = bitmapData.width;
			this._flashRect2.height = bitmapData.height;
			this.graphic.bitmap.copyPixels(bitmapData,this._flashRect2,this._flashPoint,null,null,true);
			this._flashRect2.width = this.graphic.bitmap.width;
			this._flashRect2.height = this.graphic.bitmap.height;
		} else {
			this._matrix.identity();
			this._matrix.translate(-Brush.origin.x,-Brush.origin.y);
			this._matrix.scale(Brush.scale.x,Brush.scale.y);
			if(Brush.angle != 0) {
				this._matrix.rotate(Brush.angle * (Math.PI / 180));
			}
			this._matrix.translate(X + this.frame.frame.x + Brush.origin.x,Y + this.frame.frame.y + Brush.origin.y);
			var brushBlend = Brush.blend;
			this.graphic.bitmap.draw(bitmapData,this._matrix,null,brushBlend,null,Brush.antialiasing);
		}
		if(flixel_FlxG.renderBlit) {
			this.dirty = true;
			this.calcFrame();
		}
	}
	,drawFrame: function(Force) {
		if(Force == null) {
			Force = false;
		}
		if(flixel_FlxG.renderBlit) {
			if(Force || this.dirty) {
				this.dirty = true;
				this.calcFrame();
			}
		} else {
			this.dirty = true;
			this.calcFrame(true);
		}
	}
	,centerOffsets: function(AdjustPosition) {
		if(AdjustPosition == null) {
			AdjustPosition = false;
		}
		this.offset.set_x((this.frameWidth - this.get_width()) * 0.5);
		this.offset.set_y((this.frameHeight - this.get_height()) * 0.5);
		if(AdjustPosition) {
			var _g = this;
			_g.set_x(_g.x + this.offset.x);
			var _g = this;
			_g.set_y(_g.y + this.offset.y);
		}
	}
	,centerOrigin: function() {
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
	}
	,replaceColor: function(Color,NewColor,FetchPositions) {
		if(FetchPositions == null) {
			FetchPositions = false;
		}
		var positions = flixel_util_FlxBitmapDataUtil.replaceColor(this.graphic.bitmap,Color,NewColor,FetchPositions);
		if(positions != null) {
			this.dirty = true;
		}
		return positions;
	}
	,setColorTransform: function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
		if(alphaOffset == null) {
			alphaOffset = 0;
		}
		if(blueOffset == null) {
			blueOffset = 0;
		}
		if(greenOffset == null) {
			greenOffset = 0;
		}
		if(redOffset == null) {
			redOffset = 0;
		}
		if(alphaMultiplier == null) {
			alphaMultiplier = 1.0;
		}
		if(blueMultiplier == null) {
			blueMultiplier = 1.0;
		}
		if(greenMultiplier == null) {
			greenMultiplier = 1.0;
		}
		if(redMultiplier == null) {
			redMultiplier = 1.0;
		}
		var color = flixel_util_FlxColor._new();
		var Alpha = 1;
		if(Alpha == null) {
			Alpha = 1;
		}
		var Value = Math.round(redMultiplier * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(greenMultiplier * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(blueMultiplier * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		this.set_color(color & 16777215);
		this.set_alpha(alphaMultiplier);
		flixel_util_FlxColorTransformUtil.setMultipliers(this.colorTransform,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
		flixel_util_FlxColorTransformUtil.setOffsets(this.colorTransform,redOffset,greenOffset,blueOffset,alphaOffset);
		this.useColorTransform = this.alpha != 1 || this.color != 16777215 || flixel_util_FlxColorTransformUtil.hasRGBOffsets(this.colorTransform);
		this.dirty = true;
	}
	,updateColorTransform: function() {
		if(this.colorTransform == null) {
			this.colorTransform = new openfl_geom_ColorTransform();
		}
		this.useColorTransform = this.alpha != 1 || this.color != 16777215;
		if(this.useColorTransform) {
			flixel_util_FlxColorTransformUtil.setMultipliers(this.colorTransform,(this.color >> 16 & 255) / 255,(this.color >> 8 & 255) / 255,(this.color & 255) / 255,this.alpha);
		} else {
			flixel_util_FlxColorTransformUtil.setMultipliers(this.colorTransform,1,1,1,1);
		}
		this.dirty = true;
	}
	,pixelsOverlapPoint: function(point,Mask,Camera) {
		if(Mask == null) {
			Mask = 255;
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		this.getScreenPosition(this._point,Camera);
		this._point.subtractPoint(this.offset);
		this._flashPoint.x = point.x - Camera.scroll.x - this._point.x;
		this._flashPoint.y = point.y - Camera.scroll.y - this._point.y;
		if(point._weak) {
			point.put();
		}
		if(this._flashPoint.x < 0 || this._flashPoint.x > this.frameWidth || this._flashPoint.y < 0 || this._flashPoint.y > this.frameHeight) {
			return false;
		} else {
			var frameData = this.updateFramePixels();
			var pixelColor = frameData.getPixel32(this._flashPoint.x | 0,this._flashPoint.y | 0);
			return (pixelColor >> 24 & 255) * this.alpha >= Mask;
		}
	}
	,calcFrame: function(RunOnCpp) {
		if(RunOnCpp == null) {
			RunOnCpp = false;
		}
		this.checkEmptyFrame();
		if(flixel_FlxG.renderTile && !RunOnCpp) {
			return;
		}
		this.updateFramePixels();
	}
	,updateFramePixels: function() {
		if(this._frame == null || !this.dirty) {
			return this.framePixels;
		}
		if(flixel_FlxG.renderTile && this._frameGraphic != null) {
			this.dirty = false;
			return this.framePixels;
		}
		var doFlipX = this.flipX != this._frame.flipX;
		var doFlipX1 = this.animation._curAnim != null ? doFlipX != this.animation._curAnim.flipX : doFlipX;
		var doFlipY = this.flipY != this._frame.flipY;
		var doFlipY1 = this.animation._curAnim != null ? doFlipY != this.animation._curAnim.flipY : doFlipY;
		if(!doFlipX1 && !doFlipY1 && this._frame.type == 0) {
			this.framePixels = this._frame.paint(this.framePixels,this._flashPointZero,false,true);
		} else {
			this.framePixels = this._frame.paintRotatedAndFlipped(this.framePixels,this._flashPointZero,0,doFlipX1,doFlipY1,false,true);
		}
		if(this.useColorTransform) {
			this.framePixels.colorTransform(this._flashRect,this.colorTransform);
		}
		if(flixel_FlxG.renderTile && this.useFramePixels) {
			this._frameGraphic = flixel_util_FlxDestroyUtil.destroy(this._frameGraphic);
			this._frameGraphic = flixel_graphics_FlxGraphic.fromBitmapData(this.framePixels,false,null,false);
			this._frame = this._frameGraphic.get_imageFrame().get_frame().copyTo(this._frame);
		}
		this.dirty = false;
		return this.framePixels;
	}
	,getGraphicMidpoint: function(point) {
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		return point.set(this.x + this.frameWidth * 0.5,this.y + this.frameHeight * 0.5);
	}
	,isOnScreen: function(Camera) {
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		var minX = this.x - this.offset.x - Camera.scroll.x * this.scrollFactor.x;
		var minY = this.y - this.offset.y - Camera.scroll.y * this.scrollFactor.y;
		if((this.angle == 0 || this.bakedRotationAngle > 0) && this.scale.x == 1 && this.scale.y == 1) {
			this._point.set(minX,minY);
			var point = this._point;
			var width = this.frameWidth;
			var height = this.frameHeight;
			if(height == null) {
				height = 0;
			}
			if(width == null) {
				width = 0;
			}
			if(point.x + width > Camera.viewOffsetX && point.x < Camera.viewOffsetWidth && point.y + height > Camera.viewOffsetY) {
				return point.y < Camera.viewOffsetHeight;
			} else {
				return false;
			}
		}
		var radiusX = this._halfSize.x;
		var radiusY = this._halfSize.y;
		var ox = this.origin.x;
		if(ox != radiusX) {
			var x1 = Math.abs(ox);
			var x2 = Math.abs(this.frameWidth - ox);
			radiusX = Math.max(x2,x1);
		}
		var oy = this.origin.y;
		if(oy != radiusY) {
			var y1 = Math.abs(oy);
			var y2 = Math.abs(this.frameHeight - oy);
			radiusY = Math.max(y2,y1);
		}
		radiusX *= Math.abs(this.scale.x);
		radiusY *= Math.abs(this.scale.y);
		var radius = Math.max(radiusX,radiusY);
		radius *= 1.41421356237;
		minX += ox - radius;
		minY += oy - radius;
		var doubleRadius = 2 * radius;
		this._point.set(minX,minY);
		var point = this._point;
		var width = doubleRadius;
		var height = doubleRadius;
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 0;
		}
		if(point.x + width > Camera.viewOffsetX && point.x < Camera.viewOffsetWidth && point.y + height > Camera.viewOffsetY) {
			return point.y < Camera.viewOffsetHeight;
		} else {
			return false;
		}
	}
	,isSimpleRender: function(camera) {
		if(flixel_FlxG.renderTile) {
			return false;
		}
		return this.isSimpleRenderBlit(camera);
	}
	,isSimpleRenderBlit: function(camera) {
		var result = (this.angle == 0 || this.bakedRotationAngle > 0) && this.scale.x == 1 && this.scale.y == 1 && this.blend == null;
		result = result && (camera != null ? this.isPixelPerfectRender(camera) : this.pixelPerfectRender);
		return result;
	}
	,setFacingFlip: function(Direction,FlipX,FlipY) {
		this._facingFlip.h[Direction] = { x : FlipX, y : FlipY};
	}
	,setFrames: function(Frames,saveAnimations) {
		if(saveAnimations == null) {
			saveAnimations = true;
		}
		if(saveAnimations) {
			var animations = this.animation._animations;
			var reverse = false;
			var index = 0;
			var frameIndex = this.animation.frameIndex;
			var currName = null;
			if(this.animation._curAnim != null) {
				reverse = this.animation._curAnim.reversed;
				index = this.animation._curAnim.curFrame;
				currName = this.animation._curAnim.name;
			}
			this.animation._animations = null;
			this.set_frames(Frames);
			this.set_frame(this.frames.frames[frameIndex]);
			this.animation._animations = animations;
			if(currName != null) {
				this.animation.play(currName,false,reverse,index);
			}
		} else {
			this.set_frames(Frames);
		}
		return this;
	}
	,get_pixels: function() {
		if(this.graphic == null) {
			return null;
		} else {
			return this.graphic.bitmap;
		}
	}
	,set_pixels: function(Pixels) {
		var key = flixel_FlxG.bitmap.findKeyForBitmap(Pixels);
		if(key == null) {
			key = flixel_FlxG.bitmap.getUniqueKey();
			this.set_graphic(flixel_FlxG.bitmap.add(Pixels,false,key));
		} else {
			this.set_graphic(flixel_FlxG.bitmap._cache.h[key]);
		}
		this.set_frames(this.graphic.get_imageFrame());
		return Pixels;
	}
	,set_frame: function(Value) {
		this.frame = Value;
		if(this.frame != null) {
			if(this.frame != null) {
				this.frameWidth = this.frame.sourceSize.x | 0;
				this.frameHeight = this.frame.sourceSize.y | 0;
			}
			this._halfSize.set(0.5 * this.frameWidth,0.5 * this.frameHeight);
			this._flashRect.x = 0;
			this._flashRect.y = 0;
			this._flashRect.width = this.frameWidth;
			this._flashRect.height = this.frameHeight;
			this.dirty = true;
		} else if(this.frames != null && this.frames.frames != null && this.numFrames > 0) {
			this.frame = this.frames.frames[0];
			this.dirty = true;
		} else {
			return null;
		}
		if(flixel_FlxG.renderTile) {
			this._frameGraphic = flixel_util_FlxDestroyUtil.destroy(this._frameGraphic);
		}
		if(this.clipRect != null) {
			this._frame = this.frame.clipTo(this.clipRect,this._frame);
		} else {
			this._frame = this.frame.copyTo(this._frame);
		}
		return this.frame;
	}
	,set_facing: function(Direction) {
		var flip = this._facingFlip.h[Direction];
		if(flip != null) {
			this.set_flipX(flip.x);
			this.set_flipY(flip.y);
		}
		return this.facing = Direction;
	}
	,set_alpha: function(Alpha) {
		if(this.alpha == Alpha) {
			return Alpha;
		}
		var lowerBound = Alpha < 0 ? 0 : Alpha;
		this.alpha = lowerBound > 1 ? 1 : lowerBound;
		this.updateColorTransform();
		return this.alpha;
	}
	,set_color: function(Color) {
		if(this.color == Color) {
			return Color;
		}
		this.color = Color;
		this.updateColorTransform();
		return this.color;
	}
	,set_angle: function(Value) {
		var newAngle = this.angle != Value;
		var ret = flixel_FlxObject.prototype.set_angle.call(this,Value);
		if(newAngle) {
			this._angleChanged = true;
			this.animation.update(0);
		}
		return ret;
	}
	,updateTrig: function() {
		if(this._angleChanged) {
			var radians = this.angle * (Math.PI / 180);
			this._sinAngle = Math.sin(radians);
			this._cosAngle = Math.cos(radians);
			this._angleChanged = false;
		}
	}
	,set_blend: function(Value) {
		return this.blend = Value;
	}
	,set_graphic: function(Value) {
		var oldGraphic = this.graphic;
		if(this.graphic != Value && Value != null) {
			var _g = Value;
			_g.set_useCount(_g.get_useCount() + 1);
		}
		if(oldGraphic != null && oldGraphic != Value) {
			var _g = oldGraphic;
			_g.set_useCount(_g.get_useCount() - 1);
		}
		return this.graphic = Value;
	}
	,set_clipRect: function(rect) {
		if(rect != null) {
			rect.x = Math.round(rect.x);
			rect.y = Math.round(rect.y);
			rect.width = Math.round(rect.width);
			rect.height = Math.round(rect.height);
			this.clipRect = rect;
		} else {
			this.clipRect = null;
		}
		if(this.frames != null) {
			this.set_frame(this.frames.frames[this.animation.frameIndex]);
		}
		return rect;
	}
	,set_frames: function(Frames) {
		if(this.animation != null) {
			this.animation.destroyAnimations();
		}
		if(Frames != null) {
			this.set_graphic(Frames.parent);
			this.frames = Frames;
			this.set_frame(this.frames.frames[0]);
			this.numFrames = this.frames.frames.length;
			this.resetHelpers();
			this.bakedRotationAngle = 0;
			this.animation.set_frameIndex(0);
			this.graphicLoaded();
		} else {
			this.frames = null;
			this.set_frame(null);
			this.set_graphic(null);
		}
		return Frames;
	}
	,set_flipX: function(Value) {
		if(flixel_FlxG.renderTile) {
			this._facingHorizontalMult = Value ? -1 : 1;
		}
		this.dirty = this.flipX != Value || this.dirty;
		return this.flipX = Value;
	}
	,set_flipY: function(Value) {
		if(flixel_FlxG.renderTile) {
			this._facingVerticalMult = Value ? -1 : 1;
		}
		this.dirty = this.flipY != Value || this.dirty;
		return this.flipY = Value;
	}
	,set_antialiasing: function(value) {
		return this.antialiasing = value;
	}
	,set_useFramePixels: function(value) {
		if(flixel_FlxG.renderTile) {
			if(value != this.useFramePixels) {
				this.useFramePixels = value;
				this.set_frame(this.frame);
				if(value) {
					this.updateFramePixels();
				}
			}
			return value;
		} else {
			this.useFramePixels = true;
			return true;
		}
	}
	,checkFlipX: function() {
		var doFlipX = this.flipX != this._frame.flipX;
		if(this.animation._curAnim != null) {
			return doFlipX != this.animation._curAnim.flipX;
		}
		return doFlipX;
	}
	,checkFlipY: function() {
		var doFlipY = this.flipY != this._frame.flipY;
		if(this.animation._curAnim != null) {
			return doFlipY != this.animation._curAnim.flipY;
		}
		return doFlipY;
	}
	,__class__: flixel_FlxSprite
	,__properties__: $extend(flixel_FlxObject.prototype.__properties__,{set_clipRect:"set_clipRect",set_color:"set_color",set_blend:"set_blend",set_flipY:"set_flipY",set_flipX:"set_flipX",set_facing:"set_facing",set_alpha:"set_alpha",set_graphic:"set_graphic",set_frames:"set_frames",set_frame:"set_frame",set_pixels:"set_pixels",get_pixels:"get_pixels",set_antialiasing:"set_antialiasing",set_useFramePixels:"set_useFramePixels"})
});
var flixel_group_FlxTypedSpriteGroup = function(X,Y,MaxSize) {
	if(MaxSize == null) {
		MaxSize = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._skipTransformChildren = false;
	this.directAlpha = false;
	flixel_FlxSprite.call(this,X,Y);
	this.group = new flixel_group_FlxTypedGroup(MaxSize);
	this._sprites = this.group.members;
};
$hxClasses["flixel.group.FlxTypedSpriteGroup"] = flixel_group_FlxTypedSpriteGroup;
flixel_group_FlxTypedSpriteGroup.__name__ = "flixel.group.FlxTypedSpriteGroup";
flixel_group_FlxTypedSpriteGroup.__super__ = flixel_FlxSprite;
flixel_group_FlxTypedSpriteGroup.prototype = $extend(flixel_FlxSprite.prototype,{
	transformChildren_flixel_math_FlxRect: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,transformChildren_flash_display_BlendMode: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,transformChildren_flixel_FlxCamera: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,multiTransformChildren_Float: function(FunctionArray,ValueArray) {
		if(this.group == null) {
			return;
		}
		var numProps = FunctionArray.length;
		if(numProps > ValueArray.length) {
			return;
		}
		var lambda;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists) {
				var _g2 = 0;
				var _g3 = numProps;
				while(_g2 < _g3) {
					var i = _g2++;
					lambda = FunctionArray[i];
					lambda(sprite,ValueArray[i]);
				}
			}
		}
	}
	,transformChildren_flixel_math_FlxPoint: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,transformChildren_Int: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,transformChildren_Array_flixel_FlxCamera: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,transformChildren_Bool: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,transformChildren_Float: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,group: null
	,directAlpha: null
	,_skipTransformChildren: null
	,_sprites: null
	,initVars: function() {
		this.flixelType = 4;
		this.offset = new flixel_math_FlxCallbackPoint($bind(this,this.offsetCallback));
		this.origin = new flixel_math_FlxCallbackPoint($bind(this,this.originCallback));
		this.scale = new flixel_math_FlxCallbackPoint($bind(this,this.scaleCallback));
		this.scrollFactor = new flixel_math_FlxCallbackPoint($bind(this,this.scrollFactorCallback));
		this.scale.set(1,1);
		this.scrollFactor.set(1,1);
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.velocity = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.acceleration = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.drag = point;
		var X = 10000;
		var Y = 10000;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.maxVelocity = point;
	}
	,destroy: function() {
		this.offset = flixel_util_FlxDestroyUtil.destroy(this.offset);
		this.origin = flixel_util_FlxDestroyUtil.destroy(this.origin);
		this.scale = flixel_util_FlxDestroyUtil.destroy(this.scale);
		this.scrollFactor = flixel_util_FlxDestroyUtil.destroy(this.scrollFactor);
		this.group = flixel_util_FlxDestroyUtil.destroy(this.group);
		this._sprites = null;
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,clone: function() {
		var newGroup = new flixel_group_FlxTypedSpriteGroup(this.x,this.y,this.group.maxSize);
		var _g = 0;
		var _g1 = this.group.members;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				newGroup.add(sprite.clone());
			}
		}
		return newGroup;
	}
	,isOnScreen: function(Camera) {
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists && sprite.visible && sprite.isOnScreen(Camera)) {
				return true;
			}
		}
		return false;
	}
	,overlapsPoint: function(point,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		var result = false;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists && sprite.visible) {
				result = result || sprite.overlapsPoint(point,InScreenSpace,Camera);
			}
		}
		return result;
	}
	,pixelsOverlapPoint: function(point,Mask,Camera) {
		if(Mask == null) {
			Mask = 255;
		}
		var result = false;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists && sprite.visible) {
				result = result || sprite.pixelsOverlapPoint(point,Mask,Camera);
			}
		}
		return result;
	}
	,update: function(elapsed) {
		this.group.update(elapsed);
		if(this.moves) {
			this.updateMotion(elapsed);
		}
	}
	,draw: function() {
		this.group.draw();
	}
	,replaceColor: function(Color,NewColor,FetchPositions) {
		if(FetchPositions == null) {
			FetchPositions = false;
		}
		var positions = null;
		if(FetchPositions) {
			positions = [];
		}
		var spritePositions;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				spritePositions = sprite.replaceColor(Color,NewColor,FetchPositions);
				if(FetchPositions) {
					positions = positions.concat(spritePositions);
				}
			}
		}
		return positions;
	}
	,add: function(Sprite) {
		this.preAdd(Sprite);
		return this.group.add(Sprite);
	}
	,insert: function(Position,Sprite) {
		this.preAdd(Sprite);
		return this.group.insert(Position,Sprite);
	}
	,preAdd: function(Sprite) {
		var sprite = Sprite;
		var _g = sprite;
		_g.set_x(_g.x + this.x);
		var _g = sprite;
		_g.set_y(_g.y + this.y);
		var _g = sprite;
		_g.set_alpha(_g.alpha * this.alpha);
		var _this = sprite.scrollFactor;
		var point = this.scrollFactor;
		_this.set_x(point.x);
		_this.set_y(point.y);
		if(point._weak) {
			point.put();
		}
		sprite.set_cameras(this._cameras);
		if(this.clipRect != null) {
			var ClipRect = this.clipRect;
			if(ClipRect == null) {
				sprite.set_clipRect(null);
			} else {
				var X = ClipRect.x - sprite.x + this.x;
				var Y = ClipRect.y - sprite.y + this.y;
				var Width = ClipRect.width;
				var Height = ClipRect.height;
				if(Height == null) {
					Height = 0;
				}
				if(Width == null) {
					Width = 0;
				}
				if(Y == null) {
					Y = 0;
				}
				if(X == null) {
					X = 0;
				}
				var _this = flixel_math_FlxRect._pool.get();
				var X1 = X;
				var Y1 = Y;
				var Width1 = Width;
				var Height1 = Height;
				if(Height1 == null) {
					Height1 = 0;
				}
				if(Width1 == null) {
					Width1 = 0;
				}
				if(Y1 == null) {
					Y1 = 0;
				}
				if(X1 == null) {
					X1 = 0;
				}
				_this.x = X1;
				_this.y = Y1;
				_this.width = Width1;
				_this.height = Height1;
				var rect = _this;
				rect._inPool = false;
				sprite.set_clipRect(rect);
			}
		}
	}
	,recycle: function(ObjectClass,ObjectFactory,Force,Revive) {
		if(Revive == null) {
			Revive = true;
		}
		if(Force == null) {
			Force = false;
		}
		return this.group.recycle(ObjectClass,ObjectFactory,Force,Revive);
	}
	,remove: function(Sprite,Splice) {
		if(Splice == null) {
			Splice = false;
		}
		var sprite = Sprite;
		var _g = sprite;
		_g.set_x(_g.x - this.x);
		var _g = sprite;
		_g.set_y(_g.y - this.y);
		sprite.set_cameras(null);
		return this.group.remove(Sprite,Splice);
	}
	,replace: function(OldObject,NewObject) {
		return this.group.replace(OldObject,NewObject);
	}
	,sort: function(Function1,Order) {
		if(Order == null) {
			Order = -1;
		}
		var Order1 = Order;
		if(Order1 == null) {
			Order1 = -1;
		}
		var _g = Function1;
		var a1 = Order1;
		var tmp = function(a2,a3) {
			return _g(a1,a2,a3);
		};
		this.group.members.sort(tmp);
	}
	,getFirstAvailable: function(ObjectClass,Force) {
		if(Force == null) {
			Force = false;
		}
		return this.group.getFirstAvailable(ObjectClass,Force);
	}
	,getFirstNull: function() {
		return this.group.getFirstNull();
	}
	,getFirstExisting: function() {
		return this.group.getFirstExisting();
	}
	,getFirstAlive: function() {
		return this.group.getFirstAlive();
	}
	,getFirstDead: function() {
		return this.group.getFirstDead();
	}
	,countLiving: function() {
		return this.group.countLiving();
	}
	,countDead: function() {
		return this.group.countDead();
	}
	,getRandom: function(StartIndex,Length) {
		if(Length == null) {
			Length = 0;
		}
		if(StartIndex == null) {
			StartIndex = 0;
		}
		return this.group.getRandom(StartIndex,Length);
	}
	,iterator: function(filter) {
		return new flixel_group_FlxTypedGroupIterator(this.group.members,filter);
	}
	,forEach: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		this.group.forEach(Function1,Recurse);
	}
	,forEachAlive: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		this.group.forEachAlive(Function1,Recurse);
	}
	,forEachDead: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		this.group.forEachDead(Function1,Recurse);
	}
	,forEachExists: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		this.group.forEachExists(Function1,Recurse);
	}
	,forEachOfType: function(ObjectClass,Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		this.group.forEachOfType(ObjectClass,Function1,Recurse);
	}
	,clear: function() {
		this.group.clear();
	}
	,kill: function() {
		flixel_FlxSprite.prototype.kill.call(this);
		this.group.kill();
	}
	,revive: function() {
		flixel_FlxSprite.prototype.revive.call(this);
		this.group.revive();
	}
	,reset: function(X,Y) {
		this.revive();
		this.setPosition(X,Y);
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				sprite.reset(X,Y);
			}
		}
	}
	,setPosition: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var dx = X - this.x;
		var dy = Y - this.y;
		this.multiTransformChildren_Float([$bind(this,this.xTransform),$bind(this,this.yTransform)],[dx,dy]);
		this._skipTransformChildren = true;
		this.set_x(X);
		this.set_y(Y);
		this._skipTransformChildren = false;
	}
	,set_camera: function(Value) {
		if(this.get_camera() != Value) {
			this.transformChildren_flixel_FlxCamera($bind(this,this.cameraTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_camera.call(this,Value);
	}
	,set_cameras: function(Value) {
		if(this.get_cameras() != Value) {
			this.transformChildren_Array_flixel_FlxCamera($bind(this,this.camerasTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_cameras.call(this,Value);
	}
	,set_exists: function(Value) {
		if(this.exists != Value) {
			this.transformChildren_Bool($bind(this,this.existsTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_exists.call(this,Value);
	}
	,set_visible: function(Value) {
		if(this.exists && this.visible != Value) {
			this.transformChildren_Bool($bind(this,this.visibleTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_visible.call(this,Value);
	}
	,set_active: function(Value) {
		if(this.exists && this.active != Value) {
			this.transformChildren_Bool($bind(this,this.activeTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_active.call(this,Value);
	}
	,set_alive: function(Value) {
		if(this.alive != Value) {
			this.transformChildren_Bool($bind(this,this.aliveTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_alive.call(this,Value);
	}
	,set_x: function(Value) {
		if(!this._skipTransformChildren && this.exists && this.x != Value) {
			var offset = Value - this.x;
			this.transformChildren_Float($bind(this,this.xTransform),offset);
		}
		return this.x = Value;
	}
	,set_y: function(Value) {
		if(!this._skipTransformChildren && this.exists && this.y != Value) {
			var offset = Value - this.y;
			this.transformChildren_Float($bind(this,this.yTransform),offset);
		}
		return this.y = Value;
	}
	,set_angle: function(Value) {
		if(this.exists && this.angle != Value) {
			var offset = Value - this.angle;
			this.transformChildren_Float($bind(this,this.angleTransform),offset);
		}
		return this.angle = Value;
	}
	,set_alpha: function(Value) {
		var lowerBound = Value < 0 ? 0 : Value;
		Value = lowerBound > 1 ? 1 : lowerBound;
		if(this.exists && this.alpha != Value) {
			var factor = this.alpha > 0 ? Value / this.alpha : 0;
			if(!this.directAlpha && this.alpha != 0) {
				this.transformChildren_Float($bind(this,this.alphaTransform),factor);
			} else {
				this.transformChildren_Float($bind(this,this.directAlphaTransform),Value);
			}
		}
		return this.alpha = Value;
	}
	,set_facing: function(Value) {
		if(this.exists && this.facing != Value) {
			this.transformChildren_Int($bind(this,this.facingTransform),Value);
		}
		return this.facing = Value;
	}
	,set_flipX: function(Value) {
		if(this.exists && this.flipX != Value) {
			this.transformChildren_Bool($bind(this,this.flipXTransform),Value);
		}
		return this.flipX = Value;
	}
	,set_flipY: function(Value) {
		if(this.exists && this.flipY != Value) {
			this.transformChildren_Bool($bind(this,this.flipYTransform),Value);
		}
		return this.flipY = Value;
	}
	,set_moves: function(Value) {
		if(this.exists && this.moves != Value) {
			this.transformChildren_Bool($bind(this,this.movesTransform),Value);
		}
		return this.moves = Value;
	}
	,set_immovable: function(Value) {
		if(this.exists && this.immovable != Value) {
			this.transformChildren_Bool($bind(this,this.immovableTransform),Value);
		}
		return this.immovable = Value;
	}
	,set_solid: function(Value) {
		if(this.exists && (this.allowCollisions & 4369) > 0 != Value) {
			this.transformChildren_Bool($bind(this,this.solidTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_solid.call(this,Value);
	}
	,set_color: function(Value) {
		if(this.exists && this.color != Value) {
			this.transformChildren_Int($bind(this,this.gColorTransform),Value);
		}
		return this.color = Value;
	}
	,set_blend: function(Value) {
		if(this.exists && this.blend != Value) {
			this.transformChildren_flash_display_BlendMode($bind(this,this.blendTransform),Value);
		}
		return this.blend = Value;
	}
	,set_clipRect: function(rect) {
		if(this.exists) {
			this.transformChildren_flixel_math_FlxRect($bind(this,this.clipRectTransform),rect);
		}
		return flixel_FlxSprite.prototype.set_clipRect.call(this,rect);
	}
	,set_pixelPerfectRender: function(Value) {
		if(this.exists && this.pixelPerfectRender != Value) {
			this.transformChildren_Bool($bind(this,this.pixelPerfectTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_pixelPerfectRender.call(this,Value);
	}
	,set_width: function(Value) {
		return Value;
	}
	,get_width: function() {
		if(this.group.length == 0) {
			return 0;
		}
		var minX = Infinity;
		var maxX = -Infinity;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var member = _g1[_g];
			++_g;
			if(member == null) {
				continue;
			}
			var minMemberX = member.x;
			var maxMemberX = minMemberX + member.get_width();
			if(maxMemberX > maxX) {
				maxX = maxMemberX;
			}
			if(minMemberX < minX) {
				minX = minMemberX;
			}
		}
		return maxX - minX;
	}
	,set_height: function(Value) {
		return Value;
	}
	,get_height: function() {
		if(this.group.length == 0) {
			return 0;
		}
		var minY = Infinity;
		var maxY = -Infinity;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var member = _g1[_g];
			++_g;
			if(member == null) {
				continue;
			}
			var minMemberY = member.y;
			var maxMemberY = minMemberY + member.get_height();
			if(maxMemberY > maxY) {
				maxY = maxMemberY;
			}
			if(minMemberY < minY) {
				minY = minMemberY;
			}
		}
		return maxY - minY;
	}
	,get_length: function() {
		return this.group.length;
	}
	,get_maxSize: function() {
		return this.group.maxSize;
	}
	,set_maxSize: function(Size) {
		return this.group.set_maxSize(Size);
	}
	,get_members: function() {
		return this.group.members;
	}
	,xTransform: function(Sprite,X) {
		var _g = Sprite;
		_g.set_x(_g.x + X);
	}
	,yTransform: function(Sprite,Y) {
		var _g = Sprite;
		_g.set_y(_g.y + Y);
	}
	,angleTransform: function(Sprite,Angle) {
		var _g = Sprite;
		_g.set_angle(_g.angle + Angle);
	}
	,alphaTransform: function(Sprite,Alpha) {
		if(Sprite.alpha != 0 || Alpha == 0) {
			var _g = Sprite;
			_g.set_alpha(_g.alpha * Alpha);
		} else {
			Sprite.set_alpha(1 / Alpha);
		}
	}
	,directAlphaTransform: function(Sprite,Alpha) {
		Sprite.set_alpha(Alpha);
	}
	,facingTransform: function(Sprite,Facing) {
		Sprite.set_facing(Facing);
	}
	,flipXTransform: function(Sprite,FlipX) {
		Sprite.set_flipX(FlipX);
	}
	,flipYTransform: function(Sprite,FlipY) {
		Sprite.set_flipY(FlipY);
	}
	,movesTransform: function(Sprite,Moves) {
		Sprite.set_moves(Moves);
	}
	,pixelPerfectTransform: function(Sprite,PixelPerfect) {
		Sprite.set_pixelPerfectRender(PixelPerfect);
	}
	,gColorTransform: function(Sprite,Color) {
		Sprite.set_color(Color);
	}
	,blendTransform: function(Sprite,Blend) {
		Sprite.set_blend(Blend);
	}
	,immovableTransform: function(Sprite,Immovable) {
		Sprite.set_immovable(Immovable);
	}
	,visibleTransform: function(Sprite,Visible) {
		Sprite.set_visible(Visible);
	}
	,activeTransform: function(Sprite,Active) {
		Sprite.set_active(Active);
	}
	,solidTransform: function(Sprite,Solid) {
		Sprite.set_solid(Solid);
	}
	,aliveTransform: function(Sprite,Alive) {
		Sprite.set_alive(Alive);
	}
	,existsTransform: function(Sprite,Exists) {
		Sprite.set_exists(Exists);
	}
	,cameraTransform: function(Sprite,Camera) {
		Sprite.set_camera(Camera);
	}
	,camerasTransform: function(Sprite,Cameras) {
		Sprite.set_cameras(Cameras);
	}
	,offsetTransform: function(Sprite,Offset) {
		var _this = Sprite.offset;
		_this.set_x(Offset.x);
		_this.set_y(Offset.y);
		if(Offset._weak) {
			Offset.put();
		}
	}
	,originTransform: function(Sprite,Origin) {
		var _this = Sprite.origin;
		_this.set_x(Origin.x);
		_this.set_y(Origin.y);
		if(Origin._weak) {
			Origin.put();
		}
	}
	,scaleTransform: function(Sprite,Scale) {
		var _this = Sprite.scale;
		_this.set_x(Scale.x);
		_this.set_y(Scale.y);
		if(Scale._weak) {
			Scale.put();
		}
	}
	,scrollFactorTransform: function(Sprite,ScrollFactor) {
		var _this = Sprite.scrollFactor;
		_this.set_x(ScrollFactor.x);
		_this.set_y(ScrollFactor.y);
		if(ScrollFactor._weak) {
			ScrollFactor.put();
		}
	}
	,clipRectTransform: function(Sprite,ClipRect) {
		if(ClipRect == null) {
			Sprite.set_clipRect(null);
		} else {
			var X = ClipRect.x - Sprite.x + this.x;
			var Y = ClipRect.y - Sprite.y + this.y;
			var Width = ClipRect.width;
			var Height = ClipRect.height;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
			var rect = _this;
			rect._inPool = false;
			Sprite.set_clipRect(rect);
		}
	}
	,offsetCallback: function(Offset) {
		this.transformChildren_flixel_math_FlxPoint($bind(this,this.offsetTransform),Offset);
	}
	,originCallback: function(Origin) {
		this.transformChildren_flixel_math_FlxPoint($bind(this,this.originTransform),Origin);
	}
	,scaleCallback: function(Scale) {
		this.transformChildren_flixel_math_FlxPoint($bind(this,this.scaleTransform),Scale);
	}
	,scrollFactorCallback: function(ScrollFactor) {
		this.transformChildren_flixel_math_FlxPoint($bind(this,this.scrollFactorTransform),ScrollFactor);
	}
	,loadGraphicFromSprite: function(Sprite) {
		return this;
	}
	,loadGraphic: function(Graphic,Animated,Width,Height,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Animated == null) {
			Animated = false;
		}
		return this;
	}
	,loadRotatedGraphic: function(Graphic,Rotations,Frame,AntiAliasing,AutoBuffer,Key) {
		if(AutoBuffer == null) {
			AutoBuffer = false;
		}
		if(AntiAliasing == null) {
			AntiAliasing = false;
		}
		if(Frame == null) {
			Frame = -1;
		}
		if(Rotations == null) {
			Rotations = 16;
		}
		return this;
	}
	,makeGraphic: function(Width,Height,Color,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(Color == null) {
			Color = -1;
		}
		return this;
	}
	,set_pixels: function(Value) {
		return Value;
	}
	,set_frame: function(Value) {
		return Value;
	}
	,get_pixels: function() {
		return null;
	}
	,calcFrame: function(RunOnCpp) {
		if(RunOnCpp == null) {
			RunOnCpp = false;
		}
	}
	,resetHelpers: function() {
	}
	,stamp: function(Brush,X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
	}
	,set_frames: function(Frames) {
		return Frames;
	}
	,updateColorTransform: function() {
	}
	,__class__: flixel_group_FlxTypedSpriteGroup
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{set_maxSize:"set_maxSize",get_maxSize:"get_maxSize",get_length:"get_length",get_members:"get_members"})
});
var Alphabet = function(x,y,text,bold,typed) {
	if(typed == null) {
		typed = false;
	}
	if(bold == null) {
		bold = false;
	}
	if(text == null) {
		text = "";
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.personTalking = "gf";
	this.isBold = false;
	this.splitWords = [];
	this.lastWasSpace = false;
	this.xPosResetted = false;
	this.yMulti = 1;
	this.widthOfWords = flixel_FlxG.width;
	this._curText = "";
	this._finalText = "";
	this.text = "";
	this.isMenuItem = false;
	this.targetY = 0;
	this.paused = false;
	this.delay = 0.05;
	flixel_group_FlxTypedSpriteGroup.call(this,x,y);
	this._finalText = text;
	this.text = text;
	this.isBold = bold;
	if(text != "") {
		if(typed) {
			this.startTypedText();
		} else {
			this.addText();
		}
	}
};
$hxClasses["Alphabet"] = Alphabet;
Alphabet.__name__ = "Alphabet";
Alphabet.__super__ = flixel_group_FlxTypedSpriteGroup;
Alphabet.prototype = $extend(flixel_group_FlxTypedSpriteGroup.prototype,{
	delay: null
	,paused: null
	,targetY: null
	,isMenuItem: null
	,text: null
	,_finalText: null
	,_curText: null
	,widthOfWords: null
	,yMulti: null
	,lastSprite: null
	,xPosResetted: null
	,lastWasSpace: null
	,splitWords: null
	,isBold: null
	,addText: function() {
		this.doSplitWords();
		var xPos = 0;
		var _g = 0;
		var _g1 = this.splitWords;
		while(_g < _g1.length) {
			var character = _g1[_g];
			++_g;
			if(character == " " || character == "-") {
				this.lastWasSpace = true;
			}
			if(AlphaCharacter.alphabet.indexOf(character.toLowerCase()) != -1) {
				if(this.lastSprite != null) {
					xPos = this.lastSprite.x + this.lastSprite.get_width();
				}
				if(this.lastWasSpace) {
					xPos += 40;
					this.lastWasSpace = false;
				}
				var letter = new AlphaCharacter(xPos,0);
				if(this.isBold) {
					letter.createBold(character);
				} else {
					letter.createLetter(character);
				}
				this.add(letter);
				this.lastSprite = letter;
			}
		}
	}
	,doSplitWords: function() {
		this.splitWords = this._finalText.split("");
	}
	,personTalking: null
	,startTypedText: function() {
		var _gthis = this;
		this._finalText = this.text;
		this.doSplitWords();
		var loopNum = 0;
		var xPos = 0;
		var curRow = 0;
		new flixel_util_FlxTimer().start(0.05,function(tmr) {
			if(_gthis._finalText.charCodeAt(loopNum) == 10) {
				_gthis.yMulti += 1;
				_gthis.xPosResetted = true;
				xPos = 0;
				curRow += 1;
			}
			if(_gthis.splitWords[loopNum] == " ") {
				_gthis.lastWasSpace = true;
			}
			var isNumber = AlphaCharacter.numbers.indexOf(_gthis.splitWords[loopNum]) != -1;
			var isSymbol = AlphaCharacter.symbols.indexOf(_gthis.splitWords[loopNum]) != -1;
			if(AlphaCharacter.alphabet.indexOf(_gthis.splitWords[loopNum].toLowerCase()) != -1 || isNumber || isSymbol) {
				if(_gthis.lastSprite != null && !_gthis.xPosResetted) {
					_gthis.lastSprite.updateHitbox();
					xPos += _gthis.lastSprite.get_width() + 3;
				} else {
					_gthis.xPosResetted = false;
				}
				if(_gthis.lastWasSpace) {
					xPos += 20;
					_gthis.lastWasSpace = false;
				}
				var letter = new AlphaCharacter(xPos,55 * _gthis.yMulti);
				letter.row = curRow;
				if(_gthis.isBold) {
					letter.createBold(_gthis.splitWords[loopNum]);
				} else {
					if(isNumber) {
						letter.createNumber(_gthis.splitWords[loopNum]);
					} else if(isSymbol) {
						letter.createSymbol(_gthis.splitWords[loopNum]);
					} else {
						letter.createLetter(_gthis.splitWords[loopNum]);
					}
					var _g = letter;
					_g.set_x(_g.x + 90);
				}
				var Chance = 40;
				if(Chance == null) {
					Chance = 50;
				}
				if(flixel_FlxG.random.float(0,100) < Chance) {
					var daSound = "GF_";
					flixel_FlxG.sound.play(Paths.sound(daSound + flixel_FlxG.random.int(1,4),null));
				}
				_gthis.add(letter);
				_gthis.lastSprite = letter;
			}
			loopNum += 1;
			tmr.time = flixel_FlxG.random.float(0.04,0.09);
		},this.splitWords.length);
	}
	,update: function(elapsed) {
		if(this.isMenuItem) {
			var scaledY = flixel_math_FlxMath.remapToRange(this.targetY,0,1,0,1.3);
			this.set_y(CoolUtil.coolLerp(this.y,scaledY * 120 + flixel_FlxG.height * 0.48,0.16));
			this.set_x(CoolUtil.coolLerp(this.x,this.targetY * 20 + 90,0.16));
		}
		flixel_group_FlxTypedSpriteGroup.prototype.update.call(this,elapsed);
	}
	,__class__: Alphabet
});
var AlphaCharacter = function(x,y) {
	this.row = 0;
	flixel_FlxSprite.call(this,x,y);
	var library = null;
	var tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "alphabet" + ".png","IMAGE",library),Paths.getPath("images/" + "alphabet" + ".xml","TEXT",library));
	this.set_frames(tex);
	this.set_antialiasing(true);
};
$hxClasses["AlphaCharacter"] = AlphaCharacter;
AlphaCharacter.__name__ = "AlphaCharacter";
AlphaCharacter.__super__ = flixel_FlxSprite;
AlphaCharacter.prototype = $extend(flixel_FlxSprite.prototype,{
	row: null
	,createBold: function(letter) {
		this.animation.addByPrefix(letter,letter.toUpperCase() + " bold",24);
		this.animation.play(letter);
		this.updateHitbox();
	}
	,createLetter: function(letter) {
		var letterCase = "lowercase";
		if(letter.toLowerCase() != letter) {
			letterCase = "capital";
		}
		this.animation.addByPrefix(letter,letter + " " + letterCase,24);
		this.animation.play(letter);
		this.updateHitbox();
		this.set_y(110 - this.get_height());
		var _g = this;
		_g.set_y(_g.y + this.row * 60);
	}
	,createNumber: function(letter) {
		this.animation.addByPrefix(letter,letter,24);
		this.animation.play(letter);
		this.updateHitbox();
	}
	,createSymbol: function(letter) {
		switch(letter) {
		case "!":
			this.animation.addByPrefix(letter,"exclamation point",24);
			this.animation.play(letter);
			break;
		case "'":
			this.animation.addByPrefix(letter,"apostraphie",24);
			this.animation.play(letter);
			var _g = this;
			_g.set_y(_g.y);
			break;
		case ".":
			this.animation.addByPrefix(letter,"period",24);
			this.animation.play(letter);
			var _g = this;
			_g.set_y(_g.y + 50);
			break;
		case "?":
			this.animation.addByPrefix(letter,"question mark",24);
			this.animation.play(letter);
			break;
		}
		this.updateHitbox();
	}
	,__class__: AlphaCharacter
});
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = "lime.app.IModule";
lime_app_IModule.__isInterface__ = true;
lime_app_IModule.prototype = {
	__registerLimeModule: null
	,__unregisterLimeModule: null
	,__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app__$Event_$Int_$Void();
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = "lime.app.Module";
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onExit: null
	,__registerLimeModule: function(application) {
	}
	,__unregisterLimeModule: function(application) {
	}
	,__class__: lime_app_Module
};
var lime__$internal_backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_media_AudioManager.init();
	this.accelerometer = lime_system_Sensor.registerSensor(lime_system_SensorType.ACCELEROMETER,0);
};
$hxClasses["lime._internal.backend.html5.HTML5Application"] = lime__$internal_backend_html5_HTML5Application;
lime__$internal_backend_html5_HTML5Application.__name__ = "lime._internal.backend.html5.HTML5Application";
lime__$internal_backend_html5_HTML5Application.prototype = {
	accelerometer: null
	,currentUpdate: null
	,deltaTime: null
	,framePeriod: null
	,gameDeviceCache: null
	,hidden: null
	,lastUpdate: null
	,nextUpdate: null
	,parent: null
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) {
			return keyCode + 32;
		}
		switch(keyCode) {
		case 12:
			return 1073741980;
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 19:
			return 1073741896;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 41:
			return 1073741943;
		case 43:
			return 1073741940;
		case 44:
			return 1073741894;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 91:
			return 1073742051;
		case 92:
			return 1073742055;
		case 93:
			return 1073742055;
		case 95:
			return 1073742106;
		case 96:
			return 1073741922;
		case 97:
			return 1073741913;
		case 98:
			return 1073741914;
		case 99:
			return 1073741915;
		case 100:
			return 1073741916;
		case 101:
			return 1073741917;
		case 102:
			return 1073741918;
		case 103:
			return 1073741919;
		case 104:
			return 1073741920;
		case 105:
			return 1073741921;
		case 106:
			return 1073741909;
		case 107:
			return 1073741911;
		case 108:
			return 1073741923;
		case 109:
			return 1073741910;
		case 110:
			return 1073741923;
		case 111:
			return 1073741908;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 127:
			return 1073741931;
		case 128:
			return 1073741932;
		case 129:
			return 1073741933;
		case 130:
			return 1073741934;
		case 131:
			return 1073741935;
		case 132:
			return 1073741936;
		case 133:
			return 1073741937;
		case 134:
			return 1073741938;
		case 135:
			return 1073741939;
		case 144:
			return 1073741907;
		case 145:
			return 1073741895;
		case 160:
			return 94;
		case 161:
			return 33;
		case 163:
			return 35;
		case 164:
			return 36;
		case 166:
			return 1073742094;
		case 167:
			return 1073742095;
		case 168:
			return 1073742097;
		case 169:
			return 41;
		case 170:
			return 42;
		case 171:
			return 96;
		case 172:
			return 1073741898;
		case 173:
			return 45;
		case 174:
			return 1073741953;
		case 175:
			return 1073741952;
		case 176:
			return 1073742082;
		case 177:
			return 1073742083;
		case 178:
			return 1073742084;
		case 179:
			return 1073742085;
		case 180:
			return 1073742089;
		case 181:
			return 1073742086;
		case 182:
			return 1073741953;
		case 183:
			return 1073741952;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 193:
			return 63;
		case 194:
			return 1073741923;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		case 223:
			return 96;
		case 224:
			return 1073742051;
		case 226:
			return 92;
		}
		return keyCode;
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("devicemotion",$bind(this,this.handleSensorEvent),false);
		
			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}
			if (!CanvasRenderingContext2D.prototype.isPointInPath) {
				CanvasRenderingContext2D.prototype.isPointInPath = function (path, x, y) {
					return false;
				};
			}

			if ('performance' in window == false) {
				window.performance = {};
			}

			if ('now' in window.performance == false) {
				var offset = Date.now();
				if (performance.timing && performance.timing.navigationStart) {
					offset = performance.timing.navigationStart
				}
				window.performance.now = function now() {
					return Date.now() - offset;
				}
			}

			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}

			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); },
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};

			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};

			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,handleApplicationEvent: function(__) {
		var _g = 0;
		var _g1 = this.parent.__windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.__backend.updateSize();
		}
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			var _g = 0;
			var _g1 = this.parent.__windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				this.parent.onUpdate.dispatch(this.deltaTime | 0);
				if($window.context != null) {
					$window.onRender.dispatch($window.context);
				}
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
			} else {
				this.nextUpdate = this.currentUpdate - this.currentUpdate % this.framePeriod + this.framePeriod;
			}
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.__window != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null ? event.keyCode : event.which);
			var modifier = (event.shiftKey ? 3 : 0) | (event.ctrlKey ? 192 : 0) | (event.altKey ? 768 : 0) | (event.metaKey ? 3072 : 0);
			if(event.type == "keydown") {
				this.parent.__window.onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyDown.canceled && event.cancelable) {
					event.preventDefault();
				}
			} else {
				this.parent.__window.onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyUp.canceled && event.cancelable) {
					event.preventDefault();
				}
			}
		}
	}
	,handleSensorEvent: function(event) {
		this.accelerometer.onUpdate.dispatch(event.accelerationIncludingGravity.x,event.accelerationIncludingGravity.y,event.accelerationIncludingGravity.z);
	}
	,handleWindowEvent: function(event) {
		if(this.parent.__window != null) {
			switch(event.type) {
			case "beforeunload":
				break;
			case "blur":
				if(!this.hidden) {
					this.parent.__window.onFocusOut.dispatch();
					this.parent.__window.onDeactivate.dispatch();
					this.hidden = true;
				}
				break;
			case "focus":
				if(this.hidden) {
					this.parent.__window.onFocusIn.dispatch();
					this.parent.__window.onActivate.dispatch();
					this.hidden = false;
				}
				break;
			case "resize":
				this.parent.__window.__backend.handleResizeEvent(event);
				break;
			case "visibilitychange":
				if(window.document.hidden) {
					if(!this.hidden) {
						this.parent.__window.onFocusOut.dispatch();
						this.parent.__window.onDeactivate.dispatch();
						this.hidden = true;
					}
				} else if(this.hidden) {
					this.parent.__window.onFocusIn.dispatch();
					this.parent.__window.onActivate.dispatch();
					this.hidden = false;
				}
				break;
			}
		}
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) {
			return;
		}
		var id;
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g = 0;
		var _g1 = devices.length;
		while(_g < _g1) {
			var i = _g++;
			id = i;
			data = devices[id];
			if(data == null) {
				continue;
			}
			if(!this.gameDeviceCache.h.hasOwnProperty(id)) {
				cache = new lime__$internal_backend_html5_GameDeviceData();
				cache.id = id;
				cache.connected = data.connected;
				var _g2 = 0;
				var _g3 = data.buttons.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g4 = 0;
				var _g5 = data.axes.length;
				while(_g4 < _g5) {
					var i2 = _g4++;
					cache.axes.push(data.axes[i2]);
				}
				if(data.mapping == "standard") {
					cache.isGamepad = true;
				}
				this.gameDeviceCache.h[id] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(id);
					if(cache.isGamepad) {
						lime_ui_Gamepad.__connect(id);
					}
				}
			}
			cache = this.gameDeviceCache.h[id];
			joystick = lime_ui_Joystick.devices.h[id];
			gamepad = lime_ui_Gamepad.devices.h[id];
			if(data.connected) {
				var button;
				var value;
				var _g6 = 0;
				var _g7 = data.buttons.length;
				while(_g6 < _g7) {
					var i3 = _g6++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(4,value);
							}
						} else if(i3 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(5,value);
							}
						} else {
							if(value > 0) {
								joystick.onButtonDown.dispatch(i3);
							} else {
								joystick.onButtonUp.dispatch(i3);
							}
							if(gamepad != null) {
								switch(i3) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) {
									gamepad.onButtonDown.dispatch(button);
								} else {
									gamepad.onButtonUp.dispatch(button);
								}
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g8 = 0;
				var _g9 = data.axes.length;
				while(_g8 < _g9) {
					var i4 = _g8++;
					if(data.axes[i4] != cache.axes[i4]) {
						joystick.onAxisMove.dispatch(i4,data.axes[i4]);
						if(gamepad != null) {
							gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						}
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(id);
				lime_ui_Gamepad.__disconnect(id);
			}
		}
	}
	,__class__: lime__$internal_backend_html5_HTML5Application
};
var lime_app_Application = function() {
	this.onCreateWindow = new lime_app__$Event_$lime_$ui_$Window_$Void();
	this.onUpdate = new lime_app__$Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) {
		lime_app_Application.current = this;
	}
	this.meta = new haxe_ds_StringMap();
	this.modules = [];
	this.__windowByID = new haxe_ds_IntMap();
	this.__windows = [];
	this.__backend = new lime__$internal_backend_html5_HTML5Application(this);
	this.__registerLimeModule(this);
	this.__preloader = new lime_utils_Preloader();
	this.__preloader.onProgress.add($bind(this,this.onPreloadProgress));
	this.__preloader.onComplete.add($bind(this,this.onPreloadComplete));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = "lime.app.Application";
lime_app_Application.current = null;
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	meta: null
	,modules: null
	,onUpdate: null
	,onCreateWindow: null
	,preloader: null
	,window: null
	,windows: null
	,__backend: null
	,__preloader: null
	,__window: null
	,__windowByID: null
	,__windows: null
	,addModule: function(module) {
		module.__registerLimeModule(this);
		this.modules.push(module);
	}
	,createWindow: function(attributes) {
		var $window = this.__createWindow(attributes);
		this.__addWindow($window);
		return $window;
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.__backend.exec();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,x,y) {
	}
	,onKeyDown: function(keyCode,modifier) {
	}
	,onKeyUp: function(keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(x,y,button) {
	}
	,onMouseMove: function(x,y) {
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
	}
	,onMouseWheel: function(deltaX,deltaY,deltaMode) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTextEdit: function(text,start,length) {
	}
	,onTextInput: function(text) {
	}
	,onTouchCancel: function(touch) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function() {
	}
	,onWindowClose: function() {
	}
	,onWindowCreate: function() {
	}
	,onWindowDeactivate: function() {
	}
	,onWindowDropFile: function(file) {
	}
	,onWindowEnter: function() {
	}
	,onWindowExpose: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowLeave: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowMinimize: function() {
	}
	,onWindowResize: function(width,height) {
	}
	,onWindowRestore: function() {
	}
	,removeModule: function(module) {
		if(module != null) {
			module.__unregisterLimeModule(this);
			HxOverrides.remove(this.modules,module);
		}
	}
	,render: function(context) {
	}
	,update: function(deltaTime) {
	}
	,__addWindow: function($window) {
		if($window != null) {
			this.__windows.push($window);
			this.__windowByID.h[$window.id] = $window;
			var _g = $bind(this,this.__onWindowClose);
			var window1 = $window;
			var tmp = function() {
				_g(window1);
			};
			$window.onClose.add(tmp,false,-10000);
			if(this.__window == null) {
				this.__window = $window;
				$window.onActivate.add($bind(this,this.onWindowActivate));
				$window.onRenderContextLost.add($bind(this,this.onRenderContextLost));
				$window.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
				$window.onDeactivate.add($bind(this,this.onWindowDeactivate));
				$window.onDropFile.add($bind(this,this.onWindowDropFile));
				$window.onEnter.add($bind(this,this.onWindowEnter));
				$window.onExpose.add($bind(this,this.onWindowExpose));
				$window.onFocusIn.add($bind(this,this.onWindowFocusIn));
				$window.onFocusOut.add($bind(this,this.onWindowFocusOut));
				$window.onFullscreen.add($bind(this,this.onWindowFullscreen));
				$window.onKeyDown.add($bind(this,this.onKeyDown));
				$window.onKeyUp.add($bind(this,this.onKeyUp));
				$window.onLeave.add($bind(this,this.onWindowLeave));
				$window.onMinimize.add($bind(this,this.onWindowMinimize));
				$window.onMouseDown.add($bind(this,this.onMouseDown));
				$window.onMouseMove.add($bind(this,this.onMouseMove));
				$window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
				$window.onMouseUp.add($bind(this,this.onMouseUp));
				$window.onMouseWheel.add($bind(this,this.onMouseWheel));
				$window.onMove.add($bind(this,this.onWindowMove));
				$window.onRender.add($bind(this,this.render));
				$window.onResize.add($bind(this,this.onWindowResize));
				$window.onRestore.add($bind(this,this.onWindowRestore));
				$window.onTextEdit.add($bind(this,this.onTextEdit));
				$window.onTextInput.add($bind(this,this.onTextInput));
				this.onWindowCreate();
			}
			this.onCreateWindow.dispatch($window);
		}
	}
	,__createWindow: function(attributes) {
		var $window = new lime_ui_Window(this,attributes);
		if($window.id == -1) {
			return null;
		}
		return $window;
	}
	,__registerLimeModule: function(application) {
		application.onUpdate.add($bind(this,this.update));
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onExit.add($bind(this,this.__onModuleExit),false,0);
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		var joystick = lime_ui_Joystick.devices.iterator();
		while(joystick.hasNext()) {
			var joystick1 = joystick.next();
			this.__onJoystickConnect(joystick1);
		}
		lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.add($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,__removeWindow: function($window) {
		if($window != null && this.__windowByID.h.hasOwnProperty($window.id)) {
			if(this.__window == $window) {
				this.__window = null;
			}
			HxOverrides.remove(this.__windows,$window);
			this.__windowByID.remove($window.id);
			$window.close();
			if(this.__windows.length == 0) {
				lime_system_System.exit(0);
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var _g = $bind(this,this.onGamepadAxisMove);
		var gamepad1 = gamepad;
		var tmp = function(axis,value) {
			_g(gamepad1,axis,value);
		};
		gamepad.onAxisMove.add(tmp);
		var _g1 = $bind(this,this.onGamepadButtonDown);
		var gamepad2 = gamepad;
		var tmp = function(button) {
			_g1(gamepad2,button);
		};
		gamepad.onButtonDown.add(tmp);
		var _g2 = $bind(this,this.onGamepadButtonUp);
		var gamepad3 = gamepad;
		var tmp = function(button) {
			_g2(gamepad3,button);
		};
		gamepad.onButtonUp.add(tmp);
		var _g3 = $bind(this,this.onGamepadDisconnect);
		var gamepad4 = gamepad;
		var tmp = function() {
			_g3(gamepad4);
		};
		gamepad.onDisconnect.add(tmp);
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		var _g = $bind(this,this.onJoystickAxisMove);
		var joystick1 = joystick;
		var tmp = function(axis,value) {
			_g(joystick1,axis,value);
		};
		joystick.onAxisMove.add(tmp);
		var _g1 = $bind(this,this.onJoystickButtonDown);
		var joystick2 = joystick;
		var tmp = function(button) {
			_g1(joystick2,button);
		};
		joystick.onButtonDown.add(tmp);
		var _g2 = $bind(this,this.onJoystickButtonUp);
		var joystick3 = joystick;
		var tmp = function(button) {
			_g2(joystick3,button);
		};
		joystick.onButtonUp.add(tmp);
		var _g3 = $bind(this,this.onJoystickDisconnect);
		var joystick4 = joystick;
		var tmp = function() {
			_g3(joystick4);
		};
		joystick.onDisconnect.add(tmp);
		var _g4 = $bind(this,this.onJoystickHatMove);
		var joystick5 = joystick;
		var tmp = function(hat,position) {
			_g4(joystick5,hat,position);
		};
		joystick.onHatMove.add(tmp);
		var _g5 = $bind(this,this.onJoystickTrackballMove);
		var joystick6 = joystick;
		var tmp = function(trackball,x,y) {
			_g5(joystick6,trackball,x,y);
		};
		joystick.onTrackballMove.add(tmp);
	}
	,__onModuleExit: function(code) {
		this.__backend.exit();
	}
	,__onWindowClose: function($window) {
		if(this.__window == $window) {
			this.onWindowClose();
		}
		this.__removeWindow($window);
	}
	,__unregisterLimeModule: function(application) {
		application.onUpdate.remove($bind(this,this.update));
		application.onExit.remove($bind(this,this.__onModuleExit));
		application.onExit.remove($bind(this,this.onModuleExit));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		lime_ui_Joystick.onConnect.remove($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.remove($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.remove($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.onTouchEnd));
		this.onModuleExit(0);
	}
	,get_preloader: function() {
		return this.__preloader;
	}
	,get_window: function() {
		return this.__window;
	}
	,get_windows: function() {
		return this.__windows;
	}
	,__class__: lime_app_Application
	,__properties__: {get_windows:"get_windows",get_window:"get_window",get_preloader:"get_preloader"}
});
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = "ApplicationMain";
ApplicationMain.main = function() {
	lime_system_System.__registerEntryPoint("Funkin",ApplicationMain.create);
};
ApplicationMain.create = function(config) {
	var app = new openfl_display_Application();
	ManifestResources.init(config);
	app.meta.h["build"] = "547";
	app.meta.h["company"] = "ninjamuffin99";
	app.meta.h["file"] = "Funkin";
	app.meta.h["name"] = "Friday Night Funkin'";
	app.meta.h["packageName"] = "com.ninjamuffin99.funkin";
	app.meta.h["version"] = "0.2.8";
	var attributes = { allowHighDPI : false, alwaysOnTop : false, borderless : false, element : null, frameRate : null, height : 720, hidden : false, maximized : false, minimized : false, parameters : { }, resizable : true, title : "Friday Night Funkin'", width : 1280, x : null, y : null};
	attributes.context = { antialiasing : 0, background : 0, colorDepth : 32, depth : true, hardware : true, stencil : true, type : null, vsync : false};
	if(app.__window == null) {
		if(config != null) {
			var _g = 0;
			var _g1 = Reflect.fields(config);
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(attributes,field)) {
					attributes[field] = Reflect.field(config,field);
				} else if(Object.prototype.hasOwnProperty.call(attributes.context,field)) {
					attributes.context[field] = Reflect.field(config,field);
				}
			}
		}
	}
	app.createWindow(attributes);
	var preloader = new openfl_display_Preloader(new flixel_system_FlxPreloader());
	app.__preloader.onProgress.add(function(loaded,total) {
		preloader.update(loaded,total);
	});
	app.__preloader.onComplete.add(function() {
		preloader.start();
	});
	var stage = app.__window.stage;
	var tmp = function() {
		ApplicationMain.start(stage);
	};
	preloader.onComplete.add(tmp);
	var _g = 0;
	var _g1 = ManifestResources.preloadLibraries;
	while(_g < _g1.length) {
		var library = _g1[_g];
		++_g;
		app.__preloader.addLibrary(library);
	}
	var _g = 0;
	var _g1 = ManifestResources.preloadLibraryNames;
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		app.__preloader.addLibraryName(name);
	}
	app.__preloader.load();
	var result = app.exec();
};
ApplicationMain.start = function(stage) {
	if(stage.__uncaughtErrorEvents.__enabled) {
		try {
			Main.main();
			stage.dispatchEvent(new openfl_events_Event("resize",false,false));
			if(stage.window.__fullscreen) {
				stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			stage.__handleError(e);
		}
	} else {
		Main.main();
		stage.dispatchEvent(new openfl_events_Event("resize",false,false));
		if(stage.window.__fullscreen) {
			stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
		}
	}
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = "openfl.events.IEventDispatcher";
openfl_events_IEventDispatcher.__isInterface__ = true;
openfl_events_IEventDispatcher.prototype = {
	addEventListener: null
	,dispatchEvent: null
	,hasEventListener: null
	,removeEventListener: null
	,willTrigger: null
	,__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = function(target) {
	if(target != null) {
		this.__targetDispatcher = target;
	}
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = "openfl.events.EventDispatcher";
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.prototype = {
	__eventMap: null
	,__iterators: null
	,__targetDispatcher: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		if(listener == null) {
			return;
		}
		if(this.__eventMap == null) {
			this.__eventMap = new haxe_ds_StringMap();
			this.__iterators = new haxe_ds_StringMap();
		}
		if(!Object.prototype.hasOwnProperty.call(this.__eventMap.h,type)) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			var iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			this.__eventMap.h[type] = list;
			this.__iterators.h[type] = [iterator];
		} else {
			var list = this.__eventMap.h[type];
			var _g = 0;
			var _g1 = list.length;
			while(_g < _g1) {
				var i = _g++;
				if(list[i].match(listener,useCapture)) {
					return;
				}
			}
			var iterators = this.__iterators.h[type];
			var _g = 0;
			while(_g < iterators.length) {
				var iterator = iterators[_g];
				++_g;
				if(iterator.active) {
					iterator.copy();
				}
			}
			this.__addListenerByPriority(list,new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) {
			event.target = this.__targetDispatcher;
		} else {
			event.target = this;
		}
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) {
			return false;
		}
		return Object.prototype.hasOwnProperty.call(this.__eventMap.h,type);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		if(this.__eventMap == null || listener == null) {
			return;
		}
		var list = this.__eventMap.h[type];
		if(list == null) {
			return;
		}
		var iterators = this.__iterators.h[type];
		var _g = 0;
		var _g1 = list.length;
		while(_g < _g1) {
			var i = _g++;
			if(list[i].match(listener,useCapture)) {
				var _g2 = 0;
				while(_g2 < iterators.length) {
					var iterator = iterators[_g2];
					++_g2;
					iterator.remove(list[i],i);
				}
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) {
			var _this = this.__eventMap;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
			var _this = this.__iterators;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
		}
		if(!haxe_ds_StringMap.valueIterator(this.__eventMap.h).hasNext()) {
			this.__eventMap = null;
			this.__iterators = null;
		}
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		var full = c.__name__;
		var short = full.split(".").pop();
		return "[object " + short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) {
			return true;
		}
		var type = event.type;
		var list = this.__eventMap.h[type];
		if(list == null) {
			return true;
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) {
				event.target = this.__targetDispatcher;
			} else {
				event.target = this;
			}
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 1;
		var iterators = this.__iterators.h[type];
		var iterator = iterators[0];
		if(iterator.active) {
			iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			iterators.push(iterator);
		}
		iterator.start();
		var listener = iterator;
		while(listener.hasNext()) {
			var listener1 = listener.next();
			if(listener1 == null) {
				continue;
			}
			if(listener1.useCapture == capture) {
				listener1.callback(event);
				if(event.__isCanceledNow) {
					break;
				}
			}
		}
		iterator.stop();
		if(iterator != iterators[0]) {
			HxOverrides.remove(iterators,iterator);
		} else {
			iterator.reset(list);
		}
		return !event.isDefaultPrevented();
	}
	,__removeAllListeners: function() {
		this.__eventMap = null;
		this.__iterators = null;
	}
	,__addListenerByPriority: function(list,listener) {
		var numElements = list.length;
		var addAtPosition = numElements;
		var _g = 0;
		var _g1 = numElements;
		while(_g < _g1) {
			var i = _g++;
			if(list[i].priority < listener.priority) {
				addAtPosition = i;
				break;
			}
		}
		list.splice(addAtPosition,0,listener);
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = "openfl.display.IBitmapDrawable";
openfl_display_IBitmapDrawable.__isInterface__ = true;
openfl_display_IBitmapDrawable.prototype = {
	__blendMode: null
	,__drawableType: null
	,__isMask: null
	,__renderable: null
	,__renderTransform: null
	,__transform: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__getBounds: null
	,__update: null
	,__updateTransforms: null
	,__mask: null
	,__scrollRect: null
	,__class__: openfl_display_IBitmapDrawable
};
var openfl_Vector = {};
openfl_Vector.__properties__ = {set_length:"set_length",get_length:"get_length",set_fixed:"set_fixed",get_fixed:"get_fixed"};
openfl_Vector.ofArray_Float = function(array) {
	var vector = openfl_Vector.toFloatVector(null);
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		vector.set(i,array[i]);
	}
	return vector;
};
openfl_Vector.ofArray_Int = function(array) {
	var vector = openfl_Vector.toIntVector(null);
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		vector.set(i,array[i]);
	}
	return vector;
};
openfl_Vector.concat = function(this1,vec) {
	return this1.concat(vec);
};
openfl_Vector.copy = function(this1) {
	return this1.copy();
};
openfl_Vector.every = function(this1,callback,thisObject) {
	var _g = 0;
	var _g1 = this1.get_length();
	while(_g < _g1) {
		var i = _g++;
		this1.__tempIndex = i;
		if(thisObject != null) {
			if(callback.apply(thisObject,[this1.get(i),i,this1]) == false) {
				break;
			}
		} else if(callback(this1.get(i),i,this1) == false) {
			break;
		}
	}
	return this1.__tempIndex == this1.get_length() - 1;
};
openfl_Vector.filter = function(this1,callback) {
	return this1.filter(callback);
};
openfl_Vector.get = function(this1,index) {
	return this1.get(index);
};
openfl_Vector.indexOf = function(this1,searchElement,fromIndex) {
	if(fromIndex == null) {
		fromIndex = 0;
	}
	return this1.indexOf(searchElement,fromIndex);
};
openfl_Vector.insertAt = function(this1,index,element) {
	this1.insertAt(index,element);
};
openfl_Vector.iterator = function(this1) {
	return this1.iterator();
};
openfl_Vector.join = function(this1,sep) {
	if(sep == null) {
		sep = ",";
	}
	return this1.join(sep);
};
openfl_Vector.lastIndexOf = function(this1,searchElement,fromIndex) {
	return this1.lastIndexOf(searchElement,fromIndex);
};
openfl_Vector.pop = function(this1) {
	return this1.pop();
};
openfl_Vector.push = function(this1,value) {
	return this1.push(value);
};
openfl_Vector.removeAt = function(this1,index) {
	return this1.removeAt(index);
};
openfl_Vector.reverse = function(this1) {
	return this1.reverse();
};
openfl_Vector.set = function(this1,index,value) {
	return this1.set(index,value);
};
openfl_Vector.shift = function(this1) {
	return this1.shift();
};
openfl_Vector.slice = function(this1,startIndex,endIndex) {
	if(startIndex == null) {
		startIndex = 0;
	}
	return this1.slice(startIndex,endIndex);
};
openfl_Vector.some = function(this1,callback,thisObject) {
	var _g = 0;
	var _g1 = this1.get_length();
	while(_g < _g1) {
		var i = _g++;
		this1.__tempIndex = i;
		if(thisObject != null) {
			if(callback.apply(thisObject,[this1.get(i),i,this1]) == true) {
				break;
			}
		} else if(callback(this1.get(i),i,this1)) {
			break;
		}
		if(i == this1.get_length() - 1) {
			this1.__tempIndex++;
		}
	}
	return this1.__tempIndex < this1.get_length() - 1;
};
openfl_Vector.sort = function(this1,sortBehavior) {
	this1.sort(sortBehavior);
};
openfl_Vector.splice = function(this1,startIndex,deleteCount) {
	return this1.splice(startIndex,deleteCount);
};
openfl_Vector.toString = function(this1) {
	if(this1 != null) {
		return this1.toString();
	} else {
		return null;
	}
};
openfl_Vector.unshift = function(this1,value) {
	this1.unshift(value);
};
openfl_Vector.convert = function(vec) {
	return vec;
};
openfl_Vector.toBoolVector = function(t,length,fixed,array) {
	return new openfl__$Vector_BoolVector(length,fixed,array);
};
openfl_Vector.toIntVector = function(t,length,fixed,array) {
	return new openfl__$Vector_IntVector(length,fixed,array);
};
openfl_Vector.toFloatVector = function(t,length,fixed,array) {
	return new openfl__$Vector_FloatVector(length,fixed,array,true);
};
openfl_Vector.toFunctionVector = function(t,length,fixed,array) {
	return new openfl__$Vector_FunctionVector(length,fixed,array);
};
openfl_Vector.toObjectVector = function(t,length,fixed,array) {
	return new openfl__$Vector_ObjectVector(length,fixed,array,true);
};
openfl_Vector.toNullVector = function(t,length,fixed,array) {
	return new openfl__$Vector_ObjectVector(length,fixed,array,true);
};
openfl_Vector.fromBoolVector = function(vector) {
	return vector;
};
openfl_Vector.fromIntVector = function(vector) {
	return vector;
};
openfl_Vector.fromFloatVector = function(vector) {
	return vector;
};
openfl_Vector.fromFunctionVector = function(vector) {
	return vector;
};
openfl_Vector.fromObjectVector = function(vector) {
	return vector;
};
openfl_Vector.get_fixed = function(this1) {
	return this1.fixed;
};
openfl_Vector.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
openfl_Vector.get_length = function(this1) {
	return this1.get_length();
};
openfl_Vector.set_length = function(this1,value) {
	return this1.set_length(value);
};
var lime_utils_ObjectPool = function(create,clean,size) {
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new haxe_ds_List();
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
};
$hxClasses["lime.utils.ObjectPool"] = lime_utils_ObjectPool;
lime_utils_ObjectPool.__name__ = "lime.utils.ObjectPool";
lime_utils_ObjectPool.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!this.__pool.exists(object)) {
			this.__pool.set(object,false);
			this.clean(object);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new haxe_ds_ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			var object1 = null;
			if(this.__inactiveObject0 != null) {
				object1 = this.__inactiveObject0;
				this.__inactiveObject0 = null;
			} else if(this.__inactiveObject1 != null) {
				object1 = this.__inactiveObject1;
				this.__inactiveObject1 = null;
			} else {
				object1 = this.__inactiveObjectList.pop();
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject0 = this.__inactiveObjectList.pop();
				}
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject1 = this.__inactiveObjectList.pop();
				}
			}
			this.inactiveObjects--;
			this.activeObjects++;
			object = object1;
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		} else {
			this.__pool.remove(object);
		}
	}
	,remove: function(object) {
		if(this.__pool.exists(object)) {
			this.__pool.remove(object);
			if(this.__inactiveObject0 == object) {
				this.__inactiveObject0 = null;
				this.inactiveObjects--;
			} else if(this.__inactiveObject1 == object) {
				this.__inactiveObject1 = null;
				this.inactiveObjects--;
			} else if(this.__inactiveObjectList.remove(object)) {
				this.inactiveObjects--;
			} else {
				this.activeObjects--;
			}
		}
	}
	,__addInactive: function(object) {
		if(this.__inactiveObject0 == null) {
			this.__inactiveObject0 = object;
		} else if(this.__inactiveObject1 == null) {
			this.__inactiveObject1 = object;
		} else {
			this.__inactiveObjectList.add(object);
		}
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject0 = this.__inactiveObjectList.pop();
			}
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject1 = this.__inactiveObjectList.pop();
			}
		}
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var _g_head = this.__inactiveObjectList.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var object = val;
			this.__pool.remove(object);
			this.__inactiveObjectList.remove(object);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g = 0;
				var _g1 = value - current;
				while(_g < _g1) {
					var i = _g++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,keyValueIterator: null
	,__class__: haxe_IMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.count = null;
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += Std.string(Std.string(i1));
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1.__id__]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,__class__: haxe_ds_List
};
var openfl_display_DisplayObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.__drawableType = 1;
	this.__alpha = 1;
	this.__blendMode = 10;
	this.__cacheAsBitmap = false;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__scaleX = 1;
	this.__scaleY = 1;
	this.__worldAlpha = 1;
	this.__worldBlendMode = 10;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldVisible = true;
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
	if(openfl_display_DisplayObject.__initStage != null) {
		this.stage = openfl_display_DisplayObject.__initStage;
		openfl_display_DisplayObject.__initStage = null;
		this.stage.addChild(this);
	}
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = "openfl.display.DisplayObject";
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__initStage = null;
openfl_display_DisplayObject.__supportDOM = null;
openfl_display_DisplayObject.__calculateAbsoluteTransform = function(local,parentTransform,target) {
	target.a = local.a * parentTransform.a + local.b * parentTransform.c;
	target.b = local.a * parentTransform.b + local.b * parentTransform.d;
	target.c = local.c * parentTransform.a + local.d * parentTransform.c;
	target.d = local.c * parentTransform.b + local.d * parentTransform.d;
	target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
	target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
};
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	opaqueBackground: null
	,parent: null
	,stage: null
	,__alpha: null
	,__blendMode: null
	,__cacheAsBitmap: null
	,__cacheAsBitmapMatrix: null
	,__cacheBitmap: null
	,__cacheBitmapBackground: null
	,__cacheBitmapColorTransform: null
	,__cacheBitmapData: null
	,__cacheBitmapData2: null
	,__cacheBitmapData3: null
	,__cacheBitmapMatrix: null
	,__cacheBitmapRenderer: null
	,__cairo: null
	,__children: null
	,__customRenderClear: null
	,__customRenderEvent: null
	,__drawableType: null
	,__filters: null
	,__graphics: null
	,__interactive: null
	,__isCacheBitmapRender: null
	,__isMask: null
	,__loaderInfo: null
	,__mask: null
	,__maskTarget: null
	,__name: null
	,__objectTransform: null
	,__renderable: null
	,__renderDirty: null
	,__renderParent: null
	,__renderTransform: null
	,__renderTransformCache: null
	,__renderTransformChanged: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scale9Grid: null
	,__scaleX: null
	,__scaleY: null
	,__scrollRect: null
	,__shader: null
	,__tempPoint: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__worldAlphaChanged: null
	,__worldBlendMode: null
	,__worldClip: null
	,__worldClipChanged: null
	,__worldColorTransform: null
	,__worldShader: null
	,__worldScale9Grid: null
	,__worldTransform: null
	,__worldVisible: null
	,__worldVisibleChanged: null
	,__worldTransformInvalid: null
	,__worldZ: null
	,__canvas: null
	,__context: null
	,__style: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!Object.prototype.hasOwnProperty.call(openfl_display_DisplayObject.__broadcastEvents.h,type)) {
				openfl_display_DisplayObject.__broadcastEvents.h[type] = [];
			}
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.h[type];
			if(dispatchers.indexOf(this) == -1) {
				dispatchers.push(this);
			}
			break;
		case "clearDOM":case "renderCairo":case "renderCanvas":case "renderDOM":case "renderOpenGL":
			if(this.__customRenderEvent == null) {
				this.__customRenderEvent = new openfl_events_RenderEvent(null);
				this.__customRenderEvent.objectColorTransform = new openfl_geom_ColorTransform();
				this.__customRenderEvent.objectMatrix = new openfl_geom_Matrix();
				this.__customRenderClear = true;
			}
			break;
		default:
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
	}
	,dispatchEvent: function(event) {
		if(((event) instanceof openfl_events_MouseEvent)) {
			var mouseEvent = event;
			var _this = this.__getRenderTransform();
			mouseEvent.stageX = mouseEvent.localX * _this.a + mouseEvent.localY * _this.c + _this.tx;
			var _this = this.__getRenderTransform();
			mouseEvent.stageY = mouseEvent.localX * _this.b + mouseEvent.localY * _this.d + _this.ty;
		} else if(((event) instanceof openfl_events_TouchEvent)) {
			var touchEvent = event;
			var _this = this.__getRenderTransform();
			touchEvent.stageX = touchEvent.localX * _this.a + touchEvent.localY * _this.c + _this.tx;
			var _this = this.__getRenderTransform();
			touchEvent.stageY = touchEvent.localX * _this.b + touchEvent.localY * _this.d + _this.ty;
		}
		event.target = this;
		return this.__dispatchWithCapture(event);
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix = openfl_geom_Matrix.__pool.get();
		if(targetCoordinateSpace != null && targetCoordinateSpace != this) {
			matrix.copyFrom(this.__getWorldTransform());
			var targetMatrix = openfl_geom_Matrix.__pool.get();
			targetMatrix.copyFrom(targetCoordinateSpace.__getWorldTransform());
			targetMatrix.invert();
			matrix.concat(targetMatrix);
			openfl_geom_Matrix.__pool.release(targetMatrix);
		} else {
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		openfl_geom_Matrix.__pool.release(matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		return this.__globalToLocal(pos,new openfl_geom_Point());
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) {
			shapeFlag = false;
		}
		if(this.stage != null) {
			return this.__hitTest(x,y,shapeFlag,null,false,this);
		} else {
			return false;
		}
	}
	,invalidate: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,localToGlobal: function(point) {
		return this.__getRenderTransform().transformPoint(point);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener,useCapture);
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!this.hasEventListener(type)) {
				if(Object.prototype.hasOwnProperty.call(openfl_display_DisplayObject.__broadcastEvents.h,type)) {
					HxOverrides.remove(openfl_display_DisplayObject.__broadcastEvents.h[type],this);
				}
			}
			break;
		case "clearDOM":case "renderCairo":case "renderCanvas":case "renderDOM":case "renderOpenGL":
			if(!this.hasEventListener("clearDOM") && !this.hasEventListener("renderCairo") && !this.hasEventListener("renderCanvas") && !this.hasEventListener("renderDOM") && !this.hasEventListener("renderOpenGL")) {
				this.__customRenderEvent = null;
			}
			break;
		default:
		}
	}
	,__cleanup: function() {
		this.__cairo = null;
		this.__canvas = null;
		this.__context = null;
		if(this.__graphics != null) {
			this.__graphics.__cleanup();
		}
		if(this.__cacheBitmap != null) {
			this.__cacheBitmap.__cleanup();
			this.__cacheBitmap = null;
		}
		if(this.__cacheBitmapData != null) {
			this.__cacheBitmapData.dispose();
			this.__cacheBitmapData = null;
		}
	}
	,__dispatch: function(event) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) {
				return true;
			}
			return result;
		}
		return true;
	}
	,__dispatchChildren: function(event) {
	}
	,__dispatchEvent: function(event) {
		var parent = event.bubbles ? this.parent : null;
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) {
			return true;
		}
		if(parent != null && parent != this) {
			event.eventPhase = 3;
			if(event.target == null) {
				event.target = this;
			}
			parent.__dispatchEvent(event);
		}
		return result;
	}
	,__dispatchWithCapture: function(event) {
		if(event.target == null) {
			event.target = this;
		}
		if(this.parent != null) {
			event.eventPhase = 1;
			if(this.parent == this.stage) {
				this.parent.__dispatch(event);
			} else {
				var stack = openfl_display_DisplayObject.__tempStack.get();
				var parent = this.parent;
				var i = 0;
				while(parent != null) {
					stack.set(i,parent);
					parent = parent.parent;
					++i;
				}
				var _g = 0;
				var _g1 = i;
				while(_g < _g1) {
					var j = _g++;
					stack.get(i - j - 1).__dispatch(event);
				}
				openfl_display_DisplayObject.__tempStack.release(stack);
			}
		}
		event.eventPhase = 2;
		return this.__dispatchEvent(event);
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) {
			this.__graphics.__getBounds(rect,matrix);
		}
	}
	,__getCursor: function() {
		return null;
	}
	,__getFilterBounds: function(rect,matrix) {
		this.__getRenderBounds(rect,matrix);
		if(this.__filters != null) {
			var extension = openfl_geom_Rectangle.__pool.get();
			var _g = 0;
			var _g1 = this.__filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				extension.__expand(-filter.__leftExtension,-filter.__topExtension,filter.__leftExtension + filter.__rightExtension,filter.__topExtension + filter.__bottomExtension);
			}
			rect.width += extension.width;
			rect.height += extension.height;
			rect.x += extension.x;
			rect.y += extension.y;
			openfl_geom_Rectangle.__pool.release(extension);
		}
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
		rect.x -= this.__transform.tx;
		rect.y -= this.__transform.ty;
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect == null) {
			this.__getBounds(rect,matrix);
		} else {
			var r = openfl_geom_Rectangle.__pool.get();
			r.copyFrom(this.__scrollRect);
			r.__transform(r,matrix);
			rect.__expand(r.x,r.y,r.width,r.height);
			openfl_geom_Rectangle.__pool.release(r);
		}
	}
	,__getRenderTransform: function() {
		this.__getWorldTransform();
		return this.__renderTransform;
	}
	,__getWorldTransform: function() {
		var transformDirty = this.__transformDirty || this.__worldTransformInvalid;
		if(transformDirty) {
			var list = [];
			var current = this;
			if(this.parent == null) {
				this.__update(true,false);
			} else {
				while(current != this.stage) {
					list.push(current);
					current = current.parent;
					if(current == null) {
						break;
					}
				}
			}
			var i = list.length;
			while(--i >= 0) {
				current = list[i];
				current.__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__globalToLocal: function(global,local) {
		this.__getRenderTransform();
		if(global == local) {
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				global.x = -_this.tx;
				global.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - global.y) + _this.d * (global.x - _this.tx));
				global.y = 1.0 / norm * (_this.a * (global.y - _this.ty) + _this.b * (_this.tx - global.x));
				global.x = px;
			}
		} else {
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			local.x = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - global.y) + _this.d * (global.x - _this.tx));
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			local.y = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (global.y - _this.ty) + _this.b * (_this.tx - global.x));
		}
		return local;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.__visible || this.__isMask) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null && !interactiveOnly) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
				return true;
			}
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		if(this.__graphics != null) {
			this.__graphics.__readGraphicsData(graphicsData);
		}
	}
	,__setParentRenderDirty: function() {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(renderParent != null && !renderParent.__renderDirty) {
			renderParent.__renderDirty = true;
			renderParent.__setParentRenderDirty();
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__setStageReference: function(stage) {
		this.stage = stage;
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			this.__setWorldTransformInvalid();
			this.__setParentRenderDirty();
		}
	}
	,__setWorldTransformInvalid: function() {
		this.__worldTransformInvalid = true;
	}
	,__stopAllMovieClips: function() {
	}
	,__update: function(transformOnly,updateChildren) {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(this.__isMask && renderParent == null) {
			renderParent = this.__maskTarget;
		}
		this.__renderable = this.__visible && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (renderParent == null || !renderParent.__isMask);
		this.__updateTransforms();
		this.__transformDirty = false;
		this.__worldTransformInvalid = false;
		if(!transformOnly) {
			if(openfl_display_DisplayObject.__supportDOM) {
				this.__renderTransformChanged = !this.__renderTransform.equals(this.__renderTransformCache);
				if(this.__renderTransformCache == null) {
					this.__renderTransformCache = this.__renderTransform.clone();
				} else {
					this.__renderTransformCache.copyFrom(this.__renderTransform);
				}
			}
			if(renderParent != null) {
				if(openfl_display_DisplayObject.__supportDOM) {
					var worldVisible = renderParent.__worldVisible && this.__visible;
					this.__worldVisibleChanged = this.__worldVisible != worldVisible;
					this.__worldVisible = worldVisible;
					var worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
					this.__worldAlphaChanged = this.__worldAlpha != worldAlpha;
					this.__worldAlpha = worldAlpha;
				} else {
					this.__worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
				}
				if(this.__objectTransform != null) {
					this.__worldColorTransform.__copyFrom(this.__objectTransform.__colorTransform);
					this.__worldColorTransform.__combine(renderParent.__worldColorTransform);
				} else {
					this.__worldColorTransform.__copyFrom(renderParent.__worldColorTransform);
				}
				if(this.__blendMode == null || this.__blendMode == 10) {
					this.__worldBlendMode = renderParent.__worldBlendMode;
				} else {
					this.__worldBlendMode = this.__blendMode;
				}
				if(this.__shader == null) {
					this.__worldShader = renderParent.__shader;
				} else {
					this.__worldShader = this.__shader;
				}
				if(this.__scale9Grid == null) {
					this.__worldScale9Grid = renderParent.__scale9Grid;
				} else {
					this.__worldScale9Grid = this.__scale9Grid;
				}
			} else {
				this.__worldAlpha = this.get_alpha();
				if(openfl_display_DisplayObject.__supportDOM) {
					this.__worldVisibleChanged = this.__worldVisible != this.__visible;
					this.__worldVisible = this.__visible;
					this.__worldAlphaChanged = this.__worldAlpha != this.get_alpha();
				}
				if(this.__objectTransform != null) {
					this.__worldColorTransform.__copyFrom(this.__objectTransform.__colorTransform);
				} else {
					this.__worldColorTransform.__identity();
				}
				this.__worldBlendMode = this.__blendMode;
				this.__worldShader = this.__shader;
				this.__worldScale9Grid = this.__scale9Grid;
			}
		}
		if(updateChildren && this.get_mask() != null) {
			this.get_mask().__update(transformOnly,true);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local = overrided ? overrideTransform : this.__transform;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		if(this.__renderTransform == null) {
			this.__renderTransform = new openfl_geom_Matrix();
		}
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(!overrided && this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			var target = this.__worldTransform;
			target.a = local.a * parentTransform.a + local.b * parentTransform.c;
			target.b = local.a * parentTransform.b + local.b * parentTransform.d;
			target.c = local.c * parentTransform.a + local.d * parentTransform.c;
			target.d = local.c * parentTransform.b + local.d * parentTransform.d;
			target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__worldTransform.copyFrom(local);
		}
		if(!overrided && renderParent != null) {
			var parentTransform = renderParent.__renderTransform;
			var target = this.__renderTransform;
			target.a = local.a * parentTransform.a + local.b * parentTransform.c;
			target.b = local.a * parentTransform.b + local.b * parentTransform.d;
			target.c = local.c * parentTransform.a + local.d * parentTransform.c;
			target.d = local.c * parentTransform.b + local.d * parentTransform.d;
			target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__renderTransform.copyFrom(local);
		}
		if(this.__scrollRect != null) {
			var _this = this.__renderTransform;
			var px = -this.__scrollRect.x;
			var py = -this.__scrollRect.y;
			_this.tx = px * _this.a + py * _this.c + _this.tx;
			_this.ty = px * _this.b + py * _this.d + _this.ty;
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) {
			value = 1.0;
		}
		if(value < 0.0) {
			value = 0.0;
		}
		if(value != this.__alpha && !this.get_cacheAsBitmap()) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__alpha = value;
	}
	,get_blendMode: function() {
		return this.__blendMode;
	}
	,set_blendMode: function(value) {
		if(value == null) {
			value = 10;
		}
		if(value != this.__blendMode) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__blendMode = value;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters == null) {
			return this.__cacheAsBitmap;
		} else {
			return true;
		}
	}
	,set_cacheAsBitmap: function(value) {
		if(value != this.__cacheAsBitmap) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__cacheAsBitmap = value;
	}
	,get_cacheAsBitmapMatrix: function() {
		return this.__cacheAsBitmapMatrix;
	}
	,set_cacheAsBitmapMatrix: function(value) {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return this.__cacheAsBitmapMatrix = value != null ? value.clone() : value;
	}
	,get_filters: function() {
		if(this.__filters == null) {
			return [];
		} else {
			return this.__filters.slice();
		}
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			this.__filters = value;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		} else if(this.__filters != null) {
			this.__filters = null;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_height: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var height = rect.height;
		openfl_geom_Rectangle.__pool.release(rect);
		return height;
	}
	,set_height: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.height) {
			this.set_scaleY(value / rect.height);
		} else {
			this.set_scaleY(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_loaderInfo: function() {
		if(this.stage != null) {
			return openfl_utils__$internal_Lib.current.__loaderInfo;
		}
		return null;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value == this.__mask) {
			return value;
		}
		if(value != this.__mask) {
			this.__setTransformDirty();
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskTarget = null;
			this.__mask.__setTransformDirty();
			var _this = this.__mask;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		if(value != null) {
			value.__isMask = true;
			value.__maskTarget = this;
			value.__setWorldTransformInvalid();
		}
		if(this.__cacheBitmap != null && this.__cacheBitmap.get_mask() != value) {
			this.__cacheBitmap.set_mask(value);
		}
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl_utils__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl_utils__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.tx;
		} else {
			return 1.0 / norm * (_this.c * (_this.ty - mouseY) + _this.d * (mouseX - _this.tx));
		}
	}
	,get_mouseY: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl_utils__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl_utils__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.ty;
		} else {
			return 1.0 / norm * (_this.a * (mouseY - _this.ty) + _this.b * (_this.tx - mouseX));
		}
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) {
			return openfl_utils__$internal_Lib.current;
		}
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			this.__transform.a = this.__rotationCosine * this.__scaleX;
			this.__transform.b = this.__rotationSine * this.__scaleX;
			this.__transform.c = -this.__rotationSine * this.__scaleY;
			this.__transform.d = this.__rotationCosine * this.__scaleY;
			this.__setTransformDirty();
		}
		return value;
	}
	,get_scale9Grid: function() {
		if(this.__scale9Grid == null) {
			return null;
		}
		return this.__scale9Grid.clone();
	}
	,set_scale9Grid: function(value) {
		if(value == null && this.__scale9Grid == null) {
			return value;
		}
		if(value != null && this.__scale9Grid != null && this.__scale9Grid.equals(value)) {
			return value;
		}
		if(value != null) {
			if(this.__scale9Grid == null) {
				this.__scale9Grid = new openfl_geom_Rectangle();
			}
			this.__scale9Grid.copyFrom(value);
		} else {
			this.__scale9Grid = null;
		}
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			this.__scaleX = value;
			if(this.__transform.b == 0) {
				if(value != this.__transform.a) {
					this.__setTransformDirty();
				}
				this.__transform.a = value;
			} else {
				var a = this.__rotationCosine * value;
				var b = this.__rotationSine * value;
				if(this.__transform.a != a || this.__transform.b != b) {
					this.__setTransformDirty();
				}
				this.__transform.a = a;
				this.__transform.b = b;
			}
		}
		return value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(value != this.__scaleY) {
			this.__scaleY = value;
			if(this.__transform.c == 0) {
				if(value != this.__transform.d) {
					this.__setTransformDirty();
				}
				this.__transform.d = value;
			} else {
				var c = -this.__rotationSine * value;
				var d = this.__rotationCosine * value;
				if(this.__transform.d != d || this.__transform.c != c) {
					this.__setTransformDirty();
				}
				this.__transform.c = c;
				this.__transform.d = d;
			}
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) {
			return null;
		}
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value == null && this.__scrollRect == null) {
			return value;
		}
		if(value != null && this.__scrollRect != null && this.__scrollRect.equals(value)) {
			return value;
		}
		if(value != null) {
			if(this.__scrollRect == null) {
				this.__scrollRect = new openfl_geom_Rectangle();
			}
			this.__scrollRect.copyFrom(value);
		} else {
			this.__scrollRect = null;
		}
		this.__setTransformDirty();
		if(openfl_display_DisplayObject.__supportDOM) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_shader: function() {
		return this.__shader;
	}
	,set_shader: function(value) {
		this.__shader = value;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		return this.__objectTransform;
	}
	,set_transform: function(value) {
		if(value == null) {
			throw new openfl_errors_TypeError("Parameter transform must be non-null.");
		}
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		this.__setTransformDirty();
		this.__objectTransform.set_matrix(value.get_matrix());
		if(!this.__objectTransform.__colorTransform.__equals(value.__colorTransform,true) || !this.get_cacheAsBitmap() && this.__objectTransform.__colorTransform.alphaMultiplier != value.__colorTransform.alphaMultiplier) {
			this.__objectTransform.__colorTransform.__copyFrom(value.get_colorTransform());
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var width = rect.width;
		openfl_geom_Rectangle.__pool.release(rect);
		return width;
	}
	,set_width: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.width) {
			this.set_scaleX(value / rect.width);
		} else {
			this.set_scaleX(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			this.__setTransformDirty();
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			this.__setTransformDirty();
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_shader:"set_shader",get_shader:"get_shader",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_scale9Grid:"set_scale9Grid",get_scale9Grid:"get_scale9Grid",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",get_loaderInfo:"get_loaderInfo",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_cacheAsBitmapMatrix:"set_cacheAsBitmapMatrix",get_cacheAsBitmapMatrix:"get_cacheAsBitmapMatrix",set_cacheAsBitmap:"set_cacheAsBitmap",get_cacheAsBitmap:"get_cacheAsBitmap",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = null;
	this.__tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = "openfl.display.InteractiveObject";
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	doubleClickEnabled: null
	,focusRect: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,softKeyboardInputAreaOfInterest: null
	,__tabEnabled: null
	,__tabIndex: null
	,requestSoftKeyboard: function() {
		openfl_utils__$internal_Lib.notImplemented({ fileName : "openfl/display/InteractiveObject.hx", lineNumber : 1251, className : "openfl.display.InteractiveObject", methodName : "requestSoftKeyboard"});
		return false;
	}
	,__allowMouseFocus: function() {
		if(this.mouseEnabled) {
			return this.get_tabEnabled();
		} else {
			return false;
		}
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) {
				this.parent.__getInteractive(stack);
			}
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__tabTest: function(stack) {
		if(this.get_tabEnabled()) {
			stack.push(this);
		}
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == true) {
			return true;
		} else {
			return false;
		}
	}
	,set_tabEnabled: function(value) {
		if(this.__tabEnabled != value) {
			this.__tabEnabled = value;
			this.dispatchEvent(new openfl_events_Event("tabEnabledChange",true,false));
		}
		return this.__tabEnabled;
	}
	,get_tabIndex: function() {
		return this.__tabIndex;
	}
	,set_tabIndex: function(value) {
		if(this.__tabIndex != value) {
			if(value < -1) {
				throw new openfl_errors_RangeError("Parameter tabIndex must be a non-negative number; got " + value);
			}
			this.__tabIndex = value;
			this.dispatchEvent(new openfl_events_Event("tabIndexChange",true,false));
		}
		return this.__tabIndex;
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tabIndex:"set_tabIndex",get_tabIndex:"get_tabIndex",set_tabEnabled:"set_tabEnabled",get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__tabChildren = true;
	this.__children = [];
	this.__removedChildren = openfl_Vector.toObjectVector(null);
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = "openfl.display.DisplayObjectContainer";
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	mouseChildren: null
	,__removedChildren: null
	,__tabChildren: null
	,addChild: function(child) {
		return this.addChildAt(child,this.get_numChildren());
	}
	,addChildAt: function(child,index) {
		if(child == null) {
			var error = new openfl_errors_TypeError("Error #2007: Parameter child must be non-null.");
			error.errorID = 2007;
			throw error;
		} else if(child.stage == child) {
			var error = new openfl_errors_ArgumentError("Error #3783: A Stage object cannot be added as the child of another object.");
			error.errorID = 3783;
			throw error;
		}
		if(index > this.__children.length || index < 0) {
			throw haxe_Exception.thrown("Invalid index position " + index);
		}
		if(child.parent == this) {
			if(this.__children[index] != child) {
				HxOverrides.remove(this.__children,child);
				this.__children.splice(index,0,child);
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
			}
		} else {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			this.__children.splice(index,0,child);
			child.parent = this;
			var addedToStage = this.stage != null && child.stage == null;
			if(addedToStage) {
				child.__setStageReference(this.stage);
			}
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = new openfl_events_Event("added");
			event.bubbles = true;
			event.target = child;
			child.__dispatchWithCapture(event);
			if(addedToStage) {
				event = new openfl_events_Event("addedToStage",false,false);
				child.__dispatchWithCapture(event);
				child.__dispatchChildren(event);
			}
		}
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.__children[index];
		}
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) {
				return child;
			}
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g = 0;
		var _g1 = this.__children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__children[i] == child) {
				return i;
			}
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false,this);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = new openfl_events_Event("removed",true);
			child.__dispatchWithCapture(event);
			if(this.stage != null) {
				if(child.stage != null && this.stage.get_focus() == child) {
					this.stage.set_focus(null);
				}
				var event = new openfl_events_Event("removedFromStage",false,false);
				child.__dispatchWithCapture(event);
				child.__dispatchChildren(event);
				child.__setStageReference(null);
			}
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			child.__setTransformDirty();
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.removeChild(this.__children[index]);
		}
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) {
				return;
			}
		}
		if(beginIndex > this.__children.length - 1) {
			return;
		} else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) {
			throw new openfl_errors_RangeError("The supplied index is out of bounds.");
		}
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			--numRemovals;
		}
	}
	,resolve: function(fieldName) {
		if(this.__children == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == fieldName) {
				return child;
			}
		}
		return null;
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,stopAllMovieClips: function() {
		this.__stopAllMovieClips();
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = this.__children.indexOf(child1);
			var index2 = this.__children.indexOf(child2);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,swapChildrenAt: function(index1,index2) {
		var swap = this.__children[index1];
		this.__children[index1] = this.__children[index2];
		this.__children[index2] = swap;
		swap = null;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__cleanup: function() {
		openfl_display_InteractiveObject.prototype.__cleanup.call(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__cleanup();
		}
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
	}
	,__cleanupRemovedChildren: function() {
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
	}
	,__dispatchChildren: function(event) {
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				event.target = child;
				if(!child.__dispatchWithCapture(event)) {
					break;
				}
				child.__dispatchChildren(event);
			}
		}
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getFilterBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getFilterBounds.call(this,rect,matrix);
		if(this.__scrollRect != null) {
			return;
		}
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			var childRect = openfl_geom_Rectangle.__pool.get();
			child.__getFilterBounds(childRect,childWorldTransform);
			rect.__expand(childRect.x,childRect.y,childRect.width,childRect.height);
			openfl_geom_Rectangle.__pool.release(childRect);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getRenderBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return false;
			}
			openfl_geom_Point.__pool.release(point);
		}
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) {
						stack.push(hitObject);
					}
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive && stack.length > length) {
								break;
							}
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else {
			var hitTest = false;
			while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i])) {
				hitTest = true;
				if(stack == null) {
					break;
				}
			}
			return hitTest;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) {
			return true;
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		openfl_display_InteractiveObject.prototype.__readGraphicsData.call(this,graphicsData,recurse);
		if(recurse) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__readGraphicsData(graphicsData,recurse);
			}
		}
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__setStageReference(stage);
			}
		}
	}
	,__setWorldTransformInvalid: function() {
		if(!this.__worldTransformInvalid) {
			this.__worldTransformInvalid = true;
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setWorldTransformInvalid();
				}
			}
		}
	}
	,__stopAllMovieClips: function() {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__stopAllMovieClips();
		}
	}
	,__tabTest: function(stack) {
		openfl_display_InteractiveObject.prototype.__tabTest.call(this,stack);
		if(!this.get_tabChildren()) {
			return;
		}
		var interactive = false;
		var interactiveObject = null;
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			interactive = child.__getInteractive(null);
			if(interactive) {
				interactiveObject = child;
				interactiveObject.__tabTest(stack);
			}
		}
	}
	,__update: function(transformOnly,updateChildren) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren);
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true);
			}
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,get_tabChildren: function() {
		return this.__tabChildren;
	}
	,set_tabChildren: function(value) {
		if(this.__tabChildren != value) {
			this.__tabChildren = value;
			this.dispatchEvent(new openfl_events_Event("tabChildrenChange",true,false));
		}
		return this.__tabChildren;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_tabChildren:"set_tabChildren",get_tabChildren:"get_tabChildren",get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.__drawableType = 4;
	this.__buttonMode = false;
	this.useHandCursor = true;
	if(openfl_display_Sprite.__constructor != null) {
		var method = openfl_display_Sprite.__constructor;
		openfl_display_Sprite.__constructor = null;
		method(this);
	}
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = "openfl.display.Sprite";
openfl_display_Sprite.__constructor = null;
openfl_display_Sprite.fromTimeline = function(timeline) {
	var sprite = new openfl_display_Sprite();
	timeline.initializeSprite(sprite);
	return sprite;
};
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	dropTarget: null
	,hitArea: null
	,useHandCursor: null
	,__buttonMode: null
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
		if(this.stage != null) {
			this.stage.__startDrag(this,lockCenter,bounds);
		}
	}
	,stopDrag: function() {
		if(this.stage != null) {
			this.stage.__stopDrag(this);
		}
	}
	,__getCursor: function() {
		if(this.__buttonMode && this.useHandCursor) {
			return "button";
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(!hitObject.get_visible() || this.__isMask) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return this.__hitTestHitArea(x,y,shapeFlag,stack,true,hitObject);
			}
			openfl_geom_Point.__pool.release(point);
		}
		if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
			if(stack != null) {
				return interactiveOnly;
			} else {
				return true;
			}
		} else if(this.hitArea == null && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
			if(stack != null && (!interactiveOnly || this.mouseEnabled)) {
				stack.push(hitObject);
			}
			return true;
		}
		return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__hitTestHitArea: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled) {
				this.hitArea.mouseEnabled = true;
				var hitTest = this.hitArea.__hitTest(x,y,shapeFlag,null,true,hitObject);
				this.hitArea.mouseEnabled = false;
				if(stack != null && hitTest) {
					stack[stack.length] = hitObject;
				}
				return hitTest;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) {
			return true;
		} else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.__buttonMode;
		} else {
			return this.__tabEnabled;
		}
	}
	,get_buttonMode: function() {
		return this.__buttonMode;
	}
	,set_buttonMode: function(value) {
		return this.__buttonMode = value;
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics",set_buttonMode:"set_buttonMode",get_buttonMode:"get_buttonMode"})
});
var Main = function() {
	this.startFullscreen = false;
	this.skipSplash = true;
	this.framerate = 60;
	this.zoom = -1;
	this.initialState = TitleState;
	this.gameHeight = 720;
	this.gameWidth = 1280;
	openfl_display_Sprite.call(this);
	if(this.stage != null) {
		this.init();
	} else {
		this.addEventListener("addedToStage",$bind(this,this.init));
	}
};
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.fpsCounter = null;
Main.main = function() {
	openfl_Lib.get_current().addChild(new Main());
};
Main.__super__ = openfl_display_Sprite;
Main.prototype = $extend(openfl_display_Sprite.prototype,{
	gameWidth: null
	,gameHeight: null
	,initialState: null
	,zoom: null
	,framerate: null
	,skipSplash: null
	,startFullscreen: null
	,init: function(E) {
		if(this.hasEventListener("addedToStage")) {
			this.removeEventListener("addedToStage",$bind(this,this.init));
		}
		this.setupGame();
	}
	,setupGame: function() {
		var stageWidth = openfl_Lib.get_current().stage.stageWidth;
		var stageHeight = openfl_Lib.get_current().stage.stageHeight;
		if(this.zoom == -1) {
			var ratioX = stageWidth / this.gameWidth;
			var ratioY = stageHeight / this.gameHeight;
			this.zoom = Math.min(ratioX,ratioY);
			this.gameWidth = Math.ceil(stageWidth / this.zoom);
			this.gameHeight = Math.ceil(stageHeight / this.zoom);
		}
		this.initialState = TitleState;
		this.addChild(new flixel_FlxGame(this.gameWidth,this.gameHeight,this.initialState,this.zoom,this.framerate,this.framerate,this.skipSplash,this.startFullscreen));
		Main.fpsCounter = new openfl_display_FPS(10,3,16777215);
		this.addChild(Main.fpsCounter);
	}
	,__class__: Main
});
var DocumentClass = function(current) {
	current.addChild(this);
	Main.call(this);
	this.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = "DocumentClass";
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	__class__: DocumentClass
});
var BGSprite = function(image,x,y,scrollX,scrollY,animations,loopAnims) {
	if(loopAnims == null) {
		loopAnims = false;
	}
	if(scrollY == null) {
		scrollY = 1;
	}
	if(scrollX == null) {
		scrollX = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.idleAnim = null;
	flixel_FlxSprite.call(this,x,y);
	if(animations != null) {
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + image + ".png","IMAGE",library),Paths.getPath("images/" + image + ".xml","TEXT",library)));
		var _g = 0;
		while(_g < animations.length) {
			var anim = animations[_g];
			++_g;
			this.animation.addByPrefix(anim,anim,24,loopAnims);
			this.animation.play(anim);
			if(this.idleAnim == null) {
				this.idleAnim = anim;
			}
		}
	} else {
		this.loadGraphic(Paths.getPath("images/" + image + ".png","IMAGE",null));
		this.set_active(false);
	}
	this.scrollFactor.set(scrollX,scrollY);
	this.set_antialiasing(true);
};
$hxClasses["BGSprite"] = BGSprite;
BGSprite.__name__ = "BGSprite";
BGSprite.__super__ = flixel_FlxSprite;
BGSprite.prototype = $extend(flixel_FlxSprite.prototype,{
	idleAnim: null
	,dance: function() {
		if(this.idleAnim != null) {
			this.animation.play(this.idleAnim);
		}
	}
	,__class__: BGSprite
});
var BackgroundDancer = function(x,y) {
	this.danceDir = false;
	flixel_FlxSprite.call(this,x,y);
	var library = null;
	this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "limo/limoDancer" + ".png","IMAGE",library),Paths.getPath("images/" + "limo/limoDancer" + ".xml","TEXT",library)));
	this.animation.addByIndices("danceLeft","bg dancer sketch PINK",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"",24,false);
	this.animation.addByIndices("danceRight","bg dancer sketch PINK",[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"",24,false);
	this.animation.play("danceLeft");
	this.animation.finish();
	this.set_antialiasing(true);
};
$hxClasses["BackgroundDancer"] = BackgroundDancer;
BackgroundDancer.__name__ = "BackgroundDancer";
BackgroundDancer.__super__ = flixel_FlxSprite;
BackgroundDancer.prototype = $extend(flixel_FlxSprite.prototype,{
	danceDir: null
	,dance: function() {
		this.danceDir = !this.danceDir;
		if(this.danceDir) {
			this.animation.play("danceRight",true);
		} else {
			this.animation.play("danceLeft",true);
		}
	}
	,__class__: BackgroundDancer
});
var BackgroundGirls = function(x,y) {
	this.danceDir = false;
	flixel_FlxSprite.call(this,x,y);
	var library = null;
	this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/bgFreaks" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/bgFreaks" + ".xml","TEXT",library)));
	this.animation.addByIndices("danceLeft","BG girls group",CoolUtil.numberArray(14),"",24,false);
	this.animation.addByIndices("danceRight","BG girls group",CoolUtil.numberArray(30,15),"",24,false);
	this.animation.play("danceLeft");
	this.animation.finish();
};
$hxClasses["BackgroundGirls"] = BackgroundGirls;
BackgroundGirls.__name__ = "BackgroundGirls";
BackgroundGirls.__super__ = flixel_FlxSprite;
BackgroundGirls.prototype = $extend(flixel_FlxSprite.prototype,{
	danceDir: null
	,getScared: function() {
		this.animation.addByIndices("danceLeft","BG fangirls dissuaded",CoolUtil.numberArray(14),"",24,false);
		this.animation.addByIndices("danceRight","BG fangirls dissuaded",CoolUtil.numberArray(30,15),"",24,false);
		this.dance();
		this.animation.finish();
	}
	,dance: function() {
		this.danceDir = !this.danceDir;
		if(this.danceDir) {
			this.animation.play("danceRight",true);
		} else {
			this.animation.play("danceLeft",true);
		}
	}
	,__class__: BackgroundGirls
});
var Character = function(x,y,character,isPlayer) {
	if(isPlayer == null) {
		isPlayer = false;
	}
	if(character == null) {
		character = "bf";
	}
	this.danced = false;
	this.animationNotes = [];
	this.holdTimer = 0;
	this.curCharacter = "bf";
	this.isPlayer = false;
	this.debugMode = false;
	flixel_FlxSprite.call(this,x,y);
	this.animOffsets = new haxe_ds_StringMap();
	this.curCharacter = character;
	this.isPlayer = isPlayer;
	var tex;
	this.set_antialiasing(true);
	switch(this.curCharacter) {
	case "bf":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/BOYFRIEND" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/BOYFRIEND" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("idle","BF idle dance");
		this.quickAnimAdd("singUP","BF NOTE UP0");
		this.quickAnimAdd("singLEFT","BF NOTE LEFT0");
		this.quickAnimAdd("singRIGHT","BF NOTE RIGHT0");
		this.quickAnimAdd("singDOWN","BF NOTE DOWN0");
		this.quickAnimAdd("singUPmiss","BF NOTE UP MISS");
		this.quickAnimAdd("singLEFTmiss","BF NOTE LEFT MISS");
		this.quickAnimAdd("singRIGHTmiss","BF NOTE RIGHT MISS");
		this.quickAnimAdd("singDOWNmiss","BF NOTE DOWN MISS");
		this.quickAnimAdd("hey","BF HEY");
		this.quickAnimAdd("firstDeath","BF dies");
		this.animation.addByPrefix("deathLoop","BF Dead Loop",24,true);
		this.quickAnimAdd("deathConfirm","BF Dead confirm");
		this.animation.addByPrefix("scared","BF idle shaking",24,true);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		this.set_flipX(true);
		this.loadOffsetFile(this.curCharacter);
		break;
	case "bf-car":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/bfCar" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/bfCar" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("idle","BF idle dance");
		this.quickAnimAdd("singUP","BF NOTE UP0");
		this.quickAnimAdd("singLEFT","BF NOTE LEFT0");
		this.quickAnimAdd("singRIGHT","BF NOTE RIGHT0");
		this.quickAnimAdd("singDOWN","BF NOTE DOWN0");
		this.quickAnimAdd("singUPmiss","BF NOTE UP MISS");
		this.quickAnimAdd("singLEFTmiss","BF NOTE LEFT MISS");
		this.quickAnimAdd("singRIGHTmiss","BF NOTE RIGHT MISS");
		this.quickAnimAdd("singDOWNmiss","BF NOTE DOWN MISS");
		this.animation.addByIndices("idleHair","BF idle dance",[10,11,12,13],"",24,true);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		this.set_flipX(true);
		break;
	case "bf-christmas":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/bfChristmas" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/bfChristmas" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("idle","BF idle dance");
		this.quickAnimAdd("singUP","BF NOTE UP0");
		this.quickAnimAdd("singLEFT","BF NOTE LEFT0");
		this.quickAnimAdd("singRIGHT","BF NOTE RIGHT0");
		this.quickAnimAdd("singDOWN","BF NOTE DOWN0");
		this.quickAnimAdd("singUPmiss","BF NOTE UP MISS");
		this.quickAnimAdd("singLEFTmiss","BF NOTE LEFT MISS");
		this.quickAnimAdd("singRIGHTmiss","BF NOTE RIGHT MISS");
		this.quickAnimAdd("singDOWNmiss","BF NOTE DOWN MISS");
		this.quickAnimAdd("hey","BF HEY");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		this.set_flipX(true);
		break;
	case "bf-holding-gf":
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/bfAndGF" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/bfAndGF" + ".xml","TEXT",library)));
		this.quickAnimAdd("idle","BF idle dance");
		this.quickAnimAdd("singDOWN","BF NOTE DOWN0");
		this.quickAnimAdd("singLEFT","BF NOTE LEFT0");
		this.quickAnimAdd("singRIGHT","BF NOTE RIGHT0");
		this.quickAnimAdd("singUP","BF NOTE UP0");
		this.quickAnimAdd("singDOWNmiss","BF NOTE DOWN MISS");
		this.quickAnimAdd("singLEFTmiss","BF NOTE LEFT MISS");
		this.quickAnimAdd("singRIGHTmiss","BF NOTE RIGHT MISS");
		this.quickAnimAdd("singUPmiss","BF NOTE UP MISS");
		this.quickAnimAdd("bfCatch","BF catches GF");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		this.set_flipX(true);
		break;
	case "bf-holding-gf-dead":
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/bfHoldingGF-DEAD" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/bfHoldingGF-DEAD" + ".xml","TEXT",library)));
		this.quickAnimAdd("singUP","BF Dead with GF Loop");
		this.quickAnimAdd("firstDeath","BF Dies with GF");
		this.animation.addByPrefix("deathLoop","BF Dead with GF Loop",24,true);
		this.quickAnimAdd("deathConfirm","RETRY confirm holding gf");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("firstDeath");
		this.set_flipX(true);
		break;
	case "bf-pixel":
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/bfPixel" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/bfPixel" + ".xml","TEXT",library)));
		this.quickAnimAdd("idle","BF IDLE");
		this.quickAnimAdd("singUP","BF UP NOTE");
		this.quickAnimAdd("singLEFT","BF LEFT NOTE");
		this.quickAnimAdd("singRIGHT","BF RIGHT NOTE");
		this.quickAnimAdd("singDOWN","BF DOWN NOTE");
		this.quickAnimAdd("singUPmiss","BF UP MISS");
		this.quickAnimAdd("singLEFTmiss","BF LEFT MISS");
		this.quickAnimAdd("singRIGHTmiss","BF RIGHT MISS");
		this.quickAnimAdd("singDOWNmiss","BF DOWN MISS");
		this.loadOffsetFile(this.curCharacter);
		this.setGraphicSize(this.get_width() * 6 | 0);
		this.updateHitbox();
		this.playAnim("idle");
		var _g = this;
		_g.set_width(_g.get_width() - 100);
		var _g = this;
		_g.set_height(_g.get_height() - 100);
		this.set_antialiasing(false);
		this.set_flipX(true);
		break;
	case "bf-pixel-dead":
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/bfPixelsDEAD" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/bfPixelsDEAD" + ".xml","TEXT",library)));
		this.quickAnimAdd("singUP","BF Dies pixel");
		this.quickAnimAdd("firstDeath","BF Dies pixel");
		this.animation.addByPrefix("deathLoop","Retry Loop",24,true);
		this.quickAnimAdd("deathConfirm","RETRY CONFIRM");
		this.animation.play("firstDeath");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("firstDeath");
		this.setGraphicSize(this.get_width() * 6 | 0);
		this.updateHitbox();
		this.set_antialiasing(false);
		this.set_flipX(true);
		break;
	case "dad":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/DADDY_DEAREST" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/DADDY_DEAREST" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("idle","Dad idle dance");
		this.quickAnimAdd("singUP","Dad Sing Note UP");
		this.quickAnimAdd("singRIGHT","Dad Sing Note RIGHT");
		this.quickAnimAdd("singDOWN","Dad Sing Note DOWN");
		this.quickAnimAdd("singLEFT","Dad Sing Note LEFT");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		break;
	case "gf":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/GF_assets" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/GF_assets" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("cheer","GF Cheer");
		this.quickAnimAdd("singLEFT","GF left note");
		this.quickAnimAdd("singRIGHT","GF Right Note");
		this.quickAnimAdd("singUP","GF Up Note");
		this.quickAnimAdd("singDOWN","GF Down Note");
		this.animation.addByIndices("sad","gf sad",[0,1,2,3,4,5,6,7,8,9,10,11,12],"",24,true);
		this.animation.addByIndices("danceLeft","GF Dancing Beat",[30,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"",24,false);
		this.animation.addByIndices("danceRight","GF Dancing Beat",[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"",24,false);
		this.animation.addByIndices("hairBlow","GF Dancing Beat Hair blowing",[0,1,2,3],"",24);
		this.animation.addByIndices("hairFall","GF Dancing Beat Hair Landing",[0,1,2,3,4,5,6,7,8,9,10,11],"",24,false);
		this.animation.addByPrefix("scared","GF FEAR",24,true);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("danceRight");
		break;
	case "gf-car":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/gfCar" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/gfCar" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.animation.addByIndices("singUP","GF Dancing Beat Hair blowing CAR",[0],"",24,false);
		this.animation.addByIndices("danceLeft","GF Dancing Beat Hair blowing CAR",[30,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"",24,false);
		this.animation.addByIndices("danceRight","GF Dancing Beat Hair blowing CAR",[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"",24,false);
		this.animation.addByIndices("idleHair","GF Dancing Beat Hair blowing CAR",[10,11,12,25,26,27],"",24,true);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("danceRight");
		break;
	case "gf-christmas":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/gfChristmas" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/gfChristmas" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("cheer","GF Cheer");
		this.quickAnimAdd("singLEFT","GF left note");
		this.quickAnimAdd("singRIGHT","GF Right Note");
		this.quickAnimAdd("singUP","GF Up Note");
		this.quickAnimAdd("singDOWN","GF Down Note");
		this.animation.addByIndices("sad","gf sad",[0,1,2,3,4,5,6,7,8,9,10,11,12],"",24,false);
		this.animation.addByIndices("danceLeft","GF Dancing Beat",[30,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"",24,false);
		this.animation.addByIndices("danceRight","GF Dancing Beat",[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"",24,false);
		this.animation.addByIndices("hairBlow","GF Dancing Beat Hair blowing",[0,1,2,3],"",24);
		this.animation.addByIndices("hairFall","GF Dancing Beat Hair Landing",[0,1,2,3,4,5,6,7,8,9,10,11],"",24,false);
		this.animation.addByPrefix("scared","GF FEAR",24,true);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("danceRight");
		break;
	case "gf-pixel":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/gfPixel" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/gfPixel" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.animation.addByIndices("singUP","GF IDLE",[2],"",24,false);
		this.animation.addByIndices("danceLeft","GF IDLE",[30,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"",24,false);
		this.animation.addByIndices("danceRight","GF IDLE",[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"",24,false);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("danceRight");
		this.setGraphicSize(this.get_width() * PlayState.daPixelZoom | 0);
		this.updateHitbox();
		this.set_antialiasing(false);
		break;
	case "gf-tankmen":
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/gfTankmen" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/gfTankmen" + ".xml","TEXT",library)));
		this.animation.addByIndices("sad","GF Crying at Gunpoint",[0,1,2,3,4,5,6,7,8,9,10,11,12],"",24,true);
		this.animation.addByIndices("danceLeft","GF Dancing at Gunpoint",[30,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"",24,false);
		this.animation.addByIndices("danceRight","GF Dancing at Gunpoint",[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"",24,false);
		this.loadOffsetFile("gf");
		this.playAnim("danceRight");
		break;
	case "mom":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/Mom_Assets" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/Mom_Assets" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("idle","Mom Idle");
		this.quickAnimAdd("singUP","Mom Up Pose");
		this.quickAnimAdd("singDOWN","MOM DOWN POSE");
		this.quickAnimAdd("singLEFT","Mom Left Pose");
		this.quickAnimAdd("singRIGHT","Mom Pose Left");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		break;
	case "mom-car":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/momCar" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/momCar" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("idle","Mom Idle");
		this.quickAnimAdd("singUP","Mom Up Pose");
		this.quickAnimAdd("singDOWN","MOM DOWN POSE");
		this.quickAnimAdd("singLEFT","Mom Left Pose");
		this.quickAnimAdd("singRIGHT","Mom Pose Left");
		this.animation.addByIndices("idleHair","Mom Idle",[10,11,12,13],"",24,true);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		break;
	case "monster":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/Monster_Assets" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/Monster_Assets" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("idle","monster idle");
		this.quickAnimAdd("singUP","monster up note");
		this.quickAnimAdd("singDOWN","monster down");
		this.quickAnimAdd("singLEFT","Monster left note");
		this.quickAnimAdd("singRIGHT","Monster Right note");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		break;
	case "monster-christmas":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/monsterChristmas" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/monsterChristmas" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("idle","monster idle");
		this.quickAnimAdd("singUP","monster up note");
		this.quickAnimAdd("singDOWN","monster down");
		this.quickAnimAdd("singLEFT","Monster left note");
		this.quickAnimAdd("singRIGHT","Monster Right note");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		break;
	case "parents-christmas":
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/mom_dad_christmas_assets" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/mom_dad_christmas_assets" + ".xml","TEXT",library)));
		this.quickAnimAdd("idle","Parent Christmas Idle");
		this.quickAnimAdd("singUP","Parent Up Note Dad");
		this.quickAnimAdd("singDOWN","Parent Down Note Dad");
		this.quickAnimAdd("singLEFT","Parent Left Note Dad");
		this.quickAnimAdd("singRIGHT","Parent Right Note Dad");
		this.quickAnimAdd("singUP-alt","Parent Up Note Mom");
		this.quickAnimAdd("singDOWN-alt","Parent Down Note Mom");
		this.quickAnimAdd("singLEFT-alt","Parent Left Note Mom");
		this.quickAnimAdd("singRIGHT-alt","Parent Right Note Mom");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		break;
	case "pico":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/Pico_FNF_assetss" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/Pico_FNF_assetss" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("idle","Pico Idle Dance");
		this.quickAnimAdd("singUP","pico Up note0");
		this.quickAnimAdd("singDOWN","Pico Down Note0");
		if(isPlayer) {
			this.quickAnimAdd("singLEFT","Pico NOTE LEFT0");
			this.quickAnimAdd("singRIGHT","Pico Note Right0");
			this.quickAnimAdd("singRIGHTmiss","Pico Note Right Miss");
			this.quickAnimAdd("singLEFTmiss","Pico NOTE LEFT miss");
		} else {
			this.quickAnimAdd("singLEFT","Pico Note Right0");
			this.quickAnimAdd("singRIGHT","Pico NOTE LEFT0");
			this.quickAnimAdd("singRIGHTmiss","Pico NOTE LEFT miss");
			this.quickAnimAdd("singLEFTmiss","Pico Note Right Miss");
		}
		this.quickAnimAdd("singUPmiss","pico Up note miss");
		this.quickAnimAdd("singDOWNmiss","Pico Down Note MISS");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		this.set_flipX(true);
		break;
	case "pico-speaker":
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/picoSpeaker" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/picoSpeaker" + ".xml","TEXT",library)));
		this.quickAnimAdd("shoot1","Pico shoot 1");
		this.quickAnimAdd("shoot2","Pico shoot 2");
		this.quickAnimAdd("shoot3","Pico shoot 3");
		this.quickAnimAdd("shoot4","Pico shoot 4");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("shoot1");
		this.loadMappedAnims();
		break;
	case "senpai":
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/senpai" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/senpai" + ".xml","TEXT",library)));
		this.quickAnimAdd("idle","Senpai Idle");
		this.quickAnimAdd("singUP","SENPAI UP NOTE");
		this.quickAnimAdd("singLEFT","SENPAI LEFT NOTE");
		this.quickAnimAdd("singRIGHT","SENPAI RIGHT NOTE");
		this.quickAnimAdd("singDOWN","SENPAI DOWN NOTE");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		this.setGraphicSize(this.get_width() * 6 | 0);
		this.updateHitbox();
		this.set_antialiasing(false);
		break;
	case "senpai-angry":
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/senpai" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/senpai" + ".xml","TEXT",library)));
		this.quickAnimAdd("idle","Angry Senpai Idle");
		this.quickAnimAdd("singUP","Angry Senpai UP NOTE");
		this.quickAnimAdd("singLEFT","Angry Senpai LEFT NOTE");
		this.quickAnimAdd("singRIGHT","Angry Senpai RIGHT NOTE");
		this.quickAnimAdd("singDOWN","Angry Senpai DOWN NOTE");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		this.setGraphicSize(this.get_width() * 6 | 0);
		this.updateHitbox();
		this.set_antialiasing(false);
		break;
	case "spirit":
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSpriteSheetPacker(Paths.getPath("images/" + "characters/spirit" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/spirit" + ".txt","TEXT",library)));
		this.quickAnimAdd("idle","idle spirit_");
		this.quickAnimAdd("singUP","up_");
		this.quickAnimAdd("singRIGHT","right_");
		this.quickAnimAdd("singLEFT","left_");
		this.quickAnimAdd("singDOWN","spirit down_");
		this.loadOffsetFile(this.curCharacter);
		this.setGraphicSize(this.get_width() * 6 | 0);
		this.updateHitbox();
		this.playAnim("idle");
		this.set_antialiasing(false);
		break;
	case "spooky":
		var library = null;
		tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/spooky_kids_assets" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/spooky_kids_assets" + ".xml","TEXT",library));
		this.set_frames(tex);
		this.quickAnimAdd("singUP","spooky UP NOTE");
		this.quickAnimAdd("singDOWN","spooky DOWN note");
		this.quickAnimAdd("singLEFT","note sing left");
		this.quickAnimAdd("singRIGHT","spooky sing right");
		this.animation.addByIndices("danceLeft","spooky dance idle",[0,2,6],"",12,false);
		this.animation.addByIndices("danceRight","spooky dance idle",[8,10,12,14],"",12,false);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("danceRight");
		break;
	case "tankman":
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "characters/tankmanCaptain" + ".png","IMAGE",library),Paths.getPath("images/" + "characters/tankmanCaptain" + ".xml","TEXT",library)));
		this.quickAnimAdd("idle","Tankman Idle Dance");
		if(isPlayer) {
			this.quickAnimAdd("singLEFT","Tankman Note Left ");
			this.quickAnimAdd("singRIGHT","Tankman Right Note ");
			this.quickAnimAdd("singLEFTmiss","Tankman Note Left MISS");
			this.quickAnimAdd("singRIGHTmiss","Tankman Right Note MISS");
		} else {
			this.quickAnimAdd("singLEFT","Tankman Right Note ");
			this.quickAnimAdd("singRIGHT","Tankman Note Left ");
			this.quickAnimAdd("singLEFTmiss","Tankman Right Note MISS");
			this.quickAnimAdd("singRIGHTmiss","Tankman Note Left MISS");
		}
		this.quickAnimAdd("singUP","Tankman UP note ");
		this.quickAnimAdd("singDOWN","Tankman DOWN note ");
		this.quickAnimAdd("singUPmiss","Tankman UP note MISS");
		this.quickAnimAdd("singDOWNmiss","Tankman DOWN note MISS");
		this.quickAnimAdd("singDOWN-alt","PRETTY GOOD");
		this.quickAnimAdd("singUP-alt","TANKMAN UGH");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		this.set_flipX(true);
		break;
	}
	this.dance();
	this.animation.finish();
	if(isPlayer) {
		this.set_flipX(!this.flipX);
		if(!StringTools.startsWith(this.curCharacter,"bf")) {
			var oldRight = this.animation._animations.h["singRIGHT"].frames;
			this.animation._animations.h["singRIGHT"].frames = this.animation._animations.h["singLEFT"].frames;
			this.animation._animations.h["singLEFT"].frames = oldRight;
			if(this.animation._animations.h["singRIGHTmiss"] != null) {
				var oldMiss = this.animation._animations.h["singRIGHTmiss"].frames;
				this.animation._animations.h["singRIGHTmiss"].frames = this.animation._animations.h["singLEFTmiss"].frames;
				this.animation._animations.h["singLEFTmiss"].frames = oldMiss;
			}
		}
	}
};
$hxClasses["Character"] = Character;
Character.__name__ = "Character";
Character.__super__ = flixel_FlxSprite;
Character.prototype = $extend(flixel_FlxSprite.prototype,{
	animOffsets: null
	,debugMode: null
	,isPlayer: null
	,curCharacter: null
	,holdTimer: null
	,animationNotes: null
	,loadMappedAnims: function() {
		var sections = Song.loadFromJson("picospeaker","stress").notes;
		var _g = 0;
		while(_g < sections.length) {
			var section = sections[_g];
			++_g;
			var _g1 = 0;
			var _g2 = section.sectionNotes;
			while(_g1 < _g2.length) {
				var note = _g2[_g1];
				++_g1;
				this.animationNotes.push(note);
			}
		}
		TankmenBG.animationNotes = this.animationNotes;
		haxe_Log.trace(this.animationNotes,{ fileName : "source/Character.hx", lineNumber : 511, className : "Character", methodName : "loadMappedAnims"});
		this.animationNotes.sort($bind(this,this.sortAnims));
	}
	,sortAnims: function(x,y) {
		if(x[0] < y[0]) {
			return -1;
		} else if(x[0] > y[0]) {
			return 1;
		} else {
			return 0;
		}
	}
	,quickAnimAdd: function(Name,Prefix) {
		this.animation.addByPrefix(Name,Prefix,24,false);
	}
	,loadOffsetFile: function(char) {
		var offsets = CoolUtil.coolTextFile(Paths.getPath("images/characters/" + char + "Offsets.txt","TEXT",null));
		var _g = 0;
		while(_g < offsets.length) {
			var i = offsets[_g];
			++_g;
			var split = i.split(" ");
			this.addOffset(split[0],Std.parseInt(split[1]),Std.parseInt(split[2]));
		}
	}
	,update: function(elapsed) {
		if(!StringTools.startsWith(this.curCharacter,"bf")) {
			if(StringTools.startsWith(this.animation._curAnim.name,"sing")) {
				this.holdTimer += elapsed;
			}
			var dadVar = 4;
			if(this.curCharacter == "dad") {
				dadVar = 6.1;
			}
			if(this.holdTimer >= Conductor.stepCrochet * dadVar * 0.001) {
				this.dance();
				this.holdTimer = 0;
			}
		}
		if(StringTools.endsWith(this.curCharacter,"-car") && !StringTools.startsWith(this.animation._curAnim.name,"sing") && this.animation._curAnim.finished) {
			this.playAnim("idleHair");
		}
		switch(this.curCharacter) {
		case "gf":
			if(this.animation._curAnim.name == "hairFall" && this.animation._curAnim.finished) {
				this.playAnim("danceRight");
			}
			break;
		case "pico-speaker":
			if(this.animationNotes.length > 0 && Conductor.songPosition > this.animationNotes[0][0]) {
				haxe_Log.trace("played shoot anim" + this.animationNotes[0][1],{ fileName : "source/Character.hx", lineNumber : 568, className : "Character", methodName : "update"});
				var shotDirection = 1;
				if(this.animationNotes[0][1] >= 2) {
					shotDirection = 3;
				}
				shotDirection += flixel_FlxG.random.int(0,1);
				this.playAnim("shoot" + shotDirection,true);
				this.animationNotes.shift();
			}
			if(this.animation._curAnim.finished) {
				this.playAnim(this.animation._curAnim.name,false,false,this.animation._curAnim.frames.length - 3);
			}
			break;
		}
		flixel_FlxSprite.prototype.update.call(this,elapsed);
	}
	,danced: null
	,dance: function() {
		if(!this.debugMode) {
			switch(this.curCharacter) {
			case "gf":case "gf-car":case "gf-christmas":case "gf-pixel":case "gf-tankmen":
				if(!StringTools.startsWith(this.animation._curAnim.name,"hair")) {
					this.danced = !this.danced;
					if(this.danced) {
						this.playAnim("danceRight");
					} else {
						this.playAnim("danceLeft");
					}
				}
				break;
			case "pico-speaker":
				break;
			case "spooky":
				this.danced = !this.danced;
				if(this.danced) {
					this.playAnim("danceRight");
				} else {
					this.playAnim("danceLeft");
				}
				break;
			case "tankman":
				if(!StringTools.endsWith(this.animation._curAnim.name,"DOWN-alt")) {
					this.playAnim("idle");
				}
				break;
			default:
				this.playAnim("idle");
			}
		}
	}
	,playAnim: function(AnimName,Force,Reversed,Frame) {
		if(Frame == null) {
			Frame = 0;
		}
		if(Reversed == null) {
			Reversed = false;
		}
		if(Force == null) {
			Force = false;
		}
		this.animation.play(AnimName,Force,Reversed,Frame);
		var daOffset = this.animOffsets.h[AnimName];
		if(Object.prototype.hasOwnProperty.call(this.animOffsets.h,AnimName)) {
			this.offset.set(daOffset[0],daOffset[1]);
		} else {
			this.offset.set(0,0);
		}
		if(this.curCharacter == "gf") {
			if(AnimName == "singLEFT") {
				this.danced = true;
			} else if(AnimName == "singRIGHT") {
				this.danced = false;
			}
			if(AnimName == "singUP" || AnimName == "singDOWN") {
				this.danced = !this.danced;
			}
		}
	}
	,addOffset: function(name,x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var v = [x,y];
		this.animOffsets.h[name] = v;
	}
	,__class__: Character
});
var Boyfriend = function(x,y,char) {
	if(char == null) {
		char = "bf";
	}
	this.startedDeath = false;
	this.stunned = false;
	Character.call(this,x,y,char,true);
};
$hxClasses["Boyfriend"] = Boyfriend;
Boyfriend.__name__ = "Boyfriend";
Boyfriend.__super__ = Character;
Boyfriend.prototype = $extend(Character.prototype,{
	stunned: null
	,startedDeath: null
	,update: function(elapsed) {
		if(!this.debugMode) {
			if(StringTools.startsWith(this.animation._curAnim.name,"sing")) {
				this.holdTimer += elapsed;
			} else {
				this.holdTimer = 0;
			}
			if(StringTools.endsWith(this.animation._curAnim.name,"miss") && this.animation._curAnim.finished && !this.debugMode) {
				this.playAnim("idle",true,false,10);
			}
			if(this.animation._curAnim.name == "firstDeath" && this.animation._curAnim.finished && this.startedDeath) {
				this.playAnim("deathLoop");
			}
		}
		Character.prototype.update.call(this,elapsed);
	}
	,__class__: Boyfriend
});
var flixel_group_FlxTypedGroup = function(MaxSize) {
	if(MaxSize == null) {
		MaxSize = 0;
	}
	this._marker = 0;
	this.length = 0;
	flixel_FlxBasic.call(this);
	this.members = [];
	this.set_maxSize(Math.abs(MaxSize) | 0);
	this.flixelType = 2;
};
$hxClasses["flixel.group.FlxTypedGroup"] = flixel_group_FlxTypedGroup;
flixel_group_FlxTypedGroup.__name__ = "flixel.group.FlxTypedGroup";
flixel_group_FlxTypedGroup.overlaps = function(Callback,Group,X,Y,InScreenSpace,Camera) {
	var result = false;
	if(Group != null) {
		var i = 0;
		var l = Group.length;
		var basic;
		while(i < l) {
			basic = Group.members[i++];
			if(basic != null && Callback(basic,X,Y,InScreenSpace,Camera)) {
				result = true;
				break;
			}
		}
	}
	return result;
};
flixel_group_FlxTypedGroup.resolveGroup = function(ObjectOrGroup) {
	var group = null;
	if(ObjectOrGroup != null) {
		if(ObjectOrGroup.flixelType == 2) {
			group = ObjectOrGroup;
		} else if(ObjectOrGroup.flixelType == 4) {
			var spriteGroup = ObjectOrGroup;
			group = spriteGroup.group;
		}
	}
	return group;
};
flixel_group_FlxTypedGroup.__super__ = flixel_FlxBasic;
flixel_group_FlxTypedGroup.prototype = $extend(flixel_FlxBasic.prototype,{
	members: null
	,maxSize: null
	,length: null
	,_memberAdded: null
	,_memberRemoved: null
	,_marker: null
	,destroy: function() {
		flixel_FlxBasic.prototype.destroy.call(this);
		flixel_util_FlxDestroyUtil.destroy(this._memberAdded);
		flixel_util_FlxDestroyUtil.destroy(this._memberRemoved);
		if(this.members != null) {
			var i = 0;
			var basic = null;
			while(i < this.length) {
				basic = this.members[i++];
				if(basic != null) {
					basic.destroy();
				}
			}
			this.members = null;
		}
	}
	,update: function(elapsed) {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.active) {
				basic.update(elapsed);
			}
		}
	}
	,draw: function() {
		var i = 0;
		var basic = null;
		var oldDefaultCameras = flixel_FlxCamera._defaultCameras;
		if(this.get_cameras() != null) {
			flixel_FlxCamera._defaultCameras = this.get_cameras();
		}
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.visible) {
				basic.draw();
			}
		}
		flixel_FlxCamera._defaultCameras = oldDefaultCameras;
	}
	,add: function(Object1) {
		if(Object1 == null) {
			return null;
		}
		if(this.members.indexOf(Object1) >= 0) {
			return Object1;
		}
		var index = this.getFirstNull();
		if(index != -1) {
			this.members[index] = Object1;
			if(index >= this.length) {
				this.length = index + 1;
			}
			if(this._memberAdded != null) {
				this._memberAdded.dispatch(Object1);
			}
			return Object1;
		}
		if(this.maxSize > 0 && this.length >= this.maxSize) {
			return Object1;
		}
		this.members.push(Object1);
		this.length++;
		if(this._memberAdded != null) {
			this._memberAdded.dispatch(Object1);
		}
		return Object1;
	}
	,insert: function(position,object) {
		if(object == null) {
			return null;
		}
		if(this.members.indexOf(object) >= 0) {
			return object;
		}
		if(position < this.length && this.members[position] == null) {
			this.members[position] = object;
			if(this._memberAdded != null) {
				this._memberAdded.dispatch(object);
			}
			return object;
		}
		if(this.maxSize > 0 && this.length >= this.maxSize) {
			return object;
		}
		this.members.splice(position,0,object);
		this.length++;
		if(this._memberAdded != null) {
			this._memberAdded.dispatch(object);
		}
		return object;
	}
	,recycle: function(ObjectClass,ObjectFactory,Force,Revive) {
		if(Revive == null) {
			Revive = true;
		}
		if(Force == null) {
			Force = false;
		}
		var basic = null;
		if(this.maxSize > 0) {
			if(this.length < this.maxSize) {
				var object = null;
				if(ObjectFactory != null) {
					object = ObjectFactory();
					this.add(object);
				} else if(ObjectClass != null) {
					object = Type.createInstance(ObjectClass,[]);
					this.add(object);
				}
				return object;
			} else {
				basic = this.members[this._marker++];
				if(this._marker >= this.maxSize) {
					this._marker = 0;
				}
				if(Revive) {
					basic.revive();
				}
				return basic;
			}
		} else {
			basic = this.getFirstAvailable(ObjectClass,Force);
			if(basic != null) {
				if(Revive) {
					basic.revive();
				}
				return basic;
			}
			var object = null;
			if(ObjectFactory != null) {
				object = ObjectFactory();
				this.add(object);
			} else if(ObjectClass != null) {
				object = Type.createInstance(ObjectClass,[]);
				this.add(object);
			}
			return object;
		}
	}
	,recycleCreateObject: function(ObjectClass,ObjectFactory) {
		var object = null;
		if(ObjectFactory != null) {
			object = ObjectFactory();
			this.add(object);
		} else if(ObjectClass != null) {
			object = Type.createInstance(ObjectClass,[]);
			this.add(object);
		}
		return object;
	}
	,remove: function(Object1,Splice) {
		if(Splice == null) {
			Splice = false;
		}
		if(this.members == null) {
			return null;
		}
		var index = this.members.indexOf(Object1);
		if(index < 0) {
			return null;
		}
		if(Splice) {
			this.members.splice(index,1);
			this.length--;
		} else {
			this.members[index] = null;
		}
		if(this._memberRemoved != null) {
			this._memberRemoved.dispatch(Object1);
		}
		return Object1;
	}
	,replace: function(OldObject,NewObject) {
		var index = this.members.indexOf(OldObject);
		if(index < 0) {
			return null;
		}
		this.members[index] = NewObject;
		if(this._memberRemoved != null) {
			this._memberRemoved.dispatch(OldObject);
		}
		if(this._memberAdded != null) {
			this._memberAdded.dispatch(NewObject);
		}
		return NewObject;
	}
	,sort: function(Function1,Order) {
		if(Order == null) {
			Order = -1;
		}
		var _g = Function1;
		var a1 = Order;
		var tmp = function(a2,a3) {
			return _g(a1,a2,a3);
		};
		this.members.sort(tmp);
	}
	,getFirstAvailable: function(ObjectClass,Force) {
		if(Force == null) {
			Force = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && !basic.exists && (ObjectClass == null || js_Boot.__instanceof(basic,ObjectClass))) {
				var tmp;
				if(Force) {
					var c = js_Boot.getClass(basic);
					tmp = c.__name__ != ObjectClass.__name__;
				} else {
					tmp = false;
				}
				if(tmp) {
					continue;
				}
				return this.members[i - 1];
			}
		}
		return null;
	}
	,getFirstNull: function() {
		var i = 0;
		while(i < this.length) {
			if(this.members[i] == null) {
				return i;
			}
			++i;
		}
		return -1;
	}
	,getFirstExisting: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists) {
				return basic;
			}
		}
		return null;
	}
	,getFirstAlive: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.alive) {
				return basic;
			}
		}
		return null;
	}
	,getFirstDead: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && !basic.alive) {
				return basic;
			}
		}
		return null;
	}
	,countLiving: function() {
		var i = 0;
		var count = -1;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(count < 0) {
					count = 0;
				}
				if(basic.exists && basic.alive) {
					++count;
				}
			}
		}
		return count;
	}
	,countDead: function() {
		var i = 0;
		var count = -1;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(count < 0) {
					count = 0;
				}
				if(!basic.alive) {
					++count;
				}
			}
		}
		return count;
	}
	,getRandom: function(StartIndex,Length) {
		if(Length == null) {
			Length = 0;
		}
		if(StartIndex == null) {
			StartIndex = 0;
		}
		if(StartIndex < 0) {
			StartIndex = 0;
		}
		if(Length <= 0) {
			Length = this.length;
		}
		return flixel_FlxG.random.getObject_flixel_group_FlxTypedGroup_T(this.members,null,StartIndex,Length);
	}
	,clear: function() {
		this.length = 0;
		if(this._memberRemoved != null) {
			var _g = 0;
			var _g1 = this.members;
			while(_g < _g1.length) {
				var member = _g1[_g];
				++_g;
				if(member != null) {
					this._memberRemoved.dispatch(member);
				}
			}
		}
		flixel_util_FlxArrayUtil.clearArray(this.members);
	}
	,kill: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists) {
				basic.kill();
			}
		}
		flixel_FlxBasic.prototype.kill.call(this);
	}
	,revive: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && !basic.exists) {
				basic.revive();
			}
		}
		flixel_FlxBasic.prototype.revive.call(this);
	}
	,iterator: function(filter) {
		return new flixel_group_FlxTypedGroupIterator(this.members,filter);
	}
	,forEach: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(Recurse) {
					var group = flixel_group_FlxTypedGroup.resolveGroup(basic);
					if(group != null) {
						group.forEach(Function1,Recurse);
					}
				}
				Function1(basic);
			}
		}
	}
	,forEachAlive: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.alive) {
				if(Recurse) {
					var group = flixel_group_FlxTypedGroup.resolveGroup(basic);
					if(group != null) {
						group.forEachAlive(Function1,Recurse);
					}
				}
				Function1(basic);
			}
		}
	}
	,forEachDead: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && !basic.alive) {
				if(Recurse) {
					var group = flixel_group_FlxTypedGroup.resolveGroup(basic);
					if(group != null) {
						group.forEachDead(Function1,Recurse);
					}
				}
				Function1(basic);
			}
		}
	}
	,forEachExists: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists) {
				if(Recurse) {
					var group = flixel_group_FlxTypedGroup.resolveGroup(basic);
					if(group != null) {
						group.forEachExists(Function1,Recurse);
					}
				}
				Function1(basic);
			}
		}
	}
	,forEachOfType: function(ObjectClass,Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(Recurse) {
					var group = flixel_group_FlxTypedGroup.resolveGroup(basic);
					if(group != null) {
						group.forEachOfType(ObjectClass,Function1,Recurse);
					}
				}
				if(js_Boot.__instanceof(basic,ObjectClass)) {
					Function1(basic);
				}
			}
		}
	}
	,set_maxSize: function(Size) {
		this.maxSize = Math.abs(Size) | 0;
		if(this._marker >= this.maxSize) {
			this._marker = 0;
		}
		if(this.maxSize == 0 || this.members == null || this.maxSize >= this.length) {
			return this.maxSize;
		}
		var i = this.maxSize;
		var l = this.length;
		var basic = null;
		while(i < l) {
			basic = this.members[i++];
			if(basic != null) {
				if(this._memberRemoved != null) {
					this._memberRemoved.dispatch(basic);
				}
				basic.destroy();
			}
		}
		flixel_util_FlxArrayUtil.setLength_flixel_group_FlxTypedGroup_T(this.members,this.maxSize);
		this.length = this.members.length;
		return this.maxSize;
	}
	,get_memberAdded: function() {
		if(this._memberAdded == null) {
			this._memberAdded = new flixel_util__$FlxSignal_FlxSignal1();
		}
		return this._memberAdded;
	}
	,get_memberRemoved: function() {
		if(this._memberRemoved == null) {
			this._memberRemoved = new flixel_util__$FlxSignal_FlxSignal1();
		}
		return this._memberRemoved;
	}
	,__class__: flixel_group_FlxTypedGroup
	,__properties__: $extend(flixel_FlxBasic.prototype.__properties__,{get_memberRemoved:"get_memberRemoved",get_memberAdded:"get_memberAdded",set_maxSize:"set_maxSize"})
});
var flixel_FlxState = function(MaxSize) {
	this._requestSubStateReset = false;
	this.destroySubStates = true;
	this.persistentDraw = true;
	this.persistentUpdate = false;
	flixel_group_FlxTypedGroup.call(this,MaxSize);
};
$hxClasses["flixel.FlxState"] = flixel_FlxState;
flixel_FlxState.__name__ = "flixel.FlxState";
flixel_FlxState.__super__ = flixel_group_FlxTypedGroup;
flixel_FlxState.prototype = $extend(flixel_group_FlxTypedGroup.prototype,{
	persistentUpdate: null
	,persistentDraw: null
	,destroySubStates: null
	,subState: null
	,_requestedSubState: null
	,_requestSubStateReset: null
	,_subStateOpened: null
	,_subStateClosed: null
	,create: function() {
	}
	,draw: function() {
		if(this.persistentDraw || this.subState == null) {
			flixel_group_FlxTypedGroup.prototype.draw.call(this);
		}
		if(this.subState != null) {
			this.subState.draw();
		}
	}
	,openSubState: function(SubState) {
		this._requestSubStateReset = true;
		this._requestedSubState = SubState;
	}
	,closeSubState: function() {
		this._requestSubStateReset = true;
	}
	,resetSubState: function() {
		if(this.subState != null) {
			if(this.subState.closeCallback != null) {
				this.subState.closeCallback();
			}
			if(this._subStateClosed != null) {
				this._subStateClosed.dispatch(this.subState);
			}
			if(this.destroySubStates) {
				this.subState.destroy();
			}
		}
		this.subState = this._requestedSubState;
		this._requestedSubState = null;
		if(this.subState != null) {
			if(!this.persistentUpdate) {
				flixel_FlxG.inputs.onStateSwitch();
			}
			this.subState._parentState = this;
			if(!this.subState._created) {
				this.subState._created = true;
				this.subState.create();
			}
			if(this.subState.openCallback != null) {
				this.subState.openCallback();
			}
			if(this._subStateOpened != null) {
				this._subStateOpened.dispatch(this.subState);
			}
		}
	}
	,destroy: function() {
		flixel_util_FlxDestroyUtil.destroy(this._subStateOpened);
		flixel_util_FlxDestroyUtil.destroy(this._subStateClosed);
		if(this.subState != null) {
			this.subState.destroy();
			this.subState = null;
		}
		flixel_group_FlxTypedGroup.prototype.destroy.call(this);
	}
	,switchTo: function(nextState) {
		return true;
	}
	,onFocusLost: function() {
	}
	,onFocus: function() {
	}
	,onResize: function(Width,Height) {
	}
	,tryUpdate: function(elapsed) {
		if(this.persistentUpdate || this.subState == null) {
			this.update(elapsed);
		}
		if(this._requestSubStateReset) {
			this._requestSubStateReset = false;
			this.resetSubState();
		}
		if(this.subState != null) {
			this.subState.tryUpdate(elapsed);
		}
	}
	,get_bgColor: function() {
		return flixel_FlxG.cameras.get_bgColor();
	}
	,set_bgColor: function(Value) {
		return flixel_FlxG.cameras.set_bgColor(Value);
	}
	,get_subStateOpened: function() {
		if(this._subStateOpened == null) {
			this._subStateOpened = new flixel_util__$FlxSignal_FlxSignal1();
		}
		return this._subStateOpened;
	}
	,get_subStateClosed: function() {
		if(this._subStateClosed == null) {
			this._subStateClosed = new flixel_util__$FlxSignal_FlxSignal1();
		}
		return this._subStateClosed;
	}
	,__class__: flixel_FlxState
	,__properties__: $extend(flixel_group_FlxTypedGroup.prototype.__properties__,{get_subStateClosed:"get_subStateClosed",get_subStateOpened:"get_subStateOpened",set_bgColor:"set_bgColor",get_bgColor:"get_bgColor"})
});
var flixel_addons_transition_FlxTransitionableState = function(TransIn,TransOut) {
	this._exiting = false;
	this.transOutFinished = false;
	this.transIn = TransIn;
	this.transOut = TransOut;
	if(this.transIn == null && flixel_addons_transition_FlxTransitionableState.defaultTransIn != null) {
		this.transIn = flixel_addons_transition_FlxTransitionableState.defaultTransIn;
	}
	if(this.transOut == null && flixel_addons_transition_FlxTransitionableState.defaultTransOut != null) {
		this.transOut = flixel_addons_transition_FlxTransitionableState.defaultTransOut;
	}
	flixel_FlxState.call(this);
};
$hxClasses["flixel.addons.transition.FlxTransitionableState"] = flixel_addons_transition_FlxTransitionableState;
flixel_addons_transition_FlxTransitionableState.__name__ = "flixel.addons.transition.FlxTransitionableState";
flixel_addons_transition_FlxTransitionableState.__super__ = flixel_FlxState;
flixel_addons_transition_FlxTransitionableState.prototype = $extend(flixel_FlxState.prototype,{
	transIn: null
	,transOut: null
	,destroy: function() {
		flixel_FlxState.prototype.destroy.call(this);
		this.transIn = null;
		this.transOut = null;
		this._onExit = null;
	}
	,create: function() {
		flixel_FlxState.prototype.create.call(this);
		this.transitionIn();
	}
	,switchTo: function(nextState) {
		if(!this.get_hasTransOut()) {
			return true;
		}
		if(!this._exiting) {
			this.transitionToState(nextState);
		}
		return this.transOutFinished;
	}
	,transitionToState: function(nextState) {
		this._exiting = true;
		this.transitionOut(function() {
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		});
		if(flixel_addons_transition_FlxTransitionableState.skipNextTransOut) {
			flixel_addons_transition_FlxTransitionableState.skipNextTransOut = false;
			this.finishTransOut();
		}
	}
	,transitionIn: function() {
		if(this.transIn != null && this.transIn.type != "none") {
			if(flixel_addons_transition_FlxTransitionableState.skipNextTransIn) {
				flixel_addons_transition_FlxTransitionableState.skipNextTransIn = false;
				if(this.finishTransIn != null) {
					this.finishTransIn();
				}
				return;
			}
			var _trans = this.createTransition(this.transIn);
			_trans.setStatus(3);
			this.openSubState(_trans);
			_trans.set_finishCallback($bind(this,this.finishTransIn));
			_trans.start(1);
		}
	}
	,transitionOut: function(OnExit) {
		this._onExit = OnExit;
		if(this.get_hasTransOut()) {
			var _trans = this.createTransition(this.transOut);
			_trans.setStatus(2);
			this.openSubState(_trans);
			_trans.set_finishCallback($bind(this,this.finishTransOut));
			_trans.start(0);
		} else {
			this._onExit();
		}
	}
	,transOutFinished: null
	,_exiting: null
	,_onExit: null
	,get_hasTransIn: function() {
		if(this.transIn != null) {
			return this.transIn.type != "none";
		} else {
			return false;
		}
	}
	,get_hasTransOut: function() {
		if(this.transOut != null) {
			return this.transOut.type != "none";
		} else {
			return false;
		}
	}
	,createTransition: function(data) {
		switch(data.type) {
		case "fade":
			return new flixel_addons_transition_Transition(data);
		case "tiles":
			return new flixel_addons_transition_Transition(data);
		default:
			return null;
		}
	}
	,finishTransIn: function() {
		this.closeSubState();
	}
	,finishTransOut: function() {
		this.transOutFinished = true;
		if(!this._exiting) {
			this.closeSubState();
		}
		if(this._onExit != null) {
			this._onExit();
		}
	}
	,__class__: flixel_addons_transition_FlxTransitionableState
	,__properties__: $extend(flixel_FlxState.prototype.__properties__,{get_hasTransOut:"get_hasTransOut",get_hasTransIn:"get_hasTransIn"})
});
var flixel_addons_ui_interfaces_IEventGetter = function() { };
$hxClasses["flixel.addons.ui.interfaces.IEventGetter"] = flixel_addons_ui_interfaces_IEventGetter;
flixel_addons_ui_interfaces_IEventGetter.__name__ = "flixel.addons.ui.interfaces.IEventGetter";
flixel_addons_ui_interfaces_IEventGetter.__isInterface__ = true;
flixel_addons_ui_interfaces_IEventGetter.prototype = {
	getEvent: null
	,getRequest: null
	,__class__: flixel_addons_ui_interfaces_IEventGetter
};
var flixel_addons_ui_interfaces_IFlxUIState = function() { };
$hxClasses["flixel.addons.ui.interfaces.IFlxUIState"] = flixel_addons_ui_interfaces_IFlxUIState;
flixel_addons_ui_interfaces_IFlxUIState.__name__ = "flixel.addons.ui.interfaces.IFlxUIState";
flixel_addons_ui_interfaces_IFlxUIState.__isInterface__ = true;
flixel_addons_ui_interfaces_IFlxUIState.__interfaces__ = [flixel_addons_ui_interfaces_IEventGetter];
flixel_addons_ui_interfaces_IFlxUIState.prototype = {
	forceFocus: null
	,tooltips: null
	,cursor: null
	,_tongue: null
	,__class__: flixel_addons_ui_interfaces_IFlxUIState
};
var flixel_addons_ui_FlxUIState = function(TransIn,TransOut) {
	this.getTextFallback = null;
	this._reload_countdown = 0;
	this._reload = false;
	this.reload_ui_on_resize = false;
	this._xml_id = "";
	this._cursorHidden = false;
	this.hideCursorOnSubstate = false;
	this.cursor = null;
	flixel_addons_transition_FlxTransitionableState.call(this,TransIn,TransOut);
};
$hxClasses["flixel.addons.ui.FlxUIState"] = flixel_addons_ui_FlxUIState;
flixel_addons_ui_FlxUIState.__name__ = "flixel.addons.ui.FlxUIState";
flixel_addons_ui_FlxUIState.__interfaces__ = [flixel_addons_ui_interfaces_IFlxUIState,flixel_addons_ui_interfaces_IEventGetter];
flixel_addons_ui_FlxUIState.__super__ = flixel_addons_transition_FlxTransitionableState;
flixel_addons_ui_FlxUIState.prototype = $extend(flixel_addons_transition_FlxTransitionableState.prototype,{
	destroyed: null
	,cursor: null
	,hideCursorOnSubstate: null
	,_cursorHidden: null
	,tooltips: null
	,_xml_id: null
	,_makeCursor: null
	,_ui_vars: null
	,_ui: null
	,_tongue: null
	,reload_ui_on_resize: null
	,_reload: null
	,_reload_countdown: null
	,getTextFallback: null
	,create: function() {
		if(flixel_addons_ui_FlxUIState.static_tongue != null) {
			this._tongue = flixel_addons_ui_FlxUIState.static_tongue;
		}
		if(this._makeCursor == true) {
			this.cursor = this.createCursor();
		}
		this.tooltips = new flixel_addons_ui_FlxUITooltipManager(this);
		var liveFile = null;
		this._ui = this.createUI(null,this,null,this._tongue);
		this.add(this._ui);
		if(this.getTextFallback != null) {
			this._ui.getTextFallback = this.getTextFallback;
		}
		if(this._xml_id != null && this._xml_id != "") {
			var data = null;
			var errorMsg = "";
			if(liveFile == null) {
				try {
					data = flixel_addons_ui_U.xml(this._xml_id);
				} catch( _g ) {
					haxe_NativeStackTrace.lastError = _g;
					var _g1 = haxe_Exception.caught(_g).unwrap();
					if(typeof(_g1) == "string") {
						var msg = _g1;
						errorMsg = msg;
					} else {
						throw _g;
					}
				}
				if(data == null) {
					try {
						data = flixel_addons_ui_U.xml(this._xml_id,"xml",true,"");
					} catch( _g ) {
						haxe_NativeStackTrace.lastError = _g;
						var _g1 = haxe_Exception.caught(_g).unwrap();
						if(typeof(_g1) == "string") {
							var msg2 = _g1;
							errorMsg += ", " + msg2;
						} else {
							throw _g;
						}
					}
				}
			}
			if(data == null) {
				if(liveFile != null) {
					this.loadUIFromData(liveFile);
				}
			} else {
				this.loadUIFromData(data);
			}
		} else {
			this.loadUIFromData(null);
		}
		if(this.cursor != null && this._ui != null) {
			this.add(this.cursor);
			this.cursor.addWidgetsFromUI(this._ui);
			this.cursor.findVisibleLocation(0);
		}
		this.tooltips.init();
		flixel_addons_transition_FlxTransitionableState.prototype.create.call(this);
		this.cleanup();
	}
	,update: function(elapsed) {
		flixel_addons_transition_FlxTransitionableState.prototype.update.call(this,elapsed);
		if(this.tooltips != null) {
			this.tooltips.update(elapsed);
		}
		if(this._reload) {
			if(this._reload_countdown > 0) {
				this._reload_countdown--;
				if(this._reload_countdown == 0) {
					this.reloadUI();
				}
			}
		}
	}
	,cleanup: function() {
		this._ui.cleanup();
	}
	,_cleanupUIVars: function() {
		if(this._ui_vars != null) {
			var key = haxe_ds_StringMap.keysIterator(this._ui_vars.h);
			while(key.hasNext()) {
				var key1 = key.next();
				var _this = this._ui_vars;
				if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
					delete(_this.h[key1]);
				}
			}
			this._ui_vars = null;
		}
	}
	,setUIVariable: function(key,value) {
		if(this._ui != null) {
			this._ui.setVariable(key,value);
		} else {
			if(this._ui_vars == null) {
				this._ui_vars = new haxe_ds_StringMap();
			}
			this._ui_vars.h[key] = value;
		}
	}
	,resizeScreen: function(width,height) {
		if(height == null) {
			height = 600;
		}
		if(width == null) {
			width = 800;
		}
	}
	,openSubState: function(SubState) {
		if(this.cursor != null && this.hideCursorOnSubstate && this.cursor.visible == true) {
			this._cursorHidden = true;
			this.cursor.set_visible(false);
		}
		flixel_addons_transition_FlxTransitionableState.prototype.openSubState.call(this,SubState);
	}
	,closeSubState: function() {
		if(this.cursor != null && this.hideCursorOnSubstate && this._cursorHidden) {
			this._cursorHidden = false;
			this.cursor.set_visible(true);
		}
		flixel_addons_transition_FlxTransitionableState.prototype.closeSubState.call(this);
	}
	,onResize: function(Width,Height) {
		if(this.reload_ui_on_resize) {
			flixel_FlxG.scaleMode.onMeasure(Width,Height);
			this._reload_countdown = 1;
			this._reload = true;
		}
	}
	,onShowTooltip: function(t) {
	}
	,destroy: function() {
		this.destroyed = true;
		if(this._ui != null) {
			this._ui.destroy();
			this.remove(this._ui,true);
			this._ui = null;
		}
		if(this.tooltips != null) {
			this.tooltips.destroy();
			this.tooltips = null;
		}
		flixel_addons_transition_FlxTransitionableState.prototype.destroy.call(this);
	}
	,forceFocus: function(b,thing) {
		if(this._ui != null) {
			if(b) {
				this._ui.set_focus(thing);
			} else {
				this._ui.set_focus(null);
			}
		}
	}
	,onCursorEvent: function(code,target) {
		this.getEvent(code,target,null);
	}
	,getEvent: function(id,sender,data,params) {
	}
	,getRequest: function(id,sender,data,params) {
		return null;
	}
	,getText: function(Flag,Context,Safe) {
		if(Safe == null) {
			Safe = true;
		}
		if(Context == null) {
			Context = "ui";
		}
		if(this._tongue != null) {
			return this._tongue.get(Flag,Context,Safe);
		}
		if(this.getTextFallback != null) {
			return this.getTextFallback(Flag,Context,Safe);
		}
		return Flag;
	}
	,createCursor: function() {
		return new flixel_addons_ui_FlxUICursor($bind(this,this.onCursorEvent));
	}
	,createUI: function(data,ptr,superIndex_,tongue_,liveFilePath_) {
		if(liveFilePath_ == null) {
			liveFilePath_ = "";
		}
		var flxui = new flixel_addons_ui_FlxUI(data,ptr,superIndex_,tongue_,liveFilePath_,this._ui_vars);
		this._cleanupUIVars();
		return flxui;
	}
	,loadUIFromData: function(data) {
		this._ui.load(data);
	}
	,reloadUI: function(e) {
		if(this._ui != null) {
			this.remove(this._ui,true);
			this._ui.destroy();
			this._ui = null;
		}
		this._ui = this.createUI(null,this,null,this._tongue);
		this.add(this._ui);
		var data = flixel_addons_ui_U.xml(this._xml_id);
		if(data != null) {
			this.loadUIFromData(data);
		}
		this._reload = false;
		this._reload_countdown = 0;
	}
	,__class__: flixel_addons_ui_FlxUIState
});
var MusicBeatState = function(TransIn,TransOut) {
	this.curBeat = 0;
	this.curStep = 0;
	flixel_addons_ui_FlxUIState.call(this,TransIn,TransOut);
};
$hxClasses["MusicBeatState"] = MusicBeatState;
MusicBeatState.__name__ = "MusicBeatState";
MusicBeatState.__super__ = flixel_addons_ui_FlxUIState;
MusicBeatState.prototype = $extend(flixel_addons_ui_FlxUIState.prototype,{
	curStep: null
	,curBeat: null
	,get_controls: function() {
		return PlayerSettings.player1.controls;
	}
	,create: function() {
		if(this.transIn != null) {
			haxe_Log.trace("reg " + Std.string(this.transIn.region),{ fileName : "source/MusicBeatState.hx", lineNumber : 22, className : "MusicBeatState", methodName : "create"});
		}
		flixel_addons_ui_FlxUIState.prototype.create.call(this);
	}
	,update: function(elapsed) {
		var oldStep = this.curStep;
		this.updateCurStep();
		this.updateBeat();
		if(oldStep != this.curStep && this.curStep >= 0) {
			this.stepHit();
		}
		flixel_addons_ui_FlxUIState.prototype.update.call(this,elapsed);
	}
	,updateBeat: function() {
		this.curBeat = Math.floor(this.curStep / 4);
	}
	,updateCurStep: function() {
		var lastChange = { stepTime : 0, songTime : 0, bpm : 0};
		var _g = 0;
		var _g1 = Conductor.bpmChangeMap.length;
		while(_g < _g1) {
			var i = _g++;
			if(Conductor.songPosition >= Conductor.bpmChangeMap[i].songTime) {
				lastChange = Conductor.bpmChangeMap[i];
			}
		}
		this.curStep = lastChange.stepTime + Math.floor((Conductor.songPosition - lastChange.songTime) / Conductor.stepCrochet);
	}
	,stepHit: function() {
		if(this.curStep % 4 == 0) {
			this.beatHit();
		}
	}
	,beatHit: function() {
	}
	,__class__: MusicBeatState
	,__properties__: $extend(flixel_addons_ui_FlxUIState.prototype.__properties__,{get_controls:"get_controls"})
});
var ChartingState = function(TransIn,TransOut) {
	this.daSpacing = 0.3;
	this.updatedSection = false;
	this.tempBpm = 0;
	this.GRID_SIZE = 40;
	this.amountSteps = 0;
	this.curSong = "Dadbattle";
	this.curSection = 0;
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["ChartingState"] = ChartingState;
ChartingState.__name__ = "ChartingState";
ChartingState.__super__ = MusicBeatState;
ChartingState.prototype = $extend(MusicBeatState.prototype,{
	_file: null
	,UI_box: null
	,curSection: null
	,bpmTxt: null
	,strumLine: null
	,curSong: null
	,amountSteps: null
	,bullshitUI: null
	,highlight: null
	,GRID_SIZE: null
	,dummyArrow: null
	,curRenderedNotes: null
	,curRenderedSustains: null
	,gridBG: null
	,_song: null
	,typingShit: null
	,curSelectedNote: null
	,tempBpm: null
	,vocals: null
	,leftIcon: null
	,rightIcon: null
	,create: function() {
		this.curSection = ChartingState.lastSection;
		this.gridBG = flixel_addons_display_FlxGridOverlay.create(this.GRID_SIZE,this.GRID_SIZE,this.GRID_SIZE * 8,this.GRID_SIZE * 16);
		this.add(this.gridBG);
		this.leftIcon = new HealthIcon("bf");
		this.rightIcon = new HealthIcon("dad");
		this.leftIcon.scrollFactor.set(1,1);
		this.rightIcon.scrollFactor.set(1,1);
		this.leftIcon.setGraphicSize(0,45);
		this.rightIcon.setGraphicSize(0,45);
		this.add(this.leftIcon);
		this.add(this.rightIcon);
		this.leftIcon.setPosition(0,-100);
		this.rightIcon.setPosition(this.gridBG.get_width() / 2,-100);
		var gridBlackLine = new flixel_FlxSprite(this.gridBG.x + this.gridBG.get_width() / 2).makeGraphic(2,this.gridBG.get_height() | 0,-16777216);
		this.add(gridBlackLine);
		this.curRenderedNotes = new flixel_group_FlxTypedGroup();
		this.curRenderedSustains = new flixel_group_FlxTypedGroup();
		if(PlayState.SONG != null) {
			this._song = PlayState.SONG;
		} else {
			this._song = { song : "Test", notes : [], bpm : 150, needsVoices : true, player1 : "bf", player2 : "dad", speed : 1, validScore : false};
		}
		flixel_FlxG.mouse.set_visible(true);
		flixel_FlxG.save.bind("funkin","ninjamuffin99");
		this.tempBpm = this._song.bpm;
		this.addSection();
		this.updateGrid();
		this.loadSong(this._song.song);
		Conductor.changeBPM(this._song.bpm);
		Conductor.mapBPMChanges(this._song);
		this.bpmTxt = new flixel_text_FlxText(1000,50,0,"",16);
		this.bpmTxt.scrollFactor.set();
		this.add(this.bpmTxt);
		this.strumLine = new flixel_FlxSprite(0,50).makeGraphic(flixel_FlxG.width / 2 | 0,4);
		this.add(this.strumLine);
		this.dummyArrow = new flixel_FlxSprite().makeGraphic(this.GRID_SIZE,this.GRID_SIZE);
		this.add(this.dummyArrow);
		var tabs = [{ name : "Song", label : "Song"},{ name : "Section", label : "Section"},{ name : "Note", label : "Note"}];
		this.UI_box = new flixel_addons_ui_FlxUITabMenu(null,null,tabs,null,true);
		this.UI_box.resize(300,400);
		this.UI_box.set_x(flixel_FlxG.width / 2);
		this.UI_box.set_y(20);
		this.add(this.UI_box);
		this.addSongUI();
		this.addSectionUI();
		this.addNoteUI();
		this.add(this.curRenderedNotes);
		this.add(this.curRenderedSustains);
		this.changeSection();
		MusicBeatState.prototype.create.call(this);
	}
	,addSongUI: function() {
		var _gthis = this;
		var UI_songTitle = new flixel_addons_ui_FlxUIInputText(10,10,70,this._song.song,8);
		this.typingShit = UI_songTitle;
		var check_voices = new flixel_addons_ui_FlxUICheckBox(10,25,null,null,"Has voice track",100);
		check_voices.set_checked(this._song.needsVoices);
		check_voices.callback = function() {
			_gthis._song.needsVoices = check_voices.checked;
			haxe_Log.trace("CHECKED!",{ fileName : "source/ChartingState.hx", lineNumber : 187, className : "ChartingState", methodName : "addSongUI"});
		};
		var check_mute_inst = new flixel_addons_ui_FlxUICheckBox(10,200,null,null,"Mute Instrumental (in editor)",100);
		check_mute_inst.set_checked(false);
		check_mute_inst.callback = function() {
			var vol = 1;
			if(check_mute_inst.checked) {
				vol = 0;
			}
			flixel_FlxG.sound.music.set_volume(vol);
		};
		var saveButton = new flixel_ui_FlxButton(110,8,"Save",function() {
			_gthis.saveLevel();
		});
		var reloadSong = new flixel_ui_FlxButton(saveButton.x + saveButton.get_width() + 10,saveButton.y,"Reload Audio",function() {
			_gthis.loadSong(_gthis._song.song);
		});
		var reloadSongJson = new flixel_ui_FlxButton(reloadSong.x,saveButton.y + 30,"Reload JSON",function() {
			_gthis.loadJson(_gthis._song.song.toLowerCase());
		});
		var loadAutosaveBtn = new flixel_ui_FlxButton(reloadSongJson.x,reloadSongJson.y + 30,"load autosave",$bind(this,this.loadAutosave));
		var stepperSpeed = new flixel_addons_ui_FlxUINumericStepper(10,80,0.1,1,0.1,10,2);
		stepperSpeed.set_value(this._song.speed);
		stepperSpeed.name = "song_speed";
		var stepperBPM = new flixel_addons_ui_FlxUINumericStepper(10,65,1,100,1,999,3);
		stepperBPM.set_value(Conductor.bpm);
		stepperBPM.name = "song_bpm";
		var characters = CoolUtil.coolTextFile(Paths.getPath("data/" + "characterList" + ".txt","TEXT",null));
		var player1DropDown = new flixel_addons_ui_FlxUIDropDownMenu(10,100,flixel_addons_ui_FlxUIDropDownMenu.makeStrIdLabelArray(characters,true),function(character) {
			_gthis._song.player1 = characters[Std.parseInt(character)];
			_gthis.updateHeads();
		});
		player1DropDown.set_selectedLabel(this._song.player1);
		var player2DropDown = new flixel_addons_ui_FlxUIDropDownMenu(140,100,flixel_addons_ui_FlxUIDropDownMenu.makeStrIdLabelArray(characters,true),function(character) {
			_gthis._song.player2 = characters[Std.parseInt(character)];
			_gthis.updateHeads();
		});
		player2DropDown.set_selectedLabel(this._song.player2);
		var tab_group_song = new flixel_addons_ui_FlxUI(null,this.UI_box);
		tab_group_song.name = "Song";
		tab_group_song.add(UI_songTitle);
		tab_group_song.add(check_voices);
		tab_group_song.add(check_mute_inst);
		tab_group_song.add(saveButton);
		tab_group_song.add(reloadSong);
		tab_group_song.add(reloadSongJson);
		tab_group_song.add(loadAutosaveBtn);
		tab_group_song.add(stepperBPM);
		tab_group_song.add(stepperSpeed);
		tab_group_song.add(player1DropDown);
		tab_group_song.add(player2DropDown);
		this.UI_box.addGroup(tab_group_song);
		this.UI_box.scrollFactor.set();
		flixel_FlxG.camera.follow(this.strumLine);
	}
	,stepperLength: null
	,check_mustHitSection: null
	,check_changeBPM: null
	,stepperSectionBPM: null
	,check_altAnim: null
	,addSectionUI: function() {
		var _gthis = this;
		var tab_group_section = new flixel_addons_ui_FlxUI(null,this.UI_box);
		tab_group_section.name = "Section";
		this.stepperLength = new flixel_addons_ui_FlxUINumericStepper(10,10,4,0,0,999,0);
		this.stepperLength.set_value(this._song.notes[this.curSection].lengthInSteps);
		this.stepperLength.name = "section_length";
		this.stepperSectionBPM = new flixel_addons_ui_FlxUINumericStepper(10,80,1,Conductor.bpm,1,999,3);
		this.stepperSectionBPM.set_value(Conductor.bpm);
		this.stepperSectionBPM.name = "section_bpm";
		var stepperCopy = new flixel_addons_ui_FlxUINumericStepper(110,130,1,1,-999,999,0);
		var copyButton = new flixel_ui_FlxButton(10,130,"Copy last section",function() {
			_gthis.copySection(stepperCopy.value | 0);
		});
		var clearSectionButton = new flixel_ui_FlxButton(10,150,"Clear",$bind(this,this.clearSection));
		var swapSection = new flixel_ui_FlxButton(10,170,"Swap section",function() {
			var _g = 0;
			var _g1 = _gthis._song.notes[_gthis.curSection].sectionNotes.length;
			while(_g < _g1) {
				var i = _g++;
				var note = _gthis._song.notes[_gthis.curSection].sectionNotes[i];
				note[1] = (note[1] + 4) % 8;
				_gthis._song.notes[_gthis.curSection].sectionNotes[i] = note;
				_gthis.updateGrid();
			}
		});
		this.check_mustHitSection = new flixel_addons_ui_FlxUICheckBox(10,30,null,null,"Must hit section",100);
		this.check_mustHitSection.name = "check_mustHit";
		this.check_mustHitSection.set_checked(true);
		this.check_altAnim = new flixel_addons_ui_FlxUICheckBox(10,400,null,null,"Alt Animation",100);
		this.check_altAnim.name = "check_altAnim";
		this.check_changeBPM = new flixel_addons_ui_FlxUICheckBox(10,60,null,null,"Change BPM",100);
		this.check_changeBPM.name = "check_changeBPM";
		tab_group_section.add(this.stepperLength);
		tab_group_section.add(this.stepperSectionBPM);
		tab_group_section.add(stepperCopy);
		tab_group_section.add(this.check_mustHitSection);
		tab_group_section.add(this.check_altAnim);
		tab_group_section.add(this.check_changeBPM);
		tab_group_section.add(copyButton);
		tab_group_section.add(clearSectionButton);
		tab_group_section.add(swapSection);
		this.UI_box.addGroup(tab_group_section);
	}
	,stepperSusLength: null
	,addNoteUI: function() {
		var tab_group_note = new flixel_addons_ui_FlxUI(null,this.UI_box);
		tab_group_note.name = "Note";
		this.stepperSusLength = new flixel_addons_ui_FlxUINumericStepper(10,10,Conductor.stepCrochet / 2,0,0,Conductor.stepCrochet * 16);
		this.stepperSusLength.set_value(0);
		this.stepperSusLength.name = "note_susLength";
		var applyLength = new flixel_ui_FlxButton(100,10,"Apply");
		tab_group_note.add(this.stepperSusLength);
		tab_group_note.add(applyLength);
		this.UI_box.addGroup(tab_group_note);
	}
	,loadSong: function(daSong) {
		var _gthis = this;
		if(flixel_FlxG.sound.music != null) {
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
		}
		flixel_FlxG.sound.playMusic("songs:assets/songs/" + daSong.toLowerCase() + "/Inst." + "mp3",0.6);
		this.vocals = new flixel_system_FlxSound().loadEmbedded("songs:assets/songs/" + daSong.toLowerCase() + "/Voices." + "mp3");
		flixel_FlxG.sound.list.add(this.vocals);
		flixel_FlxG.sound.music.pause();
		this.vocals.pause();
		flixel_FlxG.sound.music.onComplete = function() {
			_gthis.vocals.pause();
			_gthis.vocals.set_time(0);
			flixel_FlxG.sound.music.pause();
			flixel_FlxG.sound.music.set_time(0);
			_gthis.changeSection();
		};
	}
	,generateUI: function() {
		while(this.bullshitUI.members.length > 0) this.bullshitUI.remove(this.bullshitUI.members[0],true);
		var title = new flixel_text_FlxText(this.UI_box.x + 20,this.UI_box.y + 20,0);
		this.bullshitUI.add(title);
	}
	,getEvent: function(id,sender,data,params) {
		if(id == "click_check_box") {
			var check = sender;
			var label = check.getLabel().text;
			switch(label) {
			case "Alt Animation":
				this._song.notes[this.curSection].altAnim = check.checked;
				break;
			case "Change BPM":
				this._song.notes[this.curSection].changeBPM = check.checked;
				break;
			case "Must hit section":
				this._song.notes[this.curSection].mustHitSection = check.checked;
				this.updateHeads();
				break;
			}
		} else if(id == "change_numeric_stepper" && ((sender) instanceof flixel_addons_ui_FlxUINumericStepper)) {
			var nums = sender;
			var wname = nums.name;
			if(wname == "section_length") {
				this._song.notes[this.curSection].lengthInSteps = nums.value | 0;
				this.updateGrid();
			} else if(wname == "song_speed") {
				this._song.speed = nums.value;
			} else if(wname == "song_bpm") {
				this.tempBpm = nums.value;
				Conductor.mapBPMChanges(this._song);
				Conductor.changeBPM(nums.value);
			} else if(wname == "note_susLength") {
				this.curSelectedNote[2] = nums.value;
				this.updateGrid();
			} else if(wname == "section_bpm") {
				this._song.notes[this.curSection].bpm = nums.value;
				this.updateGrid();
			}
		}
	}
	,updatedSection: null
	,sectionStartTime: function() {
		var daBPM = this._song.bpm;
		var daPos = 0;
		var _g = 0;
		var _g1 = this.curSection;
		while(_g < _g1) {
			var i = _g++;
			if(this._song.notes[i].changeBPM) {
				daBPM = this._song.notes[i].bpm;
			}
			daPos += 4 * (60000 / daBPM);
		}
		return daPos;
	}
	,update: function(elapsed) {
		var _gthis = this;
		this.curStep = this.recalculateSteps();
		Conductor.songPosition = flixel_FlxG.sound.music._time;
		this._song.song = this.typingShit.text;
		this.strumLine.set_y(this.getYfromStrum((Conductor.songPosition - this.sectionStartTime()) % (Conductor.stepCrochet * this._song.notes[this.curSection].lengthInSteps)));
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(88,_this.status)) {
			this.toggleAltAnimNote();
		}
		if(this.curBeat % 4 == 0 && this.curStep >= 16 * (this.curSection + 1)) {
			haxe_Log.trace(this.curStep,{ fileName : "source/ChartingState.hx", lineNumber : 487, className : "ChartingState", methodName : "update"});
			haxe_Log.trace(this._song.notes[this.curSection].lengthInSteps * (this.curSection + 1),{ fileName : "source/ChartingState.hx", lineNumber : 488, className : "ChartingState", methodName : "update"});
			haxe_Log.trace("DUMBSHIT",{ fileName : "source/ChartingState.hx", lineNumber : 489, className : "ChartingState", methodName : "update"});
			if(this._song.notes[this.curSection + 1] == null) {
				this.addSection();
			}
			this.changeSection(this.curSection + 1,false);
		}
		if(flixel_FlxG.mouse._leftButton.current == 2) {
			if(flixel_FlxG.mouse.overlaps(this.curRenderedNotes)) {
				this.curRenderedNotes.forEach(function(note) {
					if(flixel_FlxG.mouse.overlaps(note)) {
						var _this = flixel_FlxG.keys.pressed;
						if(_this.keyManager.checkStatus(17,_this.status)) {
							_gthis.selectNote(note);
						} else {
							haxe_Log.trace("tryin to delete note...",{ fileName : "source/ChartingState.hx", lineNumber : 516, className : "ChartingState", methodName : "update"});
							_gthis.deleteNote(note);
						}
					}
				});
			} else if(flixel_FlxG.mouse.x > this.gridBG.x && flixel_FlxG.mouse.x < this.gridBG.x + this.gridBG.get_width() && flixel_FlxG.mouse.y > this.gridBG.y && flixel_FlxG.mouse.y < this.gridBG.y + this.GRID_SIZE * this._song.notes[this.curSection].lengthInSteps) {
				this.addNote();
			}
		}
		if(flixel_FlxG.mouse.x > this.gridBG.x && flixel_FlxG.mouse.x < this.gridBG.x + this.gridBG.get_width() && flixel_FlxG.mouse.y > this.gridBG.y && flixel_FlxG.mouse.y < this.gridBG.y + this.GRID_SIZE * this._song.notes[this.curSection].lengthInSteps) {
			this.dummyArrow.set_x(Math.floor(flixel_FlxG.mouse.x / this.GRID_SIZE) * this.GRID_SIZE);
			var _this = flixel_FlxG.keys.pressed;
			if(_this.keyManager.checkStatus(16,_this.status)) {
				this.dummyArrow.set_y(flixel_FlxG.mouse.y);
			} else {
				this.dummyArrow.set_y(Math.floor(flixel_FlxG.mouse.y / this.GRID_SIZE) * this.GRID_SIZE);
			}
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(13,_this.status)) {
			ChartingState.lastSection = this.curSection;
			PlayState.SONG = this._song;
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
			var _this = this.vocals;
			_this.cleanup(_this.autoDestroy,true);
			var nextState = new PlayState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(69,_this.status)) {
			this.changeNoteSustain(Conductor.stepCrochet);
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(81,_this.status)) {
			this.changeNoteSustain(-Conductor.stepCrochet);
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(9,_this.status)) {
			var _this = flixel_FlxG.keys.pressed;
			if(_this.keyManager.checkStatus(16,_this.status)) {
				var _g = this.UI_box;
				_g.set_selected_tab(_g.get_selected_tab() - 1);
				if(this.UI_box.get_selected_tab() < 0) {
					this.UI_box.set_selected_tab(2);
				}
			} else {
				var _g = this.UI_box;
				_g.set_selected_tab(_g.get_selected_tab() + 1);
				if(this.UI_box.get_selected_tab() >= 3) {
					this.UI_box.set_selected_tab(0);
				}
			}
		}
		if(!this.typingShit.hasFocus) {
			var _this = flixel_FlxG.keys.justPressed;
			if(_this.keyManager.checkStatus(32,_this.status)) {
				if(flixel_FlxG.sound.music._channel != null) {
					flixel_FlxG.sound.music.pause();
					this.vocals.pause();
				} else {
					this.vocals.play();
					flixel_FlxG.sound.music.play();
				}
			}
			var _this = flixel_FlxG.keys.justPressed;
			if(_this.keyManager.checkStatus(82,_this.status)) {
				var _this = flixel_FlxG.keys.pressed;
				if(_this.keyManager.checkStatus(16,_this.status)) {
					this.resetSection(true);
				} else {
					this.resetSection();
				}
			}
			if(flixel_FlxG.mouse.wheel != 0) {
				flixel_FlxG.sound.music.pause();
				this.vocals.pause();
				var _g = flixel_FlxG.sound.music;
				_g.set_time(_g._time - flixel_FlxG.mouse.wheel * Conductor.stepCrochet * 0.4);
				this.vocals.set_time(flixel_FlxG.sound.music._time);
			}
			var _this = flixel_FlxG.keys.pressed;
			if(!_this.keyManager.checkStatus(16,_this.status)) {
				var tmp;
				var _this = flixel_FlxG.keys.pressed;
				if(!_this.keyManager.checkStatus(87,_this.status)) {
					var _this = flixel_FlxG.keys.pressed;
					tmp = _this.keyManager.checkStatus(83,_this.status);
				} else {
					tmp = true;
				}
				if(tmp) {
					flixel_FlxG.sound.music.pause();
					this.vocals.pause();
					var daTime = 700 * flixel_FlxG.elapsed;
					var _this = flixel_FlxG.keys.pressed;
					if(_this.keyManager.checkStatus(87,_this.status)) {
						var _g = flixel_FlxG.sound.music;
						_g.set_time(_g._time - daTime);
					} else {
						var _g = flixel_FlxG.sound.music;
						_g.set_time(_g._time + daTime);
					}
					this.vocals.set_time(flixel_FlxG.sound.music._time);
				}
			} else {
				var tmp;
				var _this = flixel_FlxG.keys.justPressed;
				if(!_this.keyManager.checkStatus(87,_this.status)) {
					var _this = flixel_FlxG.keys.justPressed;
					tmp = _this.keyManager.checkStatus(83,_this.status);
				} else {
					tmp = true;
				}
				if(tmp) {
					flixel_FlxG.sound.music.pause();
					this.vocals.pause();
					var daTime = Conductor.stepCrochet * 2;
					var _this = flixel_FlxG.keys.justPressed;
					if(_this.keyManager.checkStatus(87,_this.status)) {
						var _g = flixel_FlxG.sound.music;
						_g.set_time(_g._time - daTime);
					} else {
						var _g = flixel_FlxG.sound.music;
						_g.set_time(_g._time + daTime);
					}
					this.vocals.set_time(flixel_FlxG.sound.music._time);
				}
			}
		}
		this._song.bpm = this.tempBpm;
		var shiftThing = 1;
		var _this = flixel_FlxG.keys.pressed;
		if(_this.keyManager.checkStatus(16,_this.status)) {
			shiftThing = 4;
		}
		var tmp;
		var _this = flixel_FlxG.keys.justPressed;
		if(!_this.keyManager.checkStatus(39,_this.status)) {
			var _this = flixel_FlxG.keys.justPressed;
			tmp = _this.keyManager.checkStatus(68,_this.status);
		} else {
			tmp = true;
		}
		if(tmp) {
			this.changeSection(this.curSection + shiftThing);
		}
		var tmp;
		var _this = flixel_FlxG.keys.justPressed;
		if(!_this.keyManager.checkStatus(37,_this.status)) {
			var _this = flixel_FlxG.keys.justPressed;
			tmp = _this.keyManager.checkStatus(65,_this.status);
		} else {
			tmp = true;
		}
		if(tmp) {
			this.changeSection(this.curSection - shiftThing);
		}
		this.bpmTxt.set_text(this.bpmTxt.set_text(Std.string(flixel_math_FlxMath.roundDecimal(Conductor.songPosition / 1000,2)) + " / " + Std.string(flixel_math_FlxMath.roundDecimal(flixel_FlxG.sound.music._length / 1000,2)) + "\nSection: " + this.curSection));
		MusicBeatState.prototype.update.call(this,elapsed);
	}
	,changeNoteSustain: function(value) {
		if(this.curSelectedNote != null) {
			if(this.curSelectedNote[2] != null) {
				this.curSelectedNote[2] += value;
				this.curSelectedNote[2] = Math.max(this.curSelectedNote[2],0);
			}
		}
		this.updateNoteUI();
		this.updateGrid();
	}
	,toggleAltAnimNote: function() {
		if(this.curSelectedNote != null) {
			if(this.curSelectedNote[3] != null) {
				haxe_Log.trace("ALT NOTE SHIT",{ fileName : "source/ChartingState.hx", lineNumber : 699, className : "ChartingState", methodName : "toggleAltAnimNote"});
				this.curSelectedNote[3] = !this.curSelectedNote[3];
				haxe_Log.trace(this.curSelectedNote[3],{ fileName : "source/ChartingState.hx", lineNumber : 701, className : "ChartingState", methodName : "toggleAltAnimNote"});
			} else {
				this.curSelectedNote[3] = true;
			}
		}
	}
	,recalculateSteps: function() {
		var lastChange = { stepTime : 0, songTime : 0, bpm : 0};
		var _g = 0;
		var _g1 = Conductor.bpmChangeMap.length;
		while(_g < _g1) {
			var i = _g++;
			if(flixel_FlxG.sound.music._time > Conductor.bpmChangeMap[i].songTime) {
				lastChange = Conductor.bpmChangeMap[i];
			}
		}
		this.curStep = lastChange.stepTime + Math.floor((flixel_FlxG.sound.music._time - lastChange.songTime) / Conductor.stepCrochet);
		this.updateBeat();
		return this.curStep;
	}
	,resetSection: function(songBeginning) {
		if(songBeginning == null) {
			songBeginning = false;
		}
		this.updateGrid();
		flixel_FlxG.sound.music.pause();
		this.vocals.pause();
		flixel_FlxG.sound.music.set_time(this.sectionStartTime());
		if(songBeginning) {
			flixel_FlxG.sound.music.set_time(0);
			this.curSection = 0;
		}
		this.vocals.set_time(flixel_FlxG.sound.music._time);
		this.updateCurStep();
		this.updateGrid();
		this.updateSectionUI();
	}
	,changeSection: function(sec,updateMusic) {
		if(updateMusic == null) {
			updateMusic = true;
		}
		if(sec == null) {
			sec = 0;
		}
		haxe_Log.trace("changing section" + sec,{ fileName : "source/ChartingState.hx", lineNumber : 752, className : "ChartingState", methodName : "changeSection"});
		if(this._song.notes[sec] != null) {
			this.curSection = sec;
			this.updateGrid();
			if(updateMusic) {
				flixel_FlxG.sound.music.pause();
				this.vocals.pause();
				flixel_FlxG.sound.music.set_time(this.sectionStartTime());
				this.vocals.set_time(flixel_FlxG.sound.music._time);
				this.updateCurStep();
			}
			this.updateGrid();
			this.updateSectionUI();
		}
	}
	,copySection: function(sectionNum) {
		if(sectionNum == null) {
			sectionNum = 1;
		}
		var a = this.curSection;
		var daSec = a > sectionNum ? a : sectionNum;
		var _g = 0;
		var _g1 = this._song.notes[daSec - sectionNum].sectionNotes;
		while(_g < _g1.length) {
			var note = _g1[_g];
			++_g;
			var strum = note[0] + Conductor.stepCrochet * (this._song.notes[daSec].lengthInSteps * sectionNum);
			var copiedNote = [strum,note[1],note[2]];
			this._song.notes[daSec].sectionNotes.push(copiedNote);
		}
		this.updateGrid();
	}
	,updateSectionUI: function() {
		var sec = this._song.notes[this.curSection];
		this.stepperLength.set_value(sec.lengthInSteps);
		this.check_mustHitSection.set_checked(sec.mustHitSection);
		this.check_altAnim.set_checked(sec.altAnim);
		this.check_changeBPM.set_checked(sec.changeBPM);
		this.stepperSectionBPM.set_value(sec.bpm);
		this.updateHeads();
	}
	,updateHeads: function() {
		if(this.check_mustHitSection.checked) {
			this.leftIcon.changeIcon(this._song.player1);
			this.rightIcon.changeIcon(this._song.player2);
		} else {
			this.leftIcon.changeIcon(this._song.player2);
			this.rightIcon.changeIcon(this._song.player1);
		}
	}
	,updateNoteUI: function() {
		if(this.curSelectedNote != null) {
			this.stepperSusLength.set_value(this.curSelectedNote[2]);
		}
	}
	,updateGrid: function() {
		while(this.curRenderedNotes.members.length > 0) this.curRenderedNotes.remove(this.curRenderedNotes.members[0],true);
		while(this.curRenderedSustains.members.length > 0) this.curRenderedSustains.remove(this.curRenderedSustains.members[0],true);
		var sectionInfo = this._song.notes[this.curSection].sectionNotes;
		if(this._song.notes[this.curSection].changeBPM && this._song.notes[this.curSection].bpm > 0) {
			Conductor.changeBPM(this._song.notes[this.curSection].bpm);
		} else {
			var daBPM = this._song.bpm;
			var _g = 0;
			var _g1 = this.curSection;
			while(_g < _g1) {
				var i = _g++;
				if(this._song.notes[i].changeBPM) {
					daBPM = this._song.notes[i].bpm;
				}
			}
			Conductor.changeBPM(daBPM);
		}
		var _g = 0;
		while(_g < sectionInfo.length) {
			var i = sectionInfo[_g];
			++_g;
			var daNoteInfo = i[1];
			var daStrumTime = i[0];
			var daSus = i[2];
			var note = new Note(daStrumTime,daNoteInfo % 4);
			note.sustainLength = daSus;
			note.setGraphicSize(this.GRID_SIZE,this.GRID_SIZE);
			note.updateHitbox();
			note.set_x(Math.floor(daNoteInfo * this.GRID_SIZE));
			note.set_y(Math.floor(this.getYfromStrum((daStrumTime - this.sectionStartTime()) % (Conductor.stepCrochet * this._song.notes[this.curSection].lengthInSteps))));
			this.curRenderedNotes.add(note);
			if(daSus > 0) {
				var sustainVis = new flixel_FlxSprite(note.x + this.GRID_SIZE / 2,note.y + this.GRID_SIZE).makeGraphic(8,Math.floor(flixel_math_FlxMath.remapToRange(daSus,0,Conductor.stepCrochet * 16,0,this.gridBG.get_height())));
				this.curRenderedSustains.add(sustainVis);
			}
		}
	}
	,addSection: function(lengthInSteps) {
		if(lengthInSteps == null) {
			lengthInSteps = 16;
		}
		var sec = { lengthInSteps : lengthInSteps, bpm : this._song.bpm, changeBPM : false, mustHitSection : true, sectionNotes : [], typeOfSection : 0, altAnim : false};
		this._song.notes.push(sec);
	}
	,selectNote: function(note) {
		var swagNum = 0;
		var _g = 0;
		var _g1 = this._song.notes[this.curSection].sectionNotes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.strumTime == note.strumTime && i.noteData % 4 == note.noteData) {
				this.curSelectedNote = this._song.notes[this.curSection].sectionNotes[swagNum];
			}
			++swagNum;
		}
		this.updateGrid();
		this.updateNoteUI();
	}
	,deleteNote: function(note) {
		var _g = 0;
		var _g1 = this._song.notes[this.curSection].sectionNotes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i[0] == note.strumTime && i[1] % 4 == note.noteData) {
				HxOverrides.remove(this._song.notes[this.curSection].sectionNotes,i);
			}
		}
		this.updateGrid();
	}
	,clearSection: function() {
		this._song.notes[this.curSection].sectionNotes = [];
		this.updateGrid();
	}
	,clearSong: function() {
		var _g = 0;
		var _g1 = this._song.notes.length;
		while(_g < _g1) {
			var daSection = _g++;
			this._song.notes[daSection].sectionNotes = [];
		}
		this.updateGrid();
	}
	,addNote: function() {
		var noteStrum = this.getStrumTime(this.dummyArrow.y) + this.sectionStartTime();
		var noteData = Math.floor(flixel_FlxG.mouse.x / this.GRID_SIZE);
		this._song.notes[this.curSection].sectionNotes.push([noteStrum,noteData,0,false]);
		this.curSelectedNote = this._song.notes[this.curSection].sectionNotes[this._song.notes[this.curSection].sectionNotes.length - 1];
		var _this = flixel_FlxG.keys.pressed;
		if(_this.keyManager.checkStatus(17,_this.status)) {
			this._song.notes[this.curSection].sectionNotes.push([noteStrum,(noteData + 4) % 8,0,false]);
		}
		haxe_Log.trace(noteStrum,{ fileName : "source/ChartingState.hx", lineNumber : 977, className : "ChartingState", methodName : "addNote"});
		haxe_Log.trace(this.curSection,{ fileName : "source/ChartingState.hx", lineNumber : 978, className : "ChartingState", methodName : "addNote"});
		this.updateGrid();
		this.updateNoteUI();
		this.autosaveSong();
	}
	,getStrumTime: function(yPos) {
		return flixel_math_FlxMath.remapToRange(yPos,this.gridBG.y,this.gridBG.y + this.gridBG.get_height(),0,16 * Conductor.stepCrochet);
	}
	,getYfromStrum: function(strumTime) {
		return flixel_math_FlxMath.remapToRange(strumTime,0,16 * Conductor.stepCrochet,this.gridBG.y,this.gridBG.y + this.gridBG.get_height());
	}
	,daSpacing: null
	,loadLevel: function() {
		haxe_Log.trace(this._song.notes,{ fileName : "source/ChartingState.hx", lineNumber : 1023, className : "ChartingState", methodName : "loadLevel"});
	}
	,getNotes: function() {
		var noteData = [];
		var _g = 0;
		var _g1 = this._song.notes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			noteData.push(i.sectionNotes);
		}
		return noteData;
	}
	,loadJson: function(song) {
		PlayState.SONG = Song.loadFromJson(song.toLowerCase(),song.toLowerCase());
		var nextState = Type.createInstance(js_Boot.getClass(flixel_FlxG.game._state),[]);
		if(flixel_FlxG.game._state.switchTo(nextState)) {
			flixel_FlxG.game._requestedState = nextState;
		}
	}
	,loadAutosave: function() {
		PlayState.SONG = Song.parseJSONshit(flixel_FlxG.save.data.autosave);
		var nextState = Type.createInstance(js_Boot.getClass(flixel_FlxG.game._state),[]);
		if(flixel_FlxG.game._state.switchTo(nextState)) {
			flixel_FlxG.game._requestedState = nextState;
		}
	}
	,autosaveSong: function() {
		flixel_FlxG.save.data.autosave = JSON.stringify({ "song" : this._song});
		flixel_FlxG.save.flush();
	}
	,saveLevel: function() {
		var json = { "song" : this._song};
		var data = JSON.stringify(json);
		if(data != null && data.length > 0) {
			this._file = new openfl_net_FileReference();
			this._file.addEventListener("complete",$bind(this,this.onSaveComplete));
			this._file.addEventListener("cancel",$bind(this,this.onSaveCancel));
			this._file.addEventListener("ioError",$bind(this,this.onSaveError));
			this._file.save(StringTools.trim(data),this._song.song.toLowerCase() + ".json");
		}
	}
	,onSaveComplete: function(_) {
		this._file.removeEventListener("complete",$bind(this,this.onSaveComplete));
		this._file.removeEventListener("cancel",$bind(this,this.onSaveCancel));
		this._file.removeEventListener("ioError",$bind(this,this.onSaveError));
		this._file = null;
	}
	,onSaveCancel: function(_) {
		this._file.removeEventListener("complete",$bind(this,this.onSaveComplete));
		this._file.removeEventListener("cancel",$bind(this,this.onSaveCancel));
		this._file.removeEventListener("ioError",$bind(this,this.onSaveError));
		this._file = null;
	}
	,onSaveError: function(_) {
		this._file.removeEventListener("complete",$bind(this,this.onSaveComplete));
		this._file.removeEventListener("cancel",$bind(this,this.onSaveCancel));
		this._file.removeEventListener("ioError",$bind(this,this.onSaveError));
		this._file = null;
	}
	,__class__: ChartingState
});
var Conductor = function() {
};
$hxClasses["Conductor"] = Conductor;
Conductor.__name__ = "Conductor";
Conductor.songPosition = null;
Conductor.lastSongPos = null;
Conductor.mapBPMChanges = function(song) {
	Conductor.bpmChangeMap = [];
	var curBPM = song.bpm;
	var totalSteps = 0;
	var totalPos = 0;
	var _g = 0;
	var _g1 = song.notes.length;
	while(_g < _g1) {
		var i = _g++;
		if(song.notes[i].changeBPM && song.notes[i].bpm != curBPM) {
			curBPM = song.notes[i].bpm;
			var event = { stepTime : totalSteps, songTime : totalPos, bpm : curBPM};
			Conductor.bpmChangeMap.push(event);
		}
		var deltaSteps = song.notes[i].lengthInSteps;
		totalSteps += deltaSteps;
		totalPos += 60 / curBPM * 1000 / 4 * deltaSteps;
	}
	haxe_Log.trace("new BPM map BUDDY " + Std.string(Conductor.bpmChangeMap),{ fileName : "source/Conductor.hx", lineNumber : 59, className : "Conductor", methodName : "mapBPMChanges"});
};
Conductor.changeBPM = function(newBpm) {
	Conductor.bpm = newBpm;
	Conductor.crochet = 60 / Conductor.bpm * 1000;
	Conductor.stepCrochet = Conductor.crochet / 4;
};
Conductor.prototype = {
	__class__: Conductor
};
var Device = $hxEnums["Device"] = { __ename__ : "Device", __constructs__ : ["Keys","Gamepad"]
	,Keys: {_hx_index:0,__enum__:"Device",toString:$estr}
	,Gamepad: ($_=function(id) { return {_hx_index:1,id:id,__enum__:"Device",toString:$estr}; },$_.__params__ = ["id"],$_)
};
Device.__empty_constructs__ = [Device.Keys];
var Control = $hxEnums["Control"] = { __ename__ : "Control", __constructs__ : ["NOTE_LEFT","NOTE_DOWN","NOTE_UP","NOTE_RIGHT","UI_UP","UI_LEFT","UI_RIGHT","UI_DOWN","RESET","ACCEPT","BACK","PAUSE"]
	,NOTE_LEFT: {_hx_index:0,__enum__:"Control",toString:$estr}
	,NOTE_DOWN: {_hx_index:1,__enum__:"Control",toString:$estr}
	,NOTE_UP: {_hx_index:2,__enum__:"Control",toString:$estr}
	,NOTE_RIGHT: {_hx_index:3,__enum__:"Control",toString:$estr}
	,UI_UP: {_hx_index:4,__enum__:"Control",toString:$estr}
	,UI_LEFT: {_hx_index:5,__enum__:"Control",toString:$estr}
	,UI_RIGHT: {_hx_index:6,__enum__:"Control",toString:$estr}
	,UI_DOWN: {_hx_index:7,__enum__:"Control",toString:$estr}
	,RESET: {_hx_index:8,__enum__:"Control",toString:$estr}
	,ACCEPT: {_hx_index:9,__enum__:"Control",toString:$estr}
	,BACK: {_hx_index:10,__enum__:"Control",toString:$estr}
	,PAUSE: {_hx_index:11,__enum__:"Control",toString:$estr}
};
Control.__empty_constructs__ = [Control.NOTE_LEFT,Control.NOTE_DOWN,Control.NOTE_UP,Control.NOTE_RIGHT,Control.UI_UP,Control.UI_LEFT,Control.UI_RIGHT,Control.UI_DOWN,Control.RESET,Control.ACCEPT,Control.BACK,Control.PAUSE];
var KeyboardScheme = $hxEnums["KeyboardScheme"] = { __ename__ : "KeyboardScheme", __constructs__ : ["Solo","Duo","None","Custom"]
	,Solo: {_hx_index:0,__enum__:"KeyboardScheme",toString:$estr}
	,Duo: ($_=function(first) { return {_hx_index:1,first:first,__enum__:"KeyboardScheme",toString:$estr}; },$_.__params__ = ["first"],$_)
	,None: {_hx_index:2,__enum__:"KeyboardScheme",toString:$estr}
	,Custom: {_hx_index:3,__enum__:"KeyboardScheme",toString:$estr}
};
KeyboardScheme.__empty_constructs__ = [KeyboardScheme.Solo,KeyboardScheme.None,KeyboardScheme.Custom];
var flixel_input_actions_FlxActionSet = function(Name,DigitalActions,AnalogActions) {
	this.active = true;
	this.name = "";
	this.name = Name;
	if(DigitalActions == null) {
		DigitalActions = [];
	}
	if(AnalogActions == null) {
		AnalogActions = [];
	}
	this.digitalActions = DigitalActions;
	this.analogActions = AnalogActions;
};
$hxClasses["flixel.input.actions.FlxActionSet"] = flixel_input_actions_FlxActionSet;
flixel_input_actions_FlxActionSet.__name__ = "flixel.input.actions.FlxActionSet";
flixel_input_actions_FlxActionSet.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_input_actions_FlxActionSet.fromJson = function(Data,CallbackDigital,CallbackAnalog) {
	var digitalActions = [];
	var analogActions = [];
	if(Data == null) {
		return null;
	}
	if(Data.digitalActions != null) {
		var arrD = Data.digitalActions;
		var _g = 0;
		while(_g < arrD.length) {
			var d = arrD[_g];
			++_g;
			var dName = d;
			var action = new flixel_input_actions_FlxActionDigital(dName,CallbackDigital);
			digitalActions.push(action);
		}
	}
	if(Data.analogActions != null) {
		var arrA = Data.analogActions;
		var _g = 0;
		while(_g < arrA.length) {
			var a = arrA[_g];
			++_g;
			var aName = a;
			var action = new flixel_input_actions_FlxActionAnalog(aName,CallbackAnalog);
			analogActions.push(action);
		}
	}
	if(Data.name != null) {
		var name = Data.name;
		var set = new flixel_input_actions_FlxActionSet(name,digitalActions,analogActions);
		return set;
	}
	return null;
};
flixel_input_actions_FlxActionSet.prototype = {
	name: null
	,digitalActions: null
	,analogActions: null
	,active: null
	,toJson: function() {
		var space = "\t";
		return JSON.stringify(this,function(key,value) {
			if(((value) instanceof flixel_input_actions_FlxAction)) {
				var fa = value;
				return { "type" : fa.type, "name" : fa.name, "steamHandle" : fa.steamHandle};
			}
			return value;
		},space);
	}
	,attachSteamController: function(Handle,Attach) {
		if(Attach == null) {
			Attach = true;
		}
		this.attachSteamControllerSub(Handle,Attach,flixel_input_actions_FlxInputType.DIGITAL,this.digitalActions,null);
		this.attachSteamControllerSub(Handle,Attach,flixel_input_actions_FlxInputType.ANALOG,null,this.analogActions);
	}
	,add: function(Action1) {
		if(Action1.type == flixel_input_actions_FlxInputType.DIGITAL) {
			var dAction = Action1;
			if(this.digitalActions.indexOf(dAction) != -1) {
				return false;
			}
			this.digitalActions.push(dAction);
			return true;
		} else if(Action1.type == flixel_input_actions_FlxInputType.ANALOG) {
			var aAction = Action1;
			if(this.analogActions.indexOf(aAction) != -1) {
				return false;
			}
			this.analogActions.push(aAction);
			return true;
		}
		return false;
	}
	,destroy: function() {
		this.digitalActions = flixel_util_FlxDestroyUtil.destroyArray(this.digitalActions);
		this.analogActions = flixel_util_FlxDestroyUtil.destroyArray(this.analogActions);
	}
	,remove: function(Action1,Destroy) {
		if(Destroy == null) {
			Destroy = true;
		}
		var result = false;
		if(Action1.type == flixel_input_actions_FlxInputType.DIGITAL) {
			result = HxOverrides.remove(this.digitalActions,Action1);
			if(result && Destroy) {
				Action1.destroy();
			}
		} else if(Action1.type == flixel_input_actions_FlxInputType.ANALOG) {
			result = HxOverrides.remove(this.analogActions,Action1);
			if(result && Destroy) {
				Action1.destroy();
			}
		}
		return result;
	}
	,update: function() {
		if(!this.active) {
			return;
		}
		var _g = 0;
		var _g1 = this.digitalActions;
		while(_g < _g1.length) {
			var digitalAction = _g1[_g];
			++_g;
			digitalAction.update();
		}
		var _g = 0;
		var _g1 = this.analogActions;
		while(_g < _g1.length) {
			var analogAction = _g1[_g];
			++_g;
			analogAction.update();
		}
	}
	,attachSteamControllerSub: function(Handle,Attach,InputType,DigitalActions,AnalogActions) {
		var length = InputType == flixel_input_actions_FlxInputType.DIGITAL ? DigitalActions.length : AnalogActions.length;
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			var action = InputType == flixel_input_actions_FlxInputType.DIGITAL ? DigitalActions[i] : AnalogActions[i];
			if(action.steamHandle != -1) {
				var inputExists = false;
				var theInput = null;
				if(action.inputs != null) {
					var _g2 = 0;
					var _g3 = action.inputs;
					while(_g2 < _g3.length) {
						var input = _g3[_g2];
						++_g2;
						if(input.device == flixel_input_actions_FlxInputDevice.STEAM_CONTROLLER && input.deviceID == Handle) {
							inputExists = true;
							theInput = input;
						}
					}
				}
				if(Attach) {
					if(!inputExists) {
						if(InputType == flixel_input_actions_FlxInputType.DIGITAL) {
							DigitalActions[i].add(new flixel_input_actions_FlxActionInputDigitalSteam(action.steamHandle,2,Handle));
						} else if(InputType == flixel_input_actions_FlxInputType.ANALOG) {
							AnalogActions[i].add(new flixel_input_actions_FlxActionInputAnalogSteam(action.steamHandle,1,3,Handle));
						}
					}
				} else if(inputExists) {
					action.remove(theInput);
				}
			}
		}
	}
	,__class__: flixel_input_actions_FlxActionSet
};
var Controls = function(name,scheme) {
	if(scheme == null) {
		scheme = KeyboardScheme.None;
	}
	this.keyboardScheme = KeyboardScheme.None;
	this.gamepadsAdded = [];
	this.byName = new haxe_ds_StringMap();
	this._reset = new flixel_input_actions_FlxActionDigital("reset");
	this._pause = new flixel_input_actions_FlxActionDigital("pause");
	this._back = new flixel_input_actions_FlxActionDigital("back");
	this._accept = new flixel_input_actions_FlxActionDigital("accept");
	this._note_downR = new flixel_input_actions_FlxActionDigital("note_down-release");
	this._note_rightR = new flixel_input_actions_FlxActionDigital("note_right-release");
	this._note_leftR = new flixel_input_actions_FlxActionDigital("note_left-release");
	this._note_upR = new flixel_input_actions_FlxActionDigital("note_up-release");
	this._note_downP = new flixel_input_actions_FlxActionDigital("note_down-press");
	this._note_rightP = new flixel_input_actions_FlxActionDigital("note_right-press");
	this._note_leftP = new flixel_input_actions_FlxActionDigital("note_left-press");
	this._note_upP = new flixel_input_actions_FlxActionDigital("note_up-press");
	this._note_down = new flixel_input_actions_FlxActionDigital("note_down");
	this._note_right = new flixel_input_actions_FlxActionDigital("note_right");
	this._note_left = new flixel_input_actions_FlxActionDigital("note_left");
	this._note_up = new flixel_input_actions_FlxActionDigital("note_up");
	this._ui_downR = new flixel_input_actions_FlxActionDigital("ui_down-release");
	this._ui_rightR = new flixel_input_actions_FlxActionDigital("ui_right-release");
	this._ui_leftR = new flixel_input_actions_FlxActionDigital("ui_left-release");
	this._ui_upR = new flixel_input_actions_FlxActionDigital("ui_up-release");
	this._ui_downP = new flixel_input_actions_FlxActionDigital("ui_down-press");
	this._ui_rightP = new flixel_input_actions_FlxActionDigital("ui_right-press");
	this._ui_leftP = new flixel_input_actions_FlxActionDigital("ui_left-press");
	this._ui_upP = new flixel_input_actions_FlxActionDigital("ui_up-press");
	this._ui_down = new flixel_input_actions_FlxActionDigital("ui_down");
	this._ui_right = new flixel_input_actions_FlxActionDigital("ui_right");
	this._ui_left = new flixel_input_actions_FlxActionDigital("ui_left");
	this._ui_up = new flixel_input_actions_FlxActionDigital("ui_up");
	flixel_input_actions_FlxActionSet.call(this,name);
	this.add(this._ui_up);
	this.add(this._ui_left);
	this.add(this._ui_right);
	this.add(this._ui_down);
	this.add(this._ui_upP);
	this.add(this._ui_leftP);
	this.add(this._ui_rightP);
	this.add(this._ui_downP);
	this.add(this._ui_upR);
	this.add(this._ui_leftR);
	this.add(this._ui_rightR);
	this.add(this._ui_downR);
	this.add(this._note_up);
	this.add(this._note_left);
	this.add(this._note_right);
	this.add(this._note_down);
	this.add(this._note_upP);
	this.add(this._note_leftP);
	this.add(this._note_rightP);
	this.add(this._note_downP);
	this.add(this._note_upR);
	this.add(this._note_leftR);
	this.add(this._note_rightR);
	this.add(this._note_downR);
	this.add(this._accept);
	this.add(this._back);
	this.add(this._pause);
	this.add(this._reset);
	var _g = 0;
	var _g1 = this.digitalActions;
	while(_g < _g1.length) {
		var action = _g1[_g];
		++_g;
		this.byName.h[action.name] = action;
	}
	this.setKeyboardScheme(scheme,false);
};
$hxClasses["Controls"] = Controls;
Controls.__name__ = "Controls";
Controls.__super__ = flixel_input_actions_FlxActionSet;
Controls.prototype = $extend(flixel_input_actions_FlxActionSet.prototype,{
	_ui_up: null
	,_ui_left: null
	,_ui_right: null
	,_ui_down: null
	,_ui_upP: null
	,_ui_leftP: null
	,_ui_rightP: null
	,_ui_downP: null
	,_ui_upR: null
	,_ui_leftR: null
	,_ui_rightR: null
	,_ui_downR: null
	,_note_up: null
	,_note_left: null
	,_note_right: null
	,_note_down: null
	,_note_upP: null
	,_note_leftP: null
	,_note_rightP: null
	,_note_downP: null
	,_note_upR: null
	,_note_leftR: null
	,_note_rightR: null
	,_note_downR: null
	,_accept: null
	,_back: null
	,_pause: null
	,_reset: null
	,byName: null
	,gamepadsAdded: null
	,keyboardScheme: null
	,get_UI_UP: function() {
		return this._ui_up.check();
	}
	,get_UI_LEFT: function() {
		return this._ui_left.check();
	}
	,get_UI_RIGHT: function() {
		return this._ui_right.check();
	}
	,get_UI_DOWN: function() {
		return this._ui_down.check();
	}
	,get_UI_UP_P: function() {
		return this._ui_upP.check();
	}
	,get_UI_LEFT_P: function() {
		return this._ui_leftP.check();
	}
	,get_UI_RIGHT_P: function() {
		return this._ui_rightP.check();
	}
	,get_UI_DOWN_P: function() {
		return this._ui_downP.check();
	}
	,get_UI_UP_R: function() {
		return this._ui_upR.check();
	}
	,get_UI_LEFT_R: function() {
		return this._ui_leftR.check();
	}
	,get_UI_RIGHT_R: function() {
		return this._ui_rightR.check();
	}
	,get_UI_DOWN_R: function() {
		return this._ui_downR.check();
	}
	,get_NOTE_UP: function() {
		return this._note_up.check();
	}
	,get_NOTE_LEFT: function() {
		return this._note_left.check();
	}
	,get_NOTE_RIGHT: function() {
		return this._note_right.check();
	}
	,get_NOTE_DOWN: function() {
		return this._note_down.check();
	}
	,get_NOTE_UP_P: function() {
		return this._note_upP.check();
	}
	,get_NOTE_LEFT_P: function() {
		return this._note_leftP.check();
	}
	,get_NOTE_RIGHT_P: function() {
		return this._note_rightP.check();
	}
	,get_NOTE_DOWN_P: function() {
		return this._note_downP.check();
	}
	,get_NOTE_UP_R: function() {
		return this._note_upR.check();
	}
	,get_NOTE_LEFT_R: function() {
		return this._note_leftR.check();
	}
	,get_NOTE_RIGHT_R: function() {
		return this._note_rightR.check();
	}
	,get_NOTE_DOWN_R: function() {
		return this._note_downR.check();
	}
	,get_ACCEPT: function() {
		return this._accept.check();
	}
	,get_BACK: function() {
		return this._back.check();
	}
	,get_PAUSE: function() {
		return this._pause.check();
	}
	,get_RESET: function() {
		return this._reset.check();
	}
	,getActionFromControl: function(control) {
		switch(control._hx_index) {
		case 0:
			return this._note_left;
		case 1:
			return this._note_down;
		case 2:
			return this._note_up;
		case 3:
			return this._note_right;
		case 4:
			return this._ui_up;
		case 5:
			return this._ui_left;
		case 6:
			return this._ui_right;
		case 7:
			return this._ui_down;
		case 8:
			return this._reset;
		case 9:
			return this._accept;
		case 10:
			return this._back;
		case 11:
			return this._pause;
		}
	}
	,forEachBound: function(control,func) {
		switch(control._hx_index) {
		case 0:
			func(this._note_left,1);
			func(this._note_leftP,2);
			func(this._note_leftR,-1);
			break;
		case 1:
			func(this._note_down,1);
			func(this._note_downP,2);
			func(this._note_downR,-1);
			break;
		case 2:
			func(this._note_up,1);
			func(this._note_upP,2);
			func(this._note_upR,-1);
			break;
		case 3:
			func(this._note_right,1);
			func(this._note_rightP,2);
			func(this._note_rightR,-1);
			break;
		case 4:
			func(this._ui_up,1);
			func(this._ui_upP,2);
			func(this._ui_upR,-1);
			break;
		case 5:
			func(this._ui_left,1);
			func(this._ui_leftP,2);
			func(this._ui_leftR,-1);
			break;
		case 6:
			func(this._ui_right,1);
			func(this._ui_rightP,2);
			func(this._ui_rightR,-1);
			break;
		case 7:
			func(this._ui_down,1);
			func(this._ui_downP,2);
			func(this._ui_downR,-1);
			break;
		case 8:
			func(this._reset,2);
			break;
		case 9:
			func(this._accept,2);
			break;
		case 10:
			func(this._back,2);
			break;
		case 11:
			func(this._pause,2);
			break;
		}
	}
	,replaceBinding: function(control,device,toAdd,toRemove) {
		var _gthis = this;
		if(toAdd != toRemove) {
			switch(device._hx_index) {
			case 0:
				this.forEachBound(control,function(action,state) {
					_gthis.replaceKey(action,toAdd,toRemove);
				});
				break;
			case 1:
				var id = device.id;
				this.forEachBound(control,function(action,state) {
					_gthis.replaceButton(action,id,toAdd,toRemove);
				});
				break;
			}
		}
	}
	,replaceKey: function(action,toAdd,toRemove) {
		var _g = 0;
		var _g1 = action.inputs.length;
		while(_g < _g1) {
			var i = _g++;
			var input = action.inputs[i];
			if(input.device == flixel_input_actions_FlxInputDevice.KEYBOARD && input.inputID == toRemove) {
				action.inputs[i].inputID = toAdd;
			}
		}
	}
	,replaceButton: function(action,id,toAdd,toRemove) {
		var _g = 0;
		var _g1 = action.inputs.length;
		while(_g < _g1) {
			var i = _g++;
			var input = action.inputs[i];
			if(input.device == flixel_input_actions_FlxInputDevice.GAMEPAD && id != -1 && input.deviceID == id && input.inputID == toRemove) {
				action.inputs[i].inputID = toAdd;
			}
		}
	}
	,bindKeys: function(control,keys) {
		switch(control._hx_index) {
		case 0:
			var action = this._note_left;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._note_leftP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._note_leftR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 1:
			var action = this._note_down;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._note_downP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._note_downR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 2:
			var action = this._note_up;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._note_upP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._note_upR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 3:
			var action = this._note_right;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._note_rightP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._note_rightR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 4:
			var action = this._ui_up;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._ui_upP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._ui_upR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 5:
			var action = this._ui_left;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._ui_leftP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._ui_leftR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 6:
			var action = this._ui_right;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._ui_rightP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._ui_rightR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 7:
			var action = this._ui_down;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._ui_downP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._ui_downR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 8:
			var action = this._reset;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 9:
			var action = this._accept;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 10:
			var action = this._back;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 11:
			var action = this._pause;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		}
	}
	,setKeyboardScheme: function(scheme,reset) {
		if(reset == null) {
			reset = true;
		}
		if(reset) {
			this.removeKeyboard();
		}
		this.keyboardScheme = scheme;
		switch(scheme._hx_index) {
		case 0:
			var keys = [87,38];
			switch(Control.UI_UP._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			var keys = [83,40];
			switch(Control.UI_DOWN._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			var keys = [65,37];
			switch(Control.UI_LEFT._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			var keys = [68,39];
			switch(Control.UI_RIGHT._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			var keys = [87,38];
			switch(Control.NOTE_UP._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			var keys = [83,40];
			switch(Control.NOTE_DOWN._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			var keys = [65,37];
			switch(Control.NOTE_LEFT._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			var keys = [68,39];
			switch(Control.NOTE_RIGHT._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			var keys = [90,32,13];
			switch(Control.ACCEPT._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			var keys = [88,8,27];
			switch(Control.BACK._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			var keys = [80,13,27];
			switch(Control.PAUSE._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			var keys = [82];
			switch(Control.RESET._hx_index) {
			case 0:
				var action = this._note_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 1:
				var action = this._note_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 2:
				var action = this._note_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 3:
				var action = this._note_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._note_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 4:
				var action = this._ui_up;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_upR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 5:
				var action = this._ui_left;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_leftR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 6:
				var action = this._ui_right;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_rightR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 7:
				var action = this._ui_down;
				var state = 1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downP;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				var action = this._ui_downR;
				var state = -1;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 8:
				var action = this._reset;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 9:
				var action = this._accept;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 10:
				var action = this._back;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			case 11:
				var action = this._pause;
				var state = 2;
				var _g = 0;
				while(_g < keys.length) {
					var key = keys[_g];
					++_g;
					action.addKey(key,state);
				}
				break;
			}
			break;
		case 1:
			if(scheme.first) {
				var keys = [87];
				switch(Control.UI_UP._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [83];
				switch(Control.UI_DOWN._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [65];
				switch(Control.UI_LEFT._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [68];
				switch(Control.UI_RIGHT._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [87];
				switch(Control.NOTE_UP._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [83];
				switch(Control.NOTE_DOWN._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [65];
				switch(Control.NOTE_LEFT._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [68];
				switch(Control.NOTE_RIGHT._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [71,90];
				switch(Control.ACCEPT._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [72,88];
				switch(Control.BACK._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [49];
				switch(Control.PAUSE._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [82];
				switch(Control.RESET._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
			} else {
				var keys = [38];
				switch(Control.UI_UP._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [40];
				switch(Control.UI_DOWN._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [37];
				switch(Control.UI_LEFT._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [39];
				switch(Control.UI_RIGHT._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [38];
				switch(Control.NOTE_UP._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [40];
				switch(Control.NOTE_DOWN._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [37];
				switch(Control.NOTE_LEFT._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [39];
				switch(Control.NOTE_RIGHT._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [79];
				switch(Control.ACCEPT._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [80];
				switch(Control.BACK._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [13];
				switch(Control.PAUSE._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
				var keys = [8];
				switch(Control.RESET._hx_index) {
				case 0:
					var action = this._note_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 1:
					var action = this._note_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 2:
					var action = this._note_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 3:
					var action = this._note_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._note_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 4:
					var action = this._ui_up;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_upR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 5:
					var action = this._ui_left;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_leftR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 6:
					var action = this._ui_right;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_rightR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 7:
					var action = this._ui_down;
					var state = 1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downP;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					var action = this._ui_downR;
					var state = -1;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 8:
					var action = this._reset;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 9:
					var action = this._accept;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 10:
					var action = this._back;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				case 11:
					var action = this._pause;
					var state = 2;
					var _g = 0;
					while(_g < keys.length) {
						var key = keys[_g];
						++_g;
						action.addKey(key,state);
					}
					break;
				}
			}
			break;
		case 2:
			break;
		case 3:
			break;
		}
	}
	,removeKeyboard: function() {
		var _g = 0;
		var _g1 = this.digitalActions;
		while(_g < _g1.length) {
			var action = _g1[_g];
			++_g;
			var i = action.inputs.length;
			while(i-- > 0) {
				var input = action.inputs[i];
				if(input.device == flixel_input_actions_FlxInputDevice.KEYBOARD) {
					action.remove(input);
				}
			}
		}
	}
	,addGamepadWithSaveData: function(id,data) {
		this.gamepadsAdded.push(id);
		this.fromSaveData(data,Device.Gamepad(id));
	}
	,addDefaultGamepad: function(id) {
		var map = new haxe_ds_EnumValueMap();
		map.set(Control.ACCEPT,[65]);
		map.set(Control.BACK,[66,this._back.check()]);
		map.set(Control.UI_UP,[11,34]);
		map.set(Control.UI_DOWN,[12,36]);
		map.set(Control.UI_LEFT,[13,37]);
		map.set(Control.UI_RIGHT,[14,35]);
		map.set(Control.NOTE_UP,[11,89,34,38]);
		map.set(Control.NOTE_DOWN,[12,65,36,40]);
		map.set(Control.NOTE_LEFT,[13,88,37,41]);
		map.set(Control.NOTE_RIGHT,[14,66,35,39]);
		map.set(Control.PAUSE,[7]);
		map.set(Control.RESET,[89]);
		this.gamepadsAdded.push(id);
		var keys;
		while(true) {
			keys = map.keys();
			if(!keys.hasNext()) {
				break;
			}
			var next = keys.next();
			this.bindButtons(next,id,map.get(next));
		}
	}
	,bindButtons: function(control,id,buttons) {
		switch(control._hx_index) {
		case 0:
			var action = this._note_left;
			var state = 1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._note_leftP;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._note_leftR;
			var state = -1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 1:
			var action = this._note_down;
			var state = 1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._note_downP;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._note_downR;
			var state = -1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 2:
			var action = this._note_up;
			var state = 1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._note_upP;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._note_upR;
			var state = -1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 3:
			var action = this._note_right;
			var state = 1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._note_rightP;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._note_rightR;
			var state = -1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 4:
			var action = this._ui_up;
			var state = 1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._ui_upP;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._ui_upR;
			var state = -1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 5:
			var action = this._ui_left;
			var state = 1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._ui_leftP;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._ui_leftR;
			var state = -1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 6:
			var action = this._ui_right;
			var state = 1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._ui_rightP;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._ui_rightR;
			var state = -1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 7:
			var action = this._ui_down;
			var state = 1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._ui_downP;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._ui_downR;
			var state = -1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 8:
			var action = this._reset;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 9:
			var action = this._accept;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 10:
			var action = this._back;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 11:
			var action = this._pause;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		}
	}
	,getInputsFor: function(control,device,list) {
		if(list == null) {
			list = [];
		}
		switch(device._hx_index) {
		case 0:
			var _g = 0;
			var _g1 = this.getActionFromControl(control).inputs;
			while(_g < _g1.length) {
				var input = _g1[_g];
				++_g;
				if(input.device == flixel_input_actions_FlxInputDevice.KEYBOARD) {
					list.push(input.inputID);
				}
			}
			break;
		case 1:
			var id = device.id;
			var _g = 0;
			var _g1 = this.getActionFromControl(control).inputs;
			while(_g < _g1.length) {
				var input = _g1[_g];
				++_g;
				if(input.device == flixel_input_actions_FlxInputDevice.GAMEPAD && input.deviceID != -1 && input.deviceID == id) {
					list.push(input.inputID);
				}
			}
			break;
		}
		return list;
	}
	,fromSaveData: function(data,device) {
		var _g = 0;
		var _g1 = Control.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			var inputs = Reflect.field(data,$hxEnums[button.__enum__].__constructs__[button._hx_index]);
			if(inputs != null) {
				switch(device._hx_index) {
				case 0:
					this.bindKeys(button,inputs);
					break;
				case 1:
					var id = device.id;
					this.bindButtons(button,id,inputs);
					break;
				}
			}
		}
	}
	,createSaveData: function(device) {
		var cannotReturn = true;
		var obj = { };
		var _g = 0;
		var _g1 = Control.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			var inputs = this.getInputsFor(button,device);
			cannotReturn = cannotReturn && inputs.length == 0;
			obj[$hxEnums[button.__enum__].__constructs__[button._hx_index]] = inputs;
		}
		if(cannotReturn) {
			return null;
		} else {
			return obj;
		}
	}
	,__class__: Controls
	,__properties__: {get_RESET:"get_RESET",get_PAUSE:"get_PAUSE",get_BACK:"get_BACK",get_ACCEPT:"get_ACCEPT",get_NOTE_DOWN_R:"get_NOTE_DOWN_R",get_NOTE_RIGHT_R:"get_NOTE_RIGHT_R",get_NOTE_LEFT_R:"get_NOTE_LEFT_R",get_NOTE_UP_R:"get_NOTE_UP_R",get_NOTE_DOWN_P:"get_NOTE_DOWN_P",get_NOTE_RIGHT_P:"get_NOTE_RIGHT_P",get_NOTE_LEFT_P:"get_NOTE_LEFT_P",get_NOTE_UP_P:"get_NOTE_UP_P",get_NOTE_DOWN:"get_NOTE_DOWN",get_NOTE_RIGHT:"get_NOTE_RIGHT",get_NOTE_LEFT:"get_NOTE_LEFT",get_NOTE_UP:"get_NOTE_UP",get_UI_DOWN_R:"get_UI_DOWN_R",get_UI_RIGHT_R:"get_UI_RIGHT_R",get_UI_LEFT_R:"get_UI_LEFT_R",get_UI_UP_R:"get_UI_UP_R",get_UI_DOWN_P:"get_UI_DOWN_P",get_UI_RIGHT_P:"get_UI_RIGHT_P",get_UI_LEFT_P:"get_UI_LEFT_P",get_UI_UP_P:"get_UI_UP_P",get_UI_DOWN:"get_UI_DOWN",get_UI_RIGHT:"get_UI_RIGHT",get_UI_LEFT:"get_UI_LEFT",get_UI_UP:"get_UI_UP"}
});
var CoolUtil = function() { };
$hxClasses["CoolUtil"] = CoolUtil;
CoolUtil.__name__ = "CoolUtil";
CoolUtil.difficultyString = function() {
	return CoolUtil.difficultyArray[PlayState.storyDifficulty];
};
CoolUtil.coolTextFile = function(path) {
	var daList = StringTools.trim(lime_utils_Assets.getText(path)).split("\n");
	var _g = 0;
	var _g1 = daList.length;
	while(_g < _g1) {
		var i = _g++;
		daList[i] = StringTools.trim(daList[i]);
	}
	return daList;
};
CoolUtil.numberArray = function(max,min) {
	if(min == null) {
		min = 0;
	}
	var dumbArray = [];
	var _g = min;
	var _g1 = max;
	while(_g < _g1) {
		var i = _g++;
		dumbArray.push(i);
	}
	return dumbArray;
};
CoolUtil.camLerpShit = function(ratio) {
	return flixel_FlxG.elapsed / 0.016666666666666666 * ratio;
};
CoolUtil.coolLerp = function(a,b,ratio) {
	return a + CoolUtil.camLerpShit(ratio) * (b - a);
};
var CutsceneAnimTestState = function() {
	this.curSelected = 0;
	flixel_FlxState.call(this);
	var grid = flixel_addons_display_FlxGridOverlay.create(10,10);
	grid.scrollFactor.set(0.5,0.5);
	this.add(grid);
	this.debugTxt = new flixel_text_FlxText(900,20,0,"",20);
	this.debugTxt.set_color(-16776961);
	this.add(this.debugTxt);
	var tankman = new animate_FlxAnimate(600,200);
	this.add(tankman);
};
$hxClasses["CutsceneAnimTestState"] = CutsceneAnimTestState;
CutsceneAnimTestState.__name__ = "CutsceneAnimTestState";
CutsceneAnimTestState.__super__ = flixel_FlxState;
CutsceneAnimTestState.prototype = $extend(flixel_FlxState.prototype,{
	curSelected: null
	,debugTxt: null
	,update: function(elapsed) {
		flixel_FlxState.prototype.update.call(this,elapsed);
	}
	,__class__: CutsceneAnimTestState
});
var DialogueBox = function(talkingRight,dialogueList) {
	if(talkingRight == null) {
		talkingRight = true;
	}
	this.isEnding = false;
	this.dialogueEnded = false;
	this.dialogueStarted = false;
	this.dialogueOpened = false;
	this.dialogueList = [];
	this.curCharacter = "";
	var _gthis = this;
	flixel_group_FlxTypedSpriteGroup.call(this);
	switch(PlayState.SONG.song.toLowerCase()) {
	case "senpai":
		flixel_FlxG.sound.playMusic(Paths.getPath("music/" + "Lunchbox" + "." + "mp3","MUSIC",null),0);
		var _this = flixel_FlxG.sound.music;
		var Duration = 1;
		var From = 0;
		var To = 0.8;
		if(To == null) {
			To = 1;
		}
		if(From == null) {
			From = 0;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(_this._channel == null) {
			_this.play();
		}
		if(_this.fadeTween != null) {
			_this.fadeTween.cancel();
		}
		_this.fadeTween = flixel_tweens_FlxTween.num(From,To,Duration,{ onComplete : null},$bind(_this,_this.volumeTween));
		break;
	case "thorns":
		flixel_FlxG.sound.playMusic(Paths.getPath("music/" + "LunchboxScary" + "." + "mp3","MUSIC",null),0);
		var _this = flixel_FlxG.sound.music;
		var Duration = 1;
		var From = 0;
		var To = 0.8;
		if(To == null) {
			To = 1;
		}
		if(From == null) {
			From = 0;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(_this._channel == null) {
			_this.play();
		}
		if(_this.fadeTween != null) {
			_this.fadeTween.cancel();
		}
		_this.fadeTween = flixel_tweens_FlxTween.num(From,To,Duration,{ onComplete : null},$bind(_this,_this.volumeTween));
		break;
	}
	this.bgFade = new flixel_FlxSprite(-200,-200).makeGraphic(flixel_FlxG.width * 1.3 | 0,flixel_FlxG.height * 1.3 | 0,-4988968);
	this.bgFade.scrollFactor.set();
	this.bgFade.set_alpha(0);
	this.add(this.bgFade);
	new flixel_util_FlxTimer().start(0.83,function(tmr) {
		var _g = _gthis.bgFade;
		_g.set_alpha(_g.alpha + 0.13999999999999999);
		if(_gthis.bgFade.alpha > 0.7) {
			_gthis.bgFade.set_alpha(0.7);
		}
	},5);
	this.portraitLeft = new flixel_FlxSprite(-20,40);
	var library = null;
	this.portraitLeft.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/senpaiPortrait" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/senpaiPortrait" + ".xml","TEXT",library)));
	this.portraitLeft.animation.addByPrefix("enter","Senpai Portrait Enter",24,false);
	this.portraitLeft.setGraphicSize(this.portraitLeft.get_width() * PlayState.daPixelZoom * 0.9 | 0);
	this.portraitLeft.updateHitbox();
	this.portraitLeft.scrollFactor.set();
	this.add(this.portraitLeft);
	this.portraitLeft.set_visible(false);
	this.portraitRight = new flixel_FlxSprite(0,40);
	var library = null;
	this.portraitRight.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/bfPortrait" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/bfPortrait" + ".xml","TEXT",library)));
	this.portraitRight.animation.addByPrefix("enter","Boyfriend portrait enter",24,false);
	this.portraitRight.setGraphicSize(this.portraitRight.get_width() * PlayState.daPixelZoom * 0.9 | 0);
	this.portraitRight.updateHitbox();
	this.portraitRight.scrollFactor.set();
	this.add(this.portraitRight);
	this.portraitRight.set_visible(false);
	this.box = new flixel_FlxSprite(-20,45);
	var hasDialog = false;
	switch(PlayState.SONG.song.toLowerCase()) {
	case "roses":
		hasDialog = true;
		flixel_FlxG.sound.play(Paths.sound("ANGRY_TEXT_BOX"));
		var library = null;
		this.box.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/pixelUI/dialogueBox-senpaiMad" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/pixelUI/dialogueBox-senpaiMad" + ".xml","TEXT",library)));
		this.box.animation.addByPrefix("normalOpen","SENPAI ANGRY IMPACT SPEECH",24,false);
		this.box.animation.addByIndices("normal","SENPAI ANGRY IMPACT SPEECH",[4],"",24);
		break;
	case "senpai":
		hasDialog = true;
		var library = null;
		this.box.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/pixelUI/dialogueBox-pixel" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/pixelUI/dialogueBox-pixel" + ".xml","TEXT",library)));
		this.box.animation.addByPrefix("normalOpen","Text Box Appear",24,false);
		this.box.animation.addByIndices("normal","Text Box Appear",[4],"",24);
		break;
	case "thorns":
		hasDialog = true;
		var library = null;
		this.box.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/pixelUI/dialogueBox-evil" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/pixelUI/dialogueBox-evil" + ".xml","TEXT",library)));
		this.box.animation.addByPrefix("normalOpen","Spirit Textbox spawn",24,false);
		this.box.animation.addByIndices("normal","Spirit Textbox spawn",[11],"",24);
		var face = new flixel_FlxSprite(320,170).loadGraphic(Paths.getPath("images/" + "weeb/spiritFaceForward" + ".png","IMAGE",null));
		face.setGraphicSize(face.get_width() * 6 | 0);
		this.add(face);
		break;
	}
	this.dialogueList = dialogueList;
	if(!hasDialog) {
		return;
	}
	this.box.animation.play("normalOpen");
	this.box.setGraphicSize(this.box.get_width() * PlayState.daPixelZoom * 0.9 | 0);
	this.box.updateHitbox();
	this.add(this.box);
	this.box.screenCenter(flixel_util_FlxAxes.X);
	this.portraitLeft.screenCenter(flixel_util_FlxAxes.X);
	this.handSelect = new flixel_FlxSprite(1042,590).loadGraphic(Paths.getPath("images/" + "weeb/pixelUI/hand_textbox" + ".png","IMAGE",null));
	this.handSelect.setGraphicSize(this.handSelect.get_width() * PlayState.daPixelZoom * 0.9 | 0);
	this.handSelect.updateHitbox();
	this.handSelect.set_visible(false);
	this.add(this.handSelect);
	talkingRight = !talkingRight;
	this.dropText = new flixel_text_FlxText(242,502,flixel_FlxG.width * 0.6 | 0,"",32);
	this.dropText.set_font("Pixel Arial 11 Bold");
	this.dropText.set_color(-2583404);
	this.add(this.dropText);
	this.swagDialogue = new flixel_addons_text_FlxTypeText(240,500,flixel_FlxG.width * 0.6 | 0,"",32);
	this.swagDialogue.set_font("Pixel Arial 11 Bold");
	this.swagDialogue.set_color(-12640223);
	var tmp = flixel_FlxG.sound.load(Paths.sound("pixelText"),0.6);
	this.swagDialogue.sounds = [tmp];
	this.add(this.swagDialogue);
	this.dialogue = new Alphabet(0,80,"",false,true);
};
$hxClasses["DialogueBox"] = DialogueBox;
DialogueBox.__name__ = "DialogueBox";
DialogueBox.__super__ = flixel_group_FlxTypedSpriteGroup;
DialogueBox.prototype = $extend(flixel_group_FlxTypedSpriteGroup.prototype,{
	box: null
	,curCharacter: null
	,dialogue: null
	,dialogueList: null
	,swagDialogue: null
	,dropText: null
	,finishThing: null
	,portraitLeft: null
	,portraitRight: null
	,handSelect: null
	,bgFade: null
	,dialogueOpened: null
	,dialogueStarted: null
	,dialogueEnded: null
	,update: function(elapsed) {
		var _gthis = this;
		if(PlayState.SONG.song.toLowerCase() == "roses") {
			this.portraitLeft.set_visible(false);
		}
		if(PlayState.SONG.song.toLowerCase() == "thorns") {
			this.portraitLeft.set_color(-16777216);
			this.swagDialogue.set_color(-1);
			this.dropText.set_color(-16777216);
		}
		this.dropText.set_text(this.swagDialogue.text);
		if(this.box.animation._curAnim != null) {
			if(this.box.animation._curAnim.name == "normalOpen" && this.box.animation._curAnim.finished) {
				this.box.animation.play("normal");
				this.dialogueOpened = true;
			}
		}
		if(this.dialogueOpened && !this.dialogueStarted) {
			this.startDialogue();
			this.dialogueStarted = true;
		}
		if(flixel_FlxG.keys.justPressed.get_ANY() && this.dialogueEnded) {
			this.remove(this.dialogue);
			flixel_FlxG.sound.play(Paths.sound("clickText"),0.8);
			if(this.dialogueList[1] == null && this.dialogueList[0] != null) {
				if(!this.isEnding) {
					this.isEnding = true;
					if(PlayState.SONG.song.toLowerCase() == "senpai" || PlayState.SONG.song.toLowerCase() == "thorns") {
						var _this = flixel_FlxG.sound.music;
						var Duration = 2.2;
						var To = 0;
						if(To == null) {
							To = 0;
						}
						if(Duration == null) {
							Duration = 1;
						}
						if(_this.fadeTween != null) {
							_this.fadeTween.cancel();
						}
						_this.fadeTween = flixel_tweens_FlxTween.num(_this._volume,To,Duration,{ onComplete : null},$bind(_this,_this.volumeTween));
					}
					new flixel_util_FlxTimer().start(0.2,function(tmr) {
						var _g = _gthis.box;
						_g.set_alpha(_g.alpha - 0.2);
						var _g = _gthis.bgFade;
						_g.set_alpha(_g.alpha - 0.13999999999999999);
						_gthis.portraitLeft.set_visible(false);
						_gthis.portraitRight.set_visible(false);
						var _g = _gthis.swagDialogue;
						_g.set_alpha(_g.alpha - 0.2);
						var _g = _gthis.handSelect;
						_g.set_alpha(_g.alpha - 0.2);
						_gthis.dropText.set_alpha(_gthis.swagDialogue.alpha);
					},5);
					new flixel_util_FlxTimer().start(1.2,function(tmr) {
						_gthis.finishThing();
						_gthis.kill();
					});
				}
			} else {
				HxOverrides.remove(this.dialogueList,this.dialogueList[0]);
				this.startDialogue();
			}
		} else if(flixel_FlxG.keys.justPressed.get_ANY() && this.dialogueStarted) {
			this.swagDialogue.skip();
		}
		flixel_group_FlxTypedSpriteGroup.prototype.update.call(this,elapsed);
	}
	,isEnding: null
	,startDialogue: function() {
		var _gthis = this;
		this.cleanDialog();
		this.swagDialogue.resetText(this.dialogueList[0]);
		this.swagDialogue.start(0.04,true);
		this.swagDialogue.completeCallback = function() {
			haxe_Log.trace("dialogue finish",{ fileName : "source/DialogueBox.hx", lineNumber : 242, className : "DialogueBox", methodName : "startDialogue"});
			_gthis.handSelect.set_visible(true);
			_gthis.dialogueEnded = true;
		};
		this.handSelect.set_visible(false);
		this.dialogueEnded = false;
		switch(this.curCharacter) {
		case "bf":
			this.portraitLeft.set_visible(false);
			if(!this.portraitRight.visible) {
				this.portraitRight.set_visible(true);
				this.portraitRight.animation.play("enter");
			}
			break;
		case "dad":
			this.portraitRight.set_visible(false);
			if(!this.portraitLeft.visible) {
				this.portraitLeft.set_visible(true);
				this.portraitLeft.animation.play("enter");
			}
			break;
		}
	}
	,cleanDialog: function() {
		var splitName = this.dialogueList[0].split(":");
		this.curCharacter = splitName[1];
		this.dialogueList[0] = StringTools.trim(HxOverrides.substr(this.dialogueList[0],splitName[1].length + 2,null));
	}
	,__class__: DialogueBox
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var FlxVideo = function(VideoAsset) {
	flixel_FlxBasic.call(this);
	this.video = new openfl_media_Video();
	this.video.set_x(0);
	this.video.set_y(0);
	flixel_FlxG.addChildBelowMouse(this.video);
	var netConnection = new openfl_net_NetConnection();
	netConnection.connect(null);
	this.netStream = new openfl_net_NetStream(netConnection);
	this.netStream.client = { onMetaData : $bind(this,this.client_onMetaData)};
	netConnection.addEventListener("netStatus",$bind(this,this.netConnection_onNetStatus));
	this.netStream.play(Paths.getPath(VideoAsset,"TEXT",null));
};
$hxClasses["FlxVideo"] = FlxVideo;
FlxVideo.__name__ = "FlxVideo";
FlxVideo.__super__ = flixel_FlxBasic;
FlxVideo.prototype = $extend(flixel_FlxBasic.prototype,{
	video: null
	,netStream: null
	,finishCallback: null
	,finishVideo: function() {
		this.netStream.dispose();
		if(flixel_FlxG.game.contains(this.video)) {
			flixel_FlxG.game.removeChild(this.video);
		}
		if(this.finishCallback != null) {
			this.finishCallback();
		}
	}
	,client_onMetaData: function(e) {
		this.video.attachNetStream(this.netStream);
		this.video.set_width(flixel_FlxG.width);
		this.video.set_height(flixel_FlxG.height);
	}
	,netConnection_onNetStatus: function(e) {
		if(e.info.code == "NetStream.Play.Complete") {
			this.finishVideo();
		}
	}
	,__class__: FlxVideo
});
var FreeplayState = function(TransIn,TransOut) {
	this.iconArray = [];
	this.curPlaying = false;
	this.coolColors = [-7179779,-7179779,-14535868,-7072173,-223529,-6237697,-34625,-608764];
	this.intendedScore = 0;
	this.lerpScore = 0;
	this.curDifficulty = 1;
	this.curSelected = 0;
	this.songs = [];
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["FreeplayState"] = FreeplayState;
FreeplayState.__name__ = "FreeplayState";
FreeplayState.__super__ = MusicBeatState;
FreeplayState.prototype = $extend(MusicBeatState.prototype,{
	songs: null
	,selector: null
	,curSelected: null
	,curDifficulty: null
	,bg: null
	,scoreBG: null
	,scoreText: null
	,diffText: null
	,lerpScore: null
	,intendedScore: null
	,grpSongs: null
	,coolColors: null
	,curPlaying: null
	,iconArray: null
	,create: function() {
		var initSonglist = CoolUtil.coolTextFile(Paths.getPath("data/" + "freeplaySonglist" + ".txt","TEXT",null));
		var _g = 0;
		var _g1 = initSonglist.length;
		while(_g < _g1) {
			var i = _g++;
			this.songs.push(new SongMetadata(initSonglist[i],1,"gf"));
		}
		if(flixel_FlxG.sound.music._channel == null) {
			flixel_FlxG.sound.playMusic(Paths.getPath("music/" + "freakyMenu" + "." + "mp3","MUSIC",null));
		}
		if(StoryMenuState.weekUnlocked[2]) {
			this.addWeek(["Bopeebo","Fresh","Dadbattle"],1,["dad"]);
		}
		if(StoryMenuState.weekUnlocked[2]) {
			this.addWeek(["Spookeez","South","Monster"],2,["spooky","spooky","monster"]);
		}
		if(StoryMenuState.weekUnlocked[3]) {
			this.addWeek(["Pico","Philly","Blammed"],3,["pico"]);
		}
		if(StoryMenuState.weekUnlocked[4]) {
			this.addWeek(["Satin-Panties","High","Milf"],4,["mom"]);
		}
		if(StoryMenuState.weekUnlocked[5]) {
			this.addWeek(["Cocoa","Eggnog","Winter-Horrorland"],5,["parents-christmas","parents-christmas","monster-christmas"]);
		}
		if(StoryMenuState.weekUnlocked[6]) {
			this.addWeek(["Senpai","Roses","Thorns"],6,["senpai","senpai","spirit"]);
		}
		if(StoryMenuState.weekUnlocked[7]) {
			this.addWeek(["Ugh","Guns","Stress"],7,["tankman"]);
		}
		this.bg = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + "menuDesat" + ".png","IMAGE",null));
		this.add(this.bg);
		this.grpSongs = new flixel_group_FlxTypedGroup();
		this.add(this.grpSongs);
		var _g = 0;
		var _g1 = this.songs.length;
		while(_g < _g1) {
			var i = _g++;
			var songText = new Alphabet(0,70 * i + 30,this.songs[i].songName,true,false);
			songText.isMenuItem = true;
			songText.targetY = i;
			this.grpSongs.add(songText);
			var icon = new HealthIcon(this.songs[i].songCharacter);
			icon.sprTracker = songText;
			this.iconArray.push(icon);
			this.add(icon);
		}
		this.scoreText = new flixel_text_FlxText(flixel_FlxG.width * 0.7,5,0,"",32);
		this.scoreText.setFormat("assets/fonts/" + "vcr.ttf",32,-1,"right");
		this.scoreBG = new flixel_FlxSprite(this.scoreText.x - 6,0).makeGraphic(1,66,-16777216);
		this.scoreBG.set_antialiasing(false);
		this.scoreBG.set_alpha(0.6);
		this.add(this.scoreBG);
		this.diffText = new flixel_text_FlxText(this.scoreText.x,this.scoreText.y + 36,0,"",24);
		this.diffText.set_font(this.scoreText._font);
		this.add(this.diffText);
		this.add(this.scoreText);
		this.changeSelection();
		this.changeDiff();
		this.selector = new flixel_text_FlxText();
		this.selector.set_size(40);
		this.selector.set_text(">");
		var swag = new Alphabet(1,0,"swag");
		MusicBeatState.prototype.create.call(this);
	}
	,addSong: function(songName,weekNum,songCharacter) {
		this.songs.push(new SongMetadata(songName,weekNum,songCharacter));
	}
	,addWeek: function(songs,weekNum,songCharacters) {
		if(songCharacters == null) {
			songCharacters = ["bf"];
		}
		var num = 0;
		var _g = 0;
		while(_g < songs.length) {
			var song = songs[_g];
			++_g;
			this.addSong(song,weekNum,songCharacters[num]);
			if(songCharacters.length != 1) {
				++num;
			}
		}
	}
	,update: function(elapsed) {
		MusicBeatState.prototype.update.call(this,elapsed);
		if(flixel_FlxG.sound.music != null && flixel_FlxG.sound.music._volume < 0.7) {
			var _g = flixel_FlxG.sound.music;
			_g.set_volume(_g._volume + 0.5 * flixel_FlxG.elapsed);
		}
		this.lerpScore = CoolUtil.coolLerp(this.lerpScore,this.intendedScore,0.4);
		var tmp = this.bg;
		var Color1 = this.bg.color;
		var Color2 = this.coolColors[this.songs[this.curSelected].week % this.coolColors.length];
		var Factor = CoolUtil.camLerpShit(0.045);
		if(Factor == null) {
			Factor = 0.5;
		}
		var r = ((Color2 >> 16 & 255) - (Color1 >> 16 & 255)) * Factor + (Color1 >> 16 & 255) | 0;
		var g = ((Color2 >> 8 & 255) - (Color1 >> 8 & 255)) * Factor + (Color1 >> 8 & 255) | 0;
		var b = ((Color2 & 255) - (Color1 & 255)) * Factor + (Color1 & 255) | 0;
		var a = ((Color2 >> 24 & 255) - (Color1 >> 24 & 255)) * Factor + (Color1 >> 24 & 255) | 0;
		var Alpha = a;
		if(Alpha == null) {
			Alpha = 255;
		}
		var color = flixel_util_FlxColor._new();
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 255;
		}
		color &= -16711681;
		color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
		color &= -65281;
		color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
		color &= -256;
		color |= b > 255 ? 255 : b < 0 ? 0 : b;
		color &= 16777215;
		color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
		tmp.set_color(color);
		this.scoreText.set_text("PERSONAL BEST:" + Math.round(this.lerpScore));
		this.positionHighscore();
		var upP = PlayerSettings.player1.controls._ui_upP.check();
		var downP = PlayerSettings.player1.controls._ui_downP.check();
		var accepted = PlayerSettings.player1.controls._accept.check();
		if(upP) {
			this.changeSelection(-1);
		}
		if(downP) {
			this.changeSelection(1);
		}
		if(flixel_FlxG.mouse.wheel != 0) {
			this.changeSelection(-Math.round(flixel_FlxG.mouse.wheel / 4));
		}
		if(PlayerSettings.player1.controls._ui_leftP.check()) {
			this.changeDiff(-1);
		}
		if(PlayerSettings.player1.controls._ui_rightP.check()) {
			this.changeDiff(1);
		}
		if(PlayerSettings.player1.controls._back.check()) {
			flixel_FlxG.sound.play(Paths.sound("cancelMenu"));
			var nextState = new MainMenuState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
		if(accepted) {
			var poop = Highscore.formatSong(this.songs[this.curSelected].songName.toLowerCase(),this.curDifficulty);
			PlayState.SONG = Song.loadFromJson(poop,this.songs[this.curSelected].songName.toLowerCase());
			PlayState.isStoryMode = false;
			PlayState.storyDifficulty = this.curDifficulty;
			PlayState.storyWeek = this.songs[this.curSelected].week;
			haxe_Log.trace("CUR WEEK" + PlayState.storyWeek,{ fileName : "source/FreeplayState.hx", lineNumber : 236, className : "FreeplayState", methodName : "update"});
			var nextState = LoadingState.getNextState(new PlayState(),false);
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
	}
	,changeDiff: function(change) {
		if(change == null) {
			change = 0;
		}
		this.curDifficulty += change;
		if(this.curDifficulty < 0) {
			this.curDifficulty = 2;
		}
		if(this.curDifficulty > 2) {
			this.curDifficulty = 0;
		}
		this.intendedScore = Highscore.getScore(this.songs[this.curSelected].songName,this.curDifficulty);
		PlayState.storyDifficulty = this.curDifficulty;
		this.diffText.set_text("< " + CoolUtil.difficultyString() + " >");
		this.positionHighscore();
	}
	,changeSelection: function(change) {
		if(change == null) {
			change = 0;
		}
		flixel_FlxG.sound.play(Paths.sound("scrollMenu"),0.4);
		this.curSelected += change;
		if(this.curSelected < 0) {
			this.curSelected = this.songs.length - 1;
		}
		if(this.curSelected >= this.songs.length) {
			this.curSelected = 0;
		}
		this.intendedScore = Highscore.getScore(this.songs[this.curSelected].songName,this.curDifficulty);
		var bullShit = 0;
		var _g = 0;
		var _g1 = this.iconArray.length;
		while(_g < _g1) {
			var i = _g++;
			this.iconArray[i].set_alpha(0.6);
		}
		this.iconArray[this.curSelected].set_alpha(1);
		var _g = 0;
		var _g1 = this.grpSongs.members;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.targetY = bullShit - this.curSelected;
			++bullShit;
			item.set_alpha(0.6);
			if(item.targetY == 0) {
				item.set_alpha(1);
			}
		}
	}
	,positionHighscore: function() {
		this.scoreText.set_x(flixel_FlxG.width - this.scoreText.get_width() - 6);
		this.scoreBG.scale.set_x(flixel_FlxG.width - this.scoreText.x + 6);
		this.scoreBG.set_x(flixel_FlxG.width - this.scoreBG.scale.x / 2);
		this.diffText.set_x(this.scoreBG.x + this.scoreBG.get_width() / 2);
		var _g = this.diffText;
		_g.set_x(_g.x - this.diffText.get_width() / 2);
	}
	,__class__: FreeplayState
});
var SongMetadata = function(song,week,songCharacter) {
	this.songCharacter = "";
	this.week = 0;
	this.songName = "";
	this.songName = song;
	this.week = week;
	this.songCharacter = songCharacter;
};
$hxClasses["SongMetadata"] = SongMetadata;
SongMetadata.__name__ = "SongMetadata";
SongMetadata.prototype = {
	songName: null
	,week: null
	,songCharacter: null
	,__class__: SongMetadata
};
var flixel_FlxSubState = function(BGColor) {
	if(BGColor == null) {
		BGColor = 0;
	}
	this._created = false;
	flixel_FlxState.call(this);
	this.closeCallback = null;
	this.openCallback = null;
	if(flixel_FlxG.renderTile) {
		this._bgSprite = new flixel_system_FlxBGSprite();
	}
	this.set_bgColor(BGColor);
};
$hxClasses["flixel.FlxSubState"] = flixel_FlxSubState;
flixel_FlxSubState.__name__ = "flixel.FlxSubState";
flixel_FlxSubState.__super__ = flixel_FlxState;
flixel_FlxSubState.prototype = $extend(flixel_FlxState.prototype,{
	openCallback: null
	,closeCallback: null
	,_bgSprite: null
	,_parentState: null
	,_bgColor: null
	,_created: null
	,draw: function() {
		if(flixel_FlxG.renderBlit) {
			var _g = 0;
			var _g1 = this.get_cameras();
			while(_g < _g1.length) {
				var camera = _g1[_g];
				++_g;
				camera.fill(this._bgColor);
			}
		} else {
			this._bgSprite.draw();
		}
		flixel_FlxState.prototype.draw.call(this);
	}
	,destroy: function() {
		flixel_FlxState.prototype.destroy.call(this);
		this.closeCallback = null;
		this.openCallback = null;
		this._parentState = null;
		this._bgSprite = null;
	}
	,close: function() {
		if(this._parentState != null && this._parentState.subState == this) {
			this._parentState.closeSubState();
		}
	}
	,get_bgColor: function() {
		return this._bgColor;
	}
	,set_bgColor: function(Value) {
		if(flixel_FlxG.renderTile && this._bgSprite != null) {
			this._bgSprite.get_pixels().setPixel32(0,0,Value);
		}
		return this._bgColor = Value;
	}
	,__class__: flixel_FlxSubState
});
var MusicBeatSubstate = function() {
	this.curBeat = 0;
	this.curStep = 0;
	flixel_FlxSubState.call(this);
};
$hxClasses["MusicBeatSubstate"] = MusicBeatSubstate;
MusicBeatSubstate.__name__ = "MusicBeatSubstate";
MusicBeatSubstate.__super__ = flixel_FlxSubState;
MusicBeatSubstate.prototype = $extend(flixel_FlxSubState.prototype,{
	curStep: null
	,curBeat: null
	,get_controls: function() {
		return PlayerSettings.player1.controls;
	}
	,update: function(elapsed) {
		var oldStep = this.curStep;
		this.updateCurStep();
		this.curBeat = Math.floor(this.curStep / 4);
		if(oldStep != this.curStep && this.curStep >= 0) {
			this.stepHit();
		}
		flixel_FlxSubState.prototype.update.call(this,elapsed);
	}
	,updateCurStep: function() {
		var lastChange = { stepTime : 0, songTime : 0, bpm : 0};
		var _g = 0;
		var _g1 = Conductor.bpmChangeMap.length;
		while(_g < _g1) {
			var i = _g++;
			if(Conductor.songPosition > Conductor.bpmChangeMap[i].songTime) {
				lastChange = Conductor.bpmChangeMap[i];
			}
		}
		this.curStep = lastChange.stepTime + Math.floor((Conductor.songPosition - lastChange.songTime) / Conductor.stepCrochet);
	}
	,stepHit: function() {
		if(this.curStep % 4 == 0) {
			this.beatHit();
		}
	}
	,beatHit: function() {
	}
	,__class__: MusicBeatSubstate
	,__properties__: $extend(flixel_FlxSubState.prototype.__properties__,{get_controls:"get_controls"})
});
var GameOverSubstate = function(x,y) {
	this.isEnding = false;
	this.playingDeathSound = false;
	this.randomGameover = 1;
	this.stageSuffix = "";
	var daStage = PlayState.curStage;
	var daBf = "";
	switch(daStage) {
	case "school":case "schoolEvil":
		this.stageSuffix = "-pixel";
		daBf = "bf-pixel-dead";
		break;
	default:
		daBf = "bf";
	}
	if(PlayState.SONG.song.toLowerCase() == "stress") {
		daBf = "bf-holding-gf-dead";
	}
	MusicBeatSubstate.call(this);
	Conductor.songPosition = 0;
	this.bf = new Boyfriend(x,y,daBf);
	this.add(this.bf);
	this.camFollow = new flixel_FlxObject(this.bf.getGraphicMidpoint().x,this.bf.getGraphicMidpoint().y,1,1);
	this.add(this.camFollow);
	flixel_FlxG.sound.play(Paths.sound("fnf_loss_sfx" + this.stageSuffix));
	Conductor.changeBPM(100);
	flixel_FlxG.camera.scroll.set();
	flixel_FlxG.camera.target = null;
	this.bf.playAnim("firstDeath");
	var exclude = [];
	if(ui_PreferencesMenu.getPref("censor-naughty")) {
		exclude = [1,3,8,13,17,21];
	}
	this.randomGameover = flixel_FlxG.random.int(1,25,exclude);
};
$hxClasses["GameOverSubstate"] = GameOverSubstate;
GameOverSubstate.__name__ = "GameOverSubstate";
GameOverSubstate.__super__ = MusicBeatSubstate;
GameOverSubstate.prototype = $extend(MusicBeatSubstate.prototype,{
	bf: null
	,camFollow: null
	,stageSuffix: null
	,randomGameover: null
	,playingDeathSound: null
	,update: function(elapsed) {
		MusicBeatSubstate.prototype.update.call(this,elapsed);
		if(PlayerSettings.player1.controls._accept.check()) {
			this.endBullshit();
		}
		if(PlayerSettings.player1.controls._back.check()) {
			PlayState.deathCounter = 0;
			PlayState.seenCutscene = false;
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
			if(PlayState.isStoryMode) {
				var nextState = new StoryMenuState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			} else {
				var nextState = new FreeplayState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			}
		}
		if(this.bf.animation._curAnim.name == "firstDeath" && this.bf.animation._curAnim.curFrame == 12) {
			flixel_FlxG.camera.follow(this.camFollow,flixel_FlxCameraFollowStyle.LOCKON,0.01);
		}
		if(PlayState.storyWeek == 7) {
			if(this.bf.animation._curAnim.name == "firstDeath" && this.bf.animation._curAnim.finished && !this.playingDeathSound) {
				this.playingDeathSound = true;
				this.bf.startedDeath = true;
				this.coolStartDeath(0.2);
				flixel_FlxG.sound.play(Paths.sound("jeffGameover/jeffGameover-" + this.randomGameover),1,false,null,true,function() {
					var _this = flixel_FlxG.sound.music;
					var Duration = 4;
					var From = 0.2;
					var To = 1;
					if(To == null) {
						To = 1;
					}
					if(From == null) {
						From = 0;
					}
					if(Duration == null) {
						Duration = 1;
					}
					if(_this._channel == null) {
						_this.play();
					}
					if(_this.fadeTween != null) {
						_this.fadeTween.cancel();
					}
					_this.fadeTween = flixel_tweens_FlxTween.num(From,To,Duration,{ onComplete : null},$bind(_this,_this.volumeTween));
				});
			}
		} else if(this.bf.animation._curAnim.name == "firstDeath" && this.bf.animation._curAnim.finished) {
			this.bf.startedDeath = true;
			this.coolStartDeath();
		}
		if(flixel_FlxG.sound.music._channel != null) {
			Conductor.songPosition = flixel_FlxG.sound.music._time;
		}
	}
	,coolStartDeath: function(startVol) {
		if(startVol == null) {
			startVol = 1;
		}
		flixel_FlxG.sound.playMusic(Paths.getPath("music/" + ("gameOver" + this.stageSuffix) + "." + "mp3","MUSIC",null),startVol);
	}
	,beatHit: function() {
		MusicBeatSubstate.prototype.beatHit.call(this);
	}
	,isEnding: null
	,endBullshit: function() {
		if(!this.isEnding) {
			this.isEnding = true;
			this.bf.playAnim("deathConfirm",true);
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
			flixel_FlxG.sound.play(Paths.getPath("music/" + ("gameOverEnd" + this.stageSuffix) + "." + "mp3","MUSIC",null));
			new flixel_util_FlxTimer().start(0.7,function(tmr) {
				flixel_FlxG.camera.fade(-16777216,2,false,function() {
					var nextState = LoadingState.getNextState(new PlayState(),false);
					if(flixel_FlxG.game._state.switchTo(nextState)) {
						flixel_FlxG.game._requestedState = nextState;
					}
				});
			});
		}
	}
	,__class__: GameOverSubstate
});
var GitarooPause = function() {
	this.replaySelect = false;
	MusicBeatState.call(this);
};
$hxClasses["GitarooPause"] = GitarooPause;
GitarooPause.__name__ = "GitarooPause";
GitarooPause.__super__ = MusicBeatState;
GitarooPause.prototype = $extend(MusicBeatState.prototype,{
	replayButton: null
	,cancelButton: null
	,replaySelect: null
	,create: function() {
		if(flixel_FlxG.sound.music != null) {
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
		}
		var bg = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + "pauseAlt/pauseBG" + ".png","IMAGE",null));
		this.add(bg);
		var bf = new flixel_FlxSprite(0,30);
		var library = null;
		bf.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "pauseAlt/bfLol" + ".png","IMAGE",library),Paths.getPath("images/" + "pauseAlt/bfLol" + ".xml","TEXT",library)));
		bf.animation.addByPrefix("lol","funnyThing",13);
		bf.animation.play("lol");
		this.add(bf);
		bf.screenCenter(flixel_util_FlxAxes.X);
		this.replayButton = new flixel_FlxSprite(flixel_FlxG.width * 0.28,flixel_FlxG.height * 0.7);
		var library = null;
		this.replayButton.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "pauseAlt/pauseUI" + ".png","IMAGE",library),Paths.getPath("images/" + "pauseAlt/pauseUI" + ".xml","TEXT",library)));
		this.replayButton.animation.addByPrefix("selected","bluereplay",0,false);
		this.replayButton.animation.appendByPrefix("selected","yellowreplay");
		this.replayButton.animation.play("selected");
		this.add(this.replayButton);
		this.cancelButton = new flixel_FlxSprite(flixel_FlxG.width * 0.58,this.replayButton.y);
		var library = null;
		this.cancelButton.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "pauseAlt/pauseUI" + ".png","IMAGE",library),Paths.getPath("images/" + "pauseAlt/pauseUI" + ".xml","TEXT",library)));
		this.cancelButton.animation.addByPrefix("selected","bluecancel",0,false);
		this.cancelButton.animation.appendByPrefix("selected","cancelyellow");
		this.cancelButton.animation.play("selected");
		this.add(this.cancelButton);
		this.changeThing();
		MusicBeatState.prototype.create.call(this);
	}
	,update: function(elapsed) {
		if(PlayerSettings.player1.controls._ui_leftP.check() || PlayerSettings.player1.controls._ui_rightP.check()) {
			this.changeThing();
		}
		if(PlayerSettings.player1.controls._accept.check()) {
			if(this.replaySelect) {
				var nextState = new PlayState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			} else {
				var nextState = new MainMenuState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			}
		}
		MusicBeatState.prototype.update.call(this,elapsed);
	}
	,changeThing: function() {
		this.replaySelect = !this.replaySelect;
		if(this.replaySelect) {
			this.cancelButton.animation._curAnim.set_curFrame(0);
			this.replayButton.animation._curAnim.set_curFrame(1);
		} else {
			this.cancelButton.animation._curAnim.set_curFrame(1);
			this.replayButton.animation._curAnim.set_curFrame(0);
		}
	}
	,__class__: GitarooPause
});
var HealthIcon = function(char,isPlayer) {
	if(isPlayer == null) {
		isPlayer = false;
	}
	if(char == null) {
		char = "bf";
	}
	this.isOldIcon = false;
	this.isPlayer = false;
	flixel_FlxSprite.call(this);
	this.isPlayer = isPlayer;
	this.changeIcon(char);
	this.set_antialiasing(true);
	this.scrollFactor.set();
};
$hxClasses["HealthIcon"] = HealthIcon;
HealthIcon.__name__ = "HealthIcon";
HealthIcon.__super__ = flixel_FlxSprite;
HealthIcon.prototype = $extend(flixel_FlxSprite.prototype,{
	sprTracker: null
	,char: null
	,isPlayer: null
	,isOldIcon: null
	,swapOldIcon: function() {
		this.isOldIcon = !this.isOldIcon;
		if(this.isOldIcon) {
			this.changeIcon("bf-old");
		} else {
			this.changeIcon("bf");
		}
	}
	,changeIcon: function(char) {
		if(char != "bf-pixel" && char != "bf-old") {
			char = StringTools.trim(char.split("-")[0]);
		}
		if(char != this.char) {
			if(this.animation._animations.h[char] == null) {
				this.loadGraphic(Paths.getPath("images/" + ("icons/icon-" + char) + ".png","IMAGE",null),true,150,150);
				this.animation.add(char,[0,1],0,false,this.isPlayer);
			}
			this.animation.play(char);
			this.char = char;
		}
	}
	,update: function(elapsed) {
		flixel_FlxSprite.prototype.update.call(this,elapsed);
		if(this.sprTracker != null) {
			this.setPosition(this.sprTracker.x + this.sprTracker.get_width() + 10,this.sprTracker.y - 30);
		}
	}
	,__class__: HealthIcon
});
var Highscore = function() { };
$hxClasses["Highscore"] = Highscore;
Highscore.__name__ = "Highscore";
Highscore.saveScore = function(song,score,diff) {
	if(diff == null) {
		diff = 0;
	}
	if(score == null) {
		score = 0;
	}
	var daSong = Highscore.formatSong(song,diff);
	if(Object.prototype.hasOwnProperty.call(Highscore.songScores.h,daSong)) {
		if(Highscore.songScores.h[daSong] < score) {
			Highscore.setScore(daSong,score);
		}
	} else {
		Highscore.setScore(daSong,score);
	}
};
Highscore.saveWeekScore = function(week,score,diff) {
	if(diff == null) {
		diff = 0;
	}
	if(score == null) {
		score = 0;
	}
	if(week == null) {
		week = 1;
	}
	var daWeek = Highscore.formatSong("week" + week,diff);
	if(Object.prototype.hasOwnProperty.call(Highscore.songScores.h,daWeek)) {
		if(Highscore.songScores.h[daWeek] < score) {
			Highscore.setScore(daWeek,score);
		}
	} else {
		Highscore.setScore(daWeek,score);
	}
};
Highscore.setScore = function(song,score) {
	Highscore.songScores.h[song] = score;
	flixel_FlxG.save.data.songScores = Highscore.songScores;
	flixel_FlxG.save.flush();
};
Highscore.formatSong = function(song,diff) {
	var daSong = song;
	if(diff == 0) {
		daSong += "-easy";
	} else if(diff == 2) {
		daSong += "-hard";
	}
	return daSong;
};
Highscore.getScore = function(song,diff) {
	var this1 = Highscore.songScores;
	var key = Highscore.formatSong(song,diff);
	if(!Object.prototype.hasOwnProperty.call(this1.h,key)) {
		Highscore.setScore(Highscore.formatSong(song,diff),0);
	}
	var this1 = Highscore.songScores;
	var key = Highscore.formatSong(song,diff);
	return this1.h[key];
};
Highscore.getWeekScore = function(week,diff) {
	var this1 = Highscore.songScores;
	var key = Highscore.formatSong("week" + week,diff);
	if(!Object.prototype.hasOwnProperty.call(this1.h,key)) {
		Highscore.setScore(Highscore.formatSong("week" + week,diff),0);
	}
	var this1 = Highscore.songScores;
	var key = Highscore.formatSong("week" + week,diff);
	return this1.h[key];
};
Highscore.load = function() {
	if(flixel_FlxG.save.data.songScores != null) {
		Highscore.songScores = flixel_FlxG.save.data.songScores;
	}
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var InputFormatter = function() { };
$hxClasses["InputFormatter"] = InputFormatter;
InputFormatter.__name__ = "InputFormatter";
InputFormatter.format = function(input,dev) {
	switch(dev._hx_index) {
	case 0:
		return InputFormatter.getKeyName(input);
	case 1:
		var id = dev.id;
		return InputFormatter.shortenButtonName(flixel_FlxG.gamepads._activeGamepads[id].mapping.getInputLabel(input));
	}
};
InputFormatter.getKeyName = function(key) {
	switch(key) {
	case 8:
		return "BckSpc";
	case 17:
		return "Ctrl";
	case 18:
		return "Alt";
	case 20:
		return "Caps";
	case 33:
		return "PgUp";
	case 34:
		return "PgDown";
	case 48:
		return "0";
	case 49:
		return "1";
	case 50:
		return "2";
	case 51:
		return "3";
	case 52:
		return "4";
	case 53:
		return "5";
	case 54:
		return "6";
	case 55:
		return "7";
	case 56:
		return "8";
	case 57:
		return "9";
	case 96:
		return "#0";
	case 97:
		return "#1";
	case 98:
		return "#2";
	case 99:
		return "#3";
	case 100:
		return "#4";
	case 101:
		return "#5";
	case 102:
		return "#6";
	case 103:
		return "#7";
	case 104:
		return "#8";
	case 105:
		return "#9";
	case 106:
		return "#*";
	case 107:
		return "#+";
	case 109:
		return "#-";
	case 110:
		return "#.";
	case 186:
		return ";";
	case 188:
		return ",";
	case 190:
		return ".";
	case 191:
		return "/";
	case 192:
		return "`";
	case 219:
		return "[";
	case 220:
		return "\\";
	case 221:
		return "]";
	case 222:
		return "'";
	case 301:
		return "PrtScrn";
	default:
		var name = flixel_input_keyboard_FlxKey.toStringMap.h[key];
		return name.charAt(0).toUpperCase() + HxOverrides.substr(name,1,null).toLowerCase();
	}
};
InputFormatter.shortenButtonName = function(button) {
	if(button == null) {
		button = "";
	}
	button = button.toLowerCase();
	if(button == "") {
		return "[?]";
	}
	if(InputFormatter.dirReg.match(button)) {
		var a = InputFormatter.dirReg.matched(1).toUpperCase() + " ";
		var b = InputFormatter.dirReg.matched(2);
		return a + (b.charAt(0).toUpperCase() + HxOverrides.substr(b,1,null).toLowerCase());
	}
	return button.charAt(0).toUpperCase() + HxOverrides.substr(button,1,null).toLowerCase();
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = "IntIterator";
IntIterator.prototype = {
	min: null
	,max: null
	,hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
var LoadingState = function(target,stopMusic) {
	this.danceLeft = false;
	this.stopMusic = false;
	this.targetShit = 0;
	MusicBeatState.call(this);
	this.target = target;
	this.stopMusic = stopMusic;
};
$hxClasses["LoadingState"] = LoadingState;
LoadingState.__name__ = "LoadingState";
LoadingState.getSongPath = function() {
	return "songs:assets/songs/" + PlayState.SONG.song.toLowerCase() + "/Inst." + "mp3";
};
LoadingState.getVocalPath = function() {
	return "songs:assets/songs/" + PlayState.SONG.song.toLowerCase() + "/Voices." + "mp3";
};
LoadingState.loadAndSwitchState = function(target,stopMusic) {
	if(stopMusic == null) {
		stopMusic = false;
	}
	var nextState = LoadingState.getNextState(target,stopMusic);
	if(flixel_FlxG.game._state.switchTo(nextState)) {
		flixel_FlxG.game._requestedState = nextState;
	}
};
LoadingState.getNextState = function(target,stopMusic) {
	if(stopMusic == null) {
		stopMusic = false;
	}
	Paths.setCurrentLevel("week" + PlayState.storyWeek);
	var loaded = LoadingState.isSoundLoaded(LoadingState.getSongPath()) && (!PlayState.SONG.needsVoices || LoadingState.isSoundLoaded(LoadingState.getVocalPath())) && LoadingState.isLibraryLoaded("shared");
	if(!loaded) {
		return new LoadingState(target,stopMusic);
	}
	if(stopMusic && flixel_FlxG.sound.music != null) {
		var _this = flixel_FlxG.sound.music;
		_this.cleanup(_this.autoDestroy,true);
	}
	return target;
};
LoadingState.isSoundLoaded = function(path) {
	return openfl_utils_Assets.cache.hasSound(path);
};
LoadingState.isLibraryLoaded = function(library) {
	return openfl_utils_Assets.getLibrary(library) != null;
};
LoadingState.initSongsManifest = function() {
	var id = "songs";
	var promise = new lime_app_Promise();
	var library = lime_utils_Assets.getLibrary(id);
	if(library != null) {
		return lime_app_Future.withValue(library);
	}
	var path = id;
	var rootPath = null;
	var libraryPaths = lime_utils_Assets.libraryPaths;
	if(Object.prototype.hasOwnProperty.call(libraryPaths.h,id)) {
		path = libraryPaths.h[id];
		rootPath = haxe_io_Path.directory(path);
	} else {
		if(StringTools.endsWith(path,".bundle")) {
			rootPath = path;
			path += "/library.json";
		} else {
			rootPath = haxe_io_Path.directory(path);
		}
		path = lime_utils_Assets.__cacheBreak(path);
	}
	lime_utils_AssetManifest.loadFromFile(path,rootPath).onComplete(function(manifest) {
		if(manifest == null) {
			promise.error("Cannot parse asset manifest for library \"" + id + "\"");
			return;
		}
		var library = lime_utils_AssetLibrary.fromManifest(manifest);
		if(library == null) {
			promise.error("Cannot open library \"" + id + "\"");
		} else {
			lime_utils_Assets.libraries.h[id] = library;
			library.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
			promise.completeWith(lime_app_Future.withValue(library));
		}
	}).onError(function(_) {
		promise.error("There is no asset library with an ID of \"" + id + "\"");
	});
	return promise.future;
};
LoadingState.__super__ = MusicBeatState;
LoadingState.prototype = $extend(MusicBeatState.prototype,{
	target: null
	,targetShit: null
	,stopMusic: null
	,callbacks: null
	,logo: null
	,gfDance: null
	,danceLeft: null
	,funkay: null
	,loadBar: null
	,create: function() {
		var _gthis = this;
		var bg = new flixel_FlxSprite().makeGraphic(flixel_FlxG.width,flixel_FlxG.height,-3473587);
		this.add(bg);
		this.funkay = new flixel_FlxSprite();
		this.funkay.loadGraphic(Paths.getPath("images/" + "funkay" + ".png","IMAGE",null));
		this.funkay.setGraphicSize(0,flixel_FlxG.height);
		this.funkay.updateHitbox();
		this.funkay.set_antialiasing(true);
		this.add(this.funkay);
		this.funkay.scrollFactor.set();
		this.funkay.screenCenter();
		this.loadBar = new flixel_FlxSprite(0,flixel_FlxG.height - 20).makeGraphic(flixel_FlxG.width,10,-59694);
		this.loadBar.screenCenter(flixel_util_FlxAxes.X);
		this.add(this.loadBar);
		LoadingState.initSongsManifest().onComplete(function(lib) {
			_gthis.callbacks = new MultiCallback($bind(_gthis,_gthis.onLoad));
			var introComplete = _gthis.callbacks.add("introComplete");
			_gthis.checkLoadSong(LoadingState.getSongPath());
			if(PlayState.SONG.needsVoices) {
				_gthis.checkLoadSong(LoadingState.getVocalPath());
			}
			_gthis.checkLibrary("shared");
			if(PlayState.storyWeek > 0) {
				_gthis.checkLibrary("week" + PlayState.storyWeek);
			} else {
				_gthis.checkLibrary("tutorial");
			}
			flixel_FlxG.camera.fade(flixel_FlxG.camera.bgColor,0.5,true);
			new flixel_util_FlxTimer().start(1.5,function(_) {
				introComplete();
			});
		});
	}
	,checkLoadSong: function(path) {
		if(!openfl_utils_Assets.cache.hasSound(path)) {
			var library = openfl_utils_Assets.getLibrary("songs");
			var symbolPath = path.split(":").pop();
			var callback = this.callbacks.add("song:" + path);
			openfl_utils_Assets.loadSound(path).onComplete(function(_) {
				callback();
			});
		}
	}
	,checkLibrary: function(library) {
		haxe_Log.trace(openfl_utils_Assets.hasLibrary(library),{ fileName : "source/LoadingState.hx", lineNumber : 98, className : "LoadingState", methodName : "checkLibrary"});
		if(openfl_utils_Assets.getLibrary(library) == null) {
			if(!Object.prototype.hasOwnProperty.call(lime_utils_Assets.libraryPaths.h,library)) {
				throw haxe_Exception.thrown("Missing library: " + library);
			}
			var callback = this.callbacks.add("library:" + library);
			openfl_utils_Assets.loadLibrary(library).onComplete(function(_) {
				callback();
			});
		}
	}
	,beatHit: function() {
		MusicBeatState.prototype.beatHit.call(this);
		this.danceLeft = !this.danceLeft;
	}
	,update: function(elapsed) {
		MusicBeatState.prototype.update.call(this,elapsed);
		var wacky = flixel_FlxG.width * 0.88;
		this.funkay.setGraphicSize(wacky + 0.9 * (this.funkay.get_width() - wacky) | 0);
		this.funkay.updateHitbox();
		if(PlayerSettings.player1.controls._accept.check()) {
			this.funkay.setGraphicSize(this.funkay.get_width() + 60 | 0);
			this.funkay.updateHitbox();
		}
		if(this.callbacks != null) {
			this.targetShit = flixel_math_FlxMath.remapToRange(this.callbacks.numRemaining / this.callbacks.length,1,0,0,1);
			var _g = this.loadBar.scale;
			_g.set_x(_g.x + 0.5 * (this.targetShit - this.loadBar.scale.x));
		}
	}
	,onLoad: function() {
		if(this.stopMusic && flixel_FlxG.sound.music != null) {
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
		}
		var nextState = this.target;
		if(flixel_FlxG.game._state.switchTo(nextState)) {
			flixel_FlxG.game._requestedState = nextState;
		}
	}
	,destroy: function() {
		MusicBeatState.prototype.destroy.call(this);
		this.callbacks = null;
	}
	,__class__: LoadingState
});
var MultiCallback = function(callback,logId) {
	this.fired = [];
	this.unfired = new haxe_ds_StringMap();
	this.numRemaining = 0;
	this.length = 0;
	this.logId = null;
	this.callback = callback;
	this.logId = logId;
};
$hxClasses["MultiCallback"] = MultiCallback;
MultiCallback.__name__ = "MultiCallback";
MultiCallback.prototype = {
	callback: null
	,logId: null
	,length: null
	,numRemaining: null
	,unfired: null
	,fired: null
	,add: function(id) {
		if(id == null) {
			id = "untitled";
		}
		var _gthis = this;
		id = "" + this.length + ":" + id;
		this.length++;
		this.numRemaining++;
		var func = null;
		func = function() {
			if(Object.prototype.hasOwnProperty.call(_gthis.unfired.h,id)) {
				var _this = _gthis.unfired;
				if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
					delete(_this.h[id]);
				}
				_gthis.fired.push(id);
				_gthis.numRemaining--;
				if(_gthis.logId != null) {
					if(_gthis.logId != null) {
						haxe_Log.trace("" + _gthis.logId + ": " + ("fired " + id + ", " + _gthis.numRemaining + " remaining"),{ fileName : "source/LoadingState.hx", lineNumber : 314, className : "MultiCallback", methodName : "log"});
					}
				}
				if(_gthis.numRemaining == 0) {
					if(_gthis.logId != null) {
						if(_gthis.logId != null) {
							haxe_Log.trace("" + _gthis.logId + ": " + "all callbacks fired",{ fileName : "source/LoadingState.hx", lineNumber : 314, className : "MultiCallback", methodName : "log"});
						}
					}
					_gthis.callback();
				}
			} else if(_gthis.logId != null) {
				haxe_Log.trace("" + _gthis.logId + ": " + ("already fired " + id),{ fileName : "source/LoadingState.hx", lineNumber : 314, className : "MultiCallback", methodName : "log"});
			}
		};
		this.unfired.h[id] = func;
		return func;
	}
	,log: function(msg) {
		if(this.logId != null) {
			haxe_Log.trace("" + this.logId + ": " + msg,{ fileName : "source/LoadingState.hx", lineNumber : 314, className : "MultiCallback", methodName : "log"});
		}
	}
	,getFired: function() {
		return this.fired.slice();
	}
	,getUnfired: function() {
		var _g = [];
		var id = haxe_ds_StringMap.keysIterator(this.unfired.h);
		while(id.hasNext()) {
			var id1 = id.next();
			_g.push(id1);
		}
		return _g;
	}
	,__class__: MultiCallback
};
var MainMenuState = function(TransIn,TransOut) {
	this.optionShit = ["story mode","freeplay","donate","options"];
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["MainMenuState"] = MainMenuState;
MainMenuState.__name__ = "MainMenuState";
MainMenuState.__super__ = MusicBeatState;
MainMenuState.prototype = $extend(MusicBeatState.prototype,{
	menuItems: null
	,optionShit: null
	,magenta: null
	,camFollow: null
	,create: function() {
		var _gthis = this;
		this.transIn = flixel_addons_transition_FlxTransitionableState.defaultTransIn;
		this.transOut = flixel_addons_transition_FlxTransitionableState.defaultTransOut;
		if(flixel_FlxG.sound.music._channel == null) {
			flixel_FlxG.sound.playMusic(Paths.getPath("music/" + "freakyMenu" + "." + "mp3","MUSIC",null));
		}
		this.persistentUpdate = this.persistentDraw = true;
		var bg = new flixel_FlxSprite(null,null,Paths.getPath("images/" + "menuBG" + ".png","IMAGE",null));
		bg.scrollFactor.set_x(0);
		bg.scrollFactor.set_y(0.17);
		bg.setGraphicSize(bg.get_width() * 1.2 | 0);
		bg.updateHitbox();
		bg.screenCenter();
		bg.set_antialiasing(true);
		this.add(bg);
		this.camFollow = new flixel_FlxObject(0,0,1,1);
		this.add(this.camFollow);
		this.magenta = new flixel_FlxSprite(null,null,Paths.getPath("images/" + "menuDesat" + ".png","IMAGE",null));
		this.magenta.scrollFactor.set_x(bg.scrollFactor.x);
		this.magenta.scrollFactor.set_y(bg.scrollFactor.y);
		this.magenta.setGraphicSize(bg.get_width() | 0);
		this.magenta.updateHitbox();
		this.magenta.set_x(bg.x);
		this.magenta.set_y(bg.y);
		this.magenta.set_visible(false);
		this.magenta.set_antialiasing(true);
		this.magenta.set_color(-167525);
		if(ui_PreferencesMenu.preferences.h["flashing-menu"]) {
			this.add(this.magenta);
		}
		this.menuItems = new MainMenuList();
		this.add(this.menuItems);
		this.menuItems.onChange.add($bind(this,this.onMenuItemChange));
		this.menuItems.onAcceptPress.add(function(item) {
			flixel_effects_FlxFlicker.flicker(_gthis.magenta,1.1,0.15,false,true);
		});
		this.menuItems.enabled = false;
		this.menuItems.createItem(null,null,"story mode",function() {
			_gthis.startExitState(new StoryMenuState());
		});
		this.menuItems.createItem(null,null,"freeplay",function() {
			_gthis.startExitState(new FreeplayState());
		});
		if(VideoState.seenVideo) {
			this.menuItems.createItem(null,null,"kickstarter",$bind(this,this.selectDonate),true);
		} else {
			this.menuItems.createItem(null,null,"donate",$bind(this,this.selectDonate),true);
		}
		this.menuItems.createItem(0,0,"options",function() {
			_gthis.startExitState(new ui_OptionsState());
		});
		var pos = (flixel_FlxG.height - 160 * (this.menuItems.length - 1)) / 2;
		var _g = 0;
		var _g1 = this.menuItems.length;
		while(_g < _g1) {
			var i = _g++;
			var item = this.menuItems.members[i];
			item.set_x(flixel_FlxG.width / 2);
			item.set_y(pos + 160 * i);
		}
		flixel_FlxG.camera.follow(this.camFollow,null,0.06);
		var versionShit = new flixel_text_FlxText(5,flixel_FlxG.height - 18,0,"v" + lime_app_Application.current.meta.h["version"],12);
		versionShit.scrollFactor.set();
		versionShit.setFormat("VCR OSD Mono",16,-1,"left",flixel_text_FlxTextBorderStyle.OUTLINE,-16777216);
		this.add(versionShit);
		var _g = versionShit;
		_g.set_text(_g.text + "(Newgrounds exclusive preview)");
		MusicBeatState.prototype.create.call(this);
	}
	,finishTransIn: function() {
		MusicBeatState.prototype.finishTransIn.call(this);
		this.menuItems.enabled = true;
	}
	,onMenuItemChange: function(item) {
		this.camFollow.setPosition(item.getGraphicMidpoint().x,item.getGraphicMidpoint().y);
	}
	,selectDonate: function() {
		var prefix = "";
		if(!new EReg("^https?://","").match("https://www.kickstarter.com/projects/funkin/friday-night-funkin-the-full-ass-game/")) {
			prefix = "http://";
		}
		openfl_Lib.getURL(new openfl_net_URLRequest(prefix + "https://www.kickstarter.com/projects/funkin/friday-night-funkin-the-full-ass-game/"),"_blank");
	}
	,startExitState: function(nextState) {
		var _gthis = this;
		this.menuItems.enabled = false;
		this.menuItems.forEach(function(item) {
			if(_gthis.menuItems.selectedIndex != item.ID) {
				flixel_tweens_FlxTween.tween(item,{ alpha : 0},0.4,{ ease : flixel_tweens_FlxEase.quadOut});
			} else {
				item.set_visible(false);
			}
		});
		new flixel_util_FlxTimer().start(0.4,function(tmr) {
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		});
	}
	,update: function(elapsed) {
		flixel_FlxG.camera.set_followLerp(CoolUtil.camLerpShit(0.06));
		if(flixel_FlxG.sound.music._volume < 0.8) {
			var _g = flixel_FlxG.sound.music;
			_g.set_volume(_g._volume + 0.5 * flixel_FlxG.elapsed);
		}
		if(this._exiting) {
			this.menuItems.enabled = false;
		}
		if(PlayerSettings.player1.controls._back.check() && this.menuItems.enabled && !this.menuItems.busy) {
			var nextState = new TitleState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
		MusicBeatState.prototype.update.call(this,elapsed);
	}
	,__class__: MainMenuState
});
var ui_MenuItem = function(x,y,name,callback) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.fireInstantly = false;
	flixel_FlxSprite.call(this,x,y);
	this.set_antialiasing(true);
	this.setData(name,callback);
	this.idle();
};
$hxClasses["ui.MenuItem"] = ui_MenuItem;
ui_MenuItem.__name__ = "ui.MenuItem";
ui_MenuItem.__super__ = flixel_FlxSprite;
ui_MenuItem.prototype = $extend(flixel_FlxSprite.prototype,{
	fireInstantly: null
	,name: null
	,callback: null
	,get_selected: function() {
		return this.alpha == 1;
	}
	,setData: function(name,callback) {
		this.name = name;
		if(callback != null) {
			this.callback = callback;
		}
	}
	,setItem: function(name,callback) {
		this.setData(name,callback);
		if(this.get_selected()) {
			this.select();
		} else {
			this.idle();
		}
	}
	,idle: function() {
		this.set_alpha(0.6);
	}
	,select: function() {
		this.set_alpha(1);
	}
	,__class__: ui_MenuItem
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{get_selected:"get_selected"})
});
var ui_AtlasMenuItem = function(x,y,name,atlas,callback) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.atlas = atlas;
	ui_MenuItem.call(this,x,y,name,callback);
};
$hxClasses["ui.AtlasMenuItem"] = ui_AtlasMenuItem;
ui_AtlasMenuItem.__name__ = "ui.AtlasMenuItem";
ui_AtlasMenuItem.__super__ = ui_MenuItem;
ui_AtlasMenuItem.prototype = $extend(ui_MenuItem.prototype,{
	atlas: null
	,setData: function(name,callback) {
		this.set_frames(this.atlas);
		this.animation.addByPrefix("idle","" + name + " idle",24);
		this.animation.addByPrefix("selected","" + name + " selected",24);
		ui_MenuItem.prototype.setData.call(this,name,callback);
	}
	,changeAnim: function(anim) {
		this.animation.play(anim);
		this.updateHitbox();
	}
	,idle: function() {
		this.changeAnim("idle");
	}
	,select: function() {
		this.changeAnim("selected");
	}
	,get_selected: function() {
		if(this.animation._curAnim != null) {
			return this.animation._curAnim.name == "selected";
		} else {
			return false;
		}
	}
	,destroy: function() {
		ui_MenuItem.prototype.destroy.call(this);
		this.atlas = null;
	}
	,__class__: ui_AtlasMenuItem
});
var MainMenuItem = function(x,y,name,atlas,callback) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	ui_AtlasMenuItem.call(this,x,y,name,atlas,callback);
	this.scrollFactor.set();
};
$hxClasses["MainMenuItem"] = MainMenuItem;
MainMenuItem.__name__ = "MainMenuItem";
MainMenuItem.__super__ = ui_AtlasMenuItem;
MainMenuItem.prototype = $extend(ui_AtlasMenuItem.prototype,{
	changeAnim: function(anim) {
		ui_AtlasMenuItem.prototype.changeAnim.call(this,anim);
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
		var _this = this.offset;
		var point = this.origin;
		_this.set_x(point.x);
		_this.set_y(point.y);
		if(point._weak) {
			point.put();
		}
	}
	,__class__: MainMenuItem
});
var ui_MenuTypedList = function(dir,wrapDir) {
	if(dir == null) {
		dir = ui_NavControls.Vertical;
	}
	this.busy = false;
	this.byName = new haxe_ds_StringMap();
	this.wrapMode = ui_WrapMode.Both;
	this.enabled = true;
	this.onAcceptPress = new flixel_util__$FlxSignal_FlxSignal1();
	this.onChange = new flixel_util__$FlxSignal_FlxSignal1();
	this.selectedIndex = 0;
	this.navControls = dir;
	if(wrapDir != null) {
		this.wrapMode = wrapDir;
	} else {
		switch(dir._hx_index) {
		case 0:
			this.wrapMode = ui_WrapMode.Horizontal;
			break;
		case 1:
			this.wrapMode = ui_WrapMode.Vertical;
			break;
		default:
			this.wrapMode = ui_WrapMode.Both;
		}
	}
	flixel_group_FlxTypedGroup.call(this);
};
$hxClasses["ui.MenuTypedList"] = ui_MenuTypedList;
ui_MenuTypedList.__name__ = "ui.MenuTypedList";
ui_MenuTypedList.__super__ = flixel_group_FlxTypedGroup;
ui_MenuTypedList.prototype = $extend(flixel_group_FlxTypedGroup.prototype,{
	selectedIndex: null
	,onChange: null
	,onAcceptPress: null
	,enabled: null
	,navControls: null
	,wrapMode: null
	,byName: null
	,busy: null
	,addItem: function(name,item) {
		if(this.selectedIndex == this.length) {
			item.select();
		}
		this.byName.h[name] = item;
		return this.add(item);
	}
	,resetItem: function(name,newName,callback) {
		if(!Object.prototype.hasOwnProperty.call(this.byName.h,name)) {
			throw haxe_Exception.thrown("No item named:" + name);
		}
		var item = this.byName.h[name];
		var _this = this.byName;
		if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
			delete(_this.h[name]);
		}
		this.byName.h[newName] = item;
		item.setItem(newName,callback);
		return item;
	}
	,update: function(elapsed) {
		flixel_group_FlxTypedGroup.prototype.update.call(this,elapsed);
		if(this.enabled && !this.busy) {
			var controls = PlayerSettings.player1.controls;
			var wrapHorizontal;
			var wrapVertical;
			var nextIndex;
			switch(this.wrapMode._hx_index) {
			case 0:case 2:
				wrapHorizontal = true;
				break;
			default:
				wrapHorizontal = false;
			}
			switch(this.wrapMode._hx_index) {
			case 1:case 2:
				wrapVertical = true;
				break;
			default:
				wrapVertical = false;
			}
			var _g = this.navControls;
			switch(_g._hx_index) {
			case 0:
				var leftP = controls._ui_leftP.check();
				var rightP = controls._ui_rightP.check();
				nextIndex = this.navAxis(this.selectedIndex,this.length,leftP,rightP,wrapHorizontal);
				break;
			case 1:
				var upP = controls._ui_upP.check();
				var downP = controls._ui_downP.check();
				nextIndex = this.navAxis(this.selectedIndex,this.length,upP,downP,wrapVertical);
				break;
			case 2:
				var backwards = controls._ui_leftP.check() || controls._ui_upP.check();
				var forwards = controls._ui_rightP.check() || controls._ui_downP.check();
				nextIndex = this.navAxis(this.selectedIndex,this.length,backwards,forwards,this.wrapMode != ui_WrapMode.None);
				break;
			case 3:
				var num = _g.num;
				nextIndex = this.navGrid(num,controls._ui_leftP.check(),controls._ui_rightP.check(),wrapHorizontal,controls._ui_upP.check(),controls._ui_downP.check(),wrapVertical);
				break;
			case 4:
				var num = _g.num;
				nextIndex = this.navGrid(num,controls._ui_upP.check(),controls._ui_downP.check(),wrapVertical,controls._ui_leftP.check(),controls._ui_rightP.check(),wrapHorizontal);
				break;
			}
			if(nextIndex != this.selectedIndex) {
				flixel_FlxG.sound.play(Paths.sound("scrollMenu"));
				this.selectItem(nextIndex);
			}
			if(controls._accept.check()) {
				this.accept();
			}
		}
	}
	,navAxis: function(selected,maxLength,goBack,goForward,doWrap) {
		if(goBack == goForward) {
			return selected;
		}
		if(goBack) {
			if(selected > 0) {
				--selected;
			} else if(doWrap) {
				selected = maxLength - 1;
			}
		} else if(selected < maxLength - 1) {
			++selected;
		} else if(doWrap) {
			selected = 0;
		}
		return selected;
	}
	,navGrid: function(gridLength,hBack,hForward,hWrap,vBack,vForward,vWrap) {
		var itemLength = Math.ceil(this.length / gridLength);
		var curItem = Math.floor(this.selectedIndex / gridLength);
		var curGrid = this.selectedIndex % gridLength;
		var selectedX = this.navAxis(curGrid,gridLength,hBack,hForward,hWrap);
		var selectedY = this.navAxis(curItem,itemLength,vBack,vForward,vWrap);
		return Math.min(this.length - 1,selectedY * gridLength + selectedX) | 0;
	}
	,accept: function() {
		var _gthis = this;
		var selected = this.members[this.selectedIndex];
		this.onAcceptPress.dispatch(selected);
		if(selected.fireInstantly) {
			selected.callback();
		} else {
			this.busy = true;
			flixel_FlxG.sound.play(Paths.sound("confirmMenu"));
			flixel_effects_FlxFlicker.flicker(selected,1,0.06,true,false,function(flicker) {
				_gthis.busy = false;
				selected.callback();
			});
		}
	}
	,selectItem: function(index) {
		this.members[this.selectedIndex].idle();
		this.selectedIndex = index;
		this.members[this.selectedIndex].select();
		this.onChange.dispatch(this.members[this.selectedIndex]);
	}
	,has: function(name) {
		return Object.prototype.hasOwnProperty.call(this.byName.h,name);
	}
	,getItem: function(name) {
		return this.byName.h[name];
	}
	,destroy: function() {
		flixel_group_FlxTypedGroup.prototype.destroy.call(this);
		this.byName = null;
		this.onChange = null;
		this.onAcceptPress = null;
	}
	,__class__: ui_MenuTypedList
});
var MainMenuList = function() {
	var library = null;
	this.atlas = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "main_menu" + ".png","IMAGE",library),Paths.getPath("images/" + "main_menu" + ".xml","TEXT",library));
	ui_MenuTypedList.call(this,ui_NavControls.Vertical);
};
$hxClasses["MainMenuList"] = MainMenuList;
MainMenuList.__name__ = "MainMenuList";
MainMenuList.__super__ = ui_MenuTypedList;
MainMenuList.prototype = $extend(ui_MenuTypedList.prototype,{
	atlas: null
	,createItem: function(x,y,name,callback,fireInstantly) {
		if(fireInstantly == null) {
			fireInstantly = false;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var item = new MainMenuItem(x,y,name,this.atlas,callback);
		item.fireInstantly = fireInstantly;
		item.ID = this.length;
		return this.addItem(name,item);
	}
	,__class__: MainMenuList
});
var ManifestResources = function() { };
$hxClasses["ManifestResources"] = ManifestResources;
ManifestResources.__name__ = "ManifestResources";
ManifestResources.preloadLibraries = null;
ManifestResources.preloadLibraryNames = null;
ManifestResources.rootPath = null;
ManifestResources.init = function(config) {
	ManifestResources.preloadLibraries = [];
	ManifestResources.preloadLibraryNames = [];
	ManifestResources.rootPath = null;
	if(config != null && Object.prototype.hasOwnProperty.call(config,"rootPath")) {
		ManifestResources.rootPath = Reflect.field(config,"rootPath");
	}
	if(ManifestResources.rootPath == null) {
		ManifestResources.rootPath = "./";
	}
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$pixel_$otf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$vcr_$ttf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf);
	var bundle;
	var v = ManifestResources.rootPath + "manifest/songs.json";
	lime_utils_Assets.libraryPaths.h["songs"] = v;
	var v = ManifestResources.rootPath + "manifest/shared.json";
	lime_utils_Assets.libraryPaths.h["shared"] = v;
	var v = ManifestResources.rootPath + "manifest/tutorial.json";
	lime_utils_Assets.libraryPaths.h["tutorial"] = v;
	var v = ManifestResources.rootPath + "manifest/week1.json";
	lime_utils_Assets.libraryPaths.h["week1"] = v;
	var v = ManifestResources.rootPath + "manifest/week2.json";
	lime_utils_Assets.libraryPaths.h["week2"] = v;
	var v = ManifestResources.rootPath + "manifest/week3.json";
	lime_utils_Assets.libraryPaths.h["week3"] = v;
	var v = ManifestResources.rootPath + "manifest/week4.json";
	lime_utils_Assets.libraryPaths.h["week4"] = v;
	var v = ManifestResources.rootPath + "manifest/week5.json";
	lime_utils_Assets.libraryPaths.h["week5"] = v;
	var v = ManifestResources.rootPath + "manifest/week6.json";
	lime_utils_Assets.libraryPaths.h["week6"] = v;
	var v = ManifestResources.rootPath + "manifest/week7.json";
	lime_utils_Assets.libraryPaths.h["week7"] = v;
	var data = "{\"name\":null,\"assets\":\"aoy4:pathy36:assets%2Fdata%2FfreeplaySonglist.txty4:sizei8y4:typey4:TEXTy2:idR1y7:preloadtgoR0y43:assets%2Fdata%2Fblammed%2Fblammed-easy.jsonR2i8488R3R4R5R7R6tgoR0y43:assets%2Fdata%2Fblammed%2Fblammed-hard.jsonR2i12097R3R4R5R8R6tgoR0y38:assets%2Fdata%2Fblammed%2Fblammed.jsonR2i9687R3R4R5R9R6tgoR0y43:assets%2Fdata%2Fbopeebo%2Fbopeebo-easy.jsonR2i3912R3R4R5R10R6tgoR0y43:assets%2Fdata%2Fbopeebo%2Fbopeebo-hard.jsonR2i4140R3R4R5R11R6tgoR0y38:assets%2Fdata%2Fbopeebo%2Fbopeebo.jsonR2i4044R3R4R5R12R6tgoR0y39:assets%2Fdata%2Fcocoa%2Fcocoa-easy.jsonR2i7062R3R4R5R13R6tgoR0y39:assets%2Fdata%2Fcocoa%2Fcocoa-hard.jsonR2i10443R3R4R5R14R6tgoR0y34:assets%2Fdata%2Fcocoa%2Fcocoa.jsonR2i8278R3R4R5R15R6tgoR0y47:assets%2Fdata%2Fdadbattle%2Fdadbattle-easy.jsonR2i7936R3R4R5R16R6tgoR0y47:assets%2Fdata%2Fdadbattle%2Fdadbattle-hard.jsonR2i9755R3R4R5R17R6tgoR0y42:assets%2Fdata%2Fdadbattle%2Fdadbattle.jsonR2i8912R3R4R5R18R6tgoR0y41:assets%2Fdata%2Feggnog%2Feggnog-easy.jsonR2i9239R3R4R5R19R6tgoR0y41:assets%2Fdata%2Feggnog%2Feggnog-hard.jsonR2i11689R3R4R5R20R6tgoR0y36:assets%2Fdata%2Feggnog%2Feggnog.jsonR2i10333R3R4R5R21R6tgoR0y39:assets%2Fdata%2Ffresh%2Ffresh-easy.jsonR2i5857R3R4R5R22R6tgoR0y39:assets%2Fdata%2Ffresh%2Ffresh-hard.jsonR2i6905R3R4R5R23R6tgoR0y34:assets%2Fdata%2Ffresh%2Ffresh.jsonR2i6493R3R4R5R24R6tgoR0y37:assets%2Fdata%2Fguns%2Fguns-easy.jsonR2i15146R3R4R5R25R6tgoR0y37:assets%2Fdata%2Fguns%2Fguns-hard.jsonR2i23500R3R4R5R26R6tgoR0y32:assets%2Fdata%2Fguns%2Fguns.jsonR2i20620R3R4R5R27R6tgoR0y37:assets%2Fdata%2Fhigh%2Fhigh-easy.jsonR2i8563R3R4R5R28R6tgoR0y37:assets%2Fdata%2Fhigh%2Fhigh-hard.jsonR2i11553R3R4R5R29R6tgoR0y32:assets%2Fdata%2Fhigh%2Fhigh.jsonR2i9757R3R4R5R30R6tgoR0y37:assets%2Fdata%2Fmilf%2Fmilf-easy.jsonR2i13522R3R4R5R31R6tgoR0y37:assets%2Fdata%2Fmilf%2Fmilf-hard.jsonR2i18135R3R4R5R32R6tgoR0y32:assets%2Fdata%2Fmilf%2Fmilf.jsonR2i15192R3R4R5R33R6tgoR0y43:assets%2Fdata%2Fmonster%2Fmonster-easy.jsonR2i12175R3R4R5R34R6tgoR0y43:assets%2Fdata%2Fmonster%2Fmonster-hard.jsonR2i14163R3R4R5R35R6tgoR0y38:assets%2Fdata%2Fmonster%2Fmonster.jsonR2i13445R3R4R5R36R6tgoR0y41:assets%2Fdata%2Fphilly%2Fphilly-easy.jsonR2i8062R3R4R5R37R6tgoR0y41:assets%2Fdata%2Fphilly%2Fphilly-hard.jsonR2i12551R3R4R5R38R6tgoR0y36:assets%2Fdata%2Fphilly%2Fphilly.jsonR2i10098R3R4R5R39R6tgoR0y37:assets%2Fdata%2Fpico%2Fpico-easy.jsonR2i6089R3R4R5R40R6tgoR0y37:assets%2Fdata%2Fpico%2Fpico-hard.jsonR2i8768R3R4R5R41R6tgoR0y32:assets%2Fdata%2Fpico%2Fpico.jsonR2i7493R3R4R5R42R6tgoR0y34:assets%2Fdata%2Fridge%2Fridge.jsonR2i22981R3R4R5R43R6tgoR0y39:assets%2Fdata%2Froses%2Froses-easy.jsonR2i6725R3R4R5R44R6tgoR0y39:assets%2Fdata%2Froses%2Froses-hard.jsonR2i10432R3R4R5R45R6tgoR0y34:assets%2Fdata%2Froses%2Froses.jsonR2i8609R3R4R5R46R6tgoR0y41:assets%2Fdata%2Froses%2FrosesDialogue.txtR2i155R3R4R5R47R6tgoR0y55:assets%2Fdata%2Fsatin-panties%2Fsatin-panties-easy.jsonR2i8817R3R4R5R48R6tgoR0y55:assets%2Fdata%2Fsatin-panties%2Fsatin-panties-hard.jsonR2i12704R3R4R5R49R6tgoR0y50:assets%2Fdata%2Fsatin-panties%2Fsatin-panties.jsonR2i10725R3R4R5R50R6tgoR0y41:assets%2Fdata%2Fsenpai%2Fsenpai-easy.jsonR2i9027R3R4R5R51R6tgoR0y41:assets%2Fdata%2Fsenpai%2Fsenpai-hard.jsonR2i10778R3R4R5R52R6tgoR0y36:assets%2Fdata%2Fsenpai%2Fsenpai.jsonR2i10016R3R4R5R53R6tgoR0y43:assets%2Fdata%2Fsenpai%2FsenpaiDialogue.txtR2i164R3R4R5R54R6tgoR0y34:assets%2Fdata%2Fsmash%2Fsmash.jsonR2i102R3R4R5R55R6tgoR0y39:assets%2Fdata%2Fsouth%2Fsouth-easy.jsonR2i8435R3R4R5R56R6tgoR0y39:assets%2Fdata%2Fsouth%2Fsouth-hard.jsonR2i10170R3R4R5R57R6tgoR0y34:assets%2Fdata%2Fsouth%2Fsouth.jsonR2i10097R3R4R5R58R6tgoR0y45:assets%2Fdata%2Fspookeez%2Fspookeez-easy.jsonR2i8876R3R4R5R59R6tgoR0y45:assets%2Fdata%2Fspookeez%2Fspookeez-hard.jsonR2i10706R3R4R5R60R6tgoR0y40:assets%2Fdata%2Fspookeez%2Fspookeez.jsonR2i10026R3R4R5R61R6tgoR0y41:assets%2Fdata%2Fstress%2Fpicospeaker.jsonR2i18286R3R4R5R62R6tgoR0y41:assets%2Fdata%2Fstress%2Fstress-easy.jsonR2i14993R3R4R5R63R6tgoR0y41:assets%2Fdata%2Fstress%2Fstress-hard.jsonR2i22493R3R4R5R64R6tgoR0y36:assets%2Fdata%2Fstress%2Fstress.jsonR2i19661R3R4R5R65R6tgoR0y32:assets%2Fdata%2Ftest%2Ftest.jsonR2i12402R3R4R5R66R6tgoR0y41:assets%2Fdata%2Fthorns%2Fthorns-easy.jsonR2i10437R3R4R5R67R6tgoR0y41:assets%2Fdata%2Fthorns%2Fthorns-hard.jsonR2i15444R3R4R5R68R6tgoR0y36:assets%2Fdata%2Fthorns%2Fthorns.jsonR2i12691R3R4R5R69R6tgoR0y43:assets%2Fdata%2Fthorns%2FthornsDialogue.txtR2i309R3R4R5R70R6tgoR0y45:assets%2Fdata%2Ftutorial%2Ftutorial-easy.jsonR2i5739R3R4R5R71R6tgoR0y45:assets%2Fdata%2Ftutorial%2Ftutorial-hard.jsonR2i6335R3R4R5R72R6tgoR0y40:assets%2Fdata%2Ftutorial%2Ftutorial.jsonR2i5739R3R4R5R73R6tgoR0y35:assets%2Fdata%2Fugh%2Fugh-easy.jsonR2i8550R3R4R5R74R6tgoR0y35:assets%2Fdata%2Fugh%2Fugh-hard.jsonR2i12496R3R4R5R75R6tgoR0y30:assets%2Fdata%2Fugh%2Fugh.jsonR2i11354R3R4R5R76R6tgoR0y63:assets%2Fdata%2Fwinter-horrorland%2Fwinter-horrorland-easy.jsonR2i11846R3R4R5R77R6tgoR0y63:assets%2Fdata%2Fwinter-horrorland%2Fwinter-horrorland-hard.jsonR2i14558R3R4R5R78R6tgoR0y58:assets%2Fdata%2Fwinter-horrorland%2Fwinter-horrorland.jsonR2i12808R3R4R5R79R6tgoR0y33:assets%2Fdata%2FcharacterList.txtR2i200R3R4R5R80R6tgoR0y28:assets%2Fdata%2Fcontrols.txtR2i355R3R4R5R81R6tgoR0y25:assets%2Fdata%2Fcreds.txtR2i492R3R4R5R82R6tgoR0y34:assets%2Fdata%2Fdata-goes-here.txtR2zR3R4R5R83R6tgoR0y29:assets%2Fdata%2FintroText.txtR2i1481R3R4R5R84R6tgoR0y29:assets%2Fdata%2Fmain-view.xmlR2i125R3R4R5R85R6tgoR0y33:assets%2Fdata%2FspecialThanks.txtR2i339R3R4R5R86R6tgoR0y33:assets%2Fimages%2FNOTE_assets.pngR2i712820R3y5:IMAGER5R87R6tgoR0y30:assets%2Fimages%2Falphabet.pngR2i139836R3R88R5R89R6tgoR0y45:assets%2Fimages%2Fcampaign_menu_UI_assets.pngR2i27171R3R88R5R90R6tgoR0y49:assets%2Fimages%2Fcampaign_menu_UI_characters.pngR2i2548341R3R88R5R91R6tgoR0y49:assets%2Fimages%2Fcampaign_menu_UI_characters.xmlR2i24733R3R4R5R92R6tgoR0y37:assets%2Fimages%2FcheckboxThingie.pngR2i21263R3R88R5R93R6tgoR0y28:assets%2Fimages%2Ffunkay.pngR2i366131R3R88R5R94R6tgoR0y34:assets%2Fimages%2FgfDanceTitle.pngR2i1221436R3R88R5R95R6tgoR0y36:assets%2Fimages%2FloadingFunkers.pngR2i283045R3R88R5R96R6tgoR0y35:assets%2Fimages%2FloadingLoader.pngR2i84013R3R88R5R97R6tgoR0y26:assets%2Fimages%2Flogo.pngR2i86924R3R88R5R98R6tgoR0y32:assets%2Fimages%2FlogoBumpin.pngR2i592724R3R88R5R99R6tgoR0y31:assets%2Fimages%2Fmain_menu.pngR2i397830R3R88R5R100R6tgoR0y31:assets%2Fimages%2Fmain_menu.xmlR2i6093R3R4R5R101R6tgoR0y28:assets%2Fimages%2FmenuBG.pngR2i620342R3R88R5R102R6tgoR0y32:assets%2Fimages%2FmenuBGBlue.pngR2i614586R3R88R5R103R6tgoR0y35:assets%2Fimages%2FmenuBGMagenta.pngR2i553468R3R88R5R104R6tgoR0y31:assets%2Fimages%2FmenuDesat.pngR2i357911R3R88R5R105R6tgoR0y27:assets%2Fimages%2Fmoney.pngR2i320309R3R88R5R106R6tgoR0y37:assets%2Fimages%2Fnewgrounds_logo.pngR2i57747R3R88R5R107R6tgoR0y26:assets%2Fimages%2Fnum0.pngR2i3738R3R88R5R108R6tgoR0y26:assets%2Fimages%2Fnum1.pngR2i3390R3R88R5R109R6tgoR0y26:assets%2Fimages%2Fnum2.pngR2i3990R3R88R5R110R6tgoR0y26:assets%2Fimages%2Fnum3.pngR2i4022R3R88R5R111R6tgoR0y26:assets%2Fimages%2Fnum4.pngR2i3989R3R88R5R112R6tgoR0y26:assets%2Fimages%2Fnum5.pngR2i4113R3R88R5R113R6tgoR0y26:assets%2Fimages%2Fnum6.pngR2i4181R3R88R5R114R6tgoR0y26:assets%2Fimages%2Fnum7.pngR2i3692R3R88R5R115R6tgoR0y26:assets%2Fimages%2Fnum8.pngR2i3914R3R88R5R116R6tgoR0y26:assets%2Fimages%2Fnum9.pngR2i3687R3R88R5R117R6tgoR0y37:assets%2Fimages%2Fprompt-ng_login.pngR2i79491R3R88R5R118R6tgoR0y32:assets%2Fimages%2FtitleEnter.pngR2i1449202R3R88R5R119R6tgoR0y34:assets%2Fimages%2Ffonts%2Fbold.pngR2i95090R3R88R5R120R6tgoR0y37:assets%2Fimages%2Ffonts%2Fdefault.pngR2i78822R3R88R5R121R6tgoR0y34:assets%2Fimages%2Ffonts%2Fbold.xmlR2i17911R3R4R5R122R6tgoR0y37:assets%2Fimages%2Ffonts%2Fdefault.xmlR2i27630R3R4R5R123R6tgoR0y42:assets%2Fimages%2FgfDemon%2FAnimation.jsonR2i279376R3R4R5R124R6tgoR0y43:assets%2Fimages%2FgfDemon%2Fspritemap1.jsonR2i4539R3R4R5R125R6tgoR0y42:assets%2Fimages%2FgfDemon%2Fspritemap1.pngR2i320324R3R88R5R126R6tgoR0y48:assets%2Fimages%2FgfDemonNoSkew%2FAnimation.jsonR2i330591R3R4R5R127R6tgoR0y49:assets%2Fimages%2FgfDemonNoSkew%2Fspritemap1.jsonR2i25481R3R4R5R128R6tgoR0y48:assets%2Fimages%2FgfDemonNoSkew%2Fspritemap1.pngR2i2901489R3R88R5R129R6tgoR0y41:assets%2Fimages%2Ficons%2Ficon-bf-old.pngR2i10263R3R88R5R130R6tgoR0y43:assets%2Fimages%2Ficons%2Ficon-bf-pixel.pngR2i1301R3R88R5R131R6tgoR0y37:assets%2Fimages%2Ficons%2Ficon-bf.pngR2i19936R3R88R5R132R6tgoR0y38:assets%2Fimages%2Ficons%2Ficon-dad.pngR2i15108R3R88R5R133R6tgoR0y39:assets%2Fimages%2Ficons%2Ficon-face.pngR2i7096R3R88R5R134R6tgoR0y37:assets%2Fimages%2Ficons%2Ficon-gf.pngR2i12010R3R88R5R135R6tgoR0y38:assets%2Fimages%2Ficons%2Ficon-mom.pngR2i15612R3R88R5R136R6tgoR0y42:assets%2Fimages%2Ficons%2Ficon-monster.pngR2i23064R3R88R5R137R6tgoR0y42:assets%2Fimages%2Ficons%2Ficon-parents.pngR2i22667R3R88R5R138R6tgoR0y39:assets%2Fimages%2Ficons%2Ficon-pico.pngR2i21559R3R88R5R139R6tgoR0y41:assets%2Fimages%2Ficons%2Ficon-senpai.pngR2i1441R3R88R5R140R6tgoR0y41:assets%2Fimages%2Ficons%2Ficon-spirit.pngR2i1286R3R88R5R141R6tgoR0y41:assets%2Fimages%2Ficons%2Ficon-spooky.pngR2i10457R3R88R5R142R6tgoR0y42:assets%2Fimages%2Ficons%2Ficon-tankman.pngR2i7072R3R88R5R143R6tgoR0y43:assets%2Fimages%2FpicoKill%2FAnimation.jsonR2i515064R3R4R5R144R6tgoR0y44:assets%2Fimages%2FpicoKill%2Fspritemap1.jsonR2i8871R3R4R5R145R6tgoR0y43:assets%2Fimages%2FpicoKill%2Fspritemap1.pngR2i964113R3R88R5R146R6tgoR0y44:assets%2Fimages%2FpicoShoot%2FAnimation.jsonR2i515064R3R4R5R147R6tgoR0y45:assets%2Fimages%2FpicoShoot%2Fspritemap1.jsonR2i8871R3R4R5R148R6tgoR0y44:assets%2Fimages%2FpicoShoot%2Fspritemap1.pngR2i964113R3R88R5R149R6tgoR0y43:assets%2Fimages%2FskewTest%2FAnimation.jsonR2i260845R3R4R5R150R6tgoR0y44:assets%2Fimages%2FskewTest%2Fspritemap1.jsonR2i19335R3R4R5R151R6tgoR0y43:assets%2Fimages%2FskewTest%2Fspritemap1.pngR2i454108R3R88R5R152R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek0.pngR2i7056R3R88R5R153R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek1.pngR2i6261R3R88R5R154R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek2.pngR2i6517R3R88R5R155R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek3.pngR2i7148R3R88R5R156R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek4.pngR2i6262R3R88R5R157R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek5.pngR2i6440R3R88R5R158R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek6.pngR2i8979R3R88R5R159R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek7.pngR2i7349R3R88R5R160R6tgoR0y44:assets%2Fimages%2FtightBars%2FAnimation.jsonR2i2454984R3R4R5R161R6tgoR0y45:assets%2Fimages%2FtightBars%2Fspritemap1.jsonR2i2180R3R4R5R162R6tgoR0y44:assets%2Fimages%2FtightBars%2Fspritemap1.pngR2i85619R3R88R5R163R6tgoR0y43:assets%2Fimages%2FFNF_main_menu_assets.jsonR2i14694R3R4R5R164R6tgoR0y33:assets%2Fimages%2FNOTE_assets.xmlR2i9116R3R4R5R165R6tgoR0y30:assets%2Fimages%2Falphabet.xmlR2i39571R3R4R5R166R6tgoR0y45:assets%2Fimages%2Fcampaign_menu_UI_assets.xmlR2i1917R3R4R5R167R6tgoR0y37:assets%2Fimages%2FcheckboxThingie.xmlR2i2323R3R4R5R168R6tgoR0y34:assets%2Fimages%2FgfDanceTitle.xmlR2i4291R3R4R5R169R6tgoR0y32:assets%2Fimages%2FlogoBumpin.xmlR2i2194R3R4R5R170R6tgoR0y28:assets%2Fimages%2Fmoney.jsonR2i4541R3R4R5R171R6tgoR0y37:assets%2Fimages%2Fprompt-ng_login.xmlR2i1763R3R4R5R172R6tgoR0y32:assets%2Fimages%2FtitleEnter.xmlR2i4931R3R4R5R173R6tgoR2i2309657R3y5:MUSICR5y31:assets%2Fmusic%2FfreakyMenu.mp3y9:pathGroupaR175hR6tgoR0y33:assets%2Fmusic%2FgunsCutscene.mp4R2i11317389R3y6:BINARYR5R177R6tgoR0y39:assets%2Fmusic%2FkickstarterTrailer.mp4R2i19552536R3R178R5R179R6tgoR0y35:assets%2Fmusic%2FstressCutscene.mp4R2i16478289R3R178R5R180R6tgoR0y32:assets%2Fmusic%2FughCutscene.mp4R2i13938137R3R178R5R181R6tgoR2i17762R3R174R5y32:assets%2Fsounds%2FcancelMenu.mp3R176aR182hR6tgoR2i91950R3R174R5y33:assets%2Fsounds%2FconfirmMenu.mp3R176aR183hR6tgoR2i17762R3R174R5y32:assets%2Fsounds%2FscrollMenu.mp3R176aR184hR6tgoR0y48:mods%2FintroMod%2F_append%2Fdata%2FintroText.txtR2i20R3R4R5R185goR0y18:mods%2FmodList.txtR2i8R3R4R5R186goR0y17:mods%2Freadme.txtR2i91R3R4R5R187goR0y21:do%20NOT%20readme.txtR2i4602R3R4R5R188R6tgoR0y13:changelog.txtR2i8236R3R4R5R189R6tgoR0y34:assets%2Ffonts%2Ffonts-go-here.txtR2zR3R4R5R190R6tgoR2i14656R3y4:FONTy9:classNamey31:__ASSET__assets_fonts_pixel_otfR5y26:assets%2Ffonts%2Fpixel.otfR6tgoR2i75864R3R191R192y29:__ASSET__assets_fonts_vcr_ttfR5y24:assets%2Ffonts%2Fvcr.ttfR6tgoR2i2114R3R174R5y26:flixel%2Fsounds%2Fbeep.mp3R176aR197y26:flixel%2Fsounds%2Fbeep.ogghR6tgoR2i39706R3R174R5y28:flixel%2Fsounds%2Fflixel.mp3R176aR199y28:flixel%2Fsounds%2Fflixel.ogghR6tgoR2i5794R3y5:SOUNDR5R198R176aR197R198hgoR2i33629R3R201R5R200R176aR199R200hgoR2i15744R3R191R192y35:__ASSET__flixel_fonts_nokiafc22_ttfR5y30:flixel%2Ffonts%2Fnokiafc22.ttfR6tgoR2i29724R3R191R192y36:__ASSET__flixel_fonts_monsterrat_ttfR5y31:flixel%2Ffonts%2Fmonsterrat.ttfR6tgoR0y33:flixel%2Fimages%2Fui%2Fbutton.pngR2i519R3R88R5R206R6tgoR0y36:flixel%2Fimages%2Flogo%2Fdefault.pngR2i3280R3R88R5R207R6tgoR0y34:flixel%2Fflixel-ui%2Fimg%2Fbox.pngR2i912R3R88R5R208R6tgoR0y37:flixel%2Fflixel-ui%2Fimg%2Fbutton.pngR2i433R3R88R5R209R6tgoR0y48:flixel%2Fflixel-ui%2Fimg%2Fbutton_arrow_down.pngR2i446R3R88R5R210R6tgoR0y48:flixel%2Fflixel-ui%2Fimg%2Fbutton_arrow_left.pngR2i459R3R88R5R211R6tgoR0y49:flixel%2Fflixel-ui%2Fimg%2Fbutton_arrow_right.pngR2i511R3R88R5R212R6tgoR0y46:flixel%2Fflixel-ui%2Fimg%2Fbutton_arrow_up.pngR2i493R3R88R5R213R6tgoR0y42:flixel%2Fflixel-ui%2Fimg%2Fbutton_thin.pngR2i247R3R88R5R214R6tgoR0y44:flixel%2Fflixel-ui%2Fimg%2Fbutton_toggle.pngR2i534R3R88R5R215R6tgoR0y40:flixel%2Fflixel-ui%2Fimg%2Fcheck_box.pngR2i922R3R88R5R216R6tgoR0y41:flixel%2Fflixel-ui%2Fimg%2Fcheck_mark.pngR2i946R3R88R5R217R6tgoR0y37:flixel%2Fflixel-ui%2Fimg%2Fchrome.pngR2i253R3R88R5R218R6tgoR0y42:flixel%2Fflixel-ui%2Fimg%2Fchrome_flat.pngR2i212R3R88R5R219R6tgoR0y43:flixel%2Fflixel-ui%2Fimg%2Fchrome_inset.pngR2i192R3R88R5R220R6tgoR0y43:flixel%2Fflixel-ui%2Fimg%2Fchrome_light.pngR2i214R3R88R5R221R6tgoR0y44:flixel%2Fflixel-ui%2Fimg%2Fdropdown_mark.pngR2i156R3R88R5R222R6tgoR0y41:flixel%2Fflixel-ui%2Fimg%2Ffinger_big.pngR2i1724R3R88R5R223R6tgoR0y43:flixel%2Fflixel-ui%2Fimg%2Ffinger_small.pngR2i294R3R88R5R224R6tgoR0y38:flixel%2Fflixel-ui%2Fimg%2Fhilight.pngR2i129R3R88R5R225R6tgoR0y36:flixel%2Fflixel-ui%2Fimg%2Finvis.pngR2i128R3R88R5R226R6tgoR0y41:flixel%2Fflixel-ui%2Fimg%2Fminus_mark.pngR2i136R3R88R5R227R6tgoR0y40:flixel%2Fflixel-ui%2Fimg%2Fplus_mark.pngR2i147R3R88R5R228R6tgoR0y36:flixel%2Fflixel-ui%2Fimg%2Fradio.pngR2i191R3R88R5R229R6tgoR0y40:flixel%2Fflixel-ui%2Fimg%2Fradio_dot.pngR2i153R3R88R5R230R6tgoR0y37:flixel%2Fflixel-ui%2Fimg%2Fswatch.pngR2i185R3R88R5R231R6tgoR0y34:flixel%2Fflixel-ui%2Fimg%2Ftab.pngR2i201R3R88R5R232R6tgoR0y39:flixel%2Fflixel-ui%2Fimg%2Ftab_back.pngR2i210R3R88R5R233R6tgoR0y44:flixel%2Fflixel-ui%2Fimg%2Ftooltip_arrow.pngR2i18509R3R88R5R234R6tgoR0y39:flixel%2Fflixel-ui%2Fxml%2Fdefaults.xmlR2i1263R3R4R5R235R6tgoR0y53:flixel%2Fflixel-ui%2Fxml%2Fdefault_loading_screen.xmlR2i1953R3R4R5R236R6tgoR0y44:flixel%2Fflixel-ui%2Fxml%2Fdefault_popup.xmlR2i1848R3R4R5R237R6tgh\",\"rootPath\":null,\"version\":2,\"libraryArgs\":[],\"libraryType\":null}";
	var manifest = lime_utils_AssetManifest.parse(data,ManifestResources.rootPath);
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	lime_utils_Assets.registerLibrary("default",library);
	library = lime_utils_Assets.getLibrary("default");
	if(library != null) {
		ManifestResources.preloadLibraries.push(library);
	} else {
		ManifestResources.preloadLibraryNames.push("default");
	}
};
var lime_text_Font = function(name) {
	if(name != null) {
		this.name = name;
	}
	if(!this.__init) {
		if(this.ascender == undefined) {
			this.ascender = 0;
		}
		if(this.descender == undefined) {
			this.descender = 0;
		}
		if(this.height == undefined) {
			this.height = 0;
		}
		if(this.numGlyphs == undefined) {
			this.numGlyphs = 0;
		}
		if(this.underlinePosition == undefined) {
			this.underlinePosition = 0;
		}
		if(this.underlineThickness == undefined) {
			this.underlineThickness = 0;
		}
		if(this.unitsPerEM == undefined) {
			this.unitsPerEM = 0;
		}
		if(this.__fontID != null) {
			if(lime_utils_Assets.isLocal(this.__fontID)) {
				this.__fromBytes(lime_utils_Assets.getBytes(this.__fontID));
			}
		} else if(this.__fontPath != null) {
			this.__fromFile(this.__fontPath);
		}
	}
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = "lime.text.Font";
lime_text_Font.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_text_Font.fromBytes(bytes));
};
lime_text_Font.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$text_$Font();
	return request.load(path).then(function(font) {
		if(font != null) {
			return lime_app_Future.withValue(font);
		} else {
			return lime_app_Future.withError("");
		}
	});
};
lime_text_Font.loadFromName = function(path) {
	var font = new lime_text_Font();
	return font.__loadFromName(path);
};
lime_text_Font.__measureFontNode = function(fontFamily) {
	var node = window.document.createElement("span");
	node.setAttribute("aria-hidden","true");
	var text = window.document.createTextNode("BESbswy");
	node.appendChild(text);
	var style = node.style;
	style.display = "block";
	style.position = "absolute";
	style.top = "-9999px";
	style.left = "-9999px";
	style.fontSize = "300px";
	style.width = "auto";
	style.height = "auto";
	style.lineHeight = "normal";
	style.margin = "0";
	style.padding = "0";
	style.fontVariant = "normal";
	style.whiteSpace = "nowrap";
	style.fontFamily = fontFamily;
	window.document.body.appendChild(node);
	return node;
};
lime_text_Font.prototype = {
	ascender: null
	,descender: null
	,height: null
	,name: null
	,numGlyphs: null
	,src: null
	,underlinePosition: null
	,underlineThickness: null
	,unitsPerEM: null
	,__fontID: null
	,__fontPath: null
	,__init: null
	,decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) {
			characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		}
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__copyFrom: function(other) {
		if(other != null) {
			this.ascender = other.ascender;
			this.descender = other.descender;
			this.height = other.height;
			this.name = other.name;
			this.numGlyphs = other.numGlyphs;
			this.src = other.src;
			this.underlinePosition = other.underlinePosition;
			this.underlineThickness = other.underlineThickness;
			this.unitsPerEM = other.unitsPerEM;
			this.__fontID = other.__fontID;
			this.__fontPath = other.__fontPath;
			this.__init = true;
		}
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__initializeSource: function() {
		this.__init = true;
	}
	,__loadFromName: function(name) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		this.name = name;
		var userAgent = $global.navigator.userAgent.toLowerCase();
		var isSafari = userAgent.indexOf(" safari/") >= 0 && userAgent.indexOf(" chrome/") < 0;
		var isUIWebView = new EReg("(iPhone|iPod|iPad).*AppleWebKit(?!.*Version)","i").match(userAgent);
		if(!isSafari && !isUIWebView && (window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load)))) {
			window.document.fonts.load("1em '" + name + "'").then(function(_) {
				promise.complete(_gthis);
			},function(_) {
				lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "lime/text/Font.hx", lineNumber : 513, className : "lime.text.Font", methodName : "__loadFromName"});
				promise.complete(_gthis);
			});
		} else {
			var node1 = lime_text_Font.__measureFontNode("'" + name + "', sans-serif");
			var node2 = lime_text_Font.__measureFontNode("'" + name + "', serif");
			var width1 = node1.offsetWidth;
			var width2 = node2.offsetWidth;
			var interval = -1;
			var timeout = 3000;
			var intervalLength = 50;
			var intervalCount = 0;
			var loaded;
			var timeExpired;
			var checkFont = function() {
				intervalCount += 1;
				loaded = node1.offsetWidth != width1 || node2.offsetWidth != width2;
				timeExpired = intervalCount * intervalLength >= timeout;
				if(loaded || timeExpired) {
					window.clearInterval(interval);
					node1.parentNode.removeChild(node1);
					node2.parentNode.removeChild(node2);
					node1 = null;
					node2 = null;
					if(timeExpired) {
						lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "lime/text/Font.hx", lineNumber : 548, className : "lime.text.Font", methodName : "__loadFromName"});
					}
					promise.complete(_gthis);
				}
			};
			interval = window.setInterval(checkFont,intervalLength);
		}
		return promise.future;
	}
	,__setSize: function(size) {
	}
	,__class__: lime_text_Font
};
var _$_$ASSET_$_$assets_$fonts_$pixel_$otf = $hx_exports["__ASSET__assets_fonts_pixel_otf"] = function() {
	this.ascender = 1125;
	this.descender = -250;
	this.height = 1375;
	this.numGlyphs = 262;
	this.underlinePosition = -143;
	this.underlineThickness = 20;
	this.unitsPerEM = 1000;
	this.name = "Pixel Arial 11 Bold";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__assets_fonts_pixel_otf"] = _$_$ASSET_$_$assets_$fonts_$pixel_$otf;
_$_$ASSET_$_$assets_$fonts_$pixel_$otf.__name__ = "__ASSET__assets_fonts_pixel_otf";
_$_$ASSET_$_$assets_$fonts_$pixel_$otf.__super__ = lime_text_Font;
_$_$ASSET_$_$assets_$fonts_$pixel_$otf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$assets_$fonts_$pixel_$otf
});
var _$_$ASSET_$_$assets_$fonts_$vcr_$ttf = $hx_exports["__ASSET__assets_fonts_vcr_ttf"] = function() {
	this.ascender = 1800;
	this.descender = 0;
	this.height = 2000;
	this.numGlyphs = 204;
	this.underlinePosition = -292;
	this.underlineThickness = 150;
	this.unitsPerEM = 2048;
	this.name = "VCR OSD Mono";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__assets_fonts_vcr_ttf"] = _$_$ASSET_$_$assets_$fonts_$vcr_$ttf;
_$_$ASSET_$_$assets_$fonts_$vcr_$ttf.__name__ = "__ASSET__assets_fonts_vcr_ttf";
_$_$ASSET_$_$assets_$fonts_$vcr_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$assets_$fonts_$vcr_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$assets_$fonts_$vcr_$ttf
});
var _$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf = $hx_exports["__ASSET__flixel_fonts_nokiafc22_ttf"] = function() {
	this.ascender = 2048;
	this.descender = -512;
	this.height = 2816;
	this.numGlyphs = 172;
	this.underlinePosition = -640;
	this.underlineThickness = 256;
	this.unitsPerEM = 2048;
	this.name = "Nokia Cellphone FC Small";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__flixel_fonts_nokiafc22_ttf"] = _$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf;
_$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf.__name__ = "__ASSET__flixel_fonts_nokiafc22_ttf";
_$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf
});
var _$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf = $hx_exports["__ASSET__flixel_fonts_monsterrat_ttf"] = function() {
	this.ascender = 968;
	this.descender = -251;
	this.height = 1219;
	this.numGlyphs = 263;
	this.underlinePosition = -150;
	this.underlineThickness = 50;
	this.unitsPerEM = 1000;
	this.name = "Monsterrat";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__flixel_fonts_monsterrat_ttf"] = _$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf;
_$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf.__name__ = "__ASSET__flixel_fonts_monsterrat_ttf";
_$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf
});
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = "openfl.text.Font";
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) {
		enumerateDeviceFonts = false;
	}
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.fromBytes = function(bytes) {
	var font = new openfl_text_Font();
	font.__fromBytes(openfl_utils_ByteArray.toBytes(bytes));
	return font;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.loadFromBytes = function(bytes) {
	return lime_text_Font.loadFromBytes(openfl_utils_ByteArray.toBytes(bytes)).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.loadFromFile = function(path) {
	return lime_text_Font.loadFromFile(path).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.loadFromName = function(path) {
	return lime_text_Font.loadFromName(path).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.registerFont = function(font) {
	var instance = null;
	if(js_Boot.getClass(font) == null) {
		instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	} else {
		instance = js_Boot.__cast(font , openfl_text_Font);
	}
	if(instance != null) {
		openfl_text_Font.__registeredFonts.push(instance);
		openfl_text_Font.__fontByName.h[instance.name] = instance;
	}
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	fontStyle: null
	,fontType: null
	,__initialized: null
	,__fromLimeFont: function(font) {
		this.__copyFrom(font);
	}
	,__initialize: function() {
		return this.__initialized;
	}
	,get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl_text_Font
	,__properties__: {set_fontName:"set_fontName",get_fontName:"get_fontName"}
});
var _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$pixel_$otf = $hx_exports["__ASSET__OPENFL__assets_fonts_pixel_otf"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$assets_$fonts_$pixel_$otf());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__assets_fonts_pixel_otf"] = _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$pixel_$otf;
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$pixel_$otf.__name__ = "__ASSET__OPENFL__assets_fonts_pixel_otf";
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$pixel_$otf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$pixel_$otf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$pixel_$otf
});
var _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$vcr_$ttf = $hx_exports["__ASSET__OPENFL__assets_fonts_vcr_ttf"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$assets_$fonts_$vcr_$ttf());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__assets_fonts_vcr_ttf"] = _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$vcr_$ttf;
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$vcr_$ttf.__name__ = "__ASSET__OPENFL__assets_fonts_vcr_ttf";
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$vcr_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$vcr_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$vcr_$ttf
});
var _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf = $hx_exports["__ASSET__OPENFL__flixel_fonts_nokiafc22_ttf"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__flixel_fonts_nokiafc22_ttf"] = _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf;
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf.__name__ = "__ASSET__OPENFL__flixel_fonts_nokiafc22_ttf";
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf
});
var _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf = $hx_exports["__ASSET__OPENFL__flixel_fonts_monsterrat_ttf"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__flixel_fonts_monsterrat_ttf"] = _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf;
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf.__name__ = "__ASSET__OPENFL__flixel_fonts_monsterrat_ttf";
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf
});
Math.__name__ = "Math";
var MenuCharacter = function(x,character) {
	if(character == null) {
		character = "bf";
	}
	flixel_FlxSprite.call(this,x);
	this.character = character;
	var library = null;
	var tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "campaign_menu_UI_characters" + ".png","IMAGE",library),Paths.getPath("images/" + "campaign_menu_UI_characters" + ".xml","TEXT",library));
	this.set_frames(tex);
	this.animation.addByPrefix("bf","BF idle dance white",24);
	this.animation.addByPrefix("bfConfirm","BF HEY!!",24,false);
	this.animation.addByPrefix("gf","GF Dancing Beat WHITE",24);
	this.animation.addByPrefix("dad","Dad idle dance BLACK LINE",24);
	this.animation.addByPrefix("spooky","spooky dance idle BLACK LINES",24);
	this.animation.addByPrefix("pico","Pico Idle Dance",24);
	this.animation.addByPrefix("mom","Mom Idle BLACK LINES",24);
	this.animation.addByPrefix("parents-christmas","Parent Christmas Idle",24);
	this.animation.addByPrefix("senpai","SENPAI idle Black Lines",24);
	this.animation.addByPrefix("tankman","Tankman Menu BLACK",24);
	this.animation.play(character);
	this.updateHitbox();
};
$hxClasses["MenuCharacter"] = MenuCharacter;
MenuCharacter.__name__ = "MenuCharacter";
MenuCharacter.__super__ = flixel_FlxSprite;
MenuCharacter.prototype = $extend(flixel_FlxSprite.prototype,{
	character: null
	,__class__: MenuCharacter
});
var MenuItem = function(x,y,weekNum) {
	if(weekNum == null) {
		weekNum = 0;
	}
	this.fakeFramerate = Math.round(1 / flixel_FlxG.elapsed / 10);
	this.isFlashing = false;
	this.flashingInt = 0;
	this.targetY = 0;
	flixel_group_FlxTypedSpriteGroup.call(this,x,y);
	this.week = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + ("storymenu/week" + weekNum) + ".png","IMAGE",null));
	this.add(this.week);
};
$hxClasses["MenuItem"] = MenuItem;
MenuItem.__name__ = "MenuItem";
MenuItem.__super__ = flixel_group_FlxTypedSpriteGroup;
MenuItem.prototype = $extend(flixel_group_FlxTypedSpriteGroup.prototype,{
	targetY: null
	,week: null
	,flashingInt: null
	,isFlashing: null
	,startFlashing: function() {
		this.isFlashing = true;
	}
	,fakeFramerate: null
	,update: function(elapsed) {
		flixel_group_FlxTypedSpriteGroup.prototype.update.call(this,elapsed);
		this.set_y(CoolUtil.coolLerp(this.y,this.targetY * 120 + 480,0.17));
		if(this.isFlashing) {
			this.flashingInt += 1;
		}
		if(this.flashingInt % this.fakeFramerate >= Math.floor(this.fakeFramerate / 2)) {
			this.week.set_color(-13369345);
		} else {
			this.week.set_color(-1);
		}
	}
	,__class__: MenuItem
});
var Note = function(strumTime,noteData,prevNote,sustainNote) {
	if(sustainNote == null) {
		sustainNote = false;
	}
	this.isSustainNote = false;
	this.sustainLength = 0;
	this.altNote = false;
	this.willMiss = false;
	this.wasGoodHit = false;
	this.tooLate = false;
	this.canBeHit = false;
	this.noteData = 0;
	this.mustPress = false;
	this.strumTime = 0;
	flixel_FlxSprite.call(this);
	if(prevNote == null) {
		prevNote = this;
	}
	this.prevNote = prevNote;
	this.isSustainNote = sustainNote;
	var _g = this;
	_g.set_x(_g.x + 50);
	var _g = this;
	_g.set_y(_g.y - 2000);
	this.strumTime = strumTime;
	this.noteData = noteData;
	switch(PlayState.curStage) {
	case "school":case "schoolEvil":
		this.loadGraphic(Paths.getPath("images/" + "weeb/pixelUI/arrows-pixels" + ".png","IMAGE",null),true,17,17);
		this.animation.add("greenScroll",[6]);
		this.animation.add("redScroll",[7]);
		this.animation.add("blueScroll",[5]);
		this.animation.add("purpleScroll",[4]);
		if(this.isSustainNote) {
			this.loadGraphic(Paths.getPath("images/" + "weeb/pixelUI/arrowEnds" + ".png","IMAGE",null),true,7,6);
			this.animation.add("purpleholdend",[4]);
			this.animation.add("greenholdend",[6]);
			this.animation.add("redholdend",[7]);
			this.animation.add("blueholdend",[5]);
			this.animation.add("purplehold",[0]);
			this.animation.add("greenhold",[2]);
			this.animation.add("redhold",[3]);
			this.animation.add("bluehold",[1]);
		}
		this.setGraphicSize(this.get_width() * PlayState.daPixelZoom | 0);
		this.updateHitbox();
		break;
	default:
		var library = null;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "NOTE_assets" + ".png","IMAGE",library),Paths.getPath("images/" + "NOTE_assets" + ".xml","TEXT",library)));
		this.animation.addByPrefix("greenScroll","green instance");
		this.animation.addByPrefix("redScroll","red instance");
		this.animation.addByPrefix("blueScroll","blue instance");
		this.animation.addByPrefix("purpleScroll","purple instance");
		this.animation.addByPrefix("purpleholdend","pruple end hold");
		this.animation.addByPrefix("greenholdend","green hold end");
		this.animation.addByPrefix("redholdend","red hold end");
		this.animation.addByPrefix("blueholdend","blue hold end");
		this.animation.addByPrefix("purplehold","purple hold piece");
		this.animation.addByPrefix("greenhold","green hold piece");
		this.animation.addByPrefix("redhold","red hold piece");
		this.animation.addByPrefix("bluehold","blue hold piece");
		this.setGraphicSize(this.get_width() * 0.7 | 0);
		this.updateHitbox();
		this.set_antialiasing(true);
	}
	this.colorSwap = new shaderslmfao_ColorSwap();
	this.shader = this.colorSwap.shader;
	this.updateColors();
	switch(noteData) {
	case 0:
		var _g = this;
		_g.set_x(_g.x + Note.swagWidth * 0);
		this.animation.play("purpleScroll");
		break;
	case 1:
		var _g = this;
		_g.set_x(_g.x + Note.swagWidth);
		this.animation.play("blueScroll");
		break;
	case 2:
		var _g = this;
		_g.set_x(_g.x + Note.swagWidth * 2);
		this.animation.play("greenScroll");
		break;
	case 3:
		var _g = this;
		_g.set_x(_g.x + Note.swagWidth * 3);
		this.animation.play("redScroll");
		break;
	}
	if(this.isSustainNote && prevNote != null) {
		this.set_alpha(0.6);
		if(ui_PreferencesMenu.getPref("downscroll")) {
			this.set_angle(180);
		}
		var _g = this;
		_g.set_x(_g.x + this.get_width() / 2);
		switch(noteData) {
		case 0:
			this.animation.play("purpleholdend");
			break;
		case 1:
			this.animation.play("blueholdend");
			break;
		case 2:
			this.animation.play("greenholdend");
			break;
		case 3:
			this.animation.play("redholdend");
			break;
		}
		this.updateHitbox();
		var _g = this;
		_g.set_x(_g.x - this.get_width() / 2);
		if(StringTools.startsWith(PlayState.curStage,"school")) {
			var _g = this;
			_g.set_x(_g.x + 30);
		}
		if(prevNote.isSustainNote) {
			switch(prevNote.noteData) {
			case 0:
				prevNote.animation.play("purplehold");
				break;
			case 1:
				prevNote.animation.play("bluehold");
				break;
			case 2:
				prevNote.animation.play("greenhold");
				break;
			case 3:
				prevNote.animation.play("redhold");
				break;
			}
			var _g = prevNote.scale;
			_g.set_y(_g.y * (Conductor.stepCrochet / 100 * 1.5 * PlayState.SONG.speed));
			prevNote.updateHitbox();
		}
	}
};
$hxClasses["Note"] = Note;
Note.__name__ = "Note";
Note.__super__ = flixel_FlxSprite;
Note.prototype = $extend(flixel_FlxSprite.prototype,{
	strumTime: null
	,mustPress: null
	,noteData: null
	,canBeHit: null
	,tooLate: null
	,wasGoodHit: null
	,willMiss: null
	,altNote: null
	,prevNote: null
	,sustainLength: null
	,isSustainNote: null
	,colorSwap: null
	,updateColors: function() {
		this.colorSwap.update(Note.arrowColors[this.noteData]);
	}
	,update: function(elapsed) {
		flixel_FlxSprite.prototype.update.call(this,elapsed);
		if(this.mustPress) {
			if(this.willMiss && !this.wasGoodHit) {
				this.tooLate = true;
				this.canBeHit = false;
			} else if(this.strumTime > Conductor.songPosition - Conductor.safeZoneOffset) {
				if(this.strumTime < Conductor.songPosition + 0.5 * Conductor.safeZoneOffset) {
					this.canBeHit = true;
				}
			} else {
				this.willMiss = true;
				this.canBeHit = true;
			}
		} else {
			this.canBeHit = false;
			if(this.strumTime <= Conductor.songPosition) {
				this.wasGoodHit = true;
			}
		}
		if(this.tooLate) {
			if(this.alpha > 0.3) {
				this.set_alpha(0.3);
			}
		}
	}
	,__class__: Note
});
var NoteSplash = function(x,y,notedata) {
	if(notedata == null) {
		notedata = 0;
	}
	flixel_FlxSprite.call(this,x,y);
	var library = null;
	this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "noteSplashes" + ".png","IMAGE",library),Paths.getPath("images/" + "noteSplashes" + ".xml","TEXT",library)));
	this.animation.addByPrefix("note1-0","note impact 1  blue",24,false);
	this.animation.addByPrefix("note2-0","note impact 1 green",24,false);
	this.animation.addByPrefix("note0-0","note impact 1 purple",24,false);
	this.animation.addByPrefix("note3-0","note impact 1 red",24,false);
	this.animation.addByPrefix("note1-1","note impact 2 blue",24,false);
	this.animation.addByPrefix("note2-1","note impact 2 green",24,false);
	this.animation.addByPrefix("note0-1","note impact 2 purple",24,false);
	this.animation.addByPrefix("note3-1","note impact 2 red",24,false);
	this.setupNoteSplash(x,y,notedata);
};
$hxClasses["NoteSplash"] = NoteSplash;
NoteSplash.__name__ = "NoteSplash";
NoteSplash.__super__ = flixel_FlxSprite;
NoteSplash.prototype = $extend(flixel_FlxSprite.prototype,{
	setupNoteSplash: function(x,y,notedata) {
		if(notedata == null) {
			notedata = 0;
		}
		this.setPosition(x,y);
		this.set_alpha(0.6);
		this.animation.play("note" + notedata + "-" + flixel_FlxG.random.int(0,1),true);
		var _g = this.animation._curAnim;
		_g.set_frameRate(_g.frameRate + flixel_FlxG.random.int(-2,2));
		this.updateHitbox();
		this.offset.set(this.get_width() * 0.3,this.get_height() * 0.3);
	}
	,update: function(elapsed) {
		if(this.animation._curAnim.finished) {
			this.kill();
		}
		flixel_FlxSprite.prototype.update.call(this,elapsed);
	}
	,__class__: NoteSplash
});
var OutdatedSubState = function(TransIn,TransOut) {
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["OutdatedSubState"] = OutdatedSubState;
OutdatedSubState.__name__ = "OutdatedSubState";
OutdatedSubState.__super__ = MusicBeatState;
OutdatedSubState.prototype = $extend(MusicBeatState.prototype,{
	create: function() {
		MusicBeatState.prototype.create.call(this);
		var bg = new flixel_FlxSprite().makeGraphic(flixel_FlxG.width,flixel_FlxG.height,-16777216);
		this.add(bg);
		var txt = new flixel_text_FlxText(0,0,flixel_FlxG.width,"HEY! You're running an outdated version of the game!\nCurrent version is v" + lime_app_Application.current.meta.h["version"] + " while the most recent version is " + "v0.2.8" + "! Press Space to go to itch.io, or ESCAPE to ignore this!!",32);
		txt.setFormat("VCR OSD Mono",32,-1,"center");
		txt.screenCenter();
		this.add(txt);
	}
	,update: function(elapsed) {
		if(PlayerSettings.player1.controls._accept.check()) {
			var prefix = "";
			if(!new EReg("^https?://","").match("https://ninja-muffin24.itch.io/funkin")) {
				prefix = "http://";
			}
			openfl_Lib.getURL(new openfl_net_URLRequest(prefix + "https://ninja-muffin24.itch.io/funkin"),"_blank");
		}
		if(PlayerSettings.player1.controls._back.check()) {
			OutdatedSubState.leftState = true;
			var nextState = new MainMenuState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
		MusicBeatState.prototype.update.call(this,elapsed);
	}
	,__class__: OutdatedSubState
});
var Paths = function() { };
$hxClasses["Paths"] = Paths;
Paths.__name__ = "Paths";
Paths.currentLevel = null;
Paths.setCurrentLevel = function(name) {
	Paths.currentLevel = name.toLowerCase();
};
Paths.getPath = function(file,type,library) {
	if(library != null) {
		return Paths.getLibraryPath(file,library);
	}
	if(Paths.currentLevel != null) {
		var library = Paths.currentLevel;
		var levelPath = "" + library + ":assets/" + library + "/" + file;
		if(openfl_utils_Assets.exists(levelPath,type)) {
			return levelPath;
		}
		levelPath = "shared" + ":assets/" + "shared" + "/" + file;
		if(openfl_utils_Assets.exists(levelPath,type)) {
			return levelPath;
		}
	}
	return "assets/" + file;
};
Paths.getLibraryPath = function(file,library) {
	if(library == null) {
		library = "preload";
	}
	if(library == "preload" || library == "default") {
		return "assets/" + file;
	} else {
		return "" + library + ":assets/" + library + "/" + file;
	}
};
Paths.getLibraryPathForce = function(file,library) {
	return "" + library + ":assets/" + library + "/" + file;
};
Paths.getPreloadPath = function(file) {
	return "assets/" + file;
};
Paths.file = function(file,type,library) {
	if(type == null) {
		type = "TEXT";
	}
	return Paths.getPath(file,type,library);
};
Paths.txt = function(key,library) {
	return Paths.getPath("data/" + key + ".txt","TEXT",library);
};
Paths.xml = function(key,library) {
	return Paths.getPath("data/" + key + ".xml","TEXT",library);
};
Paths.json = function(key,library) {
	return Paths.getPath("data/" + key + ".json","TEXT",library);
};
Paths.sound = function(key,library) {
	return Paths.getPath("sounds/" + key + "." + "mp3","SOUND",library);
};
Paths.soundRandom = function(key,min,max,library) {
	return Paths.sound(key + flixel_FlxG.random.int(min,max),library);
};
Paths.music = function(key,library) {
	return Paths.getPath("music/" + key + "." + "mp3","MUSIC",library);
};
Paths.voices = function(song) {
	return "songs:assets/songs/" + song.toLowerCase() + "/Voices." + "mp3";
};
Paths.inst = function(song) {
	return "songs:assets/songs/" + song.toLowerCase() + "/Inst." + "mp3";
};
Paths.image = function(key,library) {
	return Paths.getPath("images/" + key + ".png","IMAGE",library);
};
Paths.font = function(key) {
	return "assets/fonts/" + key;
};
Paths.video = function(key,library) {
	return Paths.getPath("music/" + key + ".mp4","TEXT",library);
};
Paths.getSparrowAtlas = function(key,library) {
	return flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + key + ".png","IMAGE",library),Paths.getPath("images/" + key + ".xml","TEXT",library));
};
Paths.getPackerAtlas = function(key,library) {
	return flixel_graphics_frames_FlxAtlasFrames.fromSpriteSheetPacker(Paths.getPath("images/" + key + ".png","IMAGE",library),Paths.getPath("images/" + key + ".txt","TEXT",library));
};
var PauseSubState = function(x,y) {
	this.curSelected = 0;
	this.menuItems = [];
	this.difficultyChoices = ["EASY","NORMAL","HARD","BACK"];
	this.pauseOG = ["Resume","Restart Song","Change Difficulty","Toggle Practice Mode","Exit to menu"];
	MusicBeatSubstate.call(this);
	this.menuItems = this.pauseOG;
	this.pauseMusic = new flixel_system_FlxSound().loadEmbedded(Paths.getPath("music/" + "breakfast" + "." + "mp3","MUSIC",null),true,true);
	this.pauseMusic.set_volume(0);
	this.pauseMusic.play(false,flixel_FlxG.random.int(0,this.pauseMusic._length / 2 | 0));
	flixel_FlxG.sound.list.add(this.pauseMusic);
	var bg = new flixel_FlxSprite().makeGraphic(flixel_FlxG.width,flixel_FlxG.height,-16777216);
	bg.set_alpha(0);
	bg.scrollFactor.set();
	this.add(bg);
	var levelInfo = new flixel_text_FlxText(20,15,0,"",32);
	var _g = levelInfo;
	_g.set_text(_g.text + PlayState.SONG.song);
	levelInfo.scrollFactor.set();
	levelInfo.setFormat("assets/fonts/" + "vcr.ttf",32);
	levelInfo.updateHitbox();
	this.add(levelInfo);
	var levelDifficulty = new flixel_text_FlxText(20,47,0,"",32);
	var _g = levelDifficulty;
	_g.set_text(_g.text + CoolUtil.difficultyString());
	levelDifficulty.scrollFactor.set();
	levelDifficulty.setFormat("assets/fonts/" + "vcr.ttf",32);
	levelDifficulty.updateHitbox();
	this.add(levelDifficulty);
	var deathCounter = new flixel_text_FlxText(20,79,0,"",32);
	deathCounter.set_text("Blue balled: " + PlayState.deathCounter);
	deathCounter.scrollFactor.set();
	deathCounter.setFormat("assets/fonts/" + "vcr.ttf",32);
	deathCounter.updateHitbox();
	this.add(deathCounter);
	this.practiceText = new flixel_text_FlxText(20,111,0,"PRACTICE MODE",32);
	this.practiceText.scrollFactor.set();
	this.practiceText.setFormat("assets/fonts/" + "vcr.ttf",32);
	this.practiceText.updateHitbox();
	this.practiceText.set_x(flixel_FlxG.width - (this.practiceText.get_width() + 20));
	this.practiceText.set_visible(PlayState.practiceMode);
	this.add(this.practiceText);
	levelDifficulty.set_alpha(0);
	levelInfo.set_alpha(0);
	deathCounter.set_alpha(0);
	levelInfo.set_x(flixel_FlxG.width - (levelInfo.get_width() + 20));
	levelDifficulty.set_x(flixel_FlxG.width - (levelDifficulty.get_width() + 20));
	deathCounter.set_x(flixel_FlxG.width - (deathCounter.get_width() + 20));
	flixel_tweens_FlxTween.tween(bg,{ alpha : 0.6},0.4,{ ease : flixel_tweens_FlxEase.quartInOut});
	flixel_tweens_FlxTween.tween(levelInfo,{ alpha : 1, y : 20},0.4,{ ease : flixel_tweens_FlxEase.quartInOut, startDelay : 0.3});
	flixel_tweens_FlxTween.tween(levelDifficulty,{ alpha : 1, y : levelDifficulty.y + 5},0.4,{ ease : flixel_tweens_FlxEase.quartInOut, startDelay : 0.5});
	flixel_tweens_FlxTween.tween(deathCounter,{ alpha : 1, y : deathCounter.y + 5},0.4,{ ease : flixel_tweens_FlxEase.quartInOut, startDelay : 0.7});
	this.grpMenuShit = new flixel_group_FlxTypedGroup();
	this.add(this.grpMenuShit);
	this.regenMenu();
};
$hxClasses["PauseSubState"] = PauseSubState;
PauseSubState.__name__ = "PauseSubState";
PauseSubState.__super__ = MusicBeatSubstate;
PauseSubState.prototype = $extend(MusicBeatSubstate.prototype,{
	grpMenuShit: null
	,pauseOG: null
	,difficultyChoices: null
	,menuItems: null
	,curSelected: null
	,pauseMusic: null
	,practiceText: null
	,regenMenu: function() {
		while(this.grpMenuShit.members.length > 0) this.grpMenuShit.remove(this.grpMenuShit.members[0],true);
		var _g = 0;
		var _g1 = this.menuItems.length;
		while(_g < _g1) {
			var i = _g++;
			var menuItem = new Alphabet(0,70 * i + 30,this.menuItems[i],true,false);
			menuItem.isMenuItem = true;
			menuItem.targetY = i;
			this.grpMenuShit.add(menuItem);
		}
		this.curSelected = 0;
		this.changeSelection();
	}
	,update: function(elapsed) {
		if(this.pauseMusic._volume < 0.5) {
			var _g = this.pauseMusic;
			_g.set_volume(_g._volume + 0.01 * elapsed);
		}
		MusicBeatSubstate.prototype.update.call(this,elapsed);
		var upP = PlayerSettings.player1.controls._ui_upP.check();
		var downP = PlayerSettings.player1.controls._ui_downP.check();
		var accepted = PlayerSettings.player1.controls._accept.check();
		if(upP) {
			this.changeSelection(-1);
		}
		if(downP) {
			this.changeSelection(1);
		}
		if(accepted) {
			var daSelected = this.menuItems[this.curSelected];
			switch(daSelected) {
			case "BACK":
				this.menuItems = this.pauseOG;
				this.regenMenu();
				break;
			case "Change Difficulty":
				this.menuItems = this.difficultyChoices;
				this.regenMenu();
				break;
			case "Exit to menu":
				PlayState.seenCutscene = false;
				PlayState.deathCounter = 0;
				if(PlayState.isStoryMode) {
					var nextState = new StoryMenuState();
					if(flixel_FlxG.game._state.switchTo(nextState)) {
						flixel_FlxG.game._requestedState = nextState;
					}
				} else {
					var nextState = new FreeplayState();
					if(flixel_FlxG.game._state.switchTo(nextState)) {
						flixel_FlxG.game._requestedState = nextState;
					}
				}
				break;
			case "EASY":case "HARD":case "NORMAL":
				PlayState.SONG = Song.loadFromJson(Highscore.formatSong(PlayState.SONG.song.toLowerCase(),this.curSelected),PlayState.SONG.song.toLowerCase());
				PlayState.storyDifficulty = this.curSelected;
				var nextState = Type.createInstance(js_Boot.getClass(flixel_FlxG.game._state),[]);
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
				break;
			case "Restart Song":
				var nextState = Type.createInstance(js_Boot.getClass(flixel_FlxG.game._state),[]);
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
				break;
			case "Resume":
				this.close();
				break;
			case "Toggle Practice Mode":
				PlayState.practiceMode = !PlayState.practiceMode;
				this.practiceText.set_visible(PlayState.practiceMode);
				break;
			}
		}
		var _this = flixel_FlxG.keys.justPressed;
		var tmp = _this.keyManager.checkStatus(74,_this.status);
	}
	,destroy: function() {
		this.pauseMusic.destroy();
		MusicBeatSubstate.prototype.destroy.call(this);
	}
	,changeSelection: function(change) {
		if(change == null) {
			change = 0;
		}
		flixel_FlxG.sound.play(Paths.sound("scrollMenu"),0.4);
		this.curSelected += change;
		if(this.curSelected < 0) {
			this.curSelected = this.menuItems.length - 1;
		}
		if(this.curSelected >= this.menuItems.length) {
			this.curSelected = 0;
		}
		var bullShit = 0;
		var _g = 0;
		var _g1 = this.grpMenuShit.members;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.targetY = bullShit - this.curSelected;
			++bullShit;
			item.set_alpha(0.6);
			if(item.targetY == 0) {
				item.set_alpha(1);
			}
		}
	}
	,__class__: PauseSubState
});
var PlayState = function(TransIn,TransOut) {
	this.curLight = 0;
	this.lightningOffset = 8;
	this.lightningStrikeBeat = 0;
	this.startedMoving = false;
	this.trainCooldown = 0;
	this.trainFinishing = false;
	this.trainCars = 8;
	this.trainFrameTiming = 0;
	this.trainMoving = false;
	this.tankX = 400;
	this.tankSpeed = flixel_FlxG.random.float(5,7);
	this.tankAngle = flixel_FlxG.random.int(-90,45);
	this.tankMoving = false;
	this.tankResetShit = false;
	this.fastCarCanDrive = true;
	this.endingSong = false;
	this.cameraRightSide = false;
	this.canPause = true;
	this.startedCountdown = false;
	this.paused = false;
	this.debugNum = 0;
	this.songTime = 0;
	this.lastReportedPlayheadPosition = 0;
	this.previousFrameTime = 0;
	this.perfectMode = false;
	this.startTimer = new flixel_util_FlxTimer();
	this.inCutscene = false;
	this.defaultCamZoom = 1.05;
	this.songScore = 0;
	this.talking = true;
	this.wiggleShit = new WiggleEffect();
	this.isHalloween = false;
	this.dialogue = ["blah blah blah","coolswag"];
	this.startingSong = false;
	this.generatedMusic = false;
	this.combo = 0;
	this.health = 1;
	this.gfSpeed = 1;
	this.curSong = "";
	this.camZooming = false;
	this.curSection = 0;
	this.unspawnNotes = [];
	this.vocalsFinished = false;
	this.halloweenLevel = false;
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["PlayState"] = PlayState;
PlayState.__name__ = "PlayState";
PlayState.SONG = null;
PlayState.prevCamFollow = null;
PlayState.__super__ = MusicBeatState;
PlayState.prototype = $extend(MusicBeatState.prototype,{
	halloweenLevel: null
	,vocals: null
	,vocalsFinished: null
	,dad: null
	,gf: null
	,boyfriend: null
	,notes: null
	,unspawnNotes: null
	,strumLine: null
	,curSection: null
	,camFollow: null
	,camPos: null
	,strumLineNotes: null
	,playerStrums: null
	,grpNoteSplashes: null
	,camZooming: null
	,curSong: null
	,gfSpeed: null
	,health: null
	,combo: null
	,healthBarBG: null
	,healthBar: null
	,generatedMusic: null
	,startingSong: null
	,iconP1: null
	,iconP2: null
	,camHUD: null
	,camGame: null
	,dialogue: null
	,halloweenBG: null
	,isHalloween: null
	,foregroundSprites: null
	,phillyCityLights: null
	,phillyTrain: null
	,trainSound: null
	,lightFadeShader: null
	,limo: null
	,grpLimoDancers: null
	,fastCar: null
	,upperBoppers: null
	,bottomBoppers: null
	,santa: null
	,bgGirls: null
	,wiggleShit: null
	,tankWatchtower: null
	,tankGround: null
	,tankmanRun: null
	,gfCutsceneLayer: null
	,bfTankCutsceneLayer: null
	,talking: null
	,songScore: null
	,scoreTxt: null
	,defaultCamZoom: null
	,inCutscene: null
	,create: function() {
		var _gthis = this;
		if(flixel_FlxG.sound.music != null) {
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
		}
		var instPath = "songs:assets/songs/" + PlayState.SONG.song.toLowerCase().toLowerCase() + "/Inst." + "mp3";
		if(openfl_utils_Assets.exists(instPath,"SOUND") || openfl_utils_Assets.exists(instPath,"MUSIC")) {
			openfl_utils_Assets.getSound(instPath,true);
		}
		var vocalsPath = "songs:assets/songs/" + PlayState.SONG.song.toLowerCase().toLowerCase() + "/Voices." + "mp3";
		if(openfl_utils_Assets.exists(vocalsPath,"SOUND") || openfl_utils_Assets.exists(vocalsPath,"MUSIC")) {
			openfl_utils_Assets.getSound(vocalsPath,true);
		}
		this.camGame = new flixel_FlxCamera();
		this.camHUD = new flixel_FlxCamera();
		this.camHUD.bgColor &= 16777215;
		this.camHUD.bgColor |= 0;
		flixel_FlxG.cameras.reset(this.camGame);
		flixel_FlxG.cameras.add(this.camHUD,false);
		this.grpNoteSplashes = new flixel_group_FlxTypedGroup();
		var splash = new NoteSplash(100,100,0);
		this.grpNoteSplashes.add(splash);
		splash.set_alpha(0.1);
		this.persistentUpdate = true;
		this.persistentDraw = true;
		if(PlayState.SONG == null) {
			PlayState.SONG = Song.loadFromJson("tutorial");
		}
		Conductor.mapBPMChanges(PlayState.SONG);
		Conductor.changeBPM(PlayState.SONG.bpm);
		this.foregroundSprites = new flixel_group_FlxTypedGroup();
		switch(PlayState.SONG.song.toLowerCase()) {
		case "bopeebo":
			this.dialogue = ["HEY!","You think you can just sing\nwith my daughter like that?","If you want to date her...","You're going to have to go \nthrough ME first!"];
			break;
		case "dadbattle":
			this.dialogue = ["gah you think you're hot stuff?","If you can beat me here...","Only then I will even CONSIDER letting you\ndate my daughter!"];
			break;
		case "fresh":
			this.dialogue = ["Not too shabby boy.",""];
			break;
		case "roses":
			this.dialogue = CoolUtil.coolTextFile(Paths.getPath("data/" + "roses/rosesDialogue" + ".txt","TEXT",null));
			break;
		case "senpai":
			this.dialogue = CoolUtil.coolTextFile(Paths.getPath("data/" + "senpai/senpaiDialogue" + ".txt","TEXT",null));
			break;
		case "thorns":
			this.dialogue = CoolUtil.coolTextFile(Paths.getPath("data/" + "thorns/thornsDialogue" + ".txt","TEXT",null));
			break;
		case "tutorial":
			this.dialogue = ["Hey you're pretty cute.","Use the arrow keys to keep up \nwith me singing."];
			break;
		}
		switch(PlayState.SONG.song.toLowerCase()) {
		case "cocoa":case "eggnog":
			PlayState.curStage = "mall";
			this.defaultCamZoom = 0.80;
			var bg = new flixel_FlxSprite(-1000,-500).loadGraphic(Paths.getPath("images/" + "christmas/bgWalls" + ".png","IMAGE",null));
			bg.set_antialiasing(true);
			bg.scrollFactor.set(0.2,0.2);
			bg.set_active(false);
			bg.setGraphicSize(bg.get_width() * 0.8 | 0);
			bg.updateHitbox();
			this.add(bg);
			this.upperBoppers = new flixel_FlxSprite(-240,-90);
			var library = null;
			this.upperBoppers.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "christmas/upperBop" + ".png","IMAGE",library),Paths.getPath("images/" + "christmas/upperBop" + ".xml","TEXT",library)));
			this.upperBoppers.animation.addByPrefix("bop","Upper Crowd Bob",24,false);
			this.upperBoppers.set_antialiasing(true);
			this.upperBoppers.scrollFactor.set(0.33,0.33);
			this.upperBoppers.setGraphicSize(this.upperBoppers.get_width() * 0.85 | 0);
			this.upperBoppers.updateHitbox();
			this.add(this.upperBoppers);
			var bgEscalator = new flixel_FlxSprite(-1100,-600).loadGraphic(Paths.getPath("images/" + "christmas/bgEscalator" + ".png","IMAGE",null));
			bgEscalator.set_antialiasing(true);
			bgEscalator.scrollFactor.set(0.3,0.3);
			bgEscalator.set_active(false);
			bgEscalator.setGraphicSize(bgEscalator.get_width() * 0.9 | 0);
			bgEscalator.updateHitbox();
			this.add(bgEscalator);
			var tree = new flixel_FlxSprite(370,-250).loadGraphic(Paths.getPath("images/" + "christmas/christmasTree" + ".png","IMAGE",null));
			tree.set_antialiasing(true);
			tree.scrollFactor.set(0.40,0.40);
			this.add(tree);
			this.bottomBoppers = new flixel_FlxSprite(-300,140);
			var library = null;
			this.bottomBoppers.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "christmas/bottomBop" + ".png","IMAGE",library),Paths.getPath("images/" + "christmas/bottomBop" + ".xml","TEXT",library)));
			this.bottomBoppers.animation.addByPrefix("bop","Bottom Level Boppers",24,false);
			this.bottomBoppers.set_antialiasing(true);
			this.bottomBoppers.scrollFactor.set(0.9,0.9);
			this.bottomBoppers.setGraphicSize(this.bottomBoppers.get_width() | 0);
			this.bottomBoppers.updateHitbox();
			this.add(this.bottomBoppers);
			var fgSnow = new flixel_FlxSprite(-600,700).loadGraphic(Paths.getPath("images/" + "christmas/fgSnow" + ".png","IMAGE",null));
			fgSnow.set_active(false);
			fgSnow.set_antialiasing(true);
			this.add(fgSnow);
			this.santa = new flixel_FlxSprite(-840,150);
			var library = null;
			this.santa.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "christmas/santa" + ".png","IMAGE",library),Paths.getPath("images/" + "christmas/santa" + ".xml","TEXT",library)));
			this.santa.animation.addByPrefix("idle","santa idle in fear",24,false);
			this.santa.set_antialiasing(true);
			this.add(this.santa);
			break;
		case "monster":case "south":case "spookeez":
			PlayState.curStage = "spooky";
			this.halloweenLevel = true;
			var library = null;
			var hallowTex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "halloween_bg" + ".png","IMAGE",library),Paths.getPath("images/" + "halloween_bg" + ".xml","TEXT",library));
			this.halloweenBG = new flixel_FlxSprite(-200,-100);
			this.halloweenBG.set_frames(hallowTex);
			this.halloweenBG.animation.addByPrefix("idle","halloweem bg0");
			this.halloweenBG.animation.addByPrefix("lightning","halloweem bg lightning strike",24,false);
			this.halloweenBG.animation.play("idle");
			this.halloweenBG.set_antialiasing(true);
			this.add(this.halloweenBG);
			this.isHalloween = true;
			break;
		case "blammed":case "philly":case "pico":
			PlayState.curStage = "philly";
			var bg = new flixel_FlxSprite(-100).loadGraphic(Paths.getPath("images/" + "philly/sky" + ".png","IMAGE",null));
			bg.scrollFactor.set(0.1,0.1);
			this.add(bg);
			var city = new flixel_FlxSprite(-10).loadGraphic(Paths.getPath("images/" + "philly/city" + ".png","IMAGE",null));
			city.scrollFactor.set(0.3,0.3);
			city.setGraphicSize(city.get_width() * 0.85 | 0);
			city.updateHitbox();
			this.add(city);
			this.lightFadeShader = new shaderslmfao_BuildingShaders();
			this.phillyCityLights = new flixel_group_FlxTypedGroup();
			this.add(this.phillyCityLights);
			var light = new flixel_FlxSprite(city.x).loadGraphic(Paths.getPath("images/" + ("philly/win" + 0) + ".png","IMAGE",null));
			light.scrollFactor.set(0.3,0.3);
			light.set_visible(false);
			light.setGraphicSize(light.get_width() * 0.85 | 0);
			light.updateHitbox();
			light.set_antialiasing(true);
			light.shader = this.lightFadeShader.shader;
			this.phillyCityLights.add(light);
			var light = new flixel_FlxSprite(city.x).loadGraphic(Paths.getPath("images/" + ("philly/win" + 1) + ".png","IMAGE",null));
			light.scrollFactor.set(0.3,0.3);
			light.set_visible(false);
			light.setGraphicSize(light.get_width() * 0.85 | 0);
			light.updateHitbox();
			light.set_antialiasing(true);
			light.shader = this.lightFadeShader.shader;
			this.phillyCityLights.add(light);
			var light = new flixel_FlxSprite(city.x).loadGraphic(Paths.getPath("images/" + ("philly/win" + 2) + ".png","IMAGE",null));
			light.scrollFactor.set(0.3,0.3);
			light.set_visible(false);
			light.setGraphicSize(light.get_width() * 0.85 | 0);
			light.updateHitbox();
			light.set_antialiasing(true);
			light.shader = this.lightFadeShader.shader;
			this.phillyCityLights.add(light);
			var light = new flixel_FlxSprite(city.x).loadGraphic(Paths.getPath("images/" + ("philly/win" + 3) + ".png","IMAGE",null));
			light.scrollFactor.set(0.3,0.3);
			light.set_visible(false);
			light.setGraphicSize(light.get_width() * 0.85 | 0);
			light.updateHitbox();
			light.set_antialiasing(true);
			light.shader = this.lightFadeShader.shader;
			this.phillyCityLights.add(light);
			var light = new flixel_FlxSprite(city.x).loadGraphic(Paths.getPath("images/" + ("philly/win" + 4) + ".png","IMAGE",null));
			light.scrollFactor.set(0.3,0.3);
			light.set_visible(false);
			light.setGraphicSize(light.get_width() * 0.85 | 0);
			light.updateHitbox();
			light.set_antialiasing(true);
			light.shader = this.lightFadeShader.shader;
			this.phillyCityLights.add(light);
			var streetBehind = new flixel_FlxSprite(-40,50).loadGraphic(Paths.getPath("images/" + "philly/behindTrain" + ".png","IMAGE",null));
			this.add(streetBehind);
			this.phillyTrain = new flixel_FlxSprite(2000,360).loadGraphic(Paths.getPath("images/" + "philly/train" + ".png","IMAGE",null));
			this.add(this.phillyTrain);
			this.trainSound = new flixel_system_FlxSound().loadEmbedded(Paths.sound("train_passes"));
			flixel_FlxG.sound.list.add(this.trainSound);
			var street = new flixel_FlxSprite(-40,streetBehind.y).loadGraphic(Paths.getPath("images/" + "philly/street" + ".png","IMAGE",null));
			this.add(street);
			break;
		case "high":case "milf":case "satin-panties":
			PlayState.curStage = "limo";
			this.defaultCamZoom = 0.90;
			var skyBG = new flixel_FlxSprite(-120,-50).loadGraphic(Paths.getPath("images/" + "limo/limoSunset" + ".png","IMAGE",null));
			skyBG.scrollFactor.set(0.1,0.1);
			this.add(skyBG);
			var bgLimo = new flixel_FlxSprite(-200,480);
			var library = null;
			bgLimo.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "limo/bgLimo" + ".png","IMAGE",library),Paths.getPath("images/" + "limo/bgLimo" + ".xml","TEXT",library)));
			bgLimo.animation.addByPrefix("drive","background limo pink",24);
			bgLimo.animation.play("drive");
			bgLimo.scrollFactor.set(0.4,0.4);
			this.add(bgLimo);
			this.grpLimoDancers = new flixel_group_FlxTypedGroup();
			this.add(this.grpLimoDancers);
			var dancer = new BackgroundDancer(130,bgLimo.y - 400);
			dancer.scrollFactor.set(0.4,0.4);
			this.grpLimoDancers.add(dancer);
			var dancer = new BackgroundDancer(500,bgLimo.y - 400);
			dancer.scrollFactor.set(0.4,0.4);
			this.grpLimoDancers.add(dancer);
			var dancer = new BackgroundDancer(870,bgLimo.y - 400);
			dancer.scrollFactor.set(0.4,0.4);
			this.grpLimoDancers.add(dancer);
			var dancer = new BackgroundDancer(1240,bgLimo.y - 400);
			dancer.scrollFactor.set(0.4,0.4);
			this.grpLimoDancers.add(dancer);
			var dancer = new BackgroundDancer(1610,bgLimo.y - 400);
			dancer.scrollFactor.set(0.4,0.4);
			this.grpLimoDancers.add(dancer);
			var overlayShit = new flixel_FlxSprite(-500,-600).loadGraphic(Paths.getPath("images/" + "limo/limoOverlay" + ".png","IMAGE",null));
			overlayShit.set_alpha(0.5);
			this.limo = new flixel_FlxSprite(-120,550);
			var library = null;
			this.limo.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "limo/limoDrive" + ".png","IMAGE",library),Paths.getPath("images/" + "limo/limoDrive" + ".xml","TEXT",library)));
			this.limo.animation.addByPrefix("drive","Limo stage",24);
			this.limo.animation.play("drive");
			this.limo.set_antialiasing(true);
			this.fastCar = new flixel_FlxSprite(-300,160).loadGraphic(Paths.getPath("images/" + "limo/fastCarLol" + ".png","IMAGE",null));
			break;
		case "roses":case "senpai":
			PlayState.curStage = "school";
			var bgSky = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + "weeb/weebSky" + ".png","IMAGE",null));
			bgSky.scrollFactor.set(0.1,0.1);
			this.add(bgSky);
			var repositionShit = -200;
			var bgSchool = new flixel_FlxSprite(repositionShit,0).loadGraphic(Paths.getPath("images/" + "weeb/weebSchool" + ".png","IMAGE",null));
			bgSchool.scrollFactor.set(0.6,0.90);
			this.add(bgSchool);
			var bgStreet = new flixel_FlxSprite(repositionShit).loadGraphic(Paths.getPath("images/" + "weeb/weebStreet" + ".png","IMAGE",null));
			bgStreet.scrollFactor.set(0.95,0.95);
			this.add(bgStreet);
			var fgTrees = new flixel_FlxSprite(repositionShit + 170,130).loadGraphic(Paths.getPath("images/" + "weeb/weebTreesBack" + ".png","IMAGE",null));
			fgTrees.scrollFactor.set(0.9,0.9);
			this.add(fgTrees);
			var bgTrees = new flixel_FlxSprite(repositionShit - 380,-800);
			var library = null;
			var treetex = flixel_graphics_frames_FlxAtlasFrames.fromSpriteSheetPacker(Paths.getPath("images/" + "weeb/weebTrees" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/weebTrees" + ".txt","TEXT",library));
			bgTrees.set_frames(treetex);
			bgTrees.animation.add("treeLoop",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],12);
			bgTrees.animation.play("treeLoop");
			bgTrees.scrollFactor.set(0.85,0.85);
			this.add(bgTrees);
			var treeLeaves = new flixel_FlxSprite(repositionShit,-40);
			var library = null;
			treeLeaves.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/petals" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/petals" + ".xml","TEXT",library)));
			treeLeaves.animation.addByPrefix("leaves","PETALS ALL",24,true);
			treeLeaves.animation.play("leaves");
			treeLeaves.scrollFactor.set(0.85,0.85);
			this.add(treeLeaves);
			var widShit = bgSky.get_width() * 6 | 0;
			bgSky.setGraphicSize(widShit);
			bgSchool.setGraphicSize(widShit);
			bgStreet.setGraphicSize(widShit);
			bgTrees.setGraphicSize(widShit * 1.4 | 0);
			fgTrees.setGraphicSize(widShit * 0.8 | 0);
			treeLeaves.setGraphicSize(widShit);
			fgTrees.updateHitbox();
			bgSky.updateHitbox();
			bgSchool.updateHitbox();
			bgStreet.updateHitbox();
			bgTrees.updateHitbox();
			treeLeaves.updateHitbox();
			this.bgGirls = new BackgroundGirls(-100,190);
			this.bgGirls.scrollFactor.set(0.9,0.9);
			if(PlayState.SONG.song.toLowerCase() == "roses") {
				this.bgGirls.getScared();
			}
			this.bgGirls.setGraphicSize(this.bgGirls.get_width() * PlayState.daPixelZoom | 0);
			this.bgGirls.updateHitbox();
			this.add(this.bgGirls);
			break;
		case "thorns":
			PlayState.curStage = "schoolEvil";
			var waveEffectBG = new flixel_addons_effects_chainable_FlxWaveEffect(flixel_addons_effects_chainable_FlxWaveMode.ALL,2,-1,3,2);
			var waveEffectFG = new flixel_addons_effects_chainable_FlxWaveEffect(flixel_addons_effects_chainable_FlxWaveMode.ALL,2,-1,5,2);
			var posX = 400;
			var posY = 200;
			var bg = new flixel_FlxSprite(posX,posY);
			var library = null;
			bg.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/animatedEvilSchool" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/animatedEvilSchool" + ".xml","TEXT",library)));
			bg.animation.addByPrefix("idle","background 2",24);
			bg.animation.play("idle");
			bg.scrollFactor.set(0.8,0.9);
			bg.scale.set(6,6);
			this.add(bg);
			break;
		case "guns":case "stress":case "ugh":
			this.defaultCamZoom = 0.9;
			PlayState.curStage = "tank";
			var sky = new BGSprite("tankSky",-400,-400,0,0);
			this.add(sky);
			var clouds = new BGSprite("tankClouds",flixel_FlxG.random.int(-700,-100),flixel_FlxG.random.int(-20,20),0.1,0.1);
			clouds.set_active(true);
			clouds.velocity.set_x(flixel_FlxG.random.float(5,15));
			this.add(clouds);
			var mountains = new BGSprite("tankMountains",-300,-20,0.2,0.2);
			mountains.setGraphicSize(mountains.get_width() * 1.2 | 0);
			mountains.updateHitbox();
			this.add(mountains);
			var buildings = new BGSprite("tankBuildings",-200,0,0.3,0.3);
			buildings.setGraphicSize(buildings.get_width() * 1.1 | 0);
			buildings.updateHitbox();
			this.add(buildings);
			var ruins = new BGSprite("tankRuins",-200,0,0.35,0.35);
			ruins.setGraphicSize(ruins.get_width() * 1.1 | 0);
			ruins.updateHitbox();
			this.add(ruins);
			var smokeL = new BGSprite("smokeLeft",-200,-100,0.4,0.4,["SmokeBlurLeft"],true);
			this.add(smokeL);
			var smokeR = new BGSprite("smokeRight",1100,-100,0.4,0.4,["SmokeRight"],true);
			this.add(smokeR);
			this.tankWatchtower = new BGSprite("tankWatchtower",100,50,0.5,0.5,["watchtower gradient color"]);
			this.add(this.tankWatchtower);
			this.tankGround = new BGSprite("tankRolling",300,300,0.5,0.5,["BG tank w lighting"],true);
			this.add(this.tankGround);
			this.tankmanRun = new flixel_group_FlxTypedGroup();
			this.add(this.tankmanRun);
			var ground = new BGSprite("tankGround",-420,-150);
			ground.setGraphicSize(ground.get_width() * 1.15 | 0);
			ground.updateHitbox();
			this.add(ground);
			this.moveTank();
			var tankdude0 = new BGSprite("tank0",-500,650,1.7,1.5,["fg"]);
			this.foregroundSprites.add(tankdude0);
			var tankdude1 = new BGSprite("tank1",-300,750,2,0.2,["fg"]);
			this.foregroundSprites.add(tankdude1);
			var tankdude2 = new BGSprite("tank2",450,940,1.5,1.5,["foreground"]);
			this.foregroundSprites.add(tankdude2);
			var tankdude4 = new BGSprite("tank4",1300,900,1.5,1.5,["fg"]);
			this.foregroundSprites.add(tankdude4);
			var tankdude5 = new BGSprite("tank5",1620,700,1.5,1.5,["fg"]);
			this.foregroundSprites.add(tankdude5);
			var tankdude3 = new BGSprite("tank3",1300,1200,3.5,2.5,["fg"]);
			this.foregroundSprites.add(tankdude3);
			break;
		case "winter-horrorland":
			PlayState.curStage = "mallEvil";
			var bg = new flixel_FlxSprite(-400,-500).loadGraphic(Paths.getPath("images/" + "christmas/evilBG" + ".png","IMAGE",null));
			bg.set_antialiasing(true);
			bg.scrollFactor.set(0.2,0.2);
			bg.set_active(false);
			bg.setGraphicSize(bg.get_width() * 0.8 | 0);
			bg.updateHitbox();
			this.add(bg);
			var evilTree = new flixel_FlxSprite(300,-300).loadGraphic(Paths.getPath("images/" + "christmas/evilTree" + ".png","IMAGE",null));
			evilTree.set_antialiasing(true);
			evilTree.scrollFactor.set(0.2,0.2);
			this.add(evilTree);
			var evilSnow = new flixel_FlxSprite(-200,700).loadGraphic(Paths.getPath("images/" + "christmas/evilSnow" + ".png","IMAGE",null));
			evilSnow.set_antialiasing(true);
			this.add(evilSnow);
			break;
		default:
			this.defaultCamZoom = 0.9;
			PlayState.curStage = "stage";
			var bg = new BGSprite("stageback",-600,-200,0.9,0.9);
			this.add(bg);
			var stageFront = new flixel_FlxSprite(-650,600).loadGraphic(Paths.getPath("images/" + "stagefront" + ".png","IMAGE",null));
			stageFront.setGraphicSize(stageFront.get_width() * 1.1 | 0);
			stageFront.updateHitbox();
			stageFront.set_antialiasing(true);
			stageFront.scrollFactor.set(0.9,0.9);
			stageFront.set_active(false);
			this.add(stageFront);
			var stageCurtains = new flixel_FlxSprite(-500,-300).loadGraphic(Paths.getPath("images/" + "stagecurtains" + ".png","IMAGE",null));
			stageCurtains.setGraphicSize(stageCurtains.get_width() * 0.9 | 0);
			stageCurtains.updateHitbox();
			stageCurtains.set_antialiasing(true);
			stageCurtains.scrollFactor.set(1.3,1.3);
			stageCurtains.set_active(false);
			this.add(stageCurtains);
		}
		var gfVersion = "gf";
		switch(PlayState.curStage) {
		case "limo":
			gfVersion = "gf-car";
			break;
		case "mall":case "mallEvil":
			gfVersion = "gf-christmas";
			break;
		case "school":
			gfVersion = "gf-pixel";
			break;
		case "schoolEvil":
			gfVersion = "gf-pixel";
			break;
		case "tank":
			gfVersion = "gf-tankmen";
			break;
		}
		if(PlayState.SONG.song.toLowerCase() == "stress") {
			gfVersion = "pico-speaker";
		}
		this.gf = new Character(400,130,gfVersion);
		this.gf.scrollFactor.set(0.95,0.95);
		if(gfVersion == "pico-speaker") {
			var _g = this.gf;
			_g.set_x(_g.x - 50);
			var _g = this.gf;
			_g.set_y(_g.y - 200);
			var tankmen = new TankmenBG(20,500,true);
			tankmen.strumTime = 10;
			tankmen.resetShit(20,600,true);
			this.tankmanRun.add(tankmen);
			var _g = 0;
			var _g1 = TankmenBG.animationNotes.length;
			while(_g < _g1) {
				var i = _g++;
				var Chance = 16;
				if(Chance == null) {
					Chance = 50;
				}
				if(flixel_FlxG.random.float(0,100) < Chance) {
					var man = this.tankmanRun.recycle(TankmenBG);
					man.strumTime = TankmenBG.animationNotes[i][0];
					man.resetShit(500,200 + flixel_FlxG.random.int(50,100),TankmenBG.animationNotes[i][1] < 2);
					this.tankmanRun.add(man);
				}
			}
		}
		this.dad = new Character(100,100,PlayState.SONG.player2);
		this.camPos = new flixel_math_FlxPoint(this.dad.getGraphicMidpoint().x,this.dad.getGraphicMidpoint().y);
		switch(PlayState.SONG.player2) {
		case "dad":
			var _g = this.camPos;
			_g.set_x(_g.x + 400);
			break;
		case "gf":
			this.dad.setPosition(this.gf.x,this.gf.y);
			this.gf.set_visible(false);
			if(PlayState.isStoryMode) {
				var _g = this.camPos;
				_g.set_x(_g.x + 600);
				this.tweenCamIn();
			}
			break;
		case "monster":
			var _g = this.dad;
			_g.set_y(_g.y + 100);
			break;
		case "monster-christmas":
			var _g = this.dad;
			_g.set_y(_g.y + 130);
			break;
		case "parents-christmas":
			var _g = this.dad;
			_g.set_x(_g.x - 500);
			break;
		case "pico":
			var _g = this.camPos;
			_g.set_x(_g.x + 600);
			var _g = this.dad;
			_g.set_y(_g.y + 300);
			break;
		case "senpai":
			var _g = this.dad;
			_g.set_x(_g.x + 150);
			var _g = this.dad;
			_g.set_y(_g.y + 360);
			this.camPos.set(this.dad.getGraphicMidpoint().x + 300,this.dad.getGraphicMidpoint().y);
			break;
		case "senpai-angry":
			var _g = this.dad;
			_g.set_x(_g.x + 150);
			var _g = this.dad;
			_g.set_y(_g.y + 360);
			this.camPos.set(this.dad.getGraphicMidpoint().x + 300,this.dad.getGraphicMidpoint().y);
			break;
		case "spirit":
			var _g = this.dad;
			_g.set_x(_g.x - 150);
			var _g = this.dad;
			_g.set_y(_g.y + 100);
			this.camPos.set(this.dad.getGraphicMidpoint().x + 300,this.dad.getGraphicMidpoint().y);
			break;
		case "spooky":
			var _g = this.dad;
			_g.set_y(_g.y + 200);
			break;
		case "tankman":
			var _g = this.dad;
			_g.set_y(_g.y + 180);
			break;
		}
		this.boyfriend = new Boyfriend(770,450,PlayState.SONG.player1);
		switch(PlayState.curStage) {
		case "limo":
			var _g = this.boyfriend;
			_g.set_y(_g.y - 220);
			var _g = this.boyfriend;
			_g.set_x(_g.x + 260);
			this.resetFastCar();
			this.add(this.fastCar);
			break;
		case "mall":
			var _g = this.boyfriend;
			_g.set_x(_g.x + 200);
			break;
		case "mallEvil":
			var _g = this.boyfriend;
			_g.set_x(_g.x + 320);
			var _g = this.dad;
			_g.set_y(_g.y - 80);
			break;
		case "school":
			var _g = this.boyfriend;
			_g.set_x(_g.x + 200);
			var _g = this.boyfriend;
			_g.set_y(_g.y + 220);
			var _g = this.gf;
			_g.set_x(_g.x + 180);
			var _g = this.gf;
			_g.set_y(_g.y + 300);
			break;
		case "schoolEvil":
			var evilTrail = new flixel_addons_effects_FlxTrail(this.dad,null,4,24,0.3,0.069);
			this.add(evilTrail);
			var _g = this.boyfriend;
			_g.set_x(_g.x + 200);
			var _g = this.boyfriend;
			_g.set_y(_g.y + 220);
			var _g = this.gf;
			_g.set_x(_g.x + 180);
			var _g = this.gf;
			_g.set_y(_g.y + 300);
			break;
		case "tank":
			var _g = this.gf;
			_g.set_y(_g.y + 10);
			var _g = this.gf;
			_g.set_x(_g.x - 30);
			var _g = this.boyfriend;
			_g.set_x(_g.x + 40);
			var _g = this.boyfriend;
			_g.set_y(_g.y);
			var _g = this.dad;
			_g.set_y(_g.y + 60);
			var _g = this.dad;
			_g.set_x(_g.x - 80);
			if(gfVersion != "pico-speaker") {
				var _g = this.gf;
				_g.set_x(_g.x - 170);
				var _g = this.gf;
				_g.set_y(_g.y - 75);
			}
			break;
		}
		this.add(this.gf);
		this.gfCutsceneLayer = new flixel_group_FlxTypedGroup();
		this.add(this.gfCutsceneLayer);
		this.bfTankCutsceneLayer = new flixel_group_FlxTypedGroup();
		this.add(this.bfTankCutsceneLayer);
		if(PlayState.curStage == "limo") {
			this.add(this.limo);
		}
		this.add(this.dad);
		this.add(this.boyfriend);
		this.add(this.foregroundSprites);
		var doof = new DialogueBox(false,this.dialogue);
		doof.scrollFactor.set();
		doof.finishThing = $bind(this,this.startCountdown);
		Conductor.songPosition = -5000;
		this.strumLine = new flixel_FlxSprite(0,50).makeGraphic(flixel_FlxG.width,10);
		if(ui_PreferencesMenu.getPref("downscroll")) {
			this.strumLine.set_y(flixel_FlxG.height - 150);
		}
		this.strumLine.scrollFactor.set();
		this.strumLineNotes = new flixel_group_FlxTypedGroup();
		this.add(this.strumLineNotes);
		this.add(this.grpNoteSplashes);
		this.playerStrums = new flixel_group_FlxTypedGroup();
		this.generateSong();
		this.camFollow = new flixel_FlxObject(0,0,1,1);
		this.camFollow.setPosition(this.camPos.x,this.camPos.y);
		if(PlayState.prevCamFollow != null) {
			this.camFollow = PlayState.prevCamFollow;
			PlayState.prevCamFollow = null;
		}
		this.add(this.camFollow);
		flixel_FlxG.camera.follow(this.camFollow,flixel_FlxCameraFollowStyle.LOCKON,0.04);
		flixel_FlxG.camera.set_zoom(this.defaultCamZoom);
		var _this = flixel_FlxG.camera;
		var point = this.camFollow.getPosition();
		_this.scroll.set(point.x - _this.width * 0.5,point.y - _this.height * 0.5);
		if(point._weak) {
			point.put();
		}
		var _this = flixel_FlxG.worldBounds;
		var X = 0;
		var Y = 0;
		var Width = flixel_FlxG.width;
		var Height = flixel_FlxG.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		flixel_FlxG.fixedTimestep = false;
		this.healthBarBG = new flixel_FlxSprite(0,flixel_FlxG.height * 0.9).loadGraphic(Paths.getPath("images/" + "healthBar" + ".png","IMAGE",null));
		this.healthBarBG.screenCenter(flixel_util_FlxAxes.X);
		this.healthBarBG.scrollFactor.set();
		this.add(this.healthBarBG);
		if(ui_PreferencesMenu.getPref("downscroll")) {
			this.healthBarBG.set_y(flixel_FlxG.height * 0.1);
		}
		this.healthBar = new flixel_ui_FlxBar(this.healthBarBG.x + 4,this.healthBarBG.y + 4,flixel_ui_FlxBarFillDirection.RIGHT_TO_LEFT,this.healthBarBG.get_width() - 8 | 0,this.healthBarBG.get_height() - 8 | 0,this,"health",0,2);
		this.healthBar.scrollFactor.set();
		this.healthBar.createFilledBar(-65536,-10027213);
		this.add(this.healthBar);
		this.scoreTxt = new flixel_text_FlxText(this.healthBarBG.x + this.healthBarBG.get_width() - 190,this.healthBarBG.y + 30,0,"",20);
		this.scoreTxt.setFormat("assets/fonts/" + "vcr.ttf",16,-1,"right",flixel_text_FlxTextBorderStyle.OUTLINE,-16777216);
		this.scoreTxt.scrollFactor.set();
		this.add(this.scoreTxt);
		this.iconP1 = new HealthIcon(PlayState.SONG.player1,true);
		this.iconP1.set_y(this.healthBar.y - this.iconP1.get_height() / 2);
		this.add(this.iconP1);
		this.iconP2 = new HealthIcon(PlayState.SONG.player2,false);
		this.iconP2.set_y(this.healthBar.y - this.iconP2.get_height() / 2);
		this.add(this.iconP2);
		this.grpNoteSplashes.set_cameras([this.camHUD]);
		this.strumLineNotes.set_cameras([this.camHUD]);
		this.notes.set_cameras([this.camHUD]);
		this.healthBar.set_cameras([this.camHUD]);
		this.healthBarBG.set_cameras([this.camHUD]);
		this.iconP1.set_cameras([this.camHUD]);
		this.iconP2.set_cameras([this.camHUD]);
		this.scoreTxt.set_cameras([this.camHUD]);
		doof.set_cameras([this.camHUD]);
		this.startingSong = true;
		if(PlayState.isStoryMode && !PlayState.seenCutscene) {
			PlayState.seenCutscene = true;
			switch(this.curSong.toLowerCase()) {
			case "guns":
				this.gunsIntro();
				break;
			case "roses":
				flixel_FlxG.sound.play(Paths.sound("ANGRY"));
				this.schoolIntro(doof);
				break;
			case "senpai":
				this.schoolIntro(doof);
				break;
			case "stress":
				this.stressIntro();
				break;
			case "thorns":
				this.schoolIntro(doof);
				break;
			case "ugh":
				this.ughIntro();
				break;
			case "winter-horrorland":
				var blackScreen = new flixel_FlxSprite(0,0).makeGraphic(flixel_FlxG.width * 2 | 0,flixel_FlxG.height * 2 | 0,-16777216);
				this.add(blackScreen);
				blackScreen.scrollFactor.set();
				this.camHUD.set_visible(false);
				new flixel_util_FlxTimer().start(0.1,function(tmr) {
					_gthis.remove(blackScreen);
					flixel_FlxG.sound.play(Paths.sound("Lights_Turn_On"));
					_gthis.camFollow.set_y(-2050);
					var _g = _gthis.camFollow;
					_g.set_x(_g.x + 200);
					var _this = flixel_FlxG.camera;
					var point = _gthis.camFollow.getPosition();
					_this.scroll.set(point.x - _this.width * 0.5,point.y - _this.height * 0.5);
					if(point._weak) {
						point.put();
					}
					flixel_FlxG.camera.set_zoom(1.5);
					new flixel_util_FlxTimer().start(0.8,function(tmr) {
						_gthis.camHUD.set_visible(true);
						_gthis.remove(blackScreen);
						flixel_tweens_FlxTween.tween(flixel_FlxG.camera,{ zoom : _gthis.defaultCamZoom},2.5,{ ease : flixel_tweens_FlxEase.quadInOut, onComplete : function(twn) {
							_gthis.startCountdown();
						}});
					});
				});
				break;
			default:
				this.startCountdown();
			}
		} else {
			var _g = this.curSong.toLowerCase();
			this.startCountdown();
		}
		MusicBeatState.prototype.create.call(this);
	}
	,ughIntro: function() {
		var _gthis = this;
		this.inCutscene = true;
		var black = new flixel_FlxSprite(-200,-200).makeGraphic(flixel_FlxG.width * 2,flixel_FlxG.height * 2,-16777216);
		black.scrollFactor.set();
		this.add(black);
		new FlxVideo("music/ughCutscene.mp4").finishCallback = function() {
			_gthis.remove(black);
			flixel_tweens_FlxTween.tween(flixel_FlxG.camera,{ zoom : _gthis.defaultCamZoom},Conductor.stepCrochet / 1000 * 5,{ ease : flixel_tweens_FlxEase.quadInOut});
			_gthis.startCountdown();
			_gthis.cameraMovement();
		};
		flixel_FlxG.camera.set_zoom(this.defaultCamZoom * 1.2);
		var _g = this.camFollow;
		_g.set_x(_g.x + 100);
		var _g = this.camFollow;
		_g.set_y(_g.y + 100);
	}
	,gunsIntro: function() {
		var _gthis = this;
		this.inCutscene = true;
		var black = new flixel_FlxSprite(-200,-200).makeGraphic(flixel_FlxG.width * 2,flixel_FlxG.height * 2,-16777216);
		black.scrollFactor.set();
		this.add(black);
		new FlxVideo("music/gunsCutscene.mp4").finishCallback = function() {
			_gthis.remove(black);
			flixel_tweens_FlxTween.tween(flixel_FlxG.camera,{ zoom : _gthis.defaultCamZoom},Conductor.stepCrochet / 1000 * 5,{ ease : flixel_tweens_FlxEase.quadInOut});
			_gthis.startCountdown();
			_gthis.cameraMovement();
		};
	}
	,stressIntro: function() {
		var _gthis = this;
		this.inCutscene = true;
		var black = new flixel_FlxSprite(-200,-200).makeGraphic(flixel_FlxG.width * 2,flixel_FlxG.height * 2,-16777216);
		black.scrollFactor.set();
		this.add(black);
		new FlxVideo("music/stressCutscene.mp4").finishCallback = function() {
			_gthis.remove(black);
			flixel_tweens_FlxTween.tween(flixel_FlxG.camera,{ zoom : _gthis.defaultCamZoom},Conductor.stepCrochet / 1000 * 5,{ ease : flixel_tweens_FlxEase.quadInOut});
			_gthis.startCountdown();
			_gthis.cameraMovement();
		};
	}
	,initDiscord: function() {
	}
	,schoolIntro: function(dialogueBox) {
		var _gthis = this;
		var black = new flixel_FlxSprite(-100,-100).makeGraphic(flixel_FlxG.width * 2,flixel_FlxG.height * 2,-16777216);
		black.scrollFactor.set();
		this.add(black);
		var red = new flixel_FlxSprite(-100,-100).makeGraphic(flixel_FlxG.width * 2,flixel_FlxG.height * 2,-58575);
		red.scrollFactor.set();
		var senpaiEvil = new flixel_FlxSprite();
		var library = null;
		senpaiEvil.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/senpaiCrazy" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/senpaiCrazy" + ".xml","TEXT",library)));
		senpaiEvil.animation.addByPrefix("idle","Senpai Pre Explosion",24,false);
		senpaiEvil.setGraphicSize(senpaiEvil.get_width() * PlayState.daPixelZoom | 0);
		senpaiEvil.scrollFactor.set();
		senpaiEvil.updateHitbox();
		senpaiEvil.screenCenter();
		var _g = senpaiEvil;
		_g.set_x(_g.x + senpaiEvil.get_width() / 5);
		this.camFollow.setPosition(this.camPos.x,this.camPos.y);
		if(PlayState.SONG.song.toLowerCase() == "roses" || PlayState.SONG.song.toLowerCase() == "thorns") {
			this.remove(black);
			if(PlayState.SONG.song.toLowerCase() == "thorns") {
				this.add(red);
				this.camHUD.set_visible(false);
			}
		}
		new flixel_util_FlxTimer().start(0.3,function(tmr) {
			var _g = black;
			_g.set_alpha(_g.alpha - 0.15);
			if(black.alpha > 0) {
				tmr.reset(0.3);
			} else {
				if(dialogueBox != null) {
					_gthis.inCutscene = true;
					if(PlayState.SONG.song.toLowerCase() == "thorns") {
						_gthis.add(senpaiEvil);
						senpaiEvil.set_alpha(0);
						new flixel_util_FlxTimer().start(0.3,function(swagTimer) {
							var _g = senpaiEvil;
							_g.set_alpha(_g.alpha + 0.15);
							if(senpaiEvil.alpha < 1) {
								swagTimer.reset();
							} else {
								senpaiEvil.animation.play("idle");
								flixel_FlxG.sound.play(Paths.sound("Senpai_Dies"),1,false,null,true,function() {
									_gthis.remove(senpaiEvil);
									_gthis.remove(red);
									flixel_FlxG.camera.fade(-1,0.01,true,function() {
										_gthis.add(dialogueBox);
										_gthis.camHUD.set_visible(true);
									},true);
								});
								new flixel_util_FlxTimer().start(3.2,function(deadTime) {
									flixel_FlxG.camera.fade(-1,1.6,false);
								});
							}
						});
					} else {
						_gthis.add(dialogueBox);
					}
				} else {
					_gthis.startCountdown();
				}
				_gthis.remove(black);
			}
		});
	}
	,startTimer: null
	,perfectMode: null
	,startCountdown: function() {
		var _gthis = this;
		this.inCutscene = false;
		this.camHUD.set_visible(true);
		this.generateStaticArrows(0);
		this.generateStaticArrows(1);
		this.talking = false;
		this.startedCountdown = true;
		Conductor.songPosition = 0;
		Conductor.songPosition -= Conductor.crochet * 5;
		var swagCounter = 0;
		this.startTimer.start(Conductor.crochet / 1000,function(tmr) {
			if(swagCounter % _gthis.gfSpeed == 0) {
				_gthis.gf.dance();
			}
			if(swagCounter % 2 == 0) {
				if(!StringTools.startsWith(_gthis.boyfriend.animation._curAnim.name,"sing")) {
					_gthis.boyfriend.playAnim("idle");
				}
				if(!StringTools.startsWith(_gthis.dad.animation._curAnim.name,"sing")) {
					_gthis.dad.dance();
				}
			} else if(_gthis.dad.curCharacter == "spooky" && !StringTools.startsWith(_gthis.dad.animation._curAnim.name,"sing")) {
				_gthis.dad.dance();
			}
			if(_gthis.generatedMusic) {
				_gthis.notes.members.sort(function(Obj1,Obj2) {
					return _gthis.sortNotes(1,Obj1,Obj2);
				});
			}
			var introAssets_h = Object.create(null);
			introAssets_h["default"] = ["ready","set","go"];
			introAssets_h["school"] = ["weeb/pixelUI/ready-pixel","weeb/pixelUI/set-pixel","weeb/pixelUI/date-pixel"];
			introAssets_h["schoolEvil"] = ["weeb/pixelUI/ready-pixel","weeb/pixelUI/set-pixel","weeb/pixelUI/date-pixel"];
			var introAlts = introAssets_h["default"];
			var altSuffix = "";
			var value = haxe_ds_StringMap.keysIterator(introAssets_h);
			while(value.hasNext()) {
				var value1 = value.next();
				if(value1 == PlayState.curStage) {
					introAlts = introAssets_h[value1];
					altSuffix = "-pixel";
				}
			}
			switch(swagCounter) {
			case 0:
				flixel_FlxG.sound.play(Paths.sound("intro3" + altSuffix),0.6);
				break;
			case 1:
				var ready = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + introAlts[0] + ".png","IMAGE",null));
				ready.scrollFactor.set();
				ready.updateHitbox();
				if(StringTools.startsWith(PlayState.curStage,"school")) {
					ready.setGraphicSize(ready.get_width() * PlayState.daPixelZoom | 0);
				}
				ready.screenCenter();
				_gthis.add(ready);
				var _g = ready;
				flixel_tweens_FlxTween.tween(ready,{ y : _g.set_y(_g.y + 100), alpha : 0},Conductor.crochet / 1000,{ ease : flixel_tweens_FlxEase.cubeInOut, onComplete : function(twn) {
					ready.destroy();
				}});
				flixel_FlxG.sound.play(Paths.sound("intro2" + altSuffix),0.6);
				break;
			case 2:
				var set = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + introAlts[1] + ".png","IMAGE",null));
				set.scrollFactor.set();
				if(StringTools.startsWith(PlayState.curStage,"school")) {
					set.setGraphicSize(set.get_width() * PlayState.daPixelZoom | 0);
				}
				set.screenCenter();
				_gthis.add(set);
				var _g = set;
				flixel_tweens_FlxTween.tween(set,{ y : _g.set_y(_g.y + 100), alpha : 0},Conductor.crochet / 1000,{ ease : flixel_tweens_FlxEase.cubeInOut, onComplete : function(twn) {
					set.destroy();
				}});
				flixel_FlxG.sound.play(Paths.sound("intro1" + altSuffix),0.6);
				break;
			case 3:
				var go = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + introAlts[2] + ".png","IMAGE",null));
				go.scrollFactor.set();
				if(StringTools.startsWith(PlayState.curStage,"school")) {
					go.setGraphicSize(go.get_width() * PlayState.daPixelZoom | 0);
				}
				go.updateHitbox();
				go.screenCenter();
				_gthis.add(go);
				var _g = go;
				flixel_tweens_FlxTween.tween(go,{ y : _g.set_y(_g.y + 100), alpha : 0},Conductor.crochet / 1000,{ ease : flixel_tweens_FlxEase.cubeInOut, onComplete : function(twn) {
					go.destroy();
				}});
				flixel_FlxG.sound.play(Paths.sound("introGo" + altSuffix),0.6);
				break;
			case 4:
				break;
			}
			swagCounter += 1;
		},4);
	}
	,previousFrameTime: null
	,lastReportedPlayheadPosition: null
	,songTime: null
	,startSong: function() {
		this.startingSong = false;
		this.previousFrameTime = flixel_FlxG.game.ticks;
		this.lastReportedPlayheadPosition = 0;
		if(!this.paused) {
			flixel_FlxG.sound.playMusic("songs:assets/songs/" + PlayState.SONG.song.toLowerCase() + "/Inst." + "mp3",1,false);
		}
		flixel_FlxG.sound.music.onComplete = $bind(this,this.endSong);
		this.vocals.play();
	}
	,debugNum: null
	,generateSong: function() {
		var _gthis = this;
		var songData = PlayState.SONG;
		Conductor.changeBPM(songData.bpm);
		this.curSong = songData.song;
		if(PlayState.SONG.needsVoices) {
			var tmp = "songs:assets/songs/" + PlayState.SONG.song.toLowerCase() + "/Voices." + "mp3";
			this.vocals = new flixel_system_FlxSound().loadEmbedded(tmp);
		} else {
			this.vocals = new flixel_system_FlxSound();
		}
		this.vocals.onComplete = function() {
			_gthis.vocalsFinished = true;
		};
		flixel_FlxG.sound.list.add(this.vocals);
		this.notes = new flixel_group_FlxTypedGroup();
		this.add(this.notes);
		var noteData = songData.notes;
		var playerCounter = 0;
		var daBeats = 0;
		var _g = 0;
		while(_g < noteData.length) {
			var section = noteData[_g];
			++_g;
			var coolSection = section.lengthInSteps / 4 | 0;
			var _g1 = 0;
			var _g2 = section.sectionNotes;
			while(_g1 < _g2.length) {
				var songNotes = _g2[_g1];
				++_g1;
				var daStrumTime = songNotes[0];
				var daNoteData = songNotes[1] % 4 | 0;
				var gottaHitNote = section.mustHitSection;
				if(songNotes[1] > 3) {
					gottaHitNote = !section.mustHitSection;
				}
				var oldNote;
				if(this.unspawnNotes.length > 0) {
					oldNote = this.unspawnNotes[this.unspawnNotes.length - 1 | 0];
				} else {
					oldNote = null;
				}
				var swagNote = new Note(daStrumTime,daNoteData,oldNote);
				swagNote.sustainLength = songNotes[2];
				swagNote.altNote = songNotes[3];
				swagNote.scrollFactor.set(0,0);
				var susLength = swagNote.sustainLength;
				susLength /= Conductor.stepCrochet;
				this.unspawnNotes.push(swagNote);
				var _g3 = 0;
				var _g4 = Math.floor(susLength);
				while(_g3 < _g4) {
					var susNote = _g3++;
					oldNote = this.unspawnNotes[this.unspawnNotes.length - 1 | 0];
					var sustainNote = new Note(daStrumTime + Conductor.stepCrochet * susNote + Conductor.stepCrochet,daNoteData,oldNote,true);
					sustainNote.scrollFactor.set();
					this.unspawnNotes.push(sustainNote);
					sustainNote.mustPress = gottaHitNote;
					if(sustainNote.mustPress) {
						var _g5 = sustainNote;
						_g5.set_x(_g5.x + flixel_FlxG.width / 2);
					}
				}
				swagNote.mustPress = gottaHitNote;
				if(swagNote.mustPress) {
					var _g6 = swagNote;
					_g6.set_x(_g6.x + flixel_FlxG.width / 2);
				}
			}
			++daBeats;
		}
		this.unspawnNotes.sort($bind(this,this.sortByShit));
		this.generatedMusic = true;
	}
	,sortByShit: function(Obj1,Obj2) {
		return this.sortNotes(-1,Obj1,Obj2);
	}
	,sortNotes: function(Sort,Obj1,Obj2) {
		if(Sort == null) {
			Sort = -1;
		}
		if(Obj1.strumTime < Obj2.strumTime) {
			return Sort;
		} else if(Obj1.strumTime > Obj2.strumTime) {
			return -Sort;
		} else {
			return 0;
		}
	}
	,generateStaticArrows: function(player) {
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var babyArrow = new flixel_FlxSprite(0,this.strumLine.y);
			var colorSwap = new shaderslmfao_ColorSwap();
			babyArrow.shader = colorSwap.shader;
			colorSwap.update(Note.arrowColors[i]);
			switch(PlayState.curStage) {
			case "school":case "schoolEvil":
				babyArrow.loadGraphic(Paths.getPath("images/" + "weeb/pixelUI/arrows-pixels" + ".png","IMAGE",null),true,17,17);
				babyArrow.animation.add("green",[6]);
				babyArrow.animation.add("red",[7]);
				babyArrow.animation.add("blue",[5]);
				babyArrow.animation.add("purplel",[4]);
				babyArrow.setGraphicSize(babyArrow.get_width() * PlayState.daPixelZoom | 0);
				babyArrow.updateHitbox();
				babyArrow.set_antialiasing(false);
				switch(Math.abs(i)) {
				case 0:
					var _g1 = babyArrow;
					_g1.set_x(_g1.x + Note.swagWidth * 0);
					babyArrow.animation.add("static",[0]);
					babyArrow.animation.add("pressed",[4,8],12,false);
					babyArrow.animation.add("confirm",[12,16],24,false);
					break;
				case 1:
					var _g2 = babyArrow;
					_g2.set_x(_g2.x + Note.swagWidth);
					babyArrow.animation.add("static",[1]);
					babyArrow.animation.add("pressed",[5,9],12,false);
					babyArrow.animation.add("confirm",[13,17],24,false);
					break;
				case 2:
					var _g3 = babyArrow;
					_g3.set_x(_g3.x + Note.swagWidth * 2);
					babyArrow.animation.add("static",[2]);
					babyArrow.animation.add("pressed",[6,10],12,false);
					babyArrow.animation.add("confirm",[14,18],12,false);
					break;
				case 3:
					var _g4 = babyArrow;
					_g4.set_x(_g4.x + Note.swagWidth * 3);
					babyArrow.animation.add("static",[3]);
					babyArrow.animation.add("pressed",[7,11],12,false);
					babyArrow.animation.add("confirm",[15,19],24,false);
					break;
				}
				break;
			default:
				var library = null;
				babyArrow.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "NOTE_assets" + ".png","IMAGE",library),Paths.getPath("images/" + "NOTE_assets" + ".xml","TEXT",library)));
				babyArrow.animation.addByPrefix("green","arrowUP");
				babyArrow.animation.addByPrefix("blue","arrowDOWN");
				babyArrow.animation.addByPrefix("purple","arrowLEFT");
				babyArrow.animation.addByPrefix("red","arrowRIGHT");
				babyArrow.set_antialiasing(true);
				babyArrow.setGraphicSize(babyArrow.get_width() * 0.7 | 0);
				switch(Math.abs(i)) {
				case 0:
					var _g5 = babyArrow;
					_g5.set_x(_g5.x + Note.swagWidth * 0);
					babyArrow.animation.addByPrefix("static","arrow static instance 1");
					babyArrow.animation.addByPrefix("pressed","left press",24,false);
					babyArrow.animation.addByPrefix("confirm","left confirm",24,false);
					break;
				case 1:
					var _g6 = babyArrow;
					_g6.set_x(_g6.x + Note.swagWidth);
					babyArrow.animation.addByPrefix("static","arrow static instance 2");
					babyArrow.animation.addByPrefix("pressed","down press",24,false);
					babyArrow.animation.addByPrefix("confirm","down confirm",24,false);
					break;
				case 2:
					var _g7 = babyArrow;
					_g7.set_x(_g7.x + Note.swagWidth * 2);
					babyArrow.animation.addByPrefix("static","arrow static instance 4");
					babyArrow.animation.addByPrefix("pressed","up press",24,false);
					babyArrow.animation.addByPrefix("confirm","up confirm",24,false);
					break;
				case 3:
					var _g8 = babyArrow;
					_g8.set_x(_g8.x + Note.swagWidth * 3);
					babyArrow.animation.addByPrefix("static","arrow static instance 3");
					babyArrow.animation.addByPrefix("pressed","right press",24,false);
					babyArrow.animation.addByPrefix("confirm","right confirm",24,false);
					break;
				}
			}
			babyArrow.updateHitbox();
			babyArrow.scrollFactor.set();
			if(!PlayState.isStoryMode) {
				var _g9 = babyArrow;
				_g9.set_y(_g9.y - 10);
				babyArrow.set_alpha(0);
				flixel_tweens_FlxTween.tween(babyArrow,{ y : babyArrow.y + 10, alpha : 1},1,{ ease : flixel_tweens_FlxEase.circOut, startDelay : 0.5 + 0.2 * i});
			}
			babyArrow.ID = i;
			if(player == 1) {
				this.playerStrums.add(babyArrow);
			}
			babyArrow.animation.play("static");
			var _g10 = babyArrow;
			_g10.set_x(_g10.x + 50);
			var _g11 = babyArrow;
			_g11.set_x(_g11.x + flixel_FlxG.width / 2 * player);
			this.strumLineNotes.add(babyArrow);
		}
	}
	,tweenCamIn: function() {
		flixel_tweens_FlxTween.tween(flixel_FlxG.camera,{ zoom : 1.3},Conductor.stepCrochet * 4 / 1000,{ ease : flixel_tweens_FlxEase.elasticInOut});
	}
	,openSubState: function(SubState) {
		if(this.paused) {
			if(flixel_FlxG.sound.music != null) {
				flixel_FlxG.sound.music.pause();
				this.vocals.pause();
			}
			if(!this.startTimer.finished) {
				this.startTimer.active = false;
			}
		}
		MusicBeatState.prototype.openSubState.call(this,SubState);
	}
	,closeSubState: function() {
		if(this.paused) {
			if(flixel_FlxG.sound.music != null && !this.startingSong) {
				this.resyncVocals();
			}
			if(!this.startTimer.finished) {
				this.startTimer.active = true;
			}
			this.paused = false;
		}
		MusicBeatState.prototype.closeSubState.call(this);
	}
	,resyncVocals: function() {
		if(!this._exiting) {
			this.vocals.pause();
			flixel_FlxG.sound.music.play();
			Conductor.songPosition = flixel_FlxG.sound.music._time + Conductor.offset;
			if(!this.vocalsFinished) {
				this.vocals.set_time(Conductor.songPosition);
				this.vocals.play();
			}
		}
	}
	,paused: null
	,startedCountdown: null
	,canPause: null
	,cameraRightSide: null
	,update: function(elapsed) {
		var _gthis = this;
		flixel_FlxG.camera.set_followLerp(CoolUtil.camLerpShit(0.04));
		this.perfectMode = false;
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(57,_this.status)) {
			this.iconP1.swapOldIcon();
		}
		if(this.startingSong) {
			if(this.startedCountdown) {
				Conductor.songPosition += flixel_FlxG.elapsed * 1000;
				if(Conductor.songPosition >= 0) {
					this.startSong();
				}
			}
		} else {
			Conductor.songPosition = flixel_FlxG.sound.music._time + Conductor.offset;
			if(!this.paused) {
				this.songTime += flixel_FlxG.game.ticks - this.previousFrameTime;
				this.previousFrameTime = flixel_FlxG.game.ticks;
				if(Conductor.lastSongPos != Conductor.songPosition) {
					this.songTime = (this.songTime + Conductor.songPosition) / 2;
					Conductor.lastSongPos = Conductor.songPosition;
				}
			}
		}
		switch(PlayState.curStage) {
		case "philly":
			if(this.trainMoving) {
				this.trainFrameTiming += elapsed;
				if(this.trainFrameTiming >= 0.041666666666666664) {
					this.updateTrainPos();
					this.trainFrameTiming = 0;
				}
			}
			this.lightFadeShader.update(1.5 * (Conductor.crochet / 1000) * flixel_FlxG.elapsed);
			break;
		case "tank":
			this.moveTank();
			break;
		}
		MusicBeatState.prototype.update.call(this,elapsed);
		this.scoreTxt.set_text("Score:" + this.songScore);
		if(PlayerSettings.player1.controls._pause.check() && this.startedCountdown && this.canPause) {
			this.persistentUpdate = false;
			this.persistentDraw = true;
			this.paused = true;
			var Chance = 0.1;
			if(Chance == null) {
				Chance = 50;
			}
			if(flixel_FlxG.random.float(0,100) < Chance) {
				var nextState = new GitarooPause();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			} else {
				var screenPos = this.boyfriend.getScreenPosition();
				var pauseMenu = new PauseSubState(screenPos.x,screenPos.y);
				this.openSubState(pauseMenu);
				pauseMenu.set_camera(this.camHUD);
			}
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(55,_this.status)) {
			var nextState = new ChartingState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
		this.iconP1.setGraphicSize(150 + 0.85 * (this.iconP1.get_width() - 150) | 0);
		this.iconP2.setGraphicSize(150 + 0.85 * (this.iconP2.get_width() - 150) | 0);
		this.iconP1.updateHitbox();
		this.iconP2.updateHitbox();
		var iconOffset = 26;
		this.iconP1.set_x(this.healthBar.x + (this.healthBar.get_width() * (flixel_math_FlxMath.remapToRange(this.healthBar.get_percent(),0,100,100,0) * 0.01) - iconOffset));
		this.iconP2.set_x(this.healthBar.x + this.healthBar.get_width() * (flixel_math_FlxMath.remapToRange(this.healthBar.get_percent(),0,100,100,0) * 0.01) - (this.iconP2.get_width() - iconOffset));
		if(this.health > 2) {
			this.health = 2;
		}
		if(this.healthBar.get_percent() < 20) {
			this.iconP1.animation._curAnim.set_curFrame(1);
		} else {
			this.iconP1.animation._curAnim.set_curFrame(0);
		}
		if(this.healthBar.get_percent() > 80) {
			this.iconP2.animation._curAnim.set_curFrame(1);
		} else {
			this.iconP2.animation._curAnim.set_curFrame(0);
		}
		if(this.generatedMusic && PlayState.SONG.notes[this.curStep / 16 | 0] != null) {
			var tmp = this.curBeat % 4 == 0;
			this.cameraRightSide = PlayState.SONG.notes[this.curStep / 16 | 0].mustHitSection;
			this.cameraMovement();
		}
		if(this.camZooming) {
			var a = this.defaultCamZoom;
			flixel_FlxG.camera.set_zoom(a + 0.95 * (flixel_FlxG.camera.zoom - a));
			this.camHUD.set_zoom(1 + 0.95 * (this.camHUD.zoom - 1));
		}
		if(this.curSong == "Fresh") {
			switch(this.curBeat) {
			case 16:
				this.camZooming = true;
				this.gfSpeed = 2;
				break;
			case 48:
				this.gfSpeed = 1;
				break;
			case 80:
				this.gfSpeed = 2;
				break;
			case 112:
				this.gfSpeed = 1;
				break;
			}
		}
		if(this.curSong == "Bopeebo") {
			switch(this.curBeat) {
			case 128:case 129:case 130:
				this.vocals.set_volume(0);
				break;
			}
		}
		if(!this.inCutscene && !this._exiting) {
			if(PlayerSettings.player1.controls._reset.check()) {
				this.health = 0;
				haxe_Log.trace("RESET = True",{ fileName : "source/PlayState.hx", lineNumber : 1785, className : "PlayState", methodName : "update"});
			}
			if(this.health <= 0 && !PlayState.practiceMode) {
				this.boyfriend.stunned = true;
				this.persistentUpdate = false;
				this.persistentDraw = false;
				this.paused = true;
				var _this = this.vocals;
				_this.cleanup(_this.autoDestroy,true);
				var _this = flixel_FlxG.sound.music;
				_this.cleanup(_this.autoDestroy,true);
				PlayState.deathCounter += 1;
				this.openSubState(new GameOverSubstate(this.boyfriend.getScreenPosition().x,this.boyfriend.getScreenPosition().y));
			}
		}
		while(this.unspawnNotes[0] != null) if(this.unspawnNotes[0].strumTime - Conductor.songPosition < 1800 / PlayState.SONG.speed) {
			var dunceNote = this.unspawnNotes[0];
			this.notes.add(dunceNote);
			var index = this.unspawnNotes.indexOf(dunceNote);
			this.unspawnNotes.shift();
		} else {
			break;
		}
		if(this.generatedMusic) {
			this.notes.forEachAlive(function(daNote) {
				if(daNote.y > flixel_FlxG.height) {
					daNote.set_active(false);
					daNote.set_visible(false);
				} else {
					daNote.set_visible(true);
					daNote.set_active(true);
				}
				var center = _gthis.strumLine.y + Note.swagWidth / 2;
				if(ui_PreferencesMenu.getPref("downscroll")) {
					daNote.set_y(_gthis.strumLine.y + 0.45 * (Conductor.songPosition - daNote.strumTime) * flixel_math_FlxMath.roundDecimal(PlayState.SONG.speed,2));
					if(daNote.isSustainNote) {
						if(StringTools.endsWith(daNote.animation._curAnim.name,"end") && daNote.prevNote != null) {
							var _g = daNote;
							_g.set_y(_g.y + daNote.prevNote.get_height());
						} else {
							var _g = daNote;
							_g.set_y(_g.y + daNote.get_height() / 2);
						}
						if(daNote.y - daNote.offset.y * daNote.scale.y + daNote.get_height() >= center && (!daNote.mustPress || (daNote.wasGoodHit || daNote.prevNote.wasGoodHit && !daNote.canBeHit))) {
							var swagRect = new flixel_math_FlxRect(0,0,daNote.frameWidth,daNote.frameHeight);
							swagRect.height = (center - daNote.y) / daNote.scale.y;
							swagRect.y = daNote.frameHeight - swagRect.height;
							daNote.set_clipRect(swagRect);
						}
					}
				} else {
					daNote.set_y(_gthis.strumLine.y - 0.45 * (Conductor.songPosition - daNote.strumTime) * flixel_math_FlxMath.roundDecimal(PlayState.SONG.speed,2));
					if(daNote.isSustainNote && daNote.y + daNote.offset.y * daNote.scale.y <= center && (!daNote.mustPress || (daNote.wasGoodHit || daNote.prevNote.wasGoodHit && !daNote.canBeHit))) {
						var swagRect = new flixel_math_FlxRect(0,0,daNote.get_width() / daNote.scale.x,daNote.get_height() / daNote.scale.y);
						swagRect.y = (center - daNote.y) / daNote.scale.y;
						swagRect.height -= swagRect.y;
						daNote.set_clipRect(swagRect);
					}
				}
				if(!daNote.mustPress && daNote.wasGoodHit) {
					if(PlayState.SONG.song != "Tutorial") {
						_gthis.camZooming = true;
					}
					var altAnim = "";
					if(PlayState.SONG.notes[Math.floor(_gthis.curStep / 16)] != null) {
						if(PlayState.SONG.notes[Math.floor(_gthis.curStep / 16)].altAnim) {
							altAnim = "-alt";
						}
					}
					if(daNote.altNote) {
						altAnim = "-alt";
					}
					switch(Math.abs(daNote.noteData)) {
					case 0:
						_gthis.dad.playAnim("singLEFT" + altAnim,true);
						break;
					case 1:
						_gthis.dad.playAnim("singDOWN" + altAnim,true);
						break;
					case 2:
						_gthis.dad.playAnim("singUP" + altAnim,true);
						break;
					case 3:
						_gthis.dad.playAnim("singRIGHT" + altAnim,true);
						break;
					}
					_gthis.dad.holdTimer = 0;
					if(PlayState.SONG.needsVoices) {
						_gthis.vocals.set_volume(1);
					}
					daNote.kill();
					_gthis.notes.remove(daNote,true);
					daNote.destroy();
				}
				var doKill = daNote.y < -daNote.get_height();
				if(ui_PreferencesMenu.getPref("downscroll")) {
					doKill = daNote.y > flixel_FlxG.height;
				}
				if(doKill) {
					if(daNote.tooLate || !daNote.wasGoodHit) {
						_gthis.health -= 0.0475;
						_gthis.vocals.set_volume(0);
					}
					daNote.set_active(false);
					daNote.set_visible(false);
					daNote.kill();
					_gthis.notes.remove(daNote,true);
					daNote.destroy();
				}
			});
		}
		if(!this.inCutscene) {
			this.keyShit();
		}
	}
	,endSong: function() {
		PlayState.seenCutscene = false;
		PlayState.deathCounter = 0;
		this.canPause = false;
		flixel_FlxG.sound.music.set_volume(0);
		this.vocals.set_volume(0);
		if(PlayState.SONG.validScore) {
			Highscore.saveScore(PlayState.SONG.song,this.songScore,PlayState.storyDifficulty);
		}
		if(PlayState.isStoryMode) {
			PlayState.campaignScore += this.songScore;
			HxOverrides.remove(PlayState.storyPlaylist,PlayState.storyPlaylist[0]);
			if(PlayState.storyPlaylist.length <= 0) {
				flixel_FlxG.sound.playMusic(Paths.getPath("music/" + "freakyMenu" + "." + "mp3","MUSIC",null));
				this.transIn = flixel_addons_transition_FlxTransitionableState.defaultTransIn;
				this.transOut = flixel_addons_transition_FlxTransitionableState.defaultTransOut;
				if(PlayState.storyWeek == 7) {
					var nextState = new VideoState();
					if(flixel_FlxG.game._state.switchTo(nextState)) {
						flixel_FlxG.game._requestedState = nextState;
					}
				} else {
					var nextState = new StoryMenuState();
					if(flixel_FlxG.game._state.switchTo(nextState)) {
						flixel_FlxG.game._requestedState = nextState;
					}
				}
				StoryMenuState.weekUnlocked[Math.min(PlayState.storyWeek + 1,StoryMenuState.weekUnlocked.length - 1) | 0] = true;
				if(PlayState.SONG.validScore) {
					Highscore.saveWeekScore(PlayState.storyWeek,PlayState.campaignScore,PlayState.storyDifficulty);
				}
				flixel_FlxG.save.data.weekUnlocked = StoryMenuState.weekUnlocked;
				flixel_FlxG.save.flush();
			} else {
				var difficulty = "";
				if(PlayState.storyDifficulty == 0) {
					difficulty = "-easy";
				}
				if(PlayState.storyDifficulty == 2) {
					difficulty = "-hard";
				}
				haxe_Log.trace("LOADING NEXT SONG",{ fileName : "source/PlayState.hx", lineNumber : 2015, className : "PlayState", methodName : "endSong"});
				haxe_Log.trace(PlayState.storyPlaylist[0].toLowerCase() + difficulty,{ fileName : "source/PlayState.hx", lineNumber : 2016, className : "PlayState", methodName : "endSong"});
				flixel_addons_transition_FlxTransitionableState.skipNextTransIn = true;
				flixel_addons_transition_FlxTransitionableState.skipNextTransOut = true;
				var _this = flixel_FlxG.sound.music;
				_this.cleanup(_this.autoDestroy,true);
				var _this = this.vocals;
				_this.cleanup(_this.autoDestroy,true);
				if(PlayState.SONG.song.toLowerCase() == "eggnog") {
					var blackShit = new flixel_FlxSprite(-flixel_FlxG.width * flixel_FlxG.camera.zoom,-flixel_FlxG.height * flixel_FlxG.camera.zoom).makeGraphic(flixel_FlxG.width * 3,flixel_FlxG.height * 3,-16777216);
					blackShit.scrollFactor.set();
					this.add(blackShit);
					this.camHUD.set_visible(false);
					flixel_FlxG.sound.play(Paths.sound("Lights_Shut_off"),1,false,null,true,function() {
						PlayState.SONG = Song.loadFromJson(PlayState.storyPlaylist[0].toLowerCase() + difficulty,PlayState.storyPlaylist[0]);
						var nextState = LoadingState.getNextState(new PlayState(),false);
						if(flixel_FlxG.game._state.switchTo(nextState)) {
							flixel_FlxG.game._requestedState = nextState;
						}
					});
				} else {
					PlayState.prevCamFollow = this.camFollow;
					PlayState.SONG = Song.loadFromJson(PlayState.storyPlaylist[0].toLowerCase() + difficulty,PlayState.storyPlaylist[0]);
					var nextState = LoadingState.getNextState(new PlayState(),false);
					if(flixel_FlxG.game._state.switchTo(nextState)) {
						flixel_FlxG.game._requestedState = nextState;
					}
				}
			}
		} else {
			haxe_Log.trace("WENT BACK TO FREEPLAY??",{ fileName : "source/PlayState.hx", lineNumber : 2050, className : "PlayState", methodName : "endSong"});
			var nextState = new FreeplayState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
	}
	,endingSong: null
	,popUpScore: function(strumtime,daNote) {
		var noteDiff = Math.abs(strumtime - Conductor.songPosition);
		this.vocals.set_volume(1);
		var placement = Std.string(this.combo);
		var coolText = new flixel_text_FlxText(0,0,0,placement,32);
		coolText.screenCenter();
		coolText.set_x(flixel_FlxG.width * 0.55);
		var rating = new flixel_FlxSprite();
		var score = 350;
		var daRating = "sick";
		var doSplash = true;
		if(noteDiff > Conductor.safeZoneOffset * 0.9) {
			daRating = "shit";
			score = 50;
			doSplash = false;
		} else if(noteDiff > Conductor.safeZoneOffset * 0.75) {
			daRating = "bad";
			score = 100;
			doSplash = false;
		} else if(noteDiff > Conductor.safeZoneOffset * 0.2) {
			daRating = "good";
			score = 200;
			doSplash = false;
		}
		if(doSplash) {
			var splash = this.grpNoteSplashes.recycle(NoteSplash);
			splash.setupNoteSplash(daNote.x,daNote.y,daNote.noteData);
			this.grpNoteSplashes.add(splash);
		}
		if(!PlayState.practiceMode) {
			this.songScore += score;
		}
		var pixelShitPart1 = "";
		var pixelShitPart2 = "";
		if(StringTools.startsWith(PlayState.curStage,"school")) {
			pixelShitPart1 = "weeb/pixelUI/";
			pixelShitPart2 = "-pixel";
		}
		rating.loadGraphic(Paths.getPath("images/" + (pixelShitPart1 + daRating + pixelShitPart2) + ".png","IMAGE",null));
		rating.screenCenter();
		rating.set_x(coolText.x - 40);
		var _g = rating;
		_g.set_y(_g.y - 60);
		rating.acceleration.set_y(550);
		var _g = rating.velocity;
		_g.set_y(_g.y - flixel_FlxG.random.int(140,175));
		var _g = rating.velocity;
		_g.set_x(_g.x - flixel_FlxG.random.int(0,10));
		var comboSpr = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + (pixelShitPart1 + "combo" + pixelShitPart2) + ".png","IMAGE",null));
		comboSpr.screenCenter();
		comboSpr.set_x(coolText.x);
		comboSpr.acceleration.set_y(600);
		var _g = comboSpr.velocity;
		_g.set_y(_g.y - 150);
		var _g = comboSpr.velocity;
		_g.set_x(_g.x + flixel_FlxG.random.int(1,10));
		this.add(rating);
		if(!StringTools.startsWith(PlayState.curStage,"school")) {
			rating.setGraphicSize(rating.get_width() * 0.7 | 0);
			rating.set_antialiasing(true);
			comboSpr.setGraphicSize(comboSpr.get_width() * 0.7 | 0);
			comboSpr.set_antialiasing(true);
		} else {
			rating.setGraphicSize(rating.get_width() * PlayState.daPixelZoom * 0.7 | 0);
			comboSpr.setGraphicSize(comboSpr.get_width() * PlayState.daPixelZoom * 0.7 | 0);
		}
		comboSpr.updateHitbox();
		rating.updateHitbox();
		var seperatedScore = [];
		seperatedScore.push(Math.floor(this.combo / 100));
		seperatedScore.push(Math.floor((this.combo - seperatedScore[0] * 100) / 10));
		seperatedScore.push(this.combo % 10);
		var daLoop = 0;
		var _g = 0;
		while(_g < seperatedScore.length) {
			var i = seperatedScore[_g];
			++_g;
			var numScore = [new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + (pixelShitPart1 + "num" + (i | 0) + pixelShitPart2) + ".png","IMAGE",null))];
			numScore[0].screenCenter();
			numScore[0].set_x(coolText.x + 43 * daLoop - 90);
			var _g1 = numScore[0];
			_g1.set_y(_g1.y + 80);
			if(!StringTools.startsWith(PlayState.curStage,"school")) {
				numScore[0].set_antialiasing(true);
				numScore[0].setGraphicSize(numScore[0].get_width() * 0.5 | 0);
			} else {
				numScore[0].setGraphicSize(numScore[0].get_width() * PlayState.daPixelZoom | 0);
			}
			numScore[0].updateHitbox();
			numScore[0].acceleration.set_y(flixel_FlxG.random.int(200,300));
			var _g2 = numScore[0].velocity;
			_g2.set_y(_g2.y - flixel_FlxG.random.int(140,160));
			numScore[0].velocity.set_x(flixel_FlxG.random.float(-5,5));
			if(this.combo >= 10 || this.combo == 0) {
				this.add(numScore[0]);
			}
			flixel_tweens_FlxTween.tween(numScore[0],{ alpha : 0},0.2,{ onComplete : (function(numScore) {
				return function(tween) {
					numScore[0].destroy();
				};
			})(numScore), startDelay : Conductor.crochet * 0.002});
			++daLoop;
		}
		coolText.set_text(Std.string(seperatedScore));
		flixel_tweens_FlxTween.tween(rating,{ alpha : 0},0.2,{ startDelay : Conductor.crochet * 0.001});
		flixel_tweens_FlxTween.tween(comboSpr,{ alpha : 0},0.2,{ onComplete : function(tween) {
			coolText.destroy();
			comboSpr.destroy();
			rating.destroy();
		}, startDelay : Conductor.crochet * 0.001});
		this.curSection += 1;
	}
	,cameraMovement: function() {
		if(this.camFollow.x != this.dad.getMidpoint().x + 150 && !this.cameraRightSide) {
			this.camFollow.setPosition(this.dad.getMidpoint().x + 150,this.dad.getMidpoint().y - 100);
			switch(this.dad.curCharacter) {
			case "mom":
				this.camFollow.set_y(this.dad.getMidpoint().y);
				break;
			case "senpai":case "senpai-angry":
				this.camFollow.set_y(this.dad.getMidpoint().y - 430);
				this.camFollow.set_x(this.dad.getMidpoint().x - 100);
				break;
			}
			if(this.dad.curCharacter == "mom") {
				this.vocals.set_volume(1);
			}
			if(PlayState.SONG.song.toLowerCase() == "tutorial") {
				this.tweenCamIn();
			}
		}
		if(this.cameraRightSide && this.camFollow.x != this.boyfriend.getMidpoint().x - 100) {
			this.camFollow.setPosition(this.boyfriend.getMidpoint().x - 100,this.boyfriend.getMidpoint().y - 100);
			switch(PlayState.curStage) {
			case "limo":
				this.camFollow.set_x(this.boyfriend.getMidpoint().x - 300);
				break;
			case "mall":
				this.camFollow.set_y(this.boyfriend.getMidpoint().y - 200);
				break;
			case "school":
				this.camFollow.set_x(this.boyfriend.getMidpoint().x - 200);
				this.camFollow.set_y(this.boyfriend.getMidpoint().y - 200);
				break;
			case "schoolEvil":
				this.camFollow.set_x(this.boyfriend.getMidpoint().x - 200);
				this.camFollow.set_y(this.boyfriend.getMidpoint().y - 200);
				break;
			}
			if(PlayState.SONG.song.toLowerCase() == "tutorial") {
				flixel_tweens_FlxTween.tween(flixel_FlxG.camera,{ zoom : 1},Conductor.stepCrochet * 4 / 1000,{ ease : flixel_tweens_FlxEase.elasticInOut});
			}
		}
	}
	,keyShit: function() {
		var _gthis = this;
		var holdingArray = [PlayerSettings.player1.controls._note_left.check(),PlayerSettings.player1.controls._note_down.check(),PlayerSettings.player1.controls._note_up.check(),PlayerSettings.player1.controls._note_right.check()];
		var controlArray = [PlayerSettings.player1.controls._note_leftP.check(),PlayerSettings.player1.controls._note_downP.check(),PlayerSettings.player1.controls._note_upP.check(),PlayerSettings.player1.controls._note_rightP.check()];
		var releaseArray_0 = PlayerSettings.player1.controls._note_leftR.check();
		var releaseArray_1 = PlayerSettings.player1.controls._note_downR.check();
		var releaseArray_2 = PlayerSettings.player1.controls._note_upR.check();
		var releaseArray_3 = PlayerSettings.player1.controls._note_rightR.check();
		if(holdingArray.indexOf(true) != -1 && this.generatedMusic) {
			this.notes.forEachAlive(function(daNote) {
				if(daNote.isSustainNote && daNote.canBeHit && daNote.mustPress && holdingArray[daNote.noteData]) {
					_gthis.goodNoteHit(daNote);
				}
			});
		}
		if(controlArray.indexOf(true) != -1 && this.generatedMusic) {
			this.boyfriend.holdTimer = 0;
			var possibleNotes = [];
			var ignoreList = [];
			var removeList = [];
			this.notes.forEachAlive(function(daNote) {
				if(daNote.canBeHit && daNote.mustPress && !daNote.tooLate && !daNote.wasGoodHit) {
					if(ignoreList.indexOf(daNote.noteData) != -1) {
						var _g = 0;
						while(_g < possibleNotes.length) {
							var possibleNote = possibleNotes[_g];
							++_g;
							if(possibleNote.noteData == daNote.noteData && Math.abs(daNote.strumTime - possibleNote.strumTime) < 10) {
								removeList.push(daNote);
							} else if(possibleNote.noteData == daNote.noteData && daNote.strumTime < possibleNote.strumTime) {
								HxOverrides.remove(possibleNotes,possibleNote);
								possibleNotes.push(daNote);
							}
						}
					} else {
						possibleNotes.push(daNote);
						ignoreList.push(daNote.noteData);
					}
				}
			});
			var _g = 0;
			while(_g < removeList.length) {
				var badNote = removeList[_g];
				++_g;
				badNote.kill();
				this.notes.remove(badNote,true);
				badNote.destroy();
			}
			possibleNotes.sort(function(note1,note2) {
				return note1.strumTime - note2.strumTime | 0;
			});
			if(this.perfectMode) {
				this.goodNoteHit(possibleNotes[0]);
			} else if(possibleNotes.length > 0) {
				var _g = 0;
				var _g1 = controlArray.length;
				while(_g < _g1) {
					var i = _g++;
					if(controlArray[i] && ignoreList.indexOf(i) == -1) {
						this.badNoteHit();
					}
				}
				var _g = 0;
				while(_g < possibleNotes.length) {
					var possibleNote = possibleNotes[_g];
					++_g;
					if(controlArray[possibleNote.noteData]) {
						this.goodNoteHit(possibleNote);
					}
				}
			} else {
				this.badNoteHit();
			}
		}
		if(this.boyfriend.holdTimer > 0.004 * Conductor.stepCrochet && holdingArray.indexOf(true) == -1 && StringTools.startsWith(this.boyfriend.animation._curAnim.name,"sing") && !StringTools.endsWith(this.boyfriend.animation._curAnim.name,"miss")) {
			this.boyfriend.playAnim("idle");
		}
		this.playerStrums.forEach(function(spr) {
			if(controlArray[spr.ID] && spr.animation._curAnim.name != "confirm") {
				spr.animation.play("pressed");
			}
			if(!holdingArray[spr.ID]) {
				spr.animation.play("static");
			}
			if(spr.animation._curAnim.name != "confirm" || StringTools.startsWith(PlayState.curStage,"school")) {
				spr.centerOffsets();
			} else {
				spr.centerOffsets();
				var _g = spr.offset;
				_g.set_x(_g.x - 13);
				var _g = spr.offset;
				_g.set_y(_g.y - 13);
			}
		});
	}
	,noteMiss: function(direction) {
		if(direction == null) {
			direction = 1;
		}
		var _gthis = this;
		if(!this.boyfriend.stunned) {
			this.health -= 0.04;
			if(this.combo > 5 && Object.prototype.hasOwnProperty.call(this.gf.animOffsets.h,"sad")) {
				this.gf.playAnim("sad");
			}
			this.combo = 0;
			if(!PlayState.practiceMode) {
				this.songScore -= 10;
			}
			flixel_FlxG.sound.play(Paths.sound("missnote" + flixel_FlxG.random.int(1,3),null),flixel_FlxG.random.float(0.1,0.2));
			this.boyfriend.stunned = true;
			new flixel_util_FlxTimer().start(0.083333333333333329,function(tmr) {
				_gthis.boyfriend.stunned = false;
			});
			switch(direction) {
			case 0:
				this.boyfriend.playAnim("singLEFTmiss",true);
				break;
			case 1:
				this.boyfriend.playAnim("singDOWNmiss",true);
				break;
			case 2:
				this.boyfriend.playAnim("singUPmiss",true);
				break;
			case 3:
				this.boyfriend.playAnim("singRIGHTmiss",true);
				break;
			}
		}
	}
	,badNoteHit: function() {
		var leftP = PlayerSettings.player1.controls._note_leftP.check();
		var downP = PlayerSettings.player1.controls._note_downP.check();
		var upP = PlayerSettings.player1.controls._note_upP.check();
		var rightP = PlayerSettings.player1.controls._note_rightP.check();
		if(leftP) {
			this.noteMiss(0);
		}
		if(downP) {
			this.noteMiss(1);
		}
		if(upP) {
			this.noteMiss(2);
		}
		if(rightP) {
			this.noteMiss(3);
		}
	}
	,goodNoteHit: function(note) {
		if(!note.wasGoodHit) {
			if(!note.isSustainNote) {
				this.popUpScore(note.strumTime,note);
				this.combo += 1;
			}
			if(note.noteData >= 0) {
				this.health += 0.023;
			} else {
				this.health += 0.004;
			}
			switch(note.noteData) {
			case 0:
				this.boyfriend.playAnim("singLEFT",true);
				break;
			case 1:
				this.boyfriend.playAnim("singDOWN",true);
				break;
			case 2:
				this.boyfriend.playAnim("singUP",true);
				break;
			case 3:
				this.boyfriend.playAnim("singRIGHT",true);
				break;
			}
			this.playerStrums.forEach(function(spr) {
				if(Math.abs(note.noteData) == spr.ID) {
					spr.animation.play("confirm",true);
				}
			});
			note.wasGoodHit = true;
			this.vocals.set_volume(1);
			if(!note.isSustainNote) {
				note.kill();
				this.notes.remove(note,true);
				note.destroy();
			}
		}
	}
	,fastCarCanDrive: null
	,resetFastCar: function() {
		this.fastCar.set_x(-12600);
		this.fastCar.set_y(flixel_FlxG.random.int(140,250));
		this.fastCar.velocity.set_x(0);
		this.fastCarCanDrive = true;
	}
	,fastCarDrive: function() {
		var _gthis = this;
		flixel_FlxG.sound.play(Paths.sound("carPass" + flixel_FlxG.random.int(0,1),null),0.7);
		this.fastCar.velocity.set_x(flixel_FlxG.random.int(170,220) / flixel_FlxG.elapsed * 3);
		this.fastCarCanDrive = false;
		new flixel_util_FlxTimer().start(2,function(tmr) {
			_gthis.resetFastCar();
		});
	}
	,tankResetShit: null
	,tankMoving: null
	,tankAngle: null
	,tankSpeed: null
	,tankX: null
	,moveTank: function() {
		if(!this.inCutscene) {
			this.tankAngle += this.tankSpeed * flixel_FlxG.elapsed;
			this.tankGround.set_angle(this.tankAngle - 90 + 15);
			this.tankGround.set_x(this.tankX + 1500 * Math.cos(Math.PI / 180 * (this.tankAngle + 180)));
			this.tankGround.set_y(1300 + 1100 * Math.sin(Math.PI / 180 * (this.tankAngle + 180)));
		}
	}
	,trainMoving: null
	,trainFrameTiming: null
	,trainCars: null
	,trainFinishing: null
	,trainCooldown: null
	,trainStart: function() {
		this.trainMoving = true;
		this.trainSound.play(true);
	}
	,startedMoving: null
	,updateTrainPos: function() {
		if(this.trainSound._time >= 4700) {
			this.startedMoving = true;
			this.gf.playAnim("hairBlow");
		}
		if(this.startedMoving) {
			var _g = this.phillyTrain;
			_g.set_x(_g.x - 400);
			if(this.phillyTrain.x < -2000 && !this.trainFinishing) {
				this.phillyTrain.set_x(-1150);
				this.trainCars -= 1;
				if(this.trainCars <= 0) {
					this.trainFinishing = true;
				}
			}
			if(this.phillyTrain.x < -4000 && this.trainFinishing) {
				this.trainReset();
			}
		}
	}
	,trainReset: function() {
		this.gf.playAnim("hairFall");
		this.phillyTrain.set_x(flixel_FlxG.width + 200);
		this.trainMoving = false;
		this.trainCars = 8;
		this.trainFinishing = false;
		this.startedMoving = false;
	}
	,lightningStrikeShit: function() {
		flixel_FlxG.sound.play(Paths.sound("thunder_" + flixel_FlxG.random.int(1,2),null));
		this.halloweenBG.animation.play("lightning");
		this.lightningStrikeBeat = this.curBeat;
		this.lightningOffset = flixel_FlxG.random.int(8,24);
		this.boyfriend.playAnim("scared",true);
		this.gf.playAnim("scared",true);
	}
	,stepHit: function() {
		MusicBeatState.prototype.stepHit.call(this);
		if(Math.abs(flixel_FlxG.sound.music._time - (Conductor.songPosition - Conductor.offset)) > 20 || PlayState.SONG.needsVoices && Math.abs(this.vocals._time - (Conductor.songPosition - Conductor.offset)) > 20) {
			this.resyncVocals();
		}
		var tmp = this.dad.curCharacter == "spooky" && this.curStep % 4 == 2;
	}
	,lightningStrikeBeat: null
	,lightningOffset: null
	,beatHit: function() {
		var _gthis = this;
		MusicBeatState.prototype.beatHit.call(this);
		if(this.generatedMusic) {
			this.notes.members.sort(function(note1,note2) {
				return _gthis.sortNotes(1,note1,note2);
			});
		}
		if(PlayState.SONG.notes[Math.floor(this.curStep / 16)] != null) {
			if(PlayState.SONG.notes[Math.floor(this.curStep / 16)].changeBPM) {
				Conductor.changeBPM(PlayState.SONG.notes[Math.floor(this.curStep / 16)].bpm);
			}
		}
		this.wiggleShit.update(Conductor.crochet);
		if(ui_PreferencesMenu.getPref("camera-zoom")) {
			if(this.curSong.toLowerCase() == "milf" && this.curBeat >= 168 && this.curBeat < 200 && this.camZooming && flixel_FlxG.camera.zoom < 1.35) {
				var _g = flixel_FlxG.camera;
				_g.set_zoom(_g.zoom + 0.015);
				var _g = this.camHUD;
				_g.set_zoom(_g.zoom + 0.03);
			}
			if(this.camZooming && flixel_FlxG.camera.zoom < 1.35 && this.curBeat % 4 == 0) {
				var _g = flixel_FlxG.camera;
				_g.set_zoom(_g.zoom + 0.015);
				var _g = this.camHUD;
				_g.set_zoom(_g.zoom + 0.03);
			}
		}
		this.iconP1.setGraphicSize(this.iconP1.get_width() + 30 | 0);
		this.iconP2.setGraphicSize(this.iconP2.get_width() + 30 | 0);
		this.iconP1.updateHitbox();
		this.iconP2.updateHitbox();
		if(this.curBeat % this.gfSpeed == 0) {
			this.gf.dance();
		}
		if(this.curBeat % 2 == 0) {
			if(!StringTools.startsWith(this.boyfriend.animation._curAnim.name,"sing")) {
				this.boyfriend.playAnim("idle");
			}
			if(!StringTools.startsWith(this.dad.animation._curAnim.name,"sing")) {
				this.dad.dance();
			}
		} else if(this.dad.curCharacter == "spooky") {
			if(!StringTools.startsWith(this.dad.animation._curAnim.name,"sing")) {
				this.dad.dance();
			}
		}
		if(this.curBeat % 8 == 7 && this.curSong == "Bopeebo") {
			this.boyfriend.playAnim("hey",true);
		}
		if(this.curBeat % 16 == 15 && PlayState.SONG.song == "Tutorial" && this.dad.curCharacter == "gf" && this.curBeat > 16 && this.curBeat < 48) {
			this.boyfriend.playAnim("hey",true);
			this.dad.playAnim("cheer",true);
		}
		this.foregroundSprites.forEach(function(spr) {
			spr.dance();
		});
		switch(PlayState.curStage) {
		case "limo":
			this.grpLimoDancers.forEach(function(dancer) {
				dancer.dance();
			});
			var Chance = 10;
			if(Chance == null) {
				Chance = 50;
			}
			if(flixel_FlxG.random.float(0,100) < Chance && this.fastCarCanDrive) {
				this.fastCarDrive();
			}
			break;
		case "mall":
			this.upperBoppers.animation.play("bop",true);
			this.bottomBoppers.animation.play("bop",true);
			this.santa.animation.play("idle",true);
			break;
		case "philly":
			if(!this.trainMoving) {
				this.trainCooldown += 1;
			}
			if(this.curBeat % 4 == 0) {
				this.lightFadeShader.reset();
				this.phillyCityLights.forEach(function(light) {
					light.set_visible(false);
				});
				this.curLight = flixel_FlxG.random.int(0,this.phillyCityLights.length - 1);
				this.phillyCityLights.members[this.curLight].set_visible(true);
			}
			var tmp;
			if(this.curBeat % 8 == 4) {
				var Chance = 30;
				if(Chance == null) {
					Chance = 50;
				}
				tmp = flixel_FlxG.random.float(0,100) < Chance;
			} else {
				tmp = false;
			}
			if(tmp && !this.trainMoving && this.trainCooldown > 8) {
				this.trainCooldown = flixel_FlxG.random.int(-4,0);
				this.trainStart();
			}
			break;
		case "school":
			this.bgGirls.dance();
			break;
		case "tank":
			this.tankWatchtower.dance();
			break;
		}
		var tmp;
		if(this.isHalloween) {
			var Chance = 10;
			if(Chance == null) {
				Chance = 50;
			}
			tmp = flixel_FlxG.random.float(0,100) < Chance;
		} else {
			tmp = false;
		}
		if(tmp && this.curBeat > this.lightningStrikeBeat + this.lightningOffset) {
			this.lightningStrikeShit();
		}
	}
	,curLight: null
	,__class__: PlayState
});
var flixel_util_FlxTypedSignal = {};
flixel_util_FlxTypedSignal.__properties__ = {get_dispatch:"get_dispatch"};
flixel_util_FlxTypedSignal.add = function(this1,listener) {
	this1.add(listener);
};
flixel_util_FlxTypedSignal.addOnce = function(this1,listener) {
	this1.addOnce(listener);
};
flixel_util_FlxTypedSignal.remove = function(this1,listener) {
	this1.remove(listener);
};
flixel_util_FlxTypedSignal.has = function(this1,listener) {
	return this1.has(listener);
};
flixel_util_FlxTypedSignal.removeAll = function(this1) {
	this1.removeAll();
};
flixel_util_FlxTypedSignal.get_dispatch = function(this1) {
	return this1.dispatch;
};
flixel_util_FlxTypedSignal.toSignal0 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal0();
};
flixel_util_FlxTypedSignal.toSignal1 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal1();
};
flixel_util_FlxTypedSignal.toSignal2 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal2();
};
flixel_util_FlxTypedSignal.toSignal3 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal3();
};
flixel_util_FlxTypedSignal.toSignal4 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal4();
};
var PlayerSettings = function(id) {
	this.id = id;
	this.controls = new Controls("player" + id,KeyboardScheme.None);
	var setDefault = true;
	var saveControls = flixel_FlxG.save.data.controls;
	if(saveControls != null) {
		var keys = null;
		if(id == 0 && saveControls.p1 != null && saveControls.p1.keys != null) {
			keys = saveControls.p1.keys;
		} else if(id == 1 && saveControls.p2 != null && saveControls.p2.keys != null) {
			keys = saveControls.p2.keys;
		}
		if(keys != null) {
			setDefault = false;
			haxe_Log.trace("loaded key data: " + JSON.stringify(keys),{ fileName : "source/PlayerSettings.hx", lineNumber : 58, className : "PlayerSettings", methodName : "new"});
			this.controls.fromSaveData(keys,Device.Keys);
		}
	}
	if(setDefault) {
		this.controls.setKeyboardScheme(KeyboardScheme.Solo);
	}
};
$hxClasses["PlayerSettings"] = PlayerSettings;
PlayerSettings.__name__ = "PlayerSettings";
PlayerSettings.player1 = null;
PlayerSettings.player2 = null;
PlayerSettings.init = function() {
	if(PlayerSettings.player1 == null) {
		PlayerSettings.player1 = new PlayerSettings(0);
		PlayerSettings.numPlayers++;
	}
	flixel_FlxG.gamepads.deviceConnected.add(PlayerSettings.onGamepadAdded);
	var _g = 0;
	var _g1 = flixel_FlxG.gamepads.getActiveGamepads();
	while(_g < _g1.length) {
		var pad = _g1[_g];
		++_g;
		if(pad != null) {
			PlayerSettings.onGamepadAdded(pad);
		}
	}
};
PlayerSettings.onGamepadAdded = function(pad) {
	PlayerSettings.player1.addGamepad(pad);
};
PlayerSettings.prototype = {
	id: null
	,controls: null
	,addGamepad: function(pad) {
		var setDefault = true;
		var saveControls = flixel_FlxG.save.data.controls;
		if(saveControls != null) {
			var pad1 = null;
			if(this.id == 0 && saveControls.p1 != null && saveControls.p1.pad != null) {
				pad1 = saveControls.p1.pad;
			} else if(this.id == 1 && saveControls.p2 != null && saveControls.p2.pad != null) {
				pad1 = saveControls.p2.pad;
			}
			if(pad1 != null) {
				setDefault = false;
				haxe_Log.trace("loaded pad data: " + JSON.stringify(pad1),{ fileName : "source/PlayerSettings.hx", lineNumber : 86, className : "PlayerSettings", methodName : "addGamepad"});
				this.controls.addGamepadWithSaveData(pad1.id,pad1);
			}
		}
		if(setDefault) {
			this.controls.addDefaultGamepad(pad.id);
		}
	}
	,saveControls: function() {
		if(flixel_FlxG.save.data.controls == null) {
			flixel_FlxG.save.data.controls = { };
		}
		var keydata = null;
		if(this.id == 0) {
			if(flixel_FlxG.save.data.controls.p1 == null) {
				flixel_FlxG.save.data.controls.p1 = { };
			}
			keydata = flixel_FlxG.save.data.controls.p1;
		} else {
			if(flixel_FlxG.save.data.controls.p2 == null) {
				flixel_FlxG.save.data.controls.p2 = { };
			}
			keydata = flixel_FlxG.save.data.controls.p2;
		}
		var savedata = this.controls.createSaveData(Device.Keys);
		if(savedata != null) {
			keydata.keys = savedata;
			haxe_Log.trace("saving key data: " + JSON.stringify(savedata),{ fileName : "source/PlayerSettings.hx", lineNumber : 123, className : "PlayerSettings", methodName : "saveControls"});
		}
		if(this.controls.gamepadsAdded.length > 0) {
			savedata = this.controls.createSaveData(Device.Gamepad(this.controls.gamepadsAdded[0]));
			if(savedata != null) {
				haxe_Log.trace("saving pad data: " + JSON.stringify(savedata),{ fileName : "source/PlayerSettings.hx", lineNumber : 130, className : "PlayerSettings", methodName : "saveControls"});
				keydata.pad = savedata;
			}
		}
		flixel_FlxG.save.flush();
	}
	,__class__: PlayerSettings
};
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice;
		var a1 = arguments;
		var a2 = a.call(a1);
		return f(a2);
	};
};
var Section = function(lengthInSteps) {
	if(lengthInSteps == null) {
		lengthInSteps = 16;
	}
	this.mustHitSection = true;
	this.typeOfSection = 0;
	this.lengthInSteps = 16;
	this.sectionNotes = [];
	this.lengthInSteps = lengthInSteps;
};
$hxClasses["Section"] = Section;
Section.__name__ = "Section";
Section.prototype = {
	sectionNotes: null
	,lengthInSteps: null
	,typeOfSection: null
	,mustHitSection: null
	,__class__: Section
};
var Song = function(song,notes,bpm) {
	this.player2 = "dad";
	this.player1 = "bf";
	this.speed = 1;
	this.needsVoices = true;
	this.song = song;
	this.notes = notes;
	this.bpm = bpm;
};
$hxClasses["Song"] = Song;
Song.__name__ = "Song";
Song.loadFromJson = function(jsonInput,folder) {
	var rawJson = StringTools.trim(lime_utils_Assets.getText(Paths.getPath("data/" + (folder.toLowerCase() + "/" + jsonInput.toLowerCase()) + ".json","TEXT",null)));
	while(!StringTools.endsWith(rawJson,"}")) rawJson = HxOverrides.substr(rawJson,0,rawJson.length - 1);
	return Song.parseJSONshit(rawJson);
};
Song.parseJSONshit = function(rawJson) {
	var swagShit = JSON.parse(rawJson).song;
	swagShit.validScore = true;
	return swagShit;
};
Song.prototype = {
	song: null
	,notes: null
	,bpm: null
	,needsVoices: null
	,speed: null
	,player1: null
	,player2: null
	,__class__: Song
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StoryMenuState = function(TransIn,TransOut) {
	this.intendedScore = 0;
	this.lerpScore = 0;
	this.stopspamming = false;
	this.selectedWeek = false;
	this.movedBack = false;
	this.curWeek = 0;
	this.weekNames = ";Daddy Dearest;Spooky Month;PICO;MOMMY MUST MURDER;RED SNOW;hating simulator ft. moawling;TANKMAN".split(";");
	this.weekCharacters = [["dad","bf","gf"],["dad","bf","gf"],["spooky","bf","gf"],["pico","bf","gf"],["mom","bf","gf"],["parents-christmas","bf","gf"],["senpai","bf","gf"],["tankman","bf","gf"]];
	this.curDifficulty = 1;
	this.weekData = [["Tutorial"],["Bopeebo","Fresh","Dadbattle"],["Spookeez","South","Monster"],["Pico","Philly","Blammed"],["Satin-Panties","High","Milf"],["Cocoa","Eggnog","Winter-Horrorland"],["Senpai","Roses","Thorns"],["Ugh","Guns","Stress"]];
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["StoryMenuState"] = StoryMenuState;
StoryMenuState.__name__ = "StoryMenuState";
StoryMenuState.__super__ = MusicBeatState;
StoryMenuState.prototype = $extend(MusicBeatState.prototype,{
	scoreText: null
	,weekData: null
	,curDifficulty: null
	,weekCharacters: null
	,weekNames: null
	,txtWeekTitle: null
	,curWeek: null
	,txtTracklist: null
	,grpWeekText: null
	,grpWeekCharacters: null
	,grpLocks: null
	,difficultySelectors: null
	,sprDifficulty: null
	,leftArrow: null
	,rightArrow: null
	,create: function() {
		this.transIn = flixel_addons_transition_FlxTransitionableState.defaultTransIn;
		this.transOut = flixel_addons_transition_FlxTransitionableState.defaultTransOut;
		if(flixel_FlxG.sound.music != null) {
			if(flixel_FlxG.sound.music._channel == null) {
				flixel_FlxG.sound.playMusic(Paths.getPath("music/" + "freakyMenu" + "." + "mp3","MUSIC",null));
			}
		}
		this.persistentUpdate = this.persistentDraw = true;
		this.scoreText = new flixel_text_FlxText(10,10,0,"SCORE: 49324858",36);
		this.scoreText.setFormat("VCR OSD Mono",32);
		this.txtWeekTitle = new flixel_text_FlxText(flixel_FlxG.width * 0.7,10,0,"",32);
		this.txtWeekTitle.setFormat("VCR OSD Mono",32,-1,"right");
		this.txtWeekTitle.set_alpha(0.7);
		var rankText = new flixel_text_FlxText(0,10);
		rankText.set_text("RANK: GREAT");
		rankText.setFormat("assets/fonts/" + "vcr.ttf",32);
		rankText.set_size(this.scoreText._defaultFormat.size | 0);
		rankText.screenCenter(flixel_util_FlxAxes.X);
		var library = null;
		var ui_tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "campaign_menu_UI_assets" + ".png","IMAGE",library),Paths.getPath("images/" + "campaign_menu_UI_assets" + ".xml","TEXT",library));
		var yellowBG = new flixel_FlxSprite(0,56).makeGraphic(flixel_FlxG.width,400,-405679);
		this.grpWeekText = new flixel_group_FlxTypedGroup();
		this.add(this.grpWeekText);
		var blackBarThingie = new flixel_FlxSprite().makeGraphic(flixel_FlxG.width,56,-16777216);
		this.add(blackBarThingie);
		this.grpWeekCharacters = new flixel_group_FlxTypedGroup();
		this.grpLocks = new flixel_group_FlxTypedGroup();
		this.add(this.grpLocks);
		haxe_Log.trace("Line 70",{ fileName : "source/StoryMenuState.hx", lineNumber : 108, className : "StoryMenuState", methodName : "create"});
		var _g = 0;
		var _g1 = this.weekData.length;
		while(_g < _g1) {
			var i = _g++;
			var weekThing = new MenuItem(0,yellowBG.y + yellowBG.get_height() + 10,i);
			var _g2 = weekThing;
			_g2.set_y(_g2.y + (weekThing.get_height() + 20) * i);
			weekThing.targetY = i;
			this.grpWeekText.add(weekThing);
			weekThing.screenCenter(flixel_util_FlxAxes.X);
			weekThing.set_antialiasing(true);
			if(!StoryMenuState.weekUnlocked[i]) {
				var lock = new flixel_FlxSprite(weekThing.get_width() + 10 + weekThing.x);
				lock.set_frames(ui_tex);
				lock.animation.addByPrefix("lock","lock");
				lock.animation.play("lock");
				lock.ID = i;
				lock.set_antialiasing(true);
				this.grpLocks.add(lock);
			}
		}
		haxe_Log.trace("Line 96",{ fileName : "source/StoryMenuState.hx", lineNumber : 139, className : "StoryMenuState", methodName : "create"});
		var _g = 0;
		while(_g < 3) {
			var char = _g++;
			var weekCharacterThing = new MenuCharacter(flixel_FlxG.width * 0.25 * (1 + char) - 150,this.weekCharacters[this.curWeek][char]);
			var _g1 = weekCharacterThing;
			_g1.set_y(_g1.y + 70);
			weekCharacterThing.set_antialiasing(true);
			switch(weekCharacterThing.character) {
			case "bf":
				weekCharacterThing.setGraphicSize(weekCharacterThing.get_width() * 0.9 | 0);
				weekCharacterThing.updateHitbox();
				var _g2 = weekCharacterThing;
				_g2.set_x(_g2.x - 80);
				break;
			case "dad":
				weekCharacterThing.setGraphicSize(weekCharacterThing.get_width() * 0.5 | 0);
				weekCharacterThing.updateHitbox();
				break;
			case "gf":
				weekCharacterThing.setGraphicSize(weekCharacterThing.get_width() * 0.5 | 0);
				weekCharacterThing.updateHitbox();
				break;
			case "parents-christmas":
				weekCharacterThing.setGraphicSize(weekCharacterThing.get_width() * 0.9 | 0);
				weekCharacterThing.updateHitbox();
				break;
			case "pico":
				weekCharacterThing.set_flipX(true);
				break;
			}
			this.grpWeekCharacters.add(weekCharacterThing);
		}
		this.difficultySelectors = new flixel_group_FlxTypedGroup();
		this.add(this.difficultySelectors);
		haxe_Log.trace("Line 124",{ fileName : "source/StoryMenuState.hx", lineNumber : 171, className : "StoryMenuState", methodName : "create"});
		this.leftArrow = new flixel_FlxSprite(this.grpWeekText.members[0].x + this.grpWeekText.members[0].get_width() + 10,this.grpWeekText.members[0].y + 10);
		this.leftArrow.set_frames(ui_tex);
		this.leftArrow.animation.addByPrefix("idle","arrow left");
		this.leftArrow.animation.addByPrefix("press","arrow push left");
		this.leftArrow.animation.play("idle");
		this.difficultySelectors.add(this.leftArrow);
		this.sprDifficulty = new flixel_FlxSprite(this.leftArrow.x + 130,this.leftArrow.y);
		this.sprDifficulty.set_frames(ui_tex);
		this.sprDifficulty.animation.addByPrefix("easy","EASY");
		this.sprDifficulty.animation.addByPrefix("normal","NORMAL");
		this.sprDifficulty.animation.addByPrefix("hard","HARD");
		this.sprDifficulty.animation.play("easy");
		this.changeDifficulty();
		this.difficultySelectors.add(this.sprDifficulty);
		this.rightArrow = new flixel_FlxSprite(this.sprDifficulty.x + this.sprDifficulty.get_width() + 50,this.leftArrow.y);
		this.rightArrow.set_frames(ui_tex);
		this.rightArrow.animation.addByPrefix("idle","arrow right");
		this.rightArrow.animation.addByPrefix("press","arrow push right",24,false);
		this.rightArrow.animation.play("idle");
		this.difficultySelectors.add(this.rightArrow);
		haxe_Log.trace("Line 150",{ fileName : "source/StoryMenuState.hx", lineNumber : 197, className : "StoryMenuState", methodName : "create"});
		this.add(yellowBG);
		this.add(this.grpWeekCharacters);
		this.txtTracklist = new flixel_text_FlxText(flixel_FlxG.width * 0.05,yellowBG.x + yellowBG.get_height() + 100,0,"Tracks",32);
		this.txtTracklist.set_alignment("center");
		this.txtTracklist.set_font(rankText._font);
		this.txtTracklist.set_color(-1747081);
		this.add(this.txtTracklist);
		this.add(this.scoreText);
		this.add(this.txtWeekTitle);
		this.updateText();
		haxe_Log.trace("Line 165",{ fileName : "source/StoryMenuState.hx", lineNumber : 213, className : "StoryMenuState", methodName : "create"});
		MusicBeatState.prototype.create.call(this);
	}
	,update: function(elapsed) {
		var _gthis = this;
		this.lerpScore = CoolUtil.coolLerp(this.lerpScore,this.intendedScore,0.5);
		this.scoreText.set_text("WEEK SCORE:" + Math.round(this.lerpScore));
		this.txtWeekTitle.set_text(this.weekNames[this.curWeek].toUpperCase());
		this.txtWeekTitle.set_x(flixel_FlxG.width - (this.txtWeekTitle.get_width() + 10));
		this.difficultySelectors.set_visible(StoryMenuState.weekUnlocked[this.curWeek]);
		this.grpLocks.forEach(function(lock) {
			lock.set_y(_gthis.grpWeekText.members[lock.ID].y);
		});
		if(!this.movedBack) {
			if(!this.selectedWeek) {
				if(PlayerSettings.player1.controls._ui_upP.check()) {
					this.changeWeek(-1);
				}
				if(PlayerSettings.player1.controls._ui_downP.check()) {
					this.changeWeek(1);
				}
				if(PlayerSettings.player1.controls._ui_right.check()) {
					this.rightArrow.animation.play("press");
				} else {
					this.rightArrow.animation.play("idle");
				}
				if(PlayerSettings.player1.controls._ui_left.check()) {
					this.leftArrow.animation.play("press");
				} else {
					this.leftArrow.animation.play("idle");
				}
				if(PlayerSettings.player1.controls._ui_rightP.check()) {
					this.changeDifficulty(1);
				}
				if(PlayerSettings.player1.controls._ui_leftP.check()) {
					this.changeDifficulty(-1);
				}
			}
			if(PlayerSettings.player1.controls._accept.check()) {
				this.selectWeek();
			}
		}
		if(PlayerSettings.player1.controls._back.check() && !this.movedBack && !this.selectedWeek) {
			flixel_FlxG.sound.play(Paths.sound("cancelMenu"));
			this.movedBack = true;
			var nextState = new MainMenuState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
		MusicBeatState.prototype.update.call(this,elapsed);
	}
	,movedBack: null
	,selectedWeek: null
	,stopspamming: null
	,selectWeek: function() {
		if(StoryMenuState.weekUnlocked[this.curWeek]) {
			if(this.stopspamming == false) {
				flixel_FlxG.sound.play(Paths.sound("confirmMenu"));
				this.grpWeekText.members[this.curWeek].startFlashing();
				this.grpWeekCharacters.members[1].animation.play("bfConfirm");
				this.stopspamming = true;
			}
			PlayState.storyPlaylist = this.weekData[this.curWeek];
			PlayState.isStoryMode = true;
			this.selectedWeek = true;
			var diffic = "";
			switch(this.curDifficulty) {
			case 0:
				diffic = "-easy";
				break;
			case 2:
				diffic = "-hard";
				break;
			}
			PlayState.storyDifficulty = this.curDifficulty;
			PlayState.SONG = Song.loadFromJson(PlayState.storyPlaylist[0].toLowerCase() + diffic,PlayState.storyPlaylist[0].toLowerCase());
			PlayState.storyWeek = this.curWeek;
			PlayState.campaignScore = 0;
			new flixel_util_FlxTimer().start(1,function(tmr) {
				var target = new PlayState();
				var stopMusic = true;
				if(stopMusic == null) {
					stopMusic = false;
				}
				var nextState = LoadingState.getNextState(target,stopMusic);
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			});
		}
	}
	,changeDifficulty: function(change) {
		if(change == null) {
			change = 0;
		}
		this.curDifficulty += change;
		if(this.curDifficulty < 0) {
			this.curDifficulty = 2;
		}
		if(this.curDifficulty > 2) {
			this.curDifficulty = 0;
		}
		this.sprDifficulty.offset.set_x(0);
		switch(this.curDifficulty) {
		case 0:
			this.sprDifficulty.animation.play("easy");
			this.sprDifficulty.offset.set_x(20);
			break;
		case 1:
			this.sprDifficulty.animation.play("normal");
			this.sprDifficulty.offset.set_x(70);
			break;
		case 2:
			this.sprDifficulty.animation.play("hard");
			this.sprDifficulty.offset.set_x(20);
			break;
		}
		this.sprDifficulty.set_alpha(0);
		this.sprDifficulty.set_y(this.leftArrow.y - 15);
		this.intendedScore = Highscore.getWeekScore(this.curWeek,this.curDifficulty);
		flixel_tweens_FlxTween.tween(this.sprDifficulty,{ y : this.leftArrow.y + 15, alpha : 1},0.07);
	}
	,lerpScore: null
	,intendedScore: null
	,changeWeek: function(change) {
		if(change == null) {
			change = 0;
		}
		this.curWeek += change;
		if(this.curWeek >= this.weekData.length) {
			this.curWeek = 0;
		}
		if(this.curWeek < 0) {
			this.curWeek = this.weekData.length - 1;
		}
		var bullShit = 0;
		var _g = 0;
		var _g1 = this.grpWeekText.members;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.targetY = bullShit - this.curWeek;
			if(item.targetY == 0 && StoryMenuState.weekUnlocked[this.curWeek]) {
				item.set_alpha(1);
			} else {
				item.set_alpha(0.6);
			}
			++bullShit;
		}
		flixel_FlxG.sound.play(Paths.sound("scrollMenu"));
		this.updateText();
	}
	,updateText: function() {
		this.grpWeekCharacters.members[0].animation.play(this.weekCharacters[this.curWeek][0]);
		this.grpWeekCharacters.members[1].animation.play(this.weekCharacters[this.curWeek][1]);
		this.grpWeekCharacters.members[2].animation.play(this.weekCharacters[this.curWeek][2]);
		this.txtTracklist.set_text("Tracks\n");
		switch(this.grpWeekCharacters.members[0].animation._curAnim.name) {
		case "dad":
			this.grpWeekCharacters.members[0].offset.set(120,200);
			this.grpWeekCharacters.members[0].setGraphicSize(this.grpWeekCharacters.members[0].get_width() | 0);
			break;
		case "mom":
			this.grpWeekCharacters.members[0].offset.set(100,200);
			this.grpWeekCharacters.members[0].setGraphicSize(this.grpWeekCharacters.members[0].get_width() | 0);
			break;
		case "parents-christmas":
			this.grpWeekCharacters.members[0].offset.set(200,200);
			this.grpWeekCharacters.members[0].setGraphicSize(this.grpWeekCharacters.members[0].get_width() * 0.99 | 0);
			break;
		case "senpai":
			this.grpWeekCharacters.members[0].offset.set(130,0);
			this.grpWeekCharacters.members[0].setGraphicSize(this.grpWeekCharacters.members[0].get_width() * 1.4 | 0);
			break;
		case "tankman":
			this.grpWeekCharacters.members[0].offset.set(60,-20);
			this.grpWeekCharacters.members[0].setGraphicSize(this.grpWeekCharacters.members[0].get_width() | 0);
			break;
		default:
			this.grpWeekCharacters.members[0].offset.set(100,100);
			this.grpWeekCharacters.members[0].setGraphicSize(this.grpWeekCharacters.members[0].get_width() | 0);
		}
		var stringThing = this.weekData[this.curWeek];
		var _g = 0;
		while(_g < stringThing.length) {
			var i = stringThing[_g];
			++_g;
			var _g1 = this.txtTracklist;
			_g1.set_text(_g1.text + ("\n" + i));
		}
		this.txtTracklist.set_text(this.txtTracklist.text.toUpperCase());
		this.txtTracklist.screenCenter(flixel_util_FlxAxes.X);
		var _g = this.txtTracklist;
		_g.set_x(_g.x - flixel_FlxG.width * 0.35);
		this.intendedScore = Highscore.getWeekScore(this.curWeek,this.curDifficulty);
	}
	,__class__: StoryMenuState
});
var _$String_String_$Impl_$ = function() { };
$hxClasses["_String.String_Impl_"] = _$String_String_$Impl_$;
_$String_String_$Impl_$.__name__ = "_String.String_Impl_";
_$String_String_$Impl_$.fromCharCode = function(code) {
	return String.fromCodePoint(code);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var TankmenBG = function(x,y,uhh) {
	this.tankSpeed = 0.7;
	this.goingRight = false;
	this.strumTime = 0;
	flixel_FlxSprite.call(this,x,y);
	var library = null;
	this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "tankmanKilled1" + ".png","IMAGE",library),Paths.getPath("images/" + "tankmanKilled1" + ".xml","TEXT",library)));
	this.set_antialiasing(true);
	this.animation.addByPrefix("run","tankman running",24,true);
	this.animation.addByPrefix("shot","John Shot " + flixel_FlxG.random.int(1,2),24,false);
	this.animation.play("run");
	this.animation._curAnim.set_curFrame(flixel_FlxG.random.int(0,this.animation._curAnim.frames.length - 1));
	this.updateHitbox();
	this.setGraphicSize(this.get_width() * 0.8 | 0);
	this.updateHitbox();
};
$hxClasses["TankmenBG"] = TankmenBG;
TankmenBG.__name__ = "TankmenBG";
TankmenBG.__super__ = flixel_FlxSprite;
TankmenBG.prototype = $extend(flixel_FlxSprite.prototype,{
	strumTime: null
	,goingRight: null
	,tankSpeed: null
	,endingOffset: null
	,resetShit: function(x,y,goRight) {
		this.setPosition(x,y);
		this.goingRight = goRight;
		this.endingOffset = flixel_FlxG.random.float(50,200);
		this.tankSpeed = flixel_FlxG.random.float(0.6,1);
		if(this.goingRight) {
			this.set_flipX(true);
		}
	}
	,update: function(elapsed) {
		flixel_FlxSprite.prototype.update.call(this,elapsed);
		if(this.x >= flixel_FlxG.width * 1.2 || this.x <= flixel_FlxG.width * -0.5) {
			this.set_visible(false);
		} else {
			this.set_visible(true);
		}
		if(this.animation._curAnim.name == "run") {
			var wackyShit = flixel_FlxG.width * 0.74 + this.endingOffset;
			if(this.goingRight) {
				wackyShit = flixel_FlxG.width * 0.02 - this.endingOffset;
				this.set_x(wackyShit + (Conductor.songPosition - this.strumTime) * this.tankSpeed);
			} else {
				this.set_x(wackyShit - (Conductor.songPosition - this.strumTime) * this.tankSpeed);
			}
		}
		if(Conductor.songPosition > this.strumTime) {
			this.animation.play("shot");
			if(this.goingRight) {
				this.offset.set_y(200);
				this.offset.set_x(300);
			}
		}
		if(this.animation._curAnim.name == "shot" && this.animation._curAnim.curFrame >= this.animation._curAnim.frames.length - 1) {
			this.kill();
		}
	}
	,__class__: TankmenBG
});
var TitleState = function(TransIn,TransOut) {
	this.skippedIntro = false;
	this.isRainbow = false;
	this.transitioning = false;
	this.danceLeft = false;
	this.lastBeat = 0;
	this.curWacky = [];
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["TitleState"] = TitleState;
TitleState.__name__ = "TitleState";
TitleState.__super__ = MusicBeatState;
TitleState.prototype = $extend(MusicBeatState.prototype,{
	blackScreen: null
	,credGroup: null
	,credTextShit: null
	,textGroup: null
	,ngSpr: null
	,curWacky: null
	,wackyImage: null
	,lastBeat: null
	,swagShader: null
	,alphaShader: null
	,video: null
	,netStream: null
	,overlay: null
	,create: function() {
		var _gthis = this;
		polymod_Polymod.init({ modRoot : "mods", dirs : ["introMod"], framework : polymod_Framework.OPENFL});
		flixel_FlxG.game.focusLostFramerate = 60;
		this.swagShader = new shaderslmfao_ColorSwap();
		this.alphaShader = new shaderslmfao_BuildingShaders();
		flixel_FlxG.sound.muteKeys = [48];
		this.curWacky = flixel_FlxG.random.getObject_Array_String(this.getIntroTextShit());
		MusicBeatState.prototype.create.call(this);
		flixel_FlxG.save.bind("funkin","ninjamuffin99");
		ui_PreferencesMenu.initPrefs();
		PlayerSettings.init();
		Highscore.load();
		if(flixel_FlxG.save.data.weekUnlocked != null) {
			if(StoryMenuState.weekUnlocked.length < 4) {
				StoryMenuState.weekUnlocked.splice(0,0,true);
			}
			if(!StoryMenuState.weekUnlocked[0]) {
				StoryMenuState.weekUnlocked[0] = true;
			}
		}
		if(flixel_FlxG.save.data.seenVideo != null) {
			VideoState.seenVideo = flixel_FlxG.save.data.seenVideo;
		}
		new flixel_util_FlxTimer().start(1,function(tmr) {
			_gthis.startIntro();
		});
	}
	,client_onMetaData: function(e) {
		this.video.attachNetStream(this.netStream);
		this.video.set_width(this.video.get_videoWidth());
		this.video.set_height(this.video.get_videoHeight());
	}
	,netStream_onAsyncError: function(e) {
		haxe_Log.trace("Error loading video",{ fileName : "source/TitleState.hx", lineNumber : 136, className : "TitleState", methodName : "netStream_onAsyncError"});
	}
	,netConnection_onNetStatus: function(e) {
		if(e.info.code == "NetStream.Play.Complete") {
			this.startIntro();
		}
		haxe_Log.trace(e.toString(),{ fileName : "source/TitleState.hx", lineNumber : 145, className : "TitleState", methodName : "netConnection_onNetStatus"});
	}
	,overlay_onMouseDown: function(e) {
		this.netStream.get_soundTransform().volume = 0.2;
		this.netStream.get_soundTransform().pan = -1;
		openfl_Lib.get_current().stage.removeChild(this.overlay);
	}
	,logoBl: null
	,gfDance: null
	,danceLeft: null
	,titleText: null
	,startIntro: function() {
		if(!TitleState.initialized) {
			var diamond = flixel_graphics_FlxGraphic.fromClass(flixel_addons_transition_GraphicTransTileDiamond);
			diamond.persist = true;
			diamond.set_destroyOnNoUse(false);
			flixel_addons_transition_FlxTransitionableState.defaultTransIn = new flixel_addons_transition_TransitionData("fade",-16777216,1,new flixel_math_FlxPoint(0,-1),{ asset : diamond, width : 32, height : 32},new flixel_math_FlxRect(-200,-200,flixel_FlxG.width * 1.4,flixel_FlxG.height * 1.4));
			flixel_addons_transition_FlxTransitionableState.defaultTransOut = new flixel_addons_transition_TransitionData("fade",-16777216,0.7,new flixel_math_FlxPoint(0,1),{ asset : diamond, width : 32, height : 32},new flixel_math_FlxRect(-200,-200,flixel_FlxG.width * 1.4,flixel_FlxG.height * 1.4));
			this.transIn = flixel_addons_transition_FlxTransitionableState.defaultTransIn;
			this.transOut = flixel_addons_transition_FlxTransitionableState.defaultTransOut;
			flixel_FlxG.sound.playMusic(Paths.getPath("music/" + "freakyMenu" + "." + "mp3","MUSIC",null),0);
			var _this = flixel_FlxG.sound.music;
			var Duration = 4;
			var From = 0;
			var To = 0.7;
			if(To == null) {
				To = 1;
			}
			if(From == null) {
				From = 0;
			}
			if(Duration == null) {
				Duration = 1;
			}
			if(_this._channel == null) {
				_this.play();
			}
			if(_this.fadeTween != null) {
				_this.fadeTween.cancel();
			}
			_this.fadeTween = flixel_tweens_FlxTween.num(From,To,Duration,{ onComplete : null},$bind(_this,_this.volumeTween));
		}
		Conductor.changeBPM(102);
		this.persistentUpdate = true;
		var bg = new flixel_FlxSprite().makeGraphic(flixel_FlxG.width,flixel_FlxG.height,-16777216);
		this.add(bg);
		this.logoBl = new flixel_FlxSprite(-150,-100);
		var library = null;
		this.logoBl.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "logoBumpin" + ".png","IMAGE",library),Paths.getPath("images/" + "logoBumpin" + ".xml","TEXT",library)));
		this.logoBl.set_antialiasing(true);
		this.logoBl.animation.addByPrefix("bump","logo bumpin",24);
		this.logoBl.animation.play("bump");
		this.logoBl.updateHitbox();
		this.logoBl.shader = this.swagShader.shader;
		this.gfDance = new flixel_FlxSprite(flixel_FlxG.width * 0.4,flixel_FlxG.height * 0.07);
		var library = null;
		this.gfDance.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "gfDanceTitle" + ".png","IMAGE",library),Paths.getPath("images/" + "gfDanceTitle" + ".xml","TEXT",library)));
		this.gfDance.animation.addByIndices("danceLeft","gfDance",[30,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"",24,false);
		this.gfDance.animation.addByIndices("danceRight","gfDance",[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"",24,false);
		this.gfDance.set_antialiasing(true);
		this.add(this.gfDance);
		this.gfDance.shader = this.swagShader.shader;
		this.add(this.logoBl);
		this.titleText = new flixel_FlxSprite(100,flixel_FlxG.height * 0.8);
		var library = null;
		this.titleText.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "titleEnter" + ".png","IMAGE",library),Paths.getPath("images/" + "titleEnter" + ".xml","TEXT",library)));
		this.titleText.animation.addByPrefix("idle","Press Enter to Begin",24);
		this.titleText.animation.addByPrefix("press","ENTER PRESSED",24);
		this.titleText.set_antialiasing(true);
		this.titleText.animation.play("idle");
		this.titleText.updateHitbox();
		this.add(this.titleText);
		var logo = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + "logo" + ".png","IMAGE",null));
		logo.screenCenter();
		logo.set_antialiasing(true);
		this.credGroup = new flixel_group_FlxTypedGroup();
		this.add(this.credGroup);
		this.textGroup = new flixel_group_FlxTypedGroup();
		this.blackScreen = new flixel_FlxSprite().makeGraphic(flixel_FlxG.width,flixel_FlxG.height,-16777216);
		this.credGroup.add(this.blackScreen);
		this.credTextShit = new Alphabet(0,0,"ninjamuffin99\nPhantomArcade\nkawaisprite\nevilsk8er",true);
		this.credTextShit.screenCenter();
		this.credTextShit.set_visible(false);
		this.ngSpr = new flixel_FlxSprite(0,flixel_FlxG.height * 0.52).loadGraphic(Paths.getPath("images/" + "newgrounds_logo" + ".png","IMAGE",null));
		this.add(this.ngSpr);
		this.ngSpr.set_visible(false);
		this.ngSpr.setGraphicSize(this.ngSpr.get_width() * 0.8 | 0);
		this.ngSpr.updateHitbox();
		this.ngSpr.screenCenter(flixel_util_FlxAxes.X);
		this.ngSpr.set_antialiasing(true);
		flixel_tweens_FlxTween.tween(this.credTextShit,{ y : this.credTextShit.y + 20},2.9,{ ease : flixel_tweens_FlxEase.quadInOut, type : 4});
		flixel_FlxG.mouse.set_visible(false);
		if(TitleState.initialized) {
			this.skipIntro();
		} else {
			TitleState.initialized = true;
		}
		if(flixel_FlxG.sound.music != null) {
			flixel_FlxG.sound.music.onComplete = function() {
				var nextState = new VideoState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			};
		}
	}
	,getIntroTextShit: function() {
		var fullText = openfl_utils_Assets.getText(Paths.getPath("data/" + "introText" + ".txt","TEXT",null));
		var firstArray = fullText.split("\n");
		var swagGoodArray = [];
		var _g = 0;
		while(_g < firstArray.length) {
			var i = firstArray[_g];
			++_g;
			swagGoodArray.push(i.split("--"));
		}
		return swagGoodArray;
	}
	,transitioning: null
	,isRainbow: null
	,update: function(elapsed) {
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(56,_this.status)) {
			var nextState = new CutsceneAnimTestState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
		if(flixel_FlxG.sound.music != null) {
			Conductor.songPosition = flixel_FlxG.sound.music._time;
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(70,_this.status)) {
			flixel_FlxG.set_fullscreen(!flixel_FlxG.get_fullscreen());
		}
		var _this = flixel_FlxG.keys.justPressed;
		var pressedEnter = _this.keyManager.checkStatus(13,_this.status);
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(53,_this.status)) {
			var nextState = new CutsceneAnimTestState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
		var gamepad = flixel_FlxG.gamepads.lastActive;
		if(gamepad != null) {
			var _this = gamepad.justPressed;
			var id = 7;
			var _this1 = _this.gamepad;
			var Status = _this.status;
			var tmp;
			switch(id) {
			case -2:
				tmp = _this1.anyButton(Status);
				break;
			case -1:
				tmp = !_this1.anyButton(Status);
				break;
			default:
				var RawID = _this1.mapping.getRawID(id);
				var button = _this1.buttons[RawID];
				tmp = button != null && button.hasState(Status);
			}
			if(tmp) {
				pressedEnter = true;
			}
		}
		if(pressedEnter && !this.transitioning && this.skippedIntro) {
			if(flixel_FlxG.sound.music != null) {
				flixel_FlxG.sound.music.onComplete = null;
			}
			var tmp = new Date().getDay() == 5;
			this.titleText.animation.play("press");
			flixel_FlxG.camera.flash(-1,1);
			flixel_FlxG.sound.play(Paths.sound("confirmMenu"),0.7);
			this.transitioning = true;
			if(!OutdatedSubState.leftState) {
				var nextState = new MainMenuState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			}
		}
		if(pressedEnter && !this.skippedIntro && TitleState.initialized) {
			this.skipIntro();
		}
		if(PlayerSettings.player1.controls._ui_left.check()) {
			this.swagShader.update(elapsed * 0.1);
		}
		if(PlayerSettings.player1.controls._ui_right.check()) {
			this.swagShader.update(-elapsed * 0.1);
		}
		MusicBeatState.prototype.update.call(this,elapsed);
	}
	,createCoolText: function(textArray) {
		var _g = 0;
		var _g1 = textArray.length;
		while(_g < _g1) {
			var i = _g++;
			var money = new Alphabet(0,0,textArray[i],true,false);
			money.screenCenter(flixel_util_FlxAxes.X);
			var _g2 = money;
			_g2.set_y(_g2.y + (i * 60 + 200));
			this.credGroup.add(money);
			this.textGroup.add(money);
		}
	}
	,addMoreText: function(text) {
		var coolText = new Alphabet(0,0,text,true,false);
		coolText.screenCenter(flixel_util_FlxAxes.X);
		var _g = coolText;
		_g.set_y(_g.y + (this.textGroup.length * 60 + 200));
		this.credGroup.add(coolText);
		this.textGroup.add(coolText);
	}
	,deleteCoolText: function() {
		while(this.textGroup.members.length > 0) {
			this.credGroup.remove(this.textGroup.members[0],true);
			this.textGroup.remove(this.textGroup.members[0],true);
		}
	}
	,beatHit: function() {
		MusicBeatState.prototype.beatHit.call(this);
		this.logoBl.animation.play("bump");
		this.danceLeft = !this.danceLeft;
		if(this.danceLeft) {
			this.gfDance.animation.play("danceRight");
		} else {
			this.gfDance.animation.play("danceLeft");
		}
		if(this.curBeat > this.lastBeat) {
			var _g = this.lastBeat;
			var _g1 = this.curBeat;
			while(_g < _g1) {
				var i = _g++;
				switch(i + 1) {
				case 1:
					this.createCoolText(["ninjamuffin99","phantomArcade","kawaisprite","evilsk8er"]);
					break;
				case 3:
					this.addMoreText("present");
					break;
				case 4:
					this.deleteCoolText();
					break;
				case 5:
					this.createCoolText(["In association","with"]);
					break;
				case 7:
					this.addMoreText("newgrounds");
					this.ngSpr.set_visible(true);
					break;
				case 8:
					this.deleteCoolText();
					this.ngSpr.set_visible(false);
					break;
				case 9:
					this.createCoolText([this.curWacky[0]]);
					break;
				case 11:
					this.addMoreText(this.curWacky[1]);
					break;
				case 12:
					this.deleteCoolText();
					break;
				case 13:
					this.addMoreText("Friday");
					break;
				case 14:
					this.addMoreText("Night");
					break;
				case 15:
					this.addMoreText("Funkin");
					break;
				case 16:
					this.skipIntro();
					break;
				}
			}
		}
		this.lastBeat = this.curBeat;
	}
	,skippedIntro: null
	,skipIntro: function() {
		if(!this.skippedIntro) {
			this.remove(this.ngSpr);
			flixel_FlxG.camera.flash(-1,4);
			this.remove(this.credGroup);
			this.skippedIntro = true;
		}
	}
	,__class__: TitleState
});
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return $hxEnums[o.__enum__];
};
Type.resolveEnum = function(name) {
	return $hxEnums[name];
};
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var ctorName = enm.__constructs__[a._hx_index];
		var params = enm[ctorName].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var UInt = {};
UInt.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
UInt.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var UnicodeString = {};
UnicodeString.__properties__ = {get_length:"get_length"};
UnicodeString.charCodeAt = function(this1,index) {
	if(index < 0) {
		return null;
	}
	var unicodeOffset = 0;
	var nativeOffset = 0;
	while(nativeOffset < this1.length) {
		var index1 = nativeOffset++;
		var c = this1.charCodeAt(index1);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | this1.charCodeAt(index1 + 1) & 1023;
		}
		var c1 = c;
		if(unicodeOffset == index) {
			return c1;
		}
		if(c1 >= 65536) {
			++nativeOffset;
		}
		++unicodeOffset;
	}
	return null;
};
UnicodeString.substr = function(this1,pos,len) {
	if(pos < 0) {
		pos = UnicodeString.get_length(this1) + pos;
		if(pos < 0) {
			pos = 0;
		}
	}
	if(len != null) {
		if(len < 0) {
			len = UnicodeString.get_length(this1) + len;
		}
		if(len <= 0) {
			return "";
		}
	}
	var unicodeOffset = 0;
	var nativeOffset = 0;
	var fromOffset = -1;
	var subLength = 0;
	while(nativeOffset < this1.length) {
		var c = this1.charCodeAt(nativeOffset);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | this1.charCodeAt(nativeOffset + 1) & 1023;
		}
		var c1 = c;
		if(unicodeOffset >= pos) {
			if(fromOffset < 0) {
				if(len == null) {
					return HxOverrides.substr(this1,nativeOffset,null);
				}
				fromOffset = nativeOffset;
			}
			++subLength;
			if(subLength >= len) {
				var lastOffset = c1 < 65536 ? nativeOffset : nativeOffset + 1;
				return HxOverrides.substr(this1,fromOffset,lastOffset - fromOffset + 1);
			}
		}
		nativeOffset += c1 >= 65536 ? 2 : 1;
		++unicodeOffset;
	}
	if(fromOffset < 0) {
		return "";
	} else {
		return HxOverrides.substr(this1,fromOffset,null);
	}
};
UnicodeString.get_length = function(this1) {
	var l = 0;
	var _g_offset = 0;
	var _g_s = this1;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var c2 = c1;
		++l;
	}
	return l;
};
var VideoState = function(TransIn,TransOut) {
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["VideoState"] = VideoState;
VideoState.__name__ = "VideoState";
VideoState.__super__ = MusicBeatState;
VideoState.prototype = $extend(MusicBeatState.prototype,{
	video: null
	,netStream: null
	,overlay: null
	,create: function() {
		MusicBeatState.prototype.create.call(this);
		VideoState.seenVideo = true;
		flixel_FlxG.save.data.seenVideo = true;
		flixel_FlxG.save.flush();
		if(flixel_FlxG.sound.music != null) {
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
		}
		this.video = new openfl_media_Video();
		flixel_FlxG.addChildBelowMouse(this.video);
		var netConnection = new openfl_net_NetConnection();
		netConnection.connect(null);
		this.netStream = new openfl_net_NetStream(netConnection);
		this.netStream.client = { onMetaData : $bind(this,this.client_onMetaData)};
		this.netStream.addEventListener("asyncError",$bind(this,this.netStream_onAsyncError));
		netConnection.addEventListener("netStatus",$bind(this,this.netConnection_onNetStatus));
		this.netStream.play(Paths.getPath("music/" + "kickstarterTrailer" + ".mp4","TEXT",null));
		this.overlay = new openfl_display_Sprite();
		this.overlay.get_graphics().beginFill(0,0.5);
		this.overlay.get_graphics().drawRect(0,0,1280,720);
		this.overlay.addEventListener("mouseDown",$bind(this,this.overlay_onMouseDown));
		this.overlay.set_buttonMode(true);
	}
	,update: function(elapsed) {
		if(PlayerSettings.player1.controls._accept.check()) {
			this.finishVid();
		}
		MusicBeatState.prototype.update.call(this,elapsed);
	}
	,finishVid: function() {
		this.netStream.dispose();
		if(flixel_FlxG.game.contains(this.video)) {
			flixel_FlxG.game.removeChild(this.video);
		}
		TitleState.initialized = false;
		var nextState = new TitleState();
		if(flixel_FlxG.game._state.switchTo(nextState)) {
			flixel_FlxG.game._requestedState = nextState;
		}
	}
	,client_onMetaData: function(e) {
		this.video.attachNetStream(this.netStream);
		this.video.set_width(this.video.get_videoWidth());
		this.video.set_height(this.video.get_videoHeight());
	}
	,netStream_onAsyncError: function(e) {
		haxe_Log.trace("Error loading video",{ fileName : "source/VideoState.hx", lineNumber : 85, className : "VideoState", methodName : "netStream_onAsyncError"});
	}
	,netConnection_onNetStatus: function(e) {
		if(e.info.code == "NetStream.Play.Complete") {
			this.finishVid();
		}
		haxe_Log.trace(e.toString(),{ fileName : "source/VideoState.hx", lineNumber : 94, className : "VideoState", methodName : "netConnection_onNetStatus"});
	}
	,overlay_onMouseDown: function(e) {
		this.netStream.get_soundTransform().volume = 0.2;
		this.netStream.get_soundTransform().pan = -1;
		openfl_Lib.get_current().stage.removeChild(this.overlay);
	}
	,__class__: VideoState
});
var WiggleEffect = function() {
	this.shader = new WiggleShader();
	this.shader.uTime.value = [0];
};
$hxClasses["WiggleEffect"] = WiggleEffect;
WiggleEffect.__name__ = "WiggleEffect";
WiggleEffect.prototype = {
	shader: null
	,update: function(elapsed) {
		this.shader.uTime.value[0] += elapsed;
	}
	,__class__: WiggleEffect
};
var openfl_display_Shader = function(code) {
	this.byteCode = code;
	this.precisionHint = 1;
	this.__glSourceDirty = true;
	this.__numPasses = 1;
	this.__data = openfl_display_ShaderData._new(code);
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = "openfl.display.Shader";
openfl_display_Shader.prototype = {
	byteCode: null
	,glProgram: null
	,precisionHint: null
	,program: null
	,__alpha: null
	,__bitmap: null
	,__colorMultiplier: null
	,__colorOffset: null
	,__context: null
	,__data: null
	,__glFragmentSource: null
	,__glSourceDirty: null
	,__glVertexSource: null
	,__hasColorTransform: null
	,__inputBitmapData: null
	,__isGenerated: null
	,__matrix: null
	,__numPasses: null
	,__paramBool: null
	,__paramFloat: null
	,__paramInt: null
	,__position: null
	,__textureCoord: null
	,__texture: null
	,__textureSize: null
	,__clearUseArray: function() {
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
		var _g = 0;
		var _g1 = this.__paramInt;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
	}
	,__createGLShader: function(source,type) {
		var gl = this.__context.gl;
		var shader = gl.createShader(type);
		gl.shaderSource(shader,source);
		gl.compileShader(shader);
		var shaderInfoLog = gl.getShaderInfoLog(shader);
		var compileStatus = gl.getShaderParameter(shader,gl.COMPILE_STATUS);
		if(shaderInfoLog != null || compileStatus == 0) {
			var message = compileStatus == 0 ? "Error" : "Info";
			message += type == gl.VERTEX_SHADER ? " compiling vertex shader" : " compiling fragment shader";
			message += "\n" + shaderInfoLog;
			message += "\n" + source;
			if(compileStatus == 0) {
				lime_utils_Log.error(message,{ fileName : "openfl/display/Shader.hx", lineNumber : 334, className : "openfl.display.Shader", methodName : "__createGLShader"});
			} else if(shaderInfoLog != null) {
				lime_utils_Log.debug(message,{ fileName : "openfl/display/Shader.hx", lineNumber : 335, className : "openfl.display.Shader", methodName : "__createGLShader"});
			}
		}
		return shader;
	}
	,__createGLProgram: function(vertexSource,fragmentSource) {
		var gl = this.__context.gl;
		var vertexShader = this.__createGLShader(vertexSource,gl.VERTEX_SHADER);
		var fragmentShader = this.__createGLShader(fragmentSource,gl.FRAGMENT_SHADER);
		var program = gl.createProgram();
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var param = _g1[_g];
			++_g;
			if(param.name.indexOf("Position") > -1 && StringTools.startsWith(param.name,"openfl_")) {
				gl.bindAttribLocation(program,0,param.name);
				break;
			}
		}
		gl.attachShader(program,vertexShader);
		gl.attachShader(program,fragmentShader);
		gl.linkProgram(program);
		if(gl.getProgramParameter(program,gl.LINK_STATUS) == 0) {
			var message = "Unable to initialize the shader program";
			message += "\n" + gl.getProgramInfoLog(program);
			lime_utils_Log.error(message,{ fileName : "openfl/display/Shader.hx", lineNumber : 368, className : "openfl.display.Shader", methodName : "__createGLProgram"});
		}
		return program;
	}
	,__disable: function() {
		if(this.program != null) {
			this.__disableGL();
		}
	}
	,__disableGL: function() {
		var gl = this.__context.gl;
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.__disableGL(this.__context,textureCount);
			++textureCount;
			if(textureCount == gl.MAX_TEXTURE_IMAGE_UNITS) {
				break;
			}
		}
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__disableGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__disableGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramInt;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__disableGL(this.__context);
		}
		this.__context.__bindGLArrayBuffer(null);
		if(this.__context.__context.type == "opengl") {
			gl.disable(gl.TEXTURE_2D);
		}
	}
	,__enable: function() {
		this.__init();
		if(this.program != null) {
			this.__enableGL();
		}
	}
	,__enableGL: function() {
		var textureCount = 0;
		var gl = this.__context.gl;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			gl.uniform1i(input.index,textureCount);
			++textureCount;
		}
		if(this.__context.__context.type == "opengl" && textureCount > 0) {
			gl.enable(gl.TEXTURE_2D);
		}
	}
	,__init: function() {
		if(this.__data == null) {
			this.__data = openfl_display_ShaderData._new(null);
		}
		if(this.__glFragmentSource != null && this.__glVertexSource != null && (this.program == null || this.__glSourceDirty)) {
			this.__initGL();
		}
	}
	,__initGL: function() {
		if(this.__glSourceDirty || this.__paramBool == null) {
			this.__glSourceDirty = false;
			this.program = null;
			this.__inputBitmapData = [];
			this.__paramBool = [];
			this.__paramFloat = [];
			this.__paramInt = [];
			this.__processGLData(this.get_glVertexSource(),"attribute");
			this.__processGLData(this.get_glVertexSource(),"uniform");
			this.__processGLData(this.get_glFragmentSource(),"uniform");
		}
		if(this.__context != null && this.program == null) {
			var gl = this.__context.gl;
			var prefix = this.precisionHint == 1 ? "precision mediump float;\n" : "precision lowp float;\n";
			var vertex = prefix + this.get_glVertexSource();
			var fragment = prefix + this.get_glFragmentSource();
			var id = vertex + fragment;
			if(Object.prototype.hasOwnProperty.call(this.__context.__programs.h,id)) {
				this.program = this.__context.__programs.h[id];
			} else {
				this.program = this.__context.createProgram(1);
				this.program.__glProgram = this.__createGLProgram(vertex,fragment);
				this.__context.__programs.h[id] = this.program;
			}
			if(this.program != null) {
				this.glProgram = this.program.__glProgram;
				var _g = 0;
				var _g1 = this.__inputBitmapData;
				while(_g < _g1.length) {
					var input = _g1[_g];
					++_g;
					if(input.__isUniform) {
						input.index = gl.getUniformLocation(this.glProgram,input.name);
					} else {
						input.index = gl.getAttribLocation(this.glProgram,input.name);
					}
				}
				var _g = 0;
				var _g1 = this.__paramBool;
				while(_g < _g1.length) {
					var parameter = _g1[_g];
					++_g;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g = 0;
				var _g1 = this.__paramFloat;
				while(_g < _g1.length) {
					var parameter = _g1[_g];
					++_g;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g = 0;
				var _g1 = this.__paramInt;
				while(_g < _g1.length) {
					var parameter = _g1[_g];
					++_g;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
			}
		}
	}
	,__processGLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") {
			regex = new EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		} else {
			regex = new EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		}
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if(StringTools.startsWith(name,"gl_")) {
				continue;
			}
			var isUniform = storageType == "uniform";
			if(StringTools.startsWith(type,"sampler")) {
				var input = new openfl_display_ShaderInput();
				input.name = name;
				input.__isUniform = isUniform;
				this.__inputBitmapData.push(input);
				switch(name) {
				case "bitmap":
					this.__bitmap = input;
					break;
				case "openfl_Texture":
					this.__texture = input;
					break;
				default:
				}
				this.__data[name] = input;
				if(this.__isGenerated) {
					this[name] = input;
				}
			} else if(!Object.prototype.hasOwnProperty.call(this.__data,name) || Reflect.field(this.__data,name) == null) {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = 0;
					break;
				case "bvec2":
					parameterType = 1;
					break;
				case "bvec3":
					parameterType = 2;
					break;
				case "bvec4":
					parameterType = 3;
					break;
				case "dvec2":case "vec2":
					parameterType = 5;
					break;
				case "dvec3":case "vec3":
					parameterType = 6;
					break;
				case "double":case "float":
					parameterType = 4;
					break;
				case "ivec3":case "uvec3":
					parameterType = 10;
					break;
				case "ivec4":case "uvec4":
					parameterType = 11;
					break;
				case "mat2":case "mat2x2":
					parameterType = 12;
					break;
				case "mat2x3":
					parameterType = 13;
					break;
				case "mat2x4":
					parameterType = 14;
					break;
				case "mat3x2":
					parameterType = 15;
					break;
				case "mat3":case "mat3x3":
					parameterType = 16;
					break;
				case "mat3x4":
					parameterType = 17;
					break;
				case "mat4":case "mat4x4":
					parameterType = 20;
					break;
				case "mat4x2":
					parameterType = 18;
					break;
				case "mat4x3":
					parameterType = 19;
					break;
				case "int":case "uint":
					parameterType = 8;
					break;
				case "ivec2":case "uvec2":
					parameterType = 9;
					break;
				case "dvec4":case "vec4":
					parameterType = 7;
					break;
				default:
					parameterType = null;
				}
				var length;
				switch(parameterType) {
				case 1:case 5:case 9:
					length = 2;
					break;
				case 3:case 7:case 11:case 12:
					length = 4;
					break;
				case 2:case 6:case 10:
					length = 3;
					break;
				case 16:
					length = 9;
					break;
				case 20:
					length = 16;
					break;
				default:
					length = 1;
				}
				var arrayLength;
				switch(parameterType) {
				case 12:
					arrayLength = 2;
					break;
				case 16:
					arrayLength = 3;
					break;
				case 20:
					arrayLength = 4;
					break;
				default:
					arrayLength = 1;
				}
				switch(parameterType) {
				case 0:case 1:case 2:case 3:
					var parameter = new openfl_display_ShaderParameter();
					parameter.set_name(name);
					parameter.type = parameterType;
					parameter.__arrayLength = arrayLength;
					parameter.__isBool = true;
					parameter.__isUniform = isUniform;
					parameter.__length = length;
					this.__paramBool.push(parameter);
					if(name == "openfl_HasColorTransform") {
						this.__hasColorTransform = parameter;
					}
					this.__data[name] = parameter;
					if(this.__isGenerated) {
						this[name] = parameter;
					}
					break;
				case 8:case 9:case 10:case 11:
					var parameter1 = new openfl_display_ShaderParameter();
					parameter1.set_name(name);
					parameter1.type = parameterType;
					parameter1.__arrayLength = arrayLength;
					parameter1.__isInt = true;
					parameter1.__isUniform = isUniform;
					parameter1.__length = length;
					this.__paramInt.push(parameter1);
					this.__data[name] = parameter1;
					if(this.__isGenerated) {
						this[name] = parameter1;
					}
					break;
				default:
					var parameter2 = new openfl_display_ShaderParameter();
					parameter2.set_name(name);
					parameter2.type = parameterType;
					parameter2.__arrayLength = arrayLength;
					if(arrayLength > 0) {
						var elements = arrayLength * arrayLength;
						var array = null;
						var vector = null;
						var view = null;
						var buffer = null;
						var len = null;
						var this1;
						if(elements != null) {
							this1 = new Float32Array(elements);
						} else if(array != null) {
							this1 = new Float32Array(array);
						} else if(vector != null) {
							this1 = new Float32Array(vector.__array);
						} else if(view != null) {
							this1 = new Float32Array(view);
						} else if(buffer != null) {
							if(len == null) {
								this1 = new Float32Array(buffer,0);
							} else {
								this1 = new Float32Array(buffer,0,len);
							}
						} else {
							this1 = null;
						}
						parameter2.__uniformMatrix = this1;
					}
					parameter2.__isFloat = true;
					parameter2.__isUniform = isUniform;
					parameter2.__length = length;
					this.__paramFloat.push(parameter2);
					if(StringTools.startsWith(name,"openfl_")) {
						switch(name) {
						case "openfl_Alpha":
							this.__alpha = parameter2;
							break;
						case "openfl_ColorMultiplier":
							this.__colorMultiplier = parameter2;
							break;
						case "openfl_ColorOffset":
							this.__colorOffset = parameter2;
							break;
						case "openfl_Matrix":
							this.__matrix = parameter2;
							break;
						case "openfl_Position":
							this.__position = parameter2;
							break;
						case "openfl_TextureCoord":
							this.__textureCoord = parameter2;
							break;
						case "openfl_TextureSize":
							this.__textureSize = parameter2;
							break;
						default:
						}
					}
					this.__data[name] = parameter2;
					if(this.__isGenerated) {
						this[name] = parameter2;
					}
				}
			}
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	}
	,__update: function() {
		if(this.program != null) {
			this.__updateGL();
		}
	}
	,__updateFromBuffer: function(shaderBuffer,bufferOffset) {
		if(this.program != null) {
			this.__updateGLFromBuffer(shaderBuffer,bufferOffset);
		}
	}
	,__updateGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.__updateGL(this.__context,textureCount);
			++textureCount;
		}
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__updateGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__updateGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramInt;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__updateGL(this.__context);
		}
	}
	,__updateGLFromBuffer: function(shaderBuffer,bufferOffset) {
		var textureCount = 0;
		var input;
		var inputData;
		var inputFilter;
		var inputMipFilter;
		var inputWrap;
		var _g = 0;
		var _g1 = shaderBuffer.inputCount;
		while(_g < _g1) {
			var i = _g++;
			input = shaderBuffer.inputRefs[i];
			inputData = shaderBuffer.inputs[i];
			inputFilter = shaderBuffer.inputFilter[i];
			inputMipFilter = shaderBuffer.inputMipFilter[i];
			inputWrap = shaderBuffer.inputWrap[i];
			if(inputData != null) {
				input.__updateGL(this.__context,textureCount,inputData,inputFilter,inputMipFilter,inputWrap);
				++textureCount;
			}
		}
		var gl = this.__context.gl;
		if(shaderBuffer.paramDataLength > 0) {
			if(shaderBuffer.paramDataBuffer == null) {
				shaderBuffer.paramDataBuffer = gl.createBuffer();
			}
			this.__context.__bindGLArrayBuffer(shaderBuffer.paramDataBuffer);
			lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,shaderBuffer.paramData,gl.DYNAMIC_DRAW);
		} else {
			this.__context.__bindGLArrayBuffer(null);
		}
		var boolIndex = 0;
		var floatIndex = 0;
		var intIndex = 0;
		var boolCount = shaderBuffer.paramBoolCount;
		var floatCount = shaderBuffer.paramFloatCount;
		var paramData = shaderBuffer.paramData;
		var boolRef;
		var floatRef;
		var intRef;
		var hasOverride;
		var overrideBoolValue = null;
		var overrideFloatValue = null;
		var overrideIntValue = null;
		var _g = 0;
		var _g1 = shaderBuffer.paramCount;
		while(_g < _g1) {
			var i = _g++;
			hasOverride = false;
			if(i < boolCount) {
				boolRef = shaderBuffer.paramRefs_Bool[boolIndex];
				var _g2 = 0;
				var _g3 = shaderBuffer.overrideBoolCount;
				while(_g2 < _g3) {
					var j = _g2++;
					if(boolRef.name == shaderBuffer.overrideBoolNames[j]) {
						overrideBoolValue = shaderBuffer.overrideBoolValues[j];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					boolRef.__updateGL(this.__context,overrideBoolValue);
				} else {
					boolRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i],shaderBuffer.paramLengths[i],bufferOffset);
				}
				++boolIndex;
			} else if(i < boolCount + floatCount) {
				floatRef = shaderBuffer.paramRefs_Float[floatIndex];
				var _g4 = 0;
				var _g5 = shaderBuffer.overrideFloatCount;
				while(_g4 < _g5) {
					var j1 = _g4++;
					if(floatRef.name == shaderBuffer.overrideFloatNames[j1]) {
						overrideFloatValue = shaderBuffer.overrideFloatValues[j1];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					floatRef.__updateGL(this.__context,overrideFloatValue);
				} else {
					floatRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i],shaderBuffer.paramLengths[i],bufferOffset);
				}
				++floatIndex;
			} else {
				intRef = shaderBuffer.paramRefs_Int[intIndex];
				var _g6 = 0;
				var _g7 = shaderBuffer.overrideIntCount;
				while(_g6 < _g7) {
					var j2 = _g6++;
					if(intRef.name == shaderBuffer.overrideIntNames[j2]) {
						overrideIntValue = shaderBuffer.overrideIntValues[j2];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					intRef.__updateGL(this.__context,overrideIntValue);
				} else {
					intRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i],shaderBuffer.paramLengths[i],bufferOffset);
				}
				++intIndex;
			}
		}
	}
	,get_data: function() {
		if(this.__glSourceDirty || this.__data == null) {
			this.__init();
		}
		return this.__data;
	}
	,set_data: function(value) {
		return this.__data = value;
	}
	,get_glFragmentSource: function() {
		return this.__glFragmentSource;
	}
	,set_glFragmentSource: function(value) {
		if(value != this.__glFragmentSource) {
			this.__glSourceDirty = true;
		}
		return this.__glFragmentSource = value;
	}
	,get_glVertexSource: function() {
		return this.__glVertexSource;
	}
	,set_glVertexSource: function(value) {
		if(value != this.__glVertexSource) {
			this.__glSourceDirty = true;
		}
		return this.__glVertexSource = value;
	}
	,__class__: openfl_display_Shader
	,__properties__: {set_glVertexSource:"set_glVertexSource",get_glVertexSource:"get_glVertexSource",set_glFragmentSource:"set_glFragmentSource",get_glFragmentSource:"get_glFragmentSource",set_data:"set_data",get_data:"get_data"}
};
var openfl_display_GraphicsShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tvoid main(void) {\n\n\t\t\tvec4 color = texture2D (bitmap, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}\n\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t}";
	}
	openfl_display_Shader.call(this,code);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.display.GraphicsShader"] = openfl_display_GraphicsShader;
openfl_display_GraphicsShader.__name__ = "openfl.display.GraphicsShader";
openfl_display_GraphicsShader.__super__ = openfl_display_Shader;
openfl_display_GraphicsShader.prototype = $extend(openfl_display_Shader.prototype,{
	openfl_Alpha: null
	,openfl_ColorMultiplier: null
	,openfl_ColorOffset: null
	,openfl_Position: null
	,openfl_TextureCoord: null
	,openfl_Matrix: null
	,openfl_HasColorTransform: null
	,openfl_TextureSize: null
	,bitmap: null
	,__class__: openfl_display_GraphicsShader
});
var flixel_graphics_tile_FlxGraphicsShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tuniform bool hasTransform;\n\t\tuniform bool hasColorTransform;\n\n\t\tvec4 flixel_texture2D(sampler2D bitmap, vec2 coord)\n\t\t{\n\t\t\tvec4 color = texture2D(bitmap, coord);\n\t\t\tif (!hasTransform)\n\t\t\t{\n\t\t\t\treturn color;\n\t\t\t}\n\n\t\t\tif (color.a == 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t}\n\n\t\t\tif (!hasColorTransform)\n\t\t\t{\n\t\t\t\treturn color * openfl_Alphav;\n\t\t\t}\n\n\t\t\tcolor = vec4(color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4(0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp(openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t}\n\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t}\n\t\n\t\t\n\t\tvoid main(void)\n\t\t{\n\t\t\tgl_FragColor = flixel_texture2D(bitmap, openfl_TextureCoordv);\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "\n\t\tattribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\t\n\t\tattribute float alpha;\n\t\tattribute vec4 colorMultiplier;\n\t\tattribute vec4 colorOffset;\n\t\tuniform bool hasColorTransform;\n\t\t\n\t\tvoid main(void)\n\t\t{\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t\t\n\t\t\topenfl_Alphav = openfl_Alpha * alpha;\n\t\t\t\n\t\t\tif (hasColorTransform)\n\t\t\t{\n\t\t\t\topenfl_ColorOffsetv = colorOffset / 255.0;\n\t\t\t\topenfl_ColorMultiplierv = colorMultiplier;\n\t\t\t}\n\t\t}";
	}
	openfl_display_GraphicsShader.call(this);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["flixel.graphics.tile.FlxGraphicsShader"] = flixel_graphics_tile_FlxGraphicsShader;
flixel_graphics_tile_FlxGraphicsShader.__name__ = "flixel.graphics.tile.FlxGraphicsShader";
flixel_graphics_tile_FlxGraphicsShader.__super__ = openfl_display_GraphicsShader;
flixel_graphics_tile_FlxGraphicsShader.prototype = $extend(openfl_display_GraphicsShader.prototype,{
	alpha: null
	,colorMultiplier: null
	,colorOffset: null
	,hasColorTransform: null
	,hasTransform: null
	,__class__: flixel_graphics_tile_FlxGraphicsShader
});
var WiggleShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tuniform bool hasTransform;\n\t\tuniform bool hasColorTransform;\n\n\t\tvec4 flixel_texture2D(sampler2D bitmap, vec2 coord)\n\t\t{\n\t\t\tvec4 color = texture2D(bitmap, coord);\n\t\t\tif (!hasTransform)\n\t\t\t{\n\t\t\t\treturn color;\n\t\t\t}\n\n\t\t\tif (color.a == 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t}\n\n\t\t\tif (!hasColorTransform)\n\t\t\t{\n\t\t\t\treturn color * openfl_Alphav;\n\t\t\t}\n\n\t\t\tcolor = vec4(color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4(0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp(openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t}\n\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t}\n\t\n\n\t\t//uniform float tx, ty; // x,y waves phase\n\t\tuniform float uTime;\n\t\t\n\t\tconst int EFFECT_TYPE_DREAMY = 0;\n\t\tconst int EFFECT_TYPE_WAVY = 1;\n\t\tconst int EFFECT_TYPE_HEAT_WAVE_HORIZONTAL = 2;\n\t\tconst int EFFECT_TYPE_HEAT_WAVE_VERTICAL = 3;\n\t\tconst int EFFECT_TYPE_FLAG = 4;\n\t\t\n\t\tuniform int effectType;\n\t\t\n\t\t/**\n\t\t * How fast the waves move over time\n\t\t */\n\t\tuniform float uSpeed;\n\t\t\n\t\t/**\n\t\t * Number of waves over time\n\t\t */\n\t\tuniform float uFrequency;\n\t\t\n\t\t/**\n\t\t * How much the pixels are going to stretch over the waves\n\t\t */\n\t\tuniform float uWaveAmplitude;\n\n\t\tvec2 sineWave(vec2 pt)\n\t\t{\n\t\t\tfloat x = 0.0;\n\t\t\tfloat y = 0.0;\n\t\t\t\n\t\t\tif (effectType == EFFECT_TYPE_DREAMY) \n\t\t\t{\n\t\t\t\tfloat offsetX = sin(pt.y * uFrequency + uTime * uSpeed) * uWaveAmplitude;\n                pt.x += offsetX; // * (pt.y - 1.0); // <- Uncomment to stop bottom part of the screen from moving\n\t\t\t}\n\t\t\telse if (effectType == EFFECT_TYPE_WAVY) \n\t\t\t{\n\t\t\t\tfloat offsetY = sin(pt.x * uFrequency + uTime * uSpeed) * uWaveAmplitude;\n\t\t\t\tpt.y += offsetY; // * (pt.y - 1.0); // <- Uncomment to stop bottom part of the screen from moving\n\t\t\t}\n\t\t\telse if (effectType == EFFECT_TYPE_HEAT_WAVE_HORIZONTAL)\n\t\t\t{\n\t\t\t\tx = sin(pt.x * uFrequency + uTime * uSpeed) * uWaveAmplitude;\n\t\t\t}\n\t\t\telse if (effectType == EFFECT_TYPE_HEAT_WAVE_VERTICAL)\n\t\t\t{\n\t\t\t\ty = sin(pt.y * uFrequency + uTime * uSpeed) * uWaveAmplitude;\n\t\t\t}\n\t\t\telse if (effectType == EFFECT_TYPE_FLAG)\n\t\t\t{\n\t\t\t\ty = sin(pt.y * uFrequency + 10.0 * pt.x + uTime * uSpeed) * uWaveAmplitude;\n\t\t\t\tx = sin(pt.x * uFrequency + 5.0 * pt.y + uTime * uSpeed) * uWaveAmplitude;\n\t\t\t}\n\t\t\t\n\t\t\treturn vec2(pt.x + x, pt.y + y);\n\t\t}\n\n\t\tvoid main()\n\t\t{\n\t\t\tvec2 uv = sineWave(openfl_TextureCoordv);\n\t\t\tgl_FragColor = texture2D(bitmap, uv);\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "\n\t\tattribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\t\n\t\tattribute float alpha;\n\t\tattribute vec4 colorMultiplier;\n\t\tattribute vec4 colorOffset;\n\t\tuniform bool hasColorTransform;\n\t\t\n\t\tvoid main(void)\n\t\t{\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t\t\n\t\t\topenfl_Alphav = openfl_Alpha * alpha;\n\t\t\t\n\t\t\tif (hasColorTransform)\n\t\t\t{\n\t\t\t\topenfl_ColorOffsetv = colorOffset / 255.0;\n\t\t\t\topenfl_ColorMultiplierv = colorMultiplier;\n\t\t\t}\n\t\t}";
	}
	flixel_graphics_tile_FlxGraphicsShader.call(this);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["WiggleShader"] = WiggleShader;
WiggleShader.__name__ = "WiggleShader";
WiggleShader.__super__ = flixel_graphics_tile_FlxGraphicsShader;
WiggleShader.prototype = $extend(flixel_graphics_tile_FlxGraphicsShader.prototype,{
	tx: null
	,uTime: null
	,effectType: null
	,uSpeed: null
	,uFrequency: null
	,uWaveAmplitude: null
	,__class__: WiggleShader
});
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return haxe_ds_StringMap.keysIterator(this.attributeMap.h);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,insertChild: function(x,pos) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			HxOverrides.remove(x.parent.children,x);
		}
		this.children.splice(pos,0,x);
		x.parent = this;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var animate_FlxSymbol = function(x,y,coolParsed) {
	this._skewMatrix = new openfl_geom_Matrix();
	this.transformMatrix = new openfl_geom_Matrix();
	this.drawQueue = [];
	this.symbolMap = new haxe_ds_StringMap();
	this.symbolAtlasShit = new haxe_ds_StringMap();
	flixel_FlxSprite.call(this,x,y);
	this.coolParse = coolParsed;
	var hasSymbolDictionary = Object.prototype.hasOwnProperty.call(this.coolParse,"SD");
	if(hasSymbolDictionary) {
		this.symbolAtlasShit = this.parseSymbolDictionary(this.coolParse);
	}
};
$hxClasses["animate.FlxSymbol"] = animate_FlxSymbol;
animate_FlxSymbol.__name__ = "animate.FlxSymbol";
animate_FlxSymbol.__super__ = flixel_FlxSprite;
animate_FlxSymbol.prototype = $extend(flixel_FlxSprite.prototype,{
	hasFrameByPass: null
	,symbolAtlasShit: null
	,symbolMap: null
	,drawQueue: null
	,daFrame: null
	,nestDepth: null
	,transformMatrix: null
	,_skewMatrix: null
	,matrixExposed: null
	,coolParse: null
	,draw: function() {
		flixel_FlxSprite.prototype.draw.call(this);
	}
	,renderFrame: function(TL,coolParsed,traceShit) {
		if(traceShit == null) {
			traceShit = false;
		}
		this.drawQueue = [];
		var _g = 0;
		var _g1 = TL.L;
		while(_g < _g1.length) {
			var layer = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = layer.FR;
			while(_g2 < _g3.length) {
				var swagFrame = _g3[_g2];
				++_g2;
				if(this.daFrame >= swagFrame.I && this.daFrame < swagFrame.I + swagFrame.DU) {
					var _g4 = 0;
					var _g5 = swagFrame.E;
					while(_g4 < _g5.length) {
						var element = _g5[_g4];
						++_g4;
						if(Object.prototype.hasOwnProperty.call(element,"ASI")) {
							var m3d = element.ASI.M3D;
							var dumbassMatrix = new openfl_geom_Matrix(m3d[0],m3d[1],m3d[4],m3d[5],m3d[12],m3d[13]);
							var spr = new animate_FlxSymbol(0,0,coolParsed);
							this.matrixExposed = true;
							spr.set_frames(this.frames);
							spr.set_frame(spr.frames.framesHash.h[element.ASI.N]);
							dumbassMatrix.concat(this._matrix);
							spr.matrixExposed = true;
							spr.transformMatrix.concat(dumbassMatrix);
							spr.origin.set();
							var _g6 = spr.origin;
							_g6.set_x(_g6.x + this.origin.x);
							var _g7 = spr.origin;
							_g7.set_y(_g7.y + this.origin.y);
							spr.set_antialiasing(true);
							spr.draw();
						} else {
							var nestedSymbol = this.symbolMap.h[element.SI.SN];
							var nestedShit = new animate_FlxSymbol(0,0,this.coolParse);
							nestedShit.set_frames(this.frames);
							var swagMatrix = new flixel_math_FlxMatrix(element.SI.M3D[0],element.SI.M3D[1],element.SI.M3D[4],element.SI.M3D[5],element.SI.M3D[12],element.SI.M3D[13]);
							swagMatrix.concat(this._matrix);
							nestedShit._matrix.concat(swagMatrix);
							nestedShit.origin.set(element.SI.TRP.x,element.SI.TRP.y);
							var tmp = Object.prototype.hasOwnProperty.call(this.symbolAtlasShit.h,nestedSymbol.SN);
							nestedShit.hasFrameByPass = true;
							nestedShit.nestDepth = this.nestDepth + 1;
							nestedShit.renderFrame(nestedSymbol.TL,coolParsed);
						}
					}
				}
			}
		}
	}
	,changeFrame: function(frameChange) {
		if(frameChange == null) {
			frameChange = 0;
		}
		this.daFrame += frameChange;
	}
	,parseSymbolDictionary: function(coolParsed) {
		var awesomeMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = coolParsed.SD.S;
		while(_g < _g1.length) {
			var symbol = _g1[_g];
			++_g;
			this.symbolMap.h[symbol.SN] = symbol;
			var symbolName = symbol.SN;
			var _g2 = 0;
			var _g3 = symbol.TL.L;
			while(_g2 < _g3.length) {
				var layer = _g3[_g2];
				++_g2;
				var _g4 = 0;
				var _g5 = layer.FR;
				while(_g4 < _g5.length) {
					var frame = _g5[_g4];
					++_g4;
					var _g6 = 0;
					var _g7 = frame.E;
					while(_g6 < _g7.length) {
						var element = _g7[_g6];
						++_g6;
						if(Object.prototype.hasOwnProperty.call(element,"ASI")) {
							awesomeMap.h[symbolName] = element.ASI.N;
						}
					}
				}
			}
		}
		return awesomeMap;
	}
	,drawComplex: function(camera) {
		var doFlipX = this.flipX != this._frame.flipX;
		var doFlipY = this.flipY != this._frame.flipY;
		this._frame.prepareMatrix(this._matrix,0,this.animation._curAnim != null ? doFlipX != this.animation._curAnim.flipX : doFlipX,this.animation._curAnim != null ? doFlipY != this.animation._curAnim.flipY : doFlipY);
		this._matrix.translate(-this.origin.x,-this.origin.y);
		this._matrix.scale(this.scale.x,this.scale.y);
		if(this.matrixExposed) {
			this._matrix.concat(this.transformMatrix);
		} else {
			if(this.bakedRotationAngle <= 0) {
				if(this._angleChanged) {
					var radians = this.angle * (Math.PI / 180);
					this._sinAngle = Math.sin(radians);
					this._cosAngle = Math.cos(radians);
					this._angleChanged = false;
				}
				if(this.angle != 0) {
					var _this = this._matrix;
					var cos = this._cosAngle;
					var sin = this._sinAngle;
					var a1 = _this.a * cos - _this.b * sin;
					_this.b = _this.a * sin + _this.b * cos;
					_this.a = a1;
					var c1 = _this.c * cos - _this.d * sin;
					_this.d = _this.c * sin + _this.d * cos;
					_this.c = c1;
					var tx1 = _this.tx * cos - _this.ty * sin;
					_this.ty = _this.tx * sin + _this.ty * cos;
					_this.tx = tx1;
				}
			}
			this._matrix.concat(this._skewMatrix);
		}
		this._point.addPoint(this.origin);
		if(this.isPixelPerfectRender(camera)) {
			this._point.set_x(Math.floor(this._point.x));
			this._point.set_y(Math.floor(this._point.y));
		}
		this._matrix.translate(this._point.x,this._point.y);
		camera.drawPixels(this._frame,this.framePixels,this._matrix,this.colorTransform,this.blend,this.antialiasing);
	}
	,__class__: animate_FlxSymbol
});
var animate_FlxAnimate = function(x,y) {
	this.frameTickTypeShit = 0;
	this.playingAnim = false;
	this.coolParse = JSON.parse(lime_utils_Assets.getText(Paths.getPath("images/tightBars/Animation.json","TEXT",null)));
	this.coolParse.AN.TL.L.reverse();
	animate_FlxSymbol.call(this,x,y,this.coolParse);
	this.set_frames(animate_FlxAnimate.fromAnimate(Paths.getPath("images/tightBars/spritemap1.png","TEXT",null),Paths.getPath("images/tightBars/spritemap1.json","TEXT",null)));
};
$hxClasses["animate.FlxAnimate"] = animate_FlxAnimate;
animate_FlxAnimate.__name__ = "animate.FlxAnimate";
animate_FlxAnimate.fromAnimate = function(Source,Description) {
	var graphic = flixel_FlxG.bitmap.add(Source);
	if(graphic == null) {
		return null;
	}
	var frames = flixel_graphics_frames_FlxAtlasFrames.findFrame(graphic);
	if(frames != null) {
		return frames;
	}
	if(graphic == null || Description == null) {
		return null;
	}
	frames = new flixel_graphics_frames_FlxAtlasFrames(graphic);
	haxe_Log.trace(Description,{ fileName : "source/animate/FlxAnimate.hx", lineNumber : 52, className : "animate.FlxAnimate", methodName : "fromAnimate"});
	if(lime_utils_Assets.exists(Description)) {
		Description = lime_utils_Assets.getText(Description);
	}
	var data = JSON.parse(Description);
	var _g = 0;
	var _g1 = data.ATLAS.SPRITES;
	while(_g < _g1.length) {
		var sprites = _g1[_g];
		++_g;
		var spr = sprites.SPRITE;
		var X = spr.x;
		var Y = spr.y;
		var Width = spr.w;
		var Height = spr.h;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _this = flixel_math_FlxRect._pool.get();
		var X1 = X;
		var Y1 = Y;
		var Width1 = Width;
		var Height1 = Height;
		if(Height1 == null) {
			Height1 = 0;
		}
		if(Width1 == null) {
			Width1 = 0;
		}
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		_this.x = X1;
		_this.y = Y1;
		_this.width = Width1;
		_this.height = Height1;
		var rect = _this;
		rect._inPool = false;
		var rect1 = rect;
		var size = new openfl_geom_Rectangle(0,0,rect1.width,rect1.height);
		var X2 = -size.get_left();
		var Y2 = -size.get_top();
		if(Y2 == null) {
			Y2 = 0;
		}
		if(X2 == null) {
			X2 = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X2,Y2);
		point._inPool = false;
		var offset = point;
		var X3 = size.width;
		var Y3 = size.height;
		if(Y3 == null) {
			Y3 = 0;
		}
		if(X3 == null) {
			X3 = 0;
		}
		var point1 = flixel_math_FlxPoint._pool.get().set(X3,Y3);
		point1._inPool = false;
		var sourceSize = point1;
		frames.addAtlasFrame(rect1,sourceSize,offset,spr.name);
	}
	return frames;
};
animate_FlxAnimate.__super__ = animate_FlxSymbol;
animate_FlxAnimate.prototype = $extend(animate_FlxSymbol.prototype,{
	playingAnim: null
	,frameTickTypeShit: null
	,draw: function() {
		animate_FlxSymbol.prototype.draw.call(this);
		this.renderFrame(this.coolParse.AN.TL,this.coolParse,true);
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(69,_this.status)) {
			var key = animate_FlxSymbol.nestedShit.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				var _g = 0;
				var _g1 = animate_FlxSymbol.nestedShit.h[key1];
				while(_g < _g1.length) {
					var symbol = _g1[_g];
					++_g;
					symbol.draw();
				}
			}
			animate_FlxSymbol.nestedShit.h = { };
		}
	}
	,update: function(elapsed) {
		animate_FlxSymbol.prototype.update.call(this,elapsed);
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(32,_this.status)) {
			this.playingAnim = !this.playingAnim;
		}
		if(this.playingAnim) {
			this.frameTickTypeShit += elapsed;
			if(this.frameTickTypeShit >= 0.041666666666666664) {
				this.changeFrame(1);
				this.frameTickTypeShit = 0;
			}
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(39,_this.status)) {
			this.changeFrame(1);
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(37,_this.status)) {
			this.changeFrame(-1);
		}
	}
	,__class__: animate_FlxAnimate
});
var flixel_IFlxBasic = function() { };
$hxClasses["flixel.IFlxBasic"] = flixel_IFlxBasic;
flixel_IFlxBasic.__name__ = "flixel.IFlxBasic";
flixel_IFlxBasic.__isInterface__ = true;
flixel_IFlxBasic.prototype = {
	set_active: null
	,set_visible: null
	,set_alive: null
	,set_exists: null
	,ID: null
	,active: null
	,visible: null
	,alive: null
	,exists: null
	,draw: null
	,update: null
	,destroy: null
	,kill: null
	,revive: null
	,toString: null
	,__class__: flixel_IFlxBasic
	,__properties__: {set_exists:"set_exists",set_alive:"set_alive",set_visible:"set_visible",set_active:"set_active"}
};
var flixel_util_FlxPool_$flixel_$math_$FlxPoint = function(classObj) {
	this._count = 0;
	this._pool = [];
	this._class = classObj;
};
$hxClasses["flixel.util.FlxPool_flixel_math_FlxPoint"] = flixel_util_FlxPool_$flixel_$math_$FlxPoint;
flixel_util_FlxPool_$flixel_$math_$FlxPoint.__name__ = "flixel.util.FlxPool_flixel_math_FlxPoint";
flixel_util_FlxPool_$flixel_$math_$FlxPoint.__interfaces__ = [flixel_util_IFlxPool];
flixel_util_FlxPool_$flixel_$math_$FlxPoint.prototype = {
	_pool: null
	,_class: null
	,_count: null
	,get: function() {
		if(this._count == 0) {
			return Type.createInstance(this._class,[]);
		}
		return this._pool[--this._count];
	}
	,put: function(obj) {
		if(obj != null) {
			var i = this._pool.indexOf(obj);
			if(i == -1 || i >= this._count) {
				obj.destroy();
				this._pool[this._count++] = obj;
			}
		}
	}
	,putUnsafe: function(obj) {
		if(obj != null) {
			obj.destroy();
			this._pool[this._count++] = obj;
		}
	}
	,preAllocate: function(numObjects) {
		while(numObjects-- > 0) this._pool[this._count++] = Type.createInstance(this._class,[]);
	}
	,clear: function() {
		this._count = 0;
		var oldPool = this._pool;
		this._pool = [];
		return oldPool;
	}
	,get_length: function() {
		return this._count;
	}
	,__class__: flixel_util_FlxPool_$flixel_$math_$FlxPoint
	,__properties__: {get_length:"get_length"}
};
var flixel_math_FlxPoint = function(X,Y) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._inPool = false;
	this._weak = false;
	this.y = 0;
	this.x = 0;
	this.set(X,Y);
};
$hxClasses["flixel.math.FlxPoint"] = flixel_math_FlxPoint;
flixel_math_FlxPoint.__name__ = "flixel.math.FlxPoint";
flixel_math_FlxPoint.__interfaces__ = [flixel_util_IFlxPooled];
flixel_math_FlxPoint.__properties__ = {get_pool:"get_pool"};
flixel_math_FlxPoint.get = function(X,Y) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	return point;
};
flixel_math_FlxPoint.weak = function(X,Y) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var X1 = X;
	var Y1 = Y;
	if(Y1 == null) {
		Y1 = 0;
	}
	if(X1 == null) {
		X1 = 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(X1,Y1);
	point._inPool = false;
	var point1 = point;
	point1._weak = true;
	return point1;
};
flixel_math_FlxPoint.get_pool = function() {
	return flixel_math_FlxPoint._pool;
};
flixel_math_FlxPoint.prototype = {
	x: null
	,y: null
	,_weak: null
	,_inPool: null
	,put: function() {
		if(!this._inPool) {
			this._inPool = true;
			this._weak = false;
			flixel_math_FlxPoint._pool.putUnsafe(this);
		}
	}
	,putWeak: function() {
		if(this._weak) {
			this.put();
		}
	}
	,set: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.set_x(X);
		this.set_y(Y);
		return this;
	}
	,add: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _g = this;
		_g.set_x(_g.x + X);
		var _g = this;
		_g.set_y(_g.y + Y);
		return this;
	}
	,addPoint: function(point) {
		var _g = this;
		_g.set_x(_g.x + point.x);
		var _g = this;
		_g.set_y(_g.y + point.y);
		if(point._weak) {
			point.put();
		}
		return this;
	}
	,addPointWeak: function(point) {
		var _g = this;
		_g.set_x(_g.x + point.x);
		var _g = this;
		_g.set_y(_g.y + point.y);
		return this;
	}
	,subtract: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _g = this;
		_g.set_x(_g.x - X);
		var _g = this;
		_g.set_y(_g.y - Y);
		return this;
	}
	,subtractPoint: function(point) {
		var _g = this;
		_g.set_x(_g.x - point.x);
		var _g = this;
		_g.set_y(_g.y - point.y);
		if(point._weak) {
			point.put();
		}
		return this;
	}
	,subtractPointWeak: function(point) {
		var _g = this;
		_g.set_x(_g.x - point.x);
		var _g = this;
		_g.set_y(_g.y - point.y);
		return this;
	}
	,scale: function(k) {
		var _g = this;
		_g.set_x(_g.x * k);
		var _g = this;
		_g.set_y(_g.y * k);
		return this;
	}
	,copyFrom: function(point) {
		this.set_x(point.x);
		this.set_y(point.y);
		if(point._weak) {
			point.put();
		}
		return this;
	}
	,copyTo: function(point) {
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		point.set_x(this.x);
		point.set_y(this.y);
		return point;
	}
	,copyFromFlash: function(FlashPoint) {
		this.set_x(FlashPoint.x);
		this.set_y(FlashPoint.y);
		return this;
	}
	,copyToFlash: function(FlashPoint) {
		if(FlashPoint == null) {
			FlashPoint = new openfl_geom_Point();
		}
		FlashPoint.x = this.x;
		FlashPoint.y = this.y;
		return FlashPoint;
	}
	,addToFlash: function(FlashPoint) {
		FlashPoint.x += this.x;
		FlashPoint.y += this.y;
		return FlashPoint;
	}
	,subtractFromFlash: function(FlashPoint) {
		FlashPoint.x -= this.x;
		FlashPoint.y -= this.y;
		return FlashPoint;
	}
	,inCoords: function(RectX,RectY,RectWidth,RectHeight) {
		return flixel_math_FlxMath.pointInCoordinates(this.x,this.y,RectX,RectY,RectWidth,RectHeight);
	}
	,inRect: function(Rect) {
		return flixel_math_FlxMath.pointInFlxRect(this.x,this.y,Rect);
	}
	,distanceTo: function(point) {
		var dx = this.x - point.x;
		var dy = this.y - point.y;
		if(point._weak) {
			point.put();
		}
		return Math.sqrt(dx * dx + dy * dy);
	}
	,floor: function() {
		this.set_x(Math.floor(this.x));
		this.set_y(Math.floor(this.y));
		return this;
	}
	,ceil: function() {
		this.set_x(Math.ceil(this.x));
		this.set_y(Math.ceil(this.y));
		return this;
	}
	,round: function() {
		this.set_x(Math.round(this.x));
		this.set_y(Math.round(this.y));
		return this;
	}
	,rotate: function(Pivot,Angle) {
		var radians = Angle * (Math.PI / 180);
		var n = radians;
		n *= 0.3183098862;
		if(n > 1) {
			n -= Math.ceil(n) >> 1 << 1;
		} else if(n < -1) {
			n += Math.ceil(-n) >> 1 << 1;
		}
		var sin = n > 0 ? n * (3.1 + n * (0.5 + n * (-7.2 + n * 3.6))) : n * (3.1 - n * (0.5 + n * (7.2 + n * 3.6)));
		var n = radians + 1.570796327;
		n *= 0.3183098862;
		if(n > 1) {
			n -= Math.ceil(n) >> 1 << 1;
		} else if(n < -1) {
			n += Math.ceil(-n) >> 1 << 1;
		}
		var cos = n > 0 ? n * (3.1 + n * (0.5 + n * (-7.2 + n * 3.6))) : n * (3.1 - n * (0.5 + n * (7.2 + n * 3.6)));
		var dx = this.x - Pivot.x;
		var dy = this.y - Pivot.y;
		this.set_x(cos * dx - sin * dy + Pivot.x);
		this.set_y(sin * dx + cos * dy + Pivot.y);
		if(Pivot._weak) {
			Pivot.put();
		}
		return this;
	}
	,angleBetween: function(point) {
		var x = point.x - this.x;
		var y = point.y - this.y;
		var angle = 0;
		if(x != 0 || y != 0) {
			var c1 = Math.PI * 0.25;
			var c2 = 3 * c1;
			var ay = y < 0 ? -y : y;
			if(x >= 0) {
				angle = c1 - c1 * ((x - ay) / (x + ay));
			} else {
				angle = c2 - c1 * ((x + ay) / (ay - x));
			}
			angle = (y < 0 ? -angle : angle) * (180 / Math.PI);
			if(angle > 90) {
				angle -= 270;
			} else {
				angle += 90;
			}
		}
		if(point._weak) {
			point.put();
		}
		return angle;
	}
	,toVector: function() {
		var x = this.x;
		var y = this.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var X = x;
		var Y = y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		return point;
	}
	,equals: function(point) {
		var result = Math.abs(this.x - point.x) <= 0.0000001 && Math.abs(this.y - point.y) <= 0.0000001;
		if(point._weak) {
			point.put();
		}
		return result;
	}
	,destroy: function() {
	}
	,transform: function(matrix) {
		var x1 = this.x * matrix.a + this.y * matrix.c + matrix.tx;
		var y1 = this.x * matrix.b + this.y * matrix.d + matrix.ty;
		return this.set(x1,y1);
	}
	,toString: function() {
		var value = this.x;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "x";
		_this.value = value;
		var value = this.y;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "y";
		_this1.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1]);
	}
	,set_x: function(Value) {
		return this.x = Value;
	}
	,set_y: function(Value) {
		return this.y = Value;
	}
	,__class__: flixel_math_FlxPoint
	,__properties__: {set_y:"set_y",set_x:"set_x"}
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = "lime.math.Matrix3";
lime_math_Matrix3.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector4.x;
			this.b = vector4.y;
		} else if(column == 1) {
			this.c = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
			this.tx = vector4.z;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
			this.ty = vector4.z;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(matrix3) {
		if(matrix3 != null && this.tx == matrix3.tx && this.ty == matrix3.ty && this.a == matrix3.a && this.b == matrix3.b && this.c == matrix3.c) {
			return this.d == matrix3.d;
		} else {
			return false;
		}
	}
	,deltaTransformVector: function(Vector2,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = Vector2.x * this.a + Vector2.y * this.c;
		result.y = Vector2.x * this.b + Vector2.y * this.d;
		return result;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformRect: function(rect,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		var tx0 = this.a * rect.x + this.c * rect.y;
		var tx1 = tx0;
		var ty0 = this.b * rect.x + this.d * rect.y;
		var ty1 = ty0;
		var tx = this.a * (rect.x + rect.width) + this.c * rect.y;
		var ty = this.b * (rect.x + rect.width) + this.d * rect.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = this.a * (rect.x + rect.width) + this.c * (rect.y + rect.height);
		ty = this.b * (rect.x + rect.width) + this.d * (rect.y + rect.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = this.a * rect.x + this.c * (rect.y + rect.height);
		ty = this.b * rect.x + this.d * (rect.y + rect.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		result.setTo(tx0 + tx,ty0 + ty,tx1 - tx0,ty1 - ty0);
		return result;
	}
	,transformVector: function(pos,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = pos.x * this.a + pos.y * this.c + this.tx;
		result.y = pos.x * this.b + pos.y * this.d + this.ty;
		return result;
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__class__: lime_math_Matrix3
};
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = "openfl.geom.Matrix";
openfl_geom_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,__array: null
	,clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector3D.x;
			this.b = vector3D.y;
		} else if(column == 1) {
			this.c = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
			this.tx = vector3D.z;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
			this.ty = vector3D.z;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.setTo(0,0,1);
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		if(matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c) {
			return this.d == matrix.d;
		} else {
			return false;
		}
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,toArray: function(transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(this.__array == null) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1 = new Float32Array(9);
			this.__array = this1;
		}
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__toMatrix3: function() {
		openfl_geom_Matrix.__matrix3.setTo(this.a,this.b,this.c,this.d,this.tx,this.ty);
		return openfl_geom_Matrix.__matrix3;
	}
	,__transformInversePoint: function(point) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			point.x = -this.tx;
			point.y = -this.ty;
		} else {
			var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
			point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
			point.x = px;
		}
	}
	,__transformInverseX: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.tx;
		} else {
			return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
		}
	}
	,__transformInverseY: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.ty;
		} else {
			return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
		}
	}
	,__transformPoint: function(point) {
		var px = point.x;
		var py = point.y;
		point.x = px * this.a + py * this.c + this.tx;
		point.y = px * this.b + py * this.d + this.ty;
	}
	,__transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,__transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__translateTransformed: function(px,py) {
		this.tx = px * this.a + py * this.c + this.tx;
		this.ty = px * this.b + py * this.d + this.ty;
	}
	,__class__: openfl_geom_Matrix
};
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) {
		alphaOffset = 0;
	}
	if(blueOffset == null) {
		blueOffset = 0;
	}
	if(greenOffset == null) {
		greenOffset = 0;
	}
	if(redOffset == null) {
		redOffset = 0;
	}
	if(alphaMultiplier == null) {
		alphaMultiplier = 1;
	}
	if(blueMultiplier == null) {
		blueMultiplier = 1;
	}
	if(greenMultiplier == null) {
		greenMultiplier = 1;
	}
	if(redMultiplier == null) {
		redMultiplier = 1;
	}
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = "openfl.geom.ColorTransform";
openfl_geom_ColorTransform.__limeColorMatrix = null;
openfl_geom_ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,concat: function(second) {
		this.redOffset = second.redOffset * this.redMultiplier + this.redOffset;
		this.greenOffset = second.greenOffset * this.greenMultiplier + this.greenOffset;
		this.blueOffset = second.blueOffset * this.blueMultiplier + this.blueOffset;
		this.alphaOffset = second.alphaOffset * this.alphaMultiplier + this.alphaOffset;
		this.redMultiplier *= second.redMultiplier;
		this.greenMultiplier *= second.greenMultiplier;
		this.blueMultiplier *= second.blueMultiplier;
		this.alphaMultiplier *= second.alphaMultiplier;
	}
	,toString: function() {
		return "(redMultiplier=" + this.redMultiplier + ", greenMultiplier=" + this.greenMultiplier + ", blueMultiplier=" + this.blueMultiplier + ", alphaMultiplier=" + this.alphaMultiplier + ", redOffset=" + this.redOffset + ", greenOffset=" + this.greenOffset + ", blueOffset=" + this.blueOffset + ", alphaOffset=" + this.alphaOffset + ")";
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__copyFrom: function(ct) {
		this.redMultiplier = ct.redMultiplier;
		this.greenMultiplier = ct.greenMultiplier;
		this.blueMultiplier = ct.blueMultiplier;
		this.alphaMultiplier = ct.alphaMultiplier;
		this.redOffset = ct.redOffset;
		this.greenOffset = ct.greenOffset;
		this.blueOffset = ct.blueOffset;
		this.alphaOffset = ct.alphaOffset;
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__identity: function() {
		this.redMultiplier = 1;
		this.greenMultiplier = 1;
		this.blueMultiplier = 1;
		this.alphaMultiplier = 1;
		this.redOffset = 0;
		this.greenOffset = 0;
		this.blueOffset = 0;
		this.alphaOffset = 0;
	}
	,__invert: function() {
		this.redMultiplier = this.redMultiplier != 0 ? 1 / this.redMultiplier : 1;
		this.greenMultiplier = this.greenMultiplier != 0 ? 1 / this.greenMultiplier : 1;
		this.blueMultiplier = this.blueMultiplier != 0 ? 1 / this.blueMultiplier : 1;
		this.alphaMultiplier = this.alphaMultiplier != 0 ? 1 / this.alphaMultiplier : 1;
		this.redOffset = -this.redOffset;
		this.greenOffset = -this.greenOffset;
		this.blueOffset = -this.blueOffset;
		this.alphaOffset = -this.alphaOffset;
	}
	,__equals: function(ct,ignoreAlphaMultiplier) {
		if(ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (ignoreAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset) {
			return this.alphaOffset == ct.alphaOffset;
		} else {
			return false;
		}
	}
	,__isDefault: function(ignoreAlphaMultiplier) {
		if(ignoreAlphaMultiplier) {
			if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
				return this.alphaOffset == 0;
			} else {
				return false;
			}
		} else if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
			return this.alphaOffset == 0;
		} else {
			return false;
		}
	}
	,__setArrays: function(colorMultipliers,colorOffsets) {
		colorMultipliers[0] = this.redMultiplier;
		colorMultipliers[1] = this.greenMultiplier;
		colorMultipliers[2] = this.blueMultiplier;
		colorMultipliers[3] = this.alphaMultiplier;
		colorOffsets[0] = this.redOffset;
		colorOffsets[1] = this.greenOffset;
		colorOffsets[2] = this.blueOffset;
		colorOffsets[3] = this.alphaOffset;
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		if(openfl_geom_ColorTransform.__limeColorMatrix == null) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1 = new Float32Array(20);
			openfl_geom_ColorTransform.__limeColorMatrix = this1;
		}
		openfl_geom_ColorTransform.__limeColorMatrix[0] = this.redMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[4] = this.redOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[6] = this.greenMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[9] = this.greenOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[12] = this.blueMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[14] = this.blueOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[18] = this.alphaMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[19] = this.alphaOffset / 255;
		return openfl_geom_ColorTransform.__limeColorMatrix;
	}
	,__class__: openfl_geom_ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
var flixel_FlxCamera = function(X,Y,Width,Height,Zoom) {
	if(Zoom == null) {
		Zoom = 0;
	}
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._helperPoint = new openfl_geom_Point();
	this._helperMatrix = new flixel_math_FlxMatrix();
	var _this = flixel_math_FlxRect._pool.get();
	_this.x = 0;
	_this.y = 0;
	_this.width = 0;
	_this.height = 0;
	_this._inPool = false;
	this._bounds = _this;
	this._scrollRect = new openfl_display_Sprite();
	this.initialZoom = 1;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this._point = point;
	this._fxShakeAxes = flixel_util_FlxAxes.XY;
	this._fxShakeDuration = 0;
	this._fxShakeIntensity = 0;
	this._fxFadeAlpha = 0;
	this._fxFadeCompleted = true;
	this._fxFadeComplete = null;
	this._fxFadeIn = false;
	this._fxFadeDuration = 0;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this._scrollTarget = point;
	this._fxFadeColor = 0;
	this._fxFlashAlpha = 0;
	this._fxFlashComplete = null;
	this._fxFlashDuration = 0;
	this._fxFlashColor = 0;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this._flashOffset = point;
	this._flashPoint = new openfl_geom_Point();
	this.filtersEnabled = true;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.followLead = point;
	this.antialiasing = false;
	this.color = -1;
	this.angle = 0;
	this.alpha = 1;
	this._useBlitMatrix = false;
	this._blitMatrix = new flixel_math_FlxMatrix();
	this.viewHeight = 0;
	this.viewWidth = 0;
	this.viewOffsetHeight = 0;
	this.viewOffsetWidth = 0;
	this.viewOffsetY = 0;
	this.viewOffsetX = 0;
	this.height = 0;
	this.width = 0;
	this.flashSprite = new openfl_display_Sprite();
	this.useBgAlphaBlending = false;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.scroll = point;
	this.followLerp = 60 / flixel_FlxG.updateFramerate;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.targetOffset = point;
	this.scaleY = 0;
	this.scaleX = 0;
	this.y = 0;
	this.x = 0;
	flixel_FlxBasic.call(this);
	this.set_x(X);
	this.set_y(Y);
	this.set_width(Width <= 0 ? flixel_FlxG.width : Width);
	this.set_height(Height <= 0 ? flixel_FlxG.height : Height);
	this._flashRect = new openfl_geom_Rectangle(0,0,this.width,this.height);
	this.flashSprite.addChild(this._scrollRect);
	this._scrollRect.set_scrollRect(new openfl_geom_Rectangle());
	this.pixelPerfectRender = flixel_FlxG.renderBlit;
	if(flixel_FlxG.renderBlit) {
		this.screen = new flixel_FlxSprite();
		this.buffer = new openfl_display_BitmapData(this.width,this.height,true,0);
		this.screen.set_pixels(this.buffer);
		this.screen.origin.set();
		this._flashBitmap = new openfl_display_Bitmap(this.buffer);
		this._scrollRect.addChild(this._flashBitmap);
		this._fill = new openfl_display_BitmapData(this.width,this.height,true,0);
	} else {
		this.canvas = new openfl_display_Sprite();
		this._scrollRect.addChild(this.canvas);
	}
	this.set_color(-1);
	this.initialZoom = Zoom == 0 ? flixel_FlxCamera.defaultZoom : Zoom;
	this.set_zoom(Zoom);
	this.updateScrollRect();
	this.updateFlashOffset();
	this.updateFlashSpritePosition();
	this.updateInternalSpritePositions();
	this.bgColor = flixel_FlxG.cameras.get_bgColor();
};
$hxClasses["flixel.FlxCamera"] = flixel_FlxCamera;
flixel_FlxCamera.__name__ = "flixel.FlxCamera";
flixel_FlxCamera.__properties__ = {set_defaultCameras:"set_defaultCameras",get_defaultCameras:"get_defaultCameras"};
flixel_FlxCamera.defaultZoom = null;
flixel_FlxCamera._defaultCameras = null;
flixel_FlxCamera._storageTilesHead = null;
flixel_FlxCamera._storageTrianglesHead = null;
flixel_FlxCamera.get_defaultCameras = function() {
	return flixel_FlxCamera._defaultCameras;
};
flixel_FlxCamera.set_defaultCameras = function(value) {
	return flixel_FlxCamera._defaultCameras = value;
};
flixel_FlxCamera.__super__ = flixel_FlxBasic;
flixel_FlxCamera.prototype = $extend(flixel_FlxBasic.prototype,{
	x: null
	,y: null
	,scaleX: null
	,scaleY: null
	,totalScaleX: null
	,totalScaleY: null
	,style: null
	,target: null
	,targetOffset: null
	,followLerp: null
	,deadzone: null
	,minScrollX: null
	,maxScrollX: null
	,minScrollY: null
	,maxScrollY: null
	,scroll: null
	,buffer: null
	,bgColor: null
	,screen: null
	,useBgAlphaBlending: null
	,flashSprite: null
	,pixelPerfectRender: null
	,width: null
	,height: null
	,zoom: null
	,viewOffsetX: null
	,viewOffsetY: null
	,viewOffsetWidth: null
	,viewOffsetHeight: null
	,viewWidth: null
	,viewHeight: null
	,_blitMatrix: null
	,_useBlitMatrix: null
	,alpha: null
	,angle: null
	,color: null
	,antialiasing: null
	,followLead: null
	,filtersEnabled: null
	,_flashRect: null
	,_flashPoint: null
	,_flashOffset: null
	,_fxFlashColor: null
	,_fxFlashDuration: null
	,_fxFlashComplete: null
	,_fxFlashAlpha: null
	,_fxFadeColor: null
	,_lastTargetPosition: null
	,_scrollTarget: null
	,_fxFadeDuration: null
	,_fxFadeIn: null
	,_fxFadeComplete: null
	,_fxFadeCompleted: null
	,_fxFadeAlpha: null
	,_fxShakeIntensity: null
	,_fxShakeDuration: null
	,_fxShakeComplete: null
	,_fxShakeAxes: null
	,_point: null
	,_filters: null
	,initialZoom: null
	,_fill: null
	,_flashBitmap: null
	,_scrollRect: null
	,_bounds: null
	,canvas: null
	,_helperMatrix: null
	,_helperPoint: null
	,_currentDrawItem: null
	,_headOfDrawStack: null
	,_headTiles: null
	,_headTriangles: null
	,startQuadBatch: function(graphic,colored,hasColorOffsets,blend,smooth,shader) {
		if(smooth == null) {
			smooth = false;
		}
		if(hasColorOffsets == null) {
			hasColorOffsets = false;
		}
		var itemToReturn = null;
		var blendInt = flixel_graphics_tile_FlxDrawBaseItem.blendToInt(blend);
		if(this._currentDrawItem != null && this._currentDrawItem.type == flixel_graphics_tile_FlxDrawItemType.TILES && this._headTiles.graphics == graphic && this._headTiles.colored == colored && this._headTiles.hasColorOffsets == hasColorOffsets && this._headTiles.blending == blendInt && this._headTiles.blend == blend && this._headTiles.antialiasing == smooth && this._headTiles.shader == shader) {
			return this._headTiles;
		}
		if(flixel_FlxCamera._storageTilesHead != null) {
			itemToReturn = flixel_FlxCamera._storageTilesHead;
			var newHead = flixel_FlxCamera._storageTilesHead.nextTyped;
			itemToReturn.reset();
			flixel_FlxCamera._storageTilesHead = newHead;
		} else {
			itemToReturn = new flixel_graphics_tile_FlxDrawQuadsItem();
		}
		itemToReturn.graphics = graphic;
		itemToReturn.antialiasing = smooth;
		itemToReturn.colored = colored;
		itemToReturn.hasColorOffsets = hasColorOffsets;
		itemToReturn.blending = blendInt;
		itemToReturn.blend = blend;
		itemToReturn.shader = shader;
		itemToReturn.nextTyped = this._headTiles;
		this._headTiles = itemToReturn;
		if(this._headOfDrawStack == null) {
			this._headOfDrawStack = itemToReturn;
		}
		if(this._currentDrawItem != null) {
			this._currentDrawItem.next = itemToReturn;
		}
		this._currentDrawItem = itemToReturn;
		return itemToReturn;
	}
	,startTrianglesBatch: function(graphic,smoothing,isColored,blend) {
		if(isColored == null) {
			isColored = false;
		}
		if(smoothing == null) {
			smoothing = false;
		}
		var blendInt = flixel_graphics_tile_FlxDrawBaseItem.blendToInt(blend);
		if(this._currentDrawItem != null && this._currentDrawItem.type == flixel_graphics_tile_FlxDrawItemType.TRIANGLES && this._headTriangles.graphics == graphic && this._headTriangles.antialiasing == smoothing && this._headTriangles.colored == isColored && this._headTriangles.blending == blendInt) {
			return this._headTriangles;
		}
		return this.getNewDrawTrianglesItem(graphic,smoothing,isColored,blend);
	}
	,getNewDrawTrianglesItem: function(graphic,smoothing,isColored,blend) {
		if(isColored == null) {
			isColored = false;
		}
		if(smoothing == null) {
			smoothing = false;
		}
		var itemToReturn = null;
		var blendInt = flixel_graphics_tile_FlxDrawBaseItem.blendToInt(blend);
		if(flixel_FlxCamera._storageTrianglesHead != null) {
			itemToReturn = flixel_FlxCamera._storageTrianglesHead;
			var newHead = flixel_FlxCamera._storageTrianglesHead.nextTyped;
			itemToReturn.reset();
			flixel_FlxCamera._storageTrianglesHead = newHead;
		} else {
			itemToReturn = new flixel_graphics_tile_FlxDrawTrianglesItem();
		}
		itemToReturn.graphics = graphic;
		itemToReturn.antialiasing = smoothing;
		itemToReturn.colored = isColored;
		itemToReturn.blending = blendInt;
		itemToReturn.nextTyped = this._headTriangles;
		this._headTriangles = itemToReturn;
		if(this._headOfDrawStack == null) {
			this._headOfDrawStack = itemToReturn;
		}
		if(this._currentDrawItem != null) {
			this._currentDrawItem.next = itemToReturn;
		}
		this._currentDrawItem = itemToReturn;
		return itemToReturn;
	}
	,clearDrawStack: function() {
		var currTiles = this._headTiles;
		var newTilesHead;
		while(currTiles != null) {
			newTilesHead = currTiles.nextTyped;
			currTiles.reset();
			currTiles.nextTyped = flixel_FlxCamera._storageTilesHead;
			flixel_FlxCamera._storageTilesHead = currTiles;
			currTiles = newTilesHead;
		}
		var currTriangles = this._headTriangles;
		var newTrianglesHead;
		while(currTriangles != null) {
			newTrianglesHead = currTriangles.nextTyped;
			currTriangles.reset();
			currTriangles.nextTyped = flixel_FlxCamera._storageTrianglesHead;
			flixel_FlxCamera._storageTrianglesHead = currTriangles;
			currTriangles = newTrianglesHead;
		}
		this._currentDrawItem = null;
		this._headOfDrawStack = null;
		this._headTiles = null;
		this._headTriangles = null;
	}
	,render: function() {
		var currItem = this._headOfDrawStack;
		while(currItem != null) {
			currItem.render(this);
			currItem = currItem.next;
		}
	}
	,drawPixels: function(frame,pixels,matrix,transform,blend,smoothing,shader) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(flixel_FlxG.renderBlit) {
			this._helperMatrix.copyFrom(matrix);
			if(this._useBlitMatrix) {
				this._helperMatrix.concat(this._blitMatrix);
				this.buffer.draw(pixels,this._helperMatrix,null,null,null,smoothing || this.antialiasing);
			} else {
				this._helperMatrix.translate(-this.viewOffsetX,-this.viewOffsetY);
				this.buffer.draw(pixels,this._helperMatrix,null,blend,null,smoothing || this.antialiasing);
			}
		} else {
			var isColored = transform != null && flixel_util_FlxColorTransformUtil.hasRGBMultipliers(transform);
			var hasColorOffsets = transform != null && flixel_util_FlxColorTransformUtil.hasRGBAOffsets(transform);
			var drawItem = this.startQuadBatch(frame.parent,isColored,hasColorOffsets,blend,smoothing,shader);
			drawItem.addQuad(frame,matrix,transform);
		}
	}
	,copyPixels: function(frame,pixels,sourceRect,destPoint,transform,blend,smoothing,shader) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(flixel_FlxG.renderBlit) {
			if(pixels != null) {
				if(this._useBlitMatrix) {
					this._helperMatrix.identity();
					this._helperMatrix.translate(destPoint.x,destPoint.y);
					this._helperMatrix.concat(this._blitMatrix);
					this.buffer.draw(pixels,this._helperMatrix,null,null,null,smoothing || this.antialiasing);
				} else {
					this._helperPoint.x = destPoint.x - (this.viewOffsetX | 0);
					this._helperPoint.y = destPoint.y - (this.viewOffsetY | 0);
					this.buffer.copyPixels(pixels,sourceRect,this._helperPoint,null,null,true);
				}
			} else if(frame != null) {
				frame.paint(this.buffer,destPoint,true);
			}
		} else {
			this._helperMatrix.identity();
			this._helperMatrix.translate(destPoint.x + frame.offset.x,destPoint.y + frame.offset.y);
			var isColored = transform != null && flixel_util_FlxColorTransformUtil.hasRGBMultipliers(transform);
			var hasColorOffsets = transform != null && flixel_util_FlxColorTransformUtil.hasRGBAOffsets(transform);
			var drawItem = this.startQuadBatch(frame.parent,isColored,hasColorOffsets,blend,smoothing,shader);
			drawItem.addQuad(frame,this._helperMatrix,transform);
		}
	}
	,drawTriangles: function(graphic,vertices,indices,uvtData,colors,position,blend,repeat,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(repeat == null) {
			repeat = false;
		}
		if(flixel_FlxG.renderBlit) {
			if(position == null) {
				position = flixel_FlxCamera.renderPoint.set();
			}
			var _this = this._bounds;
			var X = 0;
			var Y = 0;
			var Width = this.width;
			var Height = this.height;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var verticesLength = vertices.get_length();
			var currentVertexPosition = 0;
			var tempX;
			var tempY;
			var i = 0;
			var _this = flixel_FlxCamera.renderRect;
			_this.x = 0;
			_this.y = 0;
			_this.width = 0;
			_this.height = 0;
			var bounds = _this;
			flixel_FlxCamera.drawVertices.splice(0,flixel_FlxCamera.drawVertices.get_length());
			while(i < verticesLength) {
				tempX = position.x + vertices.get(i);
				tempY = position.y + vertices.get(i + 1);
				flixel_FlxCamera.drawVertices.set(currentVertexPosition++,tempX);
				flixel_FlxCamera.drawVertices.set(currentVertexPosition++,tempY);
				if(i == 0) {
					var X = tempX;
					var Y = tempY;
					var Width = 0;
					var Height = 0;
					if(Height == null) {
						Height = 0;
					}
					if(Width == null) {
						Width = 0;
					}
					if(Y == null) {
						Y = 0;
					}
					if(X == null) {
						X = 0;
					}
					bounds.x = X;
					bounds.y = Y;
					bounds.width = Width;
					bounds.height = Height;
				} else {
					if(tempX < bounds.x) {
						bounds.width += bounds.x - tempX;
						bounds.x = tempX;
					}
					if(tempY < bounds.y) {
						bounds.height += bounds.y - tempY;
						bounds.y = tempY;
					}
					if(tempX > bounds.x + bounds.width) {
						bounds.width = tempX - bounds.x;
					}
					if(tempY > bounds.y + bounds.height) {
						bounds.height = tempY - bounds.y;
					}
				}
				i += 2;
			}
			if(position._weak) {
				position.put();
			}
			var _this = this._bounds;
			var result = bounds.x + bounds.width > _this.x && bounds.x < _this.x + _this.width && bounds.y + bounds.height > _this.y && bounds.y < _this.y + _this.height;
			if(bounds._weak) {
				if(!bounds._inPool) {
					bounds._inPool = true;
					bounds._weak = false;
					flixel_math_FlxRect._pool.putUnsafe(bounds);
				}
			}
			if(!result) {
				flixel_FlxCamera.drawVertices.splice(flixel_FlxCamera.drawVertices.get_length() - verticesLength,verticesLength);
			} else {
				flixel_FlxCamera.trianglesSprite.get_graphics().clear();
				flixel_FlxCamera.trianglesSprite.get_graphics().beginBitmapFill(graphic.bitmap,null,repeat,smoothing);
				flixel_FlxCamera.trianglesSprite.get_graphics().drawTriangles(flixel_FlxCamera.drawVertices,indices,uvtData);
				flixel_FlxCamera.trianglesSprite.get_graphics().endFill();
				if(this._useBlitMatrix) {
					this._helperMatrix.copyFrom(this._blitMatrix);
				} else {
					this._helperMatrix.identity();
					this._helperMatrix.translate(-this.viewOffsetX,-this.viewOffsetY);
				}
				this.buffer.draw(flixel_FlxCamera.trianglesSprite,this._helperMatrix);
			}
			if(!bounds._inPool) {
				bounds._inPool = true;
				bounds._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(bounds);
			}
		} else {
			var _this = this._bounds;
			var X = 0;
			var Y = 0;
			var Width = this.width;
			var Height = this.height;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var isColored = colors != null && colors.get_length() != 0;
			var drawItem = this.startTrianglesBatch(graphic,smoothing,isColored,blend);
			drawItem.addTriangles(vertices,indices,uvtData,colors,position,this._bounds);
		}
	}
	,transformRect: function(rect) {
		if(flixel_FlxG.renderBlit) {
			rect.x += -this.viewOffsetX;
			rect.y += -this.viewOffsetY;
			if(this._useBlitMatrix) {
				rect.x *= this.zoom;
				rect.y *= this.zoom;
				rect.width *= this.zoom;
				rect.height *= this.zoom;
			}
		}
		return rect;
	}
	,transformPoint: function(point) {
		if(flixel_FlxG.renderBlit) {
			var X = this.viewOffsetX;
			var Y = this.viewOffsetY;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _g = point;
			_g.set_x(_g.x - X);
			var _g = point;
			_g.set_y(_g.y - Y);
			if(this._useBlitMatrix) {
				point.scale(this.zoom);
			}
		}
		return point;
	}
	,transformVector: function(vector) {
		if(flixel_FlxG.renderBlit && this._useBlitMatrix) {
			vector.scale(this.zoom);
		}
		return vector;
	}
	,transformObject: function(object) {
		var _g = object;
		_g.set_scaleX(_g.get_scaleX() * this.totalScaleX);
		var _g = object;
		_g.set_scaleY(_g.get_scaleY() * this.totalScaleY);
		var _g = object;
		_g.set_x(_g.get_x() - this.scroll.x * this.totalScaleX);
		var _g = object;
		_g.set_y(_g.get_y() - this.scroll.y * this.totalScaleY);
		var _g = object;
		_g.set_x(_g.get_x() - 0.5 * this.width * (this.scaleX - this.initialZoom) * flixel_FlxG.scaleMode.scale.x);
		var _g = object;
		_g.set_y(_g.get_y() - 0.5 * this.height * (this.scaleY - this.initialZoom) * flixel_FlxG.scaleMode.scale.y);
		return object;
	}
	,destroy: function() {
		flixel_util_FlxDestroyUtil.removeChild(this.flashSprite,this._scrollRect);
		if(flixel_FlxG.renderBlit) {
			flixel_util_FlxDestroyUtil.removeChild(this._scrollRect,this._flashBitmap);
			this.screen = flixel_util_FlxDestroyUtil.destroy(this.screen);
			this.buffer = null;
			this._flashBitmap = null;
			this._fill = flixel_util_FlxDestroyUtil.dispose(this._fill);
		} else {
			flixel_util_FlxDestroyUtil.removeChild(this._scrollRect,this.canvas);
			if(this.canvas != null) {
				var _g = 0;
				var _g1 = this.canvas.get_numChildren();
				while(_g < _g1) {
					var i = _g++;
					this.canvas.removeChildAt(0);
				}
				this.canvas = null;
			}
			if(this._headOfDrawStack != null) {
				this.clearDrawStack();
			}
			this._blitMatrix = null;
			this._helperMatrix = null;
			this._helperPoint = null;
		}
		this._bounds = null;
		this.scroll = flixel_util_FlxDestroyUtil.put(this.scroll);
		this.targetOffset = flixel_util_FlxDestroyUtil.put(this.targetOffset);
		this.deadzone = flixel_util_FlxDestroyUtil.put(this.deadzone);
		this.target = null;
		this.flashSprite = null;
		this._scrollRect = null;
		this._flashRect = null;
		this._flashPoint = null;
		this._fxFlashComplete = null;
		this._fxFadeComplete = null;
		this._fxShakeComplete = null;
		flixel_FlxBasic.prototype.destroy.call(this);
	}
	,update: function(elapsed) {
		if(this.target != null) {
			this.updateFollow();
		}
		this.updateScroll();
		this.updateFlash(elapsed);
		this.updateFade(elapsed);
		this.flashSprite.set_filters(this.filtersEnabled ? this._filters : null);
		this.updateFlashSpritePosition();
		this.updateShake(elapsed);
	}
	,updateScroll: function() {
		var zoom = this.zoom / flixel_FlxG.initialZoom;
		var minX = this.minScrollX == null ? null : this.minScrollX - (zoom - 1) * this.width / (2 * zoom);
		var maxX = this.maxScrollX == null ? null : this.maxScrollX + (zoom - 1) * this.width / (2 * zoom);
		var minY = this.minScrollY == null ? null : this.minScrollY - (zoom - 1) * this.height / (2 * zoom);
		var maxY = this.maxScrollY == null ? null : this.maxScrollY + (zoom - 1) * this.height / (2 * zoom);
		var Value = this.scroll.x;
		var Max = maxX != null ? maxX - this.width : null;
		var lowerBound = minX != null && Value < minX ? minX : Value;
		this.scroll.set_x(Max != null && lowerBound > Max ? Max : lowerBound);
		var Value = this.scroll.y;
		var Max = maxY != null ? maxY - this.height : null;
		var lowerBound = minY != null && Value < minY ? minY : Value;
		this.scroll.set_y(Max != null && lowerBound > Max ? Max : lowerBound);
	}
	,updateFollow: function() {
		if(this.deadzone == null) {
			this.target.getMidpoint(this._point);
			this._point.addPoint(this.targetOffset);
			var point = this._point;
			this.scroll.set(point.x - this.width * 0.5,point.y - this.height * 0.5);
			if(point._weak) {
				point.put();
			}
		} else {
			var edge;
			var targetX = this.target.x + this.targetOffset.x;
			var targetY = this.target.y + this.targetOffset.y;
			if(this.style == flixel_FlxCameraFollowStyle.SCREEN_BY_SCREEN) {
				if(targetX >= this.scroll.x + this.width) {
					var _g = this._scrollTarget;
					_g.set_x(_g.x + this.width);
				} else if(targetX < this.scroll.x) {
					var _g = this._scrollTarget;
					_g.set_x(_g.x - this.width);
				}
				if(targetY >= this.scroll.y + this.height) {
					var _g = this._scrollTarget;
					_g.set_y(_g.y + this.height);
				} else if(targetY < this.scroll.y) {
					var _g = this._scrollTarget;
					_g.set_y(_g.y - this.height);
				}
			} else {
				edge = targetX - this.deadzone.x;
				if(this._scrollTarget.x > edge) {
					this._scrollTarget.set_x(edge);
				}
				edge = targetX + this.target.get_width() - this.deadzone.x - this.deadzone.width;
				if(this._scrollTarget.x < edge) {
					this._scrollTarget.set_x(edge);
				}
				edge = targetY - this.deadzone.y;
				if(this._scrollTarget.y > edge) {
					this._scrollTarget.set_y(edge);
				}
				edge = targetY + this.target.get_height() - this.deadzone.y - this.deadzone.height;
				if(this._scrollTarget.y < edge) {
					this._scrollTarget.set_y(edge);
				}
			}
			if(((this.target) instanceof flixel_FlxSprite)) {
				if(this._lastTargetPosition == null) {
					var X = this.target.x;
					var Y = this.target.y;
					if(Y == null) {
						Y = 0;
					}
					if(X == null) {
						X = 0;
					}
					var point = flixel_math_FlxPoint._pool.get().set(X,Y);
					point._inPool = false;
					this._lastTargetPosition = point;
				}
				var _g = this._scrollTarget;
				_g.set_x(_g.x + (this.target.x - this._lastTargetPosition.x) * this.followLead.x);
				var _g = this._scrollTarget;
				_g.set_y(_g.y + (this.target.y - this._lastTargetPosition.y) * this.followLead.y);
				this._lastTargetPosition.set_x(this.target.x);
				this._lastTargetPosition.set_y(this.target.y);
			}
			if(this.followLerp >= 60 / flixel_FlxG.updateFramerate) {
				var _this = this.scroll;
				var point = this._scrollTarget;
				_this.set_x(point.x);
				_this.set_y(point.y);
				if(point._weak) {
					point.put();
				}
			} else {
				var _g = this.scroll;
				_g.set_x(_g.x + (this._scrollTarget.x - this.scroll.x) * this.followLerp * flixel_FlxG.updateFramerate / 60);
				var _g = this.scroll;
				_g.set_y(_g.y + (this._scrollTarget.y - this.scroll.y) * this.followLerp * flixel_FlxG.updateFramerate / 60);
			}
		}
	}
	,updateFlash: function(elapsed) {
		if(this._fxFlashAlpha > 0.0) {
			this._fxFlashAlpha -= elapsed / this._fxFlashDuration;
			if(this._fxFlashAlpha <= 0 && this._fxFlashComplete != null) {
				this._fxFlashComplete();
			}
		}
	}
	,updateFade: function(elapsed) {
		if(this._fxFadeCompleted) {
			return;
		}
		if(this._fxFadeIn) {
			this._fxFadeAlpha -= elapsed / this._fxFadeDuration;
			if(this._fxFadeAlpha <= 0.0) {
				this._fxFadeAlpha = 0.0;
				this.completeFade();
			}
		} else {
			this._fxFadeAlpha += elapsed / this._fxFadeDuration;
			if(this._fxFadeAlpha >= 1.0) {
				this._fxFadeAlpha = 1.0;
				this.completeFade();
			}
		}
	}
	,completeFade: function() {
		this._fxFadeCompleted = true;
		if(this._fxFadeComplete != null) {
			this._fxFadeComplete();
		}
	}
	,updateShake: function(elapsed) {
		if(this._fxShakeDuration > 0) {
			this._fxShakeDuration -= elapsed;
			if(this._fxShakeDuration <= 0) {
				if(this._fxShakeComplete != null) {
					this._fxShakeComplete();
				}
			} else {
				if(this._fxShakeAxes != flixel_util_FlxAxes.Y) {
					var _g = this.flashSprite;
					_g.set_x(_g.get_x() + flixel_FlxG.random.float(-this._fxShakeIntensity * this.width,this._fxShakeIntensity * this.width) * this.zoom * flixel_FlxG.scaleMode.scale.x);
				}
				if(this._fxShakeAxes != flixel_util_FlxAxes.X) {
					var _g = this.flashSprite;
					_g.set_y(_g.get_y() + flixel_FlxG.random.float(-this._fxShakeIntensity * this.height,this._fxShakeIntensity * this.height) * this.zoom * flixel_FlxG.scaleMode.scale.y);
				}
			}
		}
	}
	,updateFlashSpritePosition: function() {
		if(this.flashSprite != null) {
			this.flashSprite.set_x(this.x * flixel_FlxG.scaleMode.scale.x + this._flashOffset.x);
			this.flashSprite.set_y(this.y * flixel_FlxG.scaleMode.scale.y + this._flashOffset.y);
		}
	}
	,updateFlashOffset: function() {
		this._flashOffset.set_x(this.width * 0.5 * flixel_FlxG.scaleMode.scale.x * this.initialZoom);
		this._flashOffset.set_y(this.height * 0.5 * flixel_FlxG.scaleMode.scale.y * this.initialZoom);
	}
	,updateScrollRect: function() {
		var rect = this._scrollRect != null ? this._scrollRect.get_scrollRect() : null;
		if(rect != null) {
			rect.x = rect.y = 0;
			rect.width = this.width * this.initialZoom * flixel_FlxG.scaleMode.scale.x;
			rect.height = this.height * this.initialZoom * flixel_FlxG.scaleMode.scale.y;
			this._scrollRect.set_scrollRect(rect);
			this._scrollRect.set_x(-0.5 * rect.width);
			this._scrollRect.set_y(-0.5 * rect.height);
		}
	}
	,updateInternalSpritePositions: function() {
		if(flixel_FlxG.renderBlit) {
			if(this._flashBitmap != null) {
				this._flashBitmap.set_x(0);
				this._flashBitmap.set_y(0);
			}
		} else if(this.canvas != null) {
			this.canvas.set_x(-0.5 * this.width * (this.scaleX - this.initialZoom) * flixel_FlxG.scaleMode.scale.x);
			this.canvas.set_y(-0.5 * this.height * (this.scaleY - this.initialZoom) * flixel_FlxG.scaleMode.scale.y);
			this.canvas.set_scaleX(this.totalScaleX);
			this.canvas.set_scaleY(this.totalScaleY);
		}
	}
	,follow: function(Target,Style,Lerp) {
		if(Style == null) {
			Style = flixel_FlxCameraFollowStyle.LOCKON;
		}
		if(Lerp == null) {
			Lerp = 60 / flixel_FlxG.updateFramerate;
		}
		this.style = Style;
		this.target = Target;
		this.set_followLerp(Lerp);
		var helper;
		var w = 0;
		var h = 0;
		this._lastTargetPosition = null;
		switch(Style._hx_index) {
		case 0:
			if(this.target != null) {
				w = this.target.get_width();
				h = this.target.get_height();
			}
			var X = (this.width - w) / 2;
			var Y = (this.height - h) / 2 - h * 0.25;
			var Width = w;
			var Height = h;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
			var rect = _this;
			rect._inPool = false;
			this.deadzone = rect;
			break;
		case 1:
			var w = this.width / 8;
			var h = this.height / 3;
			var X = (this.width - w) / 2;
			var Y = (this.height - h) / 2 - h * 0.25;
			var Width = w;
			var Height = h;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
			var rect = _this;
			rect._inPool = false;
			this.deadzone = rect;
			break;
		case 2:
			helper = Math.max(this.width,this.height) / 4;
			var X = (this.width - helper) / 2;
			var Y = (this.height - helper) / 2;
			var Width = helper;
			var Height = helper;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
			var rect = _this;
			rect._inPool = false;
			this.deadzone = rect;
			break;
		case 3:
			helper = Math.max(this.width,this.height) / 8;
			var X = (this.width - helper) / 2;
			var Y = (this.height - helper) / 2;
			var Width = helper;
			var Height = helper;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
			var rect = _this;
			rect._inPool = false;
			this.deadzone = rect;
			break;
		case 4:
			var X = 0;
			var Y = 0;
			var Width = this.width;
			var Height = this.height;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
			var rect = _this;
			rect._inPool = false;
			this.deadzone = rect;
			break;
		case 5:
			this.deadzone = null;
			break;
		}
	}
	,snapToTarget: function() {
		this.updateFollow();
		var _this = this.scroll;
		var point = this._scrollTarget;
		_this.set_x(point.x);
		_this.set_y(point.y);
		if(point._weak) {
			point.put();
		}
	}
	,focusOn: function(point) {
		this.scroll.set(point.x - this.width * 0.5,point.y - this.height * 0.5);
		if(point._weak) {
			point.put();
		}
	}
	,flash: function(Color,Duration,OnComplete,Force) {
		if(Force == null) {
			Force = false;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(Color == null) {
			Color = -1;
		}
		if(!Force && this._fxFlashAlpha > 0.0) {
			return;
		}
		this._fxFlashColor = Color;
		if(Duration <= 0) {
			Duration = 0.000001;
		}
		this._fxFlashDuration = Duration;
		this._fxFlashComplete = OnComplete;
		this._fxFlashAlpha = 1.0;
	}
	,fade: function(Color,Duration,FadeIn,OnComplete,Force) {
		if(Force == null) {
			Force = false;
		}
		if(FadeIn == null) {
			FadeIn = false;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(Color == null) {
			Color = -16777216;
		}
		if(!this._fxFadeCompleted && !Force) {
			return;
		}
		this._fxFadeColor = Color;
		if(Duration <= 0) {
			Duration = 0.000001;
		}
		this._fxFadeIn = FadeIn;
		this._fxFadeDuration = Duration;
		this._fxFadeComplete = OnComplete;
		this._fxFadeAlpha = this._fxFadeIn ? 0.999999 : 0.000001;
		this._fxFadeCompleted = false;
	}
	,shake: function(Intensity,Duration,OnComplete,Force,Axes) {
		if(Force == null) {
			Force = true;
		}
		if(Duration == null) {
			Duration = 0.5;
		}
		if(Intensity == null) {
			Intensity = 0.05;
		}
		if(Axes == null) {
			Axes = flixel_util_FlxAxes.XY;
		}
		if(!Force && this._fxShakeDuration > 0) {
			return;
		}
		this._fxShakeIntensity = Intensity;
		this._fxShakeDuration = Duration;
		this._fxShakeComplete = OnComplete;
		this._fxShakeAxes = Axes;
	}
	,stopFX: function() {
		this._fxFlashAlpha = 0.0;
		this._fxFadeAlpha = 0.0;
		this._fxShakeDuration = 0;
		this.updateFlashSpritePosition();
	}
	,setFilters: function(filters) {
		this._filters = filters;
	}
	,copyFrom: function(Camera) {
		this.setScrollBounds(Camera.minScrollX,Camera.maxScrollX,Camera.minScrollY,Camera.maxScrollY);
		this.target = Camera.target;
		if(this.target != null) {
			if(Camera.deadzone == null) {
				this.deadzone = null;
			} else {
				if(this.deadzone == null) {
					var _this = flixel_math_FlxRect._pool.get();
					var X = 0;
					var Y = 0;
					var Width = 0;
					var Height = 0;
					if(Height == null) {
						Height = 0;
					}
					if(Width == null) {
						Width = 0;
					}
					if(Y == null) {
						Y = 0;
					}
					if(X == null) {
						X = 0;
					}
					_this.x = X;
					_this.y = Y;
					_this.width = Width;
					_this.height = Height;
					var rect = _this;
					rect._inPool = false;
					this.deadzone = rect;
				}
				var _this = this.deadzone;
				var Rect = Camera.deadzone;
				_this.x = Rect.x;
				_this.y = Rect.y;
				_this.width = Rect.width;
				_this.height = Rect.height;
				if(Rect._weak) {
					if(!Rect._inPool) {
						Rect._inPool = true;
						Rect._weak = false;
						flixel_math_FlxRect._pool.putUnsafe(Rect);
					}
				}
			}
		}
		return this;
	}
	,fill: function(Color,BlendAlpha,FxAlpha,graphics) {
		if(FxAlpha == null) {
			FxAlpha = 1.0;
		}
		if(BlendAlpha == null) {
			BlendAlpha = true;
		}
		if(flixel_FlxG.renderBlit) {
			if(BlendAlpha) {
				this._fill.fillRect(this._flashRect,Color);
				this.buffer.copyPixels(this._fill,this._flashRect,this._flashPoint,null,null,BlendAlpha);
			} else {
				this.buffer.fillRect(this._flashRect,Color);
			}
		} else {
			if(FxAlpha == 0) {
				return;
			}
			var targetGraphics = graphics == null ? this.canvas.get_graphics() : graphics;
			targetGraphics.beginFill(Color,FxAlpha);
			targetGraphics.drawRect(this.viewOffsetX - 1,this.viewOffsetY - 1,this.viewWidth + 2,this.viewHeight + 2);
			targetGraphics.endFill();
		}
	}
	,drawFX: function() {
		var alphaComponent;
		if(this._fxFlashAlpha > 0.0) {
			alphaComponent = this._fxFlashColor >> 24 & 255;
			if(flixel_FlxG.renderBlit) {
				this.fill((((alphaComponent <= 0 ? 255 : alphaComponent) * this._fxFlashAlpha | 0) << 24) + (this._fxFlashColor & 16777215));
			} else {
				this.fill(this._fxFlashColor & 16777215,true,(alphaComponent <= 0 ? 255 : alphaComponent) * this._fxFlashAlpha / 255,this.canvas.get_graphics());
			}
		}
		if(this._fxFadeAlpha > 0.0) {
			alphaComponent = this._fxFadeColor >> 24 & 255;
			if(flixel_FlxG.renderBlit) {
				this.fill((((alphaComponent <= 0 ? 255 : alphaComponent) * this._fxFadeAlpha | 0) << 24) + (this._fxFadeColor & 16777215));
			} else {
				this.fill(this._fxFadeColor & 16777215,true,(alphaComponent <= 0 ? 255 : alphaComponent) * this._fxFadeAlpha / 255,this.canvas.get_graphics());
			}
		}
	}
	,checkResize: function() {
		if(flixel_FlxG.renderBlit) {
			if(this.width != this.buffer.width || this.height != this.buffer.height) {
				var oldBuffer = this.screen.graphic;
				this.buffer = new openfl_display_BitmapData(this.width,this.height,true,0);
				this.screen.set_pixels(this.buffer);
				this.screen.origin.set();
				this._flashBitmap.set_bitmapData(this.buffer);
				this._flashRect.width = this.width;
				this._flashRect.height = this.height;
				this._fill = flixel_util_FlxDestroyUtil.dispose(this._fill);
				this._fill = new openfl_display_BitmapData(this.width,this.height,true,0);
				flixel_FlxG.bitmap.removeIfNoUse(oldBuffer);
			}
			this._blitMatrix.identity();
			this._blitMatrix.translate(-this.viewOffsetX,-this.viewOffsetY);
			this._blitMatrix.scale(this.scaleX,this.scaleY);
			this._useBlitMatrix = this.scaleX < this.initialZoom || this.scaleY < this.initialZoom;
		}
	}
	,updateBlitMatrix: function() {
		this._blitMatrix.identity();
		this._blitMatrix.translate(-this.viewOffsetX,-this.viewOffsetY);
		this._blitMatrix.scale(this.scaleX,this.scaleY);
		this._useBlitMatrix = this.scaleX < this.initialZoom || this.scaleY < this.initialZoom;
	}
	,setSize: function(Width,Height) {
		this.set_width(Width);
		this.set_height(Height);
	}
	,setPosition: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.set_x(X);
		this.set_y(Y);
	}
	,setScrollBoundsRect: function(X,Y,Width,Height,UpdateWorld) {
		if(UpdateWorld == null) {
			UpdateWorld = false;
		}
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		if(UpdateWorld) {
			var _this = flixel_FlxG.worldBounds;
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
		}
		this.setScrollBounds(X,X + Width,Y,Y + Height);
	}
	,setScrollBounds: function(MinX,MaxX,MinY,MaxY) {
		this.minScrollX = MinX;
		this.maxScrollX = MaxX;
		this.minScrollY = MinY;
		this.maxScrollY = MaxY;
		this.updateScroll();
	}
	,setScale: function(X,Y) {
		this.scaleX = X;
		this.scaleY = Y;
		this.totalScaleX = this.scaleX * flixel_FlxG.scaleMode.scale.x;
		this.totalScaleY = this.scaleY * flixel_FlxG.scaleMode.scale.y;
		if(flixel_FlxG.renderBlit) {
			this._blitMatrix.identity();
			this._blitMatrix.translate(-this.viewOffsetX,-this.viewOffsetY);
			this._blitMatrix.scale(this.scaleX,this.scaleY);
			this._useBlitMatrix = this.scaleX < this.initialZoom || this.scaleY < this.initialZoom;
			if(this._useBlitMatrix) {
				this._flashBitmap.set_scaleX(this.initialZoom * flixel_FlxG.scaleMode.scale.x);
				this._flashBitmap.set_scaleY(this.initialZoom * flixel_FlxG.scaleMode.scale.y);
			} else {
				this._flashBitmap.set_scaleX(this.totalScaleX);
				this._flashBitmap.set_scaleY(this.totalScaleY);
			}
		}
		this.viewOffsetX = 0.5 * this.width * (this.scaleX - this.initialZoom) / this.scaleX;
		this.viewOffsetWidth = this.width - this.viewOffsetX;
		this.viewWidth = this.width - 2 * this.viewOffsetX;
		this.viewOffsetY = 0.5 * this.height * (this.scaleY - this.initialZoom) / this.scaleY;
		this.viewOffsetHeight = this.height - this.viewOffsetY;
		this.viewHeight = this.height - 2 * this.viewOffsetY;
		this.updateScrollRect();
		this.updateInternalSpritePositions();
		flixel_FlxG.cameras.cameraResized.dispatch(this);
	}
	,onResize: function() {
		this.updateFlashOffset();
		this.setScale(this.scaleX,this.scaleY);
	}
	,containsPoint: function(point,width,height) {
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 0;
		}
		if(point.x + width > this.viewOffsetX && point.x < this.viewOffsetWidth && point.y + height > this.viewOffsetY) {
			return point.y < this.viewOffsetHeight;
		} else {
			return false;
		}
	}
	,set_followLerp: function(Value) {
		var Max = 60 / flixel_FlxG.updateFramerate;
		var lowerBound = Value < 0 ? 0 : Value;
		return this.followLerp = Max != null && lowerBound > Max ? Max : lowerBound;
	}
	,set_width: function(Value) {
		if(this.width != Value && Value > 0) {
			this.width = Value;
			this.viewOffsetX = 0.5 * this.width * (this.scaleX - this.initialZoom) / this.scaleX;
			this.viewOffsetWidth = this.width - this.viewOffsetX;
			this.viewWidth = this.width - 2 * this.viewOffsetX;
			this.updateFlashOffset();
			this.updateScrollRect();
			this.updateInternalSpritePositions();
			flixel_FlxG.cameras.cameraResized.dispatch(this);
		}
		return Value;
	}
	,set_height: function(Value) {
		if(this.height != Value && Value > 0) {
			this.height = Value;
			this.viewOffsetY = 0.5 * this.height * (this.scaleY - this.initialZoom) / this.scaleY;
			this.viewOffsetHeight = this.height - this.viewOffsetY;
			this.viewHeight = this.height - 2 * this.viewOffsetY;
			this.updateFlashOffset();
			this.updateScrollRect();
			this.updateInternalSpritePositions();
			flixel_FlxG.cameras.cameraResized.dispatch(this);
		}
		return Value;
	}
	,set_zoom: function(Zoom) {
		this.zoom = Zoom == 0 ? flixel_FlxCamera.defaultZoom : Zoom;
		this.setScale(this.zoom,this.zoom);
		return this.zoom;
	}
	,set_alpha: function(Alpha) {
		var lowerBound = Alpha < 0 ? 0 : Alpha;
		this.alpha = lowerBound > 1 ? 1 : lowerBound;
		if(flixel_FlxG.renderBlit) {
			this._flashBitmap.set_alpha(Alpha);
		} else {
			this.canvas.set_alpha(Alpha);
		}
		return Alpha;
	}
	,set_angle: function(Angle) {
		this.angle = Angle;
		this.flashSprite.set_rotation(Angle);
		return Angle;
	}
	,set_color: function(Color) {
		this.color = Color;
		var colorTransform;
		if(flixel_FlxG.renderBlit) {
			if(this._flashBitmap == null) {
				return Color;
			}
			colorTransform = this._flashBitmap.get_transform().get_colorTransform();
		} else {
			colorTransform = this.canvas.get_transform().get_colorTransform();
		}
		colorTransform.redMultiplier = (this.color >> 16 & 255) / 255;
		colorTransform.greenMultiplier = (this.color >> 8 & 255) / 255;
		colorTransform.blueMultiplier = (this.color & 255) / 255;
		if(flixel_FlxG.renderBlit) {
			this._flashBitmap.get_transform().set_colorTransform(colorTransform);
		} else {
			this.canvas.get_transform().set_colorTransform(colorTransform);
		}
		return Color;
	}
	,set_antialiasing: function(Antialiasing) {
		this.antialiasing = Antialiasing;
		if(flixel_FlxG.renderBlit) {
			this._flashBitmap.smoothing = Antialiasing;
		}
		return Antialiasing;
	}
	,set_x: function(x) {
		this.x = x;
		this.updateFlashSpritePosition();
		return x;
	}
	,set_y: function(y) {
		this.y = y;
		this.updateFlashSpritePosition();
		return y;
	}
	,set_visible: function(visible) {
		if(this.flashSprite != null) {
			this.flashSprite.set_visible(visible);
		}
		return this.visible = visible;
	}
	,calcOffsetX: function() {
		this.viewOffsetX = 0.5 * this.width * (this.scaleX - this.initialZoom) / this.scaleX;
		this.viewOffsetWidth = this.width - this.viewOffsetX;
		this.viewWidth = this.width - 2 * this.viewOffsetX;
	}
	,calcOffsetY: function() {
		this.viewOffsetY = 0.5 * this.height * (this.scaleY - this.initialZoom) / this.scaleY;
		this.viewOffsetHeight = this.height - this.viewOffsetY;
		this.viewHeight = this.height - 2 * this.viewOffsetY;
	}
	,__class__: flixel_FlxCamera
	,__properties__: $extend(flixel_FlxBasic.prototype.__properties__,{set_antialiasing:"set_antialiasing",set_color:"set_color",set_angle:"set_angle",set_alpha:"set_alpha",set_zoom:"set_zoom",set_height:"set_height",set_width:"set_width",set_followLerp:"set_followLerp",set_y:"set_y",set_x:"set_x"})
});
var flixel_FlxCameraFollowStyle = $hxEnums["flixel.FlxCameraFollowStyle"] = { __ename__ : "flixel.FlxCameraFollowStyle", __constructs__ : ["LOCKON","PLATFORMER","TOPDOWN","TOPDOWN_TIGHT","SCREEN_BY_SCREEN","NO_DEAD_ZONE"]
	,LOCKON: {_hx_index:0,__enum__:"flixel.FlxCameraFollowStyle",toString:$estr}
	,PLATFORMER: {_hx_index:1,__enum__:"flixel.FlxCameraFollowStyle",toString:$estr}
	,TOPDOWN: {_hx_index:2,__enum__:"flixel.FlxCameraFollowStyle",toString:$estr}
	,TOPDOWN_TIGHT: {_hx_index:3,__enum__:"flixel.FlxCameraFollowStyle",toString:$estr}
	,SCREEN_BY_SCREEN: {_hx_index:4,__enum__:"flixel.FlxCameraFollowStyle",toString:$estr}
	,NO_DEAD_ZONE: {_hx_index:5,__enum__:"flixel.FlxCameraFollowStyle",toString:$estr}
};
flixel_FlxCameraFollowStyle.__empty_constructs__ = [flixel_FlxCameraFollowStyle.LOCKON,flixel_FlxCameraFollowStyle.PLATFORMER,flixel_FlxCameraFollowStyle.TOPDOWN,flixel_FlxCameraFollowStyle.TOPDOWN_TIGHT,flixel_FlxCameraFollowStyle.SCREEN_BY_SCREEN,flixel_FlxCameraFollowStyle.NO_DEAD_ZONE];
var flixel_system_FlxVersion = function(Major,Minor,Patch) {
	this.major = Major;
	this.minor = Minor;
	this.patch = Patch;
};
$hxClasses["flixel.system.FlxVersion"] = flixel_system_FlxVersion;
flixel_system_FlxVersion.__name__ = "flixel.system.FlxVersion";
flixel_system_FlxVersion.prototype = {
	major: null
	,minor: null
	,patch: null
	,toString: function() {
		var sha = flixel_system_FlxVersion.sha;
		if(sha != "") {
			sha = "@" + sha.substring(0,7);
		}
		return "HaxeFlixel " + this.major + "." + this.minor + "." + this.patch + sha;
	}
	,__class__: flixel_system_FlxVersion
};
var flixel_system_frontEnds_BitmapFrontEnd = function() {
	this._lastUniqueKeyIndex = 0;
	this.reset();
};
$hxClasses["flixel.system.frontEnds.BitmapFrontEnd"] = flixel_system_frontEnds_BitmapFrontEnd;
flixel_system_frontEnds_BitmapFrontEnd.__name__ = "flixel.system.frontEnds.BitmapFrontEnd";
flixel_system_frontEnds_BitmapFrontEnd.prototype = {
	_cache: null
	,_whitePixel: null
	,_lastUniqueKeyIndex: null
	,onAssetsReload: function(_) {
		var key = haxe_ds_StringMap.keysIterator(this._cache.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var obj = this._cache.h[key1];
			if(obj != null && (obj.assetsClass != null || obj.assetsKey != null)) {
				obj.onAssetsReload();
			}
		}
	}
	,onContext: function() {
		var key = haxe_ds_StringMap.keysIterator(this._cache.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var obj = this._cache.h[key1];
			if(obj != null && obj.isDumped) {
				obj.onContext();
			}
		}
	}
	,dumpCache: function() {
	}
	,undumpCache: function() {
	}
	,checkCache: function(Key) {
		return this._cache.h[Key] != null;
	}
	,create: function(Width,Height,Color,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		return flixel_graphics_FlxGraphic.fromRectangle(Width,Height,Color,Unique,Key);
	}
	,add: function(Graphic,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(((Graphic) instanceof flixel_graphics_FlxGraphic)) {
			return flixel_graphics_FlxGraphic.fromGraphic(Graphic,Unique,Key);
		} else if(((Graphic) instanceof openfl_display_BitmapData)) {
			return flixel_graphics_FlxGraphic.fromBitmapData(Graphic,Unique,Key);
		}
		return flixel_graphics_FlxGraphic.fromAssetKey(Std.string(Graphic),Unique,Key);
	}
	,addGraphic: function(graphic) {
		this._cache.h[graphic.key] = graphic;
		return graphic;
	}
	,get: function(key) {
		return this._cache.h[key];
	}
	,findKeyForBitmap: function(bmd) {
		var key = haxe_ds_StringMap.keysIterator(this._cache.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var obj = this._cache.h[key1];
			if(obj != null && obj.bitmap == bmd) {
				return key1;
			}
		}
		return null;
	}
	,getKeyForClass: function(source) {
		return source.__name__;
	}
	,generateKey: function(systemKey,userKey,unique) {
		if(unique == null) {
			unique = false;
		}
		var key = userKey;
		if(key == null) {
			key = systemKey;
		}
		if(unique || key == null) {
			key = this.getUniqueKey(key);
		}
		return key;
	}
	,getUniqueKey: function(baseKey) {
		if(baseKey == null) {
			baseKey = "pixels";
		}
		if(this._cache.h[baseKey] == null) {
			return baseKey;
		}
		var i = this._lastUniqueKeyIndex;
		var uniqueKey;
		while(true) {
			++i;
			uniqueKey = baseKey + i;
			if(!(this._cache.h[uniqueKey] != null)) {
				break;
			}
		}
		this._lastUniqueKeyIndex = i;
		return uniqueKey;
	}
	,getKeyWithSpacesAndBorders: function(baseKey,frameSize,frameSpacing,frameBorder,region) {
		var result = baseKey;
		if(region != null) {
			result += "_Region:" + region.x + "_" + region.y + "_" + region.width + "_" + region.height;
		}
		if(frameSize != null) {
			result += "_FrameSize:" + frameSize.x + "_" + frameSize.y;
		}
		if(frameSpacing != null) {
			result += "_Spaces:" + frameSpacing.x + "_" + frameSpacing.y;
		}
		if(frameBorder != null) {
			result += "_Border:" + frameBorder.x + "_" + frameBorder.y;
		}
		return result;
	}
	,remove: function(graphic) {
		if(graphic != null) {
			var key = graphic.key;
			if(key != null) {
				openfl_utils_Assets.cache.removeBitmapData(key);
				var _this = this._cache;
				if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
					delete(_this.h[key]);
				}
			}
			graphic.destroy();
		}
	}
	,removeByKey: function(key) {
		if(key != null) {
			var obj = this._cache.h[key];
			if(key != null) {
				openfl_utils_Assets.cache.removeBitmapData(key);
				var _this = this._cache;
				if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
					delete(_this.h[key]);
				}
			}
			if(obj != null) {
				obj.destroy();
			}
		}
	}
	,removeIfNoUse: function(graphic) {
		if(graphic != null && graphic.get_useCount() == 0 && !graphic.persist) {
			this.remove(graphic);
		}
	}
	,clearCache: function() {
		if(this._cache == null) {
			this._cache = new haxe_ds_StringMap();
			return;
		}
		var key = haxe_ds_StringMap.keysIterator(this._cache.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var obj = this._cache.h[key1];
			if(obj != null && !obj.persist && obj.get_useCount() <= 0) {
				if(key1 != null) {
					openfl_utils_Assets.cache.removeBitmapData(key1);
					var _this = this._cache;
					if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
						delete(_this.h[key1]);
					}
				}
				obj.destroy();
			}
		}
	}
	,removeKey: function(key) {
		if(key != null) {
			openfl_utils_Assets.cache.removeBitmapData(key);
			var _this = this._cache;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
		}
	}
	,reset: function() {
		if(this._cache == null) {
			this._cache = new haxe_ds_StringMap();
			return;
		}
		var key = haxe_ds_StringMap.keysIterator(this._cache.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var obj = this._cache.h[key1];
			if(key1 != null) {
				openfl_utils_Assets.cache.removeBitmapData(key1);
				var _this = this._cache;
				if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
					delete(_this.h[key1]);
				}
			}
			if(obj != null) {
				obj.destroy();
			}
		}
	}
	,clearUnused: function() {
		var key = haxe_ds_StringMap.keysIterator(this._cache.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var obj = this._cache.h[key1];
			if(obj != null && obj.get_useCount() <= 0 && !obj.persist && obj.get_destroyOnNoUse()) {
				this.removeByKey(key1);
			}
		}
	}
	,get_maxTextureSize: function() {
		return lime_graphics_opengl_GL.context.getParameter(3379);
	}
	,get_whitePixel: function() {
		if(this._whitePixel == null) {
			var bd = new openfl_display_BitmapData(10,10,true,-1);
			var graphic = flixel_FlxG.bitmap.add(bd,true,"whitePixels");
			graphic.persist = true;
			this._whitePixel = graphic.get_imageFrame().get_frame();
		}
		return this._whitePixel;
	}
	,__class__: flixel_system_frontEnds_BitmapFrontEnd
	,__properties__: {get_whitePixel:"get_whitePixel",get_maxTextureSize:"get_maxTextureSize"}
};
var flixel_system_frontEnds_BitmapLogFrontEnd = function() {
};
$hxClasses["flixel.system.frontEnds.BitmapLogFrontEnd"] = flixel_system_frontEnds_BitmapLogFrontEnd;
flixel_system_frontEnds_BitmapLogFrontEnd.__name__ = "flixel.system.frontEnds.BitmapLogFrontEnd";
flixel_system_frontEnds_BitmapLogFrontEnd.prototype = {
	add: function(Data,Name) {
		if(Name == null) {
			Name = "";
		}
	}
	,clear: function() {
	}
	,clearAt: function(Index) {
		if(Index == null) {
			Index = -1;
		}
	}
	,viewCache: function() {
	}
	,__class__: flixel_system_frontEnds_BitmapLogFrontEnd
};
var flixel_system_frontEnds_CameraFrontEnd = function() {
	this._cameraRect = new openfl_geom_Rectangle();
	this.useBufferLocking = false;
	this.cameraResized = new flixel_util__$FlxSignal_FlxSignal1();
	this.cameraRemoved = new flixel_util__$FlxSignal_FlxSignal1();
	this.cameraAdded = new flixel_util__$FlxSignal_FlxSignal1();
	this.defaults = [];
	this.list = [];
	flixel_FlxCamera._defaultCameras = this.defaults;
};
$hxClasses["flixel.system.frontEnds.CameraFrontEnd"] = flixel_system_frontEnds_CameraFrontEnd;
flixel_system_frontEnds_CameraFrontEnd.__name__ = "flixel.system.frontEnds.CameraFrontEnd";
flixel_system_frontEnds_CameraFrontEnd.prototype = {
	list: null
	,defaults: null
	,cameraAdded: null
	,cameraRemoved: null
	,cameraResized: null
	,useBufferLocking: null
	,_cameraRect: null
	,add: function(NewCamera,DefaultDrawTarget) {
		if(DefaultDrawTarget == null) {
			DefaultDrawTarget = true;
		}
		flixel_FlxG.game.addChildAt(NewCamera.flashSprite,flixel_FlxG.game.getChildIndex(flixel_FlxG.game._inputContainer));
		this.list.push(NewCamera);
		if(DefaultDrawTarget) {
			this.defaults.push(NewCamera);
		}
		NewCamera.ID = this.list.length - 1;
		this.cameraAdded.dispatch(NewCamera);
		return NewCamera;
	}
	,remove: function(Camera,Destroy) {
		if(Destroy == null) {
			Destroy = true;
		}
		var index = this.list.indexOf(Camera);
		if(Camera != null && index != -1) {
			flixel_FlxG.game.removeChild(Camera.flashSprite);
			this.list.splice(index,1);
			HxOverrides.remove(this.defaults,Camera);
		} else {
			return;
		}
		if(flixel_FlxG.renderTile) {
			var _g = 0;
			var _g1 = this.list.length;
			while(_g < _g1) {
				var i = _g++;
				this.list[i].ID = i;
			}
		}
		if(Destroy) {
			Camera.destroy();
		}
		this.cameraRemoved.dispatch(Camera);
	}
	,setDefaultDrawTarget: function(camera,value) {
		if(this.list.indexOf(camera) == -1) {
			return;
		}
		var index = this.defaults.indexOf(camera);
		if(value && index == -1) {
			this.defaults.push(camera);
		} else if(!value) {
			this.defaults.splice(index,1);
		}
	}
	,reset: function(NewCamera) {
		while(this.list.length > 0) this.remove(this.list[0]);
		if(NewCamera == null) {
			NewCamera = new flixel_FlxCamera(0,0,flixel_FlxG.width,flixel_FlxG.height);
		}
		flixel_FlxG.camera = this.add(NewCamera);
		NewCamera.ID = 0;
		flixel_FlxCamera._defaultCameras = this.defaults;
	}
	,flash: function(Color,Duration,OnComplete,Force) {
		if(Force == null) {
			Force = false;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(Color == null) {
			Color = -1;
		}
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.flash(Color,Duration,OnComplete,Force);
		}
	}
	,fade: function(Color,Duration,FadeIn,OnComplete,Force) {
		if(Force == null) {
			Force = false;
		}
		if(FadeIn == null) {
			FadeIn = false;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(Color == null) {
			Color = -16777216;
		}
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.fade(Color,Duration,FadeIn,OnComplete,Force);
		}
	}
	,shake: function(Intensity,Duration,OnComplete,Force,Axes) {
		if(Force == null) {
			Force = true;
		}
		if(Duration == null) {
			Duration = 0.5;
		}
		if(Intensity == null) {
			Intensity = 0.05;
		}
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.shake(Intensity,Duration,OnComplete,Force,Axes);
		}
	}
	,lock: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera == null || !camera.exists || !camera.visible) {
				continue;
			}
			if(flixel_FlxG.renderBlit) {
				camera.checkResize();
				if(this.useBufferLocking) {
					camera.buffer.lock();
				}
			}
			if(flixel_FlxG.renderTile) {
				camera.clearDrawStack();
				camera.canvas.get_graphics().clear();
			}
			if(flixel_FlxG.renderBlit) {
				camera.fill(camera.bgColor,camera.useBgAlphaBlending);
				camera.screen.dirty = true;
			} else {
				camera.fill(camera.bgColor & 16777215,camera.useBgAlphaBlending,(camera.bgColor >> 24 & 255) / 255);
			}
		}
	}
	,render: function() {
		if(flixel_FlxG.renderTile) {
			var _g = 0;
			var _g1 = this.list;
			while(_g < _g1.length) {
				var camera = _g1[_g];
				++_g;
				if(camera != null && camera.exists && camera.visible) {
					camera.render();
				}
			}
		}
	}
	,unlock: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera == null || !camera.exists || !camera.visible) {
				continue;
			}
			camera.drawFX();
			if(flixel_FlxG.renderBlit) {
				if(this.useBufferLocking) {
					camera.buffer.unlock();
				}
				camera.screen.dirty = true;
			}
		}
	}
	,update: function(elapsed) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera != null && camera.exists && camera.active) {
				camera.update(elapsed);
			}
		}
	}
	,resize: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.onResize();
		}
	}
	,get_bgColor: function() {
		if(flixel_FlxG.camera == null) {
			return -16777216;
		} else {
			return flixel_FlxG.camera.bgColor;
		}
	}
	,set_bgColor: function(Color) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.bgColor = Color;
		}
		return Color;
	}
	,__class__: flixel_system_frontEnds_CameraFrontEnd
	,__properties__: {set_bgColor:"set_bgColor",get_bgColor:"get_bgColor"}
};
var flixel_system_frontEnds_ConsoleFrontEnd = function() {
	this.stepAfterCommand = true;
	this.autoPause = true;
};
$hxClasses["flixel.system.frontEnds.ConsoleFrontEnd"] = flixel_system_frontEnds_ConsoleFrontEnd;
flixel_system_frontEnds_ConsoleFrontEnd.__name__ = "flixel.system.frontEnds.ConsoleFrontEnd";
flixel_system_frontEnds_ConsoleFrontEnd.prototype = {
	autoPause: null
	,stepAfterCommand: null
	,registerFunction: function(FunctionAlias,Function1) {
	}
	,registerObject: function(ObjectAlias,AnyObject) {
	}
	,registerClass: function(cl) {
	}
	,registerEnum: function(e) {
	}
	,__class__: flixel_system_frontEnds_ConsoleFrontEnd
};
var flixel_system_frontEnds_DebuggerFrontEnd = function() {
	this.visible = false;
	this.visibilityChanged = new flixel_util__$FlxSignal_FlxSignal0();
	this.drawDebugChanged = new flixel_util__$FlxSignal_FlxSignal0();
	this.drawDebug = false;
	this.toggleKeys = [113,192,220];
	this.precision = 3;
};
$hxClasses["flixel.system.frontEnds.DebuggerFrontEnd"] = flixel_system_frontEnds_DebuggerFrontEnd;
flixel_system_frontEnds_DebuggerFrontEnd.__name__ = "flixel.system.frontEnds.DebuggerFrontEnd";
flixel_system_frontEnds_DebuggerFrontEnd.prototype = {
	precision: null
	,toggleKeys: null
	,drawDebug: null
	,drawDebugChanged: null
	,visibilityChanged: null
	,visible: null
	,setLayout: function(Layout) {
	}
	,resetLayout: function() {
	}
	,addButton: function(Alignment,Icon,UpHandler,ToggleMode,UpdateLayout) {
		if(UpdateLayout == null) {
			UpdateLayout = true;
		}
		if(ToggleMode == null) {
			ToggleMode = false;
		}
		return null;
	}
	,track: function(ObjectOrClass,WindowTitle) {
		return null;
	}
	,addTrackerProfile: function(Profile) {
	}
	,removeButton: function(Button,UpdateLayout) {
		if(UpdateLayout == null) {
			UpdateLayout = true;
		}
	}
	,set_drawDebug: function(Value) {
		if(this.drawDebug == Value) {
			return this.drawDebug;
		}
		this.drawDebug = Value;
		return this.drawDebug;
	}
	,set_visible: function(Value) {
		if(this.visible == Value) {
			return this.visible;
		}
		this.visible = Value;
		return this.visible;
	}
	,__class__: flixel_system_frontEnds_DebuggerFrontEnd
	,__properties__: {set_visible:"set_visible",set_drawDebug:"set_drawDebug"}
};
var flixel_system_frontEnds_HTML5FrontEnd = function() {
	this.browser = this.getBrowser();
	this.platform = this.getPlatform();
	this.onMobile = this.getOnMobile();
};
$hxClasses["flixel.system.frontEnds.HTML5FrontEnd"] = flixel_system_frontEnds_HTML5FrontEnd;
flixel_system_frontEnds_HTML5FrontEnd.__name__ = "flixel.system.frontEnds.HTML5FrontEnd";
flixel_system_frontEnds_HTML5FrontEnd.prototype = {
	browser: null
	,platform: null
	,onMobile: null
	,browserPosition: null
	,getBrowser: function() {
		if(this.userAgentContains(" OPR/")) {
			return flixel_system_frontEnds_FlxBrowser.OPERA;
		} else if(this.userAgentContains("chrome",true)) {
			return flixel_system_frontEnds_FlxBrowser.CHROME;
		} else if($global.navigator.appName == "Netscape") {
			return flixel_system_frontEnds_FlxBrowser.FIREFOX;
		} else if(document.documentMode) {
			return flixel_system_frontEnds_FlxBrowser.INTERNET_EXPLORER;
		} else if(Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor") > 0) {
			return flixel_system_frontEnds_FlxBrowser.SAFARI;
		}
		return flixel_system_frontEnds_FlxBrowser.UNKNOWN;
	}
	,getPlatform: function() {
		if(this.userAgentContains("Win")) {
			return flixel_system_frontEnds_FlxPlatform.WINDOWS;
		} else if(this.userAgentContains("IEMobile")) {
			return flixel_system_frontEnds_FlxPlatform.WINDOWS_PHONE;
		} else if(this.userAgentContains("Android")) {
			return flixel_system_frontEnds_FlxPlatform.ANDROID;
		} else if(this.userAgentContains("Linux")) {
			return flixel_system_frontEnds_FlxPlatform.LINUX;
		} else if(this.userAgentContains("BlackBerry")) {
			return flixel_system_frontEnds_FlxPlatform.BLACKBERRY;
		} else if(this.userAgentContains("iPhone")) {
			return flixel_system_frontEnds_FlxPlatform.IOS(flixel_system_frontEnds_FlxIOSDevice.IPHONE);
		} else if(this.userAgentContains("iPad")) {
			return flixel_system_frontEnds_FlxPlatform.IOS(flixel_system_frontEnds_FlxIOSDevice.IPAD);
		} else if(this.userAgentContains("iPod")) {
			return flixel_system_frontEnds_FlxPlatform.IOS(flixel_system_frontEnds_FlxIOSDevice.IPOD);
		} else if(this.userAgentContains("Mac")) {
			return flixel_system_frontEnds_FlxPlatform.MAC;
		} else {
			return flixel_system_frontEnds_FlxPlatform.UNKNOWN;
		}
	}
	,getOnMobile: function() {
		var _g = this.platform;
		switch(_g._hx_index) {
		case 3:case 4:case 5:
			return true;
		case 6:
			var _g1 = _g.device;
			return true;
		default:
			return false;
		}
	}
	,userAgentContains: function(substring,toLowerCase) {
		if(toLowerCase == null) {
			toLowerCase = false;
		}
		var userAgent = $global.navigator.userAgent;
		if(toLowerCase) {
			userAgent = userAgent.toLowerCase();
		}
		return userAgent.indexOf(substring) != -1;
	}
	,get_browserPosition: function() {
		if(this.browserPosition == null) {
			var X = 0;
			var Y = 0;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			this.browserPosition = point;
		}
		this.browserPosition.set(window.screenX,window.screenY);
		return this.browserPosition;
	}
	,get_browserWidth: function() {
		return window.innerWidth;
	}
	,get_browserHeight: function() {
		return window.innerHeight;
	}
	,__class__: flixel_system_frontEnds_HTML5FrontEnd
	,__properties__: {get_browserPosition:"get_browserPosition",get_browserHeight:"get_browserHeight",get_browserWidth:"get_browserWidth"}
};
var flixel_system_frontEnds_InputFrontEnd = function() {
	this.resetOnStateSwitch = true;
	this.list = [];
};
$hxClasses["flixel.system.frontEnds.InputFrontEnd"] = flixel_system_frontEnds_InputFrontEnd;
flixel_system_frontEnds_InputFrontEnd.__name__ = "flixel.system.frontEnds.InputFrontEnd";
flixel_system_frontEnds_InputFrontEnd.prototype = {
	add_flixel_input_gamepad_FlxGamepadManager: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.getClassName(Input,true) == flixel_util_FlxStringUtil.getClassName(input,true)) {
				return Input;
			}
		}
		this.list.push(Input);
		return Input;
	}
	,add_flixel_input_touch_FlxTouchManager: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.getClassName(Input,true) == flixel_util_FlxStringUtil.getClassName(input,true)) {
				return Input;
			}
		}
		this.list.push(Input);
		return Input;
	}
	,add_flixel_input_keyboard_FlxKeyboard: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.getClassName(Input,true) == flixel_util_FlxStringUtil.getClassName(input,true)) {
				return Input;
			}
		}
		this.list.push(Input);
		return Input;
	}
	,replace_flixel_input_mouse_FlxMouse: function(Old,New) {
		var i = 0;
		var success = false;
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(input == Old) {
				this.list[i] = New;
				success = true;
				break;
			}
			++i;
		}
		if(success) {
			return New;
		}
		return null;
	}
	,add_flixel_input_mouse_FlxMouse: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.getClassName(Input,true) == flixel_util_FlxStringUtil.getClassName(input,true)) {
				return Input;
			}
		}
		this.list.push(Input);
		return Input;
	}
	,list: null
	,resetOnStateSwitch: null
	,reset: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.reset();
		}
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.update();
		}
	}
	,onFocus: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.onFocus();
		}
	}
	,onFocusLost: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.onFocusLost();
		}
	}
	,onStateSwitch: function() {
		if(this.resetOnStateSwitch) {
			this.reset();
		}
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input = flixel_util_FlxDestroyUtil.destroy(input);
		}
	}
	,__class__: flixel_system_frontEnds_InputFrontEnd
};
var flixel_system_frontEnds_LogFrontEnd = function() {
	this.redirectTraces = false;
	this._standardTraceFunction = haxe_Log.trace;
};
$hxClasses["flixel.system.frontEnds.LogFrontEnd"] = flixel_system_frontEnds_LogFrontEnd;
flixel_system_frontEnds_LogFrontEnd.__name__ = "flixel.system.frontEnds.LogFrontEnd";
flixel_system_frontEnds_LogFrontEnd.prototype = {
	redirectTraces: null
	,_standardTraceFunction: null
	,add: function(Data) {
	}
	,warn: function(Data) {
	}
	,error: function(Data) {
	}
	,notice: function(Data) {
	}
	,advanced: function(Data,Style,FireOnce) {
		if(FireOnce == null) {
			FireOnce = false;
		}
	}
	,clear: function() {
	}
	,set_redirectTraces: function(Redirect) {
		haxe_Log.trace = Redirect ? $bind(this,this.processTraceData) : this._standardTraceFunction;
		return this.redirectTraces = Redirect;
	}
	,processTraceData: function(Data,Info) {
		var paramArray = [Data];
		if(Info.customParams != null) {
			var _g = 0;
			var _g1 = Info.customParams;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				paramArray.push(i);
			}
		}
		this.advanced(paramArray,flixel_system_debug_log_LogStyle.NORMAL);
	}
	,__class__: flixel_system_frontEnds_LogFrontEnd
	,__properties__: {set_redirectTraces:"set_redirectTraces"}
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__toStr = null;
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var flixel_math_FlxRandom = function(InitialSeed) {
	this.internalSeed = 1;
	this._floatNormalRho = 0;
	this._twoPI = Math.PI * 2;
	this._floatNormalRand2 = 0;
	this._floatNormalRand1 = 0;
	this._hasFloatNormalSpare = false;
	this.initialSeed = 1;
	if(InitialSeed != null) {
		var lowerBound = InitialSeed < 1 ? 1 : InitialSeed;
		var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		this.initialSeed = (this.internalSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0) | 0;
	} else {
		var Value = Math.random() * 2147483647 | 0;
		var lowerBound = Value < 1 ? 1 : Value;
		var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		this.initialSeed = (this.internalSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0) | 0;
	}
};
$hxClasses["flixel.math.FlxRandom"] = flixel_math_FlxRandom;
flixel_math_FlxRandom.__name__ = "flixel.math.FlxRandom";
flixel_math_FlxRandom.rangeBound = function(Value) {
	var lowerBound = Value < 1 ? 1 : Value;
	return (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
};
flixel_math_FlxRandom.prototype = {
	getObject_flixel_group_FlxTypedGroup_T: function(Objects,WeightsArray,StartIndex,EndIndex) {
		if(StartIndex == null) {
			StartIndex = 0;
		}
		var selected = null;
		if(Objects.length != 0) {
			if(WeightsArray == null) {
				var _g = [];
				var _g1 = 0;
				var _g2 = Objects.length;
				while(_g1 < _g2) {
					var i = _g1++;
					_g.push(1);
				}
				WeightsArray = _g;
			}
			if(EndIndex == null) {
				EndIndex = Objects.length - 1;
			}
			var Max = Objects.length - 1;
			var lowerBound = StartIndex < 0 ? 0 : StartIndex;
			StartIndex = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
			var Max = Objects.length - 1;
			var lowerBound = EndIndex < 0 ? 0 : EndIndex;
			EndIndex = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
			if(EndIndex < StartIndex) {
				StartIndex += EndIndex;
				EndIndex = StartIndex - EndIndex;
				StartIndex -= EndIndex;
			}
			if(EndIndex > WeightsArray.length - 1) {
				EndIndex = WeightsArray.length - 1;
			}
			var _g = [];
			var _g1 = StartIndex;
			var _g2 = EndIndex + 1;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(WeightsArray[i]);
			}
			flixel_math_FlxRandom._arrayFloatHelper = _g;
			selected = Objects[StartIndex + this.weightedPick(flixel_math_FlxRandom._arrayFloatHelper)];
		}
		return selected;
	}
	,getObject_Array_String: function(Objects,WeightsArray,StartIndex,EndIndex) {
		if(StartIndex == null) {
			StartIndex = 0;
		}
		var selected = null;
		if(Objects.length != 0) {
			if(WeightsArray == null) {
				var _g = [];
				var _g1 = 0;
				var _g2 = Objects.length;
				while(_g1 < _g2) {
					var i = _g1++;
					_g.push(1);
				}
				WeightsArray = _g;
			}
			if(EndIndex == null) {
				EndIndex = Objects.length - 1;
			}
			var Max = Objects.length - 1;
			var lowerBound = StartIndex < 0 ? 0 : StartIndex;
			StartIndex = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
			var Max = Objects.length - 1;
			var lowerBound = EndIndex < 0 ? 0 : EndIndex;
			EndIndex = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
			if(EndIndex < StartIndex) {
				StartIndex += EndIndex;
				EndIndex = StartIndex - EndIndex;
				StartIndex -= EndIndex;
			}
			if(EndIndex > WeightsArray.length - 1) {
				EndIndex = WeightsArray.length - 1;
			}
			var _g = [];
			var _g1 = StartIndex;
			var _g2 = EndIndex + 1;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(WeightsArray[i]);
			}
			flixel_math_FlxRandom._arrayFloatHelper = _g;
			selected = Objects[StartIndex + this.weightedPick(flixel_math_FlxRandom._arrayFloatHelper)];
		}
		return selected;
	}
	,getObject_flixel_system_FlxSound: function(Objects,WeightsArray,StartIndex,EndIndex) {
		if(StartIndex == null) {
			StartIndex = 0;
		}
		var selected = null;
		if(Objects.length != 0) {
			if(WeightsArray == null) {
				var _g = [];
				var _g1 = 0;
				var _g2 = Objects.length;
				while(_g1 < _g2) {
					var i = _g1++;
					_g.push(1);
				}
				WeightsArray = _g;
			}
			if(EndIndex == null) {
				EndIndex = Objects.length - 1;
			}
			var Max = Objects.length - 1;
			var lowerBound = StartIndex < 0 ? 0 : StartIndex;
			StartIndex = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
			var Max = Objects.length - 1;
			var lowerBound = EndIndex < 0 ? 0 : EndIndex;
			EndIndex = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
			if(EndIndex < StartIndex) {
				StartIndex += EndIndex;
				EndIndex = StartIndex - EndIndex;
				StartIndex -= EndIndex;
			}
			if(EndIndex > WeightsArray.length - 1) {
				EndIndex = WeightsArray.length - 1;
			}
			var _g = [];
			var _g1 = StartIndex;
			var _g2 = EndIndex + 1;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(WeightsArray[i]);
			}
			flixel_math_FlxRandom._arrayFloatHelper = _g;
			selected = Objects[StartIndex + this.weightedPick(flixel_math_FlxRandom._arrayFloatHelper)];
		}
		return selected;
	}
	,initialSeed: null
	,resetInitialSeed: function() {
		var Value = Math.random() * 2147483647 | 0;
		var lowerBound = Value < 1 ? 1 : Value;
		var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		return this.initialSeed = (this.internalSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0) | 0;
	}
	,int: function(Min,Max,Excludes) {
		if(Max == null) {
			Max = 2147483647;
		}
		if(Min == null) {
			Min = 0;
		}
		if(Min == 0 && Max == 2147483647 && Excludes == null) {
			return (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) | 0;
		} else if(Min == Max) {
			return Min;
		} else {
			if(Min > Max) {
				Min += Max;
				Max = Min - Max;
				Min -= Max;
			}
			if(Excludes == null) {
				return Math.floor(Min + (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647 * (Max - Min + 1));
			} else {
				var result = 0;
				while(true) {
					result = Math.floor(Min + (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647 * (Max - Min + 1));
					if(!(Excludes.indexOf(result) >= 0)) {
						break;
					}
				}
				return result;
			}
		}
	}
	,float: function(Min,Max,Excludes) {
		if(Max == null) {
			Max = 1;
		}
		if(Min == null) {
			Min = 0;
		}
		var result = 0;
		if(Min == 0 && Max == 1 && Excludes == null) {
			return (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647;
		} else if(Min == Max) {
			result = Min;
		} else {
			if(Min > Max) {
				Min += Max;
				Max = Min - Max;
				Min -= Max;
			}
			if(Excludes == null) {
				result = Min + (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647 * (Max - Min);
			} else {
				while(true) {
					result = Min + (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647 * (Max - Min);
					if(!(Excludes.indexOf(result) >= 0)) {
						break;
					}
				}
			}
		}
		return result;
	}
	,_hasFloatNormalSpare: null
	,_floatNormalRand1: null
	,_floatNormalRand2: null
	,_twoPI: null
	,_floatNormalRho: null
	,floatNormal: function(Mean,StdDev) {
		if(StdDev == null) {
			StdDev = 1;
		}
		if(Mean == null) {
			Mean = 0;
		}
		if(this._hasFloatNormalSpare) {
			this._hasFloatNormalSpare = false;
			var scale = StdDev * this._floatNormalRho;
			return Mean + scale * this._floatNormalRand2;
		}
		this._hasFloatNormalSpare = true;
		var theta = this._twoPI * ((this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647);
		this._floatNormalRho = Math.sqrt(-2 * Math.log(1 - (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647));
		var scale = StdDev * this._floatNormalRho;
		this._floatNormalRand1 = Math.cos(theta);
		this._floatNormalRand2 = Math.sin(theta);
		return Mean + scale * this._floatNormalRand1;
	}
	,bool: function(Chance) {
		if(Chance == null) {
			Chance = 50;
		}
		return this.float(0,100) < Chance;
	}
	,sign: function(Chance) {
		if(Chance == null) {
			Chance = 50;
		}
		var Chance1 = Chance;
		if(Chance1 == null) {
			Chance1 = 50;
		}
		if(this.float(0,100) < Chance1) {
			return 1;
		} else {
			return -1;
		}
	}
	,weightedPick: function(WeightsArray) {
		var totalWeight = 0;
		var pick = 0;
		var _g = 0;
		while(_g < WeightsArray.length) {
			var i = WeightsArray[_g];
			++_g;
			totalWeight += i;
		}
		totalWeight = this.float(0,totalWeight);
		var _g = 0;
		var _g1 = WeightsArray.length;
		while(_g < _g1) {
			var i = _g++;
			if(totalWeight < WeightsArray[i]) {
				pick = i;
				break;
			}
			totalWeight -= WeightsArray[i];
		}
		return pick;
	}
	,color: function(Min,Max,Alpha,GreyScale) {
		if(GreyScale == null) {
			GreyScale = false;
		}
		var red;
		var green;
		var blue;
		var alpha;
		if(Min == null && Max == null) {
			red = this.int(0,255);
			green = this.int(0,255);
			blue = this.int(0,255);
			alpha = Alpha == null ? this.int(0,255) : Alpha;
		} else if(Max == null) {
			red = this.int(Min >> 16 & 255,255);
			green = GreyScale ? red : this.int(Min >> 8 & 255,255);
			blue = GreyScale ? red : this.int(Min & 255,255);
			alpha = Alpha == null ? this.int(Min >> 24 & 255,255) : Alpha;
		} else if(Min == null) {
			red = this.int(0,Max >> 16 & 255);
			green = GreyScale ? red : this.int(0,Max >> 8 & 255);
			blue = GreyScale ? red : this.int(0,Max & 255);
			alpha = Alpha == null ? this.int(0,Max >> 24 & 255) : Alpha;
		} else {
			red = this.int(Min >> 16 & 255,Max >> 16 & 255);
			green = GreyScale ? red : this.int(Min >> 8 & 255,Max >> 8 & 255);
			blue = GreyScale ? red : this.int(Min & 255,Max & 255);
			alpha = Alpha == null ? this.int(Min >> 24 & 255,Max >> 24 & 255) : Alpha;
		}
		var Alpha = alpha;
		if(Alpha == null) {
			Alpha = 255;
		}
		var color = flixel_util_FlxColor._new();
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 255;
		}
		color &= -16711681;
		color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
		color &= -65281;
		color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
		color &= -256;
		color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
		color &= 16777215;
		color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
		return color;
	}
	,generate: function() {
		return this.internalSeed = this.internalSeed * 48271.0 % 2147483647;
	}
	,internalSeed: null
	,set_initialSeed: function(NewSeed) {
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		return this.initialSeed = (this.internalSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0) | 0;
	}
	,get_currentSeed: function() {
		return this.internalSeed | 0;
	}
	,set_currentSeed: function(NewSeed) {
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		return (this.internalSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0) | 0;
	}
	,__class__: flixel_math_FlxRandom
	,__properties__: {set_currentSeed:"set_currentSeed",get_currentSeed:"get_currentSeed",set_initialSeed:"set_initialSeed"}
};
var flixel_util_FlxSave = function() {
	this._closeRequested = false;
};
$hxClasses["flixel.util.FlxSave"] = flixel_util_FlxSave;
flixel_util_FlxSave.__name__ = "flixel.util.FlxSave";
flixel_util_FlxSave.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_util_FlxSave.prototype = {
	data: null
	,name: null
	,path: null
	,_sharedObject: null
	,_onComplete: null
	,_closeRequested: null
	,destroy: function() {
		this._sharedObject = null;
		this.name = null;
		this.path = null;
		this.data = null;
		this._onComplete = null;
		this._closeRequested = false;
	}
	,bind: function(Name,Path) {
		this.destroy();
		this.name = Name;
		this.path = Path;
		try {
			this._sharedObject = openfl_net_SharedObject.getLocal(this.name,this.path);
		} catch( _g ) {
			if(((haxe_Exception.caught(_g)) instanceof openfl_errors_Error)) {
				this.destroy();
				return false;
			} else {
				throw _g;
			}
		}
		this.data = this._sharedObject.data;
		return true;
	}
	,close: function(MinFileSize,OnComplete) {
		if(MinFileSize == null) {
			MinFileSize = 0;
		}
		this._closeRequested = true;
		return this.flush(MinFileSize,OnComplete);
	}
	,flush: function(MinFileSize,OnComplete) {
		if(MinFileSize == null) {
			MinFileSize = 0;
		}
		if(!this.checkBinding()) {
			return false;
		}
		this._onComplete = OnComplete;
		var result = null;
		try {
			result = this._sharedObject.flush();
		} catch( _g ) {
			if(((haxe_Exception.caught(_g)) instanceof openfl_errors_Error)) {
				return this.onDone(flixel_util_FlxSaveStatus.ERROR);
			} else {
				throw _g;
			}
		}
		return this.onDone(result == 0 ? flixel_util_FlxSaveStatus.SUCCESS : flixel_util_FlxSaveStatus.PENDING);
	}
	,erase: function() {
		if(!this.checkBinding()) {
			return false;
		}
		this._sharedObject.clear();
		this.data = { };
		return true;
	}
	,onDone: function(Result) {
		switch(Result._hx_index) {
		case 1:
			break;
		case 2:
			break;
		default:
		}
		if(this._onComplete != null) {
			this._onComplete(Result == flixel_util_FlxSaveStatus.SUCCESS);
		}
		if(this._closeRequested) {
			this.destroy();
		}
		return Result == flixel_util_FlxSaveStatus.SUCCESS;
	}
	,checkBinding: function() {
		if(this._sharedObject == null) {
			return false;
		}
		return true;
	}
	,__class__: flixel_util_FlxSave
};
var flixel_system_scaleModes_BaseScaleMode = function() {
	this.verticalAlign = flixel_util_FlxVerticalAlign.CENTER;
	this.horizontalAlign = flixel_util_FlxHorizontalAlign.CENTER;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.deviceSize = point;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.gameSize = point;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.scale = point;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.offset = point;
};
$hxClasses["flixel.system.scaleModes.BaseScaleMode"] = flixel_system_scaleModes_BaseScaleMode;
flixel_system_scaleModes_BaseScaleMode.__name__ = "flixel.system.scaleModes.BaseScaleMode";
flixel_system_scaleModes_BaseScaleMode.prototype = {
	deviceSize: null
	,gameSize: null
	,scale: null
	,offset: null
	,horizontalAlign: null
	,verticalAlign: null
	,onMeasure: function(Width,Height) {
		flixel_FlxG.width = flixel_FlxG.initialWidth;
		flixel_FlxG.height = flixel_FlxG.initialHeight;
		this.updateGameSize(Width,Height);
		this.updateDeviceSize(Width,Height);
		this.updateScaleOffset();
		this.updateGamePosition();
	}
	,updateGameSize: function(Width,Height) {
		this.gameSize.set(Width,Height);
	}
	,updateDeviceSize: function(Width,Height) {
		this.deviceSize.set(Width,Height);
	}
	,updateScaleOffset: function() {
		this.scale.set_x(this.gameSize.x / (flixel_FlxG.width * flixel_FlxG.initialZoom));
		this.scale.set_y(this.gameSize.y / (flixel_FlxG.height * flixel_FlxG.initialZoom));
		this.updateOffsetX();
		this.updateOffsetY();
	}
	,updateOffsetX: function() {
		var tmp;
		switch(this.horizontalAlign._hx_index) {
		case 0:
			tmp = 0;
			break;
		case 1:
			tmp = Math.ceil((this.deviceSize.x - this.gameSize.x) * 0.5);
			break;
		case 2:
			tmp = this.deviceSize.x - this.gameSize.x;
			break;
		}
		this.offset.set_x(tmp);
	}
	,updateOffsetY: function() {
		var tmp;
		switch(this.verticalAlign._hx_index) {
		case 0:
			tmp = 0;
			break;
		case 1:
			tmp = Math.ceil((this.deviceSize.y - this.gameSize.y) * 0.5);
			break;
		case 2:
			tmp = this.deviceSize.y - this.gameSize.y;
			break;
		}
		this.offset.set_y(tmp);
	}
	,updateGamePosition: function() {
		if(flixel_FlxG.game == null) {
			return;
		}
		flixel_FlxG.game.set_x(this.offset.x);
		flixel_FlxG.game.set_y(this.offset.y);
	}
	,set_horizontalAlign: function(value) {
		this.horizontalAlign = value;
		if(this.offset != null) {
			this.updateOffsetX();
			this.updateGamePosition();
		}
		return value;
	}
	,set_verticalAlign: function(value) {
		this.verticalAlign = value;
		if(this.offset != null) {
			this.updateOffsetY();
			this.updateGamePosition();
		}
		return value;
	}
	,__class__: flixel_system_scaleModes_BaseScaleMode
	,__properties__: {set_verticalAlign:"set_verticalAlign",set_horizontalAlign:"set_horizontalAlign"}
};
var flixel_system_scaleModes_RatioScaleMode = function(fillScreen) {
	if(fillScreen == null) {
		fillScreen = false;
	}
	flixel_system_scaleModes_BaseScaleMode.call(this);
	this.fillScreen = fillScreen;
};
$hxClasses["flixel.system.scaleModes.RatioScaleMode"] = flixel_system_scaleModes_RatioScaleMode;
flixel_system_scaleModes_RatioScaleMode.__name__ = "flixel.system.scaleModes.RatioScaleMode";
flixel_system_scaleModes_RatioScaleMode.__super__ = flixel_system_scaleModes_BaseScaleMode;
flixel_system_scaleModes_RatioScaleMode.prototype = $extend(flixel_system_scaleModes_BaseScaleMode.prototype,{
	fillScreen: null
	,updateGameSize: function(Width,Height) {
		var ratio = flixel_FlxG.width / flixel_FlxG.height;
		var realRatio = Width / Height;
		var scaleY = realRatio < ratio;
		if(this.fillScreen) {
			scaleY = !scaleY;
		}
		if(scaleY) {
			this.gameSize.set_x(Width);
			this.gameSize.set_y(Math.floor(this.gameSize.x / ratio));
		} else {
			this.gameSize.set_y(Height);
			this.gameSize.set_x(Math.floor(this.gameSize.y * ratio));
		}
	}
	,__class__: flixel_system_scaleModes_RatioScaleMode
});
var flixel_system_frontEnds_SignalFrontEnd = function() {
	this.focusLost = new flixel_util__$FlxSignal_FlxSignal0();
	this.focusGained = new flixel_util__$FlxSignal_FlxSignal0();
	this.postDraw = new flixel_util__$FlxSignal_FlxSignal0();
	this.preDraw = new flixel_util__$FlxSignal_FlxSignal0();
	this.postUpdate = new flixel_util__$FlxSignal_FlxSignal0();
	this.preUpdate = new flixel_util__$FlxSignal_FlxSignal0();
	this.postGameStart = new flixel_util__$FlxSignal_FlxSignal0();
	this.preGameStart = new flixel_util__$FlxSignal_FlxSignal0();
	this.postGameReset = new flixel_util__$FlxSignal_FlxSignal0();
	this.preGameReset = new flixel_util__$FlxSignal_FlxSignal0();
	this.gameResized = new flixel_util__$FlxSignal_FlxSignal2();
	this.preStateCreate = new flixel_util__$FlxSignal_FlxSignal1();
	this.postStateSwitch = new flixel_util__$FlxSignal_FlxSignal0();
	this.preStateSwitch = new flixel_util__$FlxSignal_FlxSignal0();
};
$hxClasses["flixel.system.frontEnds.SignalFrontEnd"] = flixel_system_frontEnds_SignalFrontEnd;
flixel_system_frontEnds_SignalFrontEnd.__name__ = "flixel.system.frontEnds.SignalFrontEnd";
flixel_system_frontEnds_SignalFrontEnd.prototype = {
	preStateSwitch: null
	,postStateSwitch: null
	,preStateCreate: null
	,gameResized: null
	,preGameReset: null
	,postGameReset: null
	,preGameStart: null
	,postGameStart: null
	,preUpdate: null
	,postUpdate: null
	,preDraw: null
	,postDraw: null
	,focusGained: null
	,focusLost: null
	,get_stateSwitched: function() {
		return this.preStateSwitch;
	}
	,get_gameStarted: function() {
		return this.postGameStart;
	}
	,__class__: flixel_system_frontEnds_SignalFrontEnd
	,__properties__: {get_gameStarted:"get_gameStarted",get_stateSwitched:"get_stateSwitched"}
};
var flixel_system_frontEnds_WatchFrontEnd = function() {
};
$hxClasses["flixel.system.frontEnds.WatchFrontEnd"] = flixel_system_frontEnds_WatchFrontEnd;
flixel_system_frontEnds_WatchFrontEnd.__name__ = "flixel.system.frontEnds.WatchFrontEnd";
flixel_system_frontEnds_WatchFrontEnd.prototype = {
	add: function(object,field,displayName) {
	}
	,remove: function(object,field) {
	}
	,addQuick: function(displayName,value) {
	}
	,removeQuick: function(displayName) {
	}
	,addExpression: function(expression,displayName) {
	}
	,removeExpression: function(displayName) {
	}
	,addMouse: function() {
	}
	,removeMouse: function() {
	}
	,__class__: flixel_system_frontEnds_WatchFrontEnd
};
var flixel_FlxG = function() { };
$hxClasses["flixel.FlxG"] = flixel_FlxG;
flixel_FlxG.__name__ = "flixel.FlxG";
flixel_FlxG.__properties__ = {set_mouse:"set_mouse",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_scaleMode:"set_scaleMode",get_onMobile:"get_onMobile",set_drawFramerate:"set_drawFramerate",set_updateFramerate:"set_updateFramerate",get_state:"get_state",get_stage:"get_stage"};
flixel_FlxG.camera = null;
flixel_FlxG.game = null;
flixel_FlxG.updateFramerate = null;
flixel_FlxG.drawFramerate = null;
flixel_FlxG.renderMethod = null;
flixel_FlxG.renderBlit = null;
flixel_FlxG.renderTile = null;
flixel_FlxG.width = null;
flixel_FlxG.height = null;
flixel_FlxG.mouse = null;
flixel_FlxG.touches = null;
flixel_FlxG.keys = null;
flixel_FlxG.gamepads = null;
flixel_FlxG.accelerometer = null;
flixel_FlxG.vcr = null;
flixel_FlxG.plugins = null;
flixel_FlxG.sound = null;
flixel_FlxG.resizeGame = function(Width,Height) {
	flixel_FlxG.scaleMode.onMeasure(Width,Height);
};
flixel_FlxG.resizeWindow = function(Width,Height) {
};
flixel_FlxG.resetGame = function() {
	flixel_FlxG.game._resetGame = true;
};
flixel_FlxG.switchState = function(nextState) {
	if(flixel_FlxG.game._state.switchTo(nextState)) {
		flixel_FlxG.game._requestedState = nextState;
	}
};
flixel_FlxG.resetState = function() {
	var nextState = Type.createInstance(js_Boot.getClass(flixel_FlxG.game._state),[]);
	if(flixel_FlxG.game._state.switchTo(nextState)) {
		flixel_FlxG.game._requestedState = nextState;
	}
};
flixel_FlxG.overlap = function(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,ProcessCallback) {
	if(ObjectOrGroup1 == null) {
		ObjectOrGroup1 = flixel_FlxG.game._state;
	}
	if(ObjectOrGroup2 == ObjectOrGroup1) {
		ObjectOrGroup2 = null;
	}
	flixel_system_FlxQuadTree.divisions = flixel_FlxG.worldDivisions;
	var quadTree = flixel_system_FlxQuadTree.recycle(flixel_FlxG.worldBounds.x,flixel_FlxG.worldBounds.y,flixel_FlxG.worldBounds.width,flixel_FlxG.worldBounds.height);
	quadTree.load(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,ProcessCallback);
	var result = quadTree.execute();
	quadTree.destroy();
	return result;
};
flixel_FlxG.pixelPerfectOverlap = function(Sprite1,Sprite2,AlphaTolerance,Camera) {
	if(AlphaTolerance == null) {
		AlphaTolerance = 255;
	}
	return flixel_util_FlxCollision.pixelPerfectCheck(Sprite1,Sprite2,AlphaTolerance,Camera);
};
flixel_FlxG.collide = function(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback) {
	return flixel_FlxG.overlap(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,flixel_FlxObject.separate);
};
flixel_FlxG.addChildBelowMouse = function(Child,IndexModifier) {
	if(IndexModifier == null) {
		IndexModifier = 0;
	}
	var index = flixel_FlxG.game.getChildIndex(flixel_FlxG.game._inputContainer);
	var max = flixel_FlxG.game.get_numChildren();
	index = flixel_math_FlxMath.maxAdd(index,IndexModifier,max);
	flixel_FlxG.game.addChildAt(Child,index);
	return Child;
};
flixel_FlxG.removeChild = function(Child) {
	if(flixel_FlxG.game.contains(Child)) {
		flixel_FlxG.game.removeChild(Child);
	}
	return Child;
};
flixel_FlxG.addPostProcess = function(postProcess) {
	return postProcess;
};
flixel_FlxG.removePostProcess = function(postProcess) {
};
flixel_FlxG.openURL = function(URL1,Target) {
	if(Target == null) {
		Target = "_blank";
	}
	var prefix = "";
	if(!new EReg("^https?://","").match(URL1)) {
		prefix = "http://";
	}
	openfl_Lib.getURL(new openfl_net_URLRequest(prefix + URL1),Target);
};
flixel_FlxG.init = function(Game,Width,Height,Zoom) {
	flixel_FlxG.game = Game;
	flixel_FlxG.width = Math.abs(Width) | 0;
	flixel_FlxG.height = Math.abs(Height) | 0;
	flixel_FlxG.initRenderMethod();
	flixel_FlxG.initialWidth = flixel_FlxG.width;
	flixel_FlxG.initialHeight = flixel_FlxG.height;
	flixel_FlxG.initialZoom = flixel_FlxCamera.defaultZoom = Zoom;
	var Width = openfl_Lib.get_current().stage.stageWidth;
	var Height = openfl_Lib.get_current().stage.stageHeight;
	flixel_FlxG.scaleMode.onMeasure(Width,Height);
	flixel_FlxG.keys = flixel_FlxG.inputs.add_flixel_input_keyboard_FlxKeyboard(new flixel_input_keyboard_FlxKeyboard());
	flixel_FlxG.set_mouse(flixel_FlxG.inputs.add_flixel_input_mouse_FlxMouse(new flixel_input_mouse_FlxMouse(flixel_FlxG.game._inputContainer)));
	flixel_FlxG.touches = flixel_FlxG.inputs.add_flixel_input_touch_FlxTouchManager(new flixel_input_touch_FlxTouchManager());
	flixel_FlxG.gamepads = flixel_FlxG.inputs.add_flixel_input_gamepad_FlxGamepadManager(new flixel_input_gamepad_FlxGamepadManager());
	flixel_FlxG.accelerometer = new flixel_input_FlxAccelerometer();
	flixel_FlxG.save.bind("flixel");
	flixel_FlxG.plugins = new flixel_system_frontEnds_PluginFrontEnd();
	flixel_FlxG.vcr = new flixel_system_frontEnds_VCRFrontEnd();
	flixel_FlxG.sound = new flixel_system_frontEnds_SoundFrontEnd();
};
flixel_FlxG.initRenderMethod = function() {
	flixel_FlxG.renderMethod = flixel_FlxRenderMethod.BLITTING;
	var tmp;
	switch(openfl_Lib.get_current().stage.window.context.type) {
	case "opengl":case "opengles":case "webgl":
		tmp = flixel_FlxRenderMethod.DRAW_TILES;
		break;
	default:
		tmp = flixel_FlxRenderMethod.BLITTING;
	}
	flixel_FlxG.renderMethod = tmp;
	flixel_FlxG.renderBlit = flixel_FlxG.renderMethod == flixel_FlxRenderMethod.BLITTING;
	flixel_FlxG.renderTile = flixel_FlxG.renderMethod == flixel_FlxRenderMethod.DRAW_TILES;
	flixel_FlxObject.defaultPixelPerfectPosition = flixel_FlxG.renderBlit;
};
flixel_FlxG.reset = function() {
	var _this = flixel_FlxG.random;
	var Value = Math.random() * 2147483647 | 0;
	var lowerBound = Value < 1 ? 1 : Value;
	var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
	var lowerBound = NewSeed < 1 ? 1 : NewSeed;
	var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
	var lowerBound = NewSeed < 1 ? 1 : NewSeed;
	_this.initialSeed = (_this.internalSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0) | 0;
	flixel_FlxG.bitmap.reset();
	flixel_FlxG.inputs.reset();
	flixel_FlxG.sound.destroy(true);
	flixel_FlxG.autoPause = true;
	flixel_FlxG.fixedTimestep = true;
	flixel_FlxG.timeScale = 1.0;
	flixel_FlxG.elapsed = 0;
	flixel_FlxG.maxElapsed = 0.1;
	var _this = flixel_FlxG.worldBounds;
	var X = -10;
	var Y = -10;
	var Width = flixel_FlxG.width + 20;
	var Height = flixel_FlxG.height + 20;
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	_this.x = X;
	_this.y = Y;
	_this.width = Width;
	_this.height = Height;
	flixel_FlxG.worldDivisions = 6;
};
flixel_FlxG.set_scaleMode = function(ScaleMode) {
	flixel_FlxG.scaleMode = ScaleMode;
	flixel_FlxG.game.onResize(null);
	return ScaleMode;
};
flixel_FlxG.set_mouse = function(NewMouse) {
	if(flixel_FlxG.mouse == null) {
		flixel_FlxG.mouse = flixel_FlxG.inputs.add_flixel_input_mouse_FlxMouse(NewMouse);
		return flixel_FlxG.mouse;
	}
	var oldMouse = flixel_FlxG.mouse;
	var result = flixel_FlxG.inputs.replace_flixel_input_mouse_FlxMouse(oldMouse,NewMouse);
	if(result != null) {
		flixel_FlxG.mouse = result;
		oldMouse.destroy();
		return NewMouse;
	}
	return oldMouse;
};
flixel_FlxG.set_updateFramerate = function(Framerate) {
	var tmp = Framerate < flixel_FlxG.drawFramerate;
	flixel_FlxG.updateFramerate = Framerate;
	flixel_FlxG.game._stepMS = Math.abs(1000 / Framerate);
	flixel_FlxG.game._stepSeconds = flixel_FlxG.game._stepMS / 1000;
	if(flixel_FlxG.game._maxAccumulation < flixel_FlxG.game._stepMS) {
		flixel_FlxG.game._maxAccumulation = flixel_FlxG.game._stepMS;
	}
	return Framerate;
};
flixel_FlxG.set_drawFramerate = function(Framerate) {
	var tmp = Framerate > flixel_FlxG.updateFramerate;
	flixel_FlxG.drawFramerate = Math.abs(Framerate) | 0;
	if(flixel_FlxG.game.stage != null) {
		flixel_FlxG.game.stage.set_frameRate(flixel_FlxG.drawFramerate);
	}
	flixel_FlxG.game._maxAccumulation = 2000 / flixel_FlxG.drawFramerate - 1;
	if(flixel_FlxG.game._maxAccumulation < flixel_FlxG.game._stepMS) {
		flixel_FlxG.game._maxAccumulation = flixel_FlxG.game._stepMS;
	}
	return Framerate;
};
flixel_FlxG.get_fullscreen = function() {
	if(openfl_Lib.get_current().stage.get_displayState() != 0) {
		return openfl_Lib.get_current().stage.get_displayState() == 1;
	} else {
		return true;
	}
};
flixel_FlxG.set_fullscreen = function(Value) {
	openfl_Lib.get_current().stage.set_displayState(Value ? 0 : 2);
	return Value;
};
flixel_FlxG.get_stage = function() {
	return openfl_Lib.get_current().stage;
};
flixel_FlxG.get_state = function() {
	return flixel_FlxG.game._state;
};
flixel_FlxG.get_onMobile = function() {
	return flixel_FlxG.html5.onMobile;
};
var flixel_FlxRenderMethod = $hxEnums["flixel.FlxRenderMethod"] = { __ename__ : "flixel.FlxRenderMethod", __constructs__ : ["DRAW_TILES","BLITTING"]
	,DRAW_TILES: {_hx_index:0,__enum__:"flixel.FlxRenderMethod",toString:$estr}
	,BLITTING: {_hx_index:1,__enum__:"flixel.FlxRenderMethod",toString:$estr}
};
flixel_FlxRenderMethod.__empty_constructs__ = [flixel_FlxRenderMethod.DRAW_TILES,flixel_FlxRenderMethod.BLITTING];
var flixel_FlxGame = function(GameWidth,GameHeight,InitialState,Zoom,UpdateFramerate,DrawFramerate,SkipSplash,StartFullscreen) {
	if(StartFullscreen == null) {
		StartFullscreen = false;
	}
	if(SkipSplash == null) {
		SkipSplash = false;
	}
	if(DrawFramerate == null) {
		DrawFramerate = 60;
	}
	if(UpdateFramerate == null) {
		UpdateFramerate = 60;
	}
	if(Zoom == null) {
		Zoom = 1;
	}
	if(GameHeight == null) {
		GameHeight = 0;
	}
	if(GameWidth == null) {
		GameWidth = 0;
	}
	this._resetGame = false;
	this._skipSplash = false;
	this._customSoundTray = flixel_system_ui_FlxSoundTray;
	this._lostFocus = false;
	this._startTime = 0;
	this._total = 0;
	this._gameJustStarted = false;
	this.filtersEnabled = true;
	this.ticks = 0;
	this.focusLostFramerate = 10;
	openfl_display_Sprite.call(this);
	this._inputContainer = new openfl_display_Sprite();
	if(GameWidth == 0) {
		GameWidth = openfl_Lib.get_current().stage.stageWidth;
	}
	if(GameHeight == 0) {
		GameHeight = openfl_Lib.get_current().stage.stageHeight;
	}
	flixel_FlxG.init(this,GameWidth,GameHeight,Zoom);
	flixel_FlxG.set_updateFramerate(UpdateFramerate);
	flixel_FlxG.set_drawFramerate(DrawFramerate);
	this._accumulator = this._stepMS;
	this._skipSplash = SkipSplash;
	this._initialState = InitialState == null ? flixel_FlxState : InitialState;
	this.addEventListener("addedToStage",$bind(this,this.create));
};
$hxClasses["flixel.FlxGame"] = flixel_FlxGame;
flixel_FlxGame.__name__ = "flixel.FlxGame";
flixel_FlxGame.__super__ = openfl_display_Sprite;
flixel_FlxGame.prototype = $extend(openfl_display_Sprite.prototype,{
	focusLostFramerate: null
	,soundTray: null
	,ticks: null
	,filtersEnabled: null
	,_gameJustStarted: null
	,_initialState: null
	,_state: null
	,_total: null
	,_startTime: null
	,_accumulator: null
	,_elapsedMS: null
	,_stepMS: null
	,_stepSeconds: null
	,_maxAccumulation: null
	,_lostFocus: null
	,_filters: null
	,_inputContainer: null
	,_customSoundTray: null
	,_skipSplash: null
	,_requestedState: null
	,_resetGame: null
	,setFilters: function(filters) {
		this._filters = filters;
	}
	,create: function(_) {
		if(this.stage == null) {
			return;
		}
		this.removeEventListener("addedToStage",$bind(this,this.create));
		this._startTime = this.getTimer();
		this._total = this.getTimer() - this._startTime;
		this.stage.set_scaleMode(2);
		this.stage.align = 6;
		this.stage.set_frameRate(flixel_FlxG.drawFramerate);
		this.addChild(this._inputContainer);
		this.soundTray = Type.createInstance(this._customSoundTray,[]);
		this.addChild(this.soundTray);
		this.stage.addEventListener("deactivate",$bind(this,this.onFocusLost));
		this.stage.addEventListener("activate",$bind(this,this.onFocus));
		flixel_FlxG.signals.preGameReset.dispatch();
		if(this._skipSplash || flixel_system_FlxSplash.nextState != null) {
			this._requestedState = Type.createInstance(this._initialState,[]);
			if(flixel_system_FlxSplash.nextState == null) {
				this._gameJustStarted = true;
			}
		} else {
			flixel_system_FlxSplash.nextState = this._initialState;
			this._requestedState = new flixel_system_FlxSplash();
			this._skipSplash = true;
		}
		flixel_FlxG.reset();
		flixel_FlxG.signals.postGameReset.dispatch();
		this.switchState();
		var tmp = flixel_FlxG.updateFramerate < flixel_FlxG.drawFramerate;
		this.stage.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
		this.stage.addEventListener("resize",$bind(this,this.onResize));
		this.resizeGame(openfl_Lib.get_current().stage.stageWidth,openfl_Lib.get_current().stage.stageHeight);
		openfl_utils_Assets.addEventListener("change",($_=flixel_FlxG.bitmap,$bind($_,$_.onAssetsReload)));
	}
	,onFocus: function(_) {
		this._lostFocus = false;
		flixel_FlxG.signals.focusGained.dispatch();
		this._state.onFocus();
		if(!flixel_FlxG.autoPause) {
			return;
		}
		this.stage.set_frameRate(flixel_FlxG.drawFramerate);
		flixel_FlxG.sound.onFocus();
		var _g = 0;
		var _g1 = flixel_FlxG.inputs.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.onFocus();
		}
	}
	,onFocusLost: function(event) {
		this._lostFocus = true;
		flixel_FlxG.signals.focusLost.dispatch();
		this._state.onFocusLost();
		if(!flixel_FlxG.autoPause) {
			return;
		}
		this.stage.set_frameRate(this.focusLostFramerate);
		flixel_FlxG.sound.onFocusLost();
		var _g = 0;
		var _g1 = flixel_FlxG.inputs.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.onFocusLost();
		}
	}
	,onResize: function(_) {
		var width = openfl_Lib.get_current().stage.stageWidth;
		var height = openfl_Lib.get_current().stage.stageHeight;
		if(flixel_FlxG.renderTile) {
			flixel_FlxG.bitmap.onContext();
		}
		this.resizeGame(width,height);
	}
	,resizeGame: function(width,height) {
		flixel_FlxG.scaleMode.onMeasure(width,height);
		this._state.onResize(width,height);
		flixel_FlxG.cameras.resize();
		flixel_FlxG.signals.gameResized.dispatch(width,height);
		if(this.soundTray != null) {
			this.soundTray.screenCenter();
		}
	}
	,onEnterFrame: function(_) {
		this.ticks = this.getTimer() - this._startTime;
		this._elapsedMS = this.ticks - this._total;
		this._total = this.ticks;
		if(this.soundTray != null && this.soundTray.active) {
			this.soundTray.update(this._elapsedMS);
		}
		if(!this._lostFocus || !flixel_FlxG.autoPause) {
			if(flixel_FlxG.vcr.paused) {
				if(flixel_FlxG.vcr.stepRequested) {
					flixel_FlxG.vcr.stepRequested = false;
				} else if(this._state == this._requestedState) {
					return;
				}
			}
			if(flixel_FlxG.fixedTimestep) {
				this._accumulator += this._elapsedMS;
				this._accumulator = this._accumulator > this._maxAccumulation ? this._maxAccumulation : this._accumulator;
				while(this._accumulator >= this._stepMS) {
					this.step();
					this._accumulator -= this._stepMS;
				}
			} else {
				this.step();
			}
			this.draw();
		}
	}
	,resetGame: function() {
		flixel_FlxG.signals.preGameReset.dispatch();
		if(this._skipSplash || flixel_system_FlxSplash.nextState != null) {
			this._requestedState = Type.createInstance(this._initialState,[]);
			if(flixel_system_FlxSplash.nextState == null) {
				this._gameJustStarted = true;
			}
		} else {
			flixel_system_FlxSplash.nextState = this._initialState;
			this._requestedState = new flixel_system_FlxSplash();
			this._skipSplash = true;
		}
		flixel_FlxG.reset();
		flixel_FlxG.signals.postGameReset.dispatch();
	}
	,switchState: function() {
		flixel_FlxG.cameras.reset();
		flixel_FlxG.inputs.onStateSwitch();
		flixel_FlxG.sound.destroy();
		flixel_FlxG.signals.preStateSwitch.dispatch();
		if(this._state != null) {
			this._state.destroy();
		}
		flixel_FlxG.bitmap.clearCache();
		this._state = this._requestedState;
		if(this._gameJustStarted) {
			flixel_FlxG.signals.preGameStart.dispatch();
		}
		flixel_FlxG.signals.preStateCreate.dispatch(this._state);
		this._state.create();
		if(this._gameJustStarted) {
			this.gameStart();
		}
		flixel_FlxG.signals.postStateSwitch.dispatch();
	}
	,gameStart: function() {
		flixel_FlxG.signals.postGameStart.dispatch();
		this._gameJustStarted = false;
	}
	,step: function() {
		if(this._resetGame) {
			flixel_FlxG.signals.preGameReset.dispatch();
			if(this._skipSplash || flixel_system_FlxSplash.nextState != null) {
				this._requestedState = Type.createInstance(this._initialState,[]);
				if(flixel_system_FlxSplash.nextState == null) {
					this._gameJustStarted = true;
				}
			} else {
				flixel_system_FlxSplash.nextState = this._initialState;
				this._requestedState = new flixel_system_FlxSplash();
				this._skipSplash = true;
			}
			flixel_FlxG.reset();
			flixel_FlxG.signals.postGameReset.dispatch();
			this._resetGame = false;
		}
		this.handleReplayRequests();
		this.update();
	}
	,handleReplayRequests: function() {
	}
	,update: function() {
		if(!this._state.active || !this._state.exists) {
			return;
		}
		if(this._state != this._requestedState) {
			this.switchState();
		}
		this.updateElapsed();
		flixel_FlxG.signals.preUpdate.dispatch();
		this.updateInput();
		flixel_FlxG.sound.update(flixel_FlxG.elapsed);
		var elapsed = flixel_FlxG.elapsed;
		var _g = 0;
		var _g1 = flixel_FlxG.plugins.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(plugin.exists && plugin.active) {
				plugin.update(elapsed);
			}
		}
		this._state.tryUpdate(flixel_FlxG.elapsed);
		var elapsed = flixel_FlxG.elapsed;
		var _g = 0;
		var _g1 = flixel_FlxG.cameras.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera != null && camera.exists && camera.active) {
				camera.update(elapsed);
			}
		}
		flixel_FlxG.signals.postUpdate.dispatch();
		flixel_util_FlxArrayUtil.clearArray(flixel_FlxG.swipes);
		this.set_filters(this.filtersEnabled ? this._filters : null);
	}
	,updateElapsed: function() {
		if(flixel_FlxG.fixedTimestep) {
			flixel_FlxG.elapsed = flixel_FlxG.timeScale * this._stepSeconds;
		} else {
			flixel_FlxG.elapsed = flixel_FlxG.timeScale * (this._elapsedMS / 1000);
			var max = flixel_FlxG.maxElapsed * flixel_FlxG.timeScale;
			if(flixel_FlxG.elapsed > max) {
				flixel_FlxG.elapsed = max;
			}
		}
	}
	,updateInput: function() {
		var _g = 0;
		var _g1 = flixel_FlxG.inputs.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.update();
		}
	}
	,draw: function() {
		if(!this._state.visible || !this._state.exists) {
			return;
		}
		flixel_FlxG.signals.preDraw.dispatch();
		if(flixel_FlxG.renderTile) {
			flixel_graphics_tile_FlxDrawBaseItem.drawCalls = 0;
		}
		var _this = flixel_FlxG.cameras;
		var _g = 0;
		var _g1 = _this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera == null || !camera.exists || !camera.visible) {
				continue;
			}
			if(flixel_FlxG.renderBlit) {
				camera.checkResize();
				if(_this.useBufferLocking) {
					camera.buffer.lock();
				}
			}
			if(flixel_FlxG.renderTile) {
				camera.clearDrawStack();
				camera.canvas.get_graphics().clear();
			}
			if(flixel_FlxG.renderBlit) {
				camera.fill(camera.bgColor,camera.useBgAlphaBlending);
				camera.screen.dirty = true;
			} else {
				camera.fill(camera.bgColor & 16777215,camera.useBgAlphaBlending,(camera.bgColor >> 24 & 255) / 255);
			}
		}
		var _g = 0;
		var _g1 = flixel_FlxG.plugins.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(plugin.exists && plugin.visible) {
				plugin.draw();
			}
		}
		this._state.draw();
		if(flixel_FlxG.renderTile) {
			if(flixel_FlxG.renderTile) {
				var _g = 0;
				var _g1 = flixel_FlxG.cameras.list;
				while(_g < _g1.length) {
					var camera = _g1[_g];
					++_g;
					if(camera != null && camera.exists && camera.visible) {
						camera.render();
					}
				}
			}
		}
		var _this = flixel_FlxG.cameras;
		var _g = 0;
		var _g1 = _this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera == null || !camera.exists || !camera.visible) {
				continue;
			}
			camera.drawFX();
			if(flixel_FlxG.renderBlit) {
				if(_this.useBufferLocking) {
					camera.buffer.unlock();
				}
				camera.screen.dirty = true;
			}
		}
		flixel_FlxG.signals.postDraw.dispatch();
	}
	,getTicks: function() {
		return this.getTimer() - this._startTime;
	}
	,getTimer: function() {
		return openfl_Lib.getTimer();
	}
	,__class__: flixel_FlxGame
});
var flixel_IFlxSprite = function() { };
$hxClasses["flixel.IFlxSprite"] = flixel_IFlxSprite;
flixel_IFlxSprite.__name__ = "flixel.IFlxSprite";
flixel_IFlxSprite.__isInterface__ = true;
flixel_IFlxSprite.__interfaces__ = [flixel_IFlxBasic];
flixel_IFlxSprite.prototype = {
	set_x: null
	,set_y: null
	,set_alpha: null
	,set_angle: null
	,set_facing: null
	,set_moves: null
	,set_immovable: null
	,x: null
	,y: null
	,alpha: null
	,angle: null
	,facing: null
	,moves: null
	,immovable: null
	,offset: null
	,origin: null
	,scale: null
	,velocity: null
	,maxVelocity: null
	,acceleration: null
	,drag: null
	,scrollFactor: null
	,reset: null
	,setPosition: null
	,__class__: flixel_IFlxSprite
	,__properties__: {set_immovable:"set_immovable",set_moves:"set_moves",set_facing:"set_facing",set_angle:"set_angle",set_alpha:"set_alpha",set_y:"set_y",set_x:"set_x"}
};
var flixel_addons_display_FlxGridOverlay = function() { };
$hxClasses["flixel.addons.display.FlxGridOverlay"] = flixel_addons_display_FlxGridOverlay;
flixel_addons_display_FlxGridOverlay.__name__ = "flixel.addons.display.FlxGridOverlay";
flixel_addons_display_FlxGridOverlay.create = function(CellWidth,CellHeight,Width,Height,Alternate,Color1,Color2) {
	if(Color2 == null) {
		Color2 = -2501163;
	}
	if(Color1 == null) {
		Color1 = -1579290;
	}
	if(Alternate == null) {
		Alternate = true;
	}
	if(Height == null) {
		Height = -1;
	}
	if(Width == null) {
		Width = -1;
	}
	if(Width == -1) {
		Width = flixel_FlxG.width;
	}
	if(Height == -1) {
		Height = flixel_FlxG.height;
	}
	if(Width < CellWidth || Height < CellHeight) {
		return null;
	}
	var grid = flixel_addons_display_FlxGridOverlay.createGrid(CellWidth,CellHeight,Width,Height,Alternate,Color1,Color2);
	var output = new flixel_FlxSprite();
	output.set_pixels(grid);
	output.dirty = true;
	return output;
};
flixel_addons_display_FlxGridOverlay.overlay = function(Sprite,CellWidth,CellHeight,Width,Height,Alternate,Color1,Color2) {
	if(Color2 == null) {
		Color2 = -1998989867;
	}
	if(Color1 == null) {
		Color1 = -1998067994;
	}
	if(Alternate == null) {
		Alternate = true;
	}
	if(Height == null) {
		Height = -1;
	}
	if(Width == null) {
		Width = -1;
	}
	if(Width == -1) {
		Width = flixel_FlxG.width;
	}
	if(Height == -1) {
		Height = flixel_FlxG.height;
	}
	if(Width < CellWidth || Height < CellHeight) {
		return null;
	}
	var grid = flixel_addons_display_FlxGridOverlay.createGrid(CellWidth,CellHeight,Width,Height,Alternate,Color1,Color2);
	Sprite.get_pixels().copyPixels(grid,new openfl_geom_Rectangle(0,0,Width,Height),new openfl_geom_Point(0,0),null,null,true);
	return Sprite;
};
flixel_addons_display_FlxGridOverlay.createGrid = function(CellWidth,CellHeight,Width,Height,Alternate,Color1,Color2) {
	var rowColor = Color1;
	var lastColor = Color1;
	var grid = new openfl_display_BitmapData(Width,Height,true);
	var y = 0;
	while(y <= Height) {
		if(y > 0 && lastColor == rowColor && Alternate) {
			if(lastColor == Color1) {
				lastColor = Color2;
			} else {
				lastColor = Color1;
			}
		} else if(y > 0 && lastColor != rowColor && Alternate == false) {
			if(lastColor == Color2) {
				lastColor = Color1;
			} else {
				lastColor = Color2;
			}
		}
		var x = 0;
		while(x <= Width) {
			if(x == 0) {
				rowColor = lastColor;
			}
			grid.fillRect(new openfl_geom_Rectangle(x,y,CellWidth,CellHeight),lastColor);
			if(lastColor == Color1) {
				lastColor = Color2;
			} else {
				lastColor = Color1;
			}
			x += CellWidth;
		}
		y += CellHeight;
	}
	return grid;
};
var flixel_addons_effects_FlxTrail = function(Target,Graphic,Length,Delay,Alpha,Diff) {
	if(Diff == null) {
		Diff = 0.05;
	}
	if(Alpha == null) {
		Alpha = 0.4;
	}
	if(Delay == null) {
		Delay = 3;
	}
	if(Length == null) {
		Length = 10;
	}
	this._recentAnimations = [];
	this._recentFlipY = [];
	this._recentFlipX = [];
	this._recentFrames = [];
	this._recentScales = [];
	this._recentAngles = [];
	this._recentPositions = [];
	this._transp = 1;
	this._trailLength = 0;
	this._counter = 0;
	this.framesEnabled = true;
	this.scalesEnabled = true;
	this.rotationsEnabled = true;
	this.yEnabled = true;
	this.xEnabled = true;
	flixel_group_FlxTypedSpriteGroup.call(this);
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	var _this = point;
	var point = Target.origin;
	_this.set_x(point.x);
	_this.set_y(point.y);
	if(point._weak) {
		point.put();
	}
	this._spriteOrigin = _this;
	this.target = Target;
	this.delay = Delay;
	this._graphic = Graphic;
	this._transp = Alpha;
	this._difference = Diff;
	this.increaseLength(Length);
	this.set_solid(false);
};
$hxClasses["flixel.addons.effects.FlxTrail"] = flixel_addons_effects_FlxTrail;
flixel_addons_effects_FlxTrail.__name__ = "flixel.addons.effects.FlxTrail";
flixel_addons_effects_FlxTrail.__super__ = flixel_group_FlxTypedSpriteGroup;
flixel_addons_effects_FlxTrail.prototype = $extend(flixel_group_FlxTypedSpriteGroup.prototype,{
	target: null
	,delay: null
	,xEnabled: null
	,yEnabled: null
	,rotationsEnabled: null
	,scalesEnabled: null
	,framesEnabled: null
	,_counter: null
	,_trailLength: null
	,_graphic: null
	,_transp: null
	,_difference: null
	,_recentPositions: null
	,_recentAngles: null
	,_recentScales: null
	,_recentFrames: null
	,_recentFlipX: null
	,_recentFlipY: null
	,_recentAnimations: null
	,_spriteOrigin: null
	,destroy: function() {
		flixel_util_FlxDestroyUtil.putArray(this._recentPositions);
		flixel_util_FlxDestroyUtil.putArray(this._recentScales);
		this._recentAngles = null;
		this._recentPositions = null;
		this._recentScales = null;
		this._recentFrames = null;
		this._recentFlipX = null;
		this._recentFlipY = null;
		this._recentAnimations = null;
		this._spriteOrigin = null;
		this.target = null;
		this._graphic = null;
		flixel_group_FlxTypedSpriteGroup.prototype.destroy.call(this);
	}
	,update: function(elapsed) {
		this._counter++;
		if(this._counter >= this.delay && this._trailLength >= 1) {
			this._counter = 0;
			var spritePosition = null;
			if(this._recentPositions.length == this._trailLength) {
				spritePosition = this._recentPositions.pop();
			} else {
				var point = flixel_math_FlxPoint._pool.get().set(0,0);
				point._inPool = false;
				spritePosition = point;
			}
			spritePosition.set(this.target.x - this.target.offset.x,this.target.y - this.target.offset.y);
			this._recentPositions.unshift(spritePosition);
			if(this.rotationsEnabled) {
				this.cacheValue(this._recentAngles,this.target.angle);
			}
			if(this.scalesEnabled) {
				var spriteScale = null;
				if(this._recentScales.length == this._trailLength) {
					spriteScale = this._recentScales.pop();
				} else {
					var point = flixel_math_FlxPoint._pool.get().set(0,0);
					point._inPool = false;
					spriteScale = point;
				}
				spriteScale.set(this.target.scale.x,this.target.scale.y);
				this._recentScales.unshift(spriteScale);
			}
			if(this.framesEnabled && this._graphic == null) {
				this.cacheValue(this._recentFrames,this.target.animation.frameIndex);
				this.cacheValue(this._recentFlipX,this.target.flipX);
				this.cacheValue(this._recentFlipY,this.target.flipY);
				this.cacheValue(this._recentAnimations,this.target.animation._curAnim);
			}
			var trailSprite;
			var _g = 0;
			var _g1 = this._recentPositions.length;
			while(_g < _g1) {
				var i = _g++;
				trailSprite = this.group.members[i];
				trailSprite.set_x(this._recentPositions[i].x);
				trailSprite.set_y(this._recentPositions[i].y);
				if(this.rotationsEnabled) {
					trailSprite.set_angle(this._recentAngles[i]);
					trailSprite.origin.set_x(this._spriteOrigin.x);
					trailSprite.origin.set_y(this._spriteOrigin.y);
				}
				if(this.scalesEnabled) {
					trailSprite.scale.set_x(this._recentScales[i].x);
					trailSprite.scale.set_y(this._recentScales[i].y);
				}
				if(this.framesEnabled && this._graphic == null) {
					trailSprite.animation.set_frameIndex(this._recentFrames[i]);
					trailSprite.set_flipX(this._recentFlipX[i]);
					trailSprite.set_flipY(this._recentFlipY[i]);
					var _this = trailSprite.animation;
					var Anim = this._recentAnimations[i];
					if(Anim != _this._curAnim) {
						if(_this._curAnim != null) {
							_this._curAnim.stop();
						}
						if(Anim != null) {
							Anim.play();
						}
					}
					_this._curAnim = Anim;
				}
				trailSprite.set_exists(true);
			}
		}
		flixel_group_FlxTypedSpriteGroup.prototype.update.call(this,elapsed);
	}
	,cacheValue: function(array,value) {
		array.unshift(value);
		flixel_util_FlxArrayUtil.setLength_cacheValue_T(array,this._trailLength);
	}
	,resetTrail: function() {
		this._recentPositions.splice(0,this._recentPositions.length);
		this._recentAngles.splice(0,this._recentAngles.length);
		this._recentScales.splice(0,this._recentScales.length);
		this._recentFrames.splice(0,this._recentFrames.length);
		this._recentFlipX.splice(0,this._recentFlipX.length);
		this._recentFlipY.splice(0,this._recentFlipY.length);
		this._recentAnimations.splice(0,this._recentAnimations.length);
		var _g = 0;
		var _g1 = this.group.members.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.group.members[i] != null) {
				this.group.members[i].set_exists(false);
			}
		}
	}
	,increaseLength: function(Amount) {
		if(Amount <= 0) {
			return;
		}
		this._trailLength += Amount;
		var _g = 0;
		var _g1 = Amount;
		while(_g < _g1) {
			var i = _g++;
			var trailSprite = new flixel_FlxSprite(0,0);
			if(this._graphic == null) {
				trailSprite.loadGraphicFromSprite(this.target);
			} else {
				trailSprite.loadGraphic(this._graphic);
			}
			trailSprite.set_exists(false);
			trailSprite.set_active(false);
			this.add(trailSprite);
			trailSprite.set_alpha(this._transp);
			this._transp -= this._difference;
			trailSprite.set_solid((this.allowCollisions & 4369) > 0);
			if(trailSprite.alpha <= 0) {
				trailSprite.kill();
			}
		}
	}
	,changeGraphic: function(Image1) {
		this._graphic = Image1;
		var _g = 0;
		var _g1 = this._trailLength;
		while(_g < _g1) {
			var i = _g++;
			this.group.members[i].loadGraphic(Image1);
		}
	}
	,changeValuesEnabled: function(Angle,X,Y,Scale) {
		if(Scale == null) {
			Scale = true;
		}
		if(Y == null) {
			Y = true;
		}
		if(X == null) {
			X = true;
		}
		this.rotationsEnabled = Angle;
		this.xEnabled = X;
		this.yEnabled = Y;
		this.scalesEnabled = Scale;
	}
	,__class__: flixel_addons_effects_FlxTrail
});
var flixel_addons_effects_FlxTrailArea = function(X,Y,Width,Height,AlphaMultiplier,Delay,SimpleRender,Antialiasing,TrailBlendMode) {
	if(Antialiasing == null) {
		Antialiasing = false;
	}
	if(SimpleRender == null) {
		SimpleRender = false;
	}
	if(Delay == null) {
		Delay = 2;
	}
	if(AlphaMultiplier == null) {
		AlphaMultiplier = 0.8;
	}
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._height = 1;
	this._width = 1;
	this._counter = 0;
	this.alphaOffset = 0;
	this.blueOffset = 0;
	this.greenOffset = 0;
	this.redOffset = 0;
	this.blueMultiplier = 1;
	this.greenMultiplier = 1;
	this.redMultiplier = 1;
	this.blendMode = null;
	this.simpleRender = false;
	this.delay = 2;
	flixel_FlxSprite.call(this,X,Y);
	this.group = new flixel_group_FlxTypedGroup();
	this.delay = Delay;
	this.simpleRender = SimpleRender;
	this.blendMode = TrailBlendMode;
	this.set_antialiasing(Antialiasing);
	this.alphaMultiplier = AlphaMultiplier;
	this.setSize(Width,Height);
	this.set_pixels(this._areaPixels);
};
$hxClasses["flixel.addons.effects.FlxTrailArea"] = flixel_addons_effects_FlxTrailArea;
flixel_addons_effects_FlxTrailArea.__name__ = "flixel.addons.effects.FlxTrailArea";
flixel_addons_effects_FlxTrailArea.__super__ = flixel_FlxSprite;
flixel_addons_effects_FlxTrailArea.prototype = $extend(flixel_FlxSprite.prototype,{
	delay: null
	,simpleRender: null
	,blendMode: null
	,group: null
	,redMultiplier: null
	,greenMultiplier: null
	,blueMultiplier: null
	,alphaMultiplier: null
	,redOffset: null
	,greenOffset: null
	,blueOffset: null
	,alphaOffset: null
	,_counter: null
	,_width: null
	,_height: null
	,_areaPixels: null
	,setSize: function(Width,Height) {
		if(Width <= 0) {
			Width = flixel_FlxG.width;
		}
		if(Height <= 0) {
			Height = flixel_FlxG.height;
		}
		if(Width != this._width || Height != this._height) {
			this._width = Width;
			this._height = Height;
			this._areaPixels = new openfl_display_BitmapData(this._width | 0,this._height | 0,true,0);
		}
	}
	,destroy: function() {
		this.group = flixel_util_FlxDestroyUtil.destroy(this.group);
		this.blendMode = null;
		if(this.get_pixels() != this._areaPixels) {
			this._areaPixels.dispose();
		}
		this._areaPixels = null;
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,draw: function() {
		this._counter++;
		if(this._counter >= this.delay) {
			this._counter = 0;
			this._areaPixels.lock();
			var cTrans = new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
			this._areaPixels.colorTransform(new openfl_geom_Rectangle(0,0,this._areaPixels.width,this._areaPixels.height),cTrans);
			var _g = 0;
			var _g1 = this.group.members;
			while(_g < _g1.length) {
				var member = _g1[_g];
				++_g;
				if(member.exists) {
					var finalX = member.x - this.x - member.offset.x;
					var finalY = member.y - this.y - member.offset.y;
					if(this.simpleRender) {
						this._areaPixels.copyPixels(member.updateFramePixels(),new openfl_geom_Rectangle(0,0,member.frameWidth,member.frameHeight),new openfl_geom_Point(finalX,finalY),null,null,true);
					} else {
						var scaled = member.scale.x != 1 || member.scale.y != 1;
						var rotated = member.angle != 0 && member.bakedRotationAngle <= 0;
						this._matrix.identity();
						if(rotated || scaled) {
							this._matrix.translate(-member.origin.x,-member.origin.y);
							if(scaled) {
								this._matrix.scale(member.scale.x,member.scale.y);
							}
							if(rotated) {
								this._matrix.rotate(member.angle * (Math.PI / 180));
							}
							this._matrix.translate(member.origin.x,member.origin.y);
						}
						this._matrix.translate(finalX,finalY);
						this._areaPixels.draw(member.updateFramePixels(),this._matrix,member.colorTransform,this.blendMode,null,this.antialiasing);
					}
				}
			}
			this._areaPixels.unlock();
			this.set_pixels(this._areaPixels);
		}
		flixel_FlxSprite.prototype.draw.call(this);
	}
	,resetTrail: function() {
		this._areaPixels.fillRect(new openfl_geom_Rectangle(0,0,this._areaPixels.width,this._areaPixels.height),0);
	}
	,add: function(Sprite) {
		return this.group.add(Sprite);
	}
	,get_width: function() {
		return this._width;
	}
	,set_width: function(Width) {
		if(Width <= 0) {
			Width = flixel_FlxG.width;
		}
		if(Width != this._width) {
			this._areaPixels = new openfl_display_BitmapData(Width | 0,this._height | 0,true,0);
		}
		return this._width = Width;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(Height) {
		if(Height <= 0) {
			Height = flixel_FlxG.height;
		}
		if(Height != this._height) {
			this._areaPixels = new openfl_display_BitmapData(this._width | 0,Height | 0,true,0);
		}
		return this._height = Height;
	}
	,__class__: flixel_addons_effects_FlxTrailArea
});
var flixel_addons_effects_chainable_FlxEffectSprite = function(Target,Effects) {
	this.updateTargetAnimation = true;
	this.effectsEnabled = true;
	flixel_FlxSprite.call(this);
	this.target = Target;
	this.effects = Effects != null ? Effects : [];
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this._effectOffset = point;
};
$hxClasses["flixel.addons.effects.chainable.FlxEffectSprite"] = flixel_addons_effects_chainable_FlxEffectSprite;
flixel_addons_effects_chainable_FlxEffectSprite.__name__ = "flixel.addons.effects.chainable.FlxEffectSprite";
flixel_addons_effects_chainable_FlxEffectSprite.__super__ = flixel_FlxSprite;
flixel_addons_effects_chainable_FlxEffectSprite.prototype = $extend(flixel_FlxSprite.prototype,{
	effectsEnabled: null
	,target: null
	,updateTargetAnimation: null
	,effects: null
	,_effectOffset: null
	,destroy: function() {
		this.effects = flixel_util_FlxDestroyUtil.destroyArray(this.effects);
		this._effectOffset = flixel_util_FlxDestroyUtil.put(this._effectOffset);
		this.target = null;
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,getScreenPosition: function(point,Camera) {
		return flixel_FlxSprite.prototype.getScreenPosition.call(this,point,Camera).addPoint(this._effectOffset);
	}
	,draw: function() {
		if(this.target.dirty) {
			this.target.drawFrame();
		}
		if(this.target.framePixels == null) {
			flixel_FlxSprite.prototype.draw.call(this);
			return;
		}
		if(this.get_pixels() != null && this.get_pixels().width == this.target.framePixels.width && this.get_pixels().height == this.target.framePixels.height) {
			this.get_pixels().fillRect(this.get_pixels().rect,0);
			this.get_pixels().draw(this.target.framePixels);
		} else {
			flixel_util_FlxDestroyUtil.dispose(this.get_pixels());
			this.set_pixels(this.target.framePixels.clone());
		}
		this._effectOffset.set(0,0);
		if(this.effectsEnabled) {
			this.get_pixels().lock();
			var _g = 0;
			var _g1 = this.effects;
			while(_g < _g1.length) {
				var effect = _g1[_g];
				++_g;
				if(effect.active) {
					this.set_pixels(effect.apply(this.get_pixels()));
					if(effect.offset != null) {
						this._effectOffset.addPoint(effect.offset);
					}
				}
			}
			this.get_pixels().unlock();
			this._flashRect = this.get_pixels().rect;
		}
		flixel_FlxSprite.prototype.draw.call(this);
	}
	,update: function(elapsed) {
		if(this.updateTargetAnimation && this.target.animation._sprite.numFrames > 1) {
			this.target.updateAnimation(elapsed);
		}
		if(this.effectsEnabled) {
			var _g = 0;
			var _g1 = this.effects;
			while(_g < _g1.length) {
				var effect = _g1[_g];
				++_g;
				if(effect.active) {
					effect.update(elapsed);
				}
			}
		}
		flixel_FlxSprite.prototype.update.call(this,elapsed);
	}
	,__class__: flixel_addons_effects_chainable_FlxEffectSprite
});
var flixel_addons_effects_chainable_IFlxEffect = function() { };
$hxClasses["flixel.addons.effects.chainable.IFlxEffect"] = flixel_addons_effects_chainable_IFlxEffect;
flixel_addons_effects_chainable_IFlxEffect.__name__ = "flixel.addons.effects.chainable.IFlxEffect";
flixel_addons_effects_chainable_IFlxEffect.__isInterface__ = true;
flixel_addons_effects_chainable_IFlxEffect.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_addons_effects_chainable_IFlxEffect.prototype = {
	active: null
	,offset: null
	,update: null
	,apply: null
	,__class__: flixel_addons_effects_chainable_IFlxEffect
};
var flixel_addons_effects_chainable_FlxWaveEffect = function(Mode,Strength,Center,Speed,Wavelength,Direction,InterlaceOffset) {
	if(InterlaceOffset == null) {
		InterlaceOffset = 0;
	}
	if(Wavelength == null) {
		Wavelength = 5;
	}
	if(Speed == null) {
		Speed = 3;
	}
	if(Center == null) {
		Center = 0.5;
	}
	if(Strength == null) {
		Strength = 10;
	}
	this._flashRect = new openfl_geom_Rectangle();
	this._flashPoint = new openfl_geom_Point();
	this._time = 0;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.offset = point;
	this.active = true;
	this.strength = Strength;
	this.mode = Mode == null ? flixel_addons_effects_chainable_FlxWaveMode.ALL : Mode;
	this.speed = Speed;
	this.wavelength = Wavelength;
	this.direction = Direction != null ? Direction : flixel_addons_effects_chainable_FlxWaveDirection.HORIZONTAL;
	this.center = Center;
	this.set_interlaceOffset(InterlaceOffset);
};
$hxClasses["flixel.addons.effects.chainable.FlxWaveEffect"] = flixel_addons_effects_chainable_FlxWaveEffect;
flixel_addons_effects_chainable_FlxWaveEffect.__name__ = "flixel.addons.effects.chainable.FlxWaveEffect";
flixel_addons_effects_chainable_FlxWaveEffect.__interfaces__ = [flixel_addons_effects_chainable_IFlxEffect];
flixel_addons_effects_chainable_FlxWaveEffect.prototype = {
	active: null
	,offset: null
	,mode: null
	,speed: null
	,center: null
	,direction: null
	,wavelength: null
	,strength: null
	,interlaceOffset: null
	,_time: null
	,_flashPoint: null
	,_flashRect: null
	,_pixels: null
	,destroy: function() {
		this._flashPoint = null;
		this._flashRect = null;
		this.offset = flixel_util_FlxDestroyUtil.put(this.offset);
		this._pixels = flixel_util_FlxDestroyUtil.dispose(this._pixels);
	}
	,update: function(elapsed) {
		this._time += elapsed * this.speed;
	}
	,apply: function(bitmapData) {
		var horizontalStrength = this.direction == flixel_addons_effects_chainable_FlxWaveDirection.HORIZONTAL ? this.strength : 0;
		var verticalStrength = this.direction == flixel_addons_effects_chainable_FlxWaveDirection.VERTICAL ? this.strength : 0;
		this.offset.set(-horizontalStrength,-verticalStrength);
		if(this._pixels == null || this._pixels.width < bitmapData.width + horizontalStrength * 2 || this._pixels.height < bitmapData.height + verticalStrength * 2) {
			flixel_util_FlxDestroyUtil.dispose(this._pixels);
			this._pixels = new openfl_display_BitmapData(bitmapData.width + horizontalStrength * 2,bitmapData.height + verticalStrength * 2,true,0);
		} else {
			this._pixels.fillRect(this._pixels.rect,0);
		}
		var length = this.direction == flixel_addons_effects_chainable_FlxWaveDirection.HORIZONTAL ? bitmapData.height : bitmapData.width;
		var p = 0;
		while(p < length) {
			var pixelOffset = 0;
			var offsetP = length * this.center;
			var size = 1;
			switch(this.mode._hx_index) {
			case 0:
				offsetP = this.strength;
				break;
			case 1:
				if(p <= offsetP) {
					offsetP = (1 - p / offsetP) * this.strength;
				} else {
					size = length - p;
					offsetP = 0;
				}
				break;
			case 2:
				if(p >= offsetP) {
					offsetP = (1 - (1 - p / length) / (1 - this.center)) * this.strength;
				} else {
					size = Math.ceil(offsetP);
					offsetP = 0;
				}
				break;
			}
			var waveOffset = 0;
			if(this.interlaceOffset != 0 && this.interlaceOffset != 1 && ((p | 0) & 1) != 0) {
				waveOffset = Math.PI * 2 * this.interlaceOffset;
			}
			var n = p / this.wavelength + this._time + waveOffset;
			n *= 0.3183098862;
			if(n > 1) {
				n -= Math.ceil(n) >> 1 << 1;
			} else if(n < -1) {
				n += Math.ceil(-n) >> 1 << 1;
			}
			pixelOffset = offsetP * (n > 0 ? n * (3.1 + n * (0.5 + n * (-7.2 + n * 3.6))) : n * (3.1 - n * (0.5 + n * (7.2 + n * 3.6))));
			if(this.direction == flixel_addons_effects_chainable_FlxWaveDirection.HORIZONTAL) {
				this._flashPoint.setTo(this.strength + pixelOffset,p);
				this._flashRect.setTo(0,p,bitmapData.width,size);
			} else {
				this._flashPoint.setTo(p,this.strength + pixelOffset);
				this._flashRect.setTo(p,0,size,bitmapData.height);
			}
			this._pixels.copyPixels(bitmapData,this._flashRect,this._flashPoint);
			p += size;
		}
		flixel_util_FlxDestroyUtil.dispose(bitmapData);
		return this._pixels.clone();
	}
	,calculateOffset: function(p,length) {
		var waveOffset = 0;
		if(this.interlaceOffset != 0 && this.interlaceOffset != 1 && ((p | 0) & 1) != 0) {
			waveOffset = Math.PI * 2 * this.interlaceOffset;
		}
		var n = p / this.wavelength + this._time + waveOffset;
		n *= 0.3183098862;
		if(n > 1) {
			n -= Math.ceil(n) >> 1 << 1;
		} else if(n < -1) {
			n += Math.ceil(-n) >> 1 << 1;
		}
		if(n > 0) {
			return n * (3.1 + n * (0.5 + n * (-7.2 + n * 3.6)));
		} else {
			return n * (3.1 - n * (0.5 + n * (7.2 + n * 3.6)));
		}
	}
	,set_interlaceOffset: function(InterlaceOffset) {
		var lowerBound = InterlaceOffset < 0 ? 0 : InterlaceOffset;
		return this.interlaceOffset = lowerBound > 1 ? 1 : lowerBound;
	}
	,__class__: flixel_addons_effects_chainable_FlxWaveEffect
	,__properties__: {set_interlaceOffset:"set_interlaceOffset"}
};
var flixel_addons_effects_chainable_FlxWaveMode = $hxEnums["flixel.addons.effects.chainable.FlxWaveMode"] = { __ename__ : "flixel.addons.effects.chainable.FlxWaveMode", __constructs__ : ["ALL","START","END"]
	,ALL: {_hx_index:0,__enum__:"flixel.addons.effects.chainable.FlxWaveMode",toString:$estr}
	,START: {_hx_index:1,__enum__:"flixel.addons.effects.chainable.FlxWaveMode",toString:$estr}
	,END: {_hx_index:2,__enum__:"flixel.addons.effects.chainable.FlxWaveMode",toString:$estr}
};
flixel_addons_effects_chainable_FlxWaveMode.__empty_constructs__ = [flixel_addons_effects_chainable_FlxWaveMode.ALL,flixel_addons_effects_chainable_FlxWaveMode.START,flixel_addons_effects_chainable_FlxWaveMode.END];
var flixel_addons_effects_chainable_FlxWaveDirection = $hxEnums["flixel.addons.effects.chainable.FlxWaveDirection"] = { __ename__ : "flixel.addons.effects.chainable.FlxWaveDirection", __constructs__ : ["HORIZONTAL","VERTICAL"]
	,HORIZONTAL: {_hx_index:0,__enum__:"flixel.addons.effects.chainable.FlxWaveDirection",toString:$estr}
	,VERTICAL: {_hx_index:1,__enum__:"flixel.addons.effects.chainable.FlxWaveDirection",toString:$estr}
};
flixel_addons_effects_chainable_FlxWaveDirection.__empty_constructs__ = [flixel_addons_effects_chainable_FlxWaveDirection.HORIZONTAL,flixel_addons_effects_chainable_FlxWaveDirection.VERTICAL];
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) {
		this.load(stream,context);
	}
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = "openfl.media.Sound";
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.fromFile = function(path) {
	return openfl_media_Sound.fromAudioBuffer(lime_media_AudioBuffer.fromFile(path));
};
openfl_media_Sound.loadFromFile = function(path) {
	return lime_media_AudioBuffer.loadFromFile(path).then(function(audioBuffer) {
		return lime_app_Future.withValue(openfl_media_Sound.fromAudioBuffer(audioBuffer));
	});
};
openfl_media_Sound.loadFromFiles = function(paths) {
	return lime_media_AudioBuffer.loadFromFiles(paths).then(function(audioBuffer) {
		return lime_app_Future.withValue(openfl_media_Sound.fromAudioBuffer(audioBuffer));
	});
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,isBuffering: null
	,url: null
	,__buffer: null
	,close: function() {
		if(this.__buffer != null) {
			this.__buffer.dispose();
			this.__buffer = null;
		}
	}
	,load: function(stream,context) {
		var _gthis = this;
		this.url = stream.url;
		var defaultLibrary = lime_utils_Assets.getLibrary("default");
		if(defaultLibrary != null && Object.prototype.hasOwnProperty.call(defaultLibrary.cachedAudioBuffers.h,this.url)) {
			this.AudioBuffer_onURLLoad(defaultLibrary.cachedAudioBuffers.h[this.url]);
		} else {
			lime_media_AudioBuffer.loadFromFile(this.url).onComplete($bind(this,this.AudioBuffer_onURLLoad)).onError(function(_) {
				_gthis.AudioBuffer_onURLLoad(null);
			});
		}
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength) {
		if(bytes == null || bytesLength <= 0) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
			return;
		}
		if(UInt.gt(bytes.position,0) || UInt.gt(openfl_utils_ByteArray.get_length(bytes),bytesLength)) {
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			var this1 = new openfl_utils_ByteArrayData(length);
			var copy = this1;
			var offset = bytes.position;
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			if(offset == null) {
				offset = 0;
			}
			copy.writeBytes(bytes,offset,length);
			bytes = copy;
		}
		this.__buffer = lime_media_AudioBuffer.fromBytes(openfl_utils_ByteArray.toBytes(bytes));
		if(this.__buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
		if(format == null) {
			format = "float";
		}
		if(bytes == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
			return;
		}
		var bitsPerSample = format == "float" ? 32 : 16;
		var channels = stereo ? 2 : 1;
		var bytesLength = samples * channels * (bitsPerSample / 8) | 0;
		if(UInt.gt(bytes.position,0) || UInt.gt(openfl_utils_ByteArray.get_length(bytes),bytesLength)) {
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			var this1 = new openfl_utils_ByteArrayData(length);
			var copy = this1;
			var offset = bytes.position;
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			if(offset == null) {
				offset = 0;
			}
			copy.writeBytes(bytes,offset,length);
			bytes = copy;
		}
		var audioBuffer = new lime_media_AudioBuffer();
		audioBuffer.bitsPerSample = bitsPerSample;
		audioBuffer.channels = channels;
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var buffer = openfl_utils_ByteArray.toArrayBuffer(bytes);
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer,0);
			} else {
				this1 = new Uint8Array(buffer,0,len);
			}
		} else {
			this1 = null;
		}
		audioBuffer.data = this1;
		audioBuffer.sampleRate = sampleRate | 0;
		this.__buffer = audioBuffer;
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0.0;
		}
		if(this.__buffer == null || openfl_media_SoundMixer.__soundChannels.length >= 32) {
			return null;
		}
		if(sndTransform == null) {
			sndTransform = new openfl_media_SoundTransform();
		} else {
			sndTransform = sndTransform.clone();
		}
		var pan = openfl_media_SoundMixer.__soundTransform.pan + sndTransform.pan;
		if(pan > 1) {
			pan = 1;
		}
		if(pan < -1) {
			pan = -1;
		}
		var volume = openfl_media_SoundMixer.__soundTransform.volume * sndTransform.volume;
		var source = new lime_media_AudioSource(this.__buffer);
		source.offset = startTime | 0;
		if(loops > 1) {
			source.set_loops(loops - 1);
		}
		source.set_gain(volume);
		var position = source.get_position();
		position.x = pan;
		position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
		source.set_position(position);
		return new openfl_media_SoundChannel(source,sndTransform);
	}
	,get_id3: function() {
		return new openfl_media_ID3Info();
	}
	,get_length: function() {
		if(this.__buffer != null) {
			return this.__buffer.get_src().duration() * 1000 | 0;
		}
		return 0;
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		if(buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__class__: openfl_media_Sound
	,__properties__: {get_length:"get_length",get_id3:"get_id3"}
});
var flixel_addons_text_TypeSound = function(stream,context) {
	openfl_media_Sound.call(this,stream,context);
};
$hxClasses["flixel.addons.text.TypeSound"] = flixel_addons_text_TypeSound;
flixel_addons_text_TypeSound.__name__ = "flixel.addons.text.TypeSound";
flixel_addons_text_TypeSound.__super__ = openfl_media_Sound;
flixel_addons_text_TypeSound.prototype = $extend(openfl_media_Sound.prototype,{
	__class__: flixel_addons_text_TypeSound
});
var flixel_text_FlxText = function(X,Y,FieldWidth,Text1,Size,EmbeddedFont) {
	if(EmbeddedFont == null) {
		EmbeddedFont = true;
	}
	if(Size == null) {
		Size = 8;
	}
	if(FieldWidth == null) {
		FieldWidth = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._hasBorderAlpha = false;
	this._regen = true;
	this._formatRanges = [];
	this.borderQuality = 1;
	this.borderSize = 1;
	this.borderColor = 0;
	this.borderStyle = flixel_text_FlxTextBorderStyle.NONE;
	this.text = "";
	flixel_FlxSprite.call(this,X,Y);
	if(Text1 == null || Text1 == "") {
		this.set_text("");
		Text1 = " ";
	} else {
		this.set_text(Text1);
	}
	this.textField = new openfl_text_TextField();
	this.textField.set_selectable(false);
	this.textField.set_multiline(true);
	this.textField.set_wordWrap(true);
	this._defaultFormat = new openfl_text_TextFormat(null,Size,16777215);
	this.set_font(flixel_system_FlxAssets.FONT_DEFAULT);
	this._formatAdjusted = new openfl_text_TextFormat();
	this.textField.set_defaultTextFormat(this._defaultFormat);
	this.textField.set_text(Text1);
	this.set_fieldWidth(FieldWidth);
	this.textField.set_embedFonts(EmbeddedFont);
	this.textField.set_sharpness(100);
	this.textField.set_height(Text1.length <= 0 ? 1 : 10);
	this.set_allowCollisions(0);
	this.set_moves(false);
	this.drawFrame();
	var X = 1;
	var Y = 1;
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	this.shadowOffset = point;
};
$hxClasses["flixel.text.FlxText"] = flixel_text_FlxText;
flixel_text_FlxText.__name__ = "flixel.text.FlxText";
flixel_text_FlxText.__super__ = flixel_FlxSprite;
flixel_text_FlxText.prototype = $extend(flixel_FlxSprite.prototype,{
	text: null
	,borderStyle: null
	,borderColor: null
	,borderSize: null
	,borderQuality: null
	,textField: null
	,shadowOffset: null
	,_defaultFormat: null
	,_formatAdjusted: null
	,_formatRanges: null
	,_font: null
	,_regen: null
	,_borderPixels: null
	,_borderColorTransform: null
	,_hasBorderAlpha: null
	,destroy: function() {
		this.textField = null;
		this._font = null;
		this._defaultFormat = null;
		this._formatAdjusted = null;
		this.shadowOffset = flixel_util_FlxDestroyUtil.put(this.shadowOffset);
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,drawFrame: function(Force) {
		if(Force == null) {
			Force = false;
		}
		this._regen = this._regen || Force;
		flixel_FlxSprite.prototype.drawFrame.call(this,this._regen);
	}
	,stampOnAtlas: function(atlas) {
		this.regenGraphic();
		var node = atlas.addNode(this.graphic.bitmap,this.graphic.key);
		var result = node != null;
		if(node != null) {
			this.set_frames(node.getImageFrame());
		}
		return result;
	}
	,applyMarkup: function(input,rules) {
		if(rules == null || rules.length == 0) {
			return this;
		}
		this.clearFormats();
		var rangeStarts = [];
		var rangeEnds = [];
		var rulesToApply = [];
		var i = 0;
		var _g = 0;
		while(_g < rules.length) {
			var rule = rules[_g];
			++_g;
			if(rule.marker == null || rule.format == null) {
				continue;
			}
			var start = false;
			var markerLength = UnicodeString.get_length(rule.marker);
			if(input.indexOf(rule.marker) == -1) {
				continue;
			}
			var _g1 = 0;
			var _g2 = UnicodeString.get_length(input);
			while(_g1 < _g2) {
				var charIndex = _g1++;
				if(UnicodeString.substr(input,charIndex,markerLength) != rule.marker) {
					continue;
				}
				if(start) {
					start = false;
					rangeEnds.push(charIndex);
				} else {
					start = true;
					rangeStarts.push(charIndex);
					rulesToApply.push(rule);
				}
			}
			if(start) {
				rangeEnds.push(-1);
			}
			++i;
		}
		var _g = 0;
		while(_g < rules.length) {
			var rule = rules[_g];
			++_g;
			input = StringTools.replace(input,rule.marker,"");
		}
		var _g = 0;
		var _g1 = rangeStarts.length;
		while(_g < _g1) {
			var i = _g++;
			var delIndex = rangeStarts[i];
			var markerLength = UnicodeString.get_length(rulesToApply[i].marker);
			var _g2 = 0;
			var _g3 = rangeStarts.length;
			while(_g2 < _g3) {
				var j = _g2++;
				if(rangeStarts[j] > delIndex) {
					rangeStarts[j] -= markerLength;
				}
				if(rangeEnds[j] > delIndex) {
					rangeEnds[j] -= markerLength;
				}
			}
			delIndex = rangeEnds[i];
			var _g4 = 0;
			var _g5 = rangeStarts.length;
			while(_g4 < _g5) {
				var j1 = _g4++;
				if(rangeStarts[j1] > delIndex) {
					rangeStarts[j1] -= markerLength;
				}
				if(rangeEnds[j1] > delIndex) {
					rangeEnds[j1] -= markerLength;
				}
			}
		}
		this.set_text(input);
		var _g = 0;
		var _g1 = rangeStarts.length;
		while(_g < _g1) {
			var i = _g++;
			this.addFormat(rulesToApply[i].format,rangeStarts[i],rangeEnds[i]);
		}
		return this;
	}
	,addFormat: function(Format,Start,End) {
		if(End == null) {
			End = -1;
		}
		if(Start == null) {
			Start = -1;
		}
		this._formatRanges.push(new flixel_text__$FlxText_FlxTextFormatRange(Format,Start,End));
		this._formatRanges.sort(function(left,right) {
			if(left.range.start < right.range.start) {
				return -1;
			} else {
				return 1;
			}
		});
		this._regen = true;
		return this;
	}
	,removeFormat: function(Format,Start,End) {
		var i = this._formatRanges.length;
		while(i-- > 0) {
			var formatRange = this._formatRanges[i];
			if(formatRange.format != Format) {
				continue;
			}
			if(Start != null && End != null) {
				var range = formatRange.range;
				if(Start >= range.end || End <= range.start) {
					continue;
				}
				if(Start > range.start && End < range.end) {
					this.addFormat(formatRange.format,End + 1,range.end);
					range.end = Start;
					continue;
				}
				if(Start <= range.start && End < range.end) {
					range.start = End;
					continue;
				}
				if(Start > range.start && End >= range.end) {
					range.end = Start;
					continue;
				}
			}
			HxOverrides.remove(this._formatRanges,formatRange);
		}
		this._regen = true;
		return this;
	}
	,clearFormats: function() {
		this._formatRanges = [];
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return this;
	}
	,setFormat: function(Font,Size,Color,Alignment,BorderStyle,BorderColor,EmbeddedFont) {
		if(EmbeddedFont == null) {
			EmbeddedFont = true;
		}
		if(BorderColor == null) {
			BorderColor = 0;
		}
		if(Color == null) {
			Color = -1;
		}
		if(Size == null) {
			Size = 8;
		}
		if(BorderStyle == null) {
			BorderStyle = flixel_text_FlxTextBorderStyle.NONE;
		}
		if(EmbeddedFont) {
			this.set_font(Font);
		} else if(Font != null) {
			this.set_systemFont(Font);
		}
		this.set_size(Size);
		this.set_color(Color);
		if(Alignment != null) {
			this.set_alignment(Alignment);
		}
		var Color = BorderColor;
		if(Color == null) {
			Color = 0;
		}
		this.set_borderStyle(BorderStyle);
		this.set_borderColor(Color);
		this.set_borderSize(1);
		this.set_borderQuality(1);
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return this;
	}
	,setBorderStyle: function(Style,Color,Size,Quality) {
		if(Quality == null) {
			Quality = 1;
		}
		if(Size == null) {
			Size = 1;
		}
		if(Color == null) {
			Color = 0;
		}
		this.set_borderStyle(Style);
		this.set_borderColor(Color);
		this.set_borderSize(Size);
		this.set_borderQuality(Quality);
		return this;
	}
	,updateHitbox: function() {
		this.regenGraphic();
		flixel_FlxSprite.prototype.updateHitbox.call(this);
	}
	,set_fieldWidth: function(value) {
		if(this.textField == null) {
			return value;
		}
		if(value <= 0) {
			this.set_wordWrap(false);
			this.set_autoSize(true);
		} else {
			this.set_autoSize(false);
			this.set_wordWrap(true);
			this.textField.set_width(value);
		}
		this._regen = true;
		return value;
	}
	,get_fieldWidth: function() {
		if(this.textField != null) {
			return this.textField.get_width();
		} else {
			return 0;
		}
	}
	,set_autoSize: function(value) {
		if(this.textField != null) {
			this.textField.set_autoSize(value ? 1 : 2);
			this._regen = true;
		}
		return value;
	}
	,get_autoSize: function() {
		if(this.textField != null) {
			return this.textField.get_autoSize() != 2;
		} else {
			return false;
		}
	}
	,set_text: function(Text1) {
		this.text = Text1;
		if(this.textField != null) {
			var ot = this.textField.get_text();
			this.textField.set_text(Text1);
			this._regen = this.textField.get_text() != ot || this._regen;
		}
		return Text1;
	}
	,get_size: function() {
		return this._defaultFormat.size | 0;
	}
	,set_size: function(Size) {
		this._defaultFormat.size = Size;
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return Size;
	}
	,set_color: function(Color) {
		if(this._defaultFormat.color == (Color & 16777215)) {
			return Color;
		}
		this._defaultFormat.color = Color & 16777215;
		this.color = Color;
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return Color;
	}
	,get_font: function() {
		return this._font;
	}
	,set_font: function(Font) {
		this.textField.set_embedFonts(true);
		if(Font != null) {
			var newFontName = Font;
			if(openfl_utils_Assets.exists(Font,"FONT")) {
				newFontName = openfl_utils_Assets.getFont(Font).name;
			}
			this._defaultFormat.font = newFontName;
		} else {
			this._defaultFormat.font = flixel_system_FlxAssets.FONT_DEFAULT;
		}
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return this._font = this._defaultFormat.font;
	}
	,get_embedded: function() {
		return this.textField.set_embedFonts(true);
	}
	,get_systemFont: function() {
		return this._defaultFormat.font;
	}
	,set_systemFont: function(Font) {
		this.textField.set_embedFonts(false);
		this._defaultFormat.font = Font;
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return Font;
	}
	,get_bold: function() {
		return this._defaultFormat.bold;
	}
	,set_bold: function(value) {
		if(this._defaultFormat.bold != value) {
			this._defaultFormat.bold = value;
			this.textField.set_defaultTextFormat(this._defaultFormat);
			this.textField.setTextFormat(this._defaultFormat);
			this._regen = true;
		}
		return value;
	}
	,get_italic: function() {
		return this._defaultFormat.italic;
	}
	,set_italic: function(value) {
		if(this._defaultFormat.italic != value) {
			this._defaultFormat.italic = value;
			this.textField.set_defaultTextFormat(this._defaultFormat);
			this.textField.setTextFormat(this._defaultFormat);
			this._regen = true;
		}
		return value;
	}
	,get_wordWrap: function() {
		return this.textField.get_wordWrap();
	}
	,set_wordWrap: function(value) {
		if(this.textField.get_wordWrap() != value) {
			this.textField.set_wordWrap(value);
			this._regen = true;
		}
		return value;
	}
	,get_alignment: function() {
		return flixel_text_FlxTextAlign.fromOpenFL(this._defaultFormat.align);
	}
	,set_alignment: function(Alignment) {
		this._defaultFormat.align = flixel_text_FlxTextAlign.toOpenFL(Alignment);
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return Alignment;
	}
	,set_borderStyle: function(style) {
		if(style != this.borderStyle) {
			this._regen = true;
		}
		return this.borderStyle = style;
	}
	,set_borderColor: function(Color) {
		if(this.borderColor != Color && this.borderStyle != flixel_text_FlxTextBorderStyle.NONE) {
			this._regen = true;
		}
		this._hasBorderAlpha = (Color >> 24 & 255) / 255 < 1;
		return this.borderColor = Color;
	}
	,set_borderSize: function(Value) {
		if(Value != this.borderSize && this.borderStyle != flixel_text_FlxTextBorderStyle.NONE) {
			this._regen = true;
		}
		return this.borderSize = Value;
	}
	,set_borderQuality: function(Value) {
		var lowerBound = Value < 0 ? 0 : Value;
		Value = lowerBound > 1 ? 1 : lowerBound;
		if(Value != this.borderQuality && this.borderStyle != flixel_text_FlxTextBorderStyle.NONE) {
			this._regen = true;
		}
		return this.borderQuality = Value;
	}
	,set_graphic: function(Value) {
		var oldGraphic = this.graphic;
		var graph = flixel_FlxSprite.prototype.set_graphic.call(this,Value);
		flixel_FlxG.bitmap.removeIfNoUse(oldGraphic);
		return graph;
	}
	,get_width: function() {
		this.regenGraphic();
		return flixel_FlxSprite.prototype.get_width.call(this);
	}
	,get_height: function() {
		this.regenGraphic();
		return flixel_FlxSprite.prototype.get_height.call(this);
	}
	,updateColorTransform: function() {
		if(this.colorTransform == null) {
			this.colorTransform = new openfl_geom_ColorTransform();
		}
		if(this.alpha != 1) {
			this.colorTransform.alphaMultiplier = this.alpha;
			this.useColorTransform = true;
		} else {
			this.colorTransform.alphaMultiplier = 1;
			this.useColorTransform = false;
		}
		this.dirty = true;
	}
	,regenGraphic: function() {
		if(this.textField == null || !this._regen) {
			return;
		}
		var oldWidth = 0;
		var oldHeight = 4;
		if(this.graphic != null) {
			oldWidth = this.graphic.width;
			oldHeight = this.graphic.height;
		}
		var newWidth = this.textField.get_width();
		var newHeight = this.textField.get_textHeight() + 4;
		if(this.textField.get_textHeight() == 0) {
			newHeight = oldHeight;
		}
		if(oldWidth != newWidth || oldHeight != newHeight) {
			this.set_height(newHeight);
			var key = flixel_FlxG.bitmap.getUniqueKey("text");
			this.makeGraphic(newWidth | 0,newHeight | 0,0,false,key);
			if(this._hasBorderAlpha) {
				this._borderPixels = this.graphic.bitmap.clone();
			}
			this.frameHeight = this.get_height() | 0;
			this.textField.set_height(this.get_height() * 1.2);
			this._flashRect.x = 0;
			this._flashRect.y = 0;
			this._flashRect.width = newWidth;
			this._flashRect.height = newHeight;
		} else {
			this.graphic.bitmap.fillRect(this._flashRect,0);
			if(this._hasBorderAlpha) {
				if(this._borderPixels == null) {
					this._borderPixels = new openfl_display_BitmapData(this.frameWidth,this.frameHeight,true);
				} else {
					this._borderPixels.fillRect(this._flashRect,0);
				}
			}
		}
		if(this.textField != null && this.textField.get_text() != null && this.textField.get_text().length > 0) {
			this.copyTextFormat(this._defaultFormat,this._formatAdjusted);
			this._matrix.identity();
			this.applyBorderStyle();
			if(this._hasBorderAlpha) {
				if(this._borderColorTransform == null) {
					this._borderColorTransform = new openfl_geom_ColorTransform();
				}
				this._borderColorTransform.alphaMultiplier = (this.borderColor >> 24 & 255) / 255;
				this._borderPixels.colorTransform(this._borderPixels.rect,this._borderColorTransform);
				this.graphic.bitmap.draw(this._borderPixels);
			}
			this.applyFormats(this._formatAdjusted,false);
			this.drawTextFieldTo(this.graphic.bitmap);
		}
		this._regen = false;
		this.set_frame(this.frame);
	}
	,drawTextFieldTo: function(graphic) {
		graphic.draw(this.textField,this._matrix);
	}
	,draw: function() {
		this.regenGraphic();
		flixel_FlxSprite.prototype.draw.call(this);
	}
	,calcFrame: function(RunOnCpp) {
		if(RunOnCpp == null) {
			RunOnCpp = false;
		}
		if(this.textField == null) {
			return;
		}
		if(flixel_FlxG.renderTile && !RunOnCpp) {
			return;
		}
		this.regenGraphic();
		flixel_FlxSprite.prototype.calcFrame.call(this,RunOnCpp);
	}
	,applyBorderStyle: function() {
		var iterations = this.borderSize * this.borderQuality | 0;
		if(iterations <= 0) {
			iterations = 1;
		}
		var delta = this.borderSize / iterations;
		switch(this.borderStyle._hx_index) {
		case 0:
			break;
		case 1:
			this.applyFormats(this._formatAdjusted,true);
			var _g = 0;
			var _g1 = iterations;
			while(_g < _g1) {
				var i = _g++;
				var graphic = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(delta,delta);
				this.drawTextFieldTo(graphic);
			}
			this._matrix.translate(-this.shadowOffset.x * this.borderSize,-this.shadowOffset.y * this.borderSize);
			break;
		case 2:
			this.applyFormats(this._formatAdjusted,true);
			var curDelta = delta;
			var _g = 0;
			var _g1 = iterations;
			while(_g < _g1) {
				var i = _g++;
				var graphic = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(-curDelta,-curDelta);
				this.drawTextFieldTo(graphic);
				var graphic1 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(curDelta,0);
				this.drawTextFieldTo(graphic1);
				var graphic2 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(curDelta,0);
				this.drawTextFieldTo(graphic2);
				var graphic3 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(0,curDelta);
				this.drawTextFieldTo(graphic3);
				var graphic4 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(0,curDelta);
				this.drawTextFieldTo(graphic4);
				var graphic5 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(-curDelta,0);
				this.drawTextFieldTo(graphic5);
				var graphic6 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(-curDelta,0);
				this.drawTextFieldTo(graphic6);
				var graphic7 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(0,-curDelta);
				this.drawTextFieldTo(graphic7);
				this._matrix.translate(curDelta,0);
				curDelta += delta;
			}
			break;
		case 3:
			this.applyFormats(this._formatAdjusted,true);
			var curDelta = delta;
			var _g = 0;
			var _g1 = iterations;
			while(_g < _g1) {
				var i = _g++;
				var graphic = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(-curDelta,-curDelta);
				this.drawTextFieldTo(graphic);
				var graphic1 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(curDelta * 2,0);
				this.drawTextFieldTo(graphic1);
				var graphic2 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(0,curDelta * 2);
				this.drawTextFieldTo(graphic2);
				var graphic3 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(-curDelta * 2,0);
				this.drawTextFieldTo(graphic3);
				this._matrix.translate(curDelta,-curDelta);
				curDelta += delta;
			}
			break;
		}
	}
	,applyBorderTransparency: function() {
		if(!this._hasBorderAlpha) {
			return;
		}
		if(this._borderColorTransform == null) {
			this._borderColorTransform = new openfl_geom_ColorTransform();
		}
		this._borderColorTransform.alphaMultiplier = (this.borderColor >> 24 & 255) / 255;
		this._borderPixels.colorTransform(this._borderPixels.rect,this._borderColorTransform);
		this.graphic.bitmap.draw(this._borderPixels);
	}
	,copyTextWithOffset: function(x,y) {
		var graphic = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
		this._matrix.translate(x,y);
		this.drawTextFieldTo(graphic);
	}
	,applyFormats: function(FormatAdjusted,UseBorderColor) {
		if(UseBorderColor == null) {
			UseBorderColor = false;
		}
		this.copyTextFormat(this._defaultFormat,FormatAdjusted,false);
		FormatAdjusted.color = UseBorderColor ? this.borderColor & 16777215 : this._defaultFormat.color;
		this.textField.setTextFormat(FormatAdjusted);
		var _g = 0;
		var _g1 = this._formatRanges;
		while(_g < _g1.length) {
			var formatRange = _g1[_g];
			++_g;
			if(this.textField.get_text().length - 1 < formatRange.range.start) {
				break;
			} else {
				var textFormat = formatRange.format.format;
				this.copyTextFormat(textFormat,FormatAdjusted,false);
				FormatAdjusted.color = UseBorderColor ? formatRange.format.borderColor & 16777215 : textFormat.color;
			}
			this.textField.setTextFormat(FormatAdjusted,formatRange.range.start,Math.min(formatRange.range.end,this.textField.get_text().length) | 0);
		}
	}
	,copyTextFormat: function(from,to,withAlign) {
		if(withAlign == null) {
			withAlign = true;
		}
		to.font = from.font;
		to.bold = from.bold;
		to.italic = from.italic;
		to.size = from.size;
		to.color = from.color;
		to.leading = from.leading;
		if(withAlign) {
			to.align = from.align;
		}
	}
	,dtfCopy: function() {
		var dtf = this.textField.get_defaultTextFormat();
		return new openfl_text_TextFormat(dtf.font,dtf.size,dtf.color,dtf.bold,dtf.italic,dtf.underline,dtf.url,dtf.target,dtf.align);
	}
	,updateDefaultFormat: function() {
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
	}
	,set_frames: function(Frames) {
		flixel_FlxSprite.prototype.set_frames.call(this,Frames);
		this._regen = false;
		return Frames;
	}
	,__class__: flixel_text_FlxText
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_fieldWidth:"set_fieldWidth",get_fieldWidth:"get_fieldWidth",set_borderQuality:"set_borderQuality",set_borderSize:"set_borderSize",set_borderColor:"set_borderColor",set_borderStyle:"set_borderStyle",set_alignment:"set_alignment",get_alignment:"get_alignment",set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_italic:"set_italic",get_italic:"get_italic",set_bold:"set_bold",get_bold:"get_bold",set_systemFont:"set_systemFont",get_systemFont:"get_systemFont",get_embedded:"get_embedded",set_font:"set_font",get_font:"get_font",set_size:"set_size",get_size:"get_size",set_text:"set_text"})
});
var flixel_addons_text_FlxTypeText = function(X,Y,Width,Text1,Size,EmbeddedFont) {
	if(EmbeddedFont == null) {
		EmbeddedFont = true;
	}
	if(Size == null) {
		Size = 8;
	}
	this._typeVarPercent = 0.5;
	this._typingVariation = false;
	this._cursorTimer = 0.0;
	this._waiting = false;
	this._erasing = false;
	this._typing = false;
	this._length = 0;
	this._waitTimer = 0.0;
	this._timer = 0.0;
	this._finalText = "";
	this.skipKeys = [];
	this.finishSounds = false;
	this.useDefaultSound = false;
	this.paused = false;
	this.waitTime = 1.0;
	this.autoErase = false;
	this.prefix = "";
	this.cursorBlinkSpeed = 0.5;
	this.cursorCharacter = "|";
	this.showCursor = false;
	this.eraseDelay = 0.02;
	this.delay = 0.05;
	flixel_text_FlxText.call(this,X,Y,Width,"",Size,EmbeddedFont);
	this._finalText = Text1;
};
$hxClasses["flixel.addons.text.FlxTypeText"] = flixel_addons_text_FlxTypeText;
flixel_addons_text_FlxTypeText.__name__ = "flixel.addons.text.FlxTypeText";
flixel_addons_text_FlxTypeText.__super__ = flixel_text_FlxText;
flixel_addons_text_FlxTypeText.prototype = $extend(flixel_text_FlxText.prototype,{
	delay: null
	,eraseDelay: null
	,showCursor: null
	,cursorCharacter: null
	,cursorBlinkSpeed: null
	,prefix: null
	,autoErase: null
	,waitTime: null
	,paused: null
	,sounds: null
	,useDefaultSound: null
	,finishSounds: null
	,skipKeys: null
	,completeCallback: null
	,eraseCallback: null
	,_finalText: null
	,_timer: null
	,_waitTimer: null
	,_length: null
	,_typing: null
	,_erasing: null
	,_waiting: null
	,_cursorTimer: null
	,_typingVariation: null
	,_typeVarPercent: null
	,_sound: null
	,start: function(Delay,ForceRestart,AutoErase,SkipKeys,Callback) {
		if(AutoErase == null) {
			AutoErase = false;
		}
		if(ForceRestart == null) {
			ForceRestart = false;
		}
		if(Delay != null) {
			this.delay = Delay;
		}
		this._typing = true;
		this._erasing = false;
		this.paused = false;
		this._waiting = false;
		if(ForceRestart) {
			this.set_text("");
			this._length = 0;
		}
		this.autoErase = AutoErase;
		if(SkipKeys != null) {
			this.skipKeys = SkipKeys;
		}
		if(Callback != null) {
			this.completeCallback = Callback;
		}
		this.insertBreakLines();
		if(this.useDefaultSound) {
			this.loadDefaultSound();
		}
	}
	,applyMarkup: function(input,rules) {
		flixel_text_FlxText.prototype.applyMarkup.call(this,input,rules);
		this.resetText(this.text);
		return this;
	}
	,insertBreakLines: function() {
		var saveText = this.text;
		var last = this._finalText.length;
		var n0 = 0;
		var n1 = 0;
		while(true) {
			last = HxOverrides.substr(this._finalText,0,last).lastIndexOf(" ");
			if(last <= 0) {
				break;
			}
			this.set_text(this.prefix + this._finalText);
			n0 = this.textField.get_numLines();
			var nextText = HxOverrides.substr(this._finalText,0,last) + "\n" + HxOverrides.substr(this._finalText,last + 1,this._finalText.length);
			this.set_text(this.prefix + nextText);
			n1 = this.textField.get_numLines();
			if(n0 == n1) {
				this._finalText = nextText;
			}
		}
		this.set_text(saveText);
	}
	,erase: function(Delay,ForceRestart,SkipKeys,Callback) {
		if(ForceRestart == null) {
			ForceRestart = false;
		}
		this._erasing = true;
		this._typing = false;
		this.paused = false;
		this._waiting = false;
		if(Delay != null) {
			this.eraseDelay = Delay;
		}
		if(ForceRestart) {
			this._length = this._finalText.length;
			this.set_text(this._finalText);
		}
		if(SkipKeys != null) {
			this.skipKeys = SkipKeys;
		}
		this.eraseCallback = Callback;
		if(this.useDefaultSound) {
			this.loadDefaultSound();
		}
	}
	,resetText: function(Text1) {
		this.set_text("");
		this._finalText = Text1;
		this._typing = false;
		this._erasing = false;
		this.paused = false;
		this._waiting = false;
		this._length = 0;
	}
	,setTypingVariation: function(Amount,On) {
		if(On == null) {
			On = true;
		}
		if(Amount == null) {
			Amount = 0.5;
		}
		this._typingVariation = On;
		var lowerBound = Amount < 0 ? 0 : Amount;
		this._typeVarPercent = lowerBound > 1 ? 1 : lowerBound;
	}
	,onComplete: function() {
		this._timer = 0;
		this._typing = false;
		if(this.useDefaultSound) {
			var _this = this._sound;
			_this.cleanup(_this.autoDestroy,true);
		} else if(this.sounds != null) {
			var _g = 0;
			var _g1 = this.sounds;
			while(_g < _g1.length) {
				var sound = _g1[_g];
				++_g;
				sound.cleanup(sound.autoDestroy,true);
			}
		}
		if(this.completeCallback != null) {
			this.completeCallback();
		}
		if(this.autoErase && this.waitTime <= 0) {
			this._erasing = true;
		} else if(this.autoErase) {
			this._waitTimer = this.waitTime;
			this._waiting = true;
		}
	}
	,onErased: function() {
		this._timer = 0;
		this._erasing = false;
		if(this.eraseCallback != null) {
			this.eraseCallback();
		}
	}
	,update: function(elapsed) {
		if(this.skipKeys != null && this.skipKeys.length > 0 && flixel_FlxG.keys.checkKeyArrayState(this.skipKeys,2)) {
			this.skip();
		}
		if(this._waiting && !this.paused) {
			this._waitTimer -= elapsed;
			if(this._waitTimer <= 0) {
				this._waiting = false;
				this._erasing = true;
			}
		}
		if(!this._waiting && !this.paused) {
			if(this._length < this._finalText.length && this._typing) {
				this._timer += elapsed;
			}
			if(this._length > 0 && this._erasing) {
				this._timer += elapsed;
			}
		}
		if(this._typing || this._erasing) {
			if(this._typing && this._timer >= this.delay) {
				this._length += this._timer / this.delay | 0;
				if(this._length > this._finalText.length) {
					this._length = this._finalText.length;
				}
			}
			if(this._erasing && this._timer >= this.eraseDelay) {
				this._length -= this._timer / this.eraseDelay | 0;
				if(this._length < 0) {
					this._length = 0;
				}
			}
			if(this._typing && this._timer >= this.delay || this._erasing && this._timer >= this.eraseDelay) {
				if(this._typingVariation) {
					if(this._typing) {
						this._timer = flixel_FlxG.random.float(-this.delay * this._typeVarPercent / 2,this.delay * this._typeVarPercent / 2);
					} else {
						this._timer = flixel_FlxG.random.float(-this.eraseDelay * this._typeVarPercent / 2,this.eraseDelay * this._typeVarPercent / 2);
					}
				} else {
					this._timer %= this.delay;
				}
				if(this.sounds != null && !this.useDefaultSound) {
					if(!this.finishSounds) {
						var _g = 0;
						var _g1 = this.sounds;
						while(_g < _g1.length) {
							var sound = _g1[_g];
							++_g;
							sound.cleanup(sound.autoDestroy,true);
						}
					}
					flixel_FlxG.random.getObject_flixel_system_FlxSound(this.sounds).play(!this.finishSounds);
				} else if(this.useDefaultSound) {
					this._sound.play(!this.finishSounds);
				}
			}
		}
		flixel_addons_text_FlxTypeText.helperString = this.prefix + HxOverrides.substr(this._finalText,0,this._length);
		if(this.showCursor) {
			this._cursorTimer += elapsed;
			var isBreakLine = (this.prefix + this._finalText).charAt(flixel_addons_text_FlxTypeText.helperString.length) == "\n";
			if(this._cursorTimer > this.cursorBlinkSpeed / 2 && !isBreakLine) {
				flixel_addons_text_FlxTypeText.helperString += this.cursorCharacter.charAt(0);
			}
			if(this._cursorTimer > this.cursorBlinkSpeed) {
				this._cursorTimer = 0;
			}
		}
		if(flixel_addons_text_FlxTypeText.helperString != this.text) {
			this.set_text(flixel_addons_text_FlxTypeText.helperString);
			if(this._length >= this._finalText.length && this._typing && !this._waiting && !this._erasing) {
				this.onComplete();
			}
			if(this._length == 0 && this._erasing && !this._typing && !this._waiting) {
				this.onErased();
			}
		}
		flixel_text_FlxText.prototype.update.call(this,elapsed);
	}
	,skip: function() {
		if(this._erasing || this._waiting) {
			this._length = 0;
			this._waiting = false;
		} else if(this._typing) {
			this._length = this._finalText.length;
		}
	}
	,loadDefaultSound: function() {
		this._sound = flixel_FlxG.sound.load(new flixel_addons_text_TypeSound());
	}
	,__class__: flixel_addons_text_FlxTypeText
});
var lime_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = "lime.math.Vector2";
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f,result) {
	if(result == null) {
		result = new lime_math_Vector2();
	}
	result.x = pt2.x + f * (pt1.x - pt2.x);
	result.y = pt2.y + f * (pt1.y - pt2.y);
	return result;
};
lime_math_Vector2.polar = function(len,angle,result) {
	if(result == null) {
		result = new lime_math_Vector2();
	}
	var ya = len * Math.sin(angle);
	result.x = len * Math.cos(angle);
	result.y = ya;
	return result;
};
lime_math_Vector2.prototype = {
	x: null
	,y: null
	,add: function(v,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = v.x + this.x;
		result.y = v.y + this.y;
		return result;
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = this.x - v.x;
		result.y = this.y - v.y;
		return result;
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y;
	}
	,__class__: lime_math_Vector2
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) {
		fillColor = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	this.__drawableType = 0;
	this.transparent = transparent;
	if(width == null) {
		width = 0;
	}
	if(height == null) {
		height = 0;
	}
	if(width < 0) {
		width = 0;
	}
	if(height < 0) {
		height = 0;
	}
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	this.__textureWidth = width;
	this.__textureHeight = height;
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) {
				fillColor = 0;
			}
		} else {
			fillColor = -16777216 | fillColor & 16777215;
		}
		fillColor = fillColor << 8 | fillColor >>> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
		this.readable = true;
	}
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderable = true;
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = "openfl.display.BitmapData";
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.__textureFormat = null;
openfl_display_BitmapData.__textureInternalFormat = null;
openfl_display_BitmapData.fromBase64 = function(base64,type) {
	return null;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha) {
	return null;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(canvas == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path) {
	return null;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(image == null || image.buffer == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	if(bitmapData.image != null) {
		return bitmapData;
	} else {
		return null;
	}
};
openfl_display_BitmapData.fromTexture = function(texture) {
	if(texture == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(texture.__width,texture.__height,true,0);
	bitmapData.readable = false;
	bitmapData.__texture = texture;
	bitmapData.__textureContext = texture.__textureContext;
	bitmapData.image = null;
	return bitmapData;
};
openfl_display_BitmapData.loadFromBase64 = function(base64,type) {
	return lime_graphics_Image.loadFromBase64(base64,type).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.loadFromBytes = function(bytes,rawAlpha) {
	return lime_graphics_Image.loadFromBytes(openfl_utils_ByteArray.toBytes(bytes)).then(function(image) {
		var bitmapData = openfl_display_BitmapData.fromImage(image);
		if(rawAlpha != null) {
			bitmapData.__applyAlpha(rawAlpha);
		}
		return lime_app_Future.withValue(bitmapData);
	});
};
openfl_display_BitmapData.loadFromFile = function(path) {
	return lime_graphics_Image.loadFromFile(path).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.prototype = {
	height: null
	,image: null
	,readable: null
	,rect: null
	,transparent: null
	,width: null
	,__blendMode: null
	,__drawableType: null
	,__framebuffer: null
	,__framebufferContext: null
	,__indexBuffer: null
	,__indexBufferContext: null
	,__indexBufferData: null
	,__indexBufferGrid: null
	,__isMask: null
	,__isValid: null
	,__mask: null
	,__renderable: null
	,__renderTransform: null
	,__scrollRect: null
	,__stencilBuffer: null
	,__surface: null
	,__texture: null
	,__textureContext: null
	,__textureHeight: null
	,__textureVersion: null
	,__textureWidth: null
	,__transform: null
	,__uvRect: null
	,__vertexBuffer: null
	,__vertexBufferContext: null
	,__vertexBufferData: null
	,__vertexBufferGrid: null
	,__vertexBufferHeight: null
	,__vertexBufferScaleX: null
	,__vertexBufferScaleY: null
	,__vertexBufferWidth: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable) {
			return;
		}
		var needSecondBitmapData = filter.__needSecondBitmapData;
		var needCopyOfOriginal = filter.__preserveObject;
		var bitmapData2 = null;
		var bitmapData3 = null;
		if(needSecondBitmapData) {
			bitmapData2 = new openfl_display_BitmapData(this.width,this.height,true,0);
		} else {
			bitmapData2 = this;
		}
		if(needCopyOfOriginal) {
			bitmapData3 = new openfl_display_BitmapData(this.width,this.height,true,0);
		}
		if(filter.__preserveObject) {
			bitmapData3.copyPixels(this,this.rect,destPoint);
		}
		var lastBitmap = filter.__applyFilter(bitmapData2,this,sourceRect,destPoint);
		if(filter.__preserveObject) {
			lastBitmap.draw(bitmapData3,null,null);
		}
		if(needSecondBitmapData && lastBitmap == bitmapData2) {
			bitmapData2.image.version = this.image.version;
			this.image = bitmapData2.image;
		}
		this.image.dirty = true;
		this.image.version++;
	}
	,clone: function() {
		var bitmapData;
		if(!this.__isValid) {
			bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent,0);
		} else if(!this.readable && this.image == null) {
			bitmapData = new openfl_display_BitmapData(0,0,this.transparent,0);
			bitmapData.width = this.width;
			bitmapData.height = this.height;
			bitmapData.__textureWidth = this.__textureWidth;
			bitmapData.__textureHeight = this.__textureHeight;
			bitmapData.rect.copyFrom(this.rect);
			bitmapData.__framebuffer = this.__framebuffer;
			bitmapData.__framebufferContext = this.__framebufferContext;
			bitmapData.__texture = this.__texture;
			bitmapData.__textureContext = this.__textureContext;
			bitmapData.__isValid = true;
		} else {
			bitmapData = openfl_display_BitmapData.fromImage(this.image.clone(),this.transparent);
		}
		bitmapData.__worldTransform.copyFrom(this.__worldTransform);
		bitmapData.__renderTransform.copyFrom(this.__renderTransform);
		return bitmapData;
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.readable) {
			return;
		}
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
	}
	,compare: function(otherBitmapData) {
		if(otherBitmapData == this) {
			return 0;
		} else if(otherBitmapData == null) {
			return -1;
		} else if(this.readable == false || otherBitmapData.readable == false) {
			return -2;
		} else if(this.width != otherBitmapData.width) {
			return -3;
		} else if(this.height != otherBitmapData.height) {
			return -4;
		}
		if(this.image != null && otherBitmapData.image != null && this.image.get_format() == otherBitmapData.image.get_format()) {
			var bytes = this.image.get_data();
			var otherBytes = otherBitmapData.image.get_data();
			var equal = true;
			var _g = 0;
			var _g1 = bytes.length;
			while(_g < _g1) {
				var i = _g++;
				if(bytes[i] != otherBytes[i]) {
					equal = false;
					break;
				}
			}
			if(equal) {
				return 0;
			}
		}
		var bitmapData = null;
		var foundDifference;
		var pixel;
		var otherPixel;
		var comparePixel;
		var r;
		var g;
		var b;
		var a;
		var _g = 0;
		var _g1 = this.height;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g3 = this.width;
			while(_g2 < _g3) {
				var x = _g2++;
				foundDifference = false;
				pixel = this.getPixel32(x,y);
				otherPixel = otherBitmapData.getPixel32(x,y);
				comparePixel = 0;
				if(pixel != otherPixel) {
					r = (pixel >>> 16 & 255) - (otherPixel >>> 16 & 255);
					g = (pixel >>> 8 & 255) - (otherPixel >>> 8 & 255);
					b = (pixel & 255) - (otherPixel & 255);
					if(r < 0) {
						r *= -1;
					}
					if(g < 0) {
						g *= -1;
					}
					if(b < 0) {
						b *= -1;
					}
					if(r == 0 && g == 0 && b == 0) {
						a = (pixel >>> 24 & 255) - (otherPixel >>> 24 & 255);
						if(a != 0) {
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | 16711680 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | 65280 | comparePixel & 255 & 255;
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | 255;
							comparePixel = (a & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							foundDifference = true;
						}
					} else {
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (r & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (g & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | b & 255;
						comparePixel = -16777216 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						foundDifference = true;
					}
				}
				if(foundDifference) {
					if(bitmapData == null) {
						bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent || otherBitmapData.transparent,0);
					}
					bitmapData.setPixel32(x,y,comparePixel);
				}
			}
		}
		if(bitmapData == null) {
			return 0;
		}
		return bitmapData;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.readable) {
			return;
		}
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.image.copyChannel(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(!this.readable || sourceBitmapData == null) {
			return;
		}
		if(alphaPoint != null) {
			openfl_display_BitmapData.__tempVector.x = alphaPoint.x;
			openfl_display_BitmapData.__tempVector.y = alphaPoint.y;
		}
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null ? alphaBitmapData.image : null,alphaPoint != null ? openfl_display_BitmapData.__tempVector : null,mergeAlpha);
	}
	,dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		this.readable = false;
		this.__surface = null;
		this.__vertexBuffer = null;
		this.__framebuffer = null;
		this.__framebufferContext = null;
		this.__texture = null;
		this.__textureContext = null;
	}
	,disposeImage: function() {
		this.readable = false;
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(source == null) {
			return;
		}
		source.__update(false,true);
		var transform = openfl_geom_Matrix.__pool.get();
		transform.copyFrom(source.__renderTransform);
		transform.invert();
		if(matrix != null) {
			transform.concat(matrix);
		}
		var clipMatrix = null;
		if(clipRect != null) {
			clipMatrix = openfl_geom_Matrix.__pool.get();
			clipMatrix.copyFrom(transform);
			clipMatrix.invert();
		}
		var _colorTransform = new openfl_geom_ColorTransform();
		_colorTransform.__copyFrom(source.__worldColorTransform);
		_colorTransform.__invert();
		if(!this.readable && openfl_Lib.get_current().stage.context3D != null) {
			if(this.__textureContext == null) {
				this.__textureContext = lime_app_Application.current.__window.context;
			}
			if(colorTransform != null) {
				_colorTransform.__combine(colorTransform);
			}
			var renderer = new openfl_display_OpenGLRenderer(openfl_Lib.get_current().stage.context3D,this);
			renderer.__allowSmoothing = smoothing;
			renderer.__overrideBlendMode = blendMode;
			renderer.__worldTransform = transform;
			renderer.__worldAlpha = 1 / source.__worldAlpha;
			renderer.__worldColorTransform = _colorTransform;
			renderer.__resize(this.width,this.height);
			if(clipRect != null) {
				renderer.__pushMaskRect(clipRect,clipMatrix);
			}
			this.__drawGL(source,renderer);
			if(clipRect != null) {
				renderer.__popMaskRect();
				openfl_geom_Matrix.__pool.release(clipMatrix);
			}
		} else {
			if(colorTransform != null) {
				var bounds = openfl_geom_Rectangle.__pool.get();
				var boundsMatrix = openfl_geom_Matrix.__pool.get();
				source.__getBounds(bounds,boundsMatrix);
				var width = Math.ceil(bounds.width);
				var height = Math.ceil(bounds.height);
				boundsMatrix.tx = -bounds.x;
				boundsMatrix.ty = -bounds.y;
				var copy = new openfl_display_BitmapData(width,height,true,0);
				copy.draw(source,boundsMatrix);
				copy.colorTransform(copy.rect,colorTransform);
				copy.__renderTransform.identity();
				copy.__renderTransform.tx = bounds.x;
				copy.__renderTransform.ty = bounds.y;
				copy.__renderTransform.concat(source.__renderTransform);
				copy.__worldAlpha = source.__worldAlpha;
				copy.__worldColorTransform.__copyFrom(source.__worldColorTransform);
				source = copy;
				openfl_geom_Rectangle.__pool.release(bounds);
				openfl_geom_Matrix.__pool.release(boundsMatrix);
			}
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.image);
			var renderer = new openfl_display_CanvasRenderer(this.image.buffer.__srcContext);
			renderer.__allowSmoothing = smoothing;
			renderer.__overrideBlendMode = blendMode;
			renderer.__worldTransform = transform;
			renderer.__worldAlpha = 1 / source.__worldAlpha;
			renderer.__worldColorTransform = _colorTransform;
			if(clipRect != null) {
				renderer.__pushMaskRect(clipRect,clipMatrix);
			}
			this.__drawCanvas(source,renderer);
			if(clipRect != null) {
				renderer.__popMaskRect();
				openfl_geom_Matrix.__pool.release(clipMatrix);
			}
		}
		openfl_geom_Matrix.__pool.release(transform);
	}
	,drawWithQuality: function(source,matrix,colorTransform,blendMode,clipRect,smoothing,quality) {
		if(smoothing == null) {
			smoothing = false;
		}
		this.draw(source,matrix,colorTransform,blendMode,clipRect,quality != 2 && smoothing);
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.readable || rect == null) {
			byteArray = null;
			return byteArray;
		}
		if(byteArray == null) {
			var this1 = new openfl_utils_ByteArrayData(0);
			byteArray = this1;
		}
		var image = this.image;
		if(!rect.equals(this.rect)) {
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.tx = Math.round(-rect.x);
			matrix.ty = Math.round(-rect.y);
			var bitmapData = new openfl_display_BitmapData(Math.ceil(rect.width),Math.ceil(rect.height),true,0);
			bitmapData.draw(this,matrix);
			image = bitmapData.image;
			openfl_geom_Matrix.__pool.release(matrix);
		}
		if(((compressor) instanceof openfl_display_PNGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils_ByteArray.fromBytes(image.encode(lime_graphics_ImageFileFormat.PNG)),0,0);
			return byteArray;
		} else if(((compressor) instanceof openfl_display_JPEGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils_ByteArray.fromBytes(image.encode(lime_graphics_ImageFileFormat.JPEG,(js_Boot.__cast(compressor , openfl_display_JPEGEncoderOptions)).quality)),0,0);
			return byteArray;
		}
		byteArray = null;
		return byteArray;
	}
	,fillRect: function(rect,color) {
		this.__fillRect(rect,color,true);
	}
	,floodFill: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.floodFill(x,y,color,1);
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getIndexBuffer: function(context,scale9Grid) {
		var gl = context.gl;
		if(this.__indexBuffer == null || this.__indexBufferContext != context.__context || scale9Grid != null && this.__indexBufferGrid == null || this.__indexBufferGrid != null && !this.__indexBufferGrid.equals(scale9Grid)) {
			this.__indexBufferContext = context.__context;
			this.__indexBuffer = null;
			if(scale9Grid != null) {
				if(this.__indexBufferGrid == null) {
					this.__indexBufferGrid = new openfl_geom_Rectangle();
				}
				this.__indexBufferGrid.copyFrom(scale9Grid);
				var centerX = scale9Grid.width;
				var centerY = scale9Grid.height;
				if(centerX != 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Uint16Array(54);
					this.__indexBufferData = this1;
					this.__indexBufferData[0] = 0;
					this.__indexBufferData[1] = 1;
					this.__indexBufferData[2] = 2;
					this.__indexBufferData[3] = 2;
					this.__indexBufferData[4] = 1;
					this.__indexBufferData[5] = 3;
					this.__indexBufferData[6] = 4;
					this.__indexBufferData[7] = 0;
					this.__indexBufferData[8] = 5;
					this.__indexBufferData[9] = 5;
					this.__indexBufferData[10] = 0;
					this.__indexBufferData[11] = 2;
					this.__indexBufferData[12] = 6;
					this.__indexBufferData[13] = 4;
					this.__indexBufferData[14] = 7;
					this.__indexBufferData[15] = 7;
					this.__indexBufferData[16] = 4;
					this.__indexBufferData[17] = 5;
					this.__indexBufferData[18] = 8;
					this.__indexBufferData[19] = 9;
					this.__indexBufferData[20] = 0;
					this.__indexBufferData[21] = 0;
					this.__indexBufferData[22] = 9;
					this.__indexBufferData[23] = 1;
					this.__indexBufferData[24] = 10;
					this.__indexBufferData[25] = 8;
					this.__indexBufferData[26] = 4;
					this.__indexBufferData[27] = 4;
					this.__indexBufferData[28] = 8;
					this.__indexBufferData[29] = 0;
					this.__indexBufferData[30] = 11;
					this.__indexBufferData[31] = 10;
					this.__indexBufferData[32] = 6;
					this.__indexBufferData[33] = 6;
					this.__indexBufferData[34] = 10;
					this.__indexBufferData[35] = 4;
					this.__indexBufferData[36] = 12;
					this.__indexBufferData[37] = 13;
					this.__indexBufferData[38] = 8;
					this.__indexBufferData[39] = 8;
					this.__indexBufferData[40] = 13;
					this.__indexBufferData[41] = 9;
					this.__indexBufferData[42] = 14;
					this.__indexBufferData[43] = 12;
					this.__indexBufferData[44] = 10;
					this.__indexBufferData[45] = 10;
					this.__indexBufferData[46] = 12;
					this.__indexBufferData[47] = 8;
					this.__indexBufferData[48] = 15;
					this.__indexBufferData[49] = 14;
					this.__indexBufferData[50] = 11;
					this.__indexBufferData[51] = 11;
					this.__indexBufferData[52] = 14;
					this.__indexBufferData[53] = 10;
					this.__indexBuffer = context.createIndexBuffer(54);
				} else if(centerX == 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Uint16Array(18);
					this.__indexBufferData = this1;
					this.__indexBufferData[0] = 0;
					this.__indexBufferData[1] = 1;
					this.__indexBufferData[2] = 2;
					this.__indexBufferData[3] = 2;
					this.__indexBufferData[4] = 1;
					this.__indexBufferData[5] = 3;
					this.__indexBufferData[6] = 4;
					this.__indexBufferData[7] = 5;
					this.__indexBufferData[8] = 0;
					this.__indexBufferData[9] = 0;
					this.__indexBufferData[10] = 5;
					this.__indexBufferData[11] = 1;
					this.__indexBufferData[12] = 6;
					this.__indexBufferData[13] = 7;
					this.__indexBufferData[14] = 4;
					this.__indexBufferData[15] = 4;
					this.__indexBufferData[16] = 7;
					this.__indexBufferData[17] = 5;
					this.__indexBuffer = context.createIndexBuffer(18);
				} else if(centerX != 0 && centerY == 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Uint16Array(18);
					this.__indexBufferData = this1;
					this.__indexBufferData[0] = 0;
					this.__indexBufferData[1] = 1;
					this.__indexBufferData[2] = 2;
					this.__indexBufferData[3] = 2;
					this.__indexBufferData[4] = 1;
					this.__indexBufferData[5] = 3;
					this.__indexBufferData[6] = 4;
					this.__indexBufferData[7] = 0;
					this.__indexBufferData[8] = 5;
					this.__indexBufferData[9] = 5;
					this.__indexBufferData[10] = 0;
					this.__indexBufferData[11] = 2;
					this.__indexBufferData[12] = 6;
					this.__indexBufferData[13] = 4;
					this.__indexBufferData[14] = 7;
					this.__indexBufferData[15] = 7;
					this.__indexBufferData[16] = 4;
					this.__indexBufferData[17] = 5;
					this.__indexBuffer = context.createIndexBuffer(18);
				}
			} else {
				this.__indexBufferGrid = null;
			}
			if(this.__indexBuffer == null) {
				var array = null;
				var vector = null;
				var view = null;
				var buffer = null;
				var len = null;
				var this1 = new Uint16Array(6);
				this.__indexBufferData = this1;
				this.__indexBufferData[0] = 0;
				this.__indexBufferData[1] = 1;
				this.__indexBufferData[2] = 2;
				this.__indexBufferData[3] = 2;
				this.__indexBufferData[4] = 1;
				this.__indexBufferData[5] = 3;
				this.__indexBuffer = context.createIndexBuffer(6);
			}
			this.__indexBuffer.uploadFromTypedArray(this.__indexBufferData);
		}
		return this.__indexBuffer;
	}
	,getVertexBuffer: function(context,scale9Grid,targetObject) {
		var gl = context.gl;
		if(this.__vertexBuffer == null || this.__vertexBufferContext != context.__context || scale9Grid != null && this.__vertexBufferGrid == null || this.__vertexBufferGrid != null && !this.__vertexBufferGrid.equals(scale9Grid) || targetObject != null && (this.__vertexBufferWidth != targetObject.get_width() || this.__vertexBufferHeight != targetObject.get_height() || this.__vertexBufferScaleX != targetObject.get_scaleX() || this.__vertexBufferScaleY != targetObject.get_scaleY())) {
			this.__uvRect = new openfl_geom_Rectangle(0,0,this.width,this.height);
			var uvWidth = 1;
			var uvHeight = 1;
			this.__vertexBufferContext = context.__context;
			this.__vertexBuffer = null;
			if(targetObject != null) {
				this.__vertexBufferWidth = targetObject.get_width();
				this.__vertexBufferHeight = targetObject.get_height();
				this.__vertexBufferScaleX = targetObject.get_scaleX();
				this.__vertexBufferScaleY = targetObject.get_scaleY();
			}
			if(scale9Grid != null && targetObject != null) {
				if(this.__vertexBufferGrid == null) {
					this.__vertexBufferGrid = new openfl_geom_Rectangle();
				}
				this.__vertexBufferGrid.copyFrom(scale9Grid);
				this.__vertexBufferWidth = targetObject.get_width();
				this.__vertexBufferHeight = targetObject.get_height();
				this.__vertexBufferScaleX = targetObject.get_scaleX();
				this.__vertexBufferScaleY = targetObject.get_scaleY();
				var centerX = scale9Grid.width;
				var centerY = scale9Grid.height;
				if(centerX != 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Float32Array(224);
					this.__vertexBufferData = this1;
					var left = scale9Grid.x;
					var top = scale9Grid.y;
					var right = this.width - centerX - left;
					var bottom = this.height - centerY - top;
					var uvLeft = left / this.width;
					var uvTop = top / this.height;
					var uvCenterX = centerX / this.width;
					var uvCenterY = centerY / this.height;
					var uvRight = right / this.width;
					var uvBottom = bottom / this.height;
					var renderedLeft = left / targetObject.get_scaleX();
					var renderedTop = top / targetObject.get_scaleY();
					var renderedRight = right / targetObject.get_scaleX();
					var renderedBottom = bottom / targetObject.get_scaleY();
					var renderedCenterX = targetObject.get_width() / targetObject.get_scaleX() - renderedLeft - renderedRight;
					var renderedCenterY = targetObject.get_height() / targetObject.get_scaleY() - renderedTop - renderedBottom;
					this.__vertexBufferData[0] = renderedLeft;
					this.__vertexBufferData[1] = renderedTop;
					this.__vertexBufferData[3] = uvWidth * uvLeft;
					this.__vertexBufferData[4] = uvHeight * uvTop;
					this.__vertexBufferData[15] = renderedTop;
					this.__vertexBufferData[18] = uvHeight * uvTop;
					this.__vertexBufferData[28] = renderedLeft;
					this.__vertexBufferData[31] = uvWidth * uvLeft;
					this.__vertexBufferData[56] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[57] = renderedTop;
					this.__vertexBufferData[59] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[60] = uvHeight * uvTop;
					this.__vertexBufferData[70] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[73] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[84] = this.width;
					this.__vertexBufferData[85] = renderedTop;
					this.__vertexBufferData[87] = uvWidth;
					this.__vertexBufferData[88] = uvHeight * uvTop;
					this.__vertexBufferData[98] = this.width;
					this.__vertexBufferData[101] = uvWidth;
					this.__vertexBufferData[112] = renderedLeft;
					this.__vertexBufferData[113] = renderedTop + renderedCenterY;
					this.__vertexBufferData[115] = uvWidth * uvLeft;
					this.__vertexBufferData[116] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[127] = renderedTop + renderedCenterY;
					this.__vertexBufferData[130] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[140] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[141] = renderedTop + renderedCenterY;
					this.__vertexBufferData[143] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[144] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[154] = this.width;
					this.__vertexBufferData[155] = renderedTop + renderedCenterY;
					this.__vertexBufferData[157] = uvWidth;
					this.__vertexBufferData[158] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[168] = renderedLeft;
					this.__vertexBufferData[169] = this.height;
					this.__vertexBufferData[171] = uvWidth * uvLeft;
					this.__vertexBufferData[172] = uvHeight;
					this.__vertexBufferData[183] = this.height;
					this.__vertexBufferData[186] = uvHeight;
					this.__vertexBufferData[196] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[197] = this.height;
					this.__vertexBufferData[199] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[200] = uvHeight;
					this.__vertexBufferData[210] = this.width;
					this.__vertexBufferData[211] = this.height;
					this.__vertexBufferData[213] = uvWidth;
					this.__vertexBufferData[214] = uvHeight;
					this.__vertexBuffer = context.createVertexBuffer(16,14);
				} else if(centerX == 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Float32Array(112);
					this.__vertexBufferData = this1;
					var top = scale9Grid.y;
					var bottom = this.height - centerY - top;
					var uvTop = top / this.height;
					var uvCenterY = centerY / this.height;
					var uvBottom = bottom / this.height;
					var renderedTop = top / targetObject.get_scaleY();
					var renderedBottom = bottom / targetObject.get_scaleY();
					var renderedCenterY = targetObject.get_height() / targetObject.get_scaleY() - renderedTop - renderedBottom;
					var renderedWidth = targetObject.get_width() / targetObject.get_scaleX();
					this.__vertexBufferData[0] = renderedWidth;
					this.__vertexBufferData[1] = renderedTop;
					this.__vertexBufferData[3] = uvWidth;
					this.__vertexBufferData[4] = uvHeight * uvTop;
					this.__vertexBufferData[15] = renderedTop;
					this.__vertexBufferData[18] = uvHeight * uvTop;
					this.__vertexBufferData[28] = renderedWidth;
					this.__vertexBufferData[31] = uvWidth;
					this.__vertexBufferData[56] = renderedWidth;
					this.__vertexBufferData[57] = renderedTop + renderedCenterY;
					this.__vertexBufferData[59] = uvWidth;
					this.__vertexBufferData[60] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[71] = renderedTop + renderedCenterY;
					this.__vertexBufferData[74] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[84] = renderedWidth;
					this.__vertexBufferData[85] = this.height;
					this.__vertexBufferData[87] = uvWidth;
					this.__vertexBufferData[88] = uvHeight;
					this.__vertexBufferData[99] = this.height;
					this.__vertexBufferData[102] = uvHeight;
					this.__vertexBuffer = context.createVertexBuffer(8,14);
				} else if(centerY == 0 && centerX != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Float32Array(112);
					this.__vertexBufferData = this1;
					var left = scale9Grid.x;
					var right = this.width - centerX - left;
					var uvLeft = left / this.width;
					var uvCenterX = centerX / this.width;
					var uvRight = right / this.width;
					var renderedLeft = left / targetObject.get_scaleX();
					var renderedRight = right / targetObject.get_scaleX();
					var renderedCenterX = targetObject.get_width() / targetObject.get_scaleX() - renderedLeft - renderedRight;
					var renderedHeight = targetObject.get_height() / targetObject.get_scaleY();
					this.__vertexBufferData[0] = renderedLeft;
					this.__vertexBufferData[1] = renderedHeight;
					this.__vertexBufferData[3] = uvWidth * uvLeft;
					this.__vertexBufferData[4] = uvHeight;
					this.__vertexBufferData[15] = renderedHeight;
					this.__vertexBufferData[18] = uvHeight;
					this.__vertexBufferData[28] = renderedLeft;
					this.__vertexBufferData[31] = uvWidth * uvLeft;
					this.__vertexBufferData[56] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[57] = renderedHeight;
					this.__vertexBufferData[59] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[60] = uvHeight;
					this.__vertexBufferData[70] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[73] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[84] = this.width;
					this.__vertexBufferData[85] = renderedHeight;
					this.__vertexBufferData[87] = uvWidth;
					this.__vertexBufferData[88] = uvHeight;
					this.__vertexBufferData[98] = this.width;
					this.__vertexBufferData[101] = uvWidth;
					this.__vertexBuffer = context.createVertexBuffer(8,14);
				}
			} else {
				this.__vertexBufferGrid = null;
			}
			if(this.__vertexBuffer == null) {
				var array = null;
				var vector = null;
				var view = null;
				var buffer = null;
				var len = null;
				var this1 = new Float32Array(56);
				this.__vertexBufferData = this1;
				this.__vertexBufferData[0] = this.width;
				this.__vertexBufferData[1] = this.height;
				this.__vertexBufferData[3] = uvWidth;
				this.__vertexBufferData[4] = uvHeight;
				this.__vertexBufferData[15] = this.height;
				this.__vertexBufferData[18] = uvHeight;
				this.__vertexBufferData[28] = this.width;
				this.__vertexBufferData[31] = uvWidth;
				this.__vertexBuffer = context.createVertexBuffer(3,14);
			}
			this.__vertexBuffer.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(this.__vertexBufferData));
		}
		return this.__vertexBuffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) {
			findColor = true;
		}
		if(!this.readable) {
			return new openfl_geom_Rectangle(0,0,this.width,this.height);
		}
		if(!this.transparent || (mask >> 24 & 255) > 0) {
			var color1 = color;
			if((color1 >>> 24 & 255) == 0) {
				color1 = 0;
			}
		}
		var rect = this.image.getColorBoundsRect(mask,color,findColor,1);
		return new openfl_geom_Rectangle(rect.x,rect.y,rect.width,rect.height);
	}
	,getPixel: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.readable) {
			return null;
		}
		if(rect == null) {
			rect = this.rect;
		}
		var byteArray = openfl_utils_ByteArray.fromBytes(this.image.getPixels(rect.__toLimeRectangle(),1));
		byteArray.__endian = 0;
		return byteArray;
	}
	,getSurface: function() {
		if(!this.readable) {
			return null;
		}
		if(this.__surface == null) {
			this.__surface = lime_graphics_cairo_CairoImageSurface.fromImage(this.image);
		}
		return this.__surface;
	}
	,getTexture: function(context) {
		if(!this.__isValid) {
			return null;
		}
		if(this.__texture == null || this.__textureContext != context.__context) {
			this.__textureContext = context.__context;
			this.__texture = context.createRectangleTexture(this.width,this.height,1,false);
			this.__textureVersion = -1;
		}
		lime__$internal_graphics_ImageCanvasUtil.sync(this.image,false);
		if(this.image != null && this.image.version > this.__textureVersion) {
			if(this.__surface != null) {
				lime_graphics_cairo_CairoSurface.flush(this.__surface);
			}
			var textureImage = this.image;
			if(!openfl_display3D_textures_TextureBase.__supportsBGRA && textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
			}
			this.__texture.__uploadFromImage(textureImage);
			this.__textureVersion = this.image.version;
			this.__textureWidth = textureImage.buffer.width;
			this.__textureHeight = textureImage.buffer.height;
		}
		if(!this.readable && this.image != null) {
			this.__surface = null;
			this.image = null;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = UInt.toFloat(openfl_utils_ByteArray.get_length(pixels)) / UInt.toFloat(4) | 0;
		var result = openfl_Vector.toIntVector(null,length,true);
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			result.set(i,pixels.readUnsignedInt());
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect = hRect != null ? hRect : new openfl_geom_Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var _g = [];
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < 256) {
			var j = _g2++;
			_g1.push(0);
		}
		_g.push(_g1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < 256) {
			var j = _g2++;
			_g1.push(0);
		}
		_g.push(_g1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < 256) {
			var j = _g2++;
			_g1.push(0);
		}
		_g.push(_g1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < 256) {
			var j = _g2++;
			_g1.push(0);
		}
		_g.push(_g1);
		var result = _g;
		var _g = 0;
		var _g1 = openfl_utils_ByteArray.get_length(pixels);
		while(_g < _g1) {
			var i = _g++;
			var result1 = result[i % 4];
			++result1[pixels.readUnsignedByte()];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) {
			secondAlphaThreshold = 1;
		}
		if(!this.readable) {
			return false;
		}
		if(((secondObject) instanceof openfl_display_Bitmap)) {
			secondObject = (js_Boot.__cast(secondObject , openfl_display_Bitmap)).__bitmapData;
		}
		if(((secondObject) instanceof openfl_geom_Point)) {
			var secondPoint = secondObject;
			var x = secondPoint.x - firstPoint.x | 0;
			var y = secondPoint.y - firstPoint.y | 0;
			if(this.rect.contains(x,y)) {
				var pixel = this.getPixel32(x,y);
				if((pixel >> 24 & 255) > firstAlphaThreshold) {
					return true;
				}
			}
		} else if(((secondObject) instanceof openfl_display_BitmapData)) {
			var secondBitmapData = secondObject;
			var x;
			var y;
			if(secondBitmapDataPoint == null) {
				x = 0;
				y = 0;
			} else {
				x = Math.round(secondBitmapDataPoint.x - firstPoint.x);
				y = Math.round(secondBitmapDataPoint.y - firstPoint.y);
			}
			var hitRect = openfl_geom_Rectangle.__pool.get();
			hitRect.setTo(x,y,secondBitmapData.width,secondBitmapData.height);
			if(this.rect.intersects(hitRect)) {
				if(x < 0) {
					hitRect.x = 0;
					hitRect.width = Math.min(secondBitmapData.width + x,this.width);
				} else {
					hitRect.width = Math.min(secondBitmapData.width,this.width - x);
				}
				if(y < 0) {
					hitRect.y = 0;
					hitRect.height = Math.min(secondBitmapData.height + y,this.height);
				} else {
					hitRect.height = Math.min(secondBitmapData.height,this.height - y);
				}
				var pixels = this.getPixels(hitRect);
				hitRect.x = x < 0 ? -x : 0;
				hitRect.y = y < 0 ? -y : 0;
				var testPixels = secondBitmapData.getPixels(hitRect);
				var length = hitRect.width * hitRect.height | 0;
				var pixel;
				var testPixel;
				var _g = 0;
				var _g1 = length;
				while(_g < _g1) {
					var i = _g++;
					pixel = pixels.readUnsignedInt();
					testPixel = testPixels.readUnsignedInt();
					if(UInt.gt(pixel >>> 24 & 255,firstAlphaThreshold) && UInt.gt(testPixel >>> 24 & 255,secondAlphaThreshold)) {
						openfl_geom_Rectangle.__pool.release(hitRect);
						return true;
					}
				}
			}
			openfl_geom_Rectangle.__pool.release(hitRect);
		} else if(((secondObject) instanceof openfl_geom_Rectangle)) {
			var secondRectangle = openfl_geom_Rectangle.__pool.get();
			secondRectangle.copyFrom(secondObject);
			secondRectangle.offset(-firstPoint.x,-firstPoint.y);
			secondRectangle.__contract(0,0,this.width,this.height);
			if(secondRectangle.width > 0 && secondRectangle.height > 0) {
				var pixels = this.getPixels(secondRectangle);
				var length = UInt.toFloat(openfl_utils_ByteArray.get_length(pixels)) / UInt.toFloat(4) | 0;
				var pixel;
				var _g = 0;
				var _g1 = length;
				while(_g < _g1) {
					var i = _g++;
					pixel = pixels.readUnsignedInt();
					if(UInt.gt(pixel >>> 24 & 255,firstAlphaThreshold)) {
						openfl_geom_Rectangle.__pool.release(secondRectangle);
						return true;
					}
				}
			}
			openfl_geom_Rectangle.__pool.release(secondRectangle);
		}
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable || sourceRect == null || destPoint == null) {
			return;
		}
		this.image.merge(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(high == null) {
			high = 255;
		}
		if(low == null) {
			low = 0;
		}
		if(!this.readable) {
			return;
		}
		var func = function() {
			randomSeed = randomSeed * 1103515245 + 12345;
			return (Math.abs(randomSeed / 65536) | 0) % 32768;
		};
		var rand = func;
		rand();
		var range = high - low;
		var redChannel = (channelOptions & 1) == 1;
		var greenChannel = (channelOptions & 2) >> 1 == 1;
		var blueChannel = (channelOptions & 4) >> 2 == 1;
		var alphaChannel = (channelOptions & 8) >> 3 == 1;
		var _g = 0;
		var _g1 = this.height;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g3 = this.width;
			while(_g2 < _g3) {
				var x = _g2++;
				var red = 0;
				var blue = 0;
				var green = 0;
				var alpha = 255;
				if(grayScale) {
					blue = low + rand() % range;
					green = blue;
					red = green;
					alpha = 255;
				} else {
					if(redChannel) {
						red = low + rand() % range;
					}
					if(greenChannel) {
						green = low + rand() % range;
					}
					if(blueChannel) {
						blue = low + rand() % range;
					}
					if(alphaChannel) {
						alpha = low + rand() % range;
					}
				}
				var rgb = alpha;
				rgb = (rgb << 8) + red;
				rgb = (rgb << 8) + green;
				rgb = (rgb << 8) + blue;
				this.setPixel32(x,y,rgb);
			}
		}
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = sourceBitmapData.getPixels(sourceRect);
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var _g = 0;
		var _g1 = sh * sw;
		while(_g < _g1) {
			var i = _g++;
			pixelValue = pixels.readUnsignedInt();
			a = alphaArray == null ? pixelValue & -16777216 : alphaArray[pixelValue >> 24 & 255];
			r = redArray == null ? pixelValue & 16711680 : redArray[pixelValue >> 16 & 255];
			g = greenArray == null ? pixelValue & 65280 : greenArray[pixelValue >> 8 & 255];
			b = blueArray == null ? pixelValue & 255 : blueArray[pixelValue & 255];
			color = a + r + g + b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		var destRect = openfl_geom_Rectangle.__pool.get();
		destRect.setTo(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,pixels);
		openfl_geom_Rectangle.__pool.release(destRect);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(!this.readable) {
			return;
		}
		var noise = new openfl_display__$internal_PerlinNoise(randomSeed,numOctaves,channelOptions,grayScale,0.5,stitch,0.15);
		noise.fill(this,baseX,baseY,0);
	}
	,scroll: function(x,y) {
		if(!this.readable) {
			return;
		}
		this.image.scroll(x,y);
	}
	,setPixel: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.setPixel(x,y,color,1);
	}
	,setPixel32: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.setPixel32(x,y,color,1);
	}
	,setPixels: function(rect,byteArray) {
		if(!this.readable || rect == null) {
			return;
		}
		var length = rect.width * rect.height * 4;
		if(UInt.toFloat(byteArray.length - byteArray.position) < length) {
			throw new openfl_errors_Error("End of file was encountered.",2030);
		}
		this.image.setPixels(rect.__toLimeRectangle(),openfl_utils_ByteArray.toBytePointer(byteArray),1,openfl_utils_Endian.toLimeEndian(byteArray.__endian));
	}
	,setVector: function(rect,inputVector) {
		var this1 = new openfl_utils_ByteArrayData(0);
		var byteArray = this1;
		openfl_utils_ByteArray.set_length(byteArray,inputVector.get_length() * 4);
		var color = inputVector.iterator();
		while(color.hasNext()) {
			var color1 = color.next();
			byteArray.writeUnsignedInt(color1);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) {
			return 0;
		}
		return this.image.threshold(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),operation,threshold,color,mask,copySource,1);
	}
	,unlock: function(changeRect) {
	}
	,__applyAlpha: function(alpha) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.image);
		lime__$internal_graphics_ImageCanvasUtil.createImageData(this.image);
		var data = this.image.buffer.data;
		var _g = 0;
		var _g1 = openfl_utils_ByteArray.get_length(alpha);
		while(_g < _g1) {
			var i = _g++;
			data[i * 4 + 3] = alpha.readUnsignedByte();
		}
		this.image.version++;
	}
	,__drawCairo: function(source,renderer) {
	}
	,__drawCanvas: function(source,renderer) {
		var buffer = this.image.buffer;
		if(!renderer.__allowSmoothing) {
			renderer.applySmoothing(buffer.__srcContext,false);
		}
		renderer.__render(source);
		if(!renderer.__allowSmoothing) {
			renderer.applySmoothing(buffer.__srcContext,true);
		}
		buffer.__srcContext.setTransform(1,0,0,1,0,0);
		buffer.__srcImageData = null;
		buffer.data = null;
		this.image.dirty = true;
		this.image.version++;
	}
	,__drawGL: function(source,renderer) {
		var context = renderer.__context3D;
		var cacheRTT = context.__state.renderToTexture;
		var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
		var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
		var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
		context.setRenderToTexture(this.getTexture(context),true);
		renderer.__render(source);
		if(cacheRTT != null) {
			context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
		} else {
			context.setRenderToBackBuffer();
		}
	}
	,__fillRect: function(rect,color,allowFramebuffer) {
		if(rect == null) {
			return;
		}
		if(this.transparent && (color & -16777216) == 0) {
			color = 0;
		}
		if(allowFramebuffer && this.__texture != null && this.__texture.__glFramebuffer != null && openfl_Lib.get_current().stage.__renderer.__type == "opengl") {
			var renderer = openfl_Lib.get_current().stage.__renderer;
			var context = renderer.__context3D;
			var color1 = color;
			var useScissor = !this.rect.equals(rect);
			var cacheRTT = context.__state.renderToTexture;
			var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
			var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
			var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
			context.setRenderToTexture(this.__texture);
			if(useScissor) {
				context.setScissorRectangle(rect);
			}
			context.clear((color1 >>> 16 & 255) / 255,(color1 >>> 8 & 255) / 255,(color1 & 255) / 255,this.transparent ? (color1 >>> 24 & 255) / 255 : 1,0,0,1);
			if(useScissor) {
				context.setScissorRectangle(null);
			}
			if(cacheRTT != null) {
				context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
			} else {
				context.setRenderToBackBuffer();
			}
		} else if(this.readable) {
			this.image.fillRect(rect.__toLimeRectangle(),color,1);
		}
	}
	,__fromBase64: function(base64,type) {
		var image = lime_graphics_Image.fromBase64(base64,type);
		this.__fromImage(image);
	}
	,__fromBytes: function(bytes,rawAlpha) {
		var image = lime_graphics_Image.fromBytes(openfl_utils_ByteArray.toBytes(bytes));
		this.__fromImage(image);
		if(rawAlpha != null) {
			this.__applyAlpha(rawAlpha);
		}
	}
	,__fromFile: function(path) {
		var image = lime_graphics_Image.fromFile(path);
		this.__fromImage(image);
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.__textureWidth = this.width;
			this.__textureHeight = this.height;
			this.readable = true;
			this.__isValid = true;
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.rect.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__loadFromBase64: function(base64,type) {
		var _gthis = this;
		return lime_graphics_Image.loadFromBase64(base64,type).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__loadFromBytes: function(bytes,rawAlpha) {
		var _gthis = this;
		return lime_graphics_Image.loadFromBytes(openfl_utils_ByteArray.toBytes(bytes)).then(function(image) {
			_gthis.__fromImage(image);
			if(rawAlpha != null) {
				_gthis.__applyAlpha(rawAlpha);
			}
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__loadFromFile: function(path) {
		var _gthis = this;
		return lime_graphics_Image.loadFromFile(path).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__resize: function(width,height) {
		this.width = width;
		this.height = height;
		this.rect.width = width;
		this.rect.height = height;
		this.__textureWidth = width;
		this.__textureHeight = height;
	}
	,__setUVRect: function(context,x,y,width,height) {
		var buffer = this.getVertexBuffer(context);
		if(buffer != null && (width != this.__uvRect.width || height != this.__uvRect.height || x != this.__uvRect.x || y != this.__uvRect.y)) {
			var gl = context.gl;
			if(this.__uvRect == null) {
				this.__uvRect = new openfl_geom_Rectangle();
			}
			this.__uvRect.setTo(x,y,width,height);
			var uvX = this.__textureWidth > 0 ? x / this.__textureWidth : 0;
			var uvY = this.__textureHeight > 0 ? y / this.__textureHeight : 0;
			var uvWidth = this.__textureWidth > 0 ? width / this.__textureWidth : 0;
			var uvHeight = this.__textureHeight > 0 ? height / this.__textureHeight : 0;
			this.__vertexBufferData[0] = width;
			this.__vertexBufferData[1] = height;
			this.__vertexBufferData[3] = uvX + uvWidth;
			this.__vertexBufferData[4] = uvY + uvHeight;
			this.__vertexBufferData[15] = height;
			this.__vertexBufferData[17] = uvX;
			this.__vertexBufferData[18] = uvY + uvHeight;
			this.__vertexBufferData[28] = width;
			this.__vertexBufferData[31] = uvX + uvWidth;
			this.__vertexBufferData[32] = uvY;
			this.__vertexBufferData[45] = uvX;
			this.__vertexBufferData[46] = uvY;
			this.__vertexBuffer.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(this.__vertexBufferData));
		}
	}
	,__sync: function() {
		lime__$internal_graphics_ImageCanvasUtil.sync(this.image,false);
	}
	,__update: function(transformOnly,updateChildren) {
		this.__updateTransforms();
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) {
			this.__worldTransform.identity();
		} else {
			this.__worldTransform.copyFrom(overrideTransform);
		}
		this.__renderTransform.copyFrom(this.__worldTransform);
	}
	,__class__: openfl_display_BitmapData
};
var flixel_addons_transition_GraphicTransTileCircle = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_addons_transition_GraphicTransTileCircle.preload != null) {
		this.__fromImage(flixel_addons_transition_GraphicTransTileCircle.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_addons_transition_GraphicTransTileCircle.resourceName),flixel_addons_transition_GraphicTransTileCircle.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_addons_transition_GraphicTransTileCircle.preload == null) {
				flixel_addons_transition_GraphicTransTileCircle.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.addons.transition.GraphicTransTileCircle"] = flixel_addons_transition_GraphicTransTileCircle;
flixel_addons_transition_GraphicTransTileCircle.__name__ = "flixel.addons.transition.GraphicTransTileCircle";
flixel_addons_transition_GraphicTransTileCircle.preload = null;
flixel_addons_transition_GraphicTransTileCircle.__super__ = openfl_display_BitmapData;
flixel_addons_transition_GraphicTransTileCircle.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_addons_transition_GraphicTransTileCircle
});
var flixel_addons_transition_GraphicTransTileDiamond = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_addons_transition_GraphicTransTileDiamond.preload != null) {
		this.__fromImage(flixel_addons_transition_GraphicTransTileDiamond.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_addons_transition_GraphicTransTileDiamond.resourceName),flixel_addons_transition_GraphicTransTileDiamond.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_addons_transition_GraphicTransTileDiamond.preload == null) {
				flixel_addons_transition_GraphicTransTileDiamond.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.addons.transition.GraphicTransTileDiamond"] = flixel_addons_transition_GraphicTransTileDiamond;
flixel_addons_transition_GraphicTransTileDiamond.__name__ = "flixel.addons.transition.GraphicTransTileDiamond";
flixel_addons_transition_GraphicTransTileDiamond.preload = null;
flixel_addons_transition_GraphicTransTileDiamond.__super__ = openfl_display_BitmapData;
flixel_addons_transition_GraphicTransTileDiamond.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_addons_transition_GraphicTransTileDiamond
});
var flixel_addons_transition_GraphicTransTileSquare = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_addons_transition_GraphicTransTileSquare.preload != null) {
		this.__fromImage(flixel_addons_transition_GraphicTransTileSquare.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_addons_transition_GraphicTransTileSquare.resourceName),flixel_addons_transition_GraphicTransTileSquare.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_addons_transition_GraphicTransTileSquare.preload == null) {
				flixel_addons_transition_GraphicTransTileSquare.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.addons.transition.GraphicTransTileSquare"] = flixel_addons_transition_GraphicTransTileSquare;
flixel_addons_transition_GraphicTransTileSquare.__name__ = "flixel.addons.transition.GraphicTransTileSquare";
flixel_addons_transition_GraphicTransTileSquare.preload = null;
flixel_addons_transition_GraphicTransTileSquare.__super__ = openfl_display_BitmapData;
flixel_addons_transition_GraphicTransTileSquare.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_addons_transition_GraphicTransTileSquare
});
var flixel_addons_transition_FlxTransitionSprite = function(X,Y,Delay,Graphic,GraphicWidth,GraphicHeight,FrameRate) {
	if(FrameRate == null) {
		FrameRate = 40;
	}
	if(GraphicHeight == null) {
		GraphicHeight = 32;
	}
	if(GraphicWidth == null) {
		GraphicWidth = 32;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._newStatus = -1;
	this.status = 0;
	this._finished = false;
	this._starting = true;
	flixel_FlxSprite.call(this,X,Y);
	if(Graphic == null) {
		Graphic = flixel_graphics_FlxGraphic.fromClass(flixel_addons_transition_GraphicTransTileDiamond);
		GraphicWidth = 32;
		GraphicHeight = 32;
	}
	this._delay = Delay;
	this.loadGraphic(Graphic,true,GraphicWidth,GraphicHeight);
	this.graphic.persist = true;
	this.graphic.set_destroyOnNoUse(false);
	var inArray = [];
	var outArray = [];
	var _g = 1;
	var _g1 = this.numFrames - 1;
	while(_g < _g1) {
		var i = _g++;
		inArray.push(i);
	}
	outArray = inArray.slice();
	outArray.reverse();
	this.animation.add("empty",[0],0,false);
	this.animation.add("in",inArray,FrameRate,false);
	this.animation.add("full",[this.numFrames - 1],0,false);
	this.animation.add("out",outArray,FrameRate,false);
	this.setStatus(3);
};
$hxClasses["flixel.addons.transition.FlxTransitionSprite"] = flixel_addons_transition_FlxTransitionSprite;
flixel_addons_transition_FlxTransitionSprite.__name__ = "flixel.addons.transition.FlxTransitionSprite";
flixel_addons_transition_FlxTransitionSprite.__super__ = flixel_FlxSprite;
flixel_addons_transition_FlxTransitionSprite.prototype = $extend(flixel_FlxSprite.prototype,{
	_delay: null
	,_count: null
	,_starting: null
	,_finished: null
	,status: null
	,_newStatus: null
	,start: function(NewStatus) {
		this._starting = true;
		this._finished = false;
		this._count = 0;
		this._newStatus = NewStatus;
	}
	,startStatus: function(NewStatus) {
		this.setStatus(NewStatus);
	}
	,setStatus: function(Status) {
		var anim;
		switch(Status) {
		case -1:case 2:
			anim = "empty";
			break;
		case 0:
			anim = "in";
			break;
		case 1:
			anim = "out";
			break;
		case 3:
			anim = "full";
			break;
		}
		this.animation.play(anim);
		this.animation.finishCallback = $bind(this,this.onFinishAnim);
		this.status = Status;
	}
	,onFinishAnim: function(str) {
		if(!this._finished) {
			this._finished = true;
			switch(this.status) {
			case 0:
				this.setStatus(3);
				break;
			case 1:
				this.setStatus(2);
				break;
			default:
			}
		}
	}
	,update: function(elapsed) {
		flixel_FlxSprite.prototype.update.call(this,elapsed);
		if(this._starting) {
			this._count += elapsed;
			if(this._count >= this._delay) {
				this.onTime();
			}
		}
	}
	,onTime: function() {
		this._starting = false;
		this._count = 0;
		this.setStatus(this._newStatus);
		this._newStatus = -1;
	}
	,__class__: flixel_addons_transition_FlxTransitionSprite
});
var flixel_addons_transition_Transition = function(data) {
	flixel_FlxSubState.call(this,0);
	this._effect = this.createEffect(data);
	this._effect.scrollFactor.set(0,0);
	this.add(this._effect);
};
$hxClasses["flixel.addons.transition.Transition"] = flixel_addons_transition_Transition;
flixel_addons_transition_Transition.__name__ = "flixel.addons.transition.Transition";
flixel_addons_transition_Transition.__super__ = flixel_FlxSubState;
flixel_addons_transition_Transition.prototype = $extend(flixel_FlxSubState.prototype,{
	_effect: null
	,update: function(elapsed) {
		flixel_FlxSubState.prototype.update.call(this,elapsed);
		this._effect.update(elapsed);
	}
	,destroy: function() {
		flixel_FlxSubState.prototype.destroy.call(this);
		this.set_finishCallback(null);
		this._effect.destroy();
		this._effect = null;
	}
	,start: function(NewStatus) {
		this._effect.start(NewStatus);
	}
	,setStatus: function(NewStatus) {
		this._effect.setStatus(NewStatus);
	}
	,createEffect: function(Data) {
		switch(Data.type) {
		case "fade":
			return new flixel_addons_transition_TransitionFade(Data);
		case "tiles":
			return new flixel_addons_transition_TransitionTiles(Data);
		default:
			return null;
		}
	}
	,get_finishCallback: function() {
		if(this._effect != null) {
			return this._effect.finishCallback;
		}
		return null;
	}
	,set_finishCallback: function(f) {
		if(this._effect != null) {
			this._effect.finishCallback = f;
			return f;
		}
		return null;
	}
	,__class__: flixel_addons_transition_Transition
	,__properties__: $extend(flixel_FlxSubState.prototype.__properties__,{set_finishCallback:"set_finishCallback",get_finishCallback:"get_finishCallback"})
});
var flixel_addons_transition_TransitionData = function(TransType,Color,Duration,Direction,TileData,Region) {
	if(Duration == null) {
		Duration = 1.0;
	}
	if(Color == null) {
		Color = -1;
	}
	if(TransType == null) {
		TransType = "fade";
	}
	this.duration = 1.0;
	this.type = TransType;
	this.tileData = TileData;
	this.duration = Duration;
	this.color = Color;
	this.direction = Direction;
	if(this.direction == null) {
		this.direction = new flixel_math_FlxPoint(0,0);
	}
	var Value = this.direction.x;
	var lowerBound = Value < -1 ? -1 : Value;
	var tmp = lowerBound > 1;
	var Value = this.direction.y;
	var lowerBound = Value < -1 ? -1 : Value;
	var tmp = lowerBound > 1;
	this.tweenOptions = { onComplete : null};
	this.region = Region;
	if(Region == null) {
		this.region = new flixel_math_FlxRect(0,0,flixel_FlxG.width,flixel_FlxG.height);
	}
};
$hxClasses["flixel.addons.transition.TransitionData"] = flixel_addons_transition_TransitionData;
flixel_addons_transition_TransitionData.__name__ = "flixel.addons.transition.TransitionData";
flixel_addons_transition_TransitionData.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_addons_transition_TransitionData.prototype = {
	type: null
	,tileData: null
	,color: null
	,duration: null
	,direction: null
	,tweenOptions: null
	,region: null
	,destroy: function() {
		this.tileData = null;
		this.direction = null;
		this.tweenOptions.onComplete = null;
		this.tweenOptions.ease = null;
		this.tweenOptions = null;
		this.region = null;
		this.direction = null;
	}
	,__class__: flixel_addons_transition_TransitionData
};
var flixel_addons_transition_TransitionEffect = function(data) {
	this._finalDelayTime = 0.0;
	this._started = false;
	this.finished = false;
	this._data = data;
	flixel_group_FlxTypedSpriteGroup.call(this);
};
$hxClasses["flixel.addons.transition.TransitionEffect"] = flixel_addons_transition_TransitionEffect;
flixel_addons_transition_TransitionEffect.__name__ = "flixel.addons.transition.TransitionEffect";
flixel_addons_transition_TransitionEffect.__super__ = flixel_group_FlxTypedSpriteGroup;
flixel_addons_transition_TransitionEffect.prototype = $extend(flixel_group_FlxTypedSpriteGroup.prototype,{
	finishCallback: null
	,finished: null
	,_started: null
	,_endStatus: null
	,_finalDelayTime: null
	,_data: null
	,destroy: function() {
		flixel_group_FlxTypedSpriteGroup.prototype.destroy.call(this);
		this.finishCallback = null;
	}
	,start: function(NewStatus) {
		this._started = true;
		if(NewStatus == 0) {
			this._endStatus = 3;
		} else {
			this._endStatus = 2;
		}
	}
	,setStatus: function(NewStatus) {
	}
	,delayThenFinish: function() {
		new flixel_util_FlxTimer().start(this._finalDelayTime,$bind(this,this.onFinish));
	}
	,onFinish: function(f) {
		this.finished = true;
		if(this.finishCallback != null) {
			var callback = this.finishCallback;
			this.finishCallback = null;
			callback();
		}
	}
	,__class__: flixel_addons_transition_TransitionEffect
});
var flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient.preload != null) {
		this.__fromImage(flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient.resourceName),flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient.preload == null) {
				flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.addons.transition._TransitionFade.GraphicDiagonalGradient"] = flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient;
flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient.__name__ = "flixel.addons.transition._TransitionFade.GraphicDiagonalGradient";
flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient.preload = null;
flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient.__super__ = openfl_display_BitmapData;
flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient
});
var flixel_addons_transition_TransitionFade = function(data) {
	this.tweenValEnd2 = 0;
	this.tweenValEnd = 0;
	this.tweenValStart2 = 0;
	this.tweenValStart = 0;
	this.tweenStr2 = "";
	this.tweenStr = "";
	flixel_addons_transition_TransitionEffect.call(this,data);
	this.back = this.makeSprite(data.direction.x,data.direction.y,data.region);
	this.back.scrollFactor.set(0,0);
	this.add(this.back);
};
$hxClasses["flixel.addons.transition.TransitionFade"] = flixel_addons_transition_TransitionFade;
flixel_addons_transition_TransitionFade.__name__ = "flixel.addons.transition.TransitionFade";
flixel_addons_transition_TransitionFade.__super__ = flixel_addons_transition_TransitionEffect;
flixel_addons_transition_TransitionFade.prototype = $extend(flixel_addons_transition_TransitionEffect.prototype,{
	back: null
	,tweenStr: null
	,tweenStr2: null
	,tweenValStart: null
	,tweenValStart2: null
	,tweenValEnd: null
	,tweenValEnd2: null
	,destroy: function() {
		flixel_addons_transition_TransitionEffect.prototype.destroy.call(this);
		this.back = null;
	}
	,start: function(NewStatus) {
		flixel_addons_transition_TransitionEffect.prototype.start.call(this,NewStatus);
		this.setTweenValues(NewStatus,this._data.direction.x,this._data.direction.y);
		switch(this.tweenStr) {
		case "alpha":
			this.back.set_alpha(this.tweenValStart);
			break;
		case "x":
			this.back.set_x(this.tweenValStart);
			break;
		case "y":
			this.back.set_y(this.tweenValStart);
			break;
		}
		switch(this.tweenStr2) {
		case "alpha":
			this.back.set_alpha(this.tweenValStart2);
			break;
		case "x":
			this.back.set_x(this.tweenValStart2);
			break;
		case "y":
			this.back.set_y(this.tweenValStart2);
			break;
		}
		var Values = { };
		Values[this.tweenStr] = this.tweenValEnd;
		if(this.tweenStr2 != "") {
			Values[this.tweenStr2] = this.tweenValEnd2;
		}
		this._data.tweenOptions.onComplete = $bind(this,this.finishTween);
		flixel_tweens_FlxTween.tween(this.back,Values,this._data.duration,this._data.tweenOptions);
	}
	,setTweenValues: function(NewStatus,DirX,DirY) {
		if(DirX == 0 && DirY == 0) {
			this.tweenStr = "alpha";
			this.tweenValStart = NewStatus == 0 ? 0.0 : 1.0;
			this.tweenValEnd = NewStatus == 0 ? 1.0 : 0.0;
		} else if(Math.abs(DirX) > 0 && DirY == 0) {
			this.tweenStr = "x";
			if(DirX > 0) {
				this.tweenValStart = NewStatus == 0 ? -this.back.get_width() : 0;
				this.tweenValEnd = NewStatus == 0 ? 0 : -this.back.get_width();
			} else {
				this.tweenValStart = NewStatus == 0 ? flixel_FlxG.width : -this.back.get_width() / 2;
				this.tweenValEnd = NewStatus == 0 ? -this.back.get_width() / 2 : flixel_FlxG.width;
			}
		} else if(DirX == 0 && Math.abs(DirY) > 0) {
			this.tweenStr = "y";
			if(DirY > 0) {
				this.tweenValStart = NewStatus == 0 ? -this.back.get_height() : 0;
				this.tweenValEnd = NewStatus == 0 ? 0 : -this.back.get_height();
			} else {
				this.tweenValStart = NewStatus == 0 ? flixel_FlxG.height : -this.back.get_height() / 2;
				this.tweenValEnd = NewStatus == 0 ? -this.back.get_height() / 2 : flixel_FlxG.height;
			}
		} else if(Math.abs(DirX) > 0 && Math.abs(DirY) > 0) {
			this.tweenStr = "x";
			this.tweenStr2 = "y";
			if(DirX > 0) {
				this.tweenValStart = NewStatus == 0 ? -this.back.get_width() : 0;
				this.tweenValEnd = NewStatus == 0 ? 0 : -this.back.get_width();
			} else {
				this.tweenValStart = NewStatus == 0 ? flixel_FlxG.width : -this.back.get_width() * 0.66666666666666663;
				this.tweenValEnd = NewStatus == 0 ? -this.back.get_width() * 0.66666666666666663 : flixel_FlxG.width;
			}
			if(DirY > 0) {
				this.tweenValStart2 = NewStatus == 0 ? -this.back.get_height() : 0;
				this.tweenValEnd2 = NewStatus == 0 ? 0 : -this.back.get_height();
			} else {
				this.tweenValStart2 = NewStatus == 0 ? flixel_FlxG.height : -this.back.get_height() * 0.66666666666666663;
				this.tweenValEnd2 = NewStatus == 0 ? -this.back.get_height() * 0.66666666666666663 : flixel_FlxG.height;
			}
		}
	}
	,makeSprite: function(DirX,DirY,region) {
		var s = new flixel_FlxSprite(region.x,region.y);
		var locX = 0;
		var locY = 0;
		var angle = 0;
		var pixels = null;
		if(DirX == 0 && DirY == 0) {
			s.makeGraphic(region.width | 0,region.height | 0,this._data.color);
		} else if(DirX == 0 && Math.abs(DirY) > 0) {
			locY = DirY > 0 ? region.height : 0;
			angle = DirY > 0 ? 90 : 270;
			s.makeGraphic(1,region.height * 2 | 0,this._data.color);
			pixels = s.get_pixels();
			var gvert = flixel_util_FlxGradient.createGradientBitmapData(1,region.height | 0,[this._data.color,0],1,angle);
			pixels.copyPixels(gvert,gvert.rect,new openfl_geom_Point(0,locY));
			s.set_pixels(pixels);
			s.scale.set(region.width,1.0);
			s.updateHitbox();
		} else if(Math.abs(DirX) > 0 && DirY == 0) {
			locX = DirX > 0 ? region.width : 0;
			angle = DirX > 0 ? 0 : 180;
			s.makeGraphic(region.width * 2 | 0,1,this._data.color);
			pixels = s.get_pixels();
			var ghorz = flixel_util_FlxGradient.createGradientBitmapData(region.width | 0,1,[this._data.color,0],1,angle);
			pixels.copyPixels(ghorz,ghorz.rect,new openfl_geom_Point(locX,0));
			s.set_pixels(pixels);
			s.scale.set(1.0,region.height);
			s.updateHitbox();
		} else if(Math.abs(DirX) > 0 && Math.abs(DirY) > 0) {
			locY = DirY > 0 ? region.height : 0;
			s.loadGraphic(this.getGradient());
			s.set_flipX(DirX < 0);
			s.set_flipY(DirY < 0);
		}
		return s;
	}
	,getGradient: function() {
		var rawBmp = new flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient(0,0);
		var gdiag = rawBmp;
		var gdiag_scaled = new openfl_display_BitmapData(flixel_FlxG.width * 2,flixel_FlxG.height * 2,true);
		var m = new openfl_geom_Matrix();
		m.scale(gdiag_scaled.width / gdiag.width,gdiag_scaled.height / gdiag.height);
		gdiag_scaled.draw(gdiag,m,null,null,null,true);
		var theColor = this._data.color;
		var final_pixels = new openfl_display_BitmapData(flixel_FlxG.width * 3,flixel_FlxG.height * 3,true,theColor);
		final_pixels.copyChannel(gdiag_scaled,gdiag_scaled.rect,new openfl_geom_Point(final_pixels.width - gdiag_scaled.width,final_pixels.height - gdiag_scaled.height),1,8);
		gdiag.dispose();
		gdiag_scaled.dispose();
		return final_pixels;
	}
	,finishTween: function(f) {
		this.delayThenFinish();
	}
	,__class__: flixel_addons_transition_TransitionFade
});
var flixel_addons_transition_TransitionTiles = function(data) {
	this._isCenter = false;
	flixel_addons_transition_TransitionEffect.call(this,data);
	this._grpSprites = new flixel_group_FlxTypedSpriteGroup();
	var delay = 0;
	if(data.tileData == null) {
		data.tileData = { asset : null, width : 32, height : 32};
	}
	var region = data.region;
	var tilesX = Math.ceil(region.width / data.tileData.width);
	var tilesY = Math.ceil(region.height / data.tileData.height);
	var maxTiles = tilesX > tilesY ? tilesX : tilesY;
	var dTime = data.duration / maxTiles;
	var xDelay = dTime * Math.abs(data.direction.x);
	var yDelay = dTime * Math.abs(data.direction.y);
	var addX = data.tileData.width;
	var addY = data.tileData.height;
	var tx = 0;
	var ty = 0;
	var startX = region.x | 0;
	var startY = region.y | 0;
	if(data.direction.x < 0) {
		addX *= -1;
		startX += region.width + addX | 0;
	}
	if(data.direction.y < 0) {
		addY *= -1;
		startY += region.height + addY | 0;
	}
	tx = startX;
	ty = startY;
	var _g = 0;
	var _g1 = tilesY;
	while(_g < _g1) {
		var iy = _g++;
		var _g2 = 0;
		var _g3 = tilesX;
		while(_g2 < _g3) {
			var ix = _g2++;
			var frameRate = 40;
			if(data.tileData.frameRate != null) {
				frameRate = data.tileData.frameRate;
			}
			var ts = new flixel_addons_transition_FlxTransitionSprite(tx,ty,delay,data.tileData.asset,data.tileData.width,data.tileData.height,frameRate);
			ts.set_color(data.color);
			ts.scrollFactor.set(0,0);
			this._grpSprites.add(ts);
			tx += addX;
			delay += xDelay;
		}
		ty += addY;
		tx = startX;
		delay = (iy + 1) * yDelay;
	}
	this.add(this._grpSprites);
	this._isCenter = data.direction.x == 0 && data.direction.y == 0;
};
$hxClasses["flixel.addons.transition.TransitionTiles"] = flixel_addons_transition_TransitionTiles;
flixel_addons_transition_TransitionTiles.__name__ = "flixel.addons.transition.TransitionTiles";
flixel_addons_transition_TransitionTiles.__super__ = flixel_addons_transition_TransitionEffect;
flixel_addons_transition_TransitionTiles.prototype = $extend(flixel_addons_transition_TransitionEffect.prototype,{
	_grpSprites: null
	,_isCenter: null
	,destroy: function() {
		flixel_addons_transition_TransitionEffect.prototype.destroy.call(this);
		this._grpSprites = null;
	}
	,start: function(NewStatus) {
		flixel_addons_transition_TransitionEffect.prototype.start.call(this,NewStatus);
		this._grpSprites.group.forEach(function(t) {
			t.start(NewStatus);
		},false);
	}
	,setStatus: function(NewStatus) {
		flixel_addons_transition_TransitionEffect.prototype.setStatus.call(this,NewStatus);
		this._grpSprites.group.forEach(function(t) {
			t.setStatus(NewStatus);
		},false);
	}
	,update: function(elapsed) {
		flixel_addons_transition_TransitionEffect.prototype.update.call(this,elapsed);
		if(this._started) {
			var allDone = true;
			var _g = 0;
			var _g1 = this._grpSprites.group.members;
			while(_g < _g1.length) {
				var sprite = _g1[_g];
				++_g;
				if(sprite.status != -1 && sprite.status != this._endStatus) {
					allDone = false;
					break;
				}
			}
			if(allDone) {
				this._started = false;
				this.delayThenFinish();
			}
		}
	}
	,__class__: flixel_addons_transition_TransitionTiles
});
var flixel_addons_ui_Anchor = function(XOff,YOff,XSide,YSide,XFlush,YFlush) {
	this.x = new flixel_addons_ui_AnchorPoint(XOff,XSide,XFlush);
	this.y = new flixel_addons_ui_AnchorPoint(YOff,YSide,YFlush);
};
$hxClasses["flixel.addons.ui.Anchor"] = flixel_addons_ui_Anchor;
flixel_addons_ui_Anchor.__name__ = "flixel.addons.ui.Anchor";
flixel_addons_ui_Anchor.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_addons_ui_Anchor.prototype = {
	x: null
	,y: null
	,destroy: function() {
		this.x = null;
		this.y = null;
	}
	,anchorThing: function(thing,destination) {
		var destX = 0;
		var destY = 0;
		switch(this.x.side) {
		case "center":
			destX = destination.x + destination.get_width() / 2;
			break;
		case "left":
			destX = destination.x;
			break;
		case "right":
			destX = destination.x + destination.get_width();
			break;
		default:
			destX = destination.x;
		}
		switch(this.y.side) {
		case "bottom":
			destY = destination.y + destination.get_height();
			break;
		case "center":
			destY = destination.y + destination.get_height() / 2;
			break;
		case "top":
			destY = destination.y;
			break;
		default:
			destY = destination.y;
		}
		switch(this.x.flush) {
		case "center":
			destX -= thing.get_width() / 2;
			break;
		case "left":
			break;
		case "right":
			destX -= thing.get_width();
			break;
		default:
		}
		switch(this.y.flush) {
		case "bottom":
			destY -= thing.get_height();
			break;
		case "center":
			destY -= thing.get_height() / 2;
			break;
		case "top":
			break;
		default:
		}
		thing.set_x(destX + this.x.offset);
		thing.set_y(destY + this.y.offset);
	}
	,getFlipped: function(FlipX,FlipY,AnchorObject) {
		var xoff = FlipX ? -1 * this.x.offset : this.x.offset;
		var yoff = FlipY ? -1 * this.y.offset : this.y.offset;
		var xside = FlipX ? this.flipAnchorSide(this.x.side) : this.x.side;
		var yside = FlipY ? this.flipAnchorSide(this.y.side) : this.y.side;
		var xflush = FlipX ? this.flipAnchorSide(this.x.flush) : this.x.flush;
		var yflush = FlipY ? this.flipAnchorSide(this.y.flush) : this.y.flush;
		if(AnchorObject == null) {
			AnchorObject = new flixel_addons_ui_Anchor(xoff,yoff,xside,yside,xflush,yflush);
		} else {
			AnchorObject.x.offset = xoff;
			AnchorObject.y.offset = yoff;
			AnchorObject.x.side = xside;
			AnchorObject.y.side = yside;
			AnchorObject.x.flush = xflush;
			AnchorObject.y.flush = yflush;
		}
		return AnchorObject;
	}
	,clone: function() {
		return new flixel_addons_ui_Anchor(this.x.offset,this.y.offset,this.x.side,this.y.side,this.x.flush,this.y.flush);
	}
	,flipAnchorSide: function(str) {
		if(str == "left") {
			return "right";
		}
		if(str == "right") {
			return "left";
		}
		if(str == "top") {
			return "bottom";
		}
		if(str == "bottom") {
			return "top";
		}
		return str;
	}
	,__class__: flixel_addons_ui_Anchor
};
var flixel_addons_ui_AnchorPoint = function(Offset,Side,Flush) {
	this.flush = "center";
	this.side = "center";
	this.offset = 0;
	this.offset = Offset;
	this.side = Side;
	this.flush = Flush;
};
$hxClasses["flixel.addons.ui.AnchorPoint"] = flixel_addons_ui_AnchorPoint;
flixel_addons_ui_AnchorPoint.__name__ = "flixel.addons.ui.AnchorPoint";
flixel_addons_ui_AnchorPoint.prototype = {
	offset: null
	,side: null
	,flush: null
	,__class__: flixel_addons_ui_AnchorPoint
};
var flixel_addons_ui_BorderDef = function(Style,Color,Size,Quality) {
	if(Quality == null) {
		Quality = 1;
	}
	if(Size == null) {
		Size = 1;
	}
	this.style = Style;
	this.color = Color;
	this.size = Size;
	this.quality = Quality;
};
$hxClasses["flixel.addons.ui.BorderDef"] = flixel_addons_ui_BorderDef;
flixel_addons_ui_BorderDef.__name__ = "flixel.addons.ui.BorderDef";
flixel_addons_ui_BorderDef.fromXML = function(data) {
	var border_str = flixel_addons_ui_U.xml_str(data,"border");
	var border_style = flixel_text_FlxTextBorderStyle.NONE;
	var border_color = flixel_addons_ui_U.xml_color(data,"border_color",true,0);
	var border_size = flixel_addons_ui_U.xml_f(data,"border_size",1);
	var border_quality = flixel_addons_ui_U.xml_f(data,"border_quality",0);
	var borderDef = new flixel_addons_ui_BorderDef(border_style,border_color,border_size,border_quality);
	switch(border_str) {
	case "":
		border_str = flixel_addons_ui_U.xml_str(data,"shadow",true,"");
		if(border_str != "" && border_str != "false" && border_str != "none") {
			borderDef.style = flixel_text_FlxTextBorderStyle.SHADOW;
			var safe = true;
			if(safe == null) {
				safe = false;
			}
			var return_val = flixel_util_FlxColor.fromString(border_str);
			if(return_val == null) {
				if(!safe) {
					throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + border_str);
				} else {
					return_val = 0;
				}
			}
			borderDef.color = return_val;
		} else {
			border_str = flixel_addons_ui_U.xml_str(data,"outline",true,"");
			if(border_str != "" && border_str != "false" && border_str != "none") {
				borderDef.style = flixel_text_FlxTextBorderStyle.OUTLINE;
				var safe = true;
				if(safe == null) {
					safe = false;
				}
				var return_val = flixel_util_FlxColor.fromString(border_str);
				if(return_val == null) {
					if(!safe) {
						throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + border_str);
					} else {
						return_val = 0;
					}
				}
				borderDef.color = return_val;
			} else {
				border_str = flixel_addons_ui_U.xml_str(data,"outline_fast");
				if(border_str != "" && border_str != "false" && border_str != "none") {
					borderDef.style = flixel_text_FlxTextBorderStyle.OUTLINE_FAST;
					var safe = true;
					if(safe == null) {
						safe = false;
					}
					var return_val = flixel_util_FlxColor.fromString(border_str);
					if(return_val == null) {
						if(!safe) {
							throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + border_str);
						} else {
							return_val = 0;
						}
					}
					borderDef.color = return_val;
				}
			}
		}
		break;
	case "false":case "none":
		borderDef.style = flixel_text_FlxTextBorderStyle.NONE;
		break;
	case "outline":
		borderDef.style = flixel_text_FlxTextBorderStyle.OUTLINE;
		break;
	case "outline_fast":
		borderDef.style = flixel_text_FlxTextBorderStyle.OUTLINE_FAST;
		break;
	case "shadow":
		borderDef.style = flixel_text_FlxTextBorderStyle.SHADOW;
		break;
	}
	return borderDef;
};
flixel_addons_ui_BorderDef.prototype = {
	style: null
	,color: null
	,size: null
	,quality: null
	,clone: function() {
		return new flixel_addons_ui_BorderDef(this.style,this.color,this.size,this.quality);
	}
	,apply: function(f) {
		var Color = this.color;
		var Size = this.size;
		var Quality = this.quality;
		if(Quality == null) {
			Quality = 1;
		}
		if(Size == null) {
			Size = 1;
		}
		if(Color == null) {
			Color = 0;
		}
		f.set_borderStyle(this.style);
		f.set_borderColor(Color);
		f.set_borderSize(Size);
		f.set_borderQuality(Quality);
		return f;
	}
	,__class__: flixel_addons_ui_BorderDef
};
var flixel_addons_ui_ButtonLabelStyle = function(Font,Align,Color,Border) {
	this.align = null;
	this.color = null;
	this.border = null;
	this.font = null;
	this.font = Font;
	this.border = Border;
	this.color = Color;
	this.align = Align;
};
$hxClasses["flixel.addons.ui.ButtonLabelStyle"] = flixel_addons_ui_ButtonLabelStyle;
flixel_addons_ui_ButtonLabelStyle.__name__ = "flixel.addons.ui.ButtonLabelStyle";
flixel_addons_ui_ButtonLabelStyle.prototype = {
	font: null
	,border: null
	,color: null
	,align: null
	,apply: function(f) {
		if(this.font != null) {
			this.font.apply(null,f);
		}
		if(this.border != null) {
			this.border.apply(f);
		}
		if(this.color != null) {
			f.set_color(this.color);
		}
		if(this.align != null) {
			f.set_alignment(this.align);
		}
	}
	,__class__: flixel_addons_ui_ButtonLabelStyle
};
var flixel_addons_ui_FlxBaseMultiInput = function() {
};
$hxClasses["flixel.addons.ui.FlxBaseMultiInput"] = flixel_addons_ui_FlxBaseMultiInput;
flixel_addons_ui_FlxBaseMultiInput.__name__ = "flixel.addons.ui.FlxBaseMultiInput";
flixel_addons_ui_FlxBaseMultiInput.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_addons_ui_FlxBaseMultiInput.prototype = {
	input: null
	,combos: null
	,forbiddens: null
	,destroy: function() {
		this.combos = null;
		this.forbiddens = null;
	}
	,checkJustPressed: function() {
		return false;
	}
	,checkJustReleased: function() {
		return false;
	}
	,checkPressed: function() {
		return false;
	}
	,justPressed: function() {
		if(this.checkJustPressed()) {
			return this.passCombosAndForbiddens();
		} else {
			return false;
		}
	}
	,justReleased: function() {
		if(this.checkJustReleased()) {
			if(this.forbiddens != null) {
				return this.checkForbiddens(false);
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,pressed: function() {
		if(this.checkPressed()) {
			return this.passCombosAndForbiddens();
		} else {
			return false;
		}
	}
	,equals: function(other) {
		if(other == null) {
			return false;
		}
		if(Type.typeof(other) != Type.typeof(this)) {
			return false;
		}
		if(this.input != other.input) {
			return false;
		}
		if(this.combos == null != (other.combos == null)) {
			return false;
		}
		if(this.forbiddens == null != (other.forbiddens == null)) {
			return false;
		}
		if(this.combos != null && other.combos != null) {
			var _g = 0;
			var _g1 = this.combos;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(other.combos.indexOf(i) == -1) {
					return false;
				}
			}
		}
		if(this.forbiddens != null && other.forbiddens != null) {
			var _g = 0;
			var _g1 = this.forbiddens;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(other.forbiddens.indexOf(i) == -1) {
					return false;
				}
			}
		}
		return true;
	}
	,passCombosAndForbiddens: function(comboValue,forbiddenValue) {
		if(forbiddenValue == null) {
			forbiddenValue = false;
		}
		if(comboValue == null) {
			comboValue = true;
		}
		var passCombos = this.combos == null || this.checkCombos(comboValue);
		var passForbiddens = this.forbiddens == null || this.checkForbiddens(forbiddenValue);
		if(passCombos) {
			return passForbiddens;
		} else {
			return false;
		}
	}
	,checkCombos: function(value) {
		return false;
	}
	,checkForbiddens: function(value) {
		return false;
	}
	,__class__: flixel_addons_ui_FlxBaseMultiInput
};
var flixel_addons_ui_FlxInputText = function(X,Y,Width,Text1,size,TextColor,BackgroundColor,EmbeddedFont) {
	if(EmbeddedFont == null) {
		EmbeddedFont = true;
	}
	if(BackgroundColor == null) {
		BackgroundColor = -1;
	}
	if(TextColor == null) {
		TextColor = -16777216;
	}
	if(size == null) {
		size = 8;
	}
	if(Width == null) {
		Width = 150;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._scrollBoundIndeces = { left : 0, right : 0};
	this.backgroundColor = -1;
	this.fieldBorderThickness = 1;
	this.fieldBorderColor = -16777216;
	this.filterMode = 0;
	this.maxLength = 0;
	this.forceCase = 0;
	this.caretIndex = 0;
	this.hasFocus = false;
	this.caretWidth = 1;
	this.background = false;
	flixel_text_FlxText.call(this,X,Y,Width,Text1,size,EmbeddedFont);
	this.set_backgroundColor(BackgroundColor);
	if(BackgroundColor != 0) {
		this.background = true;
	}
	this.set_color(TextColor);
	this.set_caretColor(TextColor);
	this.caret = new flixel_FlxSprite();
	this.caret.makeGraphic(this.caretWidth,size + 2 | 0);
	this._caretTimer = new flixel_util_FlxTimer();
	this.set_caretIndex(0);
	this.set_hasFocus(false);
	if(this.background) {
		this.fieldBorderSprite = new flixel_FlxSprite(X,Y);
		this.backgroundSprite = new flixel_FlxSprite(X,Y);
	}
	this.set_lines(1);
	openfl_Lib.get_current().stage.addEventListener("keyDown",$bind(this,this.onKeyDown));
	if(Text1 == null) {
		Text1 = "";
	}
	this.set_text(Text1);
	this.calcFrame();
};
$hxClasses["flixel.addons.ui.FlxInputText"] = flixel_addons_ui_FlxInputText;
flixel_addons_ui_FlxInputText.__name__ = "flixel.addons.ui.FlxInputText";
flixel_addons_ui_FlxInputText.__super__ = flixel_text_FlxText;
flixel_addons_ui_FlxInputText.prototype = $extend(flixel_text_FlxText.prototype,{
	customFilterPattern: null
	,set_customFilterPattern: function(cfp) {
		this.customFilterPattern = cfp;
		this.set_filterMode(4);
		return this.customFilterPattern;
	}
	,callback: null
	,background: null
	,caretColor: null
	,set_caretColor: function(i) {
		this.caretColor = i;
		this.dirty = true;
		return this.caretColor;
	}
	,caretWidth: null
	,set_caretWidth: function(i) {
		this.caretWidth = i;
		this.dirty = true;
		return this.caretWidth;
	}
	,params: null
	,hasFocus: null
	,caretIndex: null
	,focusGained: null
	,focusLost: null
	,forceCase: null
	,maxLength: null
	,lines: null
	,filterMode: null
	,fieldBorderColor: null
	,fieldBorderThickness: null
	,backgroundColor: null
	,backgroundSprite: null
	,_caretTimer: null
	,caret: null
	,fieldBorderSprite: null
	,_scrollBoundIndeces: null
	,_charBoundaries: null
	,lastScroll: null
	,destroy: function() {
		openfl_Lib.get_current().stage.removeEventListener("keyDown",$bind(this,this.onKeyDown));
		this.backgroundSprite = flixel_util_FlxDestroyUtil.destroy(this.backgroundSprite);
		this.fieldBorderSprite = flixel_util_FlxDestroyUtil.destroy(this.fieldBorderSprite);
		this.callback = null;
		flixel_text_FlxText.prototype.destroy.call(this);
	}
	,draw: function() {
		this.drawSprite(this.fieldBorderSprite);
		this.drawSprite(this.backgroundSprite);
		flixel_text_FlxText.prototype.draw.call(this);
		if(this.caretColor != this.caret.color || this.caret.get_height() != (this._defaultFormat.size | 0) + 2) {
			this.caret.set_color(this.caretColor);
		}
		this.drawSprite(this.caret);
	}
	,drawSprite: function(Sprite) {
		if(Sprite != null && Sprite.visible) {
			Sprite.scrollFactor = this.scrollFactor;
			Sprite.set_cameras(this.get_cameras());
			Sprite.draw();
		}
	}
	,update: function(elapsed) {
		flixel_text_FlxText.prototype.update.call(this,elapsed);
		if(flixel_FlxG.mouse._leftButton.current == 2) {
			var hadFocus = this.hasFocus;
			if(flixel_FlxG.mouse.overlaps(this)) {
				this.set_caretIndex(this.getCaretIndex());
				this.set_hasFocus(true);
				if(!hadFocus && this.focusGained != null) {
					this.focusGained();
				}
			} else {
				this.set_hasFocus(false);
				if(hadFocus && this.focusLost != null) {
					this.focusLost();
				}
			}
		}
	}
	,onKeyDown: function(e) {
		var key = e.keyCode;
		if(this.hasFocus) {
			if(key == 16 || key == 17 || key == 220 || key == 27) {
				return;
			} else if(key == 37) {
				if(this.caretIndex > 0) {
					var _g = this;
					_g.set_caretIndex(_g.caretIndex - 1);
					this.set_text(this.text);
				}
			} else if(key == 39) {
				if(this.caretIndex < this.text.length) {
					var _g = this;
					_g.set_caretIndex(_g.caretIndex + 1);
					this.set_text(this.text);
				}
			} else if(key == 35) {
				this.set_caretIndex(this.text.length);
				this.set_text(this.text);
			} else if(key == 36) {
				this.set_caretIndex(0);
				this.set_text(this.text);
			} else if(key == 8) {
				if(this.caretIndex > 0) {
					var _g = this;
					_g.set_caretIndex(_g.caretIndex - 1);
					this.set_text(this.text.substring(0,this.caretIndex) + this.text.substring(this.caretIndex + 1));
					this.onChange("backspace");
				}
			} else if(key == 46) {
				if(this.text.length > 0 && this.caretIndex < this.text.length) {
					this.set_text(this.text.substring(0,this.caretIndex) + this.text.substring(this.caretIndex + 1));
					this.onChange("delete");
				}
			} else if(key == 13) {
				this.onChange("enter");
			} else {
				if(e.charCode == 0) {
					return;
				}
				var code = e.charCode;
				var newText = this.filter(String.fromCodePoint(code));
				if(newText.length > 0 && (this.maxLength == 0 || this.text.length + newText.length < this.maxLength)) {
					this.set_text(this.insertSubstring(this.text,newText,this.caretIndex));
					var _g = this;
					_g.set_caretIndex(_g.caretIndex + 1);
					this.onChange("input");
				}
			}
		}
	}
	,onChange: function(action) {
		if(this.callback != null) {
			this.callback(this.text,action);
		}
	}
	,insertSubstring: function(Original,Insert,Index) {
		if(Index != Original.length) {
			Original = Original.substring(0,Index) + Insert + Original.substring(Index);
		} else {
			Original += Insert;
		}
		return Original;
	}
	,getCaretIndex: function() {
		var X = flixel_FlxG.mouse.x - this.x;
		var Y = flixel_FlxG.mouse.y - this.y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		var hit = point;
		return this.getCharIndexAtPoint(hit.x,hit.y);
	}
	,getCharBoundaries: function(charIndex) {
		if(this._charBoundaries != null && charIndex >= 0 && this._charBoundaries.length > 0) {
			var r = new openfl_geom_Rectangle();
			if(charIndex >= this._charBoundaries.length) {
				var _this = this._charBoundaries[this._charBoundaries.length - 1];
				var FlashRect = r;
				if(FlashRect == null) {
					FlashRect = new openfl_geom_Rectangle();
				}
				FlashRect.x = _this.x;
				FlashRect.y = _this.y;
				FlashRect.width = _this.width;
				FlashRect.height = _this.height;
			} else {
				var _this = this._charBoundaries[charIndex];
				var FlashRect = r;
				if(FlashRect == null) {
					FlashRect = new openfl_geom_Rectangle();
				}
				FlashRect.x = _this.x;
				FlashRect.y = _this.y;
				FlashRect.width = _this.width;
				FlashRect.height = _this.height;
			}
			return r;
		}
		return null;
	}
	,set_text: function(Text1) {
		var return_text = flixel_text_FlxText.prototype.set_text.call(this,Text1);
		if(this.textField == null) {
			return return_text;
		}
		var numChars = Text1.length;
		this.prepareCharBoundaries(numChars);
		this.textField.set_text("");
		var textH = 0;
		var textW = 0;
		var lastW = 0;
		var magicX = 2;
		var magicY = 2;
		var _g = 0;
		var _g1 = numChars;
		while(_g < _g1) {
			var i = _g++;
			this.textField.appendText(HxOverrides.substr(Text1,i,1));
			textW = this.textField.get_textWidth();
			if(i == 0) {
				textH = this.textField.get_textHeight();
			}
			this._charBoundaries[i].x = magicX + lastW;
			this._charBoundaries[i].y = magicY;
			this._charBoundaries[i].width = textW - lastW;
			this._charBoundaries[i].height = textH;
			lastW = textW;
		}
		this.textField.set_text(Text1);
		this.onSetTextCheck();
		return return_text;
	}
	,getCharIndexAtPoint: function(X,Y) {
		var i = 0;
		if(this._charBoundaries != null && this._charBoundaries.length > 0) {
			if(this.textField.get_textWidth() <= this.textField.get_width()) {
				switch(this.getAlignStr()) {
				case "center":
					X = X - this.textField.get_width() / 2 + this.textField.get_textWidth() / 2;
					break;
				case "right":
					X = X - this.textField.get_width() + this.textField.get_textWidth();
					break;
				default:
				}
			}
		}
		if(this._charBoundaries != null) {
			var _g = 0;
			var _g1 = this._charBoundaries;
			while(_g < _g1.length) {
				var r = _g1[_g];
				++_g;
				if(X >= r.x && X <= r.x + r.width) {
					return i;
				}
				++i;
			}
		}
		if(this._charBoundaries != null && this._charBoundaries.length > 0) {
			if(X > this.textField.get_textWidth()) {
				return this._charBoundaries.length;
			}
		}
		return 0;
	}
	,prepareCharBoundaries: function(numChars) {
		if(this._charBoundaries == null) {
			this._charBoundaries = [];
		}
		if(this._charBoundaries.length > numChars) {
			var diff = this._charBoundaries.length - numChars;
			var _g = 0;
			var _g1 = diff;
			while(_g < _g1) {
				var i = _g++;
				this._charBoundaries.pop();
			}
		}
		var _g = 0;
		var _g1 = numChars;
		while(_g < _g1) {
			var i = _g++;
			if(this._charBoundaries.length - 1 < i) {
				var tmp = this._charBoundaries;
				var X = 0;
				var Y = 0;
				var Width = 0;
				var Height = 0;
				if(Height == null) {
					Height = 0;
				}
				if(Width == null) {
					Width = 0;
				}
				if(Y == null) {
					Y = 0;
				}
				if(X == null) {
					X = 0;
				}
				var _this = flixel_math_FlxRect._pool.get();
				var X1 = X;
				var Y1 = Y;
				var Width1 = Width;
				var Height1 = Height;
				if(Height1 == null) {
					Height1 = 0;
				}
				if(Width1 == null) {
					Width1 = 0;
				}
				if(Y1 == null) {
					Y1 = 0;
				}
				if(X1 == null) {
					X1 = 0;
				}
				_this.x = X1;
				_this.y = Y1;
				_this.width = Width1;
				_this.height = Height1;
				var rect = _this;
				rect._inPool = false;
				tmp.push(rect);
			}
		}
	}
	,onSetTextCheck: function() {
	}
	,calcFrame: function(RunOnCpp) {
		if(RunOnCpp == null) {
			RunOnCpp = false;
		}
		flixel_text_FlxText.prototype.calcFrame.call(this,RunOnCpp);
		if(this.fieldBorderSprite != null) {
			if(this.fieldBorderThickness > 0) {
				this.fieldBorderSprite.makeGraphic(this.get_width() + this.fieldBorderThickness * 2 | 0,this.get_height() + this.fieldBorderThickness * 2 | 0,this.fieldBorderColor);
				this.fieldBorderSprite.set_x(this.x - this.fieldBorderThickness);
				this.fieldBorderSprite.set_y(this.y - this.fieldBorderThickness);
			} else if(this.fieldBorderThickness == 0) {
				this.fieldBorderSprite.set_visible(false);
			}
		}
		if(this.backgroundSprite != null) {
			if(this.background) {
				this.backgroundSprite.makeGraphic(this.get_width() | 0,this.get_height() | 0,this.backgroundColor);
				this.backgroundSprite.set_x(this.x);
				this.backgroundSprite.set_y(this.y);
			} else {
				this.backgroundSprite.set_visible(false);
			}
		}
		if(this.caret != null) {
			var cw = this.caretWidth;
			var ch = (this._defaultFormat.size | 0) + 2 | 0;
			var borderC = -16777216 | this.borderColor & 16777215;
			var caretC = -16777216 | this.caretColor & 16777215;
			var caretKey = "caret" + cw + "x" + ch + "c:" + caretC + "b:" + Std.string(this.borderStyle) + "," + this.borderSize + "," + borderC;
			switch(this.borderStyle._hx_index) {
			case 0:
				this.caret.makeGraphic(cw,ch,caretC,false,caretKey);
				this.caret.offset.set_x(this.caret.offset.set_y(0));
				break;
			case 1:
				cw += this.borderSize | 0;
				ch += this.borderSize | 0;
				this.caret.makeGraphic(cw,ch,0,false,caretKey);
				var r = new openfl_geom_Rectangle(this.borderSize,this.borderSize,this.caretWidth,(this._defaultFormat.size | 0) + 2 | 0);
				this.caret.get_pixels().fillRect(r,borderC);
				r.x = r.y = 0;
				this.caret.get_pixels().fillRect(r,caretC);
				this.caret.offset.set_x(this.caret.offset.set_y(0));
				break;
			case 2:case 3:
				cw += this.borderSize * 2 | 0;
				ch += this.borderSize * 2 | 0;
				this.caret.makeGraphic(cw,ch,borderC,false,caretKey);
				var r = new openfl_geom_Rectangle(this.borderSize,this.borderSize,this.caretWidth,(this._defaultFormat.size | 0) + 2 | 0);
				this.caret.get_pixels().fillRect(r,caretC);
				this.caret.offset.set_x(this.caret.offset.set_y(this.borderSize));
				break;
			}
			this.caret.set_width(cw);
			this.caret.set_height(ch);
			this.set_caretIndex(this.caretIndex);
		}
	}
	,toggleCaret: function(timer) {
		this.caret.set_visible(!this.caret.visible);
	}
	,filter: function(text) {
		if(this.forceCase == 1) {
			text = text.toUpperCase();
		} else if(this.forceCase == 2) {
			text = text.toLowerCase();
		}
		if(this.filterMode != 0) {
			var pattern;
			switch(this.filterMode) {
			case 1:
				pattern = new EReg("[^a-zA-Z]*","g");
				break;
			case 2:
				pattern = new EReg("[^0-9]*","g");
				break;
			case 3:
				pattern = new EReg("[^a-zA-Z0-9]*","g");
				break;
			case 4:
				pattern = this.customFilterPattern;
				break;
			default:
				throw new openfl_errors_Error("FlxInputText: Unknown filterMode (" + this.filterMode + ")");
			}
			text = text.replace(pattern.r,"");
		}
		return text;
	}
	,set_params: function(p) {
		this.params = p;
		if(this.params == null) {
			this.params = [];
		}
		var namedValue = { name : "value", value : this.text};
		this.params.push(namedValue);
		return p;
	}
	,set_x: function(X) {
		if(this.fieldBorderSprite != null && this.fieldBorderThickness > 0) {
			this.fieldBorderSprite.set_x(X - this.fieldBorderThickness);
		}
		if(this.backgroundSprite != null && this.background) {
			this.backgroundSprite.set_x(X);
		}
		return flixel_text_FlxText.prototype.set_x.call(this,X);
	}
	,set_y: function(Y) {
		if(this.fieldBorderSprite != null && this.fieldBorderThickness > 0) {
			this.fieldBorderSprite.set_y(Y - this.fieldBorderThickness);
		}
		if(this.backgroundSprite != null && this.background) {
			this.backgroundSprite.set_y(Y);
		}
		return flixel_text_FlxText.prototype.set_y.call(this,Y);
	}
	,set_hasFocus: function(newFocus) {
		if(newFocus) {
			if(this.hasFocus != newFocus) {
				this._caretTimer = new flixel_util_FlxTimer().start(0.5,$bind(this,this.toggleCaret),0);
				this.caret.set_visible(true);
				this.set_caretIndex(this.text.length);
			}
		} else {
			this.caret.set_visible(false);
			if(this._caretTimer != null) {
				this._caretTimer.cancel();
			}
		}
		if(newFocus != this.hasFocus) {
			this.calcFrame();
		}
		return this.hasFocus = newFocus;
	}
	,getAlignStr: function() {
		var alignStr = "left";
		if(this._defaultFormat != null && this._defaultFormat.align != null) {
			alignStr = flixel_text_FlxTextAlign.fromOpenFL(this._defaultFormat.align);
		}
		return alignStr;
	}
	,set_caretIndex: function(newCaretIndex) {
		var offx = 0;
		var alignStr = this.getAlignStr();
		switch(alignStr) {
		case "center":
			if(offx <= 1) {
				offx = 0;
			}
			break;
		case "right":
			offx = this.textField.get_width() - 2 - this.textField.get_textWidth() - 2;
			if(offx < 0) {
				offx = 0;
			}
			break;
		default:
			offx = 0;
		}
		this.caretIndex = newCaretIndex;
		if(this.caretIndex > this.text.length + 1) {
			this.caretIndex = -1;
		}
		if(this.caretIndex != -1) {
			var boundaries = null;
			if(this.caretIndex < this.text.length) {
				boundaries = this.getCharBoundaries(this.caretIndex);
				if(boundaries != null) {
					this.caret.set_x(offx + boundaries.get_left() + this.x);
					this.caret.set_y(boundaries.get_top() + this.y);
				}
			} else {
				boundaries = this.getCharBoundaries(this.caretIndex - 1);
				if(boundaries != null) {
					this.caret.set_x(offx + boundaries.get_right() + this.x);
					this.caret.set_y(boundaries.get_top() + this.y);
				} else if(this.text.length == 0) {
					this.caret.set_x(this.x + offx + 2);
					this.caret.set_y(this.y + 2);
				}
			}
		}
		if(this.lines == 1 && this.caret.x + this.caret.get_width() > this.x + this.get_width()) {
			this.caret.set_x(this.x + this.get_width() - 2);
		}
		return this.caretIndex;
	}
	,set_forceCase: function(Value) {
		this.forceCase = Value;
		this.set_text(this.filter(this.text));
		return this.forceCase;
	}
	,set_size: function(Value) {
		flixel_text_FlxText.prototype.set_size.call(this,Value);
		this.caret.makeGraphic(1,(this._defaultFormat.size | 0) + 2 | 0);
		return Value;
	}
	,set_maxLength: function(Value) {
		this.maxLength = Value;
		if(this.text.length > this.maxLength) {
			this.set_text(this.text.substring(0,this.maxLength));
		}
		return this.maxLength;
	}
	,set_lines: function(Value) {
		if(Value == 0) {
			return 0;
		}
		if(Value > 1) {
			this.textField.set_wordWrap(true);
			this.textField.set_multiline(true);
		} else {
			this.textField.set_wordWrap(false);
			this.textField.set_multiline(false);
		}
		this.lines = Value;
		this.calcFrame();
		return this.lines;
	}
	,get_passwordMode: function() {
		return this.textField.get_displayAsPassword();
	}
	,set_passwordMode: function(value) {
		this.textField.set_displayAsPassword(value);
		this.calcFrame();
		return value;
	}
	,set_filterMode: function(Value) {
		this.filterMode = Value;
		this.set_text(this.filter(this.text));
		return this.filterMode;
	}
	,set_fieldBorderColor: function(Value) {
		this.fieldBorderColor = Value;
		this.calcFrame();
		return this.fieldBorderColor;
	}
	,set_fieldBorderThickness: function(Value) {
		this.fieldBorderThickness = Value;
		this.calcFrame();
		return this.fieldBorderThickness;
	}
	,set_backgroundColor: function(Value) {
		this.backgroundColor = Value;
		this.calcFrame();
		return this.backgroundColor;
	}
	,__class__: flixel_addons_ui_FlxInputText
	,__properties__: $extend(flixel_text_FlxText.prototype.__properties__,{set_backgroundColor:"set_backgroundColor",set_fieldBorderThickness:"set_fieldBorderThickness",set_fieldBorderColor:"set_fieldBorderColor",set_filterMode:"set_filterMode",set_lines:"set_lines",set_maxLength:"set_maxLength",set_forceCase:"set_forceCase",set_caretIndex:"set_caretIndex",set_hasFocus:"set_hasFocus",set_passwordMode:"set_passwordMode",get_passwordMode:"get_passwordMode",set_params:"set_params",set_caretWidth:"set_caretWidth",set_caretColor:"set_caretColor",set_customFilterPattern:"set_customFilterPattern"})
});
var flixel_addons_ui_FlxMultiGamepad = function(Gamepad1,Input,Combos,Forbiddens) {
	flixel_addons_ui_FlxBaseMultiInput.call(this);
	this.input = Input;
	this.gamepad = Gamepad1;
	this.combos = Combos;
	this.forbiddens = Forbiddens;
};
$hxClasses["flixel.addons.ui.FlxMultiGamepad"] = flixel_addons_ui_FlxMultiGamepad;
flixel_addons_ui_FlxMultiGamepad.__name__ = "flixel.addons.ui.FlxMultiGamepad";
flixel_addons_ui_FlxMultiGamepad.__super__ = flixel_addons_ui_FlxBaseMultiInput;
flixel_addons_ui_FlxMultiGamepad.prototype = $extend(flixel_addons_ui_FlxBaseMultiInput.prototype,{
	gamepad: null
	,destroy: function() {
		flixel_addons_ui_FlxBaseMultiInput.prototype.destroy.call(this);
		this.gamepad = null;
	}
	,checkJustPressed: function() {
		if(this.gamepad == null) {
			return false;
		}
		var _this = this.gamepad;
		var ID = this.input;
		var Status = 2;
		switch(ID) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(ID);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,checkJustReleased: function() {
		if(this.gamepad == null) {
			return false;
		}
		var _this = this.gamepad;
		var ID = this.input;
		var Status = -1;
		switch(ID) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(ID);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,checkPressed: function() {
		if(this.gamepad == null) {
			return false;
		}
		var _this = this.gamepad;
		var ID = this.input;
		var Status = 1;
		switch(ID) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(ID);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,checkCombos: function(value) {
		if(this.gamepad == null) {
			return false;
		}
		return this.gamepad.checkButtonArrayState(this.combos,1) == value;
	}
	,checkForbiddens: function(value) {
		if(this.gamepad == null) {
			return false;
		}
		return this.gamepad.checkButtonArrayState(this.forbiddens,1) == value;
	}
	,__class__: flixel_addons_ui_FlxMultiGamepad
});
var flixel_addons_ui_FlxMultiGamepadAnalogStick = function(Gamepad1,Input,Combos,Forbiddens) {
	this.sInput = Input;
	flixel_addons_ui_FlxMultiGamepad.call(this,Gamepad1,Input.id,Combos,Forbiddens);
};
$hxClasses["flixel.addons.ui.FlxMultiGamepadAnalogStick"] = flixel_addons_ui_FlxMultiGamepadAnalogStick;
flixel_addons_ui_FlxMultiGamepadAnalogStick.__name__ = "flixel.addons.ui.FlxMultiGamepadAnalogStick";
flixel_addons_ui_FlxMultiGamepadAnalogStick.getStickInput = function(str) {
	str = str.toLowerCase();
	switch(str) {
	case "left_analog_stick_x_minus":
		return { id : 19, axis : flixel_addons_ui_XY.X, positive : false};
	case "left_analog_stick_x_plus":
		return { id : 19, axis : flixel_addons_ui_XY.X, positive : true};
	case "left_analog_stick_y_minus":
		return { id : 19, axis : flixel_addons_ui_XY.Y, positive : false};
	case "left_analog_stick_y_plus":
		return { id : 19, axis : flixel_addons_ui_XY.Y, positive : true};
	case "right_analog_stick_x_minus":
		return { id : 20, axis : flixel_addons_ui_XY.X, positive : false};
	case "right_analog_stick_x_plus":
		return { id : 20, axis : flixel_addons_ui_XY.X, positive : true};
	case "right_analog_stick_y_minus":
		return { id : 20, axis : flixel_addons_ui_XY.Y, positive : false};
	case "right_analog_stick_y_plus":
		return { id : 20, axis : flixel_addons_ui_XY.Y, positive : true};
	}
	return null;
};
flixel_addons_ui_FlxMultiGamepadAnalogStick.__super__ = flixel_addons_ui_FlxMultiGamepad;
flixel_addons_ui_FlxMultiGamepadAnalogStick.prototype = $extend(flixel_addons_ui_FlxMultiGamepad.prototype,{
	sInput: null
	,destroy: function() {
		flixel_addons_ui_FlxMultiGamepad.prototype.destroy.call(this);
		this.sInput = null;
	}
	,checkJustPressed: function() {
		if(this.gamepad == null) {
			return false;
		}
		var dz = this.gamepad.get_deadZone();
		switch(this.sInput.id) {
		case 19:
			if(this.sInput.axis == flixel_addons_ui_XY.X) {
				var _this = this.gamepad.analog.justMoved;
				var stick = _this.gamepad.mapping.getAnalogStick(19);
				var tmp;
				if(stick == null) {
					tmp = false;
				} else {
					var button = _this.gamepad.buttons[stick.x];
					tmp = button != null && button.hasState(_this.status);
				}
				if(tmp) {
					if(this.sInput.positive) {
						var _this = this.gamepad.analog.value.gamepad;
						return _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(19)) > dz;
					} else {
						var _this = this.gamepad.analog.value.gamepad;
						return _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(19)) < -dz;
					}
				} else {
					return false;
				}
			} else {
				var _this = this.gamepad.analog.justMoved;
				var stick = _this.gamepad.mapping.getAnalogStick(19);
				var tmp;
				if(stick == null) {
					tmp = false;
				} else {
					var button = _this.gamepad.buttons[stick.y];
					tmp = button != null && button.hasState(_this.status);
				}
				if(tmp) {
					if(this.sInput.positive) {
						var _this = this.gamepad.analog.value.gamepad;
						return _this.getYAxisRaw(_this.mapping.getAnalogStick(19)) > dz;
					} else {
						var _this = this.gamepad.analog.value.gamepad;
						return _this.getYAxisRaw(_this.mapping.getAnalogStick(19)) < -dz;
					}
				} else {
					return false;
				}
			}
			break;
		case 20:
			if(this.sInput.axis == flixel_addons_ui_XY.X) {
				var _this = this.gamepad.analog.justMoved;
				var stick = _this.gamepad.mapping.getAnalogStick(20);
				var tmp;
				if(stick == null) {
					tmp = false;
				} else {
					var button = _this.gamepad.buttons[stick.x];
					tmp = button != null && button.hasState(_this.status);
				}
				if(tmp) {
					if(this.sInput.positive) {
						var _this = this.gamepad.analog.value.gamepad;
						return _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(20)) > dz;
					} else {
						var _this = this.gamepad.analog.value.gamepad;
						return _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(20)) < -dz;
					}
				} else {
					return false;
				}
			} else {
				var _this = this.gamepad.analog.justMoved;
				var stick = _this.gamepad.mapping.getAnalogStick(20);
				var tmp;
				if(stick == null) {
					tmp = false;
				} else {
					var button = _this.gamepad.buttons[stick.y];
					tmp = button != null && button.hasState(_this.status);
				}
				if(tmp) {
					if(this.sInput.positive) {
						var _this = this.gamepad.analog.value.gamepad;
						return _this.getYAxisRaw(_this.mapping.getAnalogStick(20)) > dz;
					} else {
						var _this = this.gamepad.analog.value.gamepad;
						return _this.getYAxisRaw(_this.mapping.getAnalogStick(20)) < -dz;
					}
				} else {
					return false;
				}
			}
			break;
		default:
			return false;
		}
	}
	,checkJustReleased: function() {
		if(this.gamepad == null) {
			return false;
		}
		switch(this.sInput.id) {
		case 19:
			if(this.sInput.axis == flixel_addons_ui_XY.X) {
				var _this = this.gamepad.analog.justReleased;
				var stick = _this.gamepad.mapping.getAnalogStick(19);
				if(stick == null) {
					return false;
				} else {
					var button = _this.gamepad.buttons[stick.x];
					if(button != null) {
						return button.hasState(_this.status);
					} else {
						return false;
					}
				}
			} else {
				var _this = this.gamepad.analog.justReleased;
				var stick = _this.gamepad.mapping.getAnalogStick(19);
				if(stick == null) {
					return false;
				} else {
					var button = _this.gamepad.buttons[stick.y];
					if(button != null) {
						return button.hasState(_this.status);
					} else {
						return false;
					}
				}
			}
			break;
		case 20:
			if(this.sInput.axis == flixel_addons_ui_XY.X) {
				var _this = this.gamepad.analog.justReleased;
				var stick = _this.gamepad.mapping.getAnalogStick(20);
				if(stick == null) {
					return false;
				} else {
					var button = _this.gamepad.buttons[stick.x];
					if(button != null) {
						return button.hasState(_this.status);
					} else {
						return false;
					}
				}
			} else {
				var _this = this.gamepad.analog.justReleased;
				var stick = _this.gamepad.mapping.getAnalogStick(20);
				if(stick == null) {
					return false;
				} else {
					var button = _this.gamepad.buttons[stick.y];
					if(button != null) {
						return button.hasState(_this.status);
					} else {
						return false;
					}
				}
			}
			break;
		default:
			return false;
		}
	}
	,checkPressed: function() {
		if(this.gamepad == null) {
			return false;
		}
		var value = false;
		var dz = this.gamepad.get_deadZone();
		switch(this.sInput.id) {
		case 19:
			if(this.sInput.axis == flixel_addons_ui_XY.X) {
				if(this.sInput.positive) {
					var _this = this.gamepad.analog.value.gamepad;
					return _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(19)) > dz;
				} else {
					var _this = this.gamepad.analog.value.gamepad;
					return _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(19)) < -dz;
				}
			} else if(this.sInput.positive) {
				var _this = this.gamepad.analog.value.gamepad;
				return _this.getYAxisRaw(_this.mapping.getAnalogStick(19)) > dz;
			} else {
				var _this = this.gamepad.analog.value.gamepad;
				return _this.getYAxisRaw(_this.mapping.getAnalogStick(19)) < -dz;
			}
			break;
		case 20:
			if(this.sInput.axis == flixel_addons_ui_XY.X) {
				if(this.sInput.positive) {
					var _this = this.gamepad.analog.value.gamepad;
					return _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(20)) > dz;
				} else {
					var _this = this.gamepad.analog.value.gamepad;
					return _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(20)) < -dz;
				}
			} else if(this.sInput.positive) {
				var _this = this.gamepad.analog.value.gamepad;
				return _this.getYAxisRaw(_this.mapping.getAnalogStick(20)) > dz;
			} else {
				var _this = this.gamepad.analog.value.gamepad;
				return _this.getYAxisRaw(_this.mapping.getAnalogStick(20)) < -dz;
			}
			break;
		default:
			value = false;
			return value;
		}
	}
	,checkCombos: function(value) {
		if(this.gamepad == null) {
			return false;
		}
		return this.gamepad.checkButtonArrayState(this.combos,1) == value;
	}
	,checkForbiddens: function(value) {
		if(this.gamepad == null) {
			return false;
		}
		return this.gamepad.checkButtonArrayState(this.forbiddens,1) == value;
	}
	,__class__: flixel_addons_ui_FlxMultiGamepadAnalogStick
});
var flixel_addons_ui_XY = $hxEnums["flixel.addons.ui.XY"] = { __ename__ : "flixel.addons.ui.XY", __constructs__ : ["X","Y"]
	,X: {_hx_index:0,__enum__:"flixel.addons.ui.XY",toString:$estr}
	,Y: {_hx_index:1,__enum__:"flixel.addons.ui.XY",toString:$estr}
};
flixel_addons_ui_XY.__empty_constructs__ = [flixel_addons_ui_XY.X,flixel_addons_ui_XY.Y];
var flixel_addons_ui_FlxMultiKey = function(Input,Combos,Forbiddens) {
	flixel_addons_ui_FlxBaseMultiInput.call(this);
	this.input = Input;
	this.combos = Combos;
	this.forbiddens = Forbiddens;
};
$hxClasses["flixel.addons.ui.FlxMultiKey"] = flixel_addons_ui_FlxMultiKey;
flixel_addons_ui_FlxMultiKey.__name__ = "flixel.addons.ui.FlxMultiKey";
flixel_addons_ui_FlxMultiKey.__super__ = flixel_addons_ui_FlxBaseMultiInput;
flixel_addons_ui_FlxMultiKey.prototype = $extend(flixel_addons_ui_FlxBaseMultiInput.prototype,{
	checkJustPressed: function() {
		return flixel_FlxG.keys.checkStatus(this.input,2);
	}
	,checkJustReleased: function() {
		return flixel_FlxG.keys.checkStatus(this.input,-1);
	}
	,checkPressed: function() {
		return flixel_FlxG.keys.checkStatus(this.input,1);
	}
	,checkCombos: function(value) {
		return flixel_FlxG.keys.checkKeyArrayState(this.combos,1) == value;
	}
	,checkForbiddens: function(value) {
		return flixel_FlxG.keys.checkKeyArrayState(this.forbiddens,1) == value;
	}
	,__class__: flixel_addons_ui_FlxMultiKey
});
var flixel_addons_ui_interfaces_IFlxUIWidget = function() { };
$hxClasses["flixel.addons.ui.interfaces.IFlxUIWidget"] = flixel_addons_ui_interfaces_IFlxUIWidget;
flixel_addons_ui_interfaces_IFlxUIWidget.__name__ = "flixel.addons.ui.interfaces.IFlxUIWidget";
flixel_addons_ui_interfaces_IFlxUIWidget.__isInterface__ = true;
flixel_addons_ui_interfaces_IFlxUIWidget.__interfaces__ = [flixel_IFlxSprite];
flixel_addons_ui_interfaces_IFlxUIWidget.prototype = {
	get_width: null
	,set_width: null
	,get_height: null
	,set_height: null
	,name: null
	,broadcastToFlxUI: null
	,__class__: flixel_addons_ui_interfaces_IFlxUIWidget
	,__properties__: {set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"}
};
var flixel_addons_ui_FlxUIGroup = function(X,Y) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this.autoBounds = true;
	this.broadcastToFlxUI = true;
	flixel_group_FlxTypedSpriteGroup.call(this,X,Y);
};
$hxClasses["flixel.addons.ui.FlxUIGroup"] = flixel_addons_ui_FlxUIGroup;
flixel_addons_ui_FlxUIGroup.__name__ = "flixel.addons.ui.FlxUIGroup";
flixel_addons_ui_FlxUIGroup.__interfaces__ = [flixel_addons_ui_interfaces_IFlxUIWidget];
flixel_addons_ui_FlxUIGroup.__super__ = flixel_group_FlxTypedSpriteGroup;
flixel_addons_ui_FlxUIGroup.prototype = $extend(flixel_group_FlxTypedSpriteGroup.prototype,{
	name: null
	,broadcastToFlxUI: null
	,autoBounds: null
	,destroy: function() {
		flixel_group_FlxTypedSpriteGroup.prototype.destroy.call(this);
	}
	,add: function(Object1) {
		var obj = flixel_group_FlxTypedSpriteGroup.prototype.add.call(this,Object1);
		if(this.autoBounds) {
			this.calcBounds();
		}
		return obj;
	}
	,remove: function(Object1,Splice) {
		if(Splice == null) {
			Splice = false;
		}
		var obj = flixel_group_FlxTypedSpriteGroup.prototype.remove.call(this,Object1,Splice);
		if(this.autoBounds) {
			this.calcBounds();
		}
		return obj;
	}
	,setScrollFactor: function(X,Y) {
		var _g = 0;
		var _g1 = this.group.members;
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			if(obj != null) {
				obj.scrollFactor.set(X,Y);
			}
		}
	}
	,hasThis: function(Object1) {
		var _g = 0;
		var _g1 = this.group.members;
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			if(obj == Object1) {
				return true;
			}
		}
		return false;
	}
	,calcBounds: function(rect) {
		if(this.group.members != null && this.group.members.length > 0) {
			var left = Infinity;
			var right = -Infinity;
			var top = Infinity;
			var bottom = -Infinity;
			var _g = 0;
			var _g1 = this.group.members;
			while(_g < _g1.length) {
				var fb = _g1[_g];
				++_g;
				if(fb != null) {
					if(js_Boot.__implements(fb,flixel_addons_ui_interfaces_IFlxUIWidget)) {
						var flui = fb;
						if(flui.x < left) {
							left = flui.x;
						}
						if(flui.x + flui.get_width() > right) {
							right = flui.x + flui.get_width();
						}
						if(flui.y < top) {
							top = flui.y;
						}
						if(flui.y + flui.get_height() > bottom) {
							bottom = flui.y + flui.get_height();
						}
					} else if(((fb) instanceof flixel_FlxSprite)) {
						var flxi = fb;
						if(flxi.x < left) {
							left = flxi.x;
						}
						if(flxi.x > right) {
							right = flxi.x;
						}
						if(flxi.y < top) {
							top = flxi.y;
						}
						if(flxi.y > bottom) {
							bottom = flxi.y;
						}
					}
				}
			}
			this.set_width(right - left);
			this.set_height(bottom - top);
			if(rect != null) {
				rect.x = left;
				rect.y = top;
				rect.width = this.get_width();
				rect.height = this.get_height();
			}
		} else {
			this.set_width(this.set_height(0));
		}
	}
	,floorAll: function() {
		var fs = null;
		var _g = 0;
		var _g1 = this.group.members;
		while(_g < _g1.length) {
			var fb = _g1[_g];
			++_g;
			fs = fb;
			fs.set_x(Math.floor(fs.x));
			fs.set_y(Math.floor(fs.y));
		}
	}
	,__class__: flixel_addons_ui_FlxUIGroup
});
var flixel_addons_ui_FlxUI = function(data,ptr,superIndex_,tongue_,liveFilePath_,uiVars_) {
	if(liveFilePath_ == null) {
		liveFilePath_ = "";
	}
	this._scaledAssets = [];
	this._assetsToCleanUp = [];
	this._safe_input_delay_elapsed = 0.0;
	this._curr_mode = "";
	this._pointY = 1;
	this._pointX = 1;
	this._postLoaded = false;
	this.cursorLists = null;
	this.getTextFallback = null;
	this.failed_by = 0;
	this.failed = false;
	this.safe_input_delay_time = 0.01;
	this.do_safe_input_delay = true;
	flixel_addons_ui_FlxUIGroup.call(this);
	this._ptr_tongue = tongue_;
	this._ptr = ptr;
	if(superIndex_ != null) {
		this.setSuperIndex(superIndex_);
	}
	if(uiVars_ != null) {
		this._variable_index = new haxe_ds_StringMap();
		var key = haxe_ds_StringMap.keysIterator(uiVars_.h);
		while(key.hasNext()) {
			var key1 = key.next();
			this._variable_index.h[key1] = uiVars_.h[key1];
		}
	}
	if(data != null) {
		this.load(data);
	}
};
$hxClasses["flixel.addons.ui.FlxUI"] = flixel_addons_ui_FlxUI;
flixel_addons_ui_FlxUI.__name__ = "flixel.addons.ui.FlxUI";
flixel_addons_ui_FlxUI.__interfaces__ = [flixel_addons_ui_interfaces_IEventGetter];
flixel_addons_ui_FlxUI.event = function(name,sender,data,params) {
	var currState = flixel_addons_ui_FlxUI.getLeafUIState();
	if(currState != null) {
		currState.getEvent(name,sender,data,params);
	}
};
flixel_addons_ui_FlxUI.fontStr = function(str,style) {
	if(style == null) {
		style = "";
	}
	var currState = flixel_addons_ui_FlxUI.getLeafUIState();
	var tongue = currState._tongue;
	var t = tongue != null ? tongue : null;
	if(t != null) {
		str = t.getFont(str);
	}
	var style1 = style;
	if(style1 == null) {
		style1 = "";
	}
	var style = style1;
	if(style == null) {
		style = "";
	}
	style = style.toLowerCase();
	var suffix = "";
	switch(style) {
	case "b":case "bold":
		suffix = "b";
		break;
	case "bi":case "bold-italic":case "boldi":case "bolditalic":case "ib":case "ibold":case "italic-bold":case "italicbold":case "z":
		suffix = "z";
		break;
	case "i":case "italic":
		suffix = "i";
		break;
	case "":case "none":case "normal":case "regular":
		suffix = "";
		break;
	}
	if(str.indexOf("assets/fonts/") != 0) {
		return "assets/fonts/" + str + suffix;
	} else {
		return str + suffix;
	}
};
flixel_addons_ui_FlxUI.fontSize = function(str,size) {
	var currState = flixel_addons_ui_FlxUI.getLeafUIState();
	var tongue = currState._tongue;
	var t = tongue != null ? tongue : null;
	if(t != null) {
		size = t.getFontSize(str,size);
	}
	return size;
};
flixel_addons_ui_FlxUI.font = function(str,style,extension) {
	if(extension == null) {
		extension = ".ttf";
	}
	if(style == null) {
		style = "";
	}
	var currState = flixel_addons_ui_FlxUI.getLeafUIState();
	var tongue = currState._tongue;
	var t = tongue != null ? tongue : null;
	if(t != null) {
		str = t.getFont(str);
	}
	return flixel_addons_ui_U.font(str,style,extension);
};
flixel_addons_ui_FlxUI.__getTongue = function() {
	var currState = flixel_addons_ui_FlxUI.getLeafUIState();
	var tongue = currState._tongue;
	if(tongue != null) {
		return tongue;
	}
	return null;
};
flixel_addons_ui_FlxUI.forceFocus = function(b,thing) {
	var currState = flixel_addons_ui_FlxUI.getLeafUIState();
	if(currState != null) {
		currState.forceFocus(b,thing);
	}
};
flixel_addons_ui_FlxUI.getLeafUIState = function() {
	var state = flixel_FlxG.game._state;
	if(state != null) {
		while(state.subState != null) state = state.subState;
	}
	if(js_Boot.__implements(state,flixel_addons_ui_interfaces_IFlxUIState)) {
		return state;
	}
	return null;
};
flixel_addons_ui_FlxUI.request = function(name,sender,data,params) {
	var currState = flixel_addons_ui_FlxUI.getLeafUIState();
	if(currState != null) {
		return currState.getRequest(name,sender,data,params);
	}
	return null;
};
flixel_addons_ui_FlxUI._delta = function(thing,X,Y) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var _g = thing;
	_g.set_x(_g.x + X);
	var _g = thing;
	_g.set_y(_g.y + Y);
};
flixel_addons_ui_FlxUI._center = function(thing,X,Y) {
	if(Y == null) {
		Y = true;
	}
	if(X == null) {
		X = true;
	}
	if(X) {
		thing.set_x((flixel_FlxG.width - thing.get_width()) / 2);
	}
	if(Y) {
		thing.set_y((flixel_FlxG.height - thing.get_height()) / 2);
	}
	return thing;
};
flixel_addons_ui_FlxUI.consolidateData = function(data,definition,combineUniqueChildren) {
	if(combineUniqueChildren == null) {
		combineUniqueChildren = false;
	}
	if(data == null && definition != null) {
		return definition;
	}
	if(definition == null) {
		return data;
	} else {
		var new_data = Xml.parse(haxe_xml_Printer.print(definition)).firstElement();
		var att = data.attributes();
		while(att.hasNext()) {
			var att1 = att.next();
			var val = haxe_xml__$Access_AttribAccess.resolve(data,att1);
			new_data.set(att1,val);
		}
		var v;
		if(data.nodeType == Xml.Document) {
			v = "Document";
		} else {
			if(data.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (data.nodeType == null ? "null" : XmlType.toString(data.nodeType)));
			}
			v = data.nodeName;
		}
		if(new_data.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (new_data.nodeType == null ? "null" : XmlType.toString(new_data.nodeType)));
		}
		new_data.nodeName = v;
		if(haxe_xml__$Access_HasAttribAccess.resolve(data,"name") || haxe_xml__$Access_HasAttribAccess.resolve(data,"id")) {
			new_data.set("name",flixel_addons_ui_U.xml_name(data));
		} else {
			new_data.set("name","");
		}
		var element = data.elements();
		while(element.hasNext()) {
			var element1 = element.next();
			if(element1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (element1.nodeType == null ? "null" : XmlType.toString(element1.nodeType)));
			}
			var nodeName = element1.nodeName;
			var notCombine = !combineUniqueChildren;
			if(combineUniqueChildren) {
				var new_els = new_data.elementsNamed(nodeName);
				var new_el = new_els.next();
				if(haxe_xml__$Access_NodeListAccess.resolve(data,nodeName).length == 1 && new_el != null && new_els.hasNext() == false) {
					var att = element1.attributes();
					while(att.hasNext()) {
						var att1 = att.next();
						new_el.set(att1,element1.get(att1));
					}
				} else {
					notCombine = true;
				}
			}
			if(notCombine) {
				new_data.insertChild(Xml.parse(haxe_xml_Printer.print(element1)).firstElement(),0);
			}
		}
		if(new_data.nodeType != Xml.Document && new_data.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (new_data.nodeType == null ? "null" : XmlType.toString(new_data.nodeType)));
		}
		var this1 = new_data;
		return this1;
	}
};
flixel_addons_ui_FlxUI._loadBitmapRect = function(source,rect_str) {
	var b1 = openfl_utils_Assets.getBitmapData(flixel_addons_ui_U.gfx(source));
	var coords = rect_str.split(",");
	var rect = null;
	if(coords != null && coords.length == 4) {
		var x_ = Std.parseInt(coords[0]);
		var y_ = Std.parseInt(coords[1]);
		var w_ = Std.parseInt(coords[2]);
		var h_ = Std.parseInt(coords[3]);
		rect = new openfl_geom_Rectangle(x_,y_,w_,h_);
	}
	var r = rect;
	var b2 = new openfl_display_BitmapData(r.width | 0,r.height | 0,true,16777215);
	b2.copyPixels(b1,r,new openfl_geom_Point(0,0));
	return b2;
};
flixel_addons_ui_FlxUI.getParams = function(data) {
	var params = null;
	if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
		params = [];
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"param");
		while(_g < _g1.length) {
			var param = _g1[_g];
			++_g;
			if(haxe_xml__$Access_HasAttribAccess.resolve(param,"type") && haxe_xml__$Access_HasAttribAccess.resolve(param,"value")) {
				var type = haxe_xml__$Access_AttribAccess.resolve(param,"type");
				type = type.toLowerCase();
				var valueStr = haxe_xml__$Access_AttribAccess.resolve(param,"value");
				var value = valueStr;
				var sort = flixel_addons_ui_U.xml_i(param,"sort",-1);
				switch(type) {
				case "bool":case "boolean":
					var str = new String(valueStr);
					str = str.toLowerCase();
					if(str == "true" || str == "1") {
						value = true;
					} else {
						value = false;
					}
					break;
				case "color":case "hex":
					var return_val = flixel_util_FlxColor.fromString(valueStr);
					if(return_val == null) {
						throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + valueStr);
					}
					value = return_val;
					break;
				case "float":
					value = parseFloat(valueStr);
					break;
				case "int":
					value = Std.parseInt(valueStr);
					break;
				case "string":
					value = new String(valueStr);
					break;
				}
				params.push({ sort : sort, value : value});
			}
		}
		params.sort(flixel_addons_ui_FlxUI.sortParams);
		var _g = 0;
		var _g1 = params.length;
		while(_g < _g1) {
			var i = _g++;
			params[i] = params[i].value;
		}
	}
	return params;
};
flixel_addons_ui_FlxUI.sortParams = function(a,b) {
	if(a.sort < b.sort) {
		return -1;
	}
	if(a.sort > b.sort) {
		return 1;
	}
	return 0;
};
flixel_addons_ui_FlxUI.__super__ = flixel_addons_ui_FlxUIGroup;
flixel_addons_ui_FlxUI.prototype = $extend(flixel_addons_ui_FlxUIGroup.prototype,{
	do_safe_input_delay: null
	,safe_input_delay_time: null
	,failed: null
	,failed_by: null
	,get_isRoot: function() {
		if(this._ptr != null) {
			return this._ptr == flixel_addons_ui_FlxUI.getLeafUIState();
		} else {
			return false;
		}
	}
	,liveFilePath: null
	,get_tongue: function() {
		return this._ptr_tongue;
	}
	,set_tongue: function(t) {
		this._ptr_tongue = t;
		this._tongueSet(this.group.members,t);
		return this._ptr_tongue;
	}
	,focus: null
	,set_focus: function(widget) {
		if(this.focus != null) {
			this.onFocusLost(this.focus);
		}
		this.focus = widget;
		if(this.focus != null) {
			this.onFocus(this.focus);
		}
		return widget;
	}
	,getTextFallback: null
	,cursorLists: null
	,_ptr_tongue: null
	,_data: null
	,_tongueSet: function(list,tongue) {
		var _g = 0;
		while(_g < list.length) {
			var fs = list[_g];
			++_g;
			if(((fs) instanceof flixel_addons_ui_FlxUIGroup)) {
				var g = js_Boot.__cast(fs , flixel_addons_ui_FlxUIGroup);
				this._tongueSet(g.group.members,tongue);
			} else if(((fs) instanceof flixel_addons_ui_FlxUI)) {
				var fu = js_Boot.__cast(fs , flixel_addons_ui_FlxUI);
				fu.set_tongue(tongue);
			}
		}
	}
	,callEvent: function(name,sender,data,params) {
		this.getEvent(name,sender,data,params);
	}
	,getEvent: function(name,sender,data,params) {
		if(this._ptr != null) {
			this._ptr.getEvent(name,sender,data,params);
			if(name == "post_load") {
				var key = haxe_ds_StringMap.keysIterator(this._asset_index.h);
				while(key.hasNext()) {
					var key1 = key.next();
					var thing = this._asset_index.h[key1];
					if(((thing) instanceof flixel_addons_ui_FlxUI)) {
						var fui = thing;
						fui.getEvent("post_load",sender,data);
					}
				}
			}
		}
	}
	,getRequest: function(name,sender,data,params) {
		if(this._ptr != null) {
			return this._ptr.getRequest(name,sender,data,params);
		}
		return null;
	}
	,onFocus: function(widget) {
		if(((widget) instanceof flixel_addons_ui_FlxUIDropDownMenu)) {
			var _g = 0;
			var _g1 = this.group.members;
			while(_g < _g1.length) {
				var asset = _g1[_g];
				++_g;
				this.setWidgetSuppression(asset,widget);
			}
		}
	}
	,setWidgetSuppression: function(asset,butNotThisOne,suppressed) {
		if(suppressed == null) {
			suppressed = true;
		}
		if(js_Boot.__implements(asset,flixel_addons_ui_interfaces_IFlxUIClickable)) {
			var skip = false;
			if(((asset) instanceof flixel_addons_ui_FlxUIDropDownMenu)) {
				var ddasset = asset;
				if(ddasset == butNotThisOne) {
					skip = true;
				}
			}
			if(!skip) {
				var ibtn = asset;
				ibtn.set_skipButtonUpdate(suppressed);
			}
		} else if(((asset) instanceof flixel_addons_ui_FlxUIGroup)) {
			var g = asset;
			var _g = 0;
			var _g1 = g.group.members;
			while(_g < _g1.length) {
				var groupAsset = _g1[_g];
				++_g;
				this.setWidgetSuppression(groupAsset,butNotThisOne,suppressed);
			}
		}
	}
	,onFocusLost: function(widget) {
		if(((widget) instanceof flixel_addons_ui_FlxUIDropDownMenu)) {
			var _g = 0;
			var _g1 = this.group.members;
			while(_g < _g1.length) {
				var asset = _g1[_g];
				++_g;
				this.setWidgetSuppression(asset,null,false);
			}
		}
	}
	,setSuperIndex: function(flxUI) {
		this._superIndexUI = flxUI;
	}
	,update: function(elapsed) {
		if(this.do_safe_input_delay) {
			this._safe_input_delay_elapsed += flixel_FlxG.elapsed;
			if(this._safe_input_delay_elapsed > this.safe_input_delay_time) {
				this.do_safe_input_delay = false;
			} else {
				return;
			}
		}
		flixel_addons_ui_FlxUIGroup.prototype.update.call(this,elapsed);
	}
	,toggleShow: function(key) {
		var thing = this.getAsset(key,false);
		if(thing == null) {
			var group = this.getGroup(key,false);
			if(group != null) {
				group.set_visible(!group.visible);
				return group.visible;
			}
		} else {
			thing.set_visible(!thing.visible);
			return thing.visible;
		}
		return false;
	}
	,showGroup: function(key,Show,Active) {
		var group = this.getGroup(key,false);
		if(group != null) {
			group.set_visible(Show);
			if(Active == null) {
				group.set_active(Show);
			} else {
				group.set_active(Active);
			}
		}
	}
	,showAsset: function(key,Show,Active) {
		var asset = this.getAsset(key,false);
		if(asset != null) {
			asset.set_visible(Show);
			if(Active == null) {
				asset.set_active(Show);
			} else {
				asset.set_active(Active);
			}
		}
	}
	,removeAsset: function(key,destroy) {
		if(destroy == null) {
			destroy = true;
		}
		var asset = this.getAsset(key,false);
		if(asset != null) {
			this.replaceInGroup(asset,null,true);
			var _this = this._asset_index;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
		}
		if(destroy && asset != null) {
			asset.destroy();
			asset = null;
		}
		return asset;
	}
	,addAsset: function(asset,key,group_name,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(group_name == null) {
			group_name = "";
		}
		if(Object.prototype.hasOwnProperty.call(this._asset_index.h,key)) {
			var tmp = key == "screen";
			return false;
		}
		var g = this.getGroup(group_name,recursive);
		if(g != null) {
			g.add(asset);
		} else {
			this.add(asset);
		}
		this._asset_index.h[key] = asset;
		return true;
	}
	,replaceAsset: function(key,replace,center_x,center_y,destroy_old) {
		if(destroy_old == null) {
			destroy_old = true;
		}
		if(center_y == null) {
			center_y = true;
		}
		if(center_x == null) {
			center_x = true;
		}
		var original = this.getAsset(key,false);
		if(original != null) {
			if(!center_x) {
				replace.set_x(original.x);
			} else {
				replace.set_x(original.x + (original.get_width() - replace.get_width()) / 2);
			}
			if(!center_y) {
				replace.set_y(original.y);
			} else {
				replace.set_y(original.y + (original.get_height() - replace.get_height()) / 2);
			}
			this.replaceInGroup(original,replace);
			var _this = this._asset_index;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
			this._asset_index.h[key] = replace;
			if(destroy_old) {
				original.destroy();
				original = null;
			}
		}
		return original;
	}
	,destroy: function() {
		if(this._group_index != null) {
			var key = haxe_ds_StringMap.keysIterator(this._group_index.h);
			while(key.hasNext()) {
				var key1 = key.next();
				var _this = this._group_index;
				if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
					delete(_this.h[key1]);
				}
			}
			this._group_index = null;
		}
		if(this._asset_index != null) {
			var key = haxe_ds_StringMap.keysIterator(this._asset_index.h);
			while(key.hasNext()) {
				var key1 = key.next();
				var _this = this._asset_index;
				if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
					delete(_this.h[key1]);
				}
			}
			this._asset_index = null;
		}
		if(this._tag_index != null) {
			var key = haxe_ds_StringMap.keysIterator(this._tag_index.h);
			while(key.hasNext()) {
				var key1 = key.next();
				flixel_util_FlxArrayUtil.clearArray(this._tag_index.h[key1]);
				var _this = this._tag_index;
				if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
					delete(_this.h[key1]);
				}
			}
			this._tag_index = null;
		}
		if(this._definition_index != null) {
			var key = haxe_ds_StringMap.keysIterator(this._definition_index.h);
			while(key.hasNext()) {
				var key1 = key.next();
				var _this = this._definition_index;
				if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
					delete(_this.h[key1]);
				}
			}
			this._definition_index = null;
		}
		if(this._variable_index != null) {
			var key = haxe_ds_StringMap.keysIterator(this._variable_index.h);
			while(key.hasNext()) {
				var key1 = key.next();
				var _this = this._variable_index;
				if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
					delete(_this.h[key1]);
				}
			}
			this._variable_index = null;
		}
		if(this._mode_index != null) {
			var key = haxe_ds_StringMap.keysIterator(this._mode_index.h);
			while(key.hasNext()) {
				var key1 = key.next();
				var _this = this._mode_index;
				if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
					delete(_this.h[key1]);
				}
			}
			this._mode_index = null;
		}
		this._ptr = null;
		this._superIndexUI = null;
		this._ptr_tongue = null;
		if(this.cursorLists != null) {
			var _g = 0;
			var _g1 = this.cursorLists;
			while(_g < _g1.length) {
				var arr = _g1[_g];
				++_g;
				flixel_util_FlxArrayUtil.clearArray(arr);
			}
			flixel_util_FlxArrayUtil.clearArray(this.cursorLists);
		}
		this.cursorLists = null;
		flixel_util_FlxArrayUtil.clearArray(this._failure_checks);
		this._failure_checks = null;
		flixel_util_FlxArrayUtil.clearArray(this._assetsToCleanUp);
		this._assetsToCleanUp = null;
		flixel_util_FlxArrayUtil.clearArray(this._scaledAssets);
		this._scaledAssets = null;
		flixel_addons_ui_FlxUIGroup.prototype.destroy.call(this);
	}
	,load: function(data) {
		this._group_index = new haxe_ds_StringMap();
		this._asset_index = new haxe_ds_StringMap();
		this._tag_index = new haxe_ds_StringMap();
		this._definition_index = new haxe_ds_StringMap();
		if(this._variable_index == null) {
			this._variable_index = new haxe_ds_StringMap();
		}
		this._mode_index = new haxe_ds_StringMap();
		if(data != null) {
			if(this._superIndexUI == null) {
				var screenRegion = new flixel_addons_ui_FlxUIRegion(0,0,flixel_FlxG.width,flixel_FlxG.height);
				screenRegion.name = "screen";
				this.addAsset(screenRegion,"screen");
				if(haxe_xml__$Access_HasNodeAccess.resolve(data,"screen_override")) {
					if(this._loadTest(haxe_xml__$Access_NodeAccess.resolve(data,"screen_override"))) {
						var screenNode = haxe_xml__$Access_NodeAccess.resolve(data,"screen_override");
						this._loadPosition(screenNode,screenRegion);
						screenRegion.set_width(this._loadWidth(screenNode,flixel_FlxG.width));
						screenRegion.set_height(this._loadHeight(screenNode,flixel_FlxG.height));
					}
				}
			}
			this._data = data;
			if(haxe_xml__$Access_HasNodeAccess.resolve(data,"inject")) {
				while(haxe_xml__$Access_HasNodeAccess.resolve(data,"inject")) {
					var inj_data = haxe_xml__$Access_NodeAccess.resolve(data,"inject");
					var inj_name = flixel_addons_ui_U.xml_name(inj_data);
					var payload = flixel_addons_ui_U.xml(inj_name,"xml",false);
					if(payload != null) {
						var parent = inj_data.parent;
						var i = 0;
						var _g = 0;
						var _g1 = parent.children;
						while(_g < _g1.length) {
							var child = _g1[_g];
							++_g;
							if(child == inj_data) {
								break;
							}
							++i;
						}
						if(parent.removeChild(inj_data)) {
							var j = 0;
							var e = payload.elements();
							while(e.hasNext()) {
								var e1 = e.next();
								parent.insertChild(e1,i + j);
								++j;
							}
						}
					}
				}
			}
			if(haxe_xml__$Access_HasNodeAccess.resolve(data,"include")) {
				var _g = 0;
				var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"include");
				while(_g < _g1.length) {
					var inc_data = _g1[_g];
					++_g;
					var inc_name = flixel_addons_ui_U.xml_name(inc_data);
					var liveFile = null;
					var inc_xml = null;
					if(liveFile == null) {
						inc_xml = flixel_addons_ui_U.xml(inc_name);
					} else {
						inc_xml = liveFile;
					}
					if(inc_xml != null) {
						var _g2 = 0;
						var _g3 = haxe_xml__$Access_NodeListAccess.resolve(inc_xml,"definition");
						while(_g2 < _g3.length) {
							var def_data = _g3[_g2];
							++_g2;
							var def_name = "include:" + flixel_addons_ui_U.xml_name(def_data);
							this.unparentXML(def_data);
							this._definition_index.h[def_name] = def_data;
						}
						if(haxe_xml__$Access_HasNodeAccess.resolve(inc_xml,"point_size")) {
							this._loadPointSize(inc_xml);
						}
						if(haxe_xml__$Access_HasNodeAccess.resolve(inc_xml,"default")) {
							var _g4 = 0;
							var _g5 = haxe_xml__$Access_NodeListAccess.resolve(inc_xml,"default");
							while(_g4 < _g5.length) {
								var defaultNode = _g5[_g4];
								++_g4;
								if(this._loadTest(defaultNode)) {
									var defaultName = flixel_addons_ui_U.xml_name(defaultNode);
									this.unparentXML(defaultNode);
									this._definition_index.h["default:" + defaultName] = defaultNode;
								}
							}
						}
					}
				}
			}
			if(haxe_xml__$Access_HasNodeAccess.resolve(data,"point_size")) {
				this._loadPointSize(data);
			}
			if(haxe_xml__$Access_HasNodeAccess.resolve(data,"definition")) {
				var _g = 0;
				var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"definition");
				while(_g < _g1.length) {
					var def_data = _g1[_g];
					++_g;
					if(this._loadTest(def_data)) {
						var def_name = flixel_addons_ui_U.xml_name(def_data);
						var error = "";
						if(def_name.indexOf("default:") != -1) {
							error = "'default:'";
						}
						if(def_name.indexOf("include:") != -1) {
							error = "'include:'";
						}
						if(error == "") {
							this.unparentXML(def_data);
							this._definition_index.h[def_name] = def_data;
						}
					}
				}
			}
			if(haxe_xml__$Access_HasNodeAccess.resolve(data,"default")) {
				var _g = 0;
				var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"default");
				while(_g < _g1.length) {
					var defaultNode = _g1[_g];
					++_g;
					if(this._loadTest(defaultNode)) {
						var defaultName = flixel_addons_ui_U.xml_name(defaultNode);
						this.unparentXML(defaultNode);
						this._definition_index.h["default:" + defaultName] = defaultNode;
					}
				}
			}
			if(haxe_xml__$Access_HasNodeAccess.resolve(data,"variable")) {
				var _g = 0;
				var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"variable");
				while(_g < _g1.length) {
					var var_data = _g1[_g];
					++_g;
					if(this._loadTest(var_data)) {
						var var_name = flixel_addons_ui_U.xml_name(var_data);
						var var_value = flixel_addons_ui_U.xml_str(var_data,"value");
						if(var_name != "") {
							this._variable_index.h[var_name] = var_value;
						}
					}
				}
			}
			if(haxe_xml__$Access_HasNodeAccess.resolve(data,"mode")) {
				var _g = 0;
				var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"mode");
				while(_g < _g1.length) {
					var mode_data = _g1[_g];
					++_g;
					if(this._loadTest(mode_data)) {
						var mode_data2 = this.applyNodeConditionals(mode_data);
						var mode_name = flixel_addons_ui_U.xml_name(mode_data);
						this.unparentXML(mode_data2);
						this._mode_index.h[mode_name] = mode_data2;
					}
				}
			}
			if(haxe_xml__$Access_HasNodeAccess.resolve(data,"group")) {
				var _g = 0;
				var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"group");
				while(_g < _g1.length) {
					var group_data = _g1[_g];
					++_g;
					if(this._loadTest(group_data)) {
						var name = flixel_addons_ui_U.xml_name(group_data);
						var custom = flixel_addons_ui_U.xml_str(group_data,"custom");
						var tempGroup = null;
						if(custom != "") {
							var result = this._ptr.getRequest("ui_get_group:",this,custom);
							if(result != null && ((result) instanceof flixel_addons_ui_FlxUIGroup)) {
								tempGroup = result;
							}
						}
						if(tempGroup == null) {
							tempGroup = new flixel_addons_ui_FlxUIGroup();
						}
						tempGroup.name = name;
						this._group_index.h[name] = tempGroup;
						this.add(tempGroup);
					}
				}
			}
			if(data.firstElement() != null) {
				var node = data.elements();
				while(node.hasNext()) {
					var node1 = node.next();
					this._loadSub(node1);
				}
			}
			this._postLoad(data);
		} else {
			this._onFinishLoad();
		}
	}
	,unparentXML: function(f) {
		return flixel_addons_ui_U.unparentXML(f);
	}
	,_loadPointSize: function(data) {
		var data1 = haxe_xml__$Access_NodeAccess.resolve(data,"point_size");
		var default_ = -1.0;
		if(default_ == null) {
			default_ = 0;
		}
		var ptx = this._loadWidth(data1,default_,"x");
		var data1 = haxe_xml__$Access_NodeAccess.resolve(data,"point_size");
		var default_ = -1.0;
		if(default_ == null) {
			default_ = 0;
		}
		var pty = this._loadHeight(data1,default_,"y");
		if(pty < 1 && ptx < 1) {
			pty = this._loadHeight(haxe_xml__$Access_NodeAccess.resolve(data,"point_size"),-1,"value");
			ptx = pty;
		}
		if(pty > 0) {
			this._pointX = ptx;
		}
		if(ptx > 0) {
			this._pointY = pty;
		}
	}
	,_loadSub: function(node,iteration) {
		if(iteration == null) {
			iteration = 0;
		}
		if(node.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (node.nodeType == null ? "null" : XmlType.toString(node.nodeType)));
		}
		var type = node.nodeName;
		if(node.nodeType != Xml.Document && node.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (node.nodeType == null ? "null" : XmlType.toString(node.nodeType)));
		}
		var this1 = node;
		var obj = this1;
		if(type == "load_if") {
			if(this._loadTest(obj)) {
				if(node.firstElement() != null) {
					var subNode = node.elements();
					while(subNode.hasNext()) {
						var subNode1 = subNode.next();
						this._loadSub(subNode1,iteration + 1);
					}
				}
			}
			return;
		}
		var group_name = "";
		var tempGroup = null;
		var thing_name = flixel_addons_ui_U.xml_name(obj);
		if(haxe_xml__$Access_HasAttribAccess.resolve(obj,"group")) {
			group_name = haxe_xml__$Access_AttribAccess.resolve(obj,"group");
			tempGroup = this.getGroup(group_name);
		}
		var thing = this._loadThing(type,obj);
		if(thing != null) {
			this._loadGlobals(obj,thing);
			if(thing_name != null && thing_name != "") {
				this._asset_index.h[thing_name] = thing;
				thing.name = thing_name;
				var thing_tags = flixel_addons_ui_U.xml_str(obj,"tags");
				if(thing_tags != "") {
					var tagArr = thing_tags.split(",");
					this._addTags(tagArr,thing_name);
				}
			}
			this._loadTooltip(thing,obj);
			if(tempGroup != null) {
				tempGroup.add(thing);
			} else {
				this.add(thing);
			}
			this._loadPosition(obj,thing);
		}
	}
	,_addTags: function(arr,thingName) {
		var _g = 0;
		while(_g < arr.length) {
			var tag = arr[_g];
			++_g;
			var list = null;
			if(!Object.prototype.hasOwnProperty.call(this._tag_index.h,tag)) {
				this._tag_index.h[tag] = [];
			}
			list = this._tag_index.h[tag];
			if(list.indexOf(thingName) == -1) {
				list.push(thingName);
			}
		}
	}
	,_loadGlobals: function(data,thing) {
		if(((thing) instanceof flixel_FlxBasic)) {
			var isVis = flixel_addons_ui_U.xml_bool(data,"visible",true);
			var isActive = flixel_addons_ui_U.xml_bool(data,"active",true);
			var numID = flixel_addons_ui_U.xml_i(data,"num_id");
			thing.visible = isVis;
			thing.active = isActive;
			thing.ID = numID;
			if(((thing) instanceof flixel_FlxSprite)) {
				var alpha = flixel_addons_ui_U.xml_f(data,"alpha",1.0);
				var s = thing;
				s.set_alpha(alpha);
			}
		}
	}
	,_postLoad: function(data) {
		this._postLoaded = true;
		if(data.firstElement() != null) {
			var node = data.elements();
			while(node.hasNext()) {
				var node1 = node.next();
				if(node1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (node1.nodeType == null ? "null" : XmlType.toString(node1.nodeType)));
				}
				var tmp = node1.nodeName.toLowerCase();
				if(node1.nodeType != Xml.Document && node1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Invalid nodeType " + (node1.nodeType == null ? "null" : XmlType.toString(node1.nodeType)));
				}
				var this1 = node1;
				this._postLoadThing(tmp,this1);
			}
		}
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"mode")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"mode");
			while(_g < _g1.length) {
				var mode_node = _g1[_g];
				++_g;
				var is_default = flixel_addons_ui_U.xml_bool(mode_node,"is_default");
				if(is_default) {
					var mode_name = flixel_addons_ui_U.xml_name(mode_node);
					this.setMode(mode_name);
					break;
				}
			}
		}
		if(this._failure_checks != null) {
			var _g = 0;
			var _g1 = this._failure_checks;
			while(_g < _g1.length) {
				var data = _g1[_g];
				++_g;
				if(this._checkFailure(data)) {
					this.failed = true;
					break;
				}
			}
			flixel_addons_ui_U.clearArraySoft(this._failure_checks);
			this._failure_checks = null;
		}
		this._onFinishLoad();
	}
	,_sendTo: function(thing,dir) {
		var group = this.getAssetGroup(null,thing);
		if(group == null) {
			if(this.group.members.indexOf(thing) != -1) {
				group = this;
			} else {
				return;
			}
		}
		if(dir != -1 && dir != 1) {
			return;
		}
		HxOverrides.remove(group.group.members,thing);
		switch(dir) {
		case -1:
			group.group.members.splice(0,0,thing);
			break;
		case 1:
			group.group.members.push(thing);
			break;
		}
	}
	,sendToFront: function(name,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var thing = this.getAsset(name,recursive);
		if(thing != null) {
			this._sendTo(thing,1);
		}
	}
	,sendToBack: function(name,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var thing = this.getAsset(name,recursive);
		if(thing != null) {
			this._sendTo(thing,-1);
		}
	}
	,get_currMode: function() {
		return this._curr_mode;
	}
	,set_currMode: function(m) {
		this.setMode(m);
		return this._curr_mode;
	}
	,setMode: function(mode_name,target_name) {
		if(target_name == null) {
			target_name = "";
		}
		if(this._curr_mode == mode_name) {
			return;
		}
		var mode = this.getMode(mode_name);
		this._curr_mode = mode_name;
		var name = "";
		var thing;
		if(target_name == "") {
			if(mode != null) {
				var xml;
				var node = mode.elements();
				while(node.hasNext()) {
					var node1 = node.next();
					var node2 = this.applyNodeConditionals(node1);
					xml = node2;
					if(xml.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
					}
					var nodeName = xml.nodeName;
					var activeStatus = flixel_addons_ui_U.xml_str(xml,"active") == "" ? null : true;
					if(activeStatus != null) {
						activeStatus = flixel_addons_ui_U.xml_bool(xml,"active");
					}
					if(this._loadTest(node2)) {
						switch(nodeName) {
						case "align":
							this._alignThing(node2);
							break;
						case "change":
							this._changeThing(node2);
							break;
						case "hide":
							this.showThing(flixel_addons_ui_U.xml_name(xml),false,activeStatus);
							break;
						case "position":
							name = flixel_addons_ui_U.xml_name(xml);
							thing = this.getAsset(name);
							if(thing != null) {
								this._loadPosition(node2,thing);
							}
							break;
						case "show":
							this.showThing(flixel_addons_ui_U.xml_name(xml),true,activeStatus);
							break;
						}
					}
				}
			}
		} else {
			var target = this.getAsset(target_name);
			if(target != null && ((target) instanceof flixel_addons_ui_FlxUI)) {
				var targetUI = js_Boot.__cast(target , flixel_addons_ui_FlxUI);
				targetUI.setMode(mode_name,"");
			}
		}
	}
	,showThing: function(name,visibleStatus,activeStatus) {
		if(visibleStatus == null) {
			visibleStatus = true;
		}
		if(name.indexOf(",") != -1) {
			var names = name.split(",");
			var _g = 0;
			while(_g < names.length) {
				var each_name = names[_g];
				++_g;
				var thing = this.getAsset(each_name);
				if(thing != null) {
					thing.set_visible(visibleStatus);
					if(activeStatus != null) {
						thing.set_active(activeStatus);
					}
				} else {
					var group = this.getGroup(each_name);
					if(group != null) {
						group.set_visible(visibleStatus);
						if(activeStatus != null) {
							group.set_active(activeStatus);
						}
					}
				}
			}
		} else if(name != "*") {
			var thing = this.getAsset(name);
			if(thing != null) {
				thing.set_visible(visibleStatus);
				if(activeStatus != null) {
					thing.set_active(activeStatus);
				}
			} else {
				var group = this.getGroup(name);
				if(group != null) {
					group.set_visible(visibleStatus);
					if(activeStatus != null) {
						group.set_active(activeStatus);
					}
				}
			}
		} else {
			var asset_name = haxe_ds_StringMap.keysIterator(this._asset_index.h);
			while(asset_name.hasNext()) {
				var asset_name1 = asset_name.next();
				if(asset_name1 != "*") {
					this.showThing(asset_name1,visibleStatus,activeStatus);
				}
			}
		}
	}
	,getGroup: function(key,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var tempGroup = this._group_index.h[key];
		if(tempGroup == null && recursive && this._superIndexUI != null) {
			return this._superIndexUI.getGroup(key,recursive);
		}
		return tempGroup;
	}
	,getFlxText: function(key,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var asset = this.getAsset(key,recursive);
		if(asset != null) {
			if(((asset) instanceof flixel_text_FlxText)) {
				return js_Boot.__cast(asset , flixel_text_FlxText);
			}
		}
		return null;
	}
	,getAllAssets: function() {
		var arr = [];
		var key = haxe_ds_StringMap.keysIterator(this._asset_index.h);
		while(key.hasNext()) {
			var key1 = key.next();
			arr.push(this.getAsset(key1));
		}
		return arr;
	}
	,getAssetKeys: function() {
		var arr = [];
		var key = haxe_ds_StringMap.keysIterator(this._asset_index.h);
		while(key.hasNext()) {
			var key1 = key.next();
			arr.push(key1);
		}
		return arr;
	}
	,hasAsset: function(key,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		if(Object.prototype.hasOwnProperty.call(this._asset_index.h,key)) {
			return true;
		}
		if(recursive && this._superIndexUI != null) {
			return this._superIndexUI.hasAsset(key,recursive);
		}
		return false;
	}
	,getAsset: function(key,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var asset = this._asset_index.h[key];
		if(asset == null && recursive && this._superIndexUI != null) {
			return this._superIndexUI.getAsset(key,recursive);
		}
		return asset;
	}
	,getAssetsWithTag: function(tag) {
		if(Object.prototype.hasOwnProperty.call(this._tag_index.h,tag)) {
			var list = this._tag_index.h[tag];
			if(list == null || list.length == 0) {
				return null;
			}
			var arr = [];
			var _g = 0;
			while(_g < list.length) {
				var key = list[_g];
				++_g;
				var widget = this.getAsset(key);
				if(widget != null) {
					arr.push(widget);
				}
			}
			return arr;
		}
		return null;
	}
	,getAssetGroup: function(key,thing) {
		if(thing == null && (key == null || key == "")) {
			return null;
		}
		if(thing == null) {
			thing = this.getAsset(key);
		}
		if(thing == null) {
			return null;
		}
		var key = haxe_ds_StringMap.keysIterator(this._group_index.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var g = this._group_index.h[key1];
			if(g.group.members.indexOf(thing) != -1) {
				return g;
			}
		}
		return null;
	}
	,getMode: function(key,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var mode = this._mode_index.h[key];
		if(mode == null && recursive && this._superIndexUI != null) {
			return this._superIndexUI.getMode(key,recursive);
		}
		return mode;
	}
	,getLabelStyleFromDefinition: function(key,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var definition = this.getDefinition(key,recursive);
		if(definition != null) {
			var fontDef = this._loadFontDef(definition);
			var align = flixel_addons_ui_U.xml_str(definition,"align");
			if(align == "") {
				align = null;
			}
			var color = this._loadColor(definition);
			var border = this._loadBorder(definition);
			return new flixel_addons_ui_ButtonLabelStyle(fontDef,align,color,border);
		}
		return null;
	}
	,getLabelStyleFromData: function(data) {
		var fontDef = this._loadFontDef(data);
		var align = flixel_addons_ui_U.xml_str(data,"align");
		if(align == "") {
			align = null;
		}
		var color = this._loadColor(data);
		var border = this._loadBorder(data);
		return new flixel_addons_ui_ButtonLabelStyle(fontDef,align,color,border);
	}
	,checkVariable: function(key,otherValue,type,op,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		if(op == null) {
			op = "==";
		}
		var variable = this.getVariable(key,recursive);
		if(variable != null) {
			return flixel_addons_ui_U.compareStringVars(variable,otherValue,type,op);
		} else {
			return flixel_addons_ui_U.compareStringVars("",otherValue,type,op);
		}
	}
	,setVariable: function(key,value) {
		this._variable_index.h[key] = value;
	}
	,getVariable: function(key,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var variable = this._variable_index.h[key];
		if(variable == null && recursive && this._superIndexUI != null) {
			variable = this._superIndexUI.getVariable(key,recursive);
		}
		return variable;
	}
	,getDefinition: function(key,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var definition = this._definition_index.h[key];
		if(definition == null && recursive && this._superIndexUI != null) {
			definition = this._superIndexUI.getDefinition(key,recursive);
		}
		if(definition == null) {
			if(key.indexOf("include:") == -1) {
				definition = this.getDefinition("include:" + key,recursive);
			}
		}
		return definition;
	}
	,screenWidth: function() {
		if(this.hasAsset("screen")) {
			return this.getAsset("screen").get_width() | 0;
		}
		return flixel_FlxG.width;
	}
	,screenHeight: function() {
		if(this.hasAsset("height")) {
			return this.getAsset("screen").get_height() | 0;
		}
		return flixel_FlxG.height;
	}
	,_postLoaded: null
	,_pointX: null
	,_pointY: null
	,_group_index: null
	,_asset_index: null
	,_tag_index: null
	,_definition_index: null
	,_variable_index: null
	,_mode_index: null
	,_curr_mode: null
	,_ptr: null
	,_superIndexUI: null
	,_safe_input_delay_elapsed: null
	,_failure_checks: null
	,_assetsToCleanUp: null
	,_scaledAssets: null
	,replaceInGroup: function(original,replace,splice) {
		if(splice == null) {
			splice = false;
		}
		if(this._group_index != null) {
			var key = haxe_ds_StringMap.keysIterator(this._group_index.h);
			while(key.hasNext()) {
				var key1 = key.next();
				var tempGroup = this._group_index.h[key1];
				if(tempGroup.group.members != null) {
					var i = 0;
					var _g = 0;
					var _g1 = tempGroup.group.members;
					while(_g < _g1.length) {
						var member = _g1[_g];
						++_g;
						if(member != null) {
							if(member == original) {
								tempGroup.group.members[i] = replace;
								if(replace == null) {
									if(splice) {
										tempGroup.group.members.splice(i,1);
										--i;
									}
								}
								return;
							}
							++i;
						}
					}
				}
			}
		}
		if(this.group.members != null) {
			var i = 0;
			var _g = 0;
			var _g1 = this.group.members;
			while(_g < _g1.length) {
				var member = _g1[_g];
				++_g;
				if(member != null) {
					if(member == original) {
						this.group.members[i] = replace;
						if(replace == null) {
							if(splice) {
								this.group.members.splice(i,1);
								--i;
							}
						}
						return;
					}
				}
				++i;
			}
		}
	}
	,applyNodeConditionals: function(info) {
		if(haxe_xml__$Access_HasNodeAccess.resolve(info,"locale") || haxe_xml__$Access_HasNodeAccess.resolve(info,"haxedef")) {
			var x = Xml.parse(haxe_xml_Printer.print(info)).firstElement();
			if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
			}
			var this1 = x;
			info = this1;
			if(haxe_xml__$Access_HasNodeAccess.resolve(info,"locale")) {
				info = this.applyNodeChanges(info,"locale");
			}
			if(haxe_xml__$Access_HasNodeAccess.resolve(info,"haxedef")) {
				info = this.applyNodeChanges(info,"haxedef");
			}
			if(haxe_xml__$Access_HasNodeAccess.resolve(info,"window")) {
				info = this.applyNodeChanges(info,"window");
			}
		}
		return info;
	}
	,applyNodeChanges: function(data,nodeName) {
		var nodeValue = "";
		if(nodeName == "locale") {
			if(this._ptr_tongue == null) {
				return data;
			}
			nodeValue = this._ptr_tongue.locale.toLowerCase();
		}
		var haxedef = false;
		if(nodeName == "haxedef") {
			haxedef = true;
		}
		if(nodeName == "window") {
			nodeValue = flixel_FlxG.width + "," + flixel_FlxG.height;
		}
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,nodeName);
		while(_g < _g1.length) {
			var cNode = _g1[_g];
			++_g;
			var cname = flixel_addons_ui_U.xml_name(cNode);
			if(haxedef) {
				nodeValue = "";
				if(flixel_addons_ui_U.checkHaxedef(cname)) {
					nodeValue = cname;
				}
			}
			if(cname == nodeValue) {
				if(haxe_xml__$Access_HasNodeAccess.resolve(cNode,"change")) {
					var _g2 = 0;
					var _g3 = haxe_xml__$Access_NodeListAccess.resolve(cNode,"change");
					while(_g2 < _g3.length) {
						var change = _g3[_g2];
						++_g2;
						var att = change.attributes();
						while(att.hasNext()) {
							var att1 = att.next();
							var value = change.get(att1);
							data.set(att1,value);
						}
					}
				}
			}
		}
		return data;
	}
	,loadThing: function(type,data) {
		return this._loadThing(type,data);
	}
	,_loadThingGetInfo: function(data) {
		var _this = data;
		if(_this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (_this.nodeType == null ? "null" : XmlType.toString(_this.nodeType)));
		}
		var nodeName = _this.nodeName;
		var defaultDef = this.getDefinition("default:" + nodeName);
		var info = null;
		if(defaultDef != null) {
			info = flixel_addons_ui_FlxUI.consolidateData(data,defaultDef,true);
		}
		if(info == null) {
			info = data;
		}
		var use_def = flixel_addons_ui_U.xml_str(info,"use_def",true);
		var definition = null;
		if(use_def != "") {
			definition = this.getDefinition(use_def);
		}
		info = flixel_addons_ui_FlxUI.consolidateData(info,definition);
		info = this.applyNodeConditionals(info);
		if(this._loadTest(info) == false) {
			return null;
		}
		return info;
	}
	,_loadTooltip: function(thing,data) {
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"tooltip")) {
			var tt = this._loadTooltipData(haxe_xml__$Access_NodeAccess.resolve(data,"tooltip"));
			var state = flixel_addons_ui_FlxUI.getLeafUIState();
			if(((thing) instanceof flixel_addons_ui_FlxUICheckBox)) {
				var check = thing;
				state.tooltips.add(check.button,tt);
			} else {
				state.tooltips.add(thing,tt);
			}
		}
	}
	,_loadTooltipData: function(tNode) {
		var tt = { title : "", body : "", anchor : null, style : { titleFormat : null, bodyFormat : null, titleBorder : null, bodyBorder : null, titleOffset : null, bodyOffset : null, titleWidth : -1, bodyWidth : -1, background : null, borderSize : -1, borderColor : null, arrow : null, autoSizeVertical : null, autoSizeHorizontal : null, leftPadding : -1, rightPadding : -1, topPadding : -1, bottomPadding : -1}};
		var defaultDef = this.getDefinition("default:tooltip");
		if(defaultDef != null) {
			tNode = flixel_addons_ui_FlxUI.consolidateData(tNode,defaultDef,true);
		}
		if(haxe_xml__$Access_HasAttribAccess.resolve(tNode,"use_def")) {
			var defStr = flixel_addons_ui_U.xml_str(tNode,"use_def",true);
			var def = this.getDefinition(defStr);
			if(def != null) {
				tNode = flixel_addons_ui_FlxUI.consolidateData(tNode,def,true);
			}
		}
		if(haxe_xml__$Access_HasAttribAccess.resolve(tNode,"text")) {
			this._loadTooltipText(tNode,"text",tt);
		}
		if(haxe_xml__$Access_HasNodeAccess.resolve(tNode,"title")) {
			this._loadTooltipText(haxe_xml__$Access_NodeAccess.resolve(tNode,"title"),"text",tt);
		}
		if(haxe_xml__$Access_HasNodeAccess.resolve(tNode,"body")) {
			this._loadTooltipText(haxe_xml__$Access_NodeAccess.resolve(tNode,"body"),"text",tt);
		}
		tt.anchor = this._loadAnchor(tNode);
		this._loadTooltipStyle(tNode,tt);
		return tt;
	}
	,_loadTooltipStyle: function(node,tt) {
		tt.style.background = flixel_addons_ui_U.xml_color(node,"background");
		tt.style.borderSize = flixel_addons_ui_U.xml_i(node,"border",-1);
		tt.style.borderColor = flixel_addons_ui_U.xml_color(node,"border_color");
		var tmp;
		if(haxe_xml__$Access_HasAttribAccess.resolve(node,"arrow")) {
			var data = node;
			var str = "";
			if(data.get("arrow") != null) {
				str = data.get("arrow");
				if(str == "" || str == null) {
					str = "";
				} else {
					str = flixel_addons_ui_U.gfx(str);
					try {
						if(!openfl_utils_Assets.exists(str,"IMAGE")) {
							throw haxe_Exception.thrown("couldn't load bmp \"" + "arrow" + "\"");
						}
					} catch( _g ) {
						haxe_NativeStackTrace.lastError = _g;
						if(typeof(haxe_Exception.caught(_g).unwrap()) != "string") {
							throw _g;
						}
					}
				}
			}
			tmp = str;
		} else {
			tmp = null;
		}
		tt.style.arrow = tmp;
		tt.style.autoSizeHorizontal = flixel_addons_ui_U.xml_bool(node,"auto_size_horizontal",true);
		tt.style.autoSizeVertical = flixel_addons_ui_U.xml_bool(node,"auto_size_vertical",true);
		var padAll = this._loadHeight(node,-1,"pad_all") | 0;
		if(padAll != -1) {
			tt.style.leftPadding = tt.style.rightPadding = tt.style.topPadding = tt.style.bottomPadding = padAll;
		} else {
			var tmp = this._loadWidth(node,0,"pad_left") | 0;
			tt.style.leftPadding = tmp;
			var tmp = this._loadWidth(node,0,"pad_right") | 0;
			tt.style.rightPadding = tmp;
			var tmp = this._loadHeight(node,0,"pad_top") | 0;
			tt.style.topPadding = tmp;
			var tmp = this._loadHeight(node,0,"pad_bottom") | 0;
			tt.style.bottomPadding = tmp;
		}
	}
	,_loadTooltipText: function(node,fieldName,tt) {
		var nodeName;
		if(node.nodeType == Xml.Document) {
			nodeName = "Document";
		} else {
			if(node.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (node.nodeType == null ? "null" : XmlType.toString(node.nodeType)));
			}
			nodeName = node.nodeName;
		}
		var text = this._loadString(node,fieldName);
		var offset = new flixel_math_FlxPoint(this._loadWidth(node,0,"x"),this._loadHeight(node,0,"y"));
		if(haxe_xml__$Access_HasAttribAccess.resolve(node,"use_def")) {
			var use_def = flixel_addons_ui_U.xml_str(node,"use_def",true);
			var the_def = this.getDefinition(use_def);
			if(the_def != null) {
				node = flixel_addons_ui_FlxUI.consolidateData(node,the_def);
			}
		}
		var border = this._loadBorder(node);
		var format = this._loadFontDef(node);
		var color = flixel_addons_ui_U.xml_color(node,"color",true,-16777216);
		format.format.color = color;
		var W = this._loadWidth(node,-1,"width") | 0;
		switch(nodeName) {
		case "body":
			if(text != "") {
				tt.body = text;
			}
			tt.style.bodyOffset = offset;
			tt.style.bodyFormat = format;
			tt.style.bodyWidth = W;
			tt.style.bodyBorder = border;
			break;
		case "title":case "tooltip":
			if(text != "") {
				tt.title = text;
			}
			tt.style.titleOffset = offset;
			tt.style.titleFormat = format;
			tt.style.titleWidth = W;
			tt.style.titleBorder = border;
			break;
		default:
		}
	}
	,_loadAnchor: function(data) {
		var xOff = this._loadWidth(data,0,"x");
		var yOff = this._loadHeight(data,0,"y");
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"anchor")) {
			var xSide = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"anchor"),"x",true,"right");
			var ySide = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"anchor"),"y",true,"top");
			var xFlush = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"anchor"),"x-flush",true,"left");
			var yFlush = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"anchor"),"y-flush",true,"top");
			return new flixel_addons_ui_Anchor(xOff,yOff,xSide,ySide,xFlush,yFlush);
		}
		return null;
	}
	,_loadThing: function(type,data) {
		var info = this._loadThingGetInfo(data);
		if(info == null) {
			return null;
		}
		switch(type) {
		case "align":
			this._alignThing(info,true);
			return null;
		case "bar":
			return this._loadBar(info);
		case "box":
			return this._loadBox(info);
		case "button":
			return this._loadButton(info);
		case "button_toggle":
			return this._loadButton(info,true,true);
		case "change":
			this._changeThing(info);
			return null;
		case "checkbox":
			return this._loadCheckBox(info);
		case "failure":
			if(this._failure_checks == null) {
				this._failure_checks = [];
			}
			this.unparentXML(info);
			this._failure_checks.push(info);
			return null;
		case "input_text":
			return this._loadInputText(info);
		case "line":
			return this._loadLine(info);
		case "default":case "group":case "include":case "inject":case "load_if":case "mode":
			return null;
		case "chrome":case "nine_slice":case "nine_slice_sprite":case "nineslice":case "nineslicesprite":
			return this._load9SliceSprite(info);
		case "num_stepper":case "numeric_stepper":case "numstepper":
			return this._loadNumericStepper(info);
		case "position":
			this.name = flixel_addons_ui_U.xml_name(info);
			var thing = this.getAsset(this.name);
			if(thing != null) {
				this._loadPosition(info,thing);
			}
			return null;
		case "dropdown":case "dropdown_menu":case "pulldown":case "pulldown_menu":
			return this._loadDropDownMenu(info);
		case "radio_group":
			return this._loadRadioGroup(info);
		case "region":
			return this._loadRegion(info);
		case "sprite":
			return this._loadSprite(info);
		case "tab_menu":
			return this._loadTabMenu(info);
		case "text":
			return this._loadText(info);
		case "tile_test":
			return this._loadTileTest(info);
		case "layout":case "ui":
			return this._loadLayout(info);
		default:
			var result = this._ptr.getRequest("ui_get:" + type,this,info,[data]);
			return result;
		}
	}
	,_loadX: function(data,default_) {
		if(default_ == null) {
			default_ = 0;
		}
		return this._loadWidth(data,default_,"x");
	}
	,_loadY: function(data,default_) {
		if(default_ == null) {
			default_ = 0;
		}
		return this._loadHeight(data,default_,"y");
	}
	,_loadScale: function(data,default_,str) {
		if(str == null) {
			str = "scale";
		}
		if(default_ == null) {
			default_ = 1.0;
		}
		return this._loadHeight(data,default_,str,"none");
	}
	,_loadScaleX: function(data,default_) {
		if(default_ == null) {
			default_ = 1.0;
		}
		return this._loadWidth(data,default_,"scale_x","none");
	}
	,_loadScaleY: function(data,default_) {
		if(default_ == null) {
			default_ = 1.0;
		}
		return this._loadHeight(data,default_,"scale_y","none");
	}
	,_loadWidth: function(data,default_,str,defaultRound) {
		if(defaultRound == null) {
			defaultRound = "";
		}
		if(str == null) {
			str = "width";
		}
		if(default_ == null) {
			default_ = 10;
		}
		var ws = flixel_addons_ui_U.xml_str(data,str,true,default_ == null ? "null" : "" + default_);
		var round = this.getRound(data,defaultRound);
		return this.doRound(this._getDataSize("w",ws,default_),round);
	}
	,_loadHeight: function(data,default_,str,defaultRound) {
		if(defaultRound == null) {
			defaultRound = "";
		}
		if(str == null) {
			str = "height";
		}
		if(default_ == null) {
			default_ = 10;
		}
		var hs = flixel_addons_ui_U.xml_str(data,str,true,default_ == null ? "null" : "" + default_);
		var round = this.getRound(data,defaultRound);
		return this.doRound(this._getDataSize("h",hs,default_),round);
	}
	,_loadCompass: function(data,str) {
		if(str == null) {
			str = "resize_point";
		}
		var cs = flixel_addons_ui_U.xml_str(data,str,true,"nw");
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		var fp = point;
		switch(cs) {
		case "c":case "center":case "m":case "mid":
			fp.set_x(0.5);
			fp.set_y(0.5);
			break;
		case "ll":case "sw":
			fp.set_x(0);
			fp.set_y(1);
			break;
		case "n":case "u":
			fp.set_x(0.5);
			fp.set_y(0);
			break;
		case "nw":case "ul":
			fp.set_x(0);
			fp.set_y(0);
			break;
		case "e":case "r":
			fp.set_x(1);
			fp.set_y(0.5);
			break;
		case "s":
			fp.set_x(0.5);
			fp.set_y(1);
			break;
		case "lr":case "se":
			fp.set_x(1);
			fp.set_y(1);
			break;
		case "ne":case "ur":
			fp.set_x(1);
			fp.set_y(0);
			break;
		case "w":
			fp.set_x(0.5);
			fp.set_y(0);
			break;
		}
		return fp;
	}
	,_changeParamsThing: function(data) {
		var name = flixel_addons_ui_U.xml_name(data);
		var thing = this.getAsset(name);
		if(thing == null) {
			return;
		}
		if(!js_Boot.__implements(thing,flixel_addons_ui_interfaces_IHasParams)) {
			return;
		}
		var ihp = thing;
		var params = null;
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
			params = [];
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"param");
			while(_g < _g1.length) {
				var param = _g1[_g];
				++_g;
				if(haxe_xml__$Access_HasAttribAccess.resolve(param,"type") && haxe_xml__$Access_HasAttribAccess.resolve(param,"value")) {
					var type = haxe_xml__$Access_AttribAccess.resolve(param,"type");
					type = type.toLowerCase();
					var valueStr = haxe_xml__$Access_AttribAccess.resolve(param,"value");
					var value = valueStr;
					var sort = flixel_addons_ui_U.xml_i(param,"sort",-1);
					switch(type) {
					case "bool":case "boolean":
						var str = new String(valueStr);
						str = str.toLowerCase();
						if(str == "true" || str == "1") {
							value = true;
						} else {
							value = false;
						}
						break;
					case "color":case "hex":
						var return_val = flixel_util_FlxColor.fromString(valueStr);
						if(return_val == null) {
							throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + valueStr);
						}
						value = return_val;
						break;
					case "float":
						value = parseFloat(valueStr);
						break;
					case "int":
						value = Std.parseInt(valueStr);
						break;
					case "string":
						value = new String(valueStr);
						break;
					}
					params.push({ sort : sort, value : value});
				}
			}
			params.sort(flixel_addons_ui_FlxUI.sortParams);
			var _g = 0;
			var _g1 = params.length;
			while(_g < _g1) {
				var i = _g++;
				params[i] = params[i].value;
			}
		}
		ihp.set_params(params);
	}
	,_changeThing: function(data) {
		var name = flixel_addons_ui_U.xml_name(data);
		var thing = this.getAsset(name);
		if(thing == null) {
			return;
		}
		var new_width = -1;
		var new_height = -1;
		var context = "";
		var code = "";
		var attribute = data.attributes();
		while(attribute.hasNext()) {
			var attribute1 = attribute.next();
			switch(attribute1) {
			case "height":
				new_height = this._loadHeight(data);
				break;
			case "label":
				var label = flixel_addons_ui_U.xml_str(data,"label");
				context = flixel_addons_ui_U.xml_str(data,"context",true,"ui");
				code = flixel_addons_ui_U.xml_str(data,"code",true,"");
				label = this.getText(label,context,true,code);
				if(js_Boot.__implements(thing,flixel_addons_ui_interfaces_ILabeled)) {
					var b = thing;
					b.getLabel().set_text(label);
				}
				break;
			case "text":
				if(((thing) instanceof flixel_addons_ui_FlxUIText)) {
					var text = flixel_addons_ui_U.xml_str(data,"text");
					context = flixel_addons_ui_U.xml_str(data,"context",true,"ui");
					var t = thing;
					code = flixel_addons_ui_U.xml_str(data,"code",true,"");
					t.set_text(this.getText(text,context,true,code));
				}
				break;
			case "width":
				new_width = this._loadWidth(data);
				break;
			}
		}
		if(js_Boot.__implements(thing,flixel_addons_ui_interfaces_IResizable)) {
			var ir = thing;
			if(new_width != -1 || new_height != -1) {
				if(new_width == -1) {
					new_width = ir.get_width();
				}
				if(new_height == -1) {
					new_height = ir.get_height();
				}
				ir.resize(new_width,new_height);
			}
		}
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
			if(js_Boot.__implements(thing,flixel_addons_ui_interfaces_IHasParams)) {
				var ihp = thing;
				var params = null;
				if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
					params = [];
					var _g = 0;
					var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"param");
					while(_g < _g1.length) {
						var param = _g1[_g];
						++_g;
						if(haxe_xml__$Access_HasAttribAccess.resolve(param,"type") && haxe_xml__$Access_HasAttribAccess.resolve(param,"value")) {
							var type = haxe_xml__$Access_AttribAccess.resolve(param,"type");
							type = type.toLowerCase();
							var valueStr = haxe_xml__$Access_AttribAccess.resolve(param,"value");
							var value = valueStr;
							var sort = flixel_addons_ui_U.xml_i(param,"sort",-1);
							switch(type) {
							case "bool":case "boolean":
								var str = new String(valueStr);
								str = str.toLowerCase();
								if(str == "true" || str == "1") {
									value = true;
								} else {
									value = false;
								}
								break;
							case "color":case "hex":
								var return_val = flixel_util_FlxColor.fromString(valueStr);
								if(return_val == null) {
									throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + valueStr);
								}
								value = return_val;
								break;
							case "float":
								value = parseFloat(valueStr);
								break;
							case "int":
								value = Std.parseInt(valueStr);
								break;
							case "string":
								value = new String(valueStr);
								break;
							}
							params.push({ sort : sort, value : value});
						}
					}
					params.sort(flixel_addons_ui_FlxUI.sortParams);
					var _g = 0;
					var _g1 = params.length;
					while(_g < _g1) {
						var i = _g++;
						params[i] = params[i].value;
					}
				}
				ihp.set_params(params);
			}
		}
	}
	,_alignThing: function(data,suppressError) {
		if(suppressError == null) {
			suppressError = false;
		}
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"objects")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"objects");
			while(_g < _g1.length) {
				var objectNode = _g1[_g];
				++_g;
				var objects = flixel_addons_ui_U.xml_str(objectNode,"value",true,"").split(",");
				var axis = flixel_addons_ui_U.xml_str(data,"axis",true);
				if(axis != "horizontal" && axis != "vertical") {
					throw new openfl_errors_Error("FlxUI._alignThing(): axis must be \"horizontal\" or \"vertical\"!");
				}
				var spacing = -1;
				if(axis == "horizontal") {
					spacing = this._getDataSize("w",flixel_addons_ui_U.xml_str(data,"spacing",true),-1);
				} else {
					spacing = this._getDataSize("h",flixel_addons_ui_U.xml_str(data,"spacing",true),-1);
				}
				var resize = flixel_addons_ui_U.xml_bool(data,"resize");
				var grow = flixel_addons_ui_U.xml_bool(data,"grow",true);
				var shrink = flixel_addons_ui_U.xml_bool(data,"shrink",true);
				var X = -1;
				var Y = -1;
				if(Y == null) {
					Y = 0;
				}
				if(X == null) {
					X = 0;
				}
				var point = flixel_math_FlxPoint._pool.get().set(X,Y);
				point._inPool = false;
				var bounds = point;
				var boundsError = "";
				if(haxe_xml__$Access_HasNodeAccess.resolve(data,"bounds")) {
					if(axis == "horizontal") {
						bounds.set_x(this._getDataSize("w",flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"bounds"),"left"),-1));
						bounds.set_y(this._getDataSize("w",flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"bounds"),"right"),-1));
					} else if(axis == "vertical") {
						bounds.set_x(this._getDataSize("h",flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"bounds"),"top"),-1));
						bounds.set_y(this._getDataSize("h",flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"bounds"),"bottom"),-1));
					}
				}
				if(bounds.x != -1 && bounds.y != -1) {
					if(bounds.y <= bounds.x) {
						boundsError = "bounds max must be > bounds min! (max=" + bounds.y + " min=" + bounds.x + ")";
					}
				} else {
					boundsError = "missing bound!";
				}
				if(boundsError == "") {
					this._doAlign(objects,axis,spacing,resize,bounds,grow,shrink);
				}
				if(haxe_xml__$Access_HasNodeAccess.resolve(data,"anchor") || haxe_xml__$Access_HasAttribAccess.resolve(data,"x") || haxe_xml__$Access_HasAttribAccess.resolve(data,"y")) {
					var _g2 = 0;
					while(_g2 < objects.length) {
						var object = objects[_g2];
						++_g2;
						var thing = this.getAsset(object);
						this._loadPosition(data,thing);
					}
				} else {
					var tmp = boundsError != "";
				}
			}
		} else {
			throw new openfl_errors_Error("FlxUI._alignThing(): <objects> node not found!");
		}
	}
	,_doAlign: function(objects,axis,spacing,resize,bounds,allowGrow,allowShrink) {
		if(allowShrink == null) {
			allowShrink = true;
		}
		if(allowGrow == null) {
			allowGrow = true;
		}
		var total_spacing = 0;
		var total_size = 0;
		var bound_range = bounds.y - bounds.x;
		var spaces = objects.length - 1;
		var space_size = 0;
		var object_size = 0;
		var size_prop = "width";
		var pos_prop = "x";
		if(axis == "vertical") {
			size_prop = "height";
			pos_prop = "y";
		}
		var _g = 0;
		while(_g < objects.length) {
			var nameStr = objects[_g];
			++_g;
			var widget = this.getAsset(nameStr);
			if(widget != null) {
				var theval = 0;
				switch(size_prop) {
				case "height":
					theval = widget.get_height();
					break;
				case "width":
					theval = widget.get_width();
					break;
				}
				total_size += theval;
			}
		}
		if(resize == false) {
			total_spacing = bound_range - total_size;
			space_size = total_spacing / spaces;
		} else {
			space_size = spacing;
			total_spacing = spacing * spaces;
			object_size = (bound_range - total_spacing) / objects.length;
		}
		object_size = object_size | 0;
		space_size = space_size | 0;
		var last_pos = bounds.x;
		var _g = 0;
		while(_g < objects.length) {
			var nameStr = objects[_g];
			++_g;
			var widget = this.getAsset(nameStr);
			if(widget != null) {
				var pos = last_pos;
				if(!resize) {
					switch(size_prop) {
					case "height":
						object_size = widget.get_height();
						break;
					case "width":
						object_size = widget.get_width();
						break;
					}
				} else if(js_Boot.__implements(widget,flixel_addons_ui_interfaces_IResizable)) {
					var allow = true;
					var widgetr = widget;
					if(axis == "vertical") {
						if(object_size > widgetr.get_width()) {
							allow = allowGrow;
						} else if(object_size < widgetr.get_width()) {
							allow = allowShrink;
						}
						if(allow) {
							widgetr.resize(widgetr.get_width(),object_size);
						}
					} else if(axis == "horizontal") {
						if(object_size > widgetr.get_height()) {
							allow = allowGrow;
						} else if(object_size < widgetr.get_height()) {
							allow = allowShrink;
						}
						if(allow) {
							widgetr.resize(object_size,widgetr.get_height());
						}
					}
				}
				last_pos = pos + object_size + space_size;
				switch(pos_prop) {
				case "x":
					widget.set_x(pos);
					break;
				case "y":
					widget.set_y(pos);
					break;
				}
			}
		}
	}
	,_checkFailure: function(data) {
		var target = flixel_addons_ui_U.xml_str(data,"target",true);
		var property = flixel_addons_ui_U.xml_str(data,"property",true);
		var compare = flixel_addons_ui_U.xml_str(data,"compare",true);
		var value = flixel_addons_ui_U.xml_str(data,"value",true);
		var thing = this.getAsset(target);
		if(thing == null) {
			return false;
		}
		var prop_f = 0;
		var val_f = 0;
		var p = flixel_addons_ui_U.perc_to_float(value);
		switch(property) {
		case "h":case "height":
			prop_f = thing.get_height();
			break;
		case "w":case "width":
			prop_f = thing.get_width();
			break;
		}
		if(isNaN(p)) {
			if(flixel_addons_ui_U.isStrNum(value)) {
				val_f = parseFloat(value);
			} else {
				return false;
			}
		} else {
			switch(property) {
			case "h":case "height":
				val_f = p * this.screenHeight();
				break;
			case "w":case "width":
				val_f = p * this.screenWidth();
				break;
			}
		}
		var return_val = false;
		switch(compare) {
		case "<":
			if(prop_f < val_f) {
				this.failed_by = val_f - prop_f;
				return_val = true;
			}
			break;
		case "<=":
			if(prop_f <= val_f) {
				this.failed_by = val_f - prop_f;
				return_val = true;
			}
			break;
		case "=":case "==":
			if(prop_f == val_f) {
				this.failed_by = Math.abs(prop_f - val_f);
				return_val = true;
			}
			break;
		case ">":
			if(prop_f > val_f) {
				this.failed_by = prop_f - val_f;
				return_val = true;
			}
			break;
		case ">=":
			if(prop_f >= val_f) {
				this.failed_by = prop_f - val_f;
				return_val = true;
			}
			break;
		}
		return return_val;
	}
	,_resizeThing: function(fo_r,bounds) {
		var do_resize = false;
		var ww = fo_r.get_width();
		var hh = fo_r.get_height();
		if(ww < bounds.min_width) {
			do_resize = true;
			ww = bounds.min_width;
		} else if(ww > bounds.max_width) {
			do_resize = true;
			ww = bounds.max_width;
		}
		if(hh < bounds.min_height) {
			do_resize = true;
			hh = bounds.min_height;
		} else if(hh > bounds.max_height) {
			do_resize = true;
			hh = bounds.max_height;
		}
		if(do_resize) {
			fo_r.resize(ww,hh);
		}
	}
	,_postLoadThing: function(type,data) {
		if(type == "load_if") {
			if(this._loadTest(data)) {
				if(data.firstElement() != null) {
					var subNode = data.elements();
					while(subNode.hasNext()) {
						var subNode1 = subNode.next();
						if(subNode1.nodeType != Xml.Element) {
							throw haxe_Exception.thrown("Bad node type, expected Element but found " + (subNode1.nodeType == null ? "null" : XmlType.toString(subNode1.nodeType)));
						}
						var nodeType = subNode1.nodeName.toLowerCase();
						if(subNode1.nodeType != Xml.Document && subNode1.nodeType != Xml.Element) {
							throw haxe_Exception.thrown("Invalid nodeType " + (subNode1.nodeType == null ? "null" : XmlType.toString(subNode1.nodeType)));
						}
						var this1 = subNode1;
						this._postLoadThing(nodeType,this1);
					}
				}
			}
			return;
		}
		if(this._loadTest(data) == false) {
			return;
		}
		var name = flixel_addons_ui_U.xml_name(data);
		var thing = this.getAsset(name);
		var isGroup = type == "group";
		if(isGroup) {
			thing = this.getGroup(name);
		}
		if(type == "align") {
			this._alignThing(data);
		}
		if(type == "change") {
			this._changeThing(data);
		}
		if(type == "position") {
			this._loadPosition(data,thing);
			return;
		}
		if(type == "cursor") {
			this._loadCursor(data);
		}
		if(thing == null && !isGroup) {
			return;
		}
		if(!isGroup) {
			var use_def = flixel_addons_ui_U.xml_str(data,"use_def",true);
			var definition = null;
			if(use_def != "") {
				definition = this.getDefinition(use_def);
			}
			if(js_Boot.__implements(thing,flixel_addons_ui_interfaces_IResizable)) {
				var ww = this._getDataSize("w",flixel_addons_ui_U.xml_str(data,"width"));
				var hh = this._getDataSize("h",flixel_addons_ui_U.xml_str(data,"height"));
				if(ww == 0 || ww == thing.get_width()) {
					ww = null;
				}
				if(hh == 0 || hh == thing.get_height()) {
					hh = null;
				}
				var bounds = this.calcMaxMinSize(data);
				if(bounds != null) {
					if(ww != null) {
						if(ww < bounds.min_width) {
							ww = bounds.min_width;
						}
						if(ww > bounds.max_width) {
							ww = bounds.max_width;
						}
						bounds.min_width = bounds.max_width = ww;
					}
					if(hh != null) {
						if(hh < bounds.min_height) {
							hh = bounds.min_height;
						}
						if(hh > bounds.max_height) {
							hh = bounds.max_height;
						}
						bounds.min_height = bounds.max_height = hh;
					}
					this._resizeThing(js_Boot.__cast(thing , flixel_addons_ui_interfaces_IResizable),bounds);
				}
			}
			var X = -thing.x;
			var Y = -thing.y;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _g = thing;
			_g.set_x(_g.x + X);
			var _g = thing;
			_g.set_y(_g.y + Y);
			this._loadPosition(data,thing);
		}
		var send_to = flixel_addons_ui_U.xml_str(data,"send_to",true,"");
		if(send_to != "") {
			switch(send_to) {
			case "back":case "bottom":
				this._sendTo(thing,-1);
				break;
			case "front":case "top":
				this._sendTo(thing,1);
				break;
			}
		}
		if(!isGroup && ((thing) instanceof flixel_addons_ui_FlxUI)) {
			var fui_thing = thing;
			if(fui_thing._postLoaded == false) {
				fui_thing.getEvent("post_load",this,null);
			}
		}
	}
	,_loadTileTest: function(data) {
		var tiles_w = flixel_addons_ui_U.xml_i(data,"tiles_w",2);
		var tiles_h = flixel_addons_ui_U.xml_i(data,"tiles_h",2);
		var w = this._loadWidth(data);
		var h = this._loadHeight(data);
		var bounds = this.calcMaxMinSize(data);
		if(w < bounds.min_width) {
			w = bounds.min_width;
		}
		if(h < bounds.min_height) {
			h = bounds.min_height;
		}
		var tileWidth = w / tiles_w | 0;
		var tileHeight = h / tiles_h | 0;
		if(tileWidth < tileHeight) {
			tileHeight = tileWidth;
		} else if(tileHeight < tileWidth) {
			tileWidth = tileHeight;
		}
		var totalw = tileWidth * tiles_w;
		var totalh = tileHeight * tiles_h;
		if(totalw > bounds.max_width) {
			tileWidth = bounds.max_width / tiles_w | 0;
		}
		if(totalh > bounds.max_height) {
			tileHeight = bounds.max_height / tiles_h | 0;
		}
		if(tileWidth < tileHeight) {
			tileHeight = tileWidth;
		} else if(tileHeight < tileWidth) {
			tileWidth = tileHeight;
		}
		if(tileWidth < 2) {
			tileWidth = 2;
		}
		if(tileHeight < 2) {
			tileHeight = 2;
		}
		var color1 = flixel_util_FlxColor.fromString(flixel_addons_ui_U.xml_str(data,"color1",true,"0x808080"));
		var color2 = flixel_util_FlxColor.fromString(flixel_addons_ui_U.xml_str(data,"color2",true,"0xc4c4c4"));
		var baseTileSize = flixel_addons_ui_U.xml_i(data,"base_tile_size",-1);
		var floorToEven = flixel_addons_ui_U.xml_bool(data,"floor_to_even",false);
		var ftt = new flixel_addons_ui_FlxUITileTest(0,0,tileWidth,tileHeight,tiles_w,tiles_h,color1,color2,floorToEven);
		ftt.baseTileSize = baseTileSize;
		return ftt;
	}
	,_loadString: function(data,attributeName) {
		var string = flixel_addons_ui_U.xml_str(data,attributeName);
		var context = flixel_addons_ui_U.xml_str(data,"context",true,"ui");
		var code = flixel_addons_ui_U.xml_str(data,"code",true,"");
		string = this.getText(string,context,true,code);
		return string;
	}
	,_loadText: function(data) {
		var text = flixel_addons_ui_U.xml_str(data,"text");
		var context = flixel_addons_ui_U.xml_str(data,"context",true,"ui");
		var code = flixel_addons_ui_U.xml_str(data,"code",true,"");
		text = this.getText(text,context,true,code);
		var W = this._loadWidth(data,100) | 0;
		var H = this._loadHeight(data,-1) | 0;
		var the_font = this._loadFontFace(data);
		var input = flixel_addons_ui_U.xml_bool(data,"input");
		if(input) {
			throw new openfl_errors_Error("FlxUI._loadText(): <text> with input has been deprecated. Use <input_text> instead.");
		}
		var align = flixel_addons_ui_U.xml_str(data,"align");
		if(align == "") {
			align = null;
		}
		var size = this._loadHeight(data,8,"size","floor") | 0;
		var color = this._loadColor(data);
		var border = this._loadBorder(data);
		var ftu = new flixel_addons_ui_FlxUIText(0,0,W,text,size);
		ftu.setFormat(the_font,size,color,align);
		border.apply(ftu);
		ftu.drawFrame();
		var ft = ftu;
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
			var params = null;
			if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
				params = [];
				var _g = 0;
				var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"param");
				while(_g < _g1.length) {
					var param = _g1[_g];
					++_g;
					if(haxe_xml__$Access_HasAttribAccess.resolve(param,"type") && haxe_xml__$Access_HasAttribAccess.resolve(param,"value")) {
						var type = haxe_xml__$Access_AttribAccess.resolve(param,"type");
						type = type.toLowerCase();
						var valueStr = haxe_xml__$Access_AttribAccess.resolve(param,"value");
						var value = valueStr;
						var sort = flixel_addons_ui_U.xml_i(param,"sort",-1);
						switch(type) {
						case "bool":case "boolean":
							var str = new String(valueStr);
							str = str.toLowerCase();
							if(str == "true" || str == "1") {
								value = true;
							} else {
								value = false;
							}
							break;
						case "color":case "hex":
							var return_val = flixel_util_FlxColor.fromString(valueStr);
							if(return_val == null) {
								throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + valueStr);
							}
							value = return_val;
							break;
						case "float":
							value = parseFloat(valueStr);
							break;
						case "int":
							value = Std.parseInt(valueStr);
							break;
						case "string":
							value = new String(valueStr);
							break;
						}
						params.push({ sort : sort, value : value});
					}
				}
				params.sort(flixel_addons_ui_FlxUI.sortParams);
				var _g = 0;
				var _g1 = params.length;
				while(_g < _g1) {
					var i = _g++;
					params[i] = params[i].value;
				}
			}
			var params1 = params;
			var ihp = ft;
			ihp.set_params(params1);
		}
		if(H > 0 && ft.get_height() != H) {
			if(js_Boot.__implements(ft,flixel_addons_ui_interfaces_IResizable)) {
				var r = ft;
				r.resize(r.get_width(),H);
			}
		}
		ftu.set_text(" ");
		ftu.set_text(text);
		return ft;
	}
	,_loadInputText: function(data) {
		var text = flixel_addons_ui_U.xml_str(data,"text");
		var context = flixel_addons_ui_U.xml_str(data,"context",true,"ui");
		var code = flixel_addons_ui_U.xml_str(data,"code",true,"");
		text = this.getText(text,context,true,code);
		var W = this._loadWidth(data,100) | 0;
		var H = this._loadHeight(data,-1) | 0;
		var the_font = this._loadFontFace(data);
		var align = flixel_addons_ui_U.xml_str(data,"align");
		if(align == "") {
			align = null;
		}
		var size = this._loadHeight(data,8,"size") | 0;
		var color = this._loadColor(data);
		var border = this._loadBorder(data);
		var str = flixel_addons_ui_U.xml_str(data,"background",true,"0x00000000");
		var safe = true;
		var default_color = 0;
		if(default_color == null) {
			default_color = 0;
		}
		if(safe == null) {
			safe = false;
		}
		var return_val = flixel_util_FlxColor.fromString(str);
		if(return_val == null) {
			if(!safe) {
				throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + str);
			} else {
				return_val = default_color;
			}
		}
		var backgroundColor = return_val;
		var passwordMode = flixel_addons_ui_U.xml_bool(data,"password_mode");
		var fti = new flixel_addons_ui_FlxUIInputText(0,0,W,text,size,color,backgroundColor);
		fti.set_passwordMode(passwordMode);
		var force_case = flixel_addons_ui_U.xml_str(data,"force_case",true,"");
		var forceCase;
		switch(force_case) {
		case "lower":case "lower_case":case "lowercase":
			forceCase = 2;
			break;
		case "l":case "u":
			throw new openfl_errors_Error("FlxUI._loadInputText(): 1 letter values have been deprecated (force_case attribute).");
		case "upper":case "upper_case":case "uppercase":
			forceCase = 1;
			break;
		default:
			forceCase = 0;
		}
		var filter = flixel_addons_ui_U.xml_str(data,"filter",true,"");
		var filterMode;
		while(filter.indexOf("_") != -1) filter = StringTools.replace(filter,"_","");
		switch(filter) {
		case "a":case "an":case "n":
			throw new openfl_errors_Error("FlxUI._loadInputText(): 1 letter values have been deprecated (filter attribute).");
		case "alpha":case "onlyalpha":
			filterMode = 1;
			break;
		case "alphanum":case "alphanumeric":case "onlyalphanumeric":
			filterMode = 3;
			break;
		case "num":case "numeric":case "onlynumeric":
			filterMode = 2;
			break;
		default:
			filterMode = 0;
		}
		fti.setFormat(the_font,size,color,align);
		fti.set_forceCase(forceCase);
		fti.set_filterMode(filterMode);
		border.apply(fti);
		fti.drawFrame();
		var ft = fti;
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
			var params = null;
			if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
				params = [];
				var _g = 0;
				var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"param");
				while(_g < _g1.length) {
					var param = _g1[_g];
					++_g;
					if(haxe_xml__$Access_HasAttribAccess.resolve(param,"type") && haxe_xml__$Access_HasAttribAccess.resolve(param,"value")) {
						var type = haxe_xml__$Access_AttribAccess.resolve(param,"type");
						type = type.toLowerCase();
						var valueStr = haxe_xml__$Access_AttribAccess.resolve(param,"value");
						var value = valueStr;
						var sort = flixel_addons_ui_U.xml_i(param,"sort",-1);
						switch(type) {
						case "bool":case "boolean":
							var str = new String(valueStr);
							str = str.toLowerCase();
							if(str == "true" || str == "1") {
								value = true;
							} else {
								value = false;
							}
							break;
						case "color":case "hex":
							var return_val = flixel_util_FlxColor.fromString(valueStr);
							if(return_val == null) {
								throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + valueStr);
							}
							value = return_val;
							break;
						case "float":
							value = parseFloat(valueStr);
							break;
						case "int":
							value = Std.parseInt(valueStr);
							break;
						case "string":
							value = new String(valueStr);
							break;
						}
						params.push({ sort : sort, value : value});
					}
				}
				params.sort(flixel_addons_ui_FlxUI.sortParams);
				var _g = 0;
				var _g1 = params.length;
				while(_g < _g1) {
					var i = _g++;
					params[i] = params[i].value;
				}
			}
			var params1 = params;
			var ihp = ft;
			ihp.set_params(params1);
		}
		if(H > 0 && ft.get_height() != H) {
			if(js_Boot.__implements(ft,flixel_addons_ui_interfaces_IResizable)) {
				var r = ft;
				r.resize(r.get_width(),H);
			}
		}
		return ft;
	}
	,_loadRadioGroup: function(data) {
		var frg = null;
		var dot_src = flixel_addons_ui_U.xml_str(data,"dot_src",true);
		var radio_src = flixel_addons_ui_U.xml_str(data,"radio_src",true);
		var labels = [];
		var names = [];
		var W = this._loadWidth(data,11,"radio_width");
		var H = this._loadHeight(data,11,"radio_height");
		var scrollH = this._loadHeight(data,0,"height");
		var scrollW = this._loadHeight(data,0,"width");
		var labelW = this._loadWidth(data,100,"label_width");
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"radio");
		while(_g < _g1.length) {
			var radioNode = _g1[_g];
			++_g;
			var name = flixel_addons_ui_U.xml_name(radioNode);
			var label = flixel_addons_ui_U.xml_str(radioNode,"label");
			var context = flixel_addons_ui_U.xml_str(radioNode,"context",true,"ui");
			var code = flixel_addons_ui_U.xml_str(radioNode,"code",true,"");
			label = this.getText(label,context,true,code);
			names.push(name);
			labels.push(label);
		}
		names.reverse();
		labels.reverse();
		var y_space = this._loadHeight(data,25,"y_space");
		var params = null;
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
			params = [];
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"param");
			while(_g < _g1.length) {
				var param = _g1[_g];
				++_g;
				if(haxe_xml__$Access_HasAttribAccess.resolve(param,"type") && haxe_xml__$Access_HasAttribAccess.resolve(param,"value")) {
					var type = haxe_xml__$Access_AttribAccess.resolve(param,"type");
					type = type.toLowerCase();
					var valueStr = haxe_xml__$Access_AttribAccess.resolve(param,"value");
					var value = valueStr;
					var sort = flixel_addons_ui_U.xml_i(param,"sort",-1);
					switch(type) {
					case "bool":case "boolean":
						var str = new String(valueStr);
						str = str.toLowerCase();
						if(str == "true" || str == "1") {
							value = true;
						} else {
							value = false;
						}
						break;
					case "color":case "hex":
						var return_val = flixel_util_FlxColor.fromString(valueStr);
						if(return_val == null) {
							throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + valueStr);
						}
						value = return_val;
						break;
					case "float":
						value = parseFloat(valueStr);
						break;
					case "int":
						value = Std.parseInt(valueStr);
						break;
					case "string":
						value = new String(valueStr);
						break;
					}
					params.push({ sort : sort, value : value});
				}
			}
			params.sort(flixel_addons_ui_FlxUI.sortParams);
			var _g = 0;
			var _g1 = params.length;
			while(_g < _g1) {
				var i = _g++;
				params[i] = params[i].value;
			}
		}
		var params1 = params;
		var radio_asset = null;
		if(radio_src != "") {
			radio_asset = flixel_addons_ui_U.gfx(radio_src);
		} else if(haxe_xml__$Access_HasNodeAccess.resolve(data,"box")) {
			if(flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"box"),"slice9") != "") {
				radio_asset = this._load9SliceSprite(haxe_xml__$Access_NodeAccess.resolve(data,"box"));
			} else {
				radio_asset = this._loadSprite(haxe_xml__$Access_NodeAccess.resolve(data,"box"));
			}
		}
		var dot_asset = null;
		if(dot_src != "") {
			dot_asset = flixel_addons_ui_U.gfx(dot_src);
		} else if(haxe_xml__$Access_HasNodeAccess.resolve(data,"dot")) {
			if(flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"dot"),"slice9") != "") {
				dot_asset = this._load9SliceSprite(haxe_xml__$Access_NodeAccess.resolve(data,"dot"));
			} else {
				dot_asset = this._loadSprite(haxe_xml__$Access_NodeAccess.resolve(data,"dot"));
			}
		}
		var prevOffset = null;
		var nextOffset = null;
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"button")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"button");
			while(_g < _g1.length) {
				var btnNode = _g1[_g];
				++_g;
				var name = flixel_addons_ui_U.xml_name(btnNode);
				if(name == "previous" || name == "prev") {
					var X = flixel_addons_ui_U.xml_f(btnNode,"x");
					var Y = flixel_addons_ui_U.xml_f(btnNode,"y");
					if(Y == null) {
						Y = 0;
					}
					if(X == null) {
						X = 0;
					}
					var point = flixel_math_FlxPoint._pool.get().set(X,Y);
					point._inPool = false;
					prevOffset = point;
				} else if(name == "next") {
					var X1 = flixel_addons_ui_U.xml_f(btnNode,"x");
					var Y1 = flixel_addons_ui_U.xml_f(btnNode,"y");
					if(Y1 == null) {
						Y1 = 0;
					}
					if(X1 == null) {
						X1 = 0;
					}
					var point1 = flixel_math_FlxPoint._pool.get().set(X1,Y1);
					point1._inPool = false;
					nextOffset = point1;
				}
			}
		}
		frg = new flixel_addons_ui_FlxUIRadioGroup(0,0,names,labels,null,y_space,W,H,labelW,null,prevOffset,nextOffset);
		frg.set_params(params1);
		if(radio_asset != "" && radio_asset != null) {
			frg.loadGraphics(radio_asset,dot_asset);
		}
		var text_x = this._loadWidth(data,0,"text_x") | 0;
		var text_y = this._loadHeight(data,0,"text_y") | 0;
		var radios = frg.getRadios();
		var i = 0;
		var styleSet = false;
		var radioList = data.elementsNamed("radio");
		var radioNode = null;
		var _g = 0;
		var _g1 = radios.length;
		while(_g < _g1) {
			var k = _g++;
			var fo = radios[radios.length - 1 - k];
			radioNode = radioList.hasNext() ? radioList.next() : null;
			if(fo != null) {
				if(((fo) instanceof flixel_addons_ui_FlxUICheckBox)) {
					var fc = js_Boot.__cast(fo , flixel_addons_ui_FlxUICheckBox);
					var t = this.formatButtonText(data,fc);
					if(t != null && styleSet == false) {
						var fd = flixel_addons_ui_FontDef.copyFromFlxText(t);
						var bd = new flixel_addons_ui_BorderDef(t.borderStyle,t.borderColor,t.borderSize,t.borderQuality);
						frg.set_activeStyle(new flixel_addons_ui_CheckStyle(16777215,fd,flixel_text_FlxTextAlign.fromOpenFL(t._defaultFormat.align),t.color,bd));
						styleSet = true;
					}
					fc.set_textX(text_x);
					fc.set_textY(text_y);
					++i;
					if(radioNode != null) {
						if(radioNode.nodeType != Xml.Document && radioNode.nodeType != Xml.Element) {
							throw haxe_Exception.thrown("Invalid nodeType " + (radioNode.nodeType == null ? "null" : XmlType.toString(radioNode.nodeType)));
						}
						var this1 = radioNode;
						this._loadTooltip(fc,this1);
					}
				}
			}
		}
		if(scrollW != 0) {
			frg.fixedSize = true;
			frg.set_width(scrollW);
		}
		if(scrollH != 0) {
			frg.fixedSize = true;
			frg.set_height(scrollH);
		}
		return frg;
	}
	,_loadCheckBox: function(data) {
		var fc = null;
		var label = flixel_addons_ui_U.xml_str(data,"label");
		var context = flixel_addons_ui_U.xml_str(data,"context",true,"ui");
		var code = flixel_addons_ui_U.xml_str(data,"code",true,"");
		var checked = flixel_addons_ui_U.xml_bool(data,"checked",false);
		label = this.getText(label,context,true,code);
		var labelW = this._loadWidth(data,100,"label_width");
		var check_src = flixel_addons_ui_U.xml_str(data,"check_src",true);
		var box_src = flixel_addons_ui_U.xml_str(data,"box_src",true);
		var params = null;
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
			params = [];
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"param");
			while(_g < _g1.length) {
				var param = _g1[_g];
				++_g;
				if(haxe_xml__$Access_HasAttribAccess.resolve(param,"type") && haxe_xml__$Access_HasAttribAccess.resolve(param,"value")) {
					var type = haxe_xml__$Access_AttribAccess.resolve(param,"type");
					type = type.toLowerCase();
					var valueStr = haxe_xml__$Access_AttribAccess.resolve(param,"value");
					var value = valueStr;
					var sort = flixel_addons_ui_U.xml_i(param,"sort",-1);
					switch(type) {
					case "bool":case "boolean":
						var str = new String(valueStr);
						str = str.toLowerCase();
						if(str == "true" || str == "1") {
							value = true;
						} else {
							value = false;
						}
						break;
					case "color":case "hex":
						var return_val = flixel_util_FlxColor.fromString(valueStr);
						if(return_val == null) {
							throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + valueStr);
						}
						value = return_val;
						break;
					case "float":
						value = parseFloat(valueStr);
						break;
					case "int":
						value = Std.parseInt(valueStr);
						break;
					case "string":
						value = new String(valueStr);
						break;
					}
					params.push({ sort : sort, value : value});
				}
			}
			params.sort(flixel_addons_ui_FlxUI.sortParams);
			var _g = 0;
			var _g1 = params.length;
			while(_g < _g1) {
				var i = _g++;
				params[i] = params[i].value;
			}
		}
		var params1 = params;
		var box_asset = null;
		var check_asset = null;
		if(box_src != "") {
			box_asset = flixel_addons_ui_U.gfx(box_src);
		} else if(haxe_xml__$Access_HasNodeAccess.resolve(data,"box")) {
			if(flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"box"),"slice9") != "") {
				box_asset = this._load9SliceSprite(haxe_xml__$Access_NodeAccess.resolve(data,"box"));
			} else {
				box_asset = this._loadSprite(haxe_xml__$Access_NodeAccess.resolve(data,"box"));
			}
		}
		if(check_src != "") {
			check_asset = flixel_addons_ui_U.gfx(check_src);
		} else if(haxe_xml__$Access_HasNodeAccess.resolve(data,"check")) {
			if(flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"check"),"slice9") != "") {
				check_asset = this._load9SliceSprite(haxe_xml__$Access_NodeAccess.resolve(data,"check"));
			} else {
				check_asset = this._loadSprite(haxe_xml__$Access_NodeAccess.resolve(data,"check"));
			}
		}
		fc = new flixel_addons_ui_FlxUICheckBox(0,0,box_asset,check_asset,label,labelW,params1);
		this.formatButtonText(data,fc);
		var text_x = this._loadWidth(data,0,"text_x") | 0;
		var text_y = this._loadHeight(data,0,"text_y") | 0;
		fc.set_textX(text_x);
		fc.set_textY(text_y);
		fc.set_text(label);
		fc.set_checked(checked);
		return fc;
	}
	,_loadDropDownMenu: function(data) {
		var fud = null;
		var label = flixel_addons_ui_U.xml_str(data,"label");
		var context = flixel_addons_ui_U.xml_str(data,"context",true,"ui");
		var code = flixel_addons_ui_U.xml_str(data,"code",true,"");
		label = this.getText(label,context,true,code);
		var back_def = flixel_addons_ui_U.xml_str(data,"back_def",true);
		var panel_def = flixel_addons_ui_U.xml_str(data,"panel_def",true);
		var button_def = flixel_addons_ui_U.xml_str(data,"button_def",true);
		var label_def = flixel_addons_ui_U.xml_str(data,"label_def",true);
		var back_asset = null;
		var panel_asset = null;
		var button_asset = null;
		var label_asset = null;
		if(back_def != "") {
			back_asset = this._loadSprite(this.getDefinition(back_def));
		}
		if(panel_def != "") {
			panel_asset = this._load9SliceSprite(this.getDefinition(panel_def));
		}
		if(button_def != "") {
			try {
				button_asset = this._loadButton(this.getDefinition(button_def),false,false);
			} catch( _g ) {
				if(((haxe_Exception.caught(_g)) instanceof openfl_errors_Error)) {
					button_asset = null;
				} else {
					throw _g;
				}
			}
		}
		if(label_def != "") {
			try {
				label_asset = this._loadText(this.getDefinition(label_def));
			} catch( _g ) {
				if(((haxe_Exception.caught(_g)) instanceof openfl_errors_Error)) {
					label_asset = null;
				} else {
					throw _g;
				}
			}
			if(label_asset != null && label != "") {
				label_asset.set_text(label);
			}
		}
		var asset_list = null;
		var data_list = null;
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"data")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"data");
			while(_g < _g1.length) {
				var dataNode = _g1[_g];
				++_g;
				if(data_list == null) {
					data_list = [];
				}
				var namel = new flixel_addons_ui_StrNameLabel(flixel_addons_ui_U.xml_str(dataNode,"name",true),flixel_addons_ui_U.xml_str(dataNode,"label"));
				data_list.push(namel);
			}
		} else if(haxe_xml__$Access_HasNodeAccess.resolve(data,"asset")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"asset");
			while(_g < _g1.length) {
				var assetNode = _g1[_g];
				++_g;
				if(asset_list == null) {
					asset_list = [];
				}
				var def_name = flixel_addons_ui_U.xml_str(assetNode,"def",true);
				var name = flixel_addons_ui_U.xml_name(assetNode);
				var asset = null;
				try {
					asset = this._loadButton(this.getDefinition(def_name),false);
				} catch( _g2 ) {
					if(!((haxe_Exception.caught(_g2)) instanceof openfl_errors_Error)) {
						throw _g2;
					}
				}
				if(asset != null) {
					asset.name = name;
					if(asset_list == null) {
						asset_list = [];
					}
					asset_list.push(asset);
				}
			}
		}
		var header = new flixel_addons_ui_FlxUIDropDownHeader(120,back_asset,label_asset,button_asset);
		fud = new flixel_addons_ui_FlxUIDropDownMenu(0,0,data_list,null,header,panel_asset,asset_list);
		return fud;
	}
	,_loadTest: function(data) {
		var result = true;
		var tmp;
		if(data.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(data.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (data.nodeType == null ? "null" : XmlType.toString(data.nodeType)));
			}
			tmp = data.nodeName;
		}
		if(tmp == "load_if") {
			result = this._loadTestSub(data);
			if(result == false) {
				return false;
			}
		}
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"load_if")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"load_if");
			while(_g < _g1.length) {
				var node = _g1[_g];
				++_g;
				var _this = node;
				if(_this.nodeType != Xml.Document && _this.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (_this.nodeType == null ? "null" : XmlType.toString(_this.nodeType)));
				}
				if(_this.children[0] == null) {
					result = this._loadTestSub(node);
					if(result == false) {
						return false;
					}
				}
			}
		}
		return result;
	}
	,_loadTestSub: function(node) {
		var matchValue = flixel_addons_ui_U.xml_bool(node,"is",true);
		var match = matchValue;
		var aspect_ratio = flixel_addons_ui_U.xml_f(node,"aspect_ratio",-1);
		if(aspect_ratio != -1) {
			match = true;
			var screen_ratio = js_Boot.__cast(flixel_FlxG.width , Float) / js_Boot.__cast(flixel_FlxG.height , Float);
			var diff = Math.abs(screen_ratio - aspect_ratio);
			if(haxe_xml__$Access_HasAttribAccess.resolve(node,"tolerance")) {
				var tolerance = flixel_addons_ui_U.xml_f(node,"tolerance",0.1);
				if(diff > tolerance) {
					match = false;
				}
			} else if(haxe_xml__$Access_HasAttribAccess.resolve(node,"tolerance_plus") || haxe_xml__$Access_HasAttribAccess.resolve(node,"tolerance_minus")) {
				var tolerance_minus = flixel_addons_ui_U.xml_f(node,"tolerance_minus",-1);
				var tolerance_plus = flixel_addons_ui_U.xml_f(node,"tolerance_plus",-1);
				if(screen_ratio > aspect_ratio && tolerance_plus != -1) {
					if(diff > tolerance_plus) {
						match = false;
					}
				}
				if(screen_ratio < aspect_ratio && tolerance_minus != -1) {
					if(diff > tolerance_minus) {
						match = false;
					}
				}
			}
			if(match != matchValue) {
				return false;
			}
		}
		var resolution = flixel_addons_ui_U.xml_pt(node,"resolution",null);
		if(resolution != null) {
			match = true;
			var toleranceRes = flixel_addons_ui_U.xml_pt(node,"tolerance",null);
			if(toleranceRes == null) {
				toleranceRes = new flixel_math_FlxPoint(0,0);
			}
			var diffX = Math.abs(resolution.x - flixel_FlxG.width);
			var diffY = Math.abs(resolution.y - flixel_FlxG.height);
			if(diffX > toleranceRes.x || diffY > toleranceRes.y) {
				match = false;
			}
			if(match != matchValue) {
				return false;
			}
		}
		var haxeDef = flixel_addons_ui_U.xml_str(node,"haxedef",true,"");
		var haxeVal = flixel_addons_ui_U.xml_bool(node,"value",true);
		if(haxeDef != "") {
			match = true;
			var defValue = flixel_addons_ui_U.checkHaxedef(haxeDef);
			match = defValue == haxeVal;
			if(match != matchValue) {
				return false;
			}
		}
		var variable = flixel_addons_ui_U.xml_str(node,"variable",false,"");
		var variableType = flixel_addons_ui_U.xml_str(node,"type",true,"string");
		if(variable != "") {
			match = true;
			var varData = this.parseVarValue(variable);
			if(varData != null) {
				match = this.checkVariable(varData.variable,varData.value,variableType,varData.op);
			}
			if(match != matchValue) {
				return false;
			}
		}
		return true;
	}
	,parseVarValue: function(varString) {
		var arr = ["==","=","!=","!==","<",">","<=",">="];
		var temp;
		var _g = 0;
		while(_g < arr.length) {
			var op = arr[_g];
			++_g;
			if(varString.indexOf(op) != -1) {
				temp = varString.split(op);
				if(temp != null && temp.length == 2) {
					return { variable : temp[0], value : temp[1], op : op};
				}
			}
		}
		return null;
	}
	,_loadLayout: function(data) {
		var name = flixel_addons_ui_U.xml_str(data,"name",true);
		var X = this._loadWidth(data,0,"x");
		var Y = this._loadHeight(data,0,"y");
		var _ui = this.createUI(data);
		_ui.set_x(X);
		_ui.set_y(Y);
		_ui.name = name;
		return _ui;
	}
	,addToCleanup: function(str) {
		if(this._assetsToCleanUp == null) {
			return;
		}
		if(this._assetsToCleanUp.indexOf(str) == -1) {
			this._assetsToCleanUp.push(str);
		}
	}
	,addToScaledAssets: function(str) {
		if(this._scaledAssets != null && this._scaledAssets.indexOf(str) == -1) {
			this._scaledAssets.push(str);
		}
	}
	,cleanup: function() {
		var _g = 0;
		var _g1 = this._assetsToCleanUp;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			flixel_FlxG.bitmap.removeByKey(key);
		}
		this._assetsToCleanUp = null;
		this._scaledAssets = null;
	}
	,createUI: function(data) {
		return new flixel_addons_ui_FlxUI(data,this,this,this._ptr_tongue,this.liveFilePath);
	}
	,_loadTabMenu: function(data) {
		var back_def_str = flixel_addons_ui_U.xml_str(data,"back_def");
		var back_def = this.getDefinition(back_def_str);
		if(back_def == null) {
			back_def = data;
		}
		back_def = flixel_addons_ui_FlxUI.consolidateData(back_def,data);
		var back_type = flixel_addons_ui_U.xml_str(data,"back_type",true,"chrome");
		var backSprite;
		switch(back_type) {
		case "region":
			backSprite = new flixel_addons_ui_FlxUIRegion();
			break;
		case "sprite":
			backSprite = this._loadSprite(back_def);
			break;
		default:
			backSprite = this._load9SliceSprite(back_def,"tab_menu");
		}
		var tab_def = null;
		var stretch_tabs = flixel_addons_ui_U.xml_bool(data,"stretch_tabs",false);
		var stackToggled = "front";
		var stackUntoggled = "back";
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"stacking")) {
			stackToggled = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"stacking"),"toggled",true,"front");
			stackUntoggled = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"stacking"),"untoggled",true,"back");
		}
		var tab_spacing_str = flixel_addons_ui_U.xml_str(data,"spacing",true,"");
		var tab_spacing = null;
		if(tab_spacing_str != "") {
			tab_spacing = this._loadWidth(data,0,"spacing");
		}
		var tab_x = this._loadWidth(data,0,"tab_x");
		var tab_y = this._loadHeight(data,0,"tab_y");
		var X = tab_x;
		var Y = tab_y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		var tab_offset = point;
		var tab_def_str = "";
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"tab")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"tab");
			while(_g < _g1.length) {
				var tabNode = _g1[_g];
				++_g;
				var temp = flixel_addons_ui_U.xml_str(tabNode,"use_def");
				if(temp != "") {
					tab_def_str = temp;
				}
			}
			if(tab_def_str != "") {
				tab_def = this.getDefinition(tab_def_str);
			} else {
				tab_def = haxe_xml__$Access_NodeAccess.resolve(data,"tab");
			}
		}
		var list_tabs = [];
		var name = "";
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"tab")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"tab");
			while(_g < _g1.length) {
				var tab_node = _g1[_g];
				++_g;
				name = flixel_addons_ui_U.xml_name(tab_node);
				if(name != "") {
					var label = flixel_addons_ui_U.xml_str(tab_node,"label");
					var context = flixel_addons_ui_U.xml_str(tab_node,"context",true,"ui");
					var code = flixel_addons_ui_U.xml_str(tab_node,"code",true,"");
					label = this.getText(label,context,true,code);
					label = this.getText(label,context,true,code);
					var tab_info = flixel_addons_ui_FlxUI.consolidateData(tab_node,tab_def);
					var tab = this._loadButton(tab_info,true,true,"tab_menu");
					tab.name = name;
					list_tabs.push(tab);
					this._loadTooltip(tab,tab_info);
				}
			}
		}
		if(list_tabs.length > 0) {
			if(tab_def == null || !haxe_xml__$Access_HasNodeAccess.resolve(tab_def,"text")) {
				var _g = 0;
				while(_g < list_tabs.length) {
					var t = list_tabs[_g];
					++_g;
					if(((t) instanceof flixel_addons_ui_FlxUITypedButton)) {
						var tb = t;
						tb.label.set_color(16777215);
						if(((tb.label) instanceof flixel_addons_ui_FlxUIText)) {
							var labelText = tb.label;
							labelText.set_borderStyle(flixel_text_FlxTextBorderStyle.OUTLINE);
							labelText.set_borderColor(0);
							labelText.set_borderSize(1);
							labelText.set_borderQuality(1);
						}
					}
				}
			}
			if(tab_def == null || !haxe_xml__$Access_HasAttribAccess.resolve(tab_def,"width")) {
				stretch_tabs = true;
			}
		}
		var tab_stacking = [stackToggled,stackUntoggled];
		var fg = new flixel_addons_ui_FlxUITabMenu(backSprite,list_tabs,null,tab_offset,stretch_tabs,tab_spacing,tab_stacking);
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"group")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"group");
			while(_g < _g1.length) {
				var group_node = _g1[_g];
				++_g;
				name = flixel_addons_ui_U.xml_name(group_node);
				var _ui = new flixel_addons_ui_FlxUI(group_node,fg,this,this._ptr_tongue);
				if(list_tabs != null && list_tabs.length > 0) {
					var _g2 = _ui;
					_g2.set_y(_g2.y + list_tabs[0].get_height());
				}
				_ui.name = name;
				fg.addGroup(_ui);
			}
		}
		return fg;
	}
	,_loadNumericStepper: function(data,setCallback) {
		if(setCallback == null) {
			setCallback = true;
		}
		var stepSize = flixel_addons_ui_U.xml_f(data,"step",1);
		var defaultValue = flixel_addons_ui_U.xml_f(data,"value",0);
		var min = flixel_addons_ui_U.xml_f(data,"min",0);
		var max = flixel_addons_ui_U.xml_f(data,"max",10);
		var decimals = flixel_addons_ui_U.xml_i(data,"decimals",0);
		var percent = flixel_addons_ui_U.xml_bool(data,"percent");
		var stack = flixel_addons_ui_U.xml_str(data,"stack",true,"");
		if(stack == "") {
			stack = flixel_addons_ui_U.xml_str(data,"stacking",true,"");
		}
		stack = stack.toLowerCase();
		var stacking;
		switch(stack) {
		case "h":case "horizontal":case "horz":
			stacking = 1;
			break;
		case "v":case "vert":case "vertical":
			stacking = 0;
			break;
		default:
			stacking = 1;
		}
		var theText = null;
		var buttPlus = null;
		var buttMinus = null;
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"text")) {
			theText = this._loadThing("text",haxe_xml__$Access_NodeAccess.resolve(data,"text"));
		}
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"plus")) {
			buttPlus = this._loadThing("button",haxe_xml__$Access_NodeAccess.resolve(data,"plus"));
		}
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"minus")) {
			buttMinus = this._loadThing("button",haxe_xml__$Access_NodeAccess.resolve(data,"minus"));
		}
		var ns = new flixel_addons_ui_FlxUINumericStepper(0,0,stepSize,defaultValue,min,max,decimals,stacking,theText,buttPlus,buttMinus,percent);
		if(setCallback) {
			var params = null;
			if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
				params = [];
				var _g = 0;
				var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"param");
				while(_g < _g1.length) {
					var param = _g1[_g];
					++_g;
					if(haxe_xml__$Access_HasAttribAccess.resolve(param,"type") && haxe_xml__$Access_HasAttribAccess.resolve(param,"value")) {
						var type = haxe_xml__$Access_AttribAccess.resolve(param,"type");
						type = type.toLowerCase();
						var valueStr = haxe_xml__$Access_AttribAccess.resolve(param,"value");
						var value = valueStr;
						var sort = flixel_addons_ui_U.xml_i(param,"sort",-1);
						switch(type) {
						case "bool":case "boolean":
							var str = new String(valueStr);
							str = str.toLowerCase();
							if(str == "true" || str == "1") {
								value = true;
							} else {
								value = false;
							}
							break;
						case "color":case "hex":
							var return_val = flixel_util_FlxColor.fromString(valueStr);
							if(return_val == null) {
								throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + valueStr);
							}
							value = return_val;
							break;
						case "float":
							value = parseFloat(valueStr);
							break;
						case "int":
							value = Std.parseInt(valueStr);
							break;
						case "string":
							value = new String(valueStr);
							break;
						}
						params.push({ sort : sort, value : value});
					}
				}
				params.sort(flixel_addons_ui_FlxUI.sortParams);
				var _g = 0;
				var _g1 = params.length;
				while(_g < _g1) {
					var i = _g++;
					params[i] = params[i].value;
				}
			}
			var params1 = params;
			ns.set_params(params1);
		}
		return ns;
	}
	,getResizeRatio: function(data,defaultAxis) {
		if(defaultAxis == null) {
			defaultAxis = 1;
		}
		var str = flixel_addons_ui_U.xml_str(data,"resize_ratio_x",true);
		if(str == "") {
			str = flixel_addons_ui_U.xml_str(data,"resize_ratio_y",true);
			if(str == "") {
				var resize_ratio = flixel_addons_ui_U.xml_f(data,"resize_ratio",-1);
				return new flixel_math_FlxPoint(resize_ratio,defaultAxis);
			} else {
				return new flixel_math_FlxPoint(parseFloat(str),1);
			}
		} else {
			return new flixel_math_FlxPoint(parseFloat(str),0);
		}
	}
	,_loadButton: function(data,setCallback,isToggle,load_code) {
		if(load_code == null) {
			load_code = "";
		}
		if(isToggle == null) {
			isToggle = false;
		}
		if(setCallback == null) {
			setCallback = true;
		}
		var fb = null;
		var color = this._loadColor(data);
		var resize_ratio = flixel_addons_ui_U.xml_f(data,"resize_ratio",-1);
		var resize_point = this._loadCompass(data,"resize_point");
		var resize_label = flixel_addons_ui_U.xml_bool(data,"resize_label",false);
		var label = flixel_addons_ui_U.xml_str(data,"label");
		var sprite = null;
		var toggleSprite = null;
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"sprite")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"sprite");
			while(_g < _g1.length) {
				var spriteNode = _g1[_g];
				++_g;
				var forToggle = isToggle && flixel_addons_ui_U.xml_bool(spriteNode,"toggle");
				if(forToggle) {
					toggleSprite = this._loadThing("sprite",spriteNode);
				} else {
					sprite = this._loadThing("sprite",spriteNode);
				}
			}
		}
		var context = flixel_addons_ui_U.xml_str(data,"context",true,"ui");
		var code = flixel_addons_ui_U.xml_str(data,"code",true,"");
		label = this.getText(label,context,true,code);
		var W = this._loadWidth(data,0,"width") | 0;
		var H = this._loadHeight(data,0,"height") | 0;
		var params = null;
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
			params = [];
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"param");
			while(_g < _g1.length) {
				var param = _g1[_g];
				++_g;
				if(haxe_xml__$Access_HasAttribAccess.resolve(param,"type") && haxe_xml__$Access_HasAttribAccess.resolve(param,"value")) {
					var type = haxe_xml__$Access_AttribAccess.resolve(param,"type");
					type = type.toLowerCase();
					var valueStr = haxe_xml__$Access_AttribAccess.resolve(param,"value");
					var value = valueStr;
					var sort = flixel_addons_ui_U.xml_i(param,"sort",-1);
					switch(type) {
					case "bool":case "boolean":
						var str = new String(valueStr);
						str = str.toLowerCase();
						if(str == "true" || str == "1") {
							value = true;
						} else {
							value = false;
						}
						break;
					case "color":case "hex":
						var return_val = flixel_util_FlxColor.fromString(valueStr);
						if(return_val == null) {
							throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + valueStr);
						}
						value = return_val;
						break;
					case "float":
						value = parseFloat(valueStr);
						break;
					case "int":
						value = Std.parseInt(valueStr);
						break;
					case "string":
						value = new String(valueStr);
						break;
					}
					params.push({ sort : sort, value : value});
				}
			}
			params.sort(flixel_addons_ui_FlxUI.sortParams);
			var _g = 0;
			var _g1 = params.length;
			while(_g < _g1) {
				var i = _g++;
				params[i] = params[i].value;
			}
		}
		var params1 = params;
		if(sprite == null) {
			var useDefaultGraphic = haxe_xml__$Access_HasNodeAccess.resolve(data,"graphic") == false;
			fb = new flixel_addons_ui_FlxUIButton(0,0,label,null,useDefaultGraphic,false,color);
			var fuib = fb;
			fuib._autoCleanup = false;
		} else {
			var tempGroup = null;
			if(label != "") {
				var labelTxt = new flixel_addons_ui_FlxUIText(0,0,80,label,8);
				labelTxt.setFormat(null,8,3355443,"center");
				tempGroup = new flixel_group_FlxTypedSpriteGroup();
				tempGroup.add(sprite);
				tempGroup.add(labelTxt);
				fb = new flixel_addons_ui_FlxUISpriteButton(0,0,tempGroup);
			} else {
				fb = new flixel_addons_ui_FlxUISpriteButton(0,0,sprite);
			}
		}
		fb.resize_ratio = resize_ratio;
		fb.resize_point = resize_point;
		fb.autoResizeLabel = resize_label;
		if(setCallback) {
			fb.set_params(params1);
		}
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"graphic")) {
			var blank = flixel_addons_ui_U.xml_bool(haxe_xml__$Access_NodeAccess.resolve(data,"graphic"),"blank");
			if(blank) {
				fb.loadGraphicSlice9(["","",""],W,H,null,0,resize_ratio);
			} else {
				var graphic_names = null;
				var slice9_names = null;
				var frames = null;
				if(isToggle) {
					graphic_names = ["","","","","",""];
					slice9_names = [null,null,null,null,null,null];
				} else {
					graphic_names = ["","",""];
					slice9_names = [null,null,null];
				}
				var src_w = flixel_addons_ui_U.xml_i(haxe_xml__$Access_NodeAccess.resolve(data,"graphic"),"src_w",0);
				var src_h = flixel_addons_ui_U.xml_i(haxe_xml__$Access_NodeAccess.resolve(data,"graphic"),"src_h",0);
				var tileStr = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"graphic"),"tile",true,"");
				var tile = 0;
				switch(tileStr) {
				case "h":case "horizontal":
					tile = 16;
					break;
				case "v":case "vertical":
					tile = 1;
					break;
				case "all":case "both":case "hv":case "true":case "vh":
					tile = 17;
					break;
				}
				var tile1 = tile;
				var frame_str = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"graphic"),"frames",true);
				if(frame_str != "") {
					frames = [];
					var arr = frame_str.split(",");
					var _g = 0;
					while(_g < arr.length) {
						var numstr = arr[_g];
						++_g;
						frames.push(Std.parseInt(numstr));
					}
				}
				var _g = 0;
				var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"graphic");
				while(_g < _g1.length) {
					var graphicNode = _g1[_g];
					++_g;
					var graphic_name = flixel_addons_ui_U.xml_name(graphicNode);
					var image = flixel_addons_ui_U.xml_str(graphicNode,"image");
					var slice9 = flixel_util_FlxStringUtil.toIntArray(flixel_addons_ui_U.xml_str(graphicNode,"slice9"));
					var tileStr = flixel_addons_ui_U.xml_str(graphicNode,"tile",true,"");
					var tile = 0;
					switch(tileStr) {
					case "h":case "horizontal":
						tile = 16;
						break;
					case "v":case "vertical":
						tile = 1;
						break;
					case "all":case "both":case "hv":case "true":case "vh":
						tile = 17;
						break;
					}
					tile1 = tile;
					var toggleState = flixel_addons_ui_U.xml_bool(graphicNode,"toggle");
					toggleState = toggleState && isToggle;
					var igfx = flixel_addons_ui_U.gfx(image);
					switch(graphic_name) {
					case "all":
						var tilesTall = isToggle ? 6 : 3;
						var temp = null;
						if(src_h != 0) {
							var temp1 = flixel_addons_ui_U.getBmp(igfx);
							tilesTall = temp1.height / src_h | 0;
						}
						if(image != "") {
							graphic_names = [this.loadScaledSrc(graphicNode,"image","scale_src",1,tilesTall)];
						}
						slice9_names = [this.load9SliceSprite_scaleSub(slice9,graphicNode,graphic_names[0],"image")];
						temp = flixel_addons_ui_U.getBmp(graphic_names[0]);
						src_w = temp.width;
						src_h = temp.height / tilesTall | 0;
						break;
					case "active":case "highlight":case "hilight":case "hover":case "over":
						if(image != "") {
							if(!toggleState) {
								graphic_names[1] = this.loadScaledSrc(graphicNode,"image","scale_src");
							} else {
								graphic_names[4] = this.loadScaledSrc(graphicNode,"image","scale_src");
							}
						}
						if(!toggleState) {
							slice9_names[1] = this.load9SliceSprite_scaleSub(slice9,graphicNode,graphic_names[1],"image");
						} else {
							slice9_names[4] = this.load9SliceSprite_scaleSub(slice9,graphicNode,graphic_names[4],"image");
						}
						break;
					case "down":case "pressed":case "pushed":
						if(image != "") {
							if(!toggleState) {
								graphic_names[2] = this.loadScaledSrc(graphicNode,"image","scale_src");
							} else {
								graphic_names[5] = this.loadScaledSrc(graphicNode,"image","scale_src");
							}
						}
						if(!toggleState) {
							slice9_names[2] = this.load9SliceSprite_scaleSub(slice9,graphicNode,graphic_names[2],"image");
						} else {
							slice9_names[5] = this.load9SliceSprite_scaleSub(slice9,graphicNode,graphic_names[5],"image");
						}
						break;
					case "":case "inactive":case "normal":case "up":
						if(image != "") {
							if(!toggleState) {
								graphic_names[0] = this.loadScaledSrc(graphicNode,"image","scale_src");
							} else {
								graphic_names[3] = this.loadScaledSrc(graphicNode,"image","scale_src");
							}
						}
						if(!toggleState) {
							slice9_names[0] = this.load9SliceSprite_scaleSub(slice9,graphicNode,graphic_names[0],"image");
						} else {
							slice9_names[3] = this.load9SliceSprite_scaleSub(slice9,graphicNode,graphic_names[3],"image");
						}
						break;
					}
					if(graphic_names[0] != "") {
						if(graphic_names.length >= 3) {
							if(graphic_names[1] == "") {
								graphic_names[1] = graphic_names[0];
							}
							if(graphic_names[2] == "") {
								graphic_names[2] = graphic_names[1];
							}
							if(graphic_names.length >= 6) {
								if(graphic_names[3] == "") {
									graphic_names[3] = graphic_names[0];
								}
								if(graphic_names[4] == "") {
									graphic_names[4] = graphic_names[1];
								}
								if(graphic_names[5] == "") {
									graphic_names[5] = graphic_names[2];
								}
							}
						}
					}
				}
				fb.loadGraphicSlice9(graphic_names,W,H,slice9_names,tile1,resize_ratio,isToggle,src_w,src_h,frames);
			}
		} else if(load_code == "tab_menu") {
			var graphic_names = ["flixel/flixel-ui/img/tab_back.png","flixel/flixel-ui/img/tab_back.png","flixel/flixel-ui/img/tab_back.png","flixel/flixel-ui/img/tab.png","flixel/flixel-ui/img/tab.png","flixel/flixel-ui/img/tab.png"];
			var slice9_tab = flixel_util_FlxStringUtil.toIntArray("6,6,11,11");
			var slice9_names = [slice9_tab,slice9_tab,slice9_tab,slice9_tab,slice9_tab,slice9_tab];
			if(((fb) instanceof flixel_addons_ui_FlxUIButton)) {
				var fbui = fb;
				fbui.loadGraphicSlice9(graphic_names,W,H,slice9_names,0,resize_ratio,isToggle);
			} else if(((fb) instanceof flixel_addons_ui_FlxUISpriteButton)) {
				var fbuis = fb;
				fbuis.loadGraphicSlice9(graphic_names,W,H,slice9_names,0,resize_ratio,isToggle);
			} else {
				fb.loadGraphicSlice9(graphic_names,W,H,slice9_names,0,resize_ratio,isToggle);
			}
		} else {
			if(W <= 0) {
				W = 80;
			}
			if(H <= 0) {
				H = 20;
			}
			fb.loadGraphicSlice9(null,W,H,null,0,resize_ratio,isToggle);
		}
		if(sprite == null) {
			if(data != null && haxe_xml__$Access_HasNodeAccess.resolve(data,"text")) {
				this.formatButtonText(data,fb);
			} else if(load_code == "tab_menu") {
				fb.up_color = 16777215;
				fb.down_color = 16777215;
				fb.over_color = 16777215;
				fb.up_toggle_color = 16777215;
				fb.down_toggle_color = 16777215;
				fb.over_toggle_color = 16777215;
			} else {
				fb.autoCenterLabel();
			}
		} else {
			fb.autoCenterLabel();
		}
		if(sprite != null && label != "") {
			if(data != null && haxe_xml__$Access_HasNodeAccess.resolve(data,"text")) {
				this.formatButtonText(data,fb);
			}
		}
		var text_x = 0;
		var text_y = 0;
		if(data.get("text_x") != null) {
			text_x = this._loadWidth(data,0,"text_x") | 0;
		} else if(data.get("label_x") != null) {
			text_x = this._loadWidth(data,0,"label_x") | 0;
		}
		if(data.get("text_y") != null) {
			text_y = this._loadHeight(data,0,"text_y") | 0;
		} else if(data.get("label_y") != null) {
			text_y = this._loadHeight(data,0,"label_y") | 0;
		}
		if(((fb) instanceof flixel_addons_ui_FlxUISpriteButton)) {
			var fbs = fb;
			if(((fbs.label) instanceof flixel_group_FlxTypedSpriteGroup)) {
				var g = fbs.label;
				var _g = 0;
				var _g1 = g.group.members;
				while(_g < _g1.length) {
					var sprite1 = _g1[_g];
					++_g;
					if(((sprite1) instanceof flixel_addons_ui_FlxUIText)) {
						var _g2 = sprite1.offset;
						_g2.set_x(_g2.x - text_x);
						var _g3 = sprite1.offset;
						_g3.set_y(_g3.y - text_y);
						break;
					}
				}
			} else {
				var _g = fbs.label.offset;
				_g.set_x(_g.x - text_x);
				var _g = fbs.label.offset;
				_g.set_y(_g.y - text_y);
				if(toggleSprite != null) {
					var _g = toggleSprite.offset;
					_g.set_x(_g.x - text_x);
					var _g = toggleSprite.offset;
					_g.set_y(_g.y - text_y);
				}
			}
		} else {
			var fbu = fb;
			var _g = fbu.label.offset;
			_g.set_x(_g.x - text_x);
			var _g = fbu.label.offset;
			_g.set_y(_g.y - text_y);
		}
		if(sprite != null && toggleSprite != null) {
			fb.set_toggle_label(toggleSprite);
		}
		if(((fb) instanceof flixel_addons_ui_FlxUITypedButton)) {
			var fuitb = fb;
			if(fuitb._assetsToCleanup != null) {
				var _g = 0;
				var _g1 = fuitb._assetsToCleanup;
				while(_g < _g1.length) {
					var key = _g1[_g];
					++_g;
					this.addToCleanup(key);
				}
			}
		}
		return fb;
	}
	,_loadRegion: function(data) {
		var bounds = this.calcMaxMinSize(data);
		var w = this._loadWidth(data) | 0;
		var h = this._loadHeight(data) | 0;
		if(bounds != null) {
			var pt = flixel_addons_ui_U.conformToBounds(new openfl_geom_Point(w,h),bounds);
			w = pt.x | 0;
			h = pt.y | 0;
		}
		var vis = flixel_addons_ui_U.xml_bool(data,"visible",true);
		var reg = new flixel_addons_ui_FlxUIRegion(0,0,w,h);
		reg.set_visible(vis);
		return reg;
	}
	,_load9SliceSprite: function(data,load_code) {
		if(load_code == null) {
			load_code = "";
		}
		var src = "";
		var f9s = null;
		var resize = this.getResizeRatio(data);
		var color = this._loadColor(data);
		var resize_ratio = resize.x;
		var resize_point = this._loadCompass(data,"resize_point");
		var resize_ratio_axis = resize.y | 0;
		var bounds = this.calcMaxMinSize(data);
		var data1 = data;
		var str = "";
		if(data1.get("src") != null) {
			str = data1.get("src");
			if(str == "" || str == null) {
				str = "";
			} else {
				str = flixel_addons_ui_U.gfx(str);
				try {
					if(!openfl_utils_Assets.exists(str,"IMAGE")) {
						throw haxe_Exception.thrown("couldn't load bmp \"" + "src" + "\"");
					}
				} catch( _g ) {
					haxe_NativeStackTrace.lastError = _g;
					if(typeof(haxe_Exception.caught(_g).unwrap()) != "string") {
						throw _g;
					}
				}
			}
		}
		src = str;
		var hasScaledSrc = haxe_xml__$Access_HasNodeAccess.resolve(data,"scale_src");
		if(hasScaledSrc) {
			var origSrc = src;
			src = this.loadScaledSrc(data,"src","scale_src");
			if(src != origSrc) {
				this.addToCleanup(origSrc);
			}
		}
		if(src == "") {
			src = null;
		}
		if(src == null) {
			if(load_code == "tab_menu") {
				src = "flixel/flixel-ui/img/chrome_flat.png";
			}
		}
		var rect_w = this._loadWidth(data) | 0;
		var rect_h = this._loadHeight(data) | 0;
		if(bounds != null) {
			if(rect_w < bounds.min_width) {
				rect_w = bounds.min_width | 0;
			} else if(rect_w > bounds.max_width) {
				rect_w = bounds.max_width;
			}
			if(rect_h < bounds.min_height) {
				rect_h = bounds.min_height | 0;
			} else if(rect_h > bounds.max_height) {
				rect_h = bounds.max_height | 0;
			}
		}
		if(rect_w == 0 || rect_h == 0) {
			return null;
		}
		var rc = new openfl_geom_Rectangle(0,0,rect_w,rect_h);
		var slice9 = flixel_util_FlxStringUtil.toIntArray(flixel_addons_ui_U.xml_str(data,"slice9"));
		var srcId = "";
		var srcGraphic = src;
		if(hasScaledSrc) {
			slice9 = this.load9SliceSprite_scaleSub(slice9,data,src);
			srcId = src;
			srcGraphic = flixel_FlxG.bitmap._cache.h[src];
		}
		var smooth = flixel_addons_ui_U.xml_bool(data,"smooth",false);
		var tileStr = flixel_addons_ui_U.xml_str(data,"tile",true,"");
		var tile = 0;
		switch(tileStr) {
		case "h":case "horizontal":
			tile = 16;
			break;
		case "v":case "vertical":
			tile = 1;
			break;
		case "all":case "both":case "hv":case "true":case "vh":
			tile = 17;
			break;
		}
		var tile1 = tile;
		f9s = new flixel_addons_ui_FlxUI9SliceSprite(0,0,srcGraphic,rc,slice9,tile1,smooth,srcId,resize_ratio,resize_point,resize_ratio_axis,false,color);
		return f9s;
	}
	,load9SliceSprite_scaleSub: function(slice9,data,src,srcString) {
		if(srcString == null) {
			srcString = "src";
		}
		var data1 = data;
		var str = "";
		if(data1.get(srcString) != null) {
			str = data1.get(srcString);
			if(str == "" || str == null) {
				str = "";
			} else {
				str = flixel_addons_ui_U.gfx(str);
				try {
					if(!openfl_utils_Assets.exists(str,"IMAGE")) {
						throw haxe_Exception.thrown("couldn't load bmp \"" + srcString + "\"");
					}
				} catch( _g ) {
					haxe_NativeStackTrace.lastError = _g;
					if(typeof(haxe_Exception.caught(_g).unwrap()) != "string") {
						throw _g;
					}
				}
			}
		}
		var origSrc = str;
		if(src == origSrc) {
			return slice9;
		}
		var srcAsset = flixel_FlxG.bitmap._cache.h[src] != null ? flixel_FlxG.bitmap._cache.h[src].bitmap : null;
		if(srcAsset == null) {
			srcAsset = openfl_utils_Assets.getBitmapData(origSrc);
		}
		var origAsset = openfl_utils_Assets.getBitmapData(origSrc,false);
		var srcScaleFactorX = srcAsset.width / origAsset.width;
		var srcScaleFactorY = srcAsset.height / origAsset.height;
		if(Math.abs(1.0 - srcScaleFactorX) <= 0.001 && Math.abs(1.0 - srcScaleFactorY) <= 0.001) {
			return slice9;
		}
		if(slice9 != null) {
			slice9[0] = slice9[0] * srcScaleFactorX | 0;
			slice9[1] = slice9[1] * srcScaleFactorY | 0;
			var widthDiff = origAsset.width - slice9[2];
			var heightDiff = origAsset.height - slice9[3];
			widthDiff = widthDiff * srcScaleFactorX | 0;
			heightDiff = heightDiff * srcScaleFactorY | 0;
			slice9[2] = srcAsset.width - widthDiff | 0;
			slice9[3] = srcAsset.height - heightDiff | 0;
		}
		return slice9;
	}
	,_loadTileRule: function(data) {
		var tileStr = flixel_addons_ui_U.xml_str(data,"tile",true,"");
		var tile = 0;
		switch(tileStr) {
		case "h":case "horizontal":
			tile = 16;
			break;
		case "v":case "vertical":
			tile = 1;
			break;
		case "all":case "both":case "hv":case "true":case "vh":
			tile = 17;
			break;
		}
		return tile;
	}
	,_loadBox: function(data) {
		var fs = null;
		var thickness = this._loadWidth(data,1,"thickness") | 0;
		var bounds = this.calcMaxMinSize(data);
		if(bounds == null) {
			bounds = { min_width : -Infinity, min_height : -Infinity, max_width : Infinity, max_height : Infinity};
		}
		var W = this._loadWidth(data) | 0;
		var H = this._loadHeight(data) | 0;
		if(bounds != null) {
			if(W < bounds.min_width) {
				W = bounds.min_width | 0;
			} else if(W > bounds.max_width) {
				W = bounds.max_width | 0;
			}
			if(H < bounds.min_height) {
				H = bounds.max_height | 0;
			} else if(H > bounds.max_height) {
				H = bounds.max_height | 0;
			}
		}
		var cstr = flixel_addons_ui_U.xml_str(data,"color",true,"0xff000000");
		var C = 0;
		if(cstr != "") {
			var return_val = flixel_util_FlxColor.fromString(cstr);
			if(return_val == null) {
				throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + cstr);
			}
			C = return_val;
		}
		fs = new flixel_addons_ui_FlxUISprite(0,0);
		var key = W + "x" + H + ":" + C + ":" + thickness;
		if(flixel_FlxG.bitmap._cache.h[key] != null) {
			fs.loadGraphic(key);
		} else {
			fs.makeGraphic(W,H,C,false,key);
			var r = new openfl_geom_Rectangle(thickness,thickness,W - thickness * 2,H - thickness * 2);
			fs.graphic.bitmap.fillRect(r,0);
		}
		return fs;
	}
	,_loadLine: function(data) {
		var axis = flixel_addons_ui_U.xml_str(data,"axis",true,"horizontal");
		var thickness = this._loadWidth(data,-1,"thickness") | 0;
		var bounds = this.calcMaxMinSize(data);
		if(bounds == null) {
			bounds = { min_width : 1, min_height : 1, max_width : Infinity, max_height : Infinity};
		}
		switch(axis) {
		case "h":case "horizontal":case "horz":
			bounds.max_height = thickness;
			bounds.min_height = thickness;
			break;
		case "v":case "vert":case "vertical":
			bounds.max_width = thickness;
			bounds.min_width = thickness;
			break;
		}
		var W = this._loadWidth(data) | 0;
		var H = this._loadHeight(data) | 0;
		if(bounds != null) {
			if(W < bounds.min_width) {
				W = bounds.min_width | 0;
			} else if(W > bounds.max_width) {
				W = bounds.max_width | 0;
			}
			if(H < bounds.min_height) {
				H = bounds.max_height | 0;
			} else if(H > bounds.max_height) {
				H = bounds.max_height | 0;
			}
		}
		var cstr = flixel_addons_ui_U.xml_str(data,"color",true,"0xff000000");
		var C = 0;
		if(cstr != "") {
			var return_val = flixel_util_FlxColor.fromString(cstr);
			if(return_val == null) {
				throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + cstr);
			}
			C = return_val;
		}
		var lineAxis = axis == "horizontal" ? flixel_addons_ui_LineAxis.HORIZONTAL : flixel_addons_ui_LineAxis.VERTICAL;
		var lineLength = lineAxis == flixel_addons_ui_LineAxis.HORIZONTAL ? W : H;
		var lineThickness = thickness != -1 ? thickness : lineAxis == flixel_addons_ui_LineAxis.HORIZONTAL ? H : W;
		var fl = new flixel_addons_ui_FlxUILine(0,0,lineAxis,lineLength,lineThickness,C);
		return fl;
	}
	,_loadBar: function(data) {
		var fb = null;
		var style = { filledColors : null, emptyColors : null, chunkSize : null, gradRotation : null, filledColor : null, emptyColor : null, borderColor : null, filledImgSrc : "", emptyImgSrc : ""};
		var W = this._loadWidth(data,-1) | 0;
		var H = this._loadHeight(data,-1) | 0;
		var direction = flixel_addons_ui_U.xml_str(data,"fill_direction",true);
		var fillDir = flixel_ui_FlxBarFillDirection.TOP_TO_BOTTOM;
		switch(direction) {
		case "bottom_to_top":
			fillDir = flixel_ui_FlxBarFillDirection.BOTTOM_TO_TOP;
			break;
		case "horizontal_inside_out":
			fillDir = flixel_ui_FlxBarFillDirection.HORIZONTAL_INSIDE_OUT;
			break;
		case "horizontal_outside_in":
			fillDir = flixel_ui_FlxBarFillDirection.HORIZONTAL_OUTSIDE_IN;
			break;
		case "left_to_right":
			fillDir = flixel_ui_FlxBarFillDirection.LEFT_TO_RIGHT;
			break;
		case "right_to_left":
			fillDir = flixel_ui_FlxBarFillDirection.RIGHT_TO_LEFT;
			break;
		case "top_to_bottom":
			fillDir = flixel_ui_FlxBarFillDirection.TOP_TO_BOTTOM;
			break;
		case "vertical_inside_out":
			fillDir = flixel_ui_FlxBarFillDirection.VERTICAL_INSIDE_OUT;
			break;
		case "vertical_outside_in":
			fillDir = flixel_ui_FlxBarFillDirection.VERTICAL_OUTSIDE_IN;
			break;
		default:
			fillDir = flixel_ui_FlxBarFillDirection.LEFT_TO_RIGHT;
		}
		var parentRefStr = flixel_addons_ui_U.xml_str(data,"parent_ref",true);
		var parentRef = parentRefStr != "" ? this.getAsset(parentRefStr) : null;
		var variableName = flixel_addons_ui_U.xml_str(data,"variable");
		var value = flixel_addons_ui_U.xml_f(data,"value",-1);
		var min = flixel_addons_ui_U.xml_f(data,"min",0);
		var max = flixel_addons_ui_U.xml_f(data,"max",100);
		if(value == -1) {
			value = max;
		}
		style.borderColor = flixel_addons_ui_U.xml_color(data,"border_color");
		var showBorder = style.borderColor != null;
		style.filledColor = flixel_addons_ui_U.xml_color(data,"filled_color");
		if(style.filledColor == null) {
			style.filledColor = flixel_addons_ui_U.xml_color(data,"color");
		}
		style.emptyColor = flixel_addons_ui_U.xml_color(data,"empty_color");
		style.filledColors = flixel_addons_ui_U.xml_colorArray(data,"filled_colors");
		style.emptyColors = flixel_addons_ui_U.xml_colorArray(data,"empty_colors");
		if(style.filledColors == null) {
			style.filledColors = flixel_addons_ui_U.xml_colorArray(data,"colors");
		}
		style.filledImgSrc = this.loadScaledSrc(data,"src_filled");
		style.emptyImgSrc = this.loadScaledSrc(data,"src_empty");
		if(style.filledImgSrc == "") {
			style.filledImgSrc = this.loadScaledSrc(data,"src");
		}
		style.chunkSize = flixel_addons_ui_U.xml_i(data,"chunk_size",1);
		style.gradRotation = flixel_addons_ui_U.xml_i(data,"rotation",90);
		if(style.filledImgSrc == "" && style.filledColor == null && style.filledColors == null) {
			style.filledColor = -65536;
		}
		if(W == -1 && H == -1) {
			fb = new flixel_addons_ui_FlxUIBar(0,0,fillDir,100,10,parentRef,variableName,min,max,showBorder);
		} else {
			fb = new flixel_addons_ui_FlxUIBar(0,0,fillDir,W,H,parentRef,variableName,min,max,showBorder);
		}
		fb.set_style(style);
		fb.resize(fb.barWidth,fb.barHeight);
		fb.set_value(value);
		return fb;
	}
	,_loadSprite: function(data) {
		var src = "";
		var fs = null;
		src = this.loadScaledSrc(data);
		var bounds = this.calcMaxMinSize(data);
		var resize = this.getResizeRatio(data,-1);
		var resize_ratio = resize.x;
		var resize_ratio_axis = resize.y | 0;
		var resize_point = this._loadCompass(data,"resize_point");
		var W = this._loadWidth(data,-1) | 0;
		var H = this._loadHeight(data,-1) | 0;
		if(bounds != null) {
			if(W < bounds.min_width) {
				W = bounds.min_width | 0;
			} else if(W > bounds.max_width) {
				W = bounds.max_width | 0;
			}
			if(H < bounds.min_height) {
				H = bounds.max_height | 0;
			} else if(H > bounds.max_height) {
				H = bounds.max_height | 0;
			}
		}
		if(src != "") {
			if(W == -1 && H == -1) {
				fs = new flixel_addons_ui_FlxUISprite(0,0,src);
			} else {
				if(resize_ratio != -1 && (W == -1 || H == -1)) {
					if(resize_ratio_axis == -1) {
						if(W == -1) {
							resize_ratio_axis = 0;
						}
						if(H == -1) {
							resize_ratio_axis = 1;
						}
					}
					if(resize_ratio_axis == 1) {
						H = W * (1 / resize_ratio);
					} else if(resize_ratio_axis == 0) {
						W = H * (1 / resize_ratio);
					}
				}
				var smooth = this.loadSmooth(data,true);
				fs = new flixel_addons_ui_FlxUISprite(0,0,flixel_addons_ui_U.loadScaledImage(flixel_addons_ui_U.xml_str(data,"src"),W,H,smooth));
			}
		} else {
			var cstr = flixel_addons_ui_U.xml_str(data,"color");
			var C = 0;
			if(cstr != "") {
				var return_val = flixel_util_FlxColor.fromString(cstr);
				if(return_val == null) {
					throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + cstr);
				}
				C = return_val;
			}
			fs = new flixel_addons_ui_FlxUISprite(0,0);
			fs.makeGraphic(W,H,C);
		}
		fs.set_resize_point(resize_point);
		fs.set_resize_ratio(resize_ratio);
		fs.resize_ratio_axis = resize_ratio_axis;
		return fs;
	}
	,loadSmooth: function(scaleNode,defaultValue) {
		var defaultStr = defaultValue ? "true" : "false";
		var smoothStr = flixel_addons_ui_U.xml_str(scaleNode,"smooth",true,defaultStr);
		if(smoothStr == "") {
			smoothStr = flixel_addons_ui_U.xml_str(scaleNode,"antialias",true,defaultStr);
		}
		return flixel_addons_ui_U.boolify(smoothStr);
	}
	,loadScaledSrc: function(data,attName,scaleName,tilesWide,tilesTall) {
		if(tilesTall == null) {
			tilesTall = 1;
		}
		if(tilesWide == null) {
			tilesWide = 1;
		}
		if(scaleName == null) {
			scaleName = "scale";
		}
		if(attName == null) {
			attName = "src";
		}
		var src = flixel_addons_ui_U.xml_str(data,attName);
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,scaleName)) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,scaleName);
			while(_g < _g1.length) {
				var scaleNode = _g1[_g];
				++_g;
				var ratio = flixel_addons_ui_U.xml_f(scaleNode,"screen_ratio",-1);
				var tolerance = flixel_addons_ui_U.xml_f(scaleNode,"tolerance",0.1);
				var actualRatio = flixel_FlxG.width / flixel_FlxG.height;
				if(ratio < 0 || ratio > 0 && Math.abs(ratio - actualRatio) <= tolerance) {
					var suffix = flixel_addons_ui_U.xml_str(scaleNode,"suffix");
					var srcSuffix = src + suffix;
					var testAsset = null;
					var scale_ = -1;
					var smooth = this.loadSmooth(scaleNode,true);
					var to_height = this._loadHeight(scaleNode,-1,"to_height");
					if(to_height != -1) {
						var testAsset1 = flixel_addons_ui_U.getBmp(flixel_addons_ui_U.gfx(src));
						if(testAsset1 != null) {
							scale_ = to_height / testAsset1.height;
						}
					} else {
						scale_ = this._loadScale(scaleNode,-1);
						if(scale_ == -1) {
							scale_ = this._loadScale(scaleNode,-1,"value");
						}
					}
					var scale_x = scale_ != -1 ? scale_ : this._loadScaleX(scaleNode,-1);
					var scale_y = scale_ != -1 ? scale_ : this._loadScaleY(scaleNode,-1);
					var sw = 0;
					var sh = 0;
					if(scale_x > 0 && scale_y > 0) {
						if(scale_x <= 0) {
							scale_x = 1.0;
						}
						if(scale_y <= 0) {
							scale_y = 1.0;
						}
						sw = this._loadWidth(scaleNode,-1);
						sh = this._loadHeight(scaleNode,-1);
						if(sw == -1 || sh == -1) {
							testAsset = openfl_utils_Assets.getBitmapData(flixel_addons_ui_U.gfx(src));
							sw = testAsset.width;
							sh = testAsset.height;
						}
						sw *= scale_x;
						sh *= scale_y;
					} else {
						sw = this._loadWidth(scaleNode,-1);
						sh = this._loadHeight(scaleNode,-1);
					}
					if(sw != 0 && sh != 0) {
						if(tilesTall > 1 || tilesWide > 1) {
							testAsset = openfl_utils_Assets.getBitmapData(flixel_addons_ui_U.gfx(src));
							var str = flixel_addons_ui_U.scaleAndStoreTileset(flixel_addons_ui_U.gfx(srcSuffix),scale_y,testAsset.width / tilesWide | 0,testAsset.height / tilesTall | 0,sw | 0,sh / tilesTall | 0,smooth);
							this.addToScaledAssets(str);
							return str;
						} else {
							var str1 = flixel_addons_ui_U.loadScaledImage(srcSuffix,sw,sh,smooth);
							this.addToScaledAssets(str1);
							return str1;
						}
					}
					break;
				}
			}
		}
		var data1 = data;
		var str = "";
		if(data1.get(attName) != null) {
			str = data1.get(attName);
			if(str == "" || str == null) {
				str = "";
			} else {
				str = flixel_addons_ui_U.gfx(str);
				try {
					if(!openfl_utils_Assets.exists(str,"IMAGE")) {
						throw haxe_Exception.thrown("couldn't load bmp \"" + attName + "\"");
					}
				} catch( _g ) {
					haxe_NativeStackTrace.lastError = _g;
					if(typeof(haxe_Exception.caught(_g).unwrap()) != "string") {
						throw _g;
					}
				}
			}
		}
		return str;
	}
	,thisWidth: function() {
		return flixel_FlxG.width;
	}
	,thisHeight: function() {
		return flixel_FlxG.height;
	}
	,_getAnchorPos: function(thing,axis,str) {
		switch(str) {
		case "":
			return 0;
		case "bottom":case "down":
			return this.screenHeight();
		case "center":
			if(axis == "x") {
				return this.screenWidth() / 2;
			} else if(axis == "y") {
				return this.screenHeight() / 2;
			}
			break;
		case "left":
			return 0;
		case "right":
			return this.screenWidth();
		case "top":case "up":
			return 0;
		default:
			var perc = flixel_addons_ui_U.perc_to_float(str);
			if(!isNaN(perc)) {
				if(axis == "x") {
					return perc * this.screenWidth();
				} else if(axis == "y") {
					return perc * this.screenHeight();
				}
			} else {
				var r = new EReg("[\\w]+\\.[\\w]+","");
				if(r.match(str)) {
					var wh = "";
					if(axis == "x") {
						wh = "w";
					}
					if(axis == "y") {
						wh = "h";
					}
					var assetValue = this._getStretch(1,wh,str);
					return assetValue;
				}
			}
		}
		return 0;
	}
	,getRound: function(node,defaultStr) {
		if(defaultStr == null) {
			defaultStr = "";
		}
		var roundStr = flixel_addons_ui_U.xml_str(node,"round",true,defaultStr);
		switch(roundStr) {
		case "-1":case "down":case "floor":
			return flixel_addons_ui_Rounding.Floor;
		case "1":case "ceil":case "ceiling":case "up":
			return flixel_addons_ui_Rounding.Ceil;
		case "0":case "round":case "true":
			return flixel_addons_ui_Rounding.Round;
		}
		return flixel_addons_ui_Rounding.None;
	}
	,doRound: function(f,round) {
		switch(round._hx_index) {
		case 0:
			return Math.floor(f);
		case 1:
			return Math.ceil(f);
		case 2:
			return Math.round(f);
		case 3:
			return f;
		}
	}
	,calcMaxMinSize: function(data,width,height) {
		var min_w = 0;
		var min_h = 0;
		var max_w = Infinity;
		var max_h = Infinity;
		var temp_min_w = 0;
		var temp_min_h = 0;
		var temp_max_w = Infinity;
		var temp_max_h = Infinity;
		var round = flixel_addons_ui_Rounding.None;
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"exact_size")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"exact_size");
			while(_g < _g1.length) {
				var exactNode = _g1[_g];
				++_g;
				var exact_w_str = flixel_addons_ui_U.xml_str(exactNode,"width");
				var exact_h_str = flixel_addons_ui_U.xml_str(exactNode,"height");
				round = this.getRound(exactNode);
				min_w = this.doRound(this._getDataSize("w",exact_w_str,0),round);
				min_h = this.doRound(this._getDataSize("h",exact_h_str,0),round);
				max_w = this.doRound(min_w,round);
				max_h = this.doRound(min_h,round);
			}
		} else if(haxe_xml__$Access_HasNodeAccess.resolve(data,"min_size")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"min_size");
			while(_g < _g1.length) {
				var minNode = _g1[_g];
				++_g;
				var min_w_str = flixel_addons_ui_U.xml_str(minNode,"width");
				var min_h_str = flixel_addons_ui_U.xml_str(minNode,"height");
				round = this.getRound(minNode);
				temp_min_w = this.doRound(this._getDataSize("w",min_w_str,0),round);
				temp_min_h = this.doRound(this._getDataSize("h",min_h_str,0),round);
				if(temp_min_w > min_w) {
					min_w = temp_min_w;
				}
				if(temp_min_h > min_h) {
					min_h = temp_min_h;
				}
			}
		} else if(haxe_xml__$Access_HasNodeAccess.resolve(data,"max_size")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"max_size");
			while(_g < _g1.length) {
				var maxNode = _g1[_g];
				++_g;
				var max_w_str = flixel_addons_ui_U.xml_str(maxNode,"width");
				var max_h_str = flixel_addons_ui_U.xml_str(maxNode,"height");
				round = this.getRound(maxNode);
				temp_max_w = this.doRound(this._getDataSize("w",max_w_str,Infinity),round);
				temp_max_h = this.doRound(this._getDataSize("h",max_h_str,Infinity),round);
				if(temp_max_w < max_w) {
					max_w = temp_max_w;
				}
				if(temp_max_h < max_h) {
					max_h = temp_max_h;
				}
			}
		} else {
			return null;
		}
		if(width != null) {
			if(width > min_w) {
				min_w = width;
			}
			if(width < max_w) {
				max_w = width;
			}
		}
		if(height != null) {
			if(height > min_h) {
				min_h = height;
			}
			if(height < max_h) {
				max_h = height;
			}
		}
		if(max_w <= 0) {
			max_w = Infinity;
		}
		if(max_h <= 0) {
			max_h = Infinity;
		}
		return { min_width : min_w, min_height : min_h, max_width : max_w, max_height : max_h};
	}
	,_getDataSize: function(target,str,default_) {
		if(default_ == null) {
			default_ = 0;
		}
		if(flixel_addons_ui_U.isStrNum(str)) {
			return parseFloat(str);
		}
		var percf = flixel_addons_ui_U.perc_to_float(str);
		if(!isNaN(percf)) {
			switch(target) {
			case "h":case "height":
				return this.screenHeight() * percf;
			case "scale":case "scale_x":case "scale_y":
				return percf;
			case "w":case "width":
				return this.screenWidth() * percf;
			}
		} else {
			if(str.indexOf("stretch:") == 0) {
				str = StringTools.replace(str,"stretch:","");
				var arr = str.split(",");
				var stretch_0 = this._getStretch(0,target,arr[0]);
				var stretch_1 = this._getStretch(1,target,arr[1]);
				if(stretch_0 != -1 && stretch_1 != -1) {
					return stretch_1 - stretch_0;
				} else {
					return default_;
				}
			} else if(str.indexOf("asset:") == 0) {
				str = StringTools.replace(str,"asset:","");
				var assetValue = this._getStretch(1,target,str);
				return assetValue;
			} else {
				var r = new EReg("[\\w]+\\.[\\w]+","");
				if(r.match(str)) {
					var assetValue = this._getStretch(1,target,str);
					return assetValue;
				}
			}
			var ptStr = "";
			if(str.indexOf("pt") == str.length - 2) {
				ptStr = HxOverrides.substr(str,0,str.length - 2);
			}
			if(ptStr != "" && flixel_addons_ui_U.isStrNum(ptStr)) {
				var tempNum = parseFloat(ptStr);
				switch(target) {
				case "h":case "height":
					return this._pointY * tempNum;
				case "w":case "width":
					return this._pointX * tempNum;
				}
			}
		}
		return default_;
	}
	,_getOperation: function(str) {
		var list = ["+","-","*","/","^"];
		var op = "";
		var besti = Infinity;
		var _g = 0;
		while(_g < list.length) {
			var item = list[_g];
			++_g;
			var i = str.indexOf(item);
			if(i != -1) {
				if(i < besti) {
					besti = i;
					op = item;
				}
			}
		}
		var hasPoint = false;
		if(op != "") {
			if(str.indexOf(op) != -1) {
				var opindex = str.indexOf(op);
				if(opindex != str.length - 1) {
					var firstBit = HxOverrides.substr(str,0,opindex);
					var secondBit = HxOverrides.substr(str,opindex + 1,str.length - (opindex + 1));
					var f = 0;
					var ptIndex = secondBit.indexOf("pt");
					if(ptIndex != -1 && ptIndex == secondBit.length - 2) {
						var sansPt = StringTools.replace(secondBit,"pt","");
						f = parseFloat(sansPt);
						hasPoint = true;
					} else {
						f = parseFloat(secondBit);
					}
					if(isNaN(f)) {
						f = this.getAssetProperty(1,"",secondBit);
					}
					if(f == 0 && secondBit != "0") {
						return null;
					} else {
						return [firstBit,op,f,hasPoint];
					}
				}
			}
		}
		return null;
	}
	,_doOperation: function(value,op,operand) {
		switch(op) {
		case "*":
			return value * operand;
		case "+":
			return value + operand;
		case "-":
			return value - operand;
		case "/":
			return value / operand;
		case "^":
			return Math.pow(value,operand);
		}
		return value;
	}
	,_getStretch: function(index,target,str) {
		var arr = null;
		var op = "";
		var operand = 0;
		var hasPoint = false;
		arr = this._getOperation(str);
		if(arr != null) {
			str = arr[0];
			op = arr[1];
			operand = arr[2];
			hasPoint = arr[3];
			if(hasPoint) {
				switch(target) {
				case "h":case "height":
					operand *= this._pointY;
					break;
				case "w":case "width":
					operand *= this._pointX;
					break;
				default:
					operand *= this._pointY;
				}
			}
		}
		var return_val = this.getAssetProperty(index,target,str);
		if(return_val != -1 && op != "") {
			return_val = this._doOperation(return_val,op,operand);
		}
		return return_val;
	}
	,getAssetProperty: function(index,target,str) {
		var prop = "";
		if(str.indexOf(".") != -1) {
			var arr = null;
			arr = str.split(".");
			str = arr[0];
			prop = arr[1];
		}
		var other = this.getAsset(str);
		var return_val = 0;
		if(other == null) {
			switch(str) {
			case "bottom":case "down":
				return_val = this.screenHeight();
				break;
			case "left":
				return_val = 0;
				break;
			case "right":
				return_val = this.screenWidth();
				break;
			case "top":case "up":
				return_val = 0;
				break;
			default:
				if(flixel_addons_ui_U.isStrNum(str)) {
					return_val = parseFloat(str);
				} else {
					return_val = -1;
				}
			}
		} else {
			switch(target) {
			case "h":case "height":
				if(prop == "") {
					if(index == 0) {
						return_val = other.y + other.get_height();
					}
					if(index == 1) {
						return_val = other.y;
					}
				} else {
					switch(prop) {
					case "bottom":case "down":
						return_val = other.y + other.get_height();
						break;
					case "center":
						return_val = other.y + other.get_height() / 2;
						break;
					case "halfheight":
						return_val = other.get_height() / 2;
						break;
					case "halfwidth":
						return_val = other.get_width() / 2;
						break;
					case "height":
						return_val = other.get_height();
						break;
					case "right":
						return_val = other.x + other.get_width();
						break;
					case "top":case "up":case "y":
						return_val = other.y;
						break;
					case "width":
						return_val = other.get_width();
						break;
					case "left":case "x":
						return_val = other.x;
						break;
					}
				}
				break;
			case "w":case "width":
				if(prop == "") {
					if(index == 0) {
						return_val = other.x + other.get_width();
					}
					if(index == 1) {
						return_val = other.x;
					}
				} else {
					switch(prop) {
					case "bottom":case "down":
						return_val = other.y + other.get_height();
						break;
					case "center":
						return_val = other.x + other.get_width() / 2;
						break;
					case "halfheight":
						return_val = other.get_height() / 2;
						break;
					case "halfwidth":
						return_val = other.get_width() / 2;
						break;
					case "height":
						return_val = other.get_height();
						break;
					case "right":
						return_val = other.x + other.get_width();
						break;
					case "top":case "up":case "y":
						return_val = other.y;
						break;
					case "width":
						return_val = other.get_width();
						break;
					case "left":case "x":
						return_val = other.x;
						break;
					}
				}
				break;
			default:
				switch(prop) {
				case "bottom":case "down":
					return_val = other.y + other.get_height();
					break;
				case "centerx":
					return_val = other.x + other.get_width() / 2;
					break;
				case "centery":
					return_val = other.y + other.get_height() / 2;
					break;
				case "halfheight":
					return_val = other.get_height() / 2;
					break;
				case "halfwidth":
					return_val = other.get_width() / 2;
					break;
				case "height":
					return_val = other.get_height();
					break;
				case "right":
					return_val = other.x + other.get_width();
					break;
				case "top":case "up":case "y":
					return_val = other.y;
					break;
				case "width":
					return_val = other.get_width();
					break;
				case "left":case "x":
					return_val = other.x;
					break;
				}
			}
		}
		return return_val;
	}
	,_loadCursor: function(data) {
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"list")) {
			if(this.cursorLists == null) {
				this.cursorLists = [];
			}
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"list");
			while(_g < _g1.length) {
				var lNode = _g1[_g];
				++_g;
				var ids = flixel_addons_ui_U.xml_str(lNode,"ids");
				var arr = ids.split(",");
				if(arr != null && arr.length > 0) {
					var list = [];
					var _g2 = 0;
					while(_g2 < arr.length) {
						var str = arr[_g2];
						++_g2;
						var widget = this.getAsset(str);
						if(widget != null) {
							list.push(widget);
						}
					}
					this.cursorLists.push(list);
				}
			}
		}
	}
	,_loadPosition: function(data,thing) {
		var X = this._loadWidth(data,0,"x");
		var Y = this._loadHeight(data,0,"y");
		var ctrX = flixel_addons_ui_U.xml_bool(data,"center_x");
		var ctrY = flixel_addons_ui_U.xml_bool(data,"center_y");
		var center_on = flixel_addons_ui_U.xml_str(data,"center_on");
		var center_on_x = flixel_addons_ui_U.xml_str(data,"center_on_x");
		var center_on_y = flixel_addons_ui_U.xml_str(data,"center_on_y");
		var anchor_x_str = "";
		var anchor_y_str = "";
		var anchor_x = 0;
		var anchor_y = 0;
		var anchor_x_flush = "";
		var anchor_y_flush = "";
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"anchor")) {
			anchor_x_str = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"anchor"),"x");
			anchor_y_str = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"anchor"),"y");
			var rounding = this.getRound(haxe_xml__$Access_NodeAccess.resolve(data,"anchor"));
			anchor_x = this._getAnchorPos(thing,"x",anchor_x_str);
			anchor_y = this._getAnchorPos(thing,"y",anchor_y_str);
			anchor_x = this.doRound(anchor_x,rounding);
			anchor_y = this.doRound(anchor_y,rounding);
			anchor_x_flush = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"anchor"),"x-flush",true);
			anchor_y_flush = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"anchor"),"y-flush",true);
		}
		if(anchor_x_str != "" || anchor_y_str != "") {
			switch(anchor_x_flush) {
			case "center":
				anchor_x -= thing.get_width() / 2;
				break;
			case "left":
				break;
			case "right":
				anchor_x -= thing.get_width();
				break;
			}
			switch(anchor_y_flush) {
			case "bottom":case "down":
				anchor_y -= thing.get_height();
				break;
			case "center":
				anchor_y -= thing.get_height() / 2;
				break;
			case "top":case "up":
				break;
			}
			if(anchor_x_str != "") {
				thing.set_x(anchor_x);
			}
			if(anchor_y_str != "") {
				thing.set_y(anchor_y);
			}
		}
		if(ctrX || ctrY) {
			var X1 = ctrX;
			var Y1 = ctrY;
			if(Y1 == null) {
				Y1 = true;
			}
			if(X1 == null) {
				X1 = true;
			}
			if(X1) {
				thing.set_x((flixel_FlxG.width - thing.get_width()) / 2);
			}
			if(Y1) {
				thing.set_y((flixel_FlxG.height - thing.get_height()) / 2);
			}
		}
		if(center_on != "") {
			var other = this.getAsset(center_on);
			if(other != null) {
				var fb1 = js_Boot.__cast(other , flixel_FlxObject);
				var fb2 = js_Boot.__cast(thing , flixel_FlxObject);
				fb2.set_x(fb1.x + (fb1.get_width() - fb2.get_width()) / 2);
				fb2.set_y(fb1.y + (fb1.get_height() - fb2.get_height()) / 2);
			}
		} else {
			if(center_on_x != "") {
				var other = this.getAsset(center_on_x);
				if(other != null) {
					var fb1 = js_Boot.__cast(other , flixel_FlxObject);
					var fb2 = js_Boot.__cast(thing , flixel_FlxObject);
					var centerX = true;
					var centerY = false;
					if(centerY == null) {
						centerY = true;
					}
					if(centerX == null) {
						centerX = true;
					}
					if(centerX) {
						fb2.set_x(fb1.x + (fb1.get_width() - fb2.get_width()) / 2);
					}
					if(centerY) {
						fb2.set_y(fb1.y + (fb1.get_height() - fb2.get_height()) / 2);
					}
				}
			}
			if(center_on_y != "") {
				var other = this.getAsset(center_on_y);
				if(other != null) {
					var fb1 = js_Boot.__cast(other , flixel_FlxObject);
					var fb2 = js_Boot.__cast(thing , flixel_FlxObject);
					var centerX = false;
					var centerY = true;
					if(centerY == null) {
						centerY = true;
					}
					if(centerX == null) {
						centerX = true;
					}
					if(centerX) {
						fb2.set_x(fb1.x + (fb1.get_width() - fb2.get_width()) / 2);
					}
					if(centerY) {
						fb2.set_y(fb1.y + (fb1.get_height() - fb2.get_height()) / 2);
					}
				}
			}
		}
		var X1 = X;
		var Y1 = Y;
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		var _g = thing;
		_g.set_x(_g.x + X1);
		var _g = thing;
		_g.set_y(_g.y + Y1);
	}
	,_loadBorder: function(data) {
		var borderDef = flixel_addons_ui_BorderDef.fromXML(data);
		var round = this.getRound(data,"floor");
		var dataSize = this._getDataSize("h",flixel_addons_ui_U.xml_str(data,"border_size"),1);
		var border_size = this.doRound(dataSize,round) | 0;
		borderDef.size = border_size;
		return borderDef;
	}
	,_loadColor: function(data,colorName,_default) {
		if(_default == null) {
			_default = -1;
		}
		if(colorName == null) {
			colorName = "color";
		}
		var colorStr = flixel_addons_ui_U.xml_str(data,colorName);
		var tmp;
		if(colorStr == "") {
			var _this = data;
			if(_this.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (_this.nodeType == null ? "null" : XmlType.toString(_this.nodeType)));
			}
			tmp = _this.nodeName == colorName;
		} else {
			tmp = false;
		}
		if(tmp) {
			colorStr = flixel_addons_ui_U.xml_str(data,"value");
		}
		var color = _default;
		if(colorStr != "") {
			var return_val = flixel_util_FlxColor.fromString(colorStr);
			if(return_val == null) {
				throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + colorStr);
			}
			color = return_val;
		}
		return color;
	}
	,_loadFontDef: function(data) {
		var fd = flixel_addons_ui_FontDef.fromXML(data);
		var fontSize = this._loadHeight(data,8,"size") | 0;
		fd.format.size = flixel_addons_ui_FlxUI.fontSize(fd.file,fontSize);
		fd.set_size(fontSize);
		return fd;
	}
	,_loadFontFace: function(data) {
		var fontFace = flixel_addons_ui_U.xml_str(data,"font");
		var fontStyle = flixel_addons_ui_U.xml_str(data,"style");
		var the_font = null;
		if(fontFace != "") {
			the_font = flixel_addons_ui_FlxUI.font(fontFace,fontStyle);
		}
		return the_font;
	}
	,_onFinishLoad: function() {
		if(this._ptr != null) {
			this._ptr.getEvent("finish_load",this,null);
		}
	}
	,getText: function(flag,context,safe,code) {
		if(code == null) {
			code = "";
		}
		if(safe == null) {
			safe = true;
		}
		if(context == null) {
			context = "data";
		}
		var str = "";
		if(this._ptr_tongue != null) {
			str = this._ptr_tongue.get(flag,context,safe);
			return this.formatFromCode(str,code);
		} else if(this.getTextFallback != null) {
			str = this.getTextFallback(flag,context,safe);
			return this.formatFromCode(str,code);
		}
		return flag;
	}
	,formatFromCode: function(str,code) {
		switch(code) {
		case "fu":
			return flixel_addons_ui_U.FU(str);
		case "fu_":
			return flixel_addons_ui_U.FU_(str);
		case "l":
			return str.toLowerCase();
		case "u":
			return str.toUpperCase();
		}
		return str;
	}
	,formatButtonText: function(data,button) {
		if(data != null && haxe_xml__$Access_HasNodeAccess.resolve(data,"text")) {
			var textNode = haxe_xml__$Access_NodeAccess.resolve(data,"text");
			var use_def = flixel_addons_ui_U.xml_str(textNode,"use_def",true);
			var text_def = null;
			if(use_def != "") {
				text_def = this.getDefinition(use_def);
			}
			var info = flixel_addons_ui_FlxUI.consolidateData(textNode,text_def);
			var the_font = this._loadFontFace(info);
			var size = this._loadHeight(info,8,"size","floor") | 0;
			var color = this._loadColor(info);
			var labelWidth = flixel_addons_ui_U.xml_f(info,"width");
			var border = this._loadBorder(info);
			var align = flixel_addons_ui_U.xml_str(info,"align",true);
			if(align == "") {
				align = null;
			}
			var the_label = null;
			var fb = null;
			var fsb = null;
			var ifb = null;
			if(((button) instanceof flixel_addons_ui_FlxUICheckBox) == false) {
				ifb = button;
				if(align == "" || align == null) {
					align = "center";
				}
			} else {
				var cb = button;
				ifb = cb.button;
				align = "left";
			}
			if(ifb != null) {
				if(((ifb) instanceof flixel_addons_ui_FlxUIButton)) {
					fb = ifb;
					the_label = fb.label;
				} else if(((ifb) instanceof flixel_addons_ui_FlxUISpriteButton)) {
					fsb = ifb;
					if(((fsb.label) instanceof flixel_text_FlxText)) {
						the_label = fsb.label;
					} else if(((fsb.label) instanceof flixel_group_FlxTypedSpriteGroup)) {
						var fsg = fsb.label;
						var _g = 0;
						var _g1 = fsg.group.members;
						while(_g < _g1.length) {
							var fs = _g1[_g];
							++_g;
							if(((fs) instanceof flixel_text_FlxText)) {
								the_label = fs;
								break;
							}
						}
					}
				}
				ifb.up_color = color;
				ifb.down_color = 0;
				ifb.over_color = 0;
			}
			if(the_label != null) {
				if(labelWidth != 0) {
					the_label.set_width(labelWidth);
					the_label.resetHelpers();
				}
				if(fb != null) {
					fb.setLabelFormat(the_font,size,color,align);
				} else {
					the_label.setFormat(the_font,size,color,align);
				}
				the_label.set_borderStyle(border.style);
				the_label.set_borderColor(border.color);
				the_label.set_borderSize(border.size);
				the_label.set_borderQuality(border.quality);
				if(((the_label) instanceof flixel_addons_ui_FlxUIText)) {
					var ftu = the_label;
					ftu.drawFrame();
				}
				if(fb != null) {
					fb.autoCenterLabel();
				}
				if(fsb != null) {
					fsb.autoCenterLabel();
				}
			}
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(info,"color");
			while(_g < _g1.length) {
				var textColorNode = _g1[_g];
				++_g;
				var color = this._loadColor(textColorNode);
				var vis = flixel_addons_ui_U.xml_bool(textColorNode,"visible",true);
				var state_name = flixel_addons_ui_U.xml_name(textColorNode);
				var toggle = flixel_addons_ui_U.xml_bool(textColorNode,"toggle");
				switch(state_name) {
				case "active":case "hilight":case "hover":case "over":
					if(!toggle) {
						ifb.over_color = color;
						ifb.over_visible = vis;
					} else {
						ifb.over_toggle_color = color;
						ifb.over_toggle_visible = vis;
					}
					break;
				case "down":case "pressed":case "pushed":
					if(!toggle) {
						ifb.down_color = color;
						ifb.down_visible = vis;
					} else {
						ifb.down_toggle_color = color;
						ifb.down_toggle_visible = vis;
					}
					break;
				case "":case "inactive":case "normal":case "up":
					if(!toggle) {
						ifb.up_color = color;
						ifb.up_visible = vis;
					} else {
						ifb.up_toggle_color = color;
						ifb.up_toggle_visible = vis;
					}
					break;
				}
			}
			if(ifb.over_color == 0) {
				ifb.over_color = ifb.up_color;
			}
			if(ifb.down_color == 0) {
				ifb.down_color = ifb.over_color;
			}
			if(ifb.up_toggle_color == 0) {
				ifb.up_toggle_color = ifb.up_color;
			}
			if(ifb.over_toggle_color == 0) {
				ifb.over_toggle_color = ifb.over_color;
			}
			if(ifb.down_toggle_color == 0) {
				ifb.down_toggle_color = ifb.down_color;
			}
			if(the_label != null) {
				the_label.set_visible(ifb.up_visible);
				the_label.set_color(ifb.up_color);
			}
			return the_label;
		}
		return null;
	}
	,__class__: flixel_addons_ui_FlxUI
	,__properties__: $extend(flixel_addons_ui_FlxUIGroup.prototype.__properties__,{set_currMode:"set_currMode",get_currMode:"get_currMode",set_focus:"set_focus",set_tongue:"set_tongue",get_tongue:"get_tongue",get_isRoot:"get_isRoot"})
});
var flixel_addons_ui_Rounding = $hxEnums["flixel.addons.ui.Rounding"] = { __ename__ : "flixel.addons.ui.Rounding", __constructs__ : ["Floor","Ceil","Round","None"]
	,Floor: {_hx_index:0,__enum__:"flixel.addons.ui.Rounding",toString:$estr}
	,Ceil: {_hx_index:1,__enum__:"flixel.addons.ui.Rounding",toString:$estr}
	,Round: {_hx_index:2,__enum__:"flixel.addons.ui.Rounding",toString:$estr}
	,None: {_hx_index:3,__enum__:"flixel.addons.ui.Rounding",toString:$estr}
};
flixel_addons_ui_Rounding.__empty_constructs__ = [flixel_addons_ui_Rounding.Floor,flixel_addons_ui_Rounding.Ceil,flixel_addons_ui_Rounding.Round,flixel_addons_ui_Rounding.None];
var flixel_addons_ui_interfaces_IResizable = function() { };
$hxClasses["flixel.addons.ui.interfaces.IResizable"] = flixel_addons_ui_interfaces_IResizable;
flixel_addons_ui_interfaces_IResizable.__name__ = "flixel.addons.ui.interfaces.IResizable";
flixel_addons_ui_interfaces_IResizable.__isInterface__ = true;
flixel_addons_ui_interfaces_IResizable.prototype = {
	get_width: null
	,set_width: null
	,get_height: null
	,set_height: null
	,resize: null
	,__class__: flixel_addons_ui_interfaces_IResizable
	,__properties__: {set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"}
};
var flixel_addons_ui_FlxUISprite = function(X,Y,SimpleGraphic) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._originalKey = "";
	this.resize_ratio_axis = 1;
	this.recycled = false;
	this.ptr_owner = null;
	this.broadcastToFlxUI = true;
	flixel_FlxSprite.call(this,X,Y,SimpleGraphic);
};
$hxClasses["flixel.addons.ui.FlxUISprite"] = flixel_addons_ui_FlxUISprite;
flixel_addons_ui_FlxUISprite.__name__ = "flixel.addons.ui.FlxUISprite";
flixel_addons_ui_FlxUISprite.__interfaces__ = [flixel_addons_ui_interfaces_IResizable,flixel_addons_ui_interfaces_IFlxUIWidget];
flixel_addons_ui_FlxUISprite.__super__ = flixel_FlxSprite;
flixel_addons_ui_FlxUISprite.prototype = $extend(flixel_FlxSprite.prototype,{
	broadcastToFlxUI: null
	,name: null
	,ptr_owner: null
	,recycled: null
	,resize_ratio: null
	,resize_ratio_axis: null
	,set_resize_ratio: function(r) {
		this.resize_ratio = r;
		return r;
	}
	,resize_point: null
	,set_resize_point: function(r) {
		if(r != null) {
			var point = flixel_math_FlxPoint._pool.get().set(0,0);
			point._inPool = false;
			this.resize_point = point;
			this.resize_point.set_x(r.x);
			this.resize_point.set_y(r.y);
		}
		return this.resize_point;
	}
	,recycle: function(data) {
		this.recycled = true;
	}
	,resize: function(w,h) {
		var old_width = this.get_width();
		var old_height = this.get_height();
		if(this.resize_ratio > 0) {
			var effective_ratio = w / h;
			if(Math.abs(effective_ratio - this.resize_ratio) > 0.0001) {
				if(this.resize_ratio_axis == 1) {
					h = w * (1 / this.resize_ratio);
				} else {
					w = h * (1 / this.resize_ratio);
				}
			}
		}
		if(this._originalKey != "" && this._originalKey != null) {
			var newKey = flixel_addons_ui_U.loadScaledImage(this._originalKey,w,h);
			if(newKey != "" && newKey != null) {
				this.loadFromScaledGraphic(newKey);
			}
		}
		var diff_w = this.get_width() - old_width;
		var diff_h = this.get_height() - old_height;
		if(this.resize_point != null) {
			var delta_x = diff_w * this.resize_point.x;
			var delta_y = diff_h * this.resize_point.y;
			var _g = this;
			_g.set_x(_g.x - delta_x);
			var _g = this;
			_g.set_y(_g.y - delta_y);
		}
	}
	,loadGraphicAtScale: function(GraphicKey,W,H) {
		this.loadGraphic(GraphicKey,false);
		this.resize(W,H);
	}
	,loadGraphic: function(Graphic,Animated,Width,Height,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Animated == null) {
			Animated = false;
		}
		var sprite = flixel_FlxSprite.prototype.loadGraphic.call(this,Graphic,Animated,Width,Height,Unique,Key);
		this._originalKey = this.graphic.assetsKey;
		if(this._originalKey == null) {
			this._originalKey = this.graphic.key;
		}
		return sprite;
	}
	,destroy: function() {
		this.ptr_owner = null;
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,loadFromScaledGraphic: function(Graphic,Animated,Width,Height,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Animated == null) {
			Animated = false;
		}
		flixel_FlxSprite.prototype.loadGraphic.call(this,Graphic,Animated,Width,Height,Unique,Key);
	}
	,_originalKey: null
	,__class__: flixel_addons_ui_FlxUISprite
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{set_resize_point:"set_resize_point",set_resize_ratio:"set_resize_ratio"})
});
var openfl_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = "openfl.geom.Point";
openfl_geom_Point.__limeVector2 = null;
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	x: null
	,y: null
	,add: function(v) {
		return new openfl_geom_Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl_geom_Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		if(openfl_geom_Point.__limeVector2 == null) {
			openfl_geom_Point.__limeVector2 = new lime_math_Vector2();
		}
		var _this = openfl_geom_Point.__limeVector2;
		_this.x = this.x;
		_this.y = this.y;
		return openfl_geom_Point.__limeVector2;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl_geom_Point
	,__properties__: {get_length:"get_length"}
};
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = "openfl.geom.Rectangle";
openfl_geom_Rectangle.__limeRectangle = null;
openfl_geom_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare == this) {
			return true;
		} else if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return new openfl_geom_Rectangle();
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			return new openfl_geom_Rectangle();
		}
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) {
			return toUnion.clone();
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			return this.clone();
		}
		var x0 = this.x > toUnion.x ? toUnion.x : this.x;
		var x1 = this.get_right() < toUnion.get_right() ? toUnion.get_right() : this.get_right();
		var y0 = this.y > toUnion.y ? toUnion.y : this.y;
		var y1 = this.get_bottom() < toUnion.get_bottom() ? toUnion.get_bottom() : this.get_bottom();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		var offsetX = 0.0;
		var offsetY = 0.0;
		var offsetRight = 0.0;
		var offsetBottom = 0.0;
		if(this.x < x) {
			offsetX = x - this.x;
		}
		if(this.y < y) {
			offsetY = y - this.y;
		}
		if(this.get_right() > x + width) {
			offsetRight = x + width - this.get_right();
		}
		if(this.get_bottom() > y + height) {
			offsetBottom = y + height - this.get_bottom();
		}
		this.x += offsetX;
		this.y += offsetY;
		this.width += offsetRight - offsetX;
		this.height += offsetBottom - offsetY;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toLimeRectangle: function() {
		if(openfl_geom_Rectangle.__limeRectangle == null) {
			openfl_geom_Rectangle.__limeRectangle = new lime_math_Rectangle();
		}
		openfl_geom_Rectangle.__limeRectangle.setTo(this.x,this.y,this.width,this.height);
		return openfl_geom_Rectangle.__limeRectangle;
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl_geom_Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl_geom_Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var flixel_addons_ui_FlxUI9SliceSprite = function(X,Y,Graphic,Rect,Slice9,Tile,Smooth,Id,Ratio,Resize_point,Resize_axis,DeferResize,Color) {
	if(Color == null) {
		Color = -1;
	}
	if(DeferResize == null) {
		DeferResize = false;
	}
	if(Resize_axis == null) {
		Resize_axis = 1;
	}
	if(Ratio == null) {
		Ratio = -1;
	}
	if(Id == null) {
		Id = "";
	}
	if(Smooth == null) {
		Smooth = false;
	}
	if(Tile == null) {
		Tile = 0;
	}
	this._asset_id = "";
	this._smooth = false;
	this._tile = 0;
	this._slice9 = null;
	this.paintScale9_id = "";
	flixel_addons_ui_FlxUISprite.call(this,X,Y,null);
	this.set_color(Color);
	this._slice9 = Slice9;
	this._tile = Tile;
	this._smooth = Smooth;
	this._asset_id = "";
	if(Graphic == null) {
		Graphic = "flixel/flixel-ui/img/chrome.png";
	}
	if(typeof(Graphic) == "string") {
		this._asset_id = Graphic;
		this._raw_pixels = null;
	} else if(((Graphic) instanceof openfl_display_BitmapData)) {
		this._asset_id = Id;
		this._raw_pixels = Graphic;
	} else if(((Graphic) instanceof flixel_graphics_FlxGraphic)) {
		var fg = Graphic;
		this._asset_id = fg.key;
		this._raw_pixels = fg.bitmap;
	}
	this.set_resize_ratio(Ratio);
	this.resize_ratio_axis = Resize_axis;
	if(Resize_point != null) {
		this.set_resize_point(Resize_point);
	}
	if(DeferResize) {
		var pt = flixel_addons_ui_U.applyResize(this.resize_ratio,this.resize_ratio_axis,Rect.width,Rect.height);
		this.set_width(pt.x);
		this.set_height(pt.y);
	} else {
		this.resize(Rect.width,Rect.height);
	}
};
$hxClasses["flixel.addons.ui.FlxUI9SliceSprite"] = flixel_addons_ui_FlxUI9SliceSprite;
flixel_addons_ui_FlxUI9SliceSprite.__name__ = "flixel.addons.ui.FlxUI9SliceSprite";
flixel_addons_ui_FlxUI9SliceSprite.__interfaces__ = [flixel_addons_ui_interfaces_IFlxUIWidget,flixel_addons_ui_interfaces_IResizable];
flixel_addons_ui_FlxUI9SliceSprite.sectionCache = null;
flixel_addons_ui_FlxUI9SliceSprite.cacheCounter = null;
flixel_addons_ui_FlxUI9SliceSprite._staticRects = null;
flixel_addons_ui_FlxUI9SliceSprite.getRectFromString = function(str) {
	var coords = str.split(",");
	var rect = null;
	if(coords != null && coords.length == 4) {
		var x_ = Std.parseInt(coords[0]);
		var y_ = Std.parseInt(coords[1]);
		var w_ = Std.parseInt(coords[2]);
		var h_ = Std.parseInt(coords[3]);
		rect = new openfl_geom_Rectangle(x_,y_,w_,h_);
	}
	return rect;
};
flixel_addons_ui_FlxUI9SliceSprite.getRectIntsFromString = function(str) {
	var coords = str.split(",");
	if(coords != null && coords.length == 4) {
		var x1 = Std.parseInt(coords[0]);
		var y1 = Std.parseInt(coords[1]);
		var x2 = Std.parseInt(coords[2]);
		var y2 = Std.parseInt(coords[3]);
		return [x1,y1,x2,y2];
	}
	return null;
};
flixel_addons_ui_FlxUI9SliceSprite.paintScale9 = function(g,assetID,scale9,rc,tile,smooth,raw) {
	if(smooth == null) {
		smooth = false;
	}
	if(tile == null) {
		tile = 0;
	}
	if(scale9 != null) {
		var w;
		var h;
		if(raw == null) {
			var assetBmp = flixel_addons_ui_U.getBmp(assetID);
			if(assetBmp != null) {
				w = assetBmp.width;
				h = assetBmp.height;
			} else {
				var assetFlx = flixel_FlxG.bitmap._cache.h[assetID];
				w = assetFlx.width;
				h = assetFlx.height;
			}
		} else {
			w = raw.width;
			h = raw.height;
		}
		var x1 = scale9[0];
		var y1 = scale9[1];
		var x2 = scale9[2];
		var y2 = scale9[3];
		if(flixel_addons_ui_FlxUI9SliceSprite._staticRects == null) {
			flixel_addons_ui_FlxUI9SliceSprite._staticRects = new haxe_ds_StringMap();
			var this1 = flixel_addons_ui_FlxUI9SliceSprite._staticRects;
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect = _this;
			rect._inPool = false;
			this1.h["top.left"] = rect;
			var this1 = flixel_addons_ui_FlxUI9SliceSprite._staticRects;
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect = _this;
			rect._inPool = false;
			this1.h["top"] = rect;
			var this1 = flixel_addons_ui_FlxUI9SliceSprite._staticRects;
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect = _this;
			rect._inPool = false;
			this1.h["top.right"] = rect;
			var this1 = flixel_addons_ui_FlxUI9SliceSprite._staticRects;
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect = _this;
			rect._inPool = false;
			this1.h["left"] = rect;
			var this1 = flixel_addons_ui_FlxUI9SliceSprite._staticRects;
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect = _this;
			rect._inPool = false;
			this1.h["middle"] = rect;
			var this1 = flixel_addons_ui_FlxUI9SliceSprite._staticRects;
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect = _this;
			rect._inPool = false;
			this1.h["right"] = rect;
			var this1 = flixel_addons_ui_FlxUI9SliceSprite._staticRects;
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect = _this;
			rect._inPool = false;
			this1.h["bottom.left"] = rect;
			var this1 = flixel_addons_ui_FlxUI9SliceSprite._staticRects;
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect = _this;
			rect._inPool = false;
			this1.h["bottom"] = rect;
			var this1 = flixel_addons_ui_FlxUI9SliceSprite._staticRects;
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect = _this;
			rect._inPool = false;
			this1.h["bottom.right"] = rect;
		}
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["top.left"];
		var X = 0;
		var Y = 0;
		var Width = x1;
		var Height = y1;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["top"];
		var X = x1;
		var Y = 0;
		var Width = x2 - x1;
		var Height = y1;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["top.right"];
		var X = x2;
		var Y = 0;
		var Width = w - x2;
		var Height = y1;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["left"];
		var X = 0;
		var Y = y1;
		var Width = x1;
		var Height = y2 - y1;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["middle"];
		var X = x1;
		var Y = y1;
		var Width = x2 - x1;
		var Height = y2 - y1;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["right"];
		var X = x2;
		var Y = y1;
		var Width = w - x2;
		var Height = y2 - y1;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["bottom.left"];
		var X = 0;
		var Y = y2;
		var Width = x1;
		var Height = h - y2;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["bottom"];
		var X = x1;
		var Y = y2;
		var Width = x2 - x1;
		var Height = h - y2;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["bottom.right"];
		var X = x2;
		var Y = y2;
		var Width = w - x2;
		var Height = h - y2;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		if(flixel_addons_ui_FlxUI9SliceSprite.cacheCounter == null) {
			flixel_addons_ui_FlxUI9SliceSprite.cacheCounter = new haxe_ds_StringMap();
		}
		var uniqueID = flixel_addons_ui_FlxUI9SliceSprite.makePaintScale9Id(assetID,scale9,rc);
		var sectionCounter = flixel_addons_ui_FlxUI9SliceSprite.cacheCounter.h[uniqueID];
		if(sectionCounter == null) {
			sectionCounter = { useCount : 0, subKeys : []};
			var _g = 0;
			while(_g < 9) {
				var i = _g++;
				var rect;
				switch(i) {
				case 0:
					rect = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["top.left"];
					break;
				case 1:
					rect = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["top"];
					break;
				case 2:
					rect = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["top.right"];
					break;
				case 3:
					rect = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["left"];
					break;
				case 4:
					rect = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["middle"];
					break;
				case 5:
					rect = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["right"];
					break;
				case 6:
					rect = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["bottom.left"];
					break;
				case 7:
					rect = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["bottom"];
					break;
				case 8:
					rect = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["bottom.right"];
					break;
				default:
					rect = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["top.left"];
				}
				var cacheId = assetID + "_" + rect.x + "_" + rect.y + "_" + rect.width + "_" + rect.height + "_";
				sectionCounter.subKeys.push(cacheId);
			}
			flixel_addons_ui_FlxUI9SliceSprite.cacheCounter.h[uniqueID] = sectionCounter;
		}
		flixel_addons_ui_FlxUI9SliceSprite.paintCompoundBitmap(g,assetID,flixel_addons_ui_FlxUI9SliceSprite._staticRects,rc,tile,smooth,raw);
		return uniqueID;
	}
	return "";
};
flixel_addons_ui_FlxUI9SliceSprite.makePaintScale9Id = function(assetId,slice9,rect) {
	var tmp = assetId + "_" + slice9.join(",") + "_";
	var value = rect.x;
	var _this = flixel_util_LabelValuePair._pool.get();
	_this.label = "x";
	_this.value = value;
	var value = rect.y;
	var _this1 = flixel_util_LabelValuePair._pool.get();
	_this1.label = "y";
	_this1.value = value;
	var value = rect.width;
	var _this2 = flixel_util_LabelValuePair._pool.get();
	_this2.label = "w";
	_this2.value = value;
	var value = rect.height;
	var _this3 = flixel_util_LabelValuePair._pool.get();
	_this3.label = "h";
	_this3.value = value;
	return tmp + flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3]);
};
flixel_addons_ui_FlxUI9SliceSprite.paintCompoundBitmap = function(g,assetID,sourceRects,targetRect,tile,smooth,raw) {
	if(smooth == null) {
		smooth = false;
	}
	if(tile == null) {
		tile = 0;
	}
	targetRect.x = targetRect.x | 0;
	targetRect.y = targetRect.y | 0;
	targetRect.width = targetRect.width | 0;
	targetRect.height = targetRect.height | 0;
	var tl = sourceRects.h["top.left"];
	if(tl != null) {
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2;
		var X = 0;
		var Y = 0;
		var Width = tl.width;
		var Height = tl.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		flixel_addons_ui_FlxUI9SliceSprite.paintBitmapSection(g,assetID,tl,flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2,null,0,smooth,raw);
	}
	var tr = sourceRects.h["top.right"];
	if(tr != null) {
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2;
		var X = targetRect.width - tr.width;
		var Y = 0;
		var Width = tr.width;
		var Height = tr.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		flixel_addons_ui_FlxUI9SliceSprite.paintBitmapSection(g,assetID,tr,flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2,null,0,smooth,raw);
	}
	var t = sourceRects.h["top"];
	if(t != null) {
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2;
		var X = tl.width;
		var Y = 0;
		var Width = targetRect.width - tl.width - tr.width;
		var Height = t.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		flixel_addons_ui_FlxUI9SliceSprite.paintBitmapSection(g,assetID,t,flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2,null,tile & 16,smooth,raw);
	}
	var bl = sourceRects.h["bottom.left"];
	if(bl != null) {
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2;
		var X = 0;
		var Y = targetRect.height - bl.height;
		var Width = bl.width;
		var Height = bl.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		flixel_addons_ui_FlxUI9SliceSprite.paintBitmapSection(g,assetID,bl,flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2,null,0,smooth,raw);
	}
	var br = sourceRects.h["bottom.right"];
	if(br != null) {
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2;
		var X = targetRect.width - br.width;
		var Y = targetRect.height - br.height;
		var Width = br.width;
		var Height = br.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		flixel_addons_ui_FlxUI9SliceSprite.paintBitmapSection(g,assetID,br,flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2,null,0,smooth,raw);
	}
	var b = sourceRects.h["bottom"];
	if(b != null) {
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2;
		var X = bl.width;
		var Y = targetRect.height - b.height;
		var Width = targetRect.width - bl.width - br.width;
		var Height = b.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		flixel_addons_ui_FlxUI9SliceSprite.paintBitmapSection(g,assetID,b,flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2,null,tile & 16,smooth,raw);
	}
	var l = sourceRects.h["left"];
	if(l != null) {
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2;
		var X = 0;
		var Y = tl.height;
		var Width = l.width;
		var Height = targetRect.height - tl.height - bl.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		flixel_addons_ui_FlxUI9SliceSprite.paintBitmapSection(g,assetID,l,flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2,null,tile & 1,smooth,raw);
	}
	var r = sourceRects.h["right"];
	if(r != null) {
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2;
		var X = targetRect.width - r.width;
		var Y = tr.height;
		var Width = r.width;
		var Height = targetRect.height - tl.height - bl.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		flixel_addons_ui_FlxUI9SliceSprite.paintBitmapSection(g,assetID,r,flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2,null,tile & 1,smooth,raw);
	}
	var m = sourceRects.h["middle"];
	if(m != null) {
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2;
		var X = l.width;
		var Y = t.height;
		var Width = targetRect.width - l.width - r.width;
		var Height = targetRect.height - t.height - b.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		flixel_addons_ui_FlxUI9SliceSprite.paintBitmapSection(g,assetID,m,flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2,null,tile,smooth,raw);
	}
};
flixel_addons_ui_FlxUI9SliceSprite.paintBitmapSection = function(g,assetId,src,dst,srcData,tile,smooth,raw) {
	if(smooth == null) {
		smooth = false;
	}
	if(tile == null) {
		tile = 0;
	}
	if(srcData == null) {
		if(raw != null) {
			srcData = raw;
		} else {
			srcData = flixel_addons_ui_U.getBmp(assetId);
		}
	}
	src.x = src.x | 0;
	src.y = src.y | 0;
	src.width = src.width | 0;
	src.height = src.height | 0;
	dst.x = dst.x | 0;
	dst.y = dst.y | 0;
	dst.width = dst.width | 0;
	dst.height = dst.height | 0;
	var section = null;
	var cacheId = null;
	if(flixel_addons_ui_FlxUI9SliceSprite.useSectionCache == true && assetId != null) {
		if(flixel_addons_ui_FlxUI9SliceSprite.sectionCache == null) {
			flixel_addons_ui_FlxUI9SliceSprite.sectionCache = new haxe_ds_StringMap();
		}
		cacheId = assetId + "_" + src.x + "_" + src.y + "_" + src.width + "_" + src.height + "_";
		section = flixel_addons_ui_FlxUI9SliceSprite.sectionCache.h[cacheId];
	}
	if(section == null) {
		var fillcolor = 16777215;
		section = new openfl_display_BitmapData(src.width | 0,src.height | 0,true,fillcolor);
		flixel_addons_ui_FlxUI9SliceSprite._staticRect2.x = src.x;
		flixel_addons_ui_FlxUI9SliceSprite._staticRect2.y = src.y;
		flixel_addons_ui_FlxUI9SliceSprite._staticRect2.width = src.width;
		flixel_addons_ui_FlxUI9SliceSprite._staticRect2.height = src.height;
		section.copyPixels(srcData,flixel_addons_ui_FlxUI9SliceSprite._staticRect2,flixel_addons_ui_FlxUI9SliceSprite._staticPointZero);
		if(flixel_addons_ui_FlxUI9SliceSprite.useSectionCache == true && cacheId != null) {
			flixel_addons_ui_FlxUI9SliceSprite.sectionCache.h[cacheId] = section;
		}
		flixel_addons_ui_FlxUI9SliceSprite.bitmapsCreated++;
	}
	if(dst.width > 0 && dst.height > 0) {
		flixel_addons_ui_FlxUI9SliceSprite._staticRect2.x = dst.x;
		flixel_addons_ui_FlxUI9SliceSprite._staticRect2.y = dst.y;
		flixel_addons_ui_FlxUI9SliceSprite._staticRect2.width = dst.width;
		flixel_addons_ui_FlxUI9SliceSprite._staticRect2.height = dst.height;
		flixel_addons_ui_FlxUI9SliceSprite.bitmapFillRect(g,flixel_addons_ui_FlxUI9SliceSprite._staticRect2,section,tile,smooth);
	}
};
flixel_addons_ui_FlxUI9SliceSprite.bitmapFillRect = function(g,dst,section,tile,smooth_) {
	if(smooth_ == null) {
		smooth_ = false;
	}
	if(tile == null) {
		tile = 0;
	}
	var final_pixels = new openfl_display_BitmapData(dst.width | 0,dst.height | 0,true,0);
	flixel_addons_ui_FlxUI9SliceSprite._staticMatrix.identity();
	flixel_addons_ui_FlxUI9SliceSprite._staticRect.x = 0;
	flixel_addons_ui_FlxUI9SliceSprite._staticRect.y = 0;
	flixel_addons_ui_FlxUI9SliceSprite._staticRect.width = section.width;
	flixel_addons_ui_FlxUI9SliceSprite._staticRect.height = section.height;
	if((tile & 16) == 0) {
		flixel_addons_ui_FlxUI9SliceSprite._staticMatrix.scale(dst.width / section.width,1.0);
		flixel_addons_ui_FlxUI9SliceSprite._staticRect.width = dst.width;
	}
	if((tile & 1) == 0) {
		flixel_addons_ui_FlxUI9SliceSprite._staticMatrix.scale(1.0,dst.height / section.height);
		flixel_addons_ui_FlxUI9SliceSprite._staticRect.height = dst.height;
	}
	if(section.width == dst.width && section.height == dst.height) {
		flixel_addons_ui_FlxUI9SliceSprite._staticPoint.x = 0;
		flixel_addons_ui_FlxUI9SliceSprite._staticPoint.y = 0;
		final_pixels.copyPixels(section,section.rect,flixel_addons_ui_FlxUI9SliceSprite._staticPoint);
	} else if(smooth_) {
		final_pixels.draw(section,flixel_addons_ui_FlxUI9SliceSprite._staticMatrix,null,null,null,true);
	} else {
		final_pixels.draw(section,flixel_addons_ui_FlxUI9SliceSprite._staticMatrix,null,null,null,false);
	}
	if(tile != 0) {
		if((tile & 16) == 16) {
			flixel_addons_ui_FlxUI9SliceSprite._staticPoint.x = 0;
			flixel_addons_ui_FlxUI9SliceSprite._staticPoint.y = 0;
			while(flixel_addons_ui_FlxUI9SliceSprite._staticPoint.x < dst.width) {
				flixel_addons_ui_FlxUI9SliceSprite._staticPoint.x += flixel_addons_ui_FlxUI9SliceSprite._staticRect.width;
				final_pixels.copyPixels(final_pixels,flixel_addons_ui_FlxUI9SliceSprite._staticRect,flixel_addons_ui_FlxUI9SliceSprite._staticPoint);
			}
		}
		if((tile & 1) == 1) {
			flixel_addons_ui_FlxUI9SliceSprite._staticPoint.x = 0;
			flixel_addons_ui_FlxUI9SliceSprite._staticPoint.y = 0;
			flixel_addons_ui_FlxUI9SliceSprite._staticRect.width = final_pixels.width;
			while(flixel_addons_ui_FlxUI9SliceSprite._staticPoint.y < dst.height) {
				flixel_addons_ui_FlxUI9SliceSprite._staticPoint.y += flixel_addons_ui_FlxUI9SliceSprite._staticRect.height;
				final_pixels.copyPixels(final_pixels,flixel_addons_ui_FlxUI9SliceSprite._staticRect,flixel_addons_ui_FlxUI9SliceSprite._staticPoint);
			}
		}
	}
	flixel_addons_ui_FlxUI9SliceSprite._staticPoint.x = dst.x;
	flixel_addons_ui_FlxUI9SliceSprite._staticPoint.y = dst.y;
	g.copyPixels(final_pixels,final_pixels.rect,flixel_addons_ui_FlxUI9SliceSprite._staticPoint);
	final_pixels = flixel_util_FlxDestroyUtil.dispose(final_pixels);
};
flixel_addons_ui_FlxUI9SliceSprite.__super__ = flixel_addons_ui_FlxUISprite;
flixel_addons_ui_FlxUI9SliceSprite.prototype = $extend(flixel_addons_ui_FlxUISprite.prototype,{
	_bmpCanvas: null
	,paintScale9_id: null
	,_slice9: null
	,_tile: null
	,_smooth: null
	,_asset_id: null
	,_raw_pixels: null
	,destroy: function() {
		this.noLongerUsingCachedID(this.paintScale9_id);
		flixel_addons_ui_FlxUISprite.prototype.destroy.call(this);
	}
	,resize: function(w,h) {
		if((w | 0) < 1) {
			w = 1;
		}
		if((h | 0) < 1) {
			h = 1;
		}
		var old_width = this.get_width();
		var old_height = this.get_height();
		var pt = flixel_addons_ui_U.applyResize(this.resize_ratio,this.resize_ratio_axis,w,h);
		w = pt.x;
		h = pt.y;
		var iw = pt.x | 0;
		var ih = pt.y | 0;
		if(this._slice9 == null || this._slice9 == []) {
			this._slice9 = [4,4,7,7];
		}
		var key = this._asset_id + "_" + this._slice9.join(",") + "_" + iw + "x" + ih + "_" + this._tile + "_" + Std.string(this._smooth);
		if(flixel_FlxG.bitmap._cache.h[key] != null) {
			this.loadGraphic(key,false,iw,ih);
		} else {
			var bmpCanvas = new openfl_display_BitmapData(w | 0,h | 0);
			flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect.x = 0;
			flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect.y = 0;
			flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect.width = w;
			flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect.height = h;
			var oldID = this.paintScale9_id;
			var newID = flixel_addons_ui_FlxUI9SliceSprite.makePaintScale9Id(this._asset_id,this._slice9,flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect);
			if(newID != oldID) {
				this.paintScale9_id = flixel_addons_ui_FlxUI9SliceSprite.paintScale9(bmpCanvas,this._asset_id,this._slice9,flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect,this._tile,this._smooth,this._raw_pixels);
				var sectionCounter = flixel_addons_ui_FlxUI9SliceSprite.cacheCounter.h[this.paintScale9_id];
				sectionCounter.useCount++;
				this.noLongerUsingCachedID(oldID);
			}
			this.loadGraphic(bmpCanvas,false,bmpCanvas.width,bmpCanvas.height,false,key);
		}
		var diff_w = this.get_width() - old_width;
		var diff_h = this.get_height() - old_height;
		if(this.resize_point != null) {
			var delta_x = diff_w * this.resize_point.x;
			var delta_y = diff_h * this.resize_point.y;
			var _g = this;
			_g.set_x(_g.x - delta_x);
			var _g = this;
			_g.set_y(_g.y - delta_y);
		}
	}
	,noLongerUsingCachedID: function(id) {
		if(Object.prototype.hasOwnProperty.call(flixel_addons_ui_FlxUI9SliceSprite.cacheCounter.h,id)) {
			var oldCounter = flixel_addons_ui_FlxUI9SliceSprite.cacheCounter.h[id];
			oldCounter.useCount--;
			if(oldCounter.useCount <= 0) {
				this.purgeSections(id);
			}
		}
	}
	,purgeSections: function(id) {
		var counter = flixel_addons_ui_FlxUI9SliceSprite.cacheCounter.h[id];
		if(counter != null) {
			var _g = 0;
			var _g1 = counter.subKeys;
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				var _this = flixel_addons_ui_FlxUI9SliceSprite.sectionCache;
				if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
					delete(_this.h[key]);
				}
			}
			counter.subKeys = null;
			var _this = flixel_addons_ui_FlxUI9SliceSprite.cacheCounter;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
		}
	}
	,__class__: flixel_addons_ui_FlxUI9SliceSprite
});
var flixel_addons_ui_FlxUIAssets = function() { };
$hxClasses["flixel.addons.ui.FlxUIAssets"] = flixel_addons_ui_FlxUIAssets;
flixel_addons_ui_FlxUIAssets.__name__ = "flixel.addons.ui.FlxUIAssets";
var flixel_ui_FlxBar = function(x,y,direction,width,height,parentRef,variable,min,max,showBorder) {
	if(showBorder == null) {
		showBorder = false;
	}
	if(max == null) {
		max = 100;
	}
	if(min == null) {
		min = 0;
	}
	if(variable == null) {
		variable = "";
	}
	if(height == null) {
		height = 10;
	}
	if(width == null) {
		width = 100;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this._maxPercent = 100;
	this.numDivisions = 100;
	this.killOnEmpty = false;
	this.fixedPosition = true;
	flixel_FlxSprite.call(this,x,y);
	if(direction == null) {
		direction = flixel_ui_FlxBarFillDirection.LEFT_TO_RIGHT;
	}
	this.barWidth = width;
	this.barHeight = height;
	this._filledBarPoint = new openfl_geom_Point();
	this._filledBarRect = new openfl_geom_Rectangle();
	if(flixel_FlxG.renderBlit) {
		this._zeroOffset = new openfl_geom_Point();
		this._emptyBarRect = new openfl_geom_Rectangle();
		this.makeGraphic(width,height,0,true);
	} else {
		var _this = flixel_math_FlxRect._pool.get();
		var X = 0;
		var Y = 0;
		var Width = 0;
		var Height = 0;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var rect = _this;
		rect._inPool = false;
		this._filledFlxRect = rect;
	}
	if(parentRef != null) {
		this.parent = parentRef;
		this.parentVariable = variable;
	}
	this.set_fillDirection(direction);
	this.createFilledBar(-16756480,-16714752,showBorder);
	this.setRange(min,max);
};
$hxClasses["flixel.ui.FlxBar"] = flixel_ui_FlxBar;
flixel_ui_FlxBar.__name__ = "flixel.ui.FlxBar";
flixel_ui_FlxBar.__super__ = flixel_FlxSprite;
flixel_ui_FlxBar.prototype = $extend(flixel_FlxSprite.prototype,{
	fixedPosition: null
	,pxPerPercent: null
	,positionOffset: null
	,killOnEmpty: null
	,value: null
	,min: null
	,max: null
	,range: null
	,pct: null
	,numDivisions: null
	,emptyCallback: null
	,filledCallback: null
	,parent: null
	,parentVariable: null
	,barWidth: null
	,barHeight: null
	,frontFrames: null
	,fillDirection: null
	,_fillHorizontal: null
	,_frontFrame: null
	,_filledFlxRect: null
	,_emptyBar: null
	,_emptyBarRect: null
	,_filledBar: null
	,_zeroOffset: null
	,_filledBarRect: null
	,_filledBarPoint: null
	,_maxPercent: null
	,destroy: function() {
		this.positionOffset = flixel_util_FlxDestroyUtil.put(this.positionOffset);
		if(flixel_FlxG.renderBlit) {
			this._frontFrame = null;
			this._filledFlxRect = flixel_util_FlxDestroyUtil.put(this._filledFlxRect);
		} else {
			this._emptyBarRect = null;
			this._zeroOffset = null;
			this._emptyBar = flixel_util_FlxDestroyUtil.dispose(this._emptyBar);
			this._filledBar = flixel_util_FlxDestroyUtil.dispose(this._filledBar);
		}
		this._filledBarRect = null;
		this._filledBarPoint = null;
		this.parent = null;
		this.positionOffset = null;
		this.emptyCallback = null;
		this.filledCallback = null;
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,trackParent: function(offsetX,offsetY) {
		this.fixedPosition = false;
		var X = offsetX;
		var Y = offsetY;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.positionOffset = point;
		if(Object.prototype.hasOwnProperty.call(this.parent,"scrollFactor")) {
			this.scrollFactor.set_x(this.parent.scrollFactor.x);
			this.scrollFactor.set_y(this.parent.scrollFactor.y);
		}
	}
	,setParent: function(parentRef,variable,track,offsetX,offsetY) {
		if(offsetY == null) {
			offsetY = 0;
		}
		if(offsetX == null) {
			offsetX = 0;
		}
		if(track == null) {
			track = false;
		}
		this.parent = parentRef;
		this.parentVariable = variable;
		if(track) {
			this.trackParent(offsetX,offsetY);
		}
		this.updateValueFromParent();
	}
	,stopTrackingParent: function(posX,posY) {
		this.fixedPosition = true;
		this.set_x(posX);
		this.set_y(posY);
	}
	,setCallbacks: function(onEmpty,onFilled,killOnEmpty) {
		if(killOnEmpty == null) {
			killOnEmpty = false;
		}
		this.emptyCallback = onEmpty != null ? onEmpty : this.emptyCallback;
		this.filledCallback = onFilled != null ? onFilled : this.filledCallback;
		this.killOnEmpty = killOnEmpty;
	}
	,setRange: function(min,max) {
		if(max <= min) {
			throw haxe_Exception.thrown("FlxBar: max cannot be less than or equal to min");
		}
		this.min = min;
		this.max = max;
		this.range = max - min;
		this.pct = this.range / this._maxPercent;
		this.pxPerPercent = this._fillHorizontal ? this.barWidth / this._maxPercent : this.barHeight / this._maxPercent;
		var f = this.get_value();
		if(!isNaN(f)) {
			this.set_value(Math.max(min,Math.min(this.get_value(),max)));
		} else {
			this.set_value(min);
		}
	}
	,createFilledBar: function(empty,fill,showBorder,border) {
		if(border == null) {
			border = -1;
		}
		if(showBorder == null) {
			showBorder = false;
		}
		this.createColoredEmptyBar(empty,showBorder,border);
		this.createColoredFilledBar(fill,showBorder,border);
		return this;
	}
	,createColoredEmptyBar: function(empty,showBorder,border) {
		if(border == null) {
			border = -1;
		}
		if(showBorder == null) {
			showBorder = false;
		}
		if(flixel_FlxG.renderTile) {
			var emptyKey = "empty: " + this.barWidth + "x" + this.barHeight + ":" + ("0x" + StringTools.hex(empty >> 24 & 255,2) + StringTools.hex(empty >> 16 & 255,2) + StringTools.hex(empty >> 8 & 255,2) + StringTools.hex(empty & 255,2));
			if(showBorder) {
				emptyKey += ",border: " + ("0x" + StringTools.hex(border >> 24 & 255,2) + StringTools.hex(border >> 16 & 255,2) + StringTools.hex(border >> 8 & 255,2) + StringTools.hex(border & 255,2));
			}
			if(flixel_FlxG.bitmap._cache.h[emptyKey] == null) {
				var emptyBar = null;
				if(showBorder) {
					emptyBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
					emptyBar.fillRect(new openfl_geom_Rectangle(1,1,this.barWidth - 2,this.barHeight - 2),empty);
				} else {
					emptyBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,empty);
				}
				flixel_FlxG.bitmap.add(emptyBar,false,emptyKey);
			}
			this.set_frames(flixel_FlxG.bitmap._cache.h[emptyKey].get_imageFrame());
		} else {
			if(showBorder) {
				this._emptyBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
				this._emptyBar.fillRect(new openfl_geom_Rectangle(1,1,this.barWidth - 2,this.barHeight - 2),empty);
			} else {
				this._emptyBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,empty);
			}
			this._emptyBarRect.setTo(0,0,this.barWidth,this.barHeight);
			this.updateEmptyBar();
		}
		return this;
	}
	,createColoredFilledBar: function(fill,showBorder,border) {
		if(border == null) {
			border = -1;
		}
		if(showBorder == null) {
			showBorder = false;
		}
		if(flixel_FlxG.renderTile) {
			var filledKey = "filled: " + this.barWidth + "x" + this.barHeight + ":" + ("0x" + StringTools.hex(fill >> 24 & 255,2) + StringTools.hex(fill >> 16 & 255,2) + StringTools.hex(fill >> 8 & 255,2) + StringTools.hex(fill & 255,2));
			if(showBorder) {
				filledKey += ",border: " + ("0x" + StringTools.hex(border >> 24 & 255,2) + StringTools.hex(border >> 16 & 255,2) + StringTools.hex(border >> 8 & 255,2) + StringTools.hex(border & 255,2));
			}
			if(flixel_FlxG.bitmap._cache.h[filledKey] == null) {
				var filledBar = null;
				if(showBorder) {
					filledBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
					filledBar.fillRect(new openfl_geom_Rectangle(1,1,this.barWidth - 2,this.barHeight - 2),fill);
				} else {
					filledBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,fill);
				}
				flixel_FlxG.bitmap.add(filledBar,false,filledKey);
			}
			this.set_frontFrames(flixel_FlxG.bitmap._cache.h[filledKey].get_imageFrame());
		} else {
			if(showBorder) {
				this._filledBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
				this._filledBar.fillRect(new openfl_geom_Rectangle(1,1,this.barWidth - 2,this.barHeight - 2),fill);
			} else {
				this._filledBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,fill);
			}
			this._filledBarRect.setTo(0,0,this.barWidth,this.barHeight);
			this.updateFilledBar();
		}
		return this;
	}
	,createGradientBar: function(empty,fill,chunkSize,rotation,showBorder,border) {
		if(border == null) {
			border = -1;
		}
		if(showBorder == null) {
			showBorder = false;
		}
		if(rotation == null) {
			rotation = 180;
		}
		if(chunkSize == null) {
			chunkSize = 1;
		}
		this.createGradientEmptyBar(empty,chunkSize,rotation,showBorder,border);
		this.createGradientFilledBar(fill,chunkSize,rotation,showBorder,border);
		return this;
	}
	,createGradientEmptyBar: function(empty,chunkSize,rotation,showBorder,border) {
		if(border == null) {
			border = -1;
		}
		if(showBorder == null) {
			showBorder = false;
		}
		if(rotation == null) {
			rotation = 180;
		}
		if(chunkSize == null) {
			chunkSize = 1;
		}
		if(flixel_FlxG.renderTile) {
			var emptyKey = "Gradient:" + this.barWidth + "x" + this.barHeight + ",colors:[";
			var _g = 0;
			while(_g < empty.length) {
				var col = empty[_g];
				++_g;
				emptyKey += "0x" + StringTools.hex(col >> 24 & 255,2) + StringTools.hex(col >> 16 & 255,2) + StringTools.hex(col >> 8 & 255,2) + StringTools.hex(col & 255,2) + ",";
			}
			emptyKey += "],chunkSize: " + chunkSize + ",rotation: " + rotation;
			if(showBorder) {
				emptyKey += ",border: " + ("0x" + StringTools.hex(border >> 24 & 255,2) + StringTools.hex(border >> 16 & 255,2) + StringTools.hex(border >> 8 & 255,2) + StringTools.hex(border & 255,2));
			}
			if(flixel_FlxG.bitmap._cache.h[emptyKey] == null) {
				var emptyBar = null;
				if(showBorder) {
					emptyBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
					flixel_util_FlxGradient.overlayGradientOnBitmapData(emptyBar,this.barWidth - 2,this.barHeight - 2,empty,1,1,chunkSize,rotation);
				} else {
					emptyBar = flixel_util_FlxGradient.createGradientBitmapData(this.barWidth,this.barHeight,empty,chunkSize,rotation);
				}
				flixel_FlxG.bitmap.add(emptyBar,false,emptyKey);
			}
			this.set_frames(flixel_FlxG.bitmap._cache.h[emptyKey].get_imageFrame());
		} else {
			if(showBorder) {
				this._emptyBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
				flixel_util_FlxGradient.overlayGradientOnBitmapData(this._emptyBar,this.barWidth - 2,this.barHeight - 2,empty,1,1,chunkSize,rotation);
			} else {
				this._emptyBar = flixel_util_FlxGradient.createGradientBitmapData(this.barWidth,this.barHeight,empty,chunkSize,rotation);
			}
			this._emptyBarRect.setTo(0,0,this.barWidth,this.barHeight);
			this.updateEmptyBar();
		}
		return this;
	}
	,createGradientFilledBar: function(fill,chunkSize,rotation,showBorder,border) {
		if(border == null) {
			border = -1;
		}
		if(showBorder == null) {
			showBorder = false;
		}
		if(rotation == null) {
			rotation = 180;
		}
		if(chunkSize == null) {
			chunkSize = 1;
		}
		if(flixel_FlxG.renderTile) {
			var filledKey = "Gradient:" + this.barWidth + "x" + this.barHeight + ",colors:[";
			var _g = 0;
			while(_g < fill.length) {
				var col = fill[_g];
				++_g;
				filledKey += "0x" + StringTools.hex(col >> 24 & 255,2) + StringTools.hex(col >> 16 & 255,2) + StringTools.hex(col >> 8 & 255,2) + StringTools.hex(col & 255,2) + ",";
			}
			filledKey += "],chunkSize: " + chunkSize + ",rotation: " + rotation;
			if(showBorder) {
				filledKey += ",border: " + ("0x" + StringTools.hex(border >> 24 & 255,2) + StringTools.hex(border >> 16 & 255,2) + StringTools.hex(border >> 8 & 255,2) + StringTools.hex(border & 255,2));
			}
			if(flixel_FlxG.bitmap._cache.h[filledKey] == null) {
				var filledBar = null;
				if(showBorder) {
					filledBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
					flixel_util_FlxGradient.overlayGradientOnBitmapData(filledBar,this.barWidth - 2,this.barHeight - 2,fill,1,1,chunkSize,rotation);
				} else {
					filledBar = flixel_util_FlxGradient.createGradientBitmapData(this.barWidth,this.barHeight,fill,chunkSize,rotation);
				}
				flixel_FlxG.bitmap.add(filledBar,false,filledKey);
			}
			this.set_frontFrames(flixel_FlxG.bitmap._cache.h[filledKey].get_imageFrame());
		} else {
			if(showBorder) {
				this._filledBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
				flixel_util_FlxGradient.overlayGradientOnBitmapData(this._filledBar,this.barWidth - 2,this.barHeight - 2,fill,1,1,chunkSize,rotation);
			} else {
				this._filledBar = flixel_util_FlxGradient.createGradientBitmapData(this.barWidth,this.barHeight,fill,chunkSize,rotation);
			}
			this._filledBarRect.setTo(0,0,this.barWidth,this.barHeight);
			this.updateFilledBar();
		}
		return this;
	}
	,createImageBar: function(empty,fill,emptyBackground,fillBackground) {
		if(fillBackground == null) {
			fillBackground = -16711936;
		}
		if(emptyBackground == null) {
			emptyBackground = -16777216;
		}
		this.createImageEmptyBar(empty,emptyBackground);
		this.createImageFilledBar(fill,fillBackground);
		return this;
	}
	,createImageEmptyBar: function(empty,emptyBackground) {
		if(emptyBackground == null) {
			emptyBackground = -16777216;
		}
		if(empty != null) {
			var emptyGraphic = flixel_FlxG.bitmap.add(empty);
			if(flixel_FlxG.renderTile) {
				this.set_frames(emptyGraphic.get_imageFrame());
			} else {
				this._emptyBar = emptyGraphic.bitmap.clone();
				this.barWidth = this._emptyBar.width;
				this.barHeight = this._emptyBar.height;
				this._emptyBarRect.setTo(0,0,this.barWidth,this.barHeight);
				if(this.graphic == null || (this.frame.sourceSize.x != this.barWidth || this.frame.sourceSize.y != this.barHeight)) {
					this.makeGraphic(this.barWidth,this.barHeight,0,true);
				}
				this.updateEmptyBar();
			}
		} else {
			this.createColoredEmptyBar(emptyBackground);
		}
		return this;
	}
	,createImageFilledBar: function(fill,fillBackground) {
		if(fillBackground == null) {
			fillBackground = -16711936;
		}
		if(fill != null) {
			var filledGraphic = flixel_FlxG.bitmap.add(fill);
			if(flixel_FlxG.renderTile) {
				this.set_frontFrames(filledGraphic.get_imageFrame());
			} else {
				this._filledBar = filledGraphic.bitmap.clone();
				this._filledBarRect.setTo(0,0,this.barWidth,this.barHeight);
				if(this.graphic == null || (this.frame.sourceSize.x != this.barWidth || this.frame.sourceSize.y != this.barHeight)) {
					this.makeGraphic(this.barWidth,this.barHeight,0,true);
				}
				this.pxPerPercent = this._fillHorizontal ? this.barWidth / this._maxPercent : this.barHeight / this._maxPercent;
				this.updateFilledBar();
			}
		} else {
			this.createColoredFilledBar(fillBackground);
		}
		return this;
	}
	,set_fillDirection: function(direction) {
		this.fillDirection = direction;
		switch(direction._hx_index) {
		case 2:case 3:case 6:case 7:
			this._fillHorizontal = false;
			break;
		case 0:case 1:case 4:case 5:
			this._fillHorizontal = true;
			break;
		}
		return this.fillDirection;
	}
	,updateValueFromParent: function() {
		this.set_value(Reflect.getProperty(this.parent,this.parentVariable));
	}
	,updateBar: function() {
		this.updateEmptyBar();
		this.updateFilledBar();
	}
	,updateEmptyBar: function() {
		if(flixel_FlxG.renderBlit) {
			this.get_pixels().copyPixels(this._emptyBar,this._emptyBarRect,this._zeroOffset);
			this.dirty = true;
		}
	}
	,updateFilledBar: function() {
		this._filledBarRect.width = this.barWidth;
		this._filledBarRect.height = this.barHeight;
		var fraction = (this.get_value() - this.min) / this.range;
		var percent = fraction * this._maxPercent;
		var maxScale = this._fillHorizontal ? this.barWidth : this.barHeight;
		var scaleInterval = maxScale / this.numDivisions;
		var interval = Math.round((fraction * maxScale / scaleInterval | 0) * scaleInterval);
		if(this._fillHorizontal) {
			this._filledBarRect.width = interval | 0;
		} else {
			this._filledBarRect.height = interval | 0;
		}
		if(percent > 0) {
			switch(this.fillDirection._hx_index) {
			case 1:
				this._filledBarRect.x = this.barWidth - this._filledBarRect.width;
				this._filledBarPoint.x = this.barWidth - this._filledBarRect.width;
				break;
			case 0:case 2:
				break;
			case 3:
				this._filledBarRect.y = this.barHeight - this._filledBarRect.height;
				this._filledBarPoint.y = this.barHeight - this._filledBarRect.height;
				break;
			case 4:
				this._filledBarRect.x = this.barWidth / 2 - this._filledBarRect.width / 2 | 0;
				this._filledBarPoint.x = this.barWidth / 2 - this._filledBarRect.width / 2 | 0;
				break;
			case 5:
				this._filledBarRect.width = maxScale - interval | 0;
				this._filledBarPoint.x = (this.barWidth - this._filledBarRect.width) / 2 | 0;
				break;
			case 6:
				this._filledBarRect.y = this.barHeight / 2 - this._filledBarRect.height / 2 | 0;
				this._filledBarPoint.y = this.barHeight / 2 - this._filledBarRect.height / 2 | 0;
				break;
			case 7:
				this._filledBarRect.height = maxScale - interval | 0;
				this._filledBarPoint.y = (this.barHeight - this._filledBarRect.height) / 2 | 0;
				break;
			}
			if(flixel_FlxG.renderBlit) {
				this.get_pixels().copyPixels(this._filledBar,this._filledBarRect,this._filledBarPoint,null,null,true);
			} else if(this.get_frontFrames() != null) {
				var _this = this._filledFlxRect;
				var FlashRect = this._filledBarRect;
				_this.x = FlashRect.x;
				_this.y = FlashRect.y;
				_this.width = FlashRect.width;
				_this.height = FlashRect.height;
				var _this1 = _this;
				_this1.x = Math.round(_this1.x);
				_this1.y = Math.round(_this1.y);
				_this1.width = Math.round(_this1.width);
				_this1.height = Math.round(_this1.height);
				if((percent | 0) > 0) {
					this._frontFrame = this.get_frontFrames().get_frame().clipTo(this._filledFlxRect,this._frontFrame);
				}
			}
		}
		if(flixel_FlxG.renderBlit) {
			this.dirty = true;
		}
	}
	,update: function(elapsed) {
		if(this.parent != null) {
			if(Reflect.getProperty(this.parent,this.parentVariable) != this.get_value()) {
				this.updateValueFromParent();
			}
			if(!this.fixedPosition) {
				this.set_x(this.parent.x + this.positionOffset.x);
				this.set_y(this.parent.y + this.positionOffset.y);
			}
		}
		flixel_FlxSprite.prototype.update.call(this,elapsed);
	}
	,draw: function() {
		flixel_FlxSprite.prototype.draw.call(this);
		if(!flixel_FlxG.renderTile) {
			return;
		}
		if(this.alpha == 0) {
			return;
		}
		if(this.get_percent() > 0 && this._frontFrame.type != 2) {
			var _g = 0;
			var _g1 = this.get_cameras();
			while(_g < _g1.length) {
				var camera = _g1[_g];
				++_g;
				if(!camera.visible || !camera.exists || !this.isOnScreen(camera)) {
					continue;
				}
				this.getScreenPosition(this._point,camera).subtractPoint(this.offset);
				this._frontFrame.prepareMatrix(this._matrix,0,this.flipX,this.flipY);
				this._matrix.translate(-this.origin.x,-this.origin.y);
				this._matrix.scale(this.scale.x,this.scale.y);
				if(this.angle != 0) {
					var _this = this._matrix;
					var cos = this._cosAngle;
					var sin = this._sinAngle;
					var a1 = _this.a * cos - _this.b * sin;
					_this.b = _this.a * sin + _this.b * cos;
					_this.a = a1;
					var c1 = _this.c * cos - _this.d * sin;
					_this.d = _this.c * sin + _this.d * cos;
					_this.c = c1;
					var tx1 = _this.tx * cos - _this.ty * sin;
					_this.ty = _this.tx * sin + _this.ty * cos;
					_this.tx = tx1;
				}
				var _this1 = this._point;
				var X = this.origin.x;
				var Y = this.origin.y;
				if(Y == null) {
					Y = 0;
				}
				if(X == null) {
					X = 0;
				}
				var _g2 = _this1;
				_g2.set_x(_g2.x + X);
				var _g3 = _this1;
				_g3.set_y(_g3.y + Y);
				if(this.isPixelPerfectRender(camera)) {
					var _this2 = this._point;
					_this2.set_x(Math.floor(_this2.x));
					_this2.set_y(Math.floor(_this2.y));
				}
				this._matrix.translate(this._point.x,this._point.y);
				camera.drawPixels(this._frontFrame,null,this._matrix,this.colorTransform,this.blend,this.antialiasing,this.shader);
			}
		}
	}
	,set_pixels: function(Pixels) {
		if(flixel_FlxG.renderTile) {
			return Pixels;
		} else {
			return flixel_FlxSprite.prototype.set_pixels.call(this,Pixels);
		}
	}
	,toString: function() {
		var value = this.min;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "min";
		_this.value = value;
		var value = this.max;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "max";
		_this1.value = value;
		var value = this.range;
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "range";
		_this2.value = value;
		var value = this.pct;
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "%";
		_this3.value = value;
		var value = this.pxPerPercent;
		var _this4 = flixel_util_LabelValuePair._pool.get();
		_this4.label = "px/%";
		_this4.value = value;
		var value = this.get_value();
		var _this5 = flixel_util_LabelValuePair._pool.get();
		_this5.label = "value";
		_this5.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3,_this4,_this5]);
	}
	,get_percent: function() {
		if(this.get_value() > this.max) {
			return this._maxPercent;
		}
		return Math.floor((this.get_value() - this.min) / this.range * this._maxPercent);
	}
	,set_percent: function(newPct) {
		if(newPct >= 0 && newPct <= this._maxPercent) {
			this.set_value(this.pct * newPct);
		}
		return newPct;
	}
	,set_value: function(newValue) {
		this.value = Math.max(this.min,Math.min(newValue,this.max));
		if(this.get_value() == this.min && this.emptyCallback != null) {
			this.emptyCallback();
		}
		if(this.get_value() == this.max && this.filledCallback != null) {
			this.filledCallback();
		}
		if(this.get_value() == this.min && this.killOnEmpty) {
			this.kill();
		}
		this.updateBar();
		return newValue;
	}
	,get_value: function() {
		return this.value;
	}
	,set_numDivisions: function(newValue) {
		this.numDivisions = newValue > 0 ? newValue : 100;
		this.updateFilledBar();
		return newValue;
	}
	,get_frontFrames: function() {
		if(flixel_FlxG.renderTile) {
			return this.frontFrames;
		}
		return null;
	}
	,set_frontFrames: function(value) {
		if(flixel_FlxG.renderTile) {
			this.frontFrames = value;
			this._frontFrame = value != null ? value.get_frame().copyTo(this._frontFrame) : null;
		} else {
			this.createImageFilledBar(value.get_frame().paint());
		}
		return value;
	}
	,get_backFrames: function() {
		if(flixel_FlxG.renderTile) {
			return this.frames;
		}
		return null;
	}
	,set_backFrames: function(value) {
		if(flixel_FlxG.renderTile) {
			this.set_frames(value);
		} else {
			this.createImageEmptyBar(value.get_frame().paint());
		}
		return value;
	}
	,__class__: flixel_ui_FlxBar
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{set_fillDirection:"set_fillDirection",set_backFrames:"set_backFrames",get_backFrames:"get_backFrames",set_frontFrames:"set_frontFrames",get_frontFrames:"get_frontFrames",set_numDivisions:"set_numDivisions",set_value:"set_value",get_value:"get_value",set_percent:"set_percent",get_percent:"get_percent"})
});
var flixel_addons_ui_interfaces_IHasParams = function() { };
$hxClasses["flixel.addons.ui.interfaces.IHasParams"] = flixel_addons_ui_interfaces_IHasParams;
flixel_addons_ui_interfaces_IHasParams.__name__ = "flixel.addons.ui.interfaces.IHasParams";
flixel_addons_ui_interfaces_IHasParams.__isInterface__ = true;
flixel_addons_ui_interfaces_IHasParams.prototype = {
	params: null
	,set_params: null
	,__class__: flixel_addons_ui_interfaces_IHasParams
	,__properties__: {set_params:"set_params"}
};
var flixel_addons_ui_FlxUIBar = function(x,y,direction,width,height,parentRef,variable,min,max,showBorder) {
	if(showBorder == null) {
		showBorder = false;
	}
	if(max == null) {
		max = 100;
	}
	if(min == null) {
		min = 0;
	}
	if(variable == null) {
		variable = "";
	}
	if(height == null) {
		height = 10;
	}
	if(width == null) {
		width = 100;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	flixel_ui_FlxBar.call(this,x,y,direction,width,height,parentRef,variable,min,max,showBorder);
};
$hxClasses["flixel.addons.ui.FlxUIBar"] = flixel_addons_ui_FlxUIBar;
flixel_addons_ui_FlxUIBar.__name__ = "flixel.addons.ui.FlxUIBar";
flixel_addons_ui_FlxUIBar.__interfaces__ = [flixel_addons_ui_interfaces_IHasParams,flixel_addons_ui_interfaces_IFlxUIWidget,flixel_addons_ui_interfaces_IResizable];
flixel_addons_ui_FlxUIBar.__super__ = flixel_ui_FlxBar;
flixel_addons_ui_FlxUIBar.prototype = $extend(flixel_ui_FlxBar.prototype,{
	name: null
	,style: null
	,params: null
	,broadcastToFlxUI: null
	,clone: function() {
		var w = this.get_width() | 0;
		var h = this.get_height() | 0;
		var showBorder = this.style != null && this.style.borderColor != null;
		if(showBorder) {
			w -= 2;
			h -= 2;
		}
		var b = new flixel_addons_ui_FlxUIBar(this.x,this.y,this.fillDirection,w,h,this.parent,this.parentVariable,this.min,this.max,showBorder);
		b.set_style(this.style);
		b.set_value(this.get_value());
		return b;
	}
	,set_style: function(Style) {
		this.style = Style;
		this.resize(this.barWidth,this.barHeight);
		return this.style;
	}
	,resize: function(w,h) {
		this.set_width(w);
		this.set_height(h);
		this.barWidth = this.get_width() | 0;
		this.barHeight = this.get_height() | 0;
		if(flixel_FlxG.renderBlit) {
			this.makeGraphic(this.barWidth,this.barHeight,0,true);
		}
		var showBorder = this.style.borderColor != null;
		var ec = this.style.emptyColor == null ? -16777216 : this.style.emptyColor;
		var fc = this.style.filledColor == null ? -65536 : this.style.filledColor;
		var bc = this.style.borderColor == null ? -16777216 : this.style.borderColor;
		if(this.style.filledColor != null) {
			this.createFilledBar(ec,fc,showBorder,bc);
		}
		if(this.style.filledColors != null) {
			var ecs = this.style.emptyColors == null ? [-16777216] : this.style.emptyColors;
			var fcs = this.style.filledColors == null ? [-65536] : this.style.filledColors;
			var chunk = this.style.chunkSize == null ? 1 : this.style.chunkSize;
			var gradRot = this.style.emptyImgSrc == null ? 180 : this.style.gradRotation;
			this.createGradientBar(ecs,fcs,chunk,gradRot,showBorder,bc);
		}
		if(this.style.filledImgSrc != "") {
			this.createImageBar(this.style.emptyImgSrc,this.style.filledImgSrc,ec,fc);
		}
		this.setRange(this.min,this.max);
		this.set_value(this.get_value());
	}
	,set_params: function(p) {
		this.params = p;
		return this.params;
	}
	,__class__: flixel_addons_ui_FlxUIBar
	,__properties__: $extend(flixel_ui_FlxBar.prototype.__properties__,{set_params:"set_params",set_style:"set_style"})
});
var flixel_input_IFlxInput = function() { };
$hxClasses["flixel.input.IFlxInput"] = flixel_input_IFlxInput;
flixel_input_IFlxInput.__name__ = "flixel.input.IFlxInput";
flixel_input_IFlxInput.__isInterface__ = true;
flixel_input_IFlxInput.prototype = {
	get_justReleased: null
	,get_released: null
	,get_pressed: null
	,get_justPressed: null
	,__class__: flixel_input_IFlxInput
	,__properties__: {get_justPressed:"get_justPressed",get_pressed:"get_pressed",get_released:"get_released",get_justReleased:"get_justReleased"}
};
var flixel_ui_FlxTypedButton = function(X,Y,OnClick) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this.lastStatus = -1;
	this.maxInputMovement = Infinity;
	this.mouseButtons = [-1];
	this.allowSwiping = true;
	this.statusAnimations = ["normal","highlight","pressed"];
	this.labelAlphas = [0.8,1.0,0.5];
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
	point1._inPool = false;
	var point2 = flixel_math_FlxPoint._pool.get().set(0,1);
	point2._inPool = false;
	this.labelOffsets = [point,point1,point2];
	flixel_FlxSprite.call(this,X,Y);
	this.loadDefaultGraphic();
	this.onUp = new flixel_ui__$FlxButton_FlxButtonEvent(OnClick);
	this.onDown = new flixel_ui__$FlxButton_FlxButtonEvent();
	this.onOver = new flixel_ui__$FlxButton_FlxButtonEvent();
	this.onOut = new flixel_ui__$FlxButton_FlxButtonEvent();
	this.set_status(0);
	this.scrollFactor.set();
	openfl_Lib.get_current().stage.addEventListener("mouseUp",$bind(this,this.onUpEventListener));
	this.input = new flixel_input_FlxInput(0);
};
$hxClasses["flixel.ui.FlxTypedButton"] = flixel_ui_FlxTypedButton;
flixel_ui_FlxTypedButton.__name__ = "flixel.ui.FlxTypedButton";
flixel_ui_FlxTypedButton.__interfaces__ = [flixel_input_IFlxInput];
flixel_ui_FlxTypedButton.__super__ = flixel_FlxSprite;
flixel_ui_FlxTypedButton.prototype = $extend(flixel_FlxSprite.prototype,{
	label: null
	,labelOffsets: null
	,labelAlphas: null
	,statusAnimations: null
	,allowSwiping: null
	,mouseButtons: null
	,maxInputMovement: null
	,status: null
	,onUp: null
	,onDown: null
	,onOver: null
	,onOut: null
	,_spriteLabel: null
	,input: null
	,currentInput: null
	,lastStatus: null
	,graphicLoaded: function() {
		flixel_FlxSprite.prototype.graphicLoaded.call(this);
		this.setupAnimation("normal",0);
		this.setupAnimation("highlight",1);
		this.setupAnimation("pressed",2);
	}
	,loadDefaultGraphic: function() {
		this.loadGraphic("flixel/images/ui/button.png",true,80,20);
	}
	,setupAnimation: function(animationName,frameIndex) {
		frameIndex = Math.min(frameIndex,this.animation._sprite.numFrames - 1) | 0;
		this.animation.add(animationName,[frameIndex]);
	}
	,destroy: function() {
		this.set_label(flixel_util_FlxDestroyUtil.destroy(this.label));
		this._spriteLabel = null;
		this.onUp = flixel_util_FlxDestroyUtil.destroy(this.onUp);
		this.onDown = flixel_util_FlxDestroyUtil.destroy(this.onDown);
		this.onOver = flixel_util_FlxDestroyUtil.destroy(this.onOver);
		this.onOut = flixel_util_FlxDestroyUtil.destroy(this.onOut);
		this.labelOffsets = flixel_util_FlxDestroyUtil.putArray(this.labelOffsets);
		this.labelAlphas = null;
		this.currentInput = null;
		this.input = null;
		openfl_Lib.get_current().stage.removeEventListener("mouseUp",$bind(this,this.onUpEventListener));
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,update: function(elapsed) {
		flixel_FlxSprite.prototype.update.call(this,elapsed);
		if(this.visible) {
			this.updateButton();
			if(this.lastStatus != this.status) {
				this.updateStatusAnimation();
				this.lastStatus = this.status;
			}
		}
		this.input.update();
	}
	,updateStatusAnimation: function() {
		this.animation.play(this.statusAnimations[this.status]);
	}
	,draw: function() {
		flixel_FlxSprite.prototype.draw.call(this);
		if(this._spriteLabel != null && this._spriteLabel.visible) {
			this._spriteLabel.set_cameras(this.get_cameras());
			this._spriteLabel.draw();
		}
	}
	,stampOnAtlas: function(atlas) {
		var buttonNode = atlas.addNode(this.graphic.bitmap,this.graphic.key);
		var result = buttonNode != null;
		if(buttonNode != null) {
			var buttonFrames = this.frames;
			var X = buttonFrames.tileSize.x;
			var Y = buttonFrames.tileSize.y;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			var tileSize = point;
			var tileFrames = buttonNode.getTileFrames(tileSize);
			this.set_frames(tileFrames);
		}
		if(result && this.label != null) {
			var labelNode = atlas.addNode(this.label.graphic.bitmap,this.label.graphic.key);
			result = result && labelNode != null;
			if(labelNode != null) {
				this.label.set_frames(labelNode.getImageFrame());
			}
		}
		return result;
	}
	,updateButton: function() {
		var overlapFound = this.checkMouseOverlap();
		if(!overlapFound) {
			overlapFound = this.checkTouchOverlap();
		}
		if(this.currentInput != null && this.currentInput.get_justReleased() && overlapFound) {
			this.onUpHandler();
		}
		if(this.status != 0 && (!overlapFound || this.currentInput != null && this.currentInput.get_justReleased())) {
			this.onOutHandler();
		}
	}
	,checkMouseOverlap: function() {
		var overlap = false;
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = this.mouseButtons;
			while(_g2 < _g3.length) {
				var buttonID = _g3[_g2];
				++_g2;
				var button = flixel_input_mouse_FlxMouseButton.getByID(buttonID);
				if(button != null && this.checkInput(flixel_FlxG.mouse,button,button.justPressedPosition,camera)) {
					overlap = true;
				}
			}
		}
		return overlap;
	}
	,checkTouchOverlap: function() {
		var overlap = false;
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = flixel_FlxG.touches.list;
			while(_g2 < _g3.length) {
				var touch = _g3[_g2];
				++_g2;
				if(this.checkInput(touch,touch,touch.justPressedPosition,camera)) {
					overlap = true;
				}
			}
		}
		return overlap;
	}
	,checkInput: function(pointer,input,justPressedPosition,camera) {
		var tmp;
		if(this.maxInputMovement != Infinity) {
			var X = 0;
			var Y = 0;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			var point1 = point;
			point1._weak = true;
			tmp = justPressedPosition.distanceTo(pointer.getScreenPosition(null,point1)) > this.maxInputMovement;
		} else {
			tmp = false;
		}
		if(tmp && input == this.currentInput) {
			this.currentInput = null;
		} else if(this.overlapsPoint(pointer.getWorldPosition(camera,this._point),true,camera)) {
			this.updateStatus(input);
			return true;
		}
		return false;
	}
	,updateStatus: function(input) {
		if(input.get_justPressed()) {
			this.currentInput = input;
			this.onDownHandler();
		} else if(this.status == 0) {
			if(this.allowSwiping && input.get_pressed()) {
				this.onDownHandler();
			} else {
				this.onOverHandler();
			}
		}
	}
	,updateLabelPosition: function() {
		if(this._spriteLabel != null) {
			this._spriteLabel.set_x((this.pixelPerfectPosition ? Math.floor(this.x) : this.x) + this.labelOffsets[this.status].x);
			this._spriteLabel.set_y((this.pixelPerfectPosition ? Math.floor(this.y) : this.y) + this.labelOffsets[this.status].y);
		}
	}
	,updateLabelAlpha: function() {
		if(this._spriteLabel != null && this.labelAlphas.length > this.status) {
			this._spriteLabel.set_alpha(this.alpha * this.labelAlphas[this.status]);
		}
	}
	,onUpEventListener: function(_) {
		if(this.visible && this.exists && this.active && this.status == 2) {
			this.onUpHandler();
		}
	}
	,onUpHandler: function() {
		this.set_status(0);
		this.input.release();
		this.currentInput = null;
		var _this = this.onUp;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,onDownHandler: function() {
		this.set_status(2);
		this.input.press();
		var _this = this.onDown;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,onOverHandler: function() {
		if(!flixel_FlxG.mouse.enabled) {
			this.set_status(0);
			return;
		}
		this.set_status(1);
		var _this = this.onOver;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,onOutHandler: function() {
		this.set_status(0);
		this.input.release();
		var _this = this.onOut;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,set_label: function(Value) {
		if(Value != null) {
			Value.scrollFactor.put();
			Value.scrollFactor = this.scrollFactor;
		}
		this.label = Value;
		this._spriteLabel = this.label;
		this.updateLabelPosition();
		return Value;
	}
	,set_status: function(Value) {
		this.status = Value;
		this.updateLabelAlpha();
		return this.status;
	}
	,set_alpha: function(Value) {
		flixel_FlxSprite.prototype.set_alpha.call(this,Value);
		this.updateLabelAlpha();
		return this.alpha;
	}
	,set_x: function(Value) {
		flixel_FlxSprite.prototype.set_x.call(this,Value);
		this.updateLabelPosition();
		return this.x;
	}
	,set_y: function(Value) {
		flixel_FlxSprite.prototype.set_y.call(this,Value);
		this.updateLabelPosition();
		return this.y;
	}
	,get_justReleased: function() {
		return this.input.current == -1;
	}
	,get_released: function() {
		var _this = this.input;
		if(_this.current != 0) {
			return _this.current == -1;
		} else {
			return true;
		}
	}
	,get_pressed: function() {
		var _this = this.input;
		if(_this.current != 1) {
			return _this.current == 2;
		} else {
			return true;
		}
	}
	,get_justPressed: function() {
		return this.input.current == 2;
	}
	,__class__: flixel_ui_FlxTypedButton
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{get_justPressed:"get_justPressed",get_pressed:"get_pressed",get_released:"get_released",get_justReleased:"get_justReleased",set_status:"set_status",set_label:"set_label"})
});
var flixel_addons_ui_interfaces_ICursorPointable = function() { };
$hxClasses["flixel.addons.ui.interfaces.ICursorPointable"] = flixel_addons_ui_interfaces_ICursorPointable;
flixel_addons_ui_interfaces_ICursorPointable.__name__ = "flixel.addons.ui.interfaces.ICursorPointable";
flixel_addons_ui_interfaces_ICursorPointable.__isInterface__ = true;
var flixel_addons_ui_interfaces_IFlxUIClickable = function() { };
$hxClasses["flixel.addons.ui.interfaces.IFlxUIClickable"] = flixel_addons_ui_interfaces_IFlxUIClickable;
flixel_addons_ui_interfaces_IFlxUIClickable.__name__ = "flixel.addons.ui.interfaces.IFlxUIClickable";
flixel_addons_ui_interfaces_IFlxUIClickable.__isInterface__ = true;
flixel_addons_ui_interfaces_IFlxUIClickable.prototype = {
	set_skipButtonUpdate: null
	,skipButtonUpdate: null
	,__class__: flixel_addons_ui_interfaces_IFlxUIClickable
	,__properties__: {set_skipButtonUpdate:"set_skipButtonUpdate"}
};
var flixel_addons_ui_interfaces_IFlxUIButton = function() { };
$hxClasses["flixel.addons.ui.interfaces.IFlxUIButton"] = flixel_addons_ui_interfaces_IFlxUIButton;
flixel_addons_ui_interfaces_IFlxUIButton.__name__ = "flixel.addons.ui.interfaces.IFlxUIButton";
flixel_addons_ui_interfaces_IFlxUIButton.__isInterface__ = true;
flixel_addons_ui_interfaces_IFlxUIButton.__interfaces__ = [flixel_util_IFlxDestroyable,flixel_addons_ui_interfaces_IHasParams,flixel_addons_ui_interfaces_IFlxUIWidget];
flixel_addons_ui_interfaces_IFlxUIButton.prototype = {
	set_toggled: null
	,set_toggle_label: null
	,get_justMousedOver: null
	,get_mouseIsOver: null
	,get_mouseIsOut: null
	,get_justMousedOut: null
	,set_status: null
	,up_color: null
	,over_color: null
	,down_color: null
	,up_toggle_color: null
	,over_toggle_color: null
	,down_toggle_color: null
	,up_visible: null
	,over_visible: null
	,down_visible: null
	,up_toggle_visible: null
	,over_toggle_visible: null
	,down_toggle_visible: null
	,resize_ratio: null
	,resize_point: null
	,has_toggle: null
	,toggled: null
	,toggle_label: null
	,autoResizeLabel: null
	,autoCenterLabel: null
	,loadGraphicSlice9: null
	,loadGraphicsMultiple: null
	,loadGraphicsUpOverDown: null
	,forceStateHandler: null
	,status: null
	,__class__: flixel_addons_ui_interfaces_IFlxUIButton
	,__properties__: {set_status:"set_status",get_justMousedOut:"get_justMousedOut",get_mouseIsOut:"get_mouseIsOut",get_mouseIsOver:"get_mouseIsOver",get_justMousedOver:"get_justMousedOver",set_toggle_label:"set_toggle_label",set_toggled:"set_toggled"}
};
var flixel_addons_ui_FlxUITypedButton = function(X,Y,OnClick) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._centerLabelOffset = null;
	this._src_h = 0;
	this._src_w = 0;
	this._no_graphic = false;
	this._assetsToCleanup = [];
	this._autoCleanup = true;
	this.autoResizeLabel = false;
	this.skipButtonUpdate = false;
	this.round_labels = true;
	this.down_toggle_visible = true;
	this.over_toggle_visible = true;
	this.up_toggle_visible = true;
	this.down_visible = true;
	this.over_visible = true;
	this.up_visible = true;
	this.down_toggle_color = null;
	this.over_toggle_color = null;
	this.up_toggle_color = null;
	this.down_color = null;
	this.over_color = null;
	this.up_color = null;
	this.broadcastToFlxUI = true;
	this.toggled = false;
	this.has_toggle = false;
	this.tile = 0;
	this.resize_point = null;
	this.resize_ratio_axis = 1;
	this.resize_ratio = -1;
	flixel_ui_FlxTypedButton.call(this,X,Y,OnClick);
	var X = 0;
	var Y = 0;
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	this._centerLabelOffset = point;
	this.statusAnimations[3] = "normal_toggled";
	this.statusAnimations[4] = "highlight_toggled";
	this.statusAnimations[5] = "pressed_toggled";
	var _g = [];
	_g.push(1);
	_g.push(1);
	_g.push(1);
	this.labelAlphas = _g;
	this.inputOver = new flixel_input_FlxInput(0);
};
$hxClasses["flixel.addons.ui.FlxUITypedButton"] = flixel_addons_ui_FlxUITypedButton;
flixel_addons_ui_FlxUITypedButton.__name__ = "flixel.addons.ui.FlxUITypedButton";
flixel_addons_ui_FlxUITypedButton.__interfaces__ = [flixel_addons_ui_interfaces_ICursorPointable,flixel_addons_ui_interfaces_IHasParams,flixel_addons_ui_interfaces_IFlxUIClickable,flixel_addons_ui_interfaces_IFlxUIWidget,flixel_addons_ui_interfaces_IResizable,flixel_addons_ui_interfaces_IFlxUIButton];
flixel_addons_ui_FlxUITypedButton.__super__ = flixel_ui_FlxTypedButton;
flixel_addons_ui_FlxUITypedButton.prototype = $extend(flixel_ui_FlxTypedButton.prototype,{
	name: null
	,resize_ratio: null
	,resize_ratio_axis: null
	,resize_point: null
	,tile: null
	,has_toggle: null
	,toggled: null
	,set_toggled: function(b) {
		this.toggled = b;
		this.updateStatusAnimation();
		return this.toggled;
	}
	,broadcastToFlxUI: null
	,inputOver: null
	,get_justMousedOver: function() {
		return this.inputOver.current == 2;
	}
	,get_justMousedOut: function() {
		return this.inputOver.current == -1;
	}
	,get_mouseIsOver: function() {
		var _this = this.inputOver;
		if(_this.current != 1) {
			return _this.current == 2;
		} else {
			return true;
		}
	}
	,get_mouseIsOut: function() {
		var _this = this.inputOver;
		if(_this.current != 0) {
			return _this.current == -1;
		} else {
			return true;
		}
	}
	,up_color: null
	,over_color: null
	,down_color: null
	,up_toggle_color: null
	,over_toggle_color: null
	,down_toggle_color: null
	,up_visible: null
	,over_visible: null
	,down_visible: null
	,up_toggle_visible: null
	,over_toggle_visible: null
	,down_toggle_visible: null
	,toggle_label: null
	,set_toggle_label: function(f) {
		if(this.label != null) {
			this.toggle_label = f;
			return this.toggle_label;
		}
		return null;
	}
	,set_visible: function(Value) {
		if(this.visible && Value == false) {
			this.inputOver.release();
		}
		return flixel_ui_FlxTypedButton.prototype.set_visible.call(this,Value);
	}
	,round_labels: null
	,skipButtonUpdate: null
	,set_skipButtonUpdate: function(b) {
		this.skipButtonUpdate = b;
		return this.skipButtonUpdate;
	}
	,params: null
	,set_params: function(p) {
		this.params = p;
		return this.params;
	}
	,destroy: function() {
		this.resize_point = flixel_util_FlxDestroyUtil.put(this.resize_point);
		flixel_ui_FlxTypedButton.prototype.destroy.call(this);
	}
	,autoResizeLabel: null
	,graphicLoaded: function() {
		flixel_ui_FlxTypedButton.prototype.graphicLoaded.call(this);
		this.setupAnimation("normal_toggled",3);
		this.setupAnimation("highlight_toggled",4);
		this.setupAnimation("pressed_toggled",5);
		if(this._autoCleanup) {
			this.cleanup();
		}
	}
	,copyGraphic: function(other) {
		this._src_w = other._src_w;
		this._src_h = other._src_h;
		this._frame_indeces = flixel_addons_ui_U.copy_shallow_arr_i(other._frame_indeces);
		this.tile = other.tile;
		this.resize_ratio = other.resize_ratio;
		if(other._centerLabelOffset == null) {
			this._centerLabelOffset = null;
		} else {
			this._centerLabelOffset = new flixel_math_FlxPoint(other._centerLabelOffset.x,other._centerLabelOffset.y);
		}
		this._no_graphic = other._no_graphic;
		if(other._slice9_arrays != null) {
			this._slice9_arrays = other._slice9_arrays.slice();
		}
		if(other._slice9_assets != null) {
			this._slice9_assets = other._slice9_assets.slice();
		}
		if(this._slice9_arrays == null || this._slice9_assets == null) {
			this.loadGraphic(other.graphic,true,other.get_width(),other.get_height());
		} else {
			this.resize(other.get_width(),other.get_height());
		}
	}
	,copyStyle: function(other) {
		this.up_color = other.up_color;
		this.over_color = other.over_color;
		this.down_color = other.down_color;
		this.up_toggle_color = other.up_toggle_color;
		this.over_toggle_color = other.over_toggle_color;
		this.down_toggle_color = other.over_toggle_color;
		this.up_visible = other.up_visible;
		this.over_visible = other.over_visible;
		this.down_visible = other.down_visible;
		this.up_toggle_visible = other.up_toggle_visible;
		this.over_toggle_visible = other.over_toggle_visible;
		this.down_toggle_visible = other.down_toggle_visible;
		var ctPt = other.getCenterLabelOffset();
		this.setCenterLabelOffset(ctPt.x,ctPt.y);
		var i = 0;
		var _g = 0;
		var _g1 = other.labelOffsets;
		while(_g < _g1.length) {
			var flxPt = _g1[_g];
			++_g;
			this.labelOffsets[i].set_x(flxPt.x);
			this.labelOffsets[i].set_y(flxPt.y);
			++i;
		}
		i = 0;
		var _g = 0;
		var _g1 = other.labelAlphas;
		while(_g < _g1.length) {
			var alpha = _g1[_g];
			++_g;
			this.labelAlphas[i] = alpha;
			++i;
		}
	}
	,setAllLabelOffsets: function(X,Y) {
		var _g = 0;
		var _g1 = this.labelOffsets;
		while(_g < _g1.length) {
			var labelOffset = _g1[_g];
			++_g;
			labelOffset.set(X,Y);
		}
	}
	,update: function(elapsed) {
		flixel_ui_FlxTypedButton.prototype.update.call(this,elapsed);
		var tmp;
		if(this.status == 0) {
			var _this = this.inputOver;
			tmp = _this.current == 1 || _this.current == 2;
		} else {
			tmp = false;
		}
		if(tmp && this.input.current == -1 == false) {
			this.inputOver.release();
		}
		this.inputOver.update();
		if(this.label != null) {
			var theLabel = this.fetchAndShowCorrectLabel();
			theLabel.set_x(this.x + this._centerLabelOffset.x + this.labelOffsets[this.status].x);
			theLabel.set_y(this.y + this._centerLabelOffset.y + this.labelOffsets[this.status].y);
			if(this.round_labels) {
				theLabel.set_x(theLabel.x + 0.5 | 0);
				theLabel.set_y(theLabel.y + 0.5 | 0);
			}
			theLabel.scrollFactor = this.scrollFactor;
		}
	}
	,updateStatusAnimation: function() {
		if(this.has_toggle && this.toggled) {
			this.animation.play(this.statusAnimations[this.status + 3]);
		} else {
			flixel_ui_FlxTypedButton.prototype.updateStatusAnimation.call(this);
		}
	}
	,draw: function() {
		flixel_ui_FlxTypedButton.prototype.draw.call(this);
		if(this.has_toggle && this.toggled && this.toggle_label != null && this.toggle_label.visible == true) {
			this.toggle_label.set_cameras(this.get_cameras());
			this.toggle_label.draw();
		}
	}
	,resize: function(W,H) {
		this.doResize(W,H);
	}
	,doResize: function(W,H,Redraw) {
		if(Redraw == null) {
			Redraw = true;
		}
		var old_width = this.get_width();
		var old_height = this.get_height();
		var label_diffx = 0;
		var label_diffy = 0;
		if(this.label != null) {
			label_diffx = this.get_width() - this._spriteLabel.get_width();
			label_diffy = this.get_height() - this._spriteLabel.get_height();
		}
		if(W <= 0) {
			W = 80;
		}
		if(H <= 0) {
			H = 20;
		}
		if(Redraw) {
			if(this._slice9_assets != null) {
				this.loadGraphicSlice9(this._slice9_assets,W | 0,H | 0,this._slice9_arrays,this.tile,this.resize_ratio,this.has_toggle,this._src_w,this._src_h,this._frame_indeces);
			} else if(this._no_graphic) {
				var upB;
				if(!this.has_toggle) {
					upB = new openfl_display_BitmapData(W | 0,H * 3 | 0,true,0);
				} else {
					upB = new openfl_display_BitmapData(W | 0,H * 6 | 0,true,0);
				}
				this.loadGraphicsUpOverDown(upB);
			} else {
				this.loadGraphicSlice9(null,W | 0,H | 0,null,this.tile);
			}
		}
		if(this.label != null && this.autoResizeLabel) {
			if(js_Boot.__implements(this.label,flixel_addons_ui_interfaces_IResizable)) {
				var targetW = W - label_diffx;
				var targetH = H - label_diffy;
				var ir = this.label;
				ir.resize(targetW,targetH);
			}
		}
		this.autoCenterLabel();
		var diff_w = this.get_width() - old_width;
		var diff_h = this.get_height() - old_height;
		if(this.resize_point != null) {
			var delta_x = diff_w * this.resize_point.x;
			var delta_y = diff_h * this.resize_point.y;
			var _g = this;
			_g.set_x(_g.x - delta_x);
			var _g = this;
			_g.set_y(_g.y - delta_y);
		}
	}
	,getBmp: function(asset) {
		return flixel_addons_ui_U.getBmp(asset);
	}
	,loadGraphicsMultiple: function(assets,Key) {
		if(Key == null) {
			Key = "";
		}
		this._slice9_assets = null;
		this._slice9_arrays = null;
		this.resize_ratio = -1;
		var key = "";
		if(assets.length <= 3) {
			while(assets.length < 3) assets.push(null);
			if(assets[1] == null) {
				assets[1] = assets[0];
			}
			if(assets[2] == null) {
				assets[2] = assets[1];
			}
			key = assets.join(",");
			if(Key != "") {
				key = Key;
			}
			if(flixel_FlxG.bitmap._cache.h[key] != null) {
				this.loadGraphicsUpOverDown(key,false,key);
			} else {
				var pixels = this.assembleButtonFrames(this.getBmp(assets[0]),this.getBmp(assets[1]),this.getBmp(assets[2]));
				this.loadGraphicsUpOverDown(pixels,false,key);
			}
		} else if(assets.length <= 6) {
			while(assets.length < 6) assets.push(null);
			if(assets[4] == null) {
				assets[4] = assets[3];
			}
			if(assets[5] == null) {
				assets[5] = assets[4];
			}
			key = assets.join(",");
			if(Key != "") {
				key = Key;
			}
			if(flixel_FlxG.bitmap._cache.h[key] != null) {
				this.loadGraphicsUpOverDown(key,true,key);
			} else {
				var pixels_normal = this.assembleButtonFrames(this.getBmp(assets[0]),this.getBmp(assets[1]),this.getBmp(assets[2]));
				var pixels_toggle = this.assembleButtonFrames(this.getBmp(assets[3]),this.getBmp(assets[4]),this.getBmp(assets[5]));
				var pixels = this.combineToggleBitmaps(pixels_normal,pixels_toggle);
				this.loadGraphicsUpOverDown(pixels,true,key);
				pixels_normal.dispose();
				pixels_toggle.dispose();
			}
		}
	}
	,loadGraphicsUpOverDown: function(asset,for_toggle,key) {
		if(for_toggle == null) {
			for_toggle = false;
		}
		this._slice9_assets = null;
		this._slice9_arrays = null;
		this.resize_ratio = -1;
		if(for_toggle) {
			this.has_toggle = true;
		}
		var upB = null;
		var overB = null;
		var downB = null;
		var bd = null;
		if(((asset) instanceof openfl_display_BitmapData)) {
			bd = asset;
		} else if(typeof(asset) == "string") {
			bd = this.getBmp(asset);
		}
		upB = this.grabButtonFrame(bd,0,this.has_toggle,0,0,key);
		overB = this.grabButtonFrame(bd,1,this.has_toggle,0,0,key);
		downB = this.grabButtonFrame(bd,2,this.has_toggle,0,0,key);
		var normalGraphic = key;
		if(key == null || key == "" || flixel_FlxG.bitmap._cache.h[key] != null == false) {
			normalGraphic = this.assembleButtonFrames(upB,overB,downB);
		}
		if(this.has_toggle) {
			var normalPixels = this.assembleButtonFrames(upB,overB,downB);
			upB = this.grabButtonFrame(bd,3,true,0,0,key);
			overB = this.grabButtonFrame(bd,4,true,0,0,key);
			downB = this.grabButtonFrame(bd,5,true,0,0,key);
			var togglePixels = this.assembleButtonFrames(upB,overB,downB);
			var combinedPixels = this.combineToggleBitmaps(normalPixels,togglePixels);
			normalPixels = flixel_util_FlxDestroyUtil.dispose(normalPixels);
			togglePixels = flixel_util_FlxDestroyUtil.dispose(togglePixels);
			this.loadGraphic(combinedPixels,true,upB.width,upB.height,false,key);
		} else {
			this.loadGraphic(normalGraphic,true,upB.width,upB.height,false,key);
		}
	}
	,loadGraphicSlice9: function(assets,W,H,slice9,Tile,Resize_Ratio,isToggle,src_w,src_h,frame_indeces) {
		if(src_h == null) {
			src_h = 0;
		}
		if(src_w == null) {
			src_w = 0;
		}
		if(isToggle == null) {
			isToggle = false;
		}
		if(Resize_Ratio == null) {
			Resize_Ratio = -1;
		}
		if(Tile == null) {
			Tile = 0;
		}
		if(H == null) {
			H = 20;
		}
		if(W == null) {
			W = 80;
		}
		if(src_w != 0) {
			this._src_w = src_w;
		}
		if(src_h != 0) {
			this._src_h = src_h;
		}
		this.tile = Tile;
		this.has_toggle = isToggle;
		this.resize_ratio = Resize_Ratio;
		this._slice9_assets = assets;
		this._slice9_arrays = slice9;
		var key = "";
		var arr_bmpData = [];
		var arr_flx9 = [];
		if(frame_indeces == null) {
			if(this.has_toggle) {
				frame_indeces = [0,1,2,3,4,5];
			} else {
				frame_indeces = [0,1,2];
			}
		} else {
			var max_index = 2;
			if(this.has_toggle) {
				max_index = 5;
			}
			while(frame_indeces.length < max_index + 1) frame_indeces.push(frame_indeces.length - 1);
			var _g = 0;
			var _g1 = frame_indeces.length;
			while(_g < _g1) {
				var i = _g++;
				if(frame_indeces[i] > 5) {
					frame_indeces[i] = 5;
				} else if(frame_indeces[i] < 0) {
					frame_indeces[i] = 0;
				}
			}
		}
		this._frame_indeces = frame_indeces;
		if(W == 0) {
			W = 80;
		}
		if(H == 0) {
			H = 20;
		}
		var pt = flixel_addons_ui_U.applyResize(this.resize_ratio,this.resize_ratio_axis,W,H);
		W = pt.x | 0;
		H = pt.y | 0;
		if(assets == null) {
			var temp;
			if(!isToggle) {
				assets = ["flixel/flixel-ui/img/button.png"];
				slice9 = [flixel_util_FlxStringUtil.toIntArray("6,6,11,11")];
				temp = this.getBmp(assets[0]);
				this._src_w = temp.width | 0;
				this._src_h = temp.height / 3 | 0;
			} else {
				assets = ["flixel/flixel-ui/img/button_toggle.png"];
				slice9 = [flixel_util_FlxStringUtil.toIntArray("6,6,11,11")];
				temp = this.getBmp(assets[0]);
				this._src_w = temp.width | 0;
				this._src_h = temp.height / 6 | 0;
			}
			temp = null;
		}
		if(!this.has_toggle && assets.length <= 3) {
			arr_bmpData = [null,null,null];
			arr_flx9 = [null,null,null];
		} else {
			this.has_toggle = true;
			arr_bmpData = [null,null,null,null,null,null];
			arr_flx9 = [null,null,null,null,null,null];
		}
		this._flashRect2.width = W;
		this._flashRect2.height = H;
		var midKey = key += Std.string(assets) + "_slice9=" + Std.string(slice9) + "_src=" + this._src_w + "x" + this._src_h;
		key += "_final=" + W + "x" + H + "_fi=" + Std.string(this._frame_indeces);
		if(assets.length == 1) {
			var all = this.getBmp(assets[0]);
			var keySuffix = "_all";
			if(this._src_w == 0 || this._src_h == 0) {
				throw new openfl_errors_Error("Ambiguous situation! If you only provide one asset, you MUST provide src_w and src_h. Otherwise I can't tell if it's a stacked set of frames or a single frame.");
			}
			var multiFrame = all.height > this._src_h;
			keySuffix += multiFrame ? "_multiframe" : "";
			key += keySuffix;
			midKey += keySuffix;
			if(flixel_FlxG.bitmap._cache.h[key] != null) {
				this.loadGraphic(key,true,W,H);
				return;
			}
			if(multiFrame) {
				var _g = 0;
				var _g1 = arr_bmpData.length;
				while(_g < _g1) {
					var i = _g++;
					arr_bmpData[i] = this.grabButtonFrame(all,i,this.has_toggle,this._src_w,this._src_h,midKey);
				}
				if(slice9 != null && slice9[0] != []) {
					var _g = 0;
					var _g1 = arr_bmpData.length;
					while(_g < _g1) {
						var i = _g++;
						arr_flx9[i] = new flixel_addons_ui_FlxUI9SliceSprite(0,0,arr_bmpData[i],this._flashRect2,slice9[0],this.tile,false,assets[0] + ":" + i,this.resize_ratio);
						arr_flx9[i].set_resize_point(this.resize_point);
					}
					var _g = 0;
					var _g1 = arr_bmpData.length;
					while(_g < _g1) {
						var i = _g++;
						arr_bmpData[i] = arr_flx9[i].get_pixels();
					}
					W = arr_bmpData[0].width;
					H = arr_bmpData[0].height;
				}
			} else {
				arr_bmpData[0] = all;
			}
		} else {
			if(flixel_FlxG.bitmap._cache.h[key] != null) {
				this.loadGraphic(key,true,W,H);
				return;
			}
			if(!this.has_toggle) {
				while(assets.length < 3) assets.push("");
			} else {
				while(assets.length < 6) assets.push("");
			}
			if(assets[0] != "") {
				if(slice9 != null && slice9.length > 0 && slice9[0] != null && slice9[0].length > 0) {
					while(slice9.length < assets.length) slice9.push(null);
					if(slice9[0] != null) {
						arr_flx9[0] = new flixel_addons_ui_FlxUI9SliceSprite(0,0,assets[0],this._flashRect2,slice9[0],this.tile,false,"",this.resize_ratio);
					} else {
						arr_flx9[0] = new flixel_addons_ui_FlxUISprite(0,0,assets[0]);
					}
					arr_bmpData[0] = arr_flx9[0].get_pixels();
					var _g = 1;
					var _g1 = assets.length;
					while(_g < _g1) {
						var i = _g++;
						if(assets[i] != "") {
							if(slice9[i] != null) {
								arr_flx9[i] = new flixel_addons_ui_FlxUI9SliceSprite(0,0,assets[i],this._flashRect2,slice9[i],this.tile,false,"",this.resize_ratio);
							} else {
								arr_flx9[i] = new flixel_addons_ui_FlxUISprite(0,0,assets[i]);
							}
							arr_bmpData[i] = arr_flx9[i].get_pixels();
						}
					}
					W = arr_bmpData[0].width;
					H = arr_bmpData[0].height;
				} else {
					var _g = 0;
					var _g1 = assets.length;
					while(_g < _g1) {
						var i = _g++;
						arr_bmpData[i] = this.getBmp(assets[i]);
					}
					W = arr_bmpData[0].width;
					H = arr_bmpData[0].height;
				}
			} else {
				if(W == 0) {
					W = 80;
				}
				if(H == 0) {
					H = 20;
				}
				arr_bmpData[0] = new openfl_display_BitmapData(W,H * 3,true,0);
				this._no_graphic = true;
			}
		}
		var normalPixels = null;
		if(!this.has_toggle) {
			normalPixels = this.assembleButtonFrames(arr_bmpData[frame_indeces[0]],arr_bmpData[frame_indeces[1]],arr_bmpData[frame_indeces[2]]);
			flixel_FlxG.bitmap.add(normalPixels,true,key);
			this.loadGraphic(key,true,W,H);
		} else {
			var normalPixels = this.assembleButtonFrames(arr_bmpData[frame_indeces[0]],arr_bmpData[frame_indeces[1]],arr_bmpData[frame_indeces[2]]);
			var togglePixels = this.assembleButtonFrames(arr_bmpData[frame_indeces[3]],arr_bmpData[frame_indeces[4]],arr_bmpData[frame_indeces[5]]);
			var combinedPixels = this.combineToggleBitmaps(normalPixels,togglePixels);
			normalPixels = flixel_util_FlxDestroyUtil.dispose(normalPixels);
			togglePixels = flixel_util_FlxDestroyUtil.dispose(togglePixels);
			flixel_FlxG.bitmap.add(combinedPixels,true,key);
			this.loadGraphic(key,true,W,H);
		}
		var _g = 0;
		var _g1 = arr_flx9.length;
		while(_g < _g1) {
			var i = _g++;
			if(arr_flx9[i] != null) {
				arr_flx9[i].destroy();
				arr_flx9[i] = null;
			}
		}
		while(arr_flx9.length > 0) arr_flx9.pop();
		arr_flx9 = null;
		while(arr_bmpData.length > 0) arr_bmpData.pop();
		arr_bmpData = null;
	}
	,autoCenterLabel: function() {
		if(this.label != null) {
			var offX = 0;
			var offY = 0;
			offX = this.get_width() - this._spriteLabel.get_width();
			if(((this.label) instanceof flixel_addons_ui_FlxUIText)) {
				var tlabel = this.label;
				offX = (this.get_width() - tlabel.get_fieldWidth()) / 2;
				offY = (this.get_height() - tlabel.get_height()) / 2;
			} else {
				offX = (this.get_width() - this._spriteLabel.get_width()) / 2;
				offY = (this.get_height() - this._spriteLabel.get_height()) / 2;
			}
			this._centerLabelOffset.set_x(offX);
			this._centerLabelOffset.set_y(offY);
		}
	}
	,setCenterLabelOffset: function(X,Y) {
		this._centerLabelOffset.set_x(X);
		this._centerLabelOffset.set_y(Y);
	}
	,getCenterLabelOffset: function() {
		var X = this._centerLabelOffset.x;
		var Y = this._centerLabelOffset.y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		return point;
	}
	,forceStateHandler: function(event) {
		switch(event) {
		case "click_button":
			this.onUpHandler();
			break;
		case "down_button":
			this.onDownHandler();
			break;
		case "out_button":
			this.onOutHandler();
			break;
		case "over_button":
			this.onOverHandler();
			break;
		}
	}
	,grabButtonFrame: function(all_frames,button_state,for_toggle,src_w,src_h,key) {
		if(src_h == null) {
			src_h = 0;
		}
		if(src_w == null) {
			src_w = 0;
		}
		if(for_toggle == null) {
			for_toggle = false;
		}
		var h = src_h;
		if(h == 0) {
			if(!for_toggle) {
				h = all_frames.height / 3 | 0;
			} else {
				h = all_frames.height / 6 | 0;
			}
		}
		var w = src_w;
		if(w == 0) {
			w = all_frames.width;
		}
		this._flashRect.x = 0;
		this._flashRect.y = button_state * h;
		this._flashRect.width = w;
		this._flashRect.height = h;
		if(this._flashRect.y >= all_frames.height) {
			var framesHigh = all_frames.height / h | 0;
			if(framesHigh == 4) {
				if(button_state == 4) {
					this._flashRect.y = 3 * h;
				} else if(button_state == 5) {
					this._flashRect.y = 2 * h;
				}
			}
		}
		var frameKey = key + "{x:" + this._flashRect.x + "y:" + this._flashRect.y + "w:" + this._flashRect.width + "h:" + this._flashRect.height + "}";
		if(frameKey != null) {
			if(flixel_FlxG.bitmap._cache.h[frameKey] != null) {
				return flixel_FlxG.bitmap._cache.h[frameKey].bitmap;
			}
		}
		var pixels = new openfl_display_BitmapData(w,h);
		pixels.copyPixels(all_frames,this._flashRect,this._flashPointZero);
		if(key != null) {
			flixel_FlxG.bitmap.add(pixels,true,frameKey);
			this.addToCleanup(frameKey);
		}
		return pixels;
	}
	,combineToggleBitmaps: function(normal,toggle) {
		var combined = new openfl_display_BitmapData(normal.width,normal.height + toggle.height);
		combined.copyPixels(normal,normal.rect,this._flashPointZero);
		this._flashPoint.x = 0;
		this._flashPoint.y = normal.height;
		combined.copyPixels(toggle,toggle.rect,this._flashPoint);
		return combined;
	}
	,assembleButtonFrames: function(upB,overB,downB) {
		var pixels;
		if(overB != null) {
			if(downB != null) {
				pixels = new openfl_display_BitmapData(upB.width,upB.height * 3);
			} else {
				pixels = new openfl_display_BitmapData(upB.width,upB.height * 2);
			}
		} else {
			pixels = new openfl_display_BitmapData(upB.width,upB.height);
		}
		pixels.copyPixels(upB,upB.rect,this._flashPointZero);
		if(overB != null) {
			this._flashPoint.x = 0;
			this._flashPoint.y = upB.height;
			pixels.copyPixels(overB,overB.rect,this._flashPoint);
			if(downB != null) {
				this._flashPoint.y = upB.height * 2;
				pixels.copyPixels(downB,downB.rect,this._flashPoint);
			}
		}
		return pixels;
	}
	,updateButton: function() {
		if(!this.skipButtonUpdate) {
			flixel_ui_FlxTypedButton.prototype.updateButton.call(this);
		}
	}
	,addToCleanup: function(str) {
		if(this._assetsToCleanup == null) {
			this._assetsToCleanup = [];
		}
		if(this._assetsToCleanup.indexOf(str) == -1) {
			this._assetsToCleanup.push(str);
		}
	}
	,cleanup: function() {
		if(this._assetsToCleanup == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._assetsToCleanup;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			flixel_FlxG.bitmap.removeByKey(key);
		}
		this._assetsToCleanup = null;
	}
	,fetchAndShowCorrectLabel: function() {
		if(this.has_toggle) {
			if(this.toggled && this.toggle_label != null) {
				this._spriteLabel.set_visible(false);
				this.toggle_label.set_visible(true);
				return this.toggle_label;
			} else {
				if(this.toggle_label != null) {
					this.toggle_label.set_visible(false);
				}
				this._spriteLabel.set_visible(true);
				return this.label;
			}
		}
		return this.label;
	}
	,onUpHandler: function() {
		if(this.has_toggle) {
			this.set_toggled(!this.toggled);
		}
		flixel_ui_FlxTypedButton.prototype.onUpHandler.call(this);
		if(this.label != null) {
			var theLabel = this.fetchAndShowCorrectLabel();
			theLabel.set_visible(this.toggled ? this.up_toggle_visible : this.up_visible);
			var thecol = this.toggled ? this.up_toggle_color : this.up_color;
			if(thecol != null) {
				theLabel.set_color(thecol);
			}
		}
		if(this.broadcastToFlxUI) {
			flixel_addons_ui_FlxUI.event("click_button",this,null,this.params);
		}
	}
	,onDownHandler: function() {
		flixel_ui_FlxTypedButton.prototype.onDownHandler.call(this);
		if(this.label != null) {
			var theLabel = this.fetchAndShowCorrectLabel();
			theLabel.set_visible(this.toggled ? this.down_toggle_visible : this.down_visible);
			var thecol = this.toggled ? this.down_toggle_color : this.down_color;
			if(thecol != null) {
				theLabel.set_color(thecol);
			}
		}
		if(this.broadcastToFlxUI) {
			flixel_addons_ui_FlxUI.event("down_button",this,null,this.params);
		}
	}
	,onOverHandler: function() {
		flixel_ui_FlxTypedButton.prototype.onOverHandler.call(this);
		this.inputOver.press();
		if(this.label != null) {
			var theLabel = this.fetchAndShowCorrectLabel();
			theLabel.set_visible(this.toggled ? this.over_toggle_visible : this.over_visible);
			var thecol = this.toggled ? this.over_toggle_color : this.over_color;
			if(thecol != null) {
				theLabel.set_color(thecol);
			}
		}
		if(this.broadcastToFlxUI) {
			flixel_addons_ui_FlxUI.event("over_button",this,null,this.params);
		}
	}
	,onOutHandler: function() {
		flixel_ui_FlxTypedButton.prototype.onOutHandler.call(this);
		this.inputOver.release();
		if(this.label != null) {
			var theLabel = this.fetchAndShowCorrectLabel();
			theLabel.set_visible(this.toggled ? this.up_toggle_visible : this.up_visible);
			var thecol = this.toggled ? this.up_toggle_color : this.up_color;
			if(thecol != null) {
				theLabel.set_color(thecol);
			}
		}
		if(this.broadcastToFlxUI) {
			flixel_addons_ui_FlxUI.event("out_button",this,null,this.params);
		}
	}
	,set_x: function(NewX) {
		flixel_ui_FlxTypedButton.prototype.set_x.call(this,NewX);
		if(this._spriteLabel != null) {
			this._spriteLabel.set_x(this.x + this._centerLabelOffset.x + this.labelOffsets[this.status].x);
			if(this.round_labels) {
				this._spriteLabel.set_x(this._spriteLabel.x + 0.5 | 0);
			}
			if(this.has_toggle && this.toggle_label != null) {
				this.toggle_label.set_x(this._spriteLabel.x);
			}
		}
		return NewX;
	}
	,set_y: function(NewY) {
		flixel_ui_FlxTypedButton.prototype.set_y.call(this,NewY);
		if(this.label != null) {
			this._spriteLabel.set_y(this.y + this._centerLabelOffset.y + this.labelOffsets[this.status].y);
			if(this.round_labels) {
				this._spriteLabel.set_y(this._spriteLabel.y + 0.5 | 0);
			}
			if(this.has_toggle && this.toggle_label != null) {
				this.toggle_label.set_y(this._spriteLabel.y);
			}
		}
		return NewY;
	}
	,_autoCleanup: null
	,_assetsToCleanup: null
	,_no_graphic: null
	,_src_w: null
	,_src_h: null
	,_frame_indeces: null
	,_slice9_arrays: null
	,_slice9_assets: null
	,_centerLabelOffset: null
	,__class__: flixel_addons_ui_FlxUITypedButton
	,__properties__: $extend(flixel_ui_FlxTypedButton.prototype.__properties__,{set_params:"set_params",set_skipButtonUpdate:"set_skipButtonUpdate",set_toggle_label:"set_toggle_label",get_justMousedOut:"get_justMousedOut",get_mouseIsOut:"get_mouseIsOut",get_mouseIsOver:"get_mouseIsOver",get_justMousedOver:"get_justMousedOver",set_toggled:"set_toggled"})
});
var flixel_addons_ui_interfaces_ILabeled = function() { };
$hxClasses["flixel.addons.ui.interfaces.ILabeled"] = flixel_addons_ui_interfaces_ILabeled;
flixel_addons_ui_interfaces_ILabeled.__name__ = "flixel.addons.ui.interfaces.ILabeled";
flixel_addons_ui_interfaces_ILabeled.__isInterface__ = true;
flixel_addons_ui_interfaces_ILabeled.prototype = {
	getLabel: null
	,setLabel: null
	,__class__: flixel_addons_ui_interfaces_ILabeled
};
var flixel_addons_ui_FlxUIButton = function(X,Y,Label,OnClick,LoadDefaultGraphics,LoadBlank,Color) {
	if(Color == null) {
		Color = -1;
	}
	if(LoadBlank == null) {
		LoadBlank = false;
	}
	if(LoadDefaultGraphics == null) {
		LoadDefaultGraphics = true;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this.down_toggle_style = null;
	this.over_toggle_style = null;
	this.up_toggle_style = null;
	this.down_style = null;
	this.over_style = null;
	this.up_style = null;
	flixel_addons_ui_FlxUITypedButton.call(this,X,Y,OnClick);
	this.set_color(Color);
	if(Label != null) {
		this.set_label(new flixel_addons_ui_FlxUIText(0,0,80,Label,8));
		this.label.setFormat(null,8,3355443,"center");
	}
	if(LoadBlank) {
		this._no_graphic = true;
	}
	if(LoadDefaultGraphics) {
		this.resize(this.get_width(),this.get_height());
	} else if(this._no_graphic == false) {
		this.doResize(this.get_width(),this.get_height(),false);
	} else {
		this.doResize(this.get_width(),this.get_height(),true);
	}
};
$hxClasses["flixel.addons.ui.FlxUIButton"] = flixel_addons_ui_FlxUIButton;
flixel_addons_ui_FlxUIButton.__name__ = "flixel.addons.ui.FlxUIButton";
flixel_addons_ui_FlxUIButton.__interfaces__ = [flixel_addons_ui_interfaces_IFlxUIButton,flixel_addons_ui_interfaces_ILabeled];
flixel_addons_ui_FlxUIButton.__super__ = flixel_addons_ui_FlxUITypedButton;
flixel_addons_ui_FlxUIButton.prototype = $extend(flixel_addons_ui_FlxUITypedButton.prototype,{
	_noIconGraphicsBkup: null
	,up_style: null
	,over_style: null
	,down_style: null
	,up_toggle_style: null
	,over_toggle_style: null
	,down_toggle_style: null
	,setLabelFormat: function(Font,Size,Color,Alignment,BorderStyle,BorderColor,Embedded) {
		if(Embedded == null) {
			Embedded = true;
		}
		if(BorderColor == null) {
			BorderColor = 0;
		}
		if(Color == null) {
			Color = -1;
		}
		if(Size == null) {
			Size = 8;
		}
		if(this.label != null) {
			this.label.setFormat(Font,Size,Color,Alignment,BorderStyle,BorderColor,Embedded);
			return this.label;
		}
		return null;
	}
	,autoCenterLabel: function() {
		flixel_addons_ui_FlxUITypedButton.prototype.autoCenterLabel.call(this);
	}
	,clone: function() {
		var newButton = new flixel_addons_ui_FlxUIButton(0,0,this.label == null ? null : this.label.text,this.onUp.callback,false);
		newButton.copyGraphic(this);
		newButton.copyStyle(this);
		return newButton;
	}
	,copyStyle: function(other) {
		flixel_addons_ui_FlxUITypedButton.prototype.copyStyle.call(this,other);
		if(((other) instanceof flixel_addons_ui_FlxUIButton)) {
			var fuib = other;
			this.up_style = fuib.up_style;
			this.over_style = fuib.over_style;
			this.down_style = fuib.down_style;
			this.up_toggle_style = fuib.up_toggle_style;
			this.over_toggle_style = fuib.over_toggle_style;
			this.down_toggle_style = fuib.down_toggle_style;
			var t = fuib.label;
			var tf = t.textField.get_defaultTextFormat();
			if(t._font.indexOf(flixel_system_FlxAssets.FONT_DEFAULT) == -1) {
				var fd = flixel_addons_ui_FontDef.copyFromFlxText(t);
				fd.apply(null,this.label);
			} else {
				var flxAlign = flixel_text_FlxTextAlign.fromOpenFL(tf.align);
				this.label.setFormat(null,tf.size | 0,tf.color,flxAlign,t.borderStyle,t.borderColor,t.textField.set_embedFonts(true));
			}
		}
	}
	,setLabel: function(t) {
		this.set_label(t);
		return this.label;
	}
	,getLabel: function() {
		return this.label;
	}
	,resize: function(W,H) {
		flixel_addons_ui_FlxUITypedButton.prototype.resize.call(this,W,H);
	}
	,addIcon: function(icon,X,Y,center) {
		if(center == null) {
			center = true;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this._noIconGraphicsBkup = this.graphic.bitmap.clone();
		var newBmp = this._noIconGraphicsBkup.clone();
		var key = this.graphic.key + ",icon:" + icon.graphic.key;
		var newGraphic = flixel_FlxG.bitmap.add(newBmp,false,key);
		this.loadGraphic(newGraphic,true,this.get_width() | 0,this.get_height() | 0);
		var sx = X;
		var sy = Y;
		if(center) {
			sx = (this.get_width() - icon.get_width()) / 2 | 0;
			sy = (this.get_height() - icon.get_height()) / 2 | 0;
		}
		var _g = 0;
		var _g1 = this.numFrames;
		while(_g < _g1) {
			var i = _g++;
			this.stamp(icon,sx + (this.labelOffsets[i > 2 ? 2 : i].x | 0),sy + (i * this.get_height() | 0) + (this.labelOffsets[i > 2 ? 2 : i].y | 0));
		}
	}
	,removeIcon: function() {
		if(this._noIconGraphicsBkup != null) {
			this.graphic.bitmap.fillRect(this.graphic.bitmap.rect,0);
			this.graphic.bitmap.copyPixels(this._noIconGraphicsBkup,new openfl_geom_Rectangle(0,0,this._noIconGraphicsBkup.width,this._noIconGraphicsBkup.height),new openfl_geom_Point());
			this.dirty = true;
		}
	}
	,changeIcon: function(newIcon) {
		this.removeIcon();
		this.addIcon(newIcon);
	}
	,destroy: function() {
		this._noIconGraphicsBkup = flixel_util_FlxDestroyUtil.dispose(this._noIconGraphicsBkup);
		flixel_addons_ui_FlxUITypedButton.prototype.destroy.call(this);
	}
	,loadDefaultGraphic: function() {
	}
	,resetHelpers: function() {
		flixel_addons_ui_FlxUITypedButton.prototype.resetHelpers.call(this);
		if(this.label != null) {
			var tmp = this.label;
			var tmp1 = this.get_width() | 0;
			tmp.set_width(this.label.frameWidth = tmp1);
			this.label.set_fieldWidth(this.label.get_width());
			this.label.set_size(this.label._defaultFormat.size | 0);
		}
	}
	,onDownHandler: function() {
		flixel_addons_ui_FlxUITypedButton.prototype.onDownHandler.call(this);
		if(this.label != null) {
			if(this.toggled && this.down_toggle_style != null) {
				this.label.set_color(this.down_toggle_style.color);
				if(this.down_toggle_style.border != null) {
					this.label.set_borderStyle(this.down_toggle_style.border.style);
					this.label.set_borderColor(this.down_toggle_style.border.color);
					this.label.set_borderSize(this.down_toggle_style.border.size);
					this.label.set_borderQuality(this.down_toggle_style.border.quality);
				}
			} else if(!this.toggled && this.down_style != null) {
				this.label.set_color(this.down_style.color);
				if(this.down_style.border != null) {
					this.label.set_borderStyle(this.down_style.border.style);
					this.label.set_borderColor(this.down_style.border.color);
					this.label.set_borderSize(this.down_style.border.size);
					this.label.set_borderQuality(this.down_style.border.quality);
				}
			}
		}
	}
	,onOverHandler: function() {
		flixel_addons_ui_FlxUITypedButton.prototype.onOverHandler.call(this);
		if(this.label != null) {
			if(this.toggled && this.over_toggle_style != null) {
				this.label.set_color(this.over_toggle_style.color);
				if(this.over_toggle_style.border != null) {
					this.label.set_borderStyle(this.over_toggle_style.border.style);
					this.label.set_borderColor(this.over_toggle_style.border.color);
					this.label.set_borderSize(this.over_toggle_style.border.size);
					this.label.set_borderQuality(this.over_toggle_style.border.quality);
				}
			} else if(!this.toggled && this.over_style != null) {
				this.label.set_color(this.over_style.color);
				if(this.over_style.border != null) {
					this.label.set_borderStyle(this.over_style.border.style);
					this.label.set_borderColor(this.over_style.border.color);
					this.label.set_borderSize(this.over_style.border.size);
					this.label.set_borderQuality(this.over_style.border.quality);
				}
			}
		}
	}
	,onOutHandler: function() {
		flixel_addons_ui_FlxUITypedButton.prototype.onOutHandler.call(this);
		if(this.label != null) {
			if(this.toggled && this.up_toggle_style != null) {
				this.label.set_color(this.up_toggle_style.color);
				if(this.up_toggle_style.border != null) {
					this.label.set_borderStyle(this.up_toggle_style.border.style);
					this.label.set_borderColor(this.up_toggle_style.border.color);
					this.label.set_borderSize(this.up_toggle_style.border.size);
					this.label.set_borderQuality(this.up_toggle_style.border.quality);
				}
			} else if(!this.toggled && this.up_style != null) {
				this.label.set_color(this.up_style.color);
				if(this.up_style.border != null) {
					this.label.set_borderStyle(this.up_style.border.style);
					this.label.set_borderColor(this.up_style.border.color);
					this.label.set_borderSize(this.up_style.border.size);
					this.label.set_borderQuality(this.up_style.border.quality);
				}
			}
		}
	}
	,onUpHandler: function() {
		flixel_addons_ui_FlxUITypedButton.prototype.onUpHandler.call(this);
		if(this.label != null) {
			if(this.toggled && this.up_toggle_style != null) {
				this.label.set_color(this.up_toggle_style.color);
				if(this.up_toggle_style.border != null) {
					this.label.set_borderStyle(this.up_toggle_style.border.style);
					this.label.set_borderColor(this.up_toggle_style.border.color);
					this.label.set_borderSize(this.up_toggle_style.border.size);
					this.label.set_borderQuality(this.up_toggle_style.border.quality);
				}
			} else if(!this.toggled && this.up_style != null) {
				this.label.set_color(this.up_style.color);
				if(this.up_style.border != null) {
					this.label.set_borderStyle(this.up_style.border.style);
					this.label.set_borderColor(this.up_style.border.color);
					this.label.set_borderSize(this.up_style.border.size);
					this.label.set_borderQuality(this.up_style.border.quality);
				}
			}
		}
	}
	,__class__: flixel_addons_ui_FlxUIButton
});
var flixel_addons_ui_FlxUICheckBox = function(X,Y,Box,Check,Label,LabelW,Params,Callback) {
	if(LabelW == null) {
		LabelW = 100;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this.skipButtonUpdate = false;
	this.box_space = 2;
	this.textY = 0;
	this.textX = 0;
	this.checkbox_dirty = false;
	this.textIsClickable = true;
	this.checked = false;
	this.max_width = -1;
	flixel_addons_ui_FlxUIGroup.call(this);
	this.callback = Callback;
	this.set_params(Params);
	if(Box == null) {
		Box = "flixel/flixel-ui/img/check_box.png";
	}
	if(((Box) instanceof flixel_FlxSprite)) {
		this.box = Box;
	} else {
		this.box = new flixel_FlxSprite();
		this.box.loadGraphic(Box,true);
	}
	this.button = new flixel_addons_ui_FlxUIButton(0,0,Label,$bind(this,this._clickCheck));
	this.button.label.setFormat(null,8,16777215,"left",flixel_text_FlxTextBorderStyle.OUTLINE);
	this.button.label.set_fieldWidth(LabelW);
	this.button.up_color = 16777215;
	this.button.down_color = 16777215;
	this.button.over_color = 16777215;
	this.button.up_toggle_color = 16777215;
	this.button.down_toggle_color = 16777215;
	this.button.over_toggle_color = 16777215;
	this.button.loadGraphicSlice9(["","",""],this.box.get_width() + this.box_space + LabelW | 0,this.box.get_height() | 0);
	this.max_width = this.box.get_width() + this.box_space + LabelW | 0;
	this.button.onUp.callback = $bind(this,this._clickCheck);
	if(Check == null) {
		Check = "flixel/flixel-ui/img/check_mark.png";
	}
	if(((Check) instanceof flixel_FlxSprite)) {
		this.mark = Check;
	} else {
		this.mark = new flixel_FlxSprite();
		this.mark.loadGraphic(Check);
	}
	this.add(this.box);
	this.add(this.mark);
	this.add(this.button);
	this.anchorLabelX();
	this.anchorLabelY();
	this.set_checked(false);
	this.button.setAllLabelOffsets(0,0);
	this.set_x(X);
	this.set_y(Y);
	this.set_textX(0);
	this.set_textY(0);
};
$hxClasses["flixel.addons.ui.FlxUICheckBox"] = flixel_addons_ui_FlxUICheckBox;
flixel_addons_ui_FlxUICheckBox.__name__ = "flixel.addons.ui.FlxUICheckBox";
flixel_addons_ui_FlxUICheckBox.__interfaces__ = [flixel_addons_ui_interfaces_ICursorPointable,flixel_addons_ui_interfaces_IHasParams,flixel_addons_ui_interfaces_IFlxUIClickable,flixel_addons_ui_interfaces_ILabeled];
flixel_addons_ui_FlxUICheckBox.__super__ = flixel_addons_ui_FlxUIGroup;
flixel_addons_ui_FlxUICheckBox.prototype = $extend(flixel_addons_ui_FlxUIGroup.prototype,{
	box: null
	,mark: null
	,button: null
	,max_width: null
	,checked: null
	,params: null
	,textIsClickable: null
	,checkbox_dirty: null
	,textX: null
	,textY: null
	,box_space: null
	,skipButtonUpdate: null
	,callback: null
	,set_skipButtonUpdate: function(b) {
		this.skipButtonUpdate = b;
		this.button.set_skipButtonUpdate(this.skipButtonUpdate);
		return this.skipButtonUpdate;
	}
	,set_params: function(p) {
		this.params = p;
		if(this.params == null) {
			this.params = [];
		}
		var nb = { name : "checked", value : false};
		this.params.push(nb);
		return this.params;
	}
	,set_color: function(Value) {
		if(this.button != null) {
			this.button.label.set_color(Value);
		}
		return flixel_addons_ui_FlxUIGroup.prototype.set_color.call(this,Value);
	}
	,setLabel: function(t) {
		if(this.button == null) {
			return null;
		}
		this.button.set_label(t);
		return this.button.label;
	}
	,getLabel: function() {
		if(this.button == null) {
			return null;
		}
		return this.button.label;
	}
	,set_visible: function(Value) {
		this.visible = Value;
		return this.visible;
	}
	,anchorTime: function(f) {
		this.anchorLabelY();
	}
	,set_textX: function(n) {
		this.textX = n;
		this.anchorLabelX();
		return this.textX;
	}
	,set_textY: function(n) {
		this.textY = n;
		this.anchorLabelY();
		return this.textY;
	}
	,anchorLabelX: function() {
		if(this.button != null) {
			this.button.label.offset.set_x(-(this.box.get_width() + this.box_space + this.textX));
		}
	}
	,anchorLabelY: function() {
		if(this.button != null) {
			this.button.set_y(this.box.y + (this.box.get_height() - this.button.get_height()) / 2 + this.textY);
		}
	}
	,destroy: function() {
		flixel_addons_ui_FlxUIGroup.prototype.destroy.call(this);
		if(this.mark != null) {
			this.mark.destroy();
			this.mark = null;
		}
		if(this.box != null) {
			this.box.destroy();
			this.box = null;
		}
		if(this.button != null) {
			this.button.destroy();
			this.button = null;
		}
	}
	,get_text: function() {
		return this.button.label.text;
	}
	,set_text: function(value) {
		this.button.label.set_text(value);
		this.checkbox_dirty = true;
		return value;
	}
	,update: function(elapsed) {
		flixel_addons_ui_FlxUIGroup.prototype.update.call(this,elapsed);
		if(this.checkbox_dirty) {
			if(this.button.label != null) {
				if(((this.button.label) instanceof flixel_addons_ui_FlxUIText)) {
					var ftu = this.button.label;
					ftu.drawFrame();
				}
				this.anchorLabelX();
				this.anchorLabelY();
				this.button.set_width(this.box.frameWidth + this.box_space + this.button.label.textField.get_textWidth());
				this.checkbox_dirty = false;
			}
		}
	}
	,set_checked: function(b) {
		this.mark.set_visible(b);
		return this.checked = b;
	}
	,_clickCheck: function() {
		if(!this.visible) {
			return;
		}
		this.set_checked(!this.checked);
		if(this.callback != null) {
			this.callback();
		}
		if(this.broadcastToFlxUI) {
			flixel_addons_ui_FlxUI.event("click_check_box",this,this.checked,this.params);
		}
	}
	,__class__: flixel_addons_ui_FlxUICheckBox
	,__properties__: $extend(flixel_addons_ui_FlxUIGroup.prototype.__properties__,{set_text:"set_text",get_text:"get_text",set_skipButtonUpdate:"set_skipButtonUpdate",set_textY:"set_textY",set_textX:"set_textX",set_params:"set_params",set_checked:"set_checked"})
});
var flixel_addons_ui_FlxUICursor = function(Callback,InputMethod,DefaultKeys,Asset) {
	if(DefaultKeys == null) {
		DefaultKeys = 1;
	}
	if(InputMethod == null) {
		InputMethod = 1;
	}
	this._clickTime = 0;
	this._clickPressed = false;
	this.lastMouseY = 0;
	this.lastMouseX = 0;
	this.inputMethod = 0;
	this.dispatchEvents = true;
	this.gamepadAutoConnect = flixel_addons_ui_GamepadAutoConnectPreference.FirstActive;
	this.listIndex = 0;
	this.location = -1;
	this.wrap = true;
	if(Asset == null) {
		if(flixel_FlxG.height < 400) {
			Asset = "flixel/flixel-ui/img/finger_small.png";
		} else {
			Asset = "flixel/flixel-ui/img/finger_big.png";
		}
	}
	flixel_addons_ui_FlxUISprite.call(this,0,0,Asset);
	this.inputMethod = InputMethod;
	this._lists = [{ x : 0, y : 0, width : 0, height : 0, widgets : []}];
	this._widgets = this._lists[0].widgets;
	this.anchor = new flixel_addons_ui_Anchor(-2,0,"left","center","right","center");
	this.setDefaultKeys(DefaultKeys);
	this.callback = Callback;
	this.scrollFactor.set(0,0);
	if(flixel_FlxG.mouse != null && ((flixel_FlxG.mouse) instanceof flixel_addons_ui_FlxUIMouse) == false) {
		this._newMouse = new flixel_addons_ui_FlxUIMouse(flixel_FlxG.mouse.cursorContainer);
		flixel_FlxG.set_mouse(this._newMouse);
	} else {
		this._newMouse = flixel_FlxG.mouse;
	}
};
$hxClasses["flixel.addons.ui.FlxUICursor"] = flixel_addons_ui_FlxUICursor;
flixel_addons_ui_FlxUICursor.__name__ = "flixel.addons.ui.FlxUICursor";
flixel_addons_ui_FlxUICursor.__super__ = flixel_addons_ui_FlxUISprite;
flixel_addons_ui_FlxUICursor.prototype = $extend(flixel_addons_ui_FlxUISprite.prototype,{
	callback: null
	,wrap: null
	,location: null
	,listIndex: null
	,ignoreNextInput: null
	,findVisibleLocation: function(loc,forwardIfInvisible,wrap) {
		if(wrap == null) {
			wrap = true;
		}
		if(forwardIfInvisible == null) {
			forwardIfInvisible = true;
		}
		this.set_location(loc);
		if(this.location == -1) {
			return;
		}
		var wrapped = false;
		while(this._widgets[this.location] == null || this._widgets[this.location].visible == false) if(forwardIfInvisible) {
			if(this.location == this._widgets.length - 1) {
				if(wrap) {
					if(!wrapped) {
						wrapped = true;
						this.set_location(0);
					} else {
						this.set_location(-1);
						return;
					}
				} else {
					this.set_location(-1);
					return;
				}
			} else {
				var _g = this;
				_g.set_location(_g.location + 1);
			}
		} else if(this.location == 0) {
			if(wrap) {
				if(!wrapped) {
					wrapped = true;
					this.set_location(this._widgets.length - 1);
				} else {
					this.set_location(-1);
					return;
				}
			} else {
				this.set_location(-1);
				return;
			}
		} else {
			var _g1 = this;
			_g1.set_location(_g1.location - 1);
		}
	}
	,getCurrentWidget: function() {
		if(this._widgets != null && this.location >= 0 && this.location < this._widgets.length) {
			return this._widgets[this.location];
		}
		return null;
	}
	,set_listIndex: function(i) {
		if(i >= this._lists.length) {
			i = this._lists.length - 1;
		} else if(i < 0) {
			i = 0;
		}
		this.listIndex = i;
		this.set_location(0);
		this._updateCursor();
		return this.listIndex;
	}
	,set_visible: function(b) {
		b = flixel_addons_ui_FlxUISprite.prototype.set_visible.call(this,b);
		return b;
	}
	,set_location: function(i) {
		if(i >= this._widgets.length) {
			i = this._widgets.length - 1;
		}
		this.location = i;
		this._updateCursor();
		return this.location;
	}
	,gamepadAutoConnect: null
	,set_gamepad: function(g) {
		this._gamepad = g;
		this.setDefaultKeys(this._defaultCode);
		var arr = [this.keysUp,this.keysDown,this.keysLeft,this.keysRight,this.keysClick];
		var _g = 0;
		while(_g < arr.length) {
			var list = arr[_g];
			++_g;
			if(list != null) {
				var _g1 = 0;
				while(_g1 < list.length) {
					var keys = list[_g1];
					++_g1;
					if(((keys) instanceof flixel_addons_ui_FlxMultiGamepad)) {
						var fmg = keys;
						fmg.gamepad = this._gamepad;
					}
				}
			}
		}
		return g;
	}
	,get_gamepad: function() {
		return this._gamepad;
	}
	,_gamepad: null
	,keysUp: null
	,keysDown: null
	,keysLeft: null
	,keysRight: null
	,keysClick: null
	,anchor: null
	,dispatchEvents: null
	,inputMethod: null
	,destroy: function() {
		flixel_addons_ui_FlxUISprite.prototype.destroy.call(this);
		if(flixel_FlxG.mouse == this._newMouse) {
			this._newMouse = null;
		}
		this.keysUp = flixel_util_FlxDestroyUtil.destroyArray(this.keysUp);
		this.keysDown = flixel_util_FlxDestroyUtil.destroyArray(this.keysDown);
		this.keysLeft = flixel_util_FlxDestroyUtil.destroyArray(this.keysLeft);
		this.keysRight = flixel_util_FlxDestroyUtil.destroyArray(this.keysRight);
		this.keysClick = flixel_util_FlxDestroyUtil.destroyArray(this.keysClick);
		this.anchor = flixel_util_FlxDestroyUtil.destroy(this.anchor);
		var _g = 0;
		var _g1 = this._lists;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			flixel_addons_ui_U.clearArraySoft(l.widgets);
		}
		flixel_addons_ui_U.clearArraySoft(this._lists);
		this._widgets = null;
	}
	,update: function(elapsed) {
		if(this.get_gamepad() == null) {
			var g = this.getGamepad(false);
			if(g != null) {
				this.set_gamepad(g);
			}
		}
		if(this.lastMouseX != flixel_FlxG.mouse.x || this.lastMouseY != flixel_FlxG.mouse.y) {
			var oldVis = this.visible;
			this.jumpToXY(flixel_FlxG.mouse.x,flixel_FlxG.mouse.y);
			this.set_visible(oldVis);
			this.lastMouseX = flixel_FlxG.mouse.x;
			this.lastMouseY = flixel_FlxG.mouse.y;
		}
		this._checkKeys();
		this._clickTime += elapsed;
		flixel_addons_ui_FlxUISprite.prototype.update.call(this,elapsed);
	}
	,addWidgetsFromUI: function(ui) {
		if(ui.cursorLists != null) {
			var _g = 0;
			var _g1 = ui.cursorLists;
			while(_g < _g1.length) {
				var list = _g1[_g];
				++_g;
				this.addWidgetList(list);
			}
			this._widgets = this._lists[0].widgets;
			this.set_location(0);
			this.set_listIndex(0);
		} else {
			var _g = 0;
			var _g1 = ui.group.members;
			while(_g < _g1.length) {
				var widget = _g1[_g];
				++_g;
				if(js_Boot.__implements(widget,flixel_addons_ui_interfaces_ICursorPointable) || ((widget) instanceof flixel_addons_ui_FlxUIGroup)) {
					this.addWidget(widget);
				}
			}
		}
	}
	,jumpTo: function(widget) {
		var listi = 0;
		var i = 0;
		if(this._lists != null) {
			var _g = 0;
			var _g1 = this._lists;
			while(_g < _g1.length) {
				var list = _g1[_g];
				++_g;
				i = list.widgets.indexOf(widget);
				if(i != -1) {
					this.set_listIndex(listi);
					this.set_location(i);
					return true;
				}
				++listi;
			}
		} else {
			i = this._widgets.indexOf(widget);
			this.set_location(i);
			return true;
		}
		return false;
	}
	,jumpToXY: function(X,Y) {
		var listi = 0;
		var bestd2 = Infinity;
		var bestli = -1;
		var besti = -1;
		if(this._lists != null) {
			var _g = 0;
			var _g1 = this._lists;
			while(_g < _g1.length) {
				var list = _g1[_g];
				++_g;
				var _g2 = 0;
				var _g3 = list.widgets.length;
				while(_g2 < _g3) {
					var i = _g2++;
					var w = list.widgets[i];
					if(w.visible == true && X >= w.x && Y >= w.y && X <= w.x + w.get_width() && Y <= w.y + w.get_height()) {
						var dx = w.x + w.get_width() / 2 - X;
						var dy = w.y + w.get_height() / 2 - Y;
						var d2 = dx * dx + dy * dy;
						if(d2 < bestd2) {
							bestd2 = d2;
							bestli = listi;
							besti = i;
						}
					}
				}
				++listi;
			}
			if(bestli != -1 && besti != -1) {
				this.set_listIndex(bestli);
				this.set_location(besti);
				return true;
			}
		} else {
			var _g = 0;
			var _g1 = this._widgets.length;
			while(_g < _g1) {
				var i = _g++;
				var w = this._widgets[i];
				if(w.visible == true && X >= w.x && Y >= w.y && X <= w.x + w.get_width() && Y <= w.y + w.get_height()) {
					var dx = w.x + w.get_width() / 2 - X;
					var dy = w.y + w.get_height() / 2 - Y;
					var d2 = dx * dx + dy * dy;
					if(d2 < bestd2) {
						bestd2 = d2;
						besti = i;
					}
				}
			}
			if(besti != -1) {
				this.set_location(besti);
				return true;
			}
		}
		return false;
	}
	,addWidgetList: function(list) {
		var _g = 0;
		var _g1 = this._lists;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(flixel_util_FlxArrayUtil.equals(l.widgets,list)) {
				return;
			}
		}
		var x1 = Infinity;
		var y1 = Infinity;
		var x2 = -Infinity;
		var y2 = -Infinity;
		var _g = 0;
		while(_g < list.length) {
			var w = list[_g];
			++_g;
			if(w.x < x1) {
				x1 = w.x;
			}
			if(w.y < y1) {
				y1 = w.y;
			}
			if(w.x + w.get_width() > x2) {
				x2 = w.x;
			}
			if(w.y + w.get_height() > y2) {
				y2 = w.y;
			}
		}
		var theList = null;
		if(this._lists.length == 1 && this._lists[0].widgets != null && this._lists[0].widgets.length == 0) {
			this._lists[0].widgets = [];
			this._lists[0].x = x1 | 0;
			this._lists[0].y = y1 | 0;
			this._lists[0].width = x2 - x1 | 0;
			this._lists[0].height = y2 - y1 | 0;
			theList = this._lists[0];
		} else {
			this._lists.push({ x : x1 | 0, y : y1 | 0, width : x2 - x1 | 0, height : y2 - y1 | 0, widgets : []});
			theList = this._lists[this._lists.length - 1];
		}
		var oldWidgets = this._widgets;
		this._widgets = theList.widgets;
		var _g = 0;
		while(_g < list.length) {
			var ifw = list[_g];
			++_g;
			this.addWidget(ifw);
		}
		this._widgets = oldWidgets;
		this._lists.sort($bind(this,this._sortXYWidgetList));
		var _g = 0;
		var _g1 = this._lists;
		while(_g < _g1.length) {
			var widgetList = _g1[_g];
			++_g;
			widgetList.widgets.sort($bind(this,this._sortXYVisible));
		}
	}
	,addWidget: function(widget) {
		if(js_Boot.__implements(widget,flixel_addons_ui_interfaces_ICursorPointable)) {
			this._widgets.push(widget);
		} else if(((widget) instanceof flixel_addons_ui_FlxUIGroup)) {
			var g = widget;
			var _g = 0;
			var _g1 = g.group.members;
			while(_g < _g1.length) {
				var member = _g1[_g];
				++_g;
				if(js_Boot.__implements(member,flixel_addons_ui_interfaces_IFlxUIWidget)) {
					this.addWidget(member);
				}
			}
		}
		this._widgets.sort($bind(this,this._sortXYVisible));
	}
	,sortWidgets: function(method,list) {
		if(list == null) {
			list = this._widgets;
		}
		switch(method._hx_index) {
		case 0:
			list.sort($bind(this,this._sortXYVisible));
			break;
		case 1:
			list.sort($bind(this,this._sortIDVisible));
			break;
		}
	}
	,clearWidgets: function() {
		flixel_util_FlxArrayUtil.clearArray(this._widgets);
	}
	,removeWidget: function(widget,list) {
		if(list == null) {
			list = this._widgets;
		}
		var value = false;
		if(list != null) {
			if(list.indexOf(widget) != -1) {
				value = HxOverrides.remove(list,widget);
				list.sort($bind(this,this._sortXYVisible));
			}
		}
		return value;
	}
	,setDefaultKeys: function(code) {
		this._defaultCode = code;
		this._clearKeys();
		this._newKeys();
		if((code & 1) == 1) {
			this._addToKeys(this.keysRight,new flixel_addons_ui_FlxMultiKey(9,null,[16]));
			this._addToKeys(this.keysLeft,new flixel_addons_ui_FlxMultiKey(9,[16]));
			this._addToKeys(this.keysClick,new flixel_addons_ui_FlxMultiKey(13));
		}
		if((code & 256) == 256) {
			this._addToKeys(this.keysRight,new flixel_addons_ui_FlxMultiKey(39));
			this._addToKeys(this.keysLeft,new flixel_addons_ui_FlxMultiKey(37));
			this._addToKeys(this.keysDown,new flixel_addons_ui_FlxMultiKey(40));
			this._addToKeys(this.keysUp,new flixel_addons_ui_FlxMultiKey(38));
			this._addToKeys(this.keysClick,new flixel_addons_ui_FlxMultiKey(13));
		}
		if((code & 16) == 16) {
			this._addToKeys(this.keysRight,new flixel_addons_ui_FlxMultiKey(68));
			this._addToKeys(this.keysLeft,new flixel_addons_ui_FlxMultiKey(65));
			this._addToKeys(this.keysDown,new flixel_addons_ui_FlxMultiKey(83));
			this._addToKeys(this.keysUp,new flixel_addons_ui_FlxMultiKey(87));
			this._addToKeys(this.keysClick,new flixel_addons_ui_FlxMultiKey(13));
		}
		if((code & 4096) == 4096) {
			this._addToKeys(this.keysRight,new flixel_addons_ui_FlxMultiKey(102));
			this._addToKeys(this.keysLeft,new flixel_addons_ui_FlxMultiKey(100));
			this._addToKeys(this.keysDown,new flixel_addons_ui_FlxMultiKey(98));
			this._addToKeys(this.keysUp,new flixel_addons_ui_FlxMultiKey(104));
			this._addToKeys(this.keysClick,new flixel_addons_ui_FlxMultiKey(13));
		}
		if(this.get_gamepad() == null) {
			this._gamepad = this.getGamepad();
		}
		if((code & 65536) == 65536) {
			this._addToKeys(this.keysLeft,new flixel_addons_ui_FlxMultiGamepad(this.get_gamepad(),13));
			this._addToKeys(this.keysRight,new flixel_addons_ui_FlxMultiGamepad(this.get_gamepad(),14));
			this._addToKeys(this.keysDown,new flixel_addons_ui_FlxMultiGamepad(this.get_gamepad(),12));
			this._addToKeys(this.keysUp,new flixel_addons_ui_FlxMultiGamepad(this.get_gamepad(),11));
			this._addToKeys(this.keysClick,new flixel_addons_ui_FlxMultiGamepad(this.get_gamepad(),0));
		}
		if((code & 268435456) == 268435456) {
			this._addToKeys(this.keysLeft,new flixel_addons_ui_FlxMultiGamepad(this.get_gamepad(),4));
			this._addToKeys(this.keysRight,new flixel_addons_ui_FlxMultiGamepad(this.get_gamepad(),5));
			this._addToKeys(this.keysClick,new flixel_addons_ui_FlxMultiGamepad(this.get_gamepad(),0));
		}
		if((code & 1048576) == 1048576) {
			this._addToKeys(this.keysLeft,new flixel_addons_ui_FlxMultiGamepadAnalogStick(this.get_gamepad(),{ id : 19, axis : flixel_addons_ui_XY.X, positive : false}));
			this._addToKeys(this.keysRight,new flixel_addons_ui_FlxMultiGamepadAnalogStick(this.get_gamepad(),{ id : 19, axis : flixel_addons_ui_XY.X, positive : true}));
			this._addToKeys(this.keysUp,new flixel_addons_ui_FlxMultiGamepadAnalogStick(this.get_gamepad(),{ id : 19, axis : flixel_addons_ui_XY.Y, positive : false}));
			this._addToKeys(this.keysDown,new flixel_addons_ui_FlxMultiGamepadAnalogStick(this.get_gamepad(),{ id : 19, axis : flixel_addons_ui_XY.Y, positive : true}));
			this._addToKeys(this.keysClick,new flixel_addons_ui_FlxMultiGamepad(this.get_gamepad(),0));
		}
		if((code & 16777216) == 16777216) {
			this._addToKeys(this.keysLeft,new flixel_addons_ui_FlxMultiGamepadAnalogStick(this.get_gamepad(),{ id : 20, axis : flixel_addons_ui_XY.X, positive : false}));
			this._addToKeys(this.keysRight,new flixel_addons_ui_FlxMultiGamepadAnalogStick(this.get_gamepad(),{ id : 20, axis : flixel_addons_ui_XY.X, positive : true}));
			this._addToKeys(this.keysUp,new flixel_addons_ui_FlxMultiGamepadAnalogStick(this.get_gamepad(),{ id : 20, axis : flixel_addons_ui_XY.Y, positive : false}));
			this._addToKeys(this.keysDown,new flixel_addons_ui_FlxMultiGamepadAnalogStick(this.get_gamepad(),{ id : 20, axis : flixel_addons_ui_XY.Y, positive : true}));
			this._addToKeys(this.keysClick,new flixel_addons_ui_FlxMultiGamepad(this.get_gamepad(),0));
		}
	}
	,_lists: null
	,_widgets: null
	,_newMouse: null
	,lastMouseX: null
	,lastMouseY: null
	,_clickPressed: null
	,_defaultCode: null
	,_rightAnchor: null
	,_topAnchor: null
	,_leftAnchor: null
	,_bottomAnchor: null
	,_clickTime: null
	,getGamepad: function(exhaustive) {
		if(exhaustive == null) {
			exhaustive = true;
		}
		var gamepad;
		var _g = this.gamepadAutoConnect;
		switch(_g._hx_index) {
		case 0:
			gamepad = null;
			break;
		case 1:
			gamepad = flixel_FlxG.gamepads.getFirstActiveGamepad();
			break;
		case 2:
			gamepad = flixel_FlxG.gamepads.lastActive;
			break;
		case 3:
			var i = _g.i;
			gamepad = flixel_FlxG.gamepads._activeGamepads[i];
			break;
		}
		if(gamepad == null && exhaustive) {
			var _g = 0;
			var _g1 = flixel_FlxG.gamepads.get_numActiveGamepads();
			while(_g < _g1) {
				var i = _g++;
				gamepad = flixel_FlxG.gamepads._activeGamepads[i];
				if(gamepad != null) {
					return gamepad;
				}
			}
		}
		return gamepad;
	}
	,_sortIDVisible: function(a,b) {
		if(a.visible && !b.visible) {
			return -1;
		}
		if(b.visible && !a.visible) {
			return 1;
		}
		if(a.ID < b.ID) {
			return -1;
		}
		if(a.ID > b.ID) {
			return 1;
		}
		return 0;
	}
	,_sortXYWidgetList: function(a,b) {
		if(a.y < b.y) {
			return -1;
		}
		if(a.y > b.y) {
			return 1;
		}
		if(a.x < b.x) {
			return -1;
		}
		if(a.x > b.x) {
			return 1;
		}
		return 0;
	}
	,_sortXYVisible: function(a,b) {
		if(a.visible && !b.visible) {
			return -1;
		}
		if(b.visible && !a.visible) {
			return 1;
		}
		if(a.y < b.y) {
			return -1;
		}
		if(a.y > b.y) {
			return 1;
		}
		if(a.x < b.x) {
			return -1;
		}
		if(a.x > b.x) {
			return 1;
		}
		return 0;
	}
	,_addToKeys: function(keys,m) {
		var exists = false;
		var _g = 0;
		while(_g < keys.length) {
			var mk = keys[_g];
			++_g;
			if(m.equals(mk)) {
				exists = true;
				break;
			}
		}
		if(!exists) {
			keys.push(m);
		}
	}
	,_clearKeys: function() {
		flixel_addons_ui_U.clearArray(this.keysUp);
		this.keysUp = null;
		flixel_addons_ui_U.clearArray(this.keysDown);
		this.keysDown = null;
		flixel_addons_ui_U.clearArray(this.keysLeft);
		this.keysLeft = null;
		flixel_addons_ui_U.clearArray(this.keysRight);
		this.keysRight = null;
		flixel_addons_ui_U.clearArray(this.keysClick);
		this.keysClick = null;
	}
	,_newKeys: function() {
		this.keysUp = [];
		this.keysDown = [];
		this.keysLeft = [];
		this.keysRight = [];
		this.keysClick = [];
	}
	,_checkKeys: function() {
		var wasInvisible = this.visible == false;
		var lastLocation = this.location;
		var _g = 0;
		var _g1 = this.keysUp;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key.justPressed()) {
				this._doInput(0,-1);
				break;
			}
		}
		var _g = 0;
		var _g1 = this.keysDown;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key.justPressed()) {
				this._doInput(0,1);
				break;
			}
		}
		var _g = 0;
		var _g1 = this.keysLeft;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key.justPressed()) {
				this._doInput(-1,0);
				break;
			}
		}
		var _g = 0;
		var _g1 = this.keysRight;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key.justPressed()) {
				this._doInput(1,0);
				break;
			}
		}
		if(wasInvisible && this.visible && lastLocation != -1) {
			this.set_location(lastLocation);
		}
		if(this._clickKeysJustPressed()) {
			if(!this.ignoreNextInput) {
				this._clickPressed = true;
				this._clickTime = 0;
				this._doPress();
			} else {
				this.ignoreNextInput = false;
			}
		}
		if(this._clickKeysPressed()) {
			this._clickPressed = true;
			this._doMouseMove();
		} else if(this._clickTime > 0) {
			if(this._clickPressed) {
				this._doRelease();
				this._clickPressed = false;
			}
		}
	}
	,_clickKeysJustPressed: function() {
		var _g = 0;
		var _g1 = this.keysClick;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key.justPressed()) {
				return true;
			}
		}
		return false;
	}
	,_clickKeysPressed: function() {
		var _g = 0;
		var _g1 = this.keysClick;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key.pressed()) {
				return true;
			}
		}
		return false;
	}
	,_getWidgetPoint: function(Camera) {
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		var currWidget = this._widgets[this.location];
		if(currWidget == null) {
			return null;
		}
		var fo;
		var widgetPoint = null;
		if(((currWidget) instanceof flixel_FlxObject)) {
			fo = currWidget;
			widgetPoint = fo.getScreenPosition();
		}
		var _g = widgetPoint;
		_g.set_x(_g.x * Camera.totalScaleX);
		var _g = widgetPoint;
		_g.set_y(_g.y * Camera.totalScaleY);
		if(widgetPoint == null) {
			var X = currWidget.x;
			var Y = currWidget.y;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			widgetPoint = point;
		}
		var _g = widgetPoint;
		_g.set_x(_g.x + currWidget.get_width() / 2);
		var _g = widgetPoint;
		_g.set_y(_g.y + currWidget.get_height() / 2);
		return widgetPoint;
	}
	,_doMouseMove: function(pt) {
		var dispose = false;
		if(pt == null) {
			pt = this._getWidgetPoint();
			if(pt == null) {
				return;
			}
			dispose = true;
		}
		if(this.dispatchEvents) {
			var _this = flixel_FlxG.mouse;
			_this._globalScreenX = pt.x / flixel_FlxG.scaleMode.scale.x | 0;
			_this._globalScreenY = pt.y / flixel_FlxG.scaleMode.scale.y | 0;
			_this.updatePositions();
			if(this._newMouse != null) {
				this._newMouse.updateGlobalScreenPosition = false;
			}
			var tmp = openfl_Lib.get_current().stage;
			var pt1 = pt.x;
			var pt2 = pt.y;
			var tmp1 = openfl_Lib.get_current().stage;
			var _this = flixel_FlxG.keys.pressed;
			var tmp2 = _this.keyManager.checkStatus(17,_this.status);
			var _this = flixel_FlxG.keys.pressed;
			var tmp3 = _this.keyManager.checkStatus(18,_this.status);
			var _this = flixel_FlxG.keys.pressed;
			tmp.dispatchEvent(new openfl_events_MouseEvent("mouseMove",true,false,pt1,pt2,tmp1,tmp2,tmp3,_this.keyManager.checkStatus(16,_this.status)));
		}
		if(dispose) {
			pt.put();
		}
	}
	,_doPress: function(pt) {
		var currWidget = this._widgets[this.location];
		if(currWidget == null) {
			return;
		}
		var dispose = false;
		if(pt == null) {
			pt = this._getWidgetPoint();
			if(pt == null) {
				return;
			}
			dispose = true;
		}
		if(this.dispatchEvents) {
			var rawMouseX = pt.x * flixel_FlxG.camera.zoom;
			var rawMouseY = pt.y * flixel_FlxG.camera.zoom;
			var tmp = openfl_Lib.get_current().stage;
			var tmp1 = openfl_Lib.get_current().stage;
			var _this = flixel_FlxG.keys.pressed;
			var tmp2 = _this.keyManager.checkStatus(17,_this.status);
			var _this = flixel_FlxG.keys.pressed;
			var tmp3 = _this.keyManager.checkStatus(18,_this.status);
			var _this = flixel_FlxG.keys.pressed;
			tmp.dispatchEvent(new openfl_events_MouseEvent("mouseDown",true,false,rawMouseX,rawMouseY,tmp1,tmp2,tmp3,_this.keyManager.checkStatus(16,_this.status)));
		}
		if(this.callback != null) {
			this.callback("cursor_down",currWidget);
		}
		if(dispose) {
			pt.put();
		}
	}
	,_doRelease: function(pt) {
		var currWidget = this._widgets[this.location];
		if(currWidget == null) {
			return;
		}
		var dispose = false;
		if(pt == null) {
			pt = this._getWidgetPoint();
			if(pt == null) {
				return;
			}
			dispose = true;
		}
		var rawMouseX = pt.x * flixel_FlxG.camera.zoom;
		var rawMouseY = pt.y * flixel_FlxG.camera.zoom;
		if(this.dispatchEvents) {
			var tmp = openfl_Lib.get_current().stage;
			var tmp1 = openfl_Lib.get_current().stage;
			var _this = flixel_FlxG.keys.pressed;
			var tmp2 = _this.keyManager.checkStatus(17,_this.status);
			var _this = flixel_FlxG.keys.pressed;
			var tmp3 = _this.keyManager.checkStatus(18,_this.status);
			var _this = flixel_FlxG.keys.pressed;
			tmp.dispatchEvent(new openfl_events_MouseEvent("mouseUp",true,false,rawMouseX,rawMouseY,tmp1,tmp2,tmp3,_this.keyManager.checkStatus(16,_this.status)));
			if(this._clickPressed) {
				var tmp = openfl_Lib.get_current().stage;
				var tmp1 = openfl_Lib.get_current().stage;
				var _this = flixel_FlxG.keys.pressed;
				var tmp2 = _this.keyManager.checkStatus(17,_this.status);
				var _this = flixel_FlxG.keys.pressed;
				var tmp3 = _this.keyManager.checkStatus(18,_this.status);
				var _this = flixel_FlxG.keys.pressed;
				tmp.dispatchEvent(new openfl_events_MouseEvent("click",true,false,rawMouseX,rawMouseY,tmp1,tmp2,tmp3,_this.keyManager.checkStatus(16,_this.status)));
			}
		}
		if(this.callback != null) {
			this.callback("cursor_click",currWidget);
		}
		if(dispose) {
			pt.put();
		}
		if(this._newMouse != null) {
			this._newMouse.updateGlobalScreenPosition = true;
			var _this = this._newMouse;
			var newX = flixel_FlxG.game.get_mouseX() | 0;
			var newY = flixel_FlxG.game.get_mouseY() | 0;
			_this._globalScreenX = newX / flixel_FlxG.scaleMode.scale.x | 0;
			_this._globalScreenY = newY / flixel_FlxG.scaleMode.scale.y | 0;
			_this.updatePositions();
		}
	}
	,_findNextY: function(Y,indexValue,listWidget,listLists) {
		var currX = 0;
		var currY = 0;
		var length = 0;
		if(listWidget != null) {
			currX = listWidget[indexValue].x | 0;
			currY = listWidget[indexValue].y | 0;
			length = listWidget.length;
		} else if(listLists != null) {
			currX = listLists[indexValue].x;
			currY = listLists[indexValue].y;
			length = listLists.length;
		}
		var nextX = 0;
		var nextY = 0;
		var dx = Infinity;
		var dy = Infinity;
		var bestdx = dx;
		var bestdy = dy;
		var besti = -1;
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			if(i != indexValue) {
				if(listWidget != null) {
					nextX = listWidget[i].x | 0;
					nextY = listWidget[i].y | 0;
				} else if(listLists != null) {
					nextX = listLists[i].x;
					nextY = listLists[i].y;
				}
				dy = nextY - currY;
				if((dy < 0 ? -1 : 1) == (Y < 0 ? -1 : 1) && dy != 0) {
					dy = Math.abs(dy);
					if(dy < bestdy) {
						bestdy = dy;
						bestdx = Math.abs(currX - nextX);
						besti = i;
					} else if(dy == bestdy) {
						dx = Math.abs(currX - nextX);
						if(dx < bestdx) {
							bestdx = dx;
							besti = i;
						}
					}
				}
			}
		}
		return besti;
	}
	,_wrapX: function(X,indexValue,listLength) {
		if(indexValue + X < 0) {
			indexValue = indexValue + X + listLength;
		} else if(indexValue + X >= listLength) {
			indexValue = indexValue + X - listLength;
		}
		return indexValue;
	}
	,_wrapY: function(Y,indexValue,listWidget,listLists) {
		var dx = Infinity;
		var dy = Infinity;
		var bestdx = dx;
		var bestdy = dy;
		var besti = -1;
		bestdx = Infinity;
		bestdy = 0;
		var length = 0;
		var currX = 0;
		var currY = 0;
		if(listWidget != null) {
			length = listWidget.length;
			currX = listWidget[indexValue].x | 0;
			currY = listWidget[indexValue].y | 0;
		}
		if(listLists != null) {
			length = listLists.length;
			currX = listLists[indexValue].x;
			currY = listLists[indexValue].y;
		}
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			if(i != this.location) {
				var xx = 0;
				var yy = 0;
				if(listWidget != null) {
					xx = listWidget[i].x | 0;
					yy = listWidget[i].y | 0;
				} else if(listLists != null) {
					xx = listLists[i].x | 0;
					yy = listLists[i].y | 0;
				}
				dy = yy - currY;
				if((dy < 0 ? -1 : 1) == (Y < 0 ? -1 : 1) == false && dy != 0) {
					dy = Math.abs(dy);
					if(dy > bestdy) {
						bestdy = dy;
						bestdx = Math.abs(currX - xx);
						besti = i;
					} else if(dy == bestdy) {
						dx = Math.abs(currX - xx);
						if(dx < bestdx) {
							bestdx = dx;
							besti = i;
						}
					}
				}
			}
		}
		if(besti != -1) {
			indexValue = besti;
		}
		return indexValue;
	}
	,_doInput: function(X,Y,recursion) {
		if(recursion == null) {
			recursion = 0;
		}
		if(this.ignoreNextInput) {
			this.ignoreNextInput = false;
			return;
		}
		var currWidget = null;
		if(Y == 0) {
			if(this.location + X >= 0 && this.location + X < this._widgets.length) {
				this.set_location(this.location + X);
			} else if(this.wrap) {
				if(this._lists.length == 1) {
					this.set_location(this._wrapX(X,this.location,this._widgets.length));
				} else {
					if(this.listIndex + X >= 0 && this.listIndex + X < this._lists.length) {
						this.set_listIndex(this.listIndex + X);
					} else {
						this.set_listIndex(this._wrapX(X,this.listIndex,this._lists.length));
					}
					if(X == -1) {
						this.set_location(this._widgets.length - 1);
					}
				}
			}
			currWidget = this._widgets[this.location];
		} else {
			var nextY = this._findNextY(Y,this.location,this._widgets,null);
			if(nextY != -1) {
				this.set_location(nextY);
				currWidget = this._widgets[this.location];
			} else if(this.wrap) {
				if(this._lists.length == 1) {
					this.set_location(this._wrapY(Y,this.location,this._widgets,null));
					currWidget = this._widgets[this.location];
				} else {
					var nextListY = this._findNextY(Y,this.listIndex,null,this._lists);
					if(nextListY != -1) {
						this.set_listIndex(nextListY);
						currWidget = this._widgets[this.location];
					} else {
						this.set_listIndex(this._wrapY(Y,this.listIndex,null,this._lists));
					}
					if(Y == -1) {
						this.set_location(this._widgets.length - 1);
					}
				}
				currWidget = this._widgets[this.location];
			}
		}
		if(currWidget != null && this._widgets != null) {
			if(currWidget.visible == false && recursion < this._widgets.length) {
				this._doInput(X,Y,recursion + 1);
				return;
			}
		}
		if(this.callback != null) {
			this.callback("cursor_jump",currWidget);
		}
	}
	,_updateCursor: function() {
		this._widgets = this._lists[this.listIndex].widgets;
		if(this.location < 0 || this._lists == null || this._widgets == null) {
			this.set_visible(false);
			return;
		}
		this.set_visible(this.set_active(true));
		var currWidget = this._widgets[this.location];
		var flippedX = false;
		var flippedY = false;
		if(currWidget != null) {
			var target = currWidget;
			if(((target) instanceof flixel_FlxSprite)) {
				var fs = target;
				if(fs != null && fs.scrollFactor != null) {
					this.scrollFactor.set(fs.scrollFactor.x,fs.scrollFactor.y);
				}
			}
			if(((currWidget) instanceof flixel_addons_ui_FlxUICheckBox)) {
				var check = target;
				target = check.box;
			}
			this.anchor.anchorThing(this,target);
			if(this.x < 0) {
				this._flipAnchor("left",target);
				flippedX = true;
			} else if(this.x > flixel_FlxG.width + this.get_width()) {
				this._flipAnchor("right",target);
				flippedX = true;
			}
			if(this.y < 0) {
				this._flipAnchor("top",target);
				flippedY = true;
			} else if(this.y > flixel_FlxG.height + this.get_height()) {
				this._flipAnchor("bottom",target);
				flippedY = true;
			}
			this.set_flipX(flippedX);
			this.set_flipY(flippedY);
		}
	}
	,_flipAnchor: function(AnchorDir,destination) {
		var theAnchor = null;
		switch(AnchorDir) {
		case "bottom":
			if(this.anchor.y.side == "bottom") {
				this._bottomAnchor = this.anchor.getFlipped(true,false,this._bottomAnchor);
				theAnchor = this._bottomAnchor;
			}
			break;
		case "left":
			if(this.anchor.x.side == "left") {
				this._leftAnchor = this.anchor.getFlipped(true,false,this._leftAnchor);
				theAnchor = this._leftAnchor;
			}
			break;
		case "right":
			if(this.anchor.x.side == "right") {
				this._topAnchor = this.anchor.getFlipped(true,false,this._rightAnchor);
				theAnchor = this._rightAnchor;
			}
			break;
		case "top":
			if(this.anchor.y.side == "top") {
				this._topAnchor = this.anchor.getFlipped(true,false,this._topAnchor);
				theAnchor = this._topAnchor;
			}
			break;
		}
		if(theAnchor != null) {
			theAnchor.anchorThing(this,destination);
		}
	}
	,__class__: flixel_addons_ui_FlxUICursor
	,__properties__: $extend(flixel_addons_ui_FlxUISprite.prototype.__properties__,{set_gamepad:"set_gamepad",get_gamepad:"get_gamepad",set_listIndex:"set_listIndex",set_location:"set_location"})
});
var flixel_addons_ui_GamepadAutoConnectPreference = $hxEnums["flixel.addons.ui.GamepadAutoConnectPreference"] = { __ename__ : "flixel.addons.ui.GamepadAutoConnectPreference", __constructs__ : ["Never","FirstActive","LastActive","GamepadID"]
	,Never: {_hx_index:0,__enum__:"flixel.addons.ui.GamepadAutoConnectPreference",toString:$estr}
	,FirstActive: {_hx_index:1,__enum__:"flixel.addons.ui.GamepadAutoConnectPreference",toString:$estr}
	,LastActive: {_hx_index:2,__enum__:"flixel.addons.ui.GamepadAutoConnectPreference",toString:$estr}
	,GamepadID: ($_=function(i) { return {_hx_index:3,i:i,__enum__:"flixel.addons.ui.GamepadAutoConnectPreference",toString:$estr}; },$_.__params__ = ["i"],$_)
};
flixel_addons_ui_GamepadAutoConnectPreference.__empty_constructs__ = [flixel_addons_ui_GamepadAutoConnectPreference.Never,flixel_addons_ui_GamepadAutoConnectPreference.FirstActive,flixel_addons_ui_GamepadAutoConnectPreference.LastActive];
var flixel_addons_ui_SortMethod = $hxEnums["flixel.addons.ui.SortMethod"] = { __ename__ : "flixel.addons.ui.SortMethod", __constructs__ : ["XY","ID"]
	,XY: {_hx_index:0,__enum__:"flixel.addons.ui.SortMethod",toString:$estr}
	,ID: {_hx_index:1,__enum__:"flixel.addons.ui.SortMethod",toString:$estr}
};
flixel_addons_ui_SortMethod.__empty_constructs__ = [flixel_addons_ui_SortMethod.XY,flixel_addons_ui_SortMethod.ID];
var flixel_addons_ui_FlxUIDropDownMenu = function(X,Y,DataList,Callback,Header,DropPanel,ButtonList,UIControlCallback) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this.dropDirection = flixel_addons_ui_FlxUIDropDownMenuDropDirection.Automatic;
	this.list = [];
	flixel_addons_ui_FlxUIGroup.call(this,X,Y);
	this.callback = Callback;
	this.header = Header;
	this.dropPanel = DropPanel;
	if(this.header == null) {
		this.header = new flixel_addons_ui_FlxUIDropDownHeader();
	}
	if(this.dropPanel == null) {
		var rect = new openfl_geom_Rectangle(0,0,this.header.background.get_width(),this.header.background.get_height());
		this.dropPanel = new flixel_addons_ui_FlxUI9SliceSprite(0,0,"flixel/flixel-ui/img/box.png",rect,[1,1,14,14]);
	}
	if(DataList != null) {
		var _g = 0;
		var _g1 = DataList.length;
		while(_g < _g1) {
			var i = _g++;
			var data = DataList[i];
			this.list.push(this.makeListButton(i,data.label,data.name));
		}
		this.selectSomething(DataList[0].name,DataList[0].label);
	} else if(ButtonList != null) {
		var _g = 0;
		while(_g < ButtonList.length) {
			var btn = ButtonList[_g];
			++_g;
			this.list.push(btn);
			btn.resize(this.header.background.get_width(),this.header.background.get_height());
			btn.set_x(1);
		}
	}
	this.updateButtonPositions();
	this.dropPanel.resize(this.header.background.get_width(),this.getPanelHeight());
	this.dropPanel.set_visible(false);
	this.add(this.dropPanel);
	var _g = 0;
	var _g1 = this.list;
	while(_g < _g1.length) {
		var btn = _g1[_g];
		++_g;
		this.add(btn);
		btn.set_visible(false);
	}
	this.header.button.onUp.callback = $bind(this,this.onDropdown);
	this.add(this.header);
};
$hxClasses["flixel.addons.ui.FlxUIDropDownMenu"] = flixel_addons_ui_FlxUIDropDownMenu;
flixel_addons_ui_FlxUIDropDownMenu.__name__ = "flixel.addons.ui.FlxUIDropDownMenu";
flixel_addons_ui_FlxUIDropDownMenu.__interfaces__ = [flixel_addons_ui_interfaces_IHasParams,flixel_addons_ui_interfaces_IFlxUIClickable,flixel_addons_ui_interfaces_IFlxUIWidget];
flixel_addons_ui_FlxUIDropDownMenu.makeStrIdLabelArray = function(StringArray,UseIndexID) {
	if(UseIndexID == null) {
		UseIndexID = false;
	}
	var strIdArray = [];
	var _g = 0;
	var _g1 = StringArray.length;
	while(_g < _g1) {
		var i = _g++;
		var ID = StringArray[i];
		if(UseIndexID) {
			ID = i == null ? "null" : "" + i;
		}
		strIdArray[i] = new flixel_addons_ui_StrNameLabel(ID,StringArray[i]);
	}
	return strIdArray;
};
flixel_addons_ui_FlxUIDropDownMenu.__super__ = flixel_addons_ui_FlxUIGroup;
flixel_addons_ui_FlxUIDropDownMenu.prototype = $extend(flixel_addons_ui_FlxUIGroup.prototype,{
	skipButtonUpdate: null
	,set_skipButtonUpdate: function(b) {
		this.skipButtonUpdate = b;
		this.header.button.set_skipButtonUpdate(b);
		return b;
	}
	,_selectedId: null
	,_selectedLabel: null
	,get_selectedId: function() {
		return this._selectedId;
	}
	,set_selectedId: function(str) {
		if(this._selectedId == str) {
			return str;
		}
		var i = 0;
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var btn = _g1[_g];
			++_g;
			if(btn != null && btn.name == str) {
				var item = this.list[i];
				this._selectedId = str;
				if(item.label != null) {
					this._selectedLabel = item.label.text;
					this.header.text.set_text(item.label.text);
				} else {
					this._selectedLabel = "";
					this.header.text.set_text("");
				}
				return str;
			}
			++i;
		}
		return str;
	}
	,get_selectedLabel: function() {
		return this._selectedLabel;
	}
	,set_selectedLabel: function(str) {
		if(this._selectedLabel == str) {
			return str;
		}
		var i = 0;
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var btn = _g1[_g];
			++_g;
			if(btn.label.text == str) {
				var item = this.list[i];
				this._selectedId = item.name;
				this._selectedLabel = str;
				this.header.text.set_text(str);
				return str;
			}
			++i;
		}
		return str;
	}
	,header: null
	,list: null
	,dropPanel: null
	,params: null
	,set_params: function(p) {
		return this.params = p;
	}
	,dropDirection: null
	,set_dropDirection: function(dropDirection) {
		this.dropDirection = dropDirection;
		this.updateButtonPositions();
		return dropDirection;
	}
	,callback: null
	,updateButtonPositions: function() {
		var buttonHeight = this.header.background.get_height();
		this.dropPanel.set_y(this.header.background.y);
		if(this.dropsUp()) {
			var _g = this.dropPanel;
			_g.set_y(_g.y - this.getPanelHeight());
		} else {
			var _g = this.dropPanel;
			_g.set_y(_g.y + buttonHeight);
		}
		var offset = this.dropPanel.y;
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			button.set_y(offset);
			offset += buttonHeight;
		}
	}
	,set_visible: function(Value) {
		var vDropPanel = this.dropPanel.visible;
		var vButtons = [];
		var _g = 0;
		var _g1 = this.list.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.list[i] != null) {
				vButtons.push(this.list[i].visible);
			} else {
				vButtons.push(false);
			}
		}
		flixel_addons_ui_FlxUIGroup.prototype.set_visible.call(this,Value);
		this.dropPanel.set_visible(vDropPanel);
		var _g = 0;
		var _g1 = this.list.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.list[i] != null) {
				this.list[i].set_visible(vButtons[i]);
			}
		}
		return Value;
	}
	,dropsUp: function() {
		if(this.dropDirection != flixel_addons_ui_FlxUIDropDownMenuDropDirection.Up) {
			if(this.dropDirection == flixel_addons_ui_FlxUIDropDownMenuDropDirection.Automatic) {
				return this.exceedsHeight();
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,exceedsHeight: function() {
		return this.y + this.getPanelHeight() + this.header.background.get_height() > flixel_FlxG.height;
	}
	,getPanelHeight: function() {
		return this.list.length * this.header.background.get_height();
	}
	,setData: function(DataList) {
		var i = 0;
		if(DataList != null) {
			var _g = 0;
			while(_g < DataList.length) {
				var data = DataList[_g];
				++_g;
				var recycled = false;
				if(this.list != null) {
					if(i <= this.list.length - 1) {
						var btn = this.list[i];
						if(btn != null) {
							btn.label.set_text(data.label);
							this.list[i].name = data.name;
							recycled = true;
						}
					}
				} else {
					this.list = [];
				}
				if(!recycled) {
					var t = this.makeListButton(i,data.label,data.name);
					this.list.push(t);
					this.add(t);
					t.set_visible(false);
				}
				++i;
			}
			if(this.list.length > DataList.length) {
				var _g = DataList.length;
				var _g1 = this.list.length;
				while(_g < _g1) {
					var j = _g++;
					var b = this.list.pop();
					b.set_visible(false);
					b.set_active(false);
					this.remove(b,true);
					b.destroy();
					b = null;
				}
			}
			this.selectSomething(DataList[0].name,DataList[0].label);
		}
		this.dropPanel.resize(this.header.background.get_width(),this.getPanelHeight());
		this.updateButtonPositions();
	}
	,selectSomething: function(name,label) {
		this.header.text.set_text(label);
		this.set_selectedId(name);
		this.set_selectedLabel(label);
	}
	,makeListButton: function(i,Label,Name) {
		var t = new flixel_addons_ui_FlxUIButton(0,0,Label);
		t.broadcastToFlxUI = false;
		var _g = $bind(this,this.onClickItem);
		var i1 = i;
		var tmp = function() {
			_g(i1);
		};
		t.onUp.callback = tmp;
		t.name = Name;
		t.loadGraphicSlice9(["flixel/flixel-ui/img/invis.png","flixel/flixel-ui/img/hilight.png","flixel/flixel-ui/img/hilight.png"],this.header.background.get_width() | 0,this.header.background.get_height() | 0,[[1,1,3,3],[1,1,3,3],[1,1,3,3]],0);
		var _g1 = t.labelOffsets[2];
		_g1.set_y(_g1.y - 1);
		t.up_color = -16777216;
		t.over_color = -1;
		t.down_color = -1;
		t.resize(this.header.background.get_width() - 2,this.header.background.get_height() - 1);
		t.label.set_alignment("left");
		t.autoCenterLabel();
		t.set_x(1);
		var _g1 = 0;
		var _g2 = t.labelOffsets;
		while(_g1 < _g2.length) {
			var offset = _g2[_g1];
			++_g1;
			var _g3 = offset;
			_g3.set_x(_g3.x + 2);
		}
		return t;
	}
	,changeLabelByIndex: function(i,NewLabel) {
		var btn = this.getBtnByIndex(i);
		if(btn != null && btn.label != null) {
			btn.label.set_text(NewLabel);
		}
	}
	,changeLabelById: function(name,NewLabel) {
		var btn = this.getBtnById(name);
		if(btn != null && btn.label != null) {
			btn.label.set_text(NewLabel);
		}
	}
	,getBtnByIndex: function(i) {
		if(i >= 0 && i < this.list.length) {
			return this.list[i];
		}
		return null;
	}
	,getBtnById: function(name) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var btn = _g1[_g];
			++_g;
			if(btn.name == name) {
				return btn;
			}
		}
		return null;
	}
	,update: function(elapsed) {
		flixel_addons_ui_FlxUIGroup.prototype.update.call(this,elapsed);
		if(this.dropPanel.visible && flixel_FlxG.mouse._leftButton.current == 2) {
			if(!flixel_FlxG.mouse.overlaps(this)) {
				this.showList(false);
			}
		}
	}
	,destroy: function() {
		flixel_addons_ui_FlxUIGroup.prototype.destroy.call(this);
		this.dropPanel = flixel_util_FlxDestroyUtil.destroy(this.dropPanel);
		this.list = flixel_util_FlxDestroyUtil.destroyArray(this.list);
		this.callback = null;
	}
	,showList: function(b) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			button.set_visible(b);
			button.set_active(b);
		}
		this.dropPanel.set_visible(b);
		flixel_addons_ui_FlxUI.forceFocus(b,this);
	}
	,onDropdown: function() {
		if(this.dropPanel.visible) {
			this.showList(false);
		} else {
			this.showList(true);
		}
	}
	,onClickItem: function(i) {
		var item = this.list[i];
		this.selectSomething(item.name,item.label.text);
		this.showList(false);
		if(this.callback != null) {
			this.callback(item.name);
		}
		if(this.broadcastToFlxUI) {
			flixel_addons_ui_FlxUI.event("click_dropdown",this,item.name,this.params);
		}
	}
	,__class__: flixel_addons_ui_FlxUIDropDownMenu
	,__properties__: $extend(flixel_addons_ui_FlxUIGroup.prototype.__properties__,{set_dropDirection:"set_dropDirection",set_params:"set_params",set_selectedLabel:"set_selectedLabel",get_selectedLabel:"get_selectedLabel",set_selectedId:"set_selectedId",get_selectedId:"get_selectedId",set_skipButtonUpdate:"set_skipButtonUpdate"})
});
var flixel_addons_ui_FlxUIDropDownHeader = function(Width,Background,Text1,Button) {
	if(Width == null) {
		Width = 120;
	}
	flixel_addons_ui_FlxUIGroup.call(this);
	this.background = Background;
	this.text = Text1;
	this.button = Button;
	if(this.background == null) {
		this.background = new flixel_addons_ui_FlxUI9SliceSprite(0,0,"flixel/flixel-ui/img/box.png",new openfl_geom_Rectangle(0,0,Width,20),[1,1,14,14]);
	}
	if(this.button == null) {
		this.button = new flixel_addons_ui_FlxUISpriteButton(0,0,new flixel_FlxSprite(0,0,"flixel/flixel-ui/img/dropdown_mark.png"));
		this.button.loadGraphicSlice9(["flixel/flixel-ui/img/button_thin.png"],80,20,[flixel_util_FlxStringUtil.toIntArray("6,6,11,11")],0,-1,false,18,18);
	}
	this.button.resize(this.background.get_height(),this.background.get_height());
	this.button.set_x(this.background.x + this.background.get_width() - this.button.get_width());
	this.button.set_width(Width);
	var _g = this.button.offset;
	_g.set_x(_g.x - (Width - this.button.frameWidth));
	this.button.set_x(this.offset.x);
	var _g = this.button.label.offset;
	_g.set_x(_g.x + this.button.offset.x);
	if(this.text == null) {
		this.text = new flixel_addons_ui_FlxUIText(0,0,this.background.get_width() | 0);
	}
	this.text.setPosition(2,4);
	this.text.set_color(-16777216);
	this.add(this.background);
	this.add(this.button);
	this.add(this.text);
};
$hxClasses["flixel.addons.ui.FlxUIDropDownHeader"] = flixel_addons_ui_FlxUIDropDownHeader;
flixel_addons_ui_FlxUIDropDownHeader.__name__ = "flixel.addons.ui.FlxUIDropDownHeader";
flixel_addons_ui_FlxUIDropDownHeader.__super__ = flixel_addons_ui_FlxUIGroup;
flixel_addons_ui_FlxUIDropDownHeader.prototype = $extend(flixel_addons_ui_FlxUIGroup.prototype,{
	background: null
	,text: null
	,button: null
	,destroy: function() {
		flixel_addons_ui_FlxUIGroup.prototype.destroy.call(this);
		this.background = flixel_util_FlxDestroyUtil.destroy(this.background);
		this.text = flixel_util_FlxDestroyUtil.destroy(this.text);
		this.button = flixel_util_FlxDestroyUtil.destroy(this.button);
	}
	,__class__: flixel_addons_ui_FlxUIDropDownHeader
});
var flixel_addons_ui_FlxUIDropDownMenuDropDirection = $hxEnums["flixel.addons.ui.FlxUIDropDownMenuDropDirection"] = { __ename__ : "flixel.addons.ui.FlxUIDropDownMenuDropDirection", __constructs__ : ["Automatic","Down","Up"]
	,Automatic: {_hx_index:0,__enum__:"flixel.addons.ui.FlxUIDropDownMenuDropDirection",toString:$estr}
	,Down: {_hx_index:1,__enum__:"flixel.addons.ui.FlxUIDropDownMenuDropDirection",toString:$estr}
	,Up: {_hx_index:2,__enum__:"flixel.addons.ui.FlxUIDropDownMenuDropDirection",toString:$estr}
};
flixel_addons_ui_FlxUIDropDownMenuDropDirection.__empty_constructs__ = [flixel_addons_ui_FlxUIDropDownMenuDropDirection.Automatic,flixel_addons_ui_FlxUIDropDownMenuDropDirection.Down,flixel_addons_ui_FlxUIDropDownMenuDropDirection.Up];
var flixel_addons_ui_FlxUIInputText = function(X,Y,Width,Text1,size,TextColor,BackgroundColor,EmbeddedFont) {
	this.broadcastToFlxUI = true;
	flixel_addons_ui_FlxInputText.call(this,X,Y,Width,Text1,size,TextColor,BackgroundColor,EmbeddedFont);
};
$hxClasses["flixel.addons.ui.FlxUIInputText"] = flixel_addons_ui_FlxUIInputText;
flixel_addons_ui_FlxUIInputText.__name__ = "flixel.addons.ui.FlxUIInputText";
flixel_addons_ui_FlxUIInputText.__interfaces__ = [flixel_addons_ui_interfaces_IHasParams,flixel_addons_ui_interfaces_IFlxUIWidget,flixel_addons_ui_interfaces_IResizable];
flixel_addons_ui_FlxUIInputText.__super__ = flixel_addons_ui_FlxInputText;
flixel_addons_ui_FlxUIInputText.prototype = $extend(flixel_addons_ui_FlxInputText.prototype,{
	name: null
	,broadcastToFlxUI: null
	,resize: function(w,h) {
		this.set_width(w);
		this.set_height(h);
		this.calcFrame();
	}
	,onChange: function(action) {
		flixel_addons_ui_FlxInputText.prototype.onChange.call(this,action);
		if(this.broadcastToFlxUI) {
			switch(action) {
			case "backspace":case "delete":
				flixel_addons_ui_FlxUI.event("delete_input_text",this,this.text,this.params);
				flixel_addons_ui_FlxUI.event("change_input_text",this,this.text,this.params);
				break;
			case "enter":
				flixel_addons_ui_FlxUI.event("enter_input_text",this,this.text,this.params);
				break;
			case "input":
				flixel_addons_ui_FlxUI.event("input_input_text",this,this.text,this.params);
				flixel_addons_ui_FlxUI.event("change_input_text",this,this.text,this.params);
				break;
			}
		}
	}
	,__class__: flixel_addons_ui_FlxUIInputText
});
var flixel_addons_ui_FlxUILine = function(X,Y,Axis,Length,Thickness,Color) {
	this.thickness = 1;
	this.length = 10;
	this.axis = flixel_addons_ui_LineAxis.HORIZONTAL;
	flixel_addons_ui_FlxUISprite.call(this,X,Y);
	this.makeGraphic(2,2,-1);
	this.set_color(Color);
	this.set_axis(Axis);
	this.set_length(Length);
	this.set_thickness(Thickness);
};
$hxClasses["flixel.addons.ui.FlxUILine"] = flixel_addons_ui_FlxUILine;
flixel_addons_ui_FlxUILine.__name__ = "flixel.addons.ui.FlxUILine";
flixel_addons_ui_FlxUILine.__interfaces__ = [flixel_addons_ui_interfaces_IResizable];
flixel_addons_ui_FlxUILine.__super__ = flixel_addons_ui_FlxUISprite;
flixel_addons_ui_FlxUILine.prototype = $extend(flixel_addons_ui_FlxUISprite.prototype,{
	axis: null
	,length: null
	,thickness: null
	,set_axis: function(a) {
		this.axis = a;
		this.refresh();
		return a;
	}
	,set_length: function(l) {
		this.length = l;
		this.refresh();
		return l;
	}
	,set_thickness: function(t) {
		this.thickness = t;
		this.refresh();
		return t;
	}
	,refresh: function() {
		if(this.axis == flixel_addons_ui_LineAxis.HORIZONTAL) {
			this.scale.set(0.5 * this.length,0.5 * this.thickness);
		} else {
			this.scale.set(0.5 * this.thickness,0.5 * this.length);
		}
		this.updateHitbox();
	}
	,resize: function(width,height) {
		if(this.axis == flixel_addons_ui_LineAxis.HORIZONTAL) {
			this.set_length(width);
			this.set_thickness(height);
		} else {
			this.set_length(height);
			this.set_thickness(width);
		}
	}
	,__class__: flixel_addons_ui_FlxUILine
	,__properties__: $extend(flixel_addons_ui_FlxUISprite.prototype.__properties__,{set_thickness:"set_thickness",set_length:"set_length",set_axis:"set_axis"})
});
var flixel_addons_ui_LineAxis = $hxEnums["flixel.addons.ui.LineAxis"] = { __ename__ : "flixel.addons.ui.LineAxis", __constructs__ : ["HORIZONTAL","VERTICAL"]
	,HORIZONTAL: {_hx_index:0,__enum__:"flixel.addons.ui.LineAxis",toString:$estr}
	,VERTICAL: {_hx_index:1,__enum__:"flixel.addons.ui.LineAxis",toString:$estr}
};
flixel_addons_ui_LineAxis.__empty_constructs__ = [flixel_addons_ui_LineAxis.HORIZONTAL,flixel_addons_ui_LineAxis.VERTICAL];
var flixel_addons_ui_FlxUIList = function(X,Y,Widgets,W,H,MoreString,Stacking,Spacing,PrevButtonOffset,NextButtonOffset,PrevButton,NextButton) {
	if(Spacing == null) {
		Spacing = 0;
	}
	if(Stacking == null) {
		Stacking = 1;
	}
	if(MoreString == null) {
		MoreString = "<X> more...";
	}
	if(H == null) {
		H = 0;
	}
	if(W == null) {
		W = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._skipRefresh = false;
	this.scrollIndex = 0;
	this._skipRefresh = true;
	flixel_addons_ui_FlxUIGroup.call(this,X,Y);
	this.set_stacking(Stacking);
	this.set_spacing(Spacing);
	if(Widgets != null) {
		var _g = 0;
		while(_g < Widgets.length) {
			var widget = Widgets[_g];
			++_g;
			this.add(widget);
		}
	}
	this.prevButton = PrevButton;
	this.nextButton = NextButton;
	this.prevButtonOffset = PrevButtonOffset;
	this.nextButtonOffset = NextButtonOffset;
	this.set_moreString(MoreString);
	if(this.prevButton == null) {
		var _g = $bind(this,this.onClick);
		var i = -1;
		var pButton = new flixel_addons_ui_FlxUIButton(0,0," ",function() {
			_g(i);
		});
		if(this.stacking == 0) {
			pButton.loadGraphicsUpOverDown("flixel/flixel-ui/img/button_arrow_left.png");
			pButton.label.set_width(pButton.label.set_fieldWidth(100));
			pButton.label.set_text(this.getMoreString(0));
			pButton.setAllLabelOffsets(pButton.get_width() - pButton.label.get_width(),pButton.get_height() + 2);
			pButton.label.set_alignment("right");
		} else {
			pButton.loadGraphicsUpOverDown("flixel/flixel-ui/img/button_arrow_up.png");
			pButton.label.set_width(pButton.label.set_fieldWidth(100));
			pButton.label.set_text(this.getMoreString(0));
			pButton.setAllLabelOffsets(0,0);
			pButton.setCenterLabelOffset(pButton.get_width() + 2,pButton.get_height() - pButton.label.get_height());
			pButton.label.set_alignment("left");
		}
		this.prevButton = pButton;
	} else {
		if(((this.prevButton) instanceof flixel_addons_ui_FlxUIButton)) {
			var fuib = this.prevButton;
			var _g1 = $bind(this,this.onClick);
			var i1 = -1;
			var tmp = function() {
				_g1(i1);
			};
			fuib.onUp.callback = tmp;
		}
		if(((this.prevButton) instanceof flixel_addons_ui_FlxUISpriteButton)) {
			var fusb = this.prevButton;
			var _g2 = $bind(this,this.onClick);
			var i2 = -1;
			var tmp = function() {
				_g2(i2);
			};
			fusb.onUp.callback = tmp;
		}
	}
	if(this.nextButton == null) {
		var _g3 = $bind(this,this.onClick);
		var i3 = 1;
		var nButton = new flixel_addons_ui_FlxUIButton(0,0," ",function() {
			_g3(i3);
		});
		if(this.stacking == 0) {
			nButton.loadGraphicsUpOverDown("flixel/flixel-ui/img/button_arrow_right.png");
			nButton.label.set_width(nButton.label.set_fieldWidth(100));
			nButton.label.set_text(this.getMoreString(0));
			nButton.setAllLabelOffsets(0,nButton.get_height() + 2);
			nButton.label.set_alignment("left");
		} else {
			nButton.loadGraphicsUpOverDown("flixel/flixel-ui/img/button_arrow_down.png");
			nButton.label.set_width(nButton.label.set_fieldWidth(100));
			nButton.label.set_text(this.getMoreString(0));
			nButton.setAllLabelOffsets(0,0);
			nButton.setCenterLabelOffset(nButton.get_width() + 2,0);
			nButton.label.set_alignment("left");
		}
		this.nextButton = nButton;
	} else {
		if(((this.nextButton) instanceof flixel_addons_ui_FlxUIButton)) {
			var fuib = this.nextButton;
			var _g4 = $bind(this,this.onClick);
			var i4 = 1;
			var tmp = function() {
				_g4(i4);
			};
			fuib.onUp.callback = tmp;
		}
		if(((this.nextButton) instanceof flixel_addons_ui_FlxUISpriteButton)) {
			var fusb = this.nextButton;
			var _g5 = $bind(this,this.onClick);
			var i5 = 1;
			var tmp = function() {
				_g5(i5);
			};
			fusb.onUp.callback = tmp;
		}
	}
	if(this.prevButtonOffset == null) {
		var X = 0;
		var Y = 0;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.prevButtonOffset = point;
	}
	if(this.nextButtonOffset == null) {
		var X = 0;
		var Y = 0;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.nextButtonOffset = point;
	}
	this._skipRefresh = false;
	this.setSize(W,H);
};
$hxClasses["flixel.addons.ui.FlxUIList"] = flixel_addons_ui_FlxUIList;
flixel_addons_ui_FlxUIList.__name__ = "flixel.addons.ui.FlxUIList";
flixel_addons_ui_FlxUIList.__super__ = flixel_addons_ui_FlxUIGroup;
flixel_addons_ui_FlxUIList.prototype = $extend(flixel_addons_ui_FlxUIGroup.prototype,{
	scrollIndex: null
	,set_scrollIndex: function(i) {
		this.scrollIndex = i;
		this.refreshList();
		return i;
	}
	,stacking: null
	,set_stacking: function(Stacking) {
		this.stacking = Stacking;
		this.refreshList();
		return Stacking;
	}
	,spacing: null
	,set_spacing: function(Spacing) {
		this.spacing = Spacing;
		this.refreshList();
		return Spacing;
	}
	,prevButtonOffset: null
	,nextButtonOffset: null
	,prevButton: null
	,nextButton: null
	,moreString: null
	,set_moreString: function(str) {
		this.moreString = str;
		this.refreshList();
		return this.moreString;
	}
	,amountPrevious: null
	,amountNext: null
	,destroy: function() {
		this.prevButton = null;
		this.nextButton = null;
		this.prevButtonOffset.put();
		this.nextButtonOffset.put();
		this.prevButtonOffset = null;
		this.nextButtonOffset = null;
		flixel_addons_ui_FlxUIGroup.prototype.destroy.call(this);
	}
	,setSize: function(W,H) {
		var flip = false;
		if(this._skipRefresh == false) {
			this._skipRefresh = true;
			flip = true;
		}
		this.set_width(W);
		this.set_height(H);
		if(flip) {
			this._skipRefresh = false;
		}
		this.refreshList();
	}
	,add: function(Object1) {
		flixel_addons_ui_FlxUIGroup.prototype.add.call(this,Object1);
		this.refreshList();
		return Object1;
	}
	,safeAdd: function(Object1) {
		return flixel_addons_ui_FlxUIGroup.prototype.add.call(this,Object1);
	}
	,_skipRefresh: null
	,getMoreString: function(i) {
		var newString = this.moreString;
		while(newString.indexOf("<X>") != -1) newString = StringTools.replace(newString,"<X>",i == null ? "null" : "" + i);
		return newString;
	}
	,set_visible: function(Value) {
		flixel_addons_ui_FlxUIGroup.prototype.set_visible.call(this,Value);
		this.refreshList();
		return Value;
	}
	,onClick: function(i) {
		var _g = this;
		_g.set_scrollIndex(_g.scrollIndex + i);
		this.refreshList();
	}
	,refreshList: function() {
		if(this._skipRefresh) {
			return;
		}
		this.autoBounds = false;
		if(this.group.members.indexOf(this.prevButton) != -1) {
			this.remove(this.prevButton,true);
		}
		if(this.group.members.indexOf(this.nextButton) != -1) {
			this.remove(this.nextButton,true);
		}
		var XX = 0;
		var YY = 0;
		var i = 0;
		var inBounds = true;
		if(this.stacking == 0) {
			this.prevButton.set_x(this.prevButtonOffset.x - this.prevButton.get_width() - 2);
			this.prevButton.set_y(this.prevButtonOffset.y);
			this.nextButton.set_x(this.nextButtonOffset.x + this.get_width() + 2);
			this.nextButton.set_y(this.nextButtonOffset.y);
		} else {
			this.prevButton.set_x(this.prevButtonOffset.x);
			this.prevButton.set_y(this.prevButtonOffset.y - this.prevButton.get_height() - 2);
			this.nextButton.set_x(this.nextButtonOffset.x);
			this.nextButton.set_y(this.nextButtonOffset.y + this.get_height() + 2);
		}
		this.prevButton.set_x(this.prevButton.x | 0);
		this.prevButton.set_y(this.prevButton.y | 0);
		this.nextButton.set_x(this.nextButton.x | 0);
		this.nextButton.set_y(this.nextButton.y | 0);
		var highestIndex = 0;
		var _g = 0;
		var _g1 = this.group.members;
		while(_g < _g1.length) {
			var widget = _g1[_g];
			++_g;
			inBounds = false;
			if(i >= this.scrollIndex) {
				if(this.stacking == 1) {
					inBounds = YY + widget.get_height() <= this.get_height() || this.get_height() <= 0;
				} else {
					inBounds = XX + widget.get_width() <= this.get_width() || this.get_width() <= 0;
				}
			}
			if(inBounds) {
				highestIndex = i;
				widget.set_visible(widget.set_active(true));
				widget.set_x(this.x + XX);
				widget.set_y(this.y + YY);
				if(this.stacking == 1) {
					YY += widget.get_height() + this.spacing;
				} else {
					XX += widget.get_width() + this.spacing;
				}
			} else {
				widget.set_x(widget.set_y(0));
				widget.set_visible(widget.set_active(false));
			}
			++i;
		}
		this.amountPrevious = this.scrollIndex;
		this.amountNext = this.group.members.length - (highestIndex + 1);
		var fuibutton;
		if(this.amountPrevious > 0) {
			this.safeAdd(this.prevButton);
			if(((this.prevButton) instanceof flixel_addons_ui_FlxUIButton)) {
				fuibutton = this.prevButton;
				fuibutton.label.set_text(this.getMoreString(this.amountPrevious));
			}
		}
		if(this.amountNext > 0) {
			this.safeAdd(this.nextButton);
			if(((this.nextButton) instanceof flixel_addons_ui_FlxUIButton)) {
				fuibutton = this.nextButton;
				fuibutton.label.set_text(this.getMoreString(this.amountNext));
			}
		}
	}
	,get_width: function() {
		return this.width;
	}
	,get_height: function() {
		return this.height;
	}
	,set_width: function(W) {
		this.width = W;
		this.refreshList();
		return W;
	}
	,set_height: function(H) {
		this.height = H;
		this.refreshList();
		return H;
	}
	,__class__: flixel_addons_ui_FlxUIList
	,__properties__: $extend(flixel_addons_ui_FlxUIGroup.prototype.__properties__,{set_moreString:"set_moreString",set_spacing:"set_spacing",set_stacking:"set_stacking",set_scrollIndex:"set_scrollIndex"})
});
var flixel_input_FlxPointer = function() {
	this._globalScreenY = 0;
	this._globalScreenX = 0;
	this.screenY = 0;
	this.screenX = 0;
	this.y = 0;
	this.x = 0;
};
$hxClasses["flixel.input.FlxPointer"] = flixel_input_FlxPointer;
flixel_input_FlxPointer.__name__ = "flixel.input.FlxPointer";
flixel_input_FlxPointer.prototype = {
	x: null
	,y: null
	,screenX: null
	,screenY: null
	,_globalScreenX: null
	,_globalScreenY: null
	,getWorldPosition: function(Camera,point) {
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		this.getScreenPosition(Camera,flixel_input_FlxPointer._cachedPoint);
		point.set_x(flixel_input_FlxPointer._cachedPoint.x + Camera.scroll.x);
		point.set_y(flixel_input_FlxPointer._cachedPoint.y + Camera.scroll.y);
		return point;
	}
	,getScreenPosition: function(Camera,point) {
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		point.set_x((this._globalScreenX - Camera.x + 0.5 * Camera.width * (Camera.zoom - Camera.initialZoom)) / Camera.zoom);
		point.set_y((this._globalScreenY - Camera.y + 0.5 * Camera.height * (Camera.zoom - Camera.initialZoom)) / Camera.zoom);
		return point;
	}
	,getPositionInCameraView: function(Camera,point) {
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		point.set_x((this._globalScreenX - Camera.x) / Camera.zoom + Camera.viewOffsetX);
		point.set_y((this._globalScreenY - Camera.y) / Camera.zoom + Camera.viewOffsetY);
		return point;
	}
	,getPosition: function(point) {
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		return point.set(this.x,this.y);
	}
	,overlaps: function(ObjectOrGroup,Camera) {
		var _gthis = this;
		var result = false;
		var group = flixel_group_FlxTypedGroup.resolveGroup(ObjectOrGroup);
		if(group != null) {
			group.forEachExists(function(basic) {
				if(_gthis.overlaps(basic,Camera)) {
					result = true;
					return;
				}
			});
		} else {
			this.getPosition(flixel_input_FlxPointer._cachedPoint);
			var object = ObjectOrGroup;
			result = object.overlapsPoint(flixel_input_FlxPointer._cachedPoint,true,Camera);
		}
		return result;
	}
	,setGlobalScreenPositionUnsafe: function(newX,newY) {
		this._globalScreenX = newX / flixel_FlxG.scaleMode.scale.x | 0;
		this._globalScreenY = newY / flixel_FlxG.scaleMode.scale.y | 0;
		this.updatePositions();
	}
	,toString: function() {
		var value = this.x;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "x";
		_this.value = value;
		var value = this.y;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "y";
		_this1.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1]);
	}
	,updatePositions: function() {
		this.getScreenPosition(flixel_FlxG.camera,flixel_input_FlxPointer._cachedPoint);
		this.screenX = flixel_input_FlxPointer._cachedPoint.x | 0;
		this.screenY = flixel_input_FlxPointer._cachedPoint.y | 0;
		this.getWorldPosition(flixel_FlxG.camera,flixel_input_FlxPointer._cachedPoint);
		this.x = flixel_input_FlxPointer._cachedPoint.x | 0;
		this.y = flixel_input_FlxPointer._cachedPoint.y | 0;
	}
	,__class__: flixel_input_FlxPointer
};
var flixel_input_IFlxInputManager = function() { };
$hxClasses["flixel.input.IFlxInputManager"] = flixel_input_IFlxInputManager;
flixel_input_IFlxInputManager.__name__ = "flixel.input.IFlxInputManager";
flixel_input_IFlxInputManager.__isInterface__ = true;
flixel_input_IFlxInputManager.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_input_IFlxInputManager.prototype = {
	reset: null
	,update: null
	,onFocus: null
	,onFocusLost: null
	,__class__: flixel_input_IFlxInputManager
};
var flixel_input_mouse_FlxMouse = function(cursorContainer) {
	this._prevY = 0;
	this._prevX = 0;
	this._lastWheel = 0;
	this._lastY = 0;
	this._lastX = 0;
	this._visibleWhenFocusLost = true;
	this._wheelUsed = false;
	this._cursor = null;
	this.useSystemCursor = false;
	this.visible = true;
	this.wheel = 0;
	this.enabled = true;
	flixel_input_FlxPointer.call(this);
	this.cursorContainer = cursorContainer;
	this.cursorContainer.mouseChildren = false;
	this.cursorContainer.mouseEnabled = false;
	this._leftButton = new flixel_input_mouse_FlxMouseButton(-1);
	this._stage = openfl_Lib.get_current().stage;
	this._stage.addEventListener("mouseDown",($_=this._leftButton,$bind($_,$_.onDown)));
	this._stage.addEventListener("mouseUp",($_=this._leftButton,$bind($_,$_.onUp)));
	this._middleButton = new flixel_input_mouse_FlxMouseButton(-2);
	this._rightButton = new flixel_input_mouse_FlxMouseButton(-3);
	this._stage.addEventListener("middleMouseDown",($_=this._middleButton,$bind($_,$_.onDown)));
	this._stage.addEventListener("middleMouseUp",($_=this._middleButton,$bind($_,$_.onUp)));
	this._stage.addEventListener("rightMouseDown",($_=this._rightButton,$bind($_,$_.onDown)));
	this._stage.addEventListener("rightMouseUp",($_=this._rightButton,$bind($_,$_.onUp)));
	this._stage.addEventListener("mouseLeave",$bind(this,this.onMouseLeave));
	this._stage.addEventListener("mouseWheel",$bind(this,this.onMouseWheel));
	flixel_FlxG.signals.postGameStart.add($bind(this,this.onGameStart));
	openfl_ui_Mouse.hide();
};
$hxClasses["flixel.input.mouse.FlxMouse"] = flixel_input_mouse_FlxMouse;
flixel_input_mouse_FlxMouse.__name__ = "flixel.input.mouse.FlxMouse";
flixel_input_mouse_FlxMouse.__interfaces__ = [flixel_input_IFlxInputManager];
flixel_input_mouse_FlxMouse.__super__ = flixel_input_FlxPointer;
flixel_input_mouse_FlxMouse.prototype = $extend(flixel_input_FlxPointer.prototype,{
	enabled: null
	,wheel: null
	,cursorContainer: null
	,visible: null
	,useSystemCursor: null
	,_leftButton: null
	,_middleButton: null
	,_rightButton: null
	,_cursor: null
	,_cursorBitmapData: null
	,_wheelUsed: null
	,_visibleWhenFocusLost: null
	,_lastX: null
	,_lastY: null
	,_lastWheel: null
	,_lastLeftButtonState: null
	,_prevX: null
	,_prevY: null
	,_stage: null
	,load: function(Graphic,Scale,XOffset,YOffset) {
		if(YOffset == null) {
			YOffset = 0;
		}
		if(XOffset == null) {
			XOffset = 0;
		}
		if(Scale == null) {
			Scale = 1;
		}
		if(this._cursor != null) {
			flixel_util_FlxDestroyUtil.removeChild(this.cursorContainer,this._cursor);
		}
		if(Graphic == null) {
			Graphic = new flixel_input_mouse__$FlxMouse_GraphicCursor(0,0);
		}
		if(js_Boot.__instanceof(Graphic,Class)) {
			this._cursor = Type.createInstance(Graphic,[]);
		} else if(((Graphic) instanceof openfl_display_BitmapData)) {
			this._cursor = new openfl_display_Bitmap(Graphic);
		} else if(typeof(Graphic) == "string") {
			var id = Graphic;
			this._cursor = new openfl_display_Bitmap(openfl_utils_Assets.exists(id) ? openfl_utils_Assets.getBitmapData(id,false) : null);
		} else {
			this._cursor = new openfl_display_Bitmap(new flixel_input_mouse__$FlxMouse_GraphicCursor(0,0));
		}
		this._cursor.set_x(XOffset);
		this._cursor.set_y(YOffset);
		this._cursor.set_scaleX(Scale);
		this._cursor.set_scaleY(Scale);
		this.cursorContainer.addChild(this._cursor);
	}
	,unload: function() {
		if(this._cursor != null) {
			if(this.cursorContainer.get_visible()) {
				this.load();
			} else {
				this._cursor = flixel_util_FlxDestroyUtil.removeChild(this.cursorContainer,this._cursor);
			}
		}
	}
	,destroy: function() {
		if(this._stage != null) {
			this._stage.removeEventListener("mouseDown",($_=this._leftButton,$bind($_,$_.onDown)));
			this._stage.removeEventListener("mouseUp",($_=this._leftButton,$bind($_,$_.onUp)));
			this._stage.removeEventListener("middleMouseDown",($_=this._middleButton,$bind($_,$_.onDown)));
			this._stage.removeEventListener("middleMouseUp",($_=this._middleButton,$bind($_,$_.onUp)));
			this._stage.removeEventListener("rightMouseDown",($_=this._rightButton,$bind($_,$_.onDown)));
			this._stage.removeEventListener("rightMouseUp",($_=this._rightButton,$bind($_,$_.onUp)));
			this._stage.removeEventListener("mouseLeave",$bind(this,this.onMouseLeave));
			this._stage.removeEventListener("mouseWheel",$bind(this,this.onMouseWheel));
		}
		this.cursorContainer = null;
		this._cursor = null;
		this._leftButton = flixel_util_FlxDestroyUtil.destroy(this._leftButton);
		this._middleButton = flixel_util_FlxDestroyUtil.destroy(this._middleButton);
		this._rightButton = flixel_util_FlxDestroyUtil.destroy(this._rightButton);
		this._cursorBitmapData = flixel_util_FlxDestroyUtil.dispose(this._cursorBitmapData);
		flixel_FlxG.signals.postGameStart.remove($bind(this,this.onGameStart));
	}
	,reset: function() {
		this._leftButton.reset();
		this._middleButton.reset();
		this._rightButton.reset();
	}
	,update: function() {
		this._prevX = this.x;
		this._prevY = this.y;
		var newX = flixel_FlxG.game.get_mouseX();
		var newY = flixel_FlxG.game.get_mouseY();
		this._globalScreenX = newX / flixel_FlxG.scaleMode.scale.x | 0;
		this._globalScreenY = newY / flixel_FlxG.scaleMode.scale.y | 0;
		this.updatePositions();
		if(this.visible) {
			this.cursorContainer.set_x(flixel_FlxG.game.get_mouseX());
			this.cursorContainer.set_y(flixel_FlxG.game.get_mouseY());
		}
		this._leftButton.update();
		this._middleButton.update();
		this._rightButton.update();
		if(!this._wheelUsed) {
			this.wheel = 0;
		}
		this._wheelUsed = false;
	}
	,onFocus: function() {
		this.reset();
		this.set_useSystemCursor(this.useSystemCursor);
		this.set_visible(this._visibleWhenFocusLost);
	}
	,onFocusLost: function() {
		this._visibleWhenFocusLost = this.visible;
		if(this.visible) {
			this.set_visible(false);
		}
		openfl_ui_Mouse.show();
	}
	,onGameStart: function() {
		this.set_visible(this.visible);
	}
	,onMouseWheel: function(flashEvent) {
		if(this.enabled) {
			this._wheelUsed = true;
			this.wheel = flashEvent.delta;
		}
	}
	,onMouseLeave: function(_) {
		this._rightButton.onUp();
		this._middleButton.onUp();
	}
	,get_justMoved: function() {
		if(this._prevX == this.x) {
			return this._prevY != this.y;
		} else {
			return true;
		}
	}
	,get_pressed: function() {
		var _this = this._leftButton;
		if(_this.current != 1) {
			return _this.current == 2;
		} else {
			return true;
		}
	}
	,get_justPressed: function() {
		return this._leftButton.current == 2;
	}
	,get_justReleased: function() {
		return this._leftButton.current == -1;
	}
	,get_justPressedTimeInTicks: function() {
		return this._leftButton.justPressedTimeInTicks;
	}
	,get_pressedRight: function() {
		var _this = this._rightButton;
		if(_this.current != 1) {
			return _this.current == 2;
		} else {
			return true;
		}
	}
	,get_justPressedRight: function() {
		return this._rightButton.current == 2;
	}
	,get_justReleasedRight: function() {
		return this._rightButton.current == -1;
	}
	,get_justPressedTimeInTicksRight: function() {
		return this._rightButton.justPressedTimeInTicks;
	}
	,get_pressedMiddle: function() {
		var _this = this._middleButton;
		if(_this.current != 1) {
			return _this.current == 2;
		} else {
			return true;
		}
	}
	,get_justPressedMiddle: function() {
		return this._middleButton.current == 2;
	}
	,get_justReleasedMiddle: function() {
		return this._middleButton.current == -1;
	}
	,get_justPressedTimeInTicksMiddle: function() {
		return this._middleButton.justPressedTimeInTicks;
	}
	,showSystemCursor: function() {
		this.cursorContainer.set_visible(false);
		openfl_ui_Mouse.show();
	}
	,hideSystemCursor: function() {
		openfl_ui_Mouse.hide();
		if(this.visible) {
			this.cursorContainer.set_visible(true);
		}
	}
	,set_useSystemCursor: function(value) {
		if(value) {
			this.showSystemCursor();
		} else {
			this.hideSystemCursor();
		}
		return this.useSystemCursor = value;
	}
	,showCursor: function() {
		if(this.useSystemCursor) {
			openfl_ui_Mouse.show();
		} else {
			if(this._cursor == null) {
				this.load();
			}
			this.cursorContainer.set_visible(true);
			openfl_ui_Mouse.hide();
		}
	}
	,hideCursor: function() {
		this.cursorContainer.set_visible(false);
		openfl_ui_Mouse.hide();
	}
	,set_visible: function(value) {
		if(value) {
			this.showCursor();
		} else {
			this.hideCursor();
		}
		return this.visible = value;
	}
	,record: function() {
		if(this._lastX == this._globalScreenX && this._lastY == this._globalScreenY && this._lastLeftButtonState == this._leftButton.current && this._lastWheel == this.wheel) {
			return null;
		}
		this._lastX = this._globalScreenX;
		this._lastY = this._globalScreenY;
		this._lastLeftButtonState = this._leftButton.current;
		this._lastWheel = this.wheel;
		return new flixel_system_replay_MouseRecord(this._lastX,this._lastY,this._leftButton.current,this._lastWheel);
	}
	,playback: function(record) {
		if((this._lastLeftButtonState == 1 || this._lastLeftButtonState == 2) && (record.button == 0 || record.button == -1)) {
			this._stage.dispatchEvent(new openfl_events_MouseEvent("mouseUp",true,false,record.x,record.y));
		}
		this._lastLeftButtonState = this._leftButton.current = record.button;
		this.wheel = record.wheel;
		this._globalScreenX = record.x;
		this._globalScreenY = record.y;
		this.updatePositions();
	}
	,__class__: flixel_input_mouse_FlxMouse
	,__properties__: {get_justPressedTimeInTicksMiddle:"get_justPressedTimeInTicksMiddle",get_justReleasedMiddle:"get_justReleasedMiddle",get_justPressedMiddle:"get_justPressedMiddle",get_pressedMiddle:"get_pressedMiddle",get_justPressedTimeInTicksRight:"get_justPressedTimeInTicksRight",get_justReleasedRight:"get_justReleasedRight",get_justPressedRight:"get_justPressedRight",get_pressedRight:"get_pressedRight",get_justPressedTimeInTicks:"get_justPressedTimeInTicks",get_justReleased:"get_justReleased",get_justPressed:"get_justPressed",get_pressed:"get_pressed",get_justMoved:"get_justMoved",set_useSystemCursor:"set_useSystemCursor",set_visible:"set_visible"}
});
var flixel_addons_ui_FlxUIMouse = function(CursorContainer) {
	this.updateGlobalScreenPosition = true;
	flixel_input_mouse_FlxMouse.call(this,CursorContainer);
};
$hxClasses["flixel.addons.ui.FlxUIMouse"] = flixel_addons_ui_FlxUIMouse;
flixel_addons_ui_FlxUIMouse.__name__ = "flixel.addons.ui.FlxUIMouse";
flixel_addons_ui_FlxUIMouse.__super__ = flixel_input_mouse_FlxMouse;
flixel_addons_ui_FlxUIMouse.prototype = $extend(flixel_input_mouse_FlxMouse.prototype,{
	updateGlobalScreenPosition: null
	,update: function() {
		var oldScreenX = this._globalScreenX;
		var oldScreenY = this._globalScreenY;
		flixel_input_mouse_FlxMouse.prototype.update.call(this);
		if(!this.updateGlobalScreenPosition) {
			this._globalScreenX = oldScreenX;
			this._globalScreenY = oldScreenY;
		}
	}
	,__class__: flixel_addons_ui_FlxUIMouse
});
var flixel_addons_ui_FlxUINumericStepper = function(X,Y,StepSize,DefaultValue,Min,Max,Decimals,Stack,TextField,ButtonPlus,ButtonMinus,IsPercent) {
	if(IsPercent == null) {
		IsPercent = false;
	}
	if(Stack == null) {
		Stack = 1;
	}
	if(Decimals == null) {
		Decimals = 0;
	}
	if(Max == null) {
		Max = 999;
	}
	if(Min == null) {
		Min = -999;
	}
	if(DefaultValue == null) {
		DefaultValue = 0;
	}
	if(StepSize == null) {
		StepSize = 1;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this.isPercent = false;
	this.stack = 1;
	this.value = 0;
	this.max = 10;
	this.min = 0;
	this.decimals = 0;
	this.stepSize = 0;
	flixel_addons_ui_FlxUIGroup.call(this,X,Y);
	if(TextField == null) {
		TextField = new flixel_addons_ui_FlxUIInputText(0,0,25);
	}
	TextField.set_x(0);
	TextField.set_y(0);
	this.text_field = TextField;
	this.text_field.set_text(DefaultValue == null ? "null" : "" + DefaultValue);
	if(((this.text_field) instanceof flixel_addons_ui_FlxUIInputText)) {
		var fuit = this.text_field;
		fuit.set_lines(1);
		fuit.callback = $bind(this,this._onInputTextEvent);
		fuit.broadcastToFlxUI = false;
	}
	this.stepSize = StepSize;
	this.set_decimals(Decimals);
	this.set_min(Min);
	this.set_max(Max);
	this.set_value(DefaultValue);
	this.set_isPercent(IsPercent);
	var btnSize = 1 + TextField.get_height();
	if(ButtonPlus == null) {
		ButtonPlus = new flixel_addons_ui_FlxUITypedButton(0,0);
		ButtonPlus.loadGraphicSlice9(["flixel/flixel-ui/img/button_thin.png"],btnSize,btnSize,[flixel_util_FlxStringUtil.toIntArray("2,2,15,15")],0,-1,false,18,18);
		ButtonPlus.set_label(new flixel_FlxSprite(0,0,"flixel/flixel-ui/img/plus_mark.png"));
	}
	if(ButtonMinus == null) {
		ButtonMinus = new flixel_addons_ui_FlxUITypedButton(0,0);
		ButtonMinus.loadGraphicSlice9(["flixel/flixel-ui/img/button_thin.png"],btnSize,btnSize,[flixel_util_FlxStringUtil.toIntArray("2,2,15,15")],0,-1,false,18,18);
		ButtonMinus.set_label(new flixel_FlxSprite(0,0,"flixel/flixel-ui/img/minus_mark.png"));
	}
	this.button_plus = ButtonPlus;
	this.button_minus = ButtonMinus;
	this.add(this.text_field);
	this.add(this.button_plus);
	this.add(this.button_minus);
	this.button_plus.onUp.callback = $bind(this,this._onPlus);
	this.button_plus.broadcastToFlxUI = false;
	this.button_minus.onUp.callback = $bind(this,this._onMinus);
	this.button_minus.broadcastToFlxUI = false;
	this.set_stack(Stack);
};
$hxClasses["flixel.addons.ui.FlxUINumericStepper"] = flixel_addons_ui_FlxUINumericStepper;
flixel_addons_ui_FlxUINumericStepper.__name__ = "flixel.addons.ui.FlxUINumericStepper";
flixel_addons_ui_FlxUINumericStepper.__interfaces__ = [flixel_addons_ui_interfaces_IHasParams,flixel_addons_ui_interfaces_IFlxUIClickable,flixel_addons_ui_interfaces_IFlxUIWidget];
flixel_addons_ui_FlxUINumericStepper.__super__ = flixel_addons_ui_FlxUIGroup;
flixel_addons_ui_FlxUINumericStepper.prototype = $extend(flixel_addons_ui_FlxUIGroup.prototype,{
	button_plus: null
	,button_minus: null
	,text_field: null
	,stepSize: null
	,decimals: null
	,min: null
	,max: null
	,value: null
	,stack: null
	,isPercent: null
	,params: null
	,set_params: function(p) {
		this.params = p;
		return this.params;
	}
	,skipButtonUpdate: null
	,set_skipButtonUpdate: function(b) {
		this.skipButtonUpdate = b;
		this.button_plus.set_skipButtonUpdate(b);
		this.button_minus.set_skipButtonUpdate(b);
		return b;
	}
	,set_color: function(Value) {
		this.color = Value;
		this.button_plus.set_color(Value);
		this.button_minus.set_color(Value);
		if(((this.text_field) instanceof flixel_addons_ui_FlxInputText)) {
			var fit = this.text_field;
			fit.set_backgroundColor(Value);
		} else {
			this.text_field.set_color(Value);
		}
		return Value;
	}
	,set_min: function(f) {
		this.min = f;
		if(this.value < this.min) {
			this.set_value(this.min);
		}
		return this.min;
	}
	,set_max: function(f) {
		this.max = f;
		if(this.value > this.max) {
			this.set_value(this.max);
		}
		return this.max;
	}
	,set_value: function(f) {
		this.value = f;
		if(this.value < this.min) {
			this.value = this.min;
		}
		if(this.value > this.max) {
			this.value = this.max;
		}
		if(this.text_field != null) {
			var displayValue = this.value;
			if(this.isPercent) {
				displayValue *= 100;
				var tens = Math.pow(10,this.decimals);
				this.text_field.set_text(Std.string(Std.string(Math.round(displayValue * tens) / tens)) + "%");
			} else {
				var tens = Math.pow(10,this.decimals);
				this.text_field.set_text(Std.string(Math.round(displayValue * tens) / tens));
			}
		}
		return this.value;
	}
	,set_decimals: function(i) {
		this.decimals = i;
		if(i < 0) {
			this.decimals = 0;
		}
		this.set_value(this.value);
		return this.decimals;
	}
	,set_isPercent: function(b) {
		this.isPercent = b;
		this.set_value(this.value);
		return this.isPercent;
	}
	,set_stack: function(s) {
		this.stack = s;
		var btnSize = 10;
		var offsetX = 0;
		var offsetY = 0;
		if(((this.text_field) instanceof flixel_addons_ui_FlxUIInputText)) {
			offsetX = 1;
			offsetY = 1;
		}
		switch(this.stack) {
		case 0:
			btnSize = 1 + this.text_field.get_height() / 2;
			if(this.button_plus.get_height() != btnSize) {
				this.button_plus.resize(btnSize,btnSize);
			}
			if(this.button_minus.get_height() != btnSize) {
				this.button_minus.resize(btnSize,btnSize);
			}
			this.button_plus.set_x(offsetX + this.text_field.x + this.text_field.get_width());
			this.button_plus.set_y(-offsetY + this.text_field.y);
			this.button_minus.set_x(offsetX + this.text_field.x + this.text_field.get_width());
			this.button_minus.set_y(offsetY + this.text_field.y + (this.text_field.get_height() - this.button_minus.get_height()));
			break;
		case 1:
			btnSize = 2 + this.text_field.get_height();
			if(this.button_plus.get_height() != btnSize) {
				this.button_plus.resize(btnSize,btnSize);
			}
			if(this.button_minus.get_height() != btnSize) {
				this.button_minus.resize(btnSize,btnSize);
			}
			this.button_plus.set_x(offsetX + this.text_field.x + this.text_field.get_width());
			this.button_plus.set_y(-offsetY + this.text_field.y);
			this.button_minus.set_x(this.button_plus.x + this.button_plus.get_width());
			this.button_minus.set_y(this.button_plus.y);
			break;
		}
		return this.stack;
	}
	,decimalize: function(f,digits) {
		var tens = Math.pow(10,digits);
		return Std.string(Math.round(f * tens) / tens);
	}
	,_onInputTextEvent: function(text,action) {
		if(text == "") {
			text = Std.string(this.min);
		}
		var numDecimals = 0;
		var _g = 0;
		var _g1 = text.length;
		while(_g < _g1) {
			var i = _g++;
			var char = text.charAt(i);
			if(char == ".") {
				++numDecimals;
			}
		}
		var justAddedDecimal = numDecimals == 1 && text.indexOf(".") == text.length - 1;
		if(!justAddedDecimal) {
			this.set_value(parseFloat(text));
			this._doCallback("edit_numeric_stepper");
			this._doCallback("change_numeric_stepper");
		}
	}
	,_onPlus: function() {
		var _g = this;
		_g.set_value(_g.value + this.stepSize);
		this._doCallback("click_numeric_stepper");
		this._doCallback("change_numeric_stepper");
	}
	,_onMinus: function() {
		var _g = this;
		_g.set_value(_g.value - this.stepSize);
		this._doCallback("click_numeric_stepper");
		this._doCallback("change_numeric_stepper");
	}
	,_doCallback: function(event_name) {
		if(this.broadcastToFlxUI) {
			flixel_addons_ui_FlxUI.event(event_name,this,this.value,this.params);
		}
	}
	,__class__: flixel_addons_ui_FlxUINumericStepper
	,__properties__: $extend(flixel_addons_ui_FlxUIGroup.prototype.__properties__,{set_skipButtonUpdate:"set_skipButtonUpdate",set_params:"set_params",set_isPercent:"set_isPercent",set_stack:"set_stack",set_value:"set_value",set_max:"set_max",set_min:"set_min",set_decimals:"set_decimals"})
});
var flixel_addons_ui_FlxUIRadioGroup = function(X,Y,ids_,labels_,callback_,y_space_,width_,height_,label_width_,MoreString,PrevButtonOffset,NextButtonOffset,PrevButton,NextButton) {
	if(MoreString == null) {
		MoreString = "<X> more...";
	}
	if(label_width_ == null) {
		label_width_ = 100;
	}
	if(height_ == null) {
		height_ = 20;
	}
	if(width_ == null) {
		width_ = 100;
	}
	if(y_space_ == null) {
		y_space_ = 25;
	}
	this._clickable = true;
	this._selected = 0;
	this._y_space = 25;
	this._height = 20;
	this._width = 100;
	this._label_width = 100;
	this.fixedSize = false;
	flixel_addons_ui_FlxUIGroup.call(this);
	this._y_space = y_space_;
	this._width = width_;
	this._height = height_;
	this._label_width = label_width_;
	if(ids_ == null) {
		ids_ = [];
	}
	if(labels_ == null) {
		labels_ = [];
	}
	this.callback = callback_;
	this._list_radios = [];
	this._list_active = [];
	this._list = new flixel_addons_ui_FlxUIList(0,0,null,0,0,MoreString,1,0,PrevButtonOffset,NextButtonOffset,PrevButton,NextButton);
	this.add(this._list);
	this.updateRadios(ids_,labels_);
	this.loadGraphics(null,null);
	this.set_x(X);
	this.set_y(Y);
};
$hxClasses["flixel.addons.ui.FlxUIRadioGroup"] = flixel_addons_ui_FlxUIRadioGroup;
flixel_addons_ui_FlxUIRadioGroup.__name__ = "flixel.addons.ui.FlxUIRadioGroup";
flixel_addons_ui_FlxUIRadioGroup.__interfaces__ = [flixel_addons_ui_interfaces_IHasParams,flixel_addons_ui_interfaces_IFlxUIClickable];
flixel_addons_ui_FlxUIRadioGroup.__super__ = flixel_addons_ui_FlxUIGroup;
flixel_addons_ui_FlxUIRadioGroup.prototype = $extend(flixel_addons_ui_FlxUIGroup.prototype,{
	activeStyle: null
	,set_activeStyle: function(b) {
		this.activeStyle = b;
		this.updateActives();
		return this.activeStyle;
	}
	,inactiveStyle: null
	,set_inactiveStyle: function(b) {
		this.inactiveStyle = b;
		this.updateActives();
		return this.inactiveStyle;
	}
	,get_numRadios: function() {
		return this._list_radios.length;
	}
	,skipButtonUpdate: null
	,set_skipButtonUpdate: function(b) {
		this.skipButtonUpdate = b;
		var _g = 0;
		var _g1 = this._list_radios;
		while(_g < _g1.length) {
			var fcb = _g1[_g];
			++_g;
			fcb.set_skipButtonUpdate(b);
		}
		return this.skipButtonUpdate;
	}
	,callback: null
	,params: null
	,set_params: function(p) {
		this.params = p;
		return this.params;
	}
	,fixedSize: null
	,set_width: function(Value) {
		flixel_addons_ui_FlxUIGroup.prototype.set_width.call(this,Value);
		if(this.fixedSize) {
			if(this._list != null) {
				this._list.set_width(Value);
			}
		}
		return Value;
	}
	,set_height: function(Value) {
		flixel_addons_ui_FlxUIGroup.prototype.set_height.call(this,Value);
		if(this.fixedSize) {
			if(this._list != null) {
				this._list.set_height(Value);
			}
		}
		return Value;
	}
	,loadGraphics: function(Box,Dot) {
		if(Box != null) {
			this._box_asset = Box;
		} else {
			this._box_asset = "flixel/flixel-ui/img/radio.png";
		}
		if(Dot != null) {
			this._dot_asset = Dot;
		} else {
			this._dot_asset = "flixel/flixel-ui/img/radio_dot.png";
		}
		if(((this._box_asset) instanceof flixel_FlxSprite)) {
			var fs = this._box_asset;
			this._box_asset = fs.graphic.key;
		}
		if(((this._dot_asset) instanceof flixel_FlxSprite)) {
			var fs = this._dot_asset;
			this._dot_asset = fs.graphic.key;
		}
		var _g = 0;
		var _g1 = this._list_radios;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.box.loadGraphic(this._box_asset,true);
			c.mark.loadGraphic(this._dot_asset);
		}
		this._refreshRadios();
	}
	,destroy: function() {
		if(this._list_radios != null) {
			flixel_addons_ui_U.clearArray(this._list_radios);
		}
		if(this._list_active != null) {
			flixel_addons_ui_U.clearArray(this._list_active);
		}
		this._list_active = null;
		this._list_radios = null;
		this._list = null;
		this._ids = null;
		this._labels = null;
		flixel_addons_ui_FlxUIGroup.prototype.destroy.call(this);
	}
	,updateLabel: function(i,label_) {
		if(i >= this._list_radios.length) {
			return false;
		}
		this._labels[i] = label_;
		var c = this._list_radios[i];
		if(c != null) {
			c.button.set_width(this._label_width);
			c.set_text(label_);
		}
		return true;
	}
	,updateId: function(i,id_) {
		if(i >= this._list_radios.length) {
			return false;
		}
		this._ids[i] = id_;
		return true;
	}
	,show: function(b) {
		var _g = 0;
		var _g1 = this._list.group.members;
		while(_g < _g1.length) {
			var fo = _g1[_g];
			++_g;
			fo.set_visible(b);
		}
	}
	,updateRadios: function(ids_,labels_) {
		this._ids = ids_;
		this._labels = labels_;
		var _g = 0;
		var _g1 = this._list_radios;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.set_visible(false);
		}
		this._refreshRadios();
	}
	,getRadios: function() {
		return this._list_radios;
	}
	,getLabel: function(i) {
		if(i >= 0 && i < this._labels.length) {
			return this._labels[i];
		}
		return null;
	}
	,getId: function(i) {
		if(i >= 0 && i < this._ids.length) {
			return this._ids[i];
		}
		return null;
	}
	,getIsVisible: function(i) {
		if(i >= 0 && i < this._list_radios.length) {
			return this._list_radios[i].visible;
		}
		return false;
	}
	,get_clickable: function() {
		return this._clickable;
	}
	,set_clickable: function(b) {
		this._clickable = b;
		var _g = 0;
		var _g1 = this._list_radios;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.set_active(b);
		}
		return this._clickable;
	}
	,get_selectedIndex: function() {
		return this._selected;
	}
	,set_selectedIndex: function(i) {
		this._selected = i;
		var j = 0;
		var _g = 0;
		var _g1 = this._list_radios;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.set_checked(false);
			if(j == i) {
				c.set_checked(true);
			}
			++j;
		}
		if(this._selected < 0 || this._selected >= this._list_radios.length) {
			this._selected = -1;
		}
		return this._selected;
	}
	,get_selectedLabel: function() {
		return this._labels[this._selected];
	}
	,set_selectedLabel: function(str) {
		var i = 0;
		this._selected = -1;
		var _g = 0;
		var _g1 = this._list_radios;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.set_checked(false);
			if(this._labels[i] == str) {
				this._selected = i;
				c.set_checked(true);
			}
			++i;
		}
		if(this._selected >= 0 && this._selected < this._labels.length) {
			return this._labels[this._selected];
		}
		return null;
	}
	,get_selectedId: function() {
		return this._ids[this._selected];
	}
	,set_selectedId: function(str) {
		var i = 0;
		this._selected = -1;
		var _g = 0;
		var _g1 = this._list_radios;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.set_checked(false);
			if(this._ids[i] == str) {
				this._selected = i;
				c.set_checked(true);
			}
			++i;
		}
		if(this._selected >= 0 && this._selected < this._ids.length) {
			return this._ids[this._selected];
		}
		return null;
	}
	,setLineScroll: function(scroll,max_items) {
		this._list.set_scrollIndex(scroll);
		if(max_items != null) {
			if(this._list.stacking == 1) {
				this.set_height(this._y_space * max_items + 1);
			}
		}
		var X = this._list.amountPrevious;
		var Y = this._list.amountNext;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		return point;
	}
	,setRadioActive: function(i,b) {
		if(i >= 0 && i < this._list_active.length) {
			this._list_active[i] = b;
		}
		this.updateActives();
	}
	,_list_active: null
	,_list: null
	,_box_asset: null
	,_dot_asset: null
	,_labels: null
	,_ids: null
	,_label_width: null
	,_width: null
	,_height: null
	,_y_space: null
	,_selected: null
	,_clickable: null
	,_list_radios: null
	,_refreshRadios: function() {
		var xx = this.x;
		var yy = this.y;
		var i = 0;
		var maxX = 0;
		var maxY = 0;
		this._list._skipRefresh = true;
		var _g = 0;
		var _g1 = this._ids;
		while(_g < _g1.length) {
			var id = _g1[_g];
			++_g;
			var label = "";
			if(this._labels != null && this._labels.length > i) {
				label = this._labels[i];
			} else {
				label = "<" + id + ">";
			}
			var c;
			if(this._list_radios.length > i) {
				c = this._list_radios[i];
				c.set_visible(true);
				c.set_text(label);
				if(i == 0) {
					xx = c.x;
					yy = c.y;
				} else {
					c.set_x(xx | 0);
					c.set_y(yy | 0);
				}
			} else {
				c = new flixel_addons_ui_FlxUICheckBox(0,0,this._box_asset,this._dot_asset,label,this._label_width,[id,false]);
				c.broadcastToFlxUI = false;
				c.callback = (function(_g,checkBox) {
					return function() {
						_g[0](checkBox[0]);
					};
				})([$bind(this,this._onCheckBoxEvent)],[c]);
				this._list.add(c);
				c.set_x(xx | 0);
				c.set_y(yy | 0);
				c.set_text(label);
				if(this._list_radios.length > 0) {
					c.button.copyStyle(this._list_radios[0].button);
					if(this.activeStyle == null) {
						this.set_activeStyle(this.makeActiveStyle());
					}
					c.button.set_width(this._list_radios[0].button.get_width());
					c.button.set_height(this._list_radios[0].button.get_height());
					c.set_textX(this._list_radios[0].textX);
					c.set_textY(this._list_radios[0].textY);
				}
				this._list_radios.push(c);
				this._list_active.push(true);
			}
			if(xx + c.get_width() > maxX) {
				maxX = xx + c.get_width();
			}
			if(yy + c.get_height() > maxY) {
				maxY = yy + c.get_height();
			}
			yy += this._y_space;
			++i;
		}
		if(this.fixedSize == false) {
			maxX += 5;
			maxY += 5;
			if(maxX > this._list.get_width()) {
				this._list.set_width(maxX);
			}
			if(maxY > this._list.get_height()) {
				this._list.set_height(maxY);
			}
			this.set_width(maxX);
			this.set_height(maxY);
		}
		this._list._skipRefresh = false;
		if(this.fixedSize == true) {
			this._list.refreshList();
		}
		this.updateActives();
	}
	,updateActives: function() {
		var i = 0;
		var _g = 0;
		var _g1 = this._list_radios;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			r.set_active(this._list_active[i]);
			if(this._list_active[i] == false && this.inactiveStyle != null) {
				this.inactiveStyle.applyToCheck(r);
			} else if(this._list_active[i] == true && this.activeStyle != null) {
				this.activeStyle.applyToCheck(r);
			}
			++i;
		}
	}
	,makeActiveStyle: function() {
		if(this._list_radios.length > 0) {
			var btn = this._list_radios[0].button;
			var t = btn.label;
			var fd = flixel_addons_ui_FontDef.copyFromFlxText(t);
			var bd = new flixel_addons_ui_BorderDef(t.borderStyle,t.borderColor,t.borderSize,t.borderQuality);
			var cs = new flixel_addons_ui_CheckStyle(16777215,fd,flixel_text_FlxTextAlign.fromOpenFL(t._defaultFormat.align),t.color,bd);
			return cs;
		}
		return null;
	}
	,_onCheckBoxEvent: function(checkBox) {
		this._onClick(checkBox,true);
	}
	,_onClick: function(checkBox,doCallback) {
		if(!this._clickable) {
			return false;
		}
		var i = 0;
		var _g = 0;
		var _g1 = this._list_radios;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.set_checked(false);
			if(checkBox == c) {
				this._selected = i;
				c.set_checked(true);
			}
			++i;
		}
		if(doCallback) {
			if(this.callback != null) {
				this.callback(this.get_selectedId());
			}
			if(this.broadcastToFlxUI) {
				flixel_addons_ui_FlxUI.event("click_radio_group",this,this._ids[this._selected],this.params);
			}
		}
		return true;
	}
	,__class__: flixel_addons_ui_FlxUIRadioGroup
	,__properties__: $extend(flixel_addons_ui_FlxUIGroup.prototype.__properties__,{set_params:"set_params",set_skipButtonUpdate:"set_skipButtonUpdate",get_numRadios:"get_numRadios",set_inactiveStyle:"set_inactiveStyle",set_activeStyle:"set_activeStyle",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex",set_selectedLabel:"set_selectedLabel",get_selectedLabel:"get_selectedLabel",set_selectedId:"set_selectedId",get_selectedId:"get_selectedId",set_clickable:"set_clickable",get_clickable:"get_clickable"})
});
var flixel_addons_ui_CheckStyle = function(CheckColor,Font,Align,Color,Border) {
	this.checkColor = null;
	this.checkColor = CheckColor;
	flixel_addons_ui_ButtonLabelStyle.call(this,Font,Align,Color,Border);
};
$hxClasses["flixel.addons.ui.CheckStyle"] = flixel_addons_ui_CheckStyle;
flixel_addons_ui_CheckStyle.__name__ = "flixel.addons.ui.CheckStyle";
flixel_addons_ui_CheckStyle.__super__ = flixel_addons_ui_ButtonLabelStyle;
flixel_addons_ui_CheckStyle.prototype = $extend(flixel_addons_ui_ButtonLabelStyle.prototype,{
	checkColor: null
	,applyToCheck: function(c) {
		if(this.checkColor != null) {
			c.set_color(this.checkColor);
		}
		this.apply(c.button.label);
	}
	,__class__: flixel_addons_ui_CheckStyle
});
var flixel_addons_ui_FlxUIRegion = function(X,Y,W,H) {
	if(H == null) {
		H = 16;
	}
	if(W == null) {
		W = 16;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this.broadcastToFlxUI = true;
	flixel_FlxSprite.call(this,X,Y);
	this.makeGraphic(1,1,0);
	if(H < 1) {
		H = 1;
	}
	if(W < 1) {
		W = 1;
	}
	this.resize(W,H);
};
$hxClasses["flixel.addons.ui.FlxUIRegion"] = flixel_addons_ui_FlxUIRegion;
flixel_addons_ui_FlxUIRegion.__name__ = "flixel.addons.ui.FlxUIRegion";
flixel_addons_ui_FlxUIRegion.__interfaces__ = [flixel_addons_ui_interfaces_IResizable,flixel_addons_ui_interfaces_IFlxUIWidget];
flixel_addons_ui_FlxUIRegion.__super__ = flixel_FlxSprite;
flixel_addons_ui_FlxUIRegion.prototype = $extend(flixel_FlxSprite.prototype,{
	broadcastToFlxUI: null
	,name: null
	,resize: function(w,h) {
		this.set_width(w);
		this.set_height(h);
	}
	,__class__: flixel_addons_ui_FlxUIRegion
});
var flixel_addons_ui_FlxUISpriteButton = function(X,Y,Asset,OnClick) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	flixel_addons_ui_FlxUITypedButton.call(this,X,Y,OnClick);
	this.up_color = this.over_color = this.down_color = this.up_toggle_color = this.over_toggle_color = this.down_toggle_color = -1;
	if(Asset != null) {
		this.set_label(Asset);
	}
};
$hxClasses["flixel.addons.ui.FlxUISpriteButton"] = flixel_addons_ui_FlxUISpriteButton;
flixel_addons_ui_FlxUISpriteButton.__name__ = "flixel.addons.ui.FlxUISpriteButton";
flixel_addons_ui_FlxUISpriteButton.__interfaces__ = [flixel_addons_ui_interfaces_IFlxUIButton];
flixel_addons_ui_FlxUISpriteButton.__super__ = flixel_addons_ui_FlxUITypedButton;
flixel_addons_ui_FlxUISpriteButton.prototype = $extend(flixel_addons_ui_FlxUITypedButton.prototype,{
	resize: function(W,H) {
		flixel_addons_ui_FlxUITypedButton.prototype.resize.call(this,W,H);
		this.autoCenterLabel();
	}
	,autoCenterLabel: function() {
		if(this.label != null) {
			if(((this.label) instanceof flixel_group_FlxTypedSpriteGroup)) {
				var g = this.label;
				var _g = 0;
				var _g1 = g.group.members;
				while(_g < _g1.length) {
					var sprite = _g1[_g];
					++_g;
					sprite.set_x(-sprite.get_width() / 2);
					sprite.set_y(-sprite.get_height() / 2);
				}
				var W = g.get_width();
				var H = g.get_height();
				var _g = 0;
				var _g1 = g.group.members;
				while(_g < _g1.length) {
					var sprite = _g1[_g];
					++_g;
					sprite.set_x((W - sprite.get_width()) / 2);
					sprite.set_y((H - sprite.get_height()) / 2);
				}
			}
			flixel_addons_ui_FlxUITypedButton.prototype.autoCenterLabel.call(this);
		}
	}
	,__class__: flixel_addons_ui_FlxUISpriteButton
});
var flixel_addons_ui_FlxUISubState = function(BGColor) {
	if(BGColor == null) {
		BGColor = 0;
	}
	this.getTextFallback = null;
	this._reload_countdown = 0;
	this._reload = false;
	this.reload_ui_on_resize = false;
	this._xml_id = "";
	this.cursor = null;
	flixel_FlxSubState.call(this,BGColor);
};
$hxClasses["flixel.addons.ui.FlxUISubState"] = flixel_addons_ui_FlxUISubState;
flixel_addons_ui_FlxUISubState.__name__ = "flixel.addons.ui.FlxUISubState";
flixel_addons_ui_FlxUISubState.__interfaces__ = [flixel_addons_ui_interfaces_IFlxUIState];
flixel_addons_ui_FlxUISubState.__super__ = flixel_FlxSubState;
flixel_addons_ui_FlxUISubState.prototype = $extend(flixel_FlxSubState.prototype,{
	destroyed: null
	,cursor: null
	,_makeCursor: null
	,tooltips: null
	,_xml_id: null
	,_ui: null
	,_tongue: null
	,reload_ui_on_resize: null
	,_reload: null
	,_reload_countdown: null
	,getTextFallback: null
	,forceScrollFactor: function(X,Y) {
		if(this._ui != null) {
			var _g = 0;
			var _g1 = this._ui.group.members;
			while(_g < _g1.length) {
				var w = _g1[_g];
				++_g;
				w.scrollFactor.set(X,Y);
			}
			if(this._ui.scrollFactor != null) {
				this._ui.scrollFactor.set(X,Y);
			}
		}
	}
	,forceFocus: function(b,thing) {
		if(this._ui != null) {
			if(b) {
				this._ui.set_focus(thing);
			} else {
				this._ui.set_focus(null);
			}
		}
	}
	,create: function() {
		if(flixel_addons_ui_FlxUIState.static_tongue != null) {
			this._tongue = flixel_addons_ui_FlxUIState.static_tongue;
		}
		if(this._makeCursor == true) {
			this.cursor = this.createCursor();
		}
		this.tooltips = new flixel_addons_ui_FlxUITooltipManager(null,this);
		this._ui = this.createUI(null,this,null,this._tongue);
		this.add(this._ui);
		this._ui.getTextFallback = this.getTextFallback;
		if(this._xml_id != "" && this._xml_id != null) {
			var data = flixel_addons_ui_U.xml(this._xml_id);
			if(data == null) {
				data = flixel_addons_ui_U.xml(this._xml_id,"xml",true,"");
			}
			if(data != null) {
				this._ui.load(data);
			}
		} else {
			this._ui.load(null);
		}
		if(this.cursor != null && this._ui != null) {
			this.add(this.cursor);
			this.cursor.addWidgetsFromUI(this._ui);
			this.cursor.findVisibleLocation(0);
		}
		flixel_FlxG.mouse.set_visible(true);
		this.tooltips.init();
		flixel_FlxSubState.prototype.create.call(this);
		this.cleanup();
		if(((this._parentState) instanceof flixel_addons_ui_FlxUIState)) {
			this.reload_ui_on_resize = (js_Boot.__cast(this._parentState , flixel_addons_ui_FlxUIState)).reload_ui_on_resize;
		}
	}
	,onCursorEvent: function(code,target) {
		this.getEvent(code,target,null);
	}
	,onShowTooltip: function(t) {
	}
	,onResize: function(Width,Height) {
		if(this.reload_ui_on_resize) {
			flixel_FlxG.scaleMode.onMeasure(Width,Height);
			this._reload_countdown = 5;
			this._reload = true;
		}
	}
	,update: function(elapsed) {
		flixel_FlxSubState.prototype.update.call(this,elapsed);
		this.tooltips.update(elapsed);
		if(this._reload) {
			if(this._reload_countdown > 0) {
				this._reload_countdown--;
				if(this._reload_countdown == 0) {
					this.reloadUI();
				}
			}
		}
	}
	,destroy: function() {
		this.destroyed = true;
		if(this.tooltips != null) {
			this.tooltips.destroy();
			this.tooltips = null;
		}
		if(this._ui != null) {
			this._ui.destroy();
			this.remove(this._ui,true);
			this._ui = null;
		}
		flixel_FlxSubState.prototype.destroy.call(this);
	}
	,getEvent: function(id,sender,data,params) {
	}
	,getRequest: function(id,sender,data,params) {
		return null;
	}
	,getText: function(Flag,Context,Safe) {
		if(Safe == null) {
			Safe = true;
		}
		if(Context == null) {
			Context = "ui";
		}
		if(this._tongue != null) {
			return this._tongue.get(Flag,Context,Safe);
		}
		if(this.getTextFallback != null) {
			return this.getTextFallback(Flag,Context,Safe);
		}
		return Flag;
	}
	,cleanup: function() {
		this._ui.cleanup();
	}
	,createCursor: function() {
		return new flixel_addons_ui_FlxUICursor($bind(this,this.onCursorEvent));
	}
	,createUI: function(data,ptr,superIndex_,tongue_,liveFilePath_) {
		if(liveFilePath_ == null) {
			liveFilePath_ = "";
		}
		return new flixel_addons_ui_FlxUI(data,ptr,superIndex_,tongue_,liveFilePath_);
	}
	,reloadUI: function() {
		if(this._ui != null) {
			this.remove(this._ui,true);
			this._ui.destroy();
			this._ui = null;
		}
		this._ui = this.createUI(null,this,null,this._tongue);
		this.add(this._ui);
		var data = flixel_addons_ui_U.xml(this._xml_id);
		this._ui.load(data);
		this._reload = false;
		this._reload_countdown = 0;
	}
	,__class__: flixel_addons_ui_FlxUISubState
});
var flixel_addons_ui_FlxUITabMenu = function(back_,tabs_,tab_names_and_labels_,tab_offset,stretch_tabs,tab_spacing,tab_stacking) {
	if(stretch_tabs == null) {
		stretch_tabs = false;
	}
	this._selected_tab = -1;
	this._selected_tab_id = "";
	this._tab_offset = null;
	this._tab_stacking = null;
	this._tab_spacing = null;
	this._stretch_tabs = false;
	flixel_addons_ui_FlxUIGroup.call(this);
	if(back_ == null) {
		back_ = new flixel_addons_ui_FlxUI9SliceSprite(0,0,"flixel/flixel-ui/img/chrome_flat.png",new openfl_geom_Rectangle(0,0,200,200));
	}
	this._back = back_;
	this.add(this._back);
	if(tabs_ == null) {
		if(tab_names_and_labels_ != null) {
			tabs_ = [];
			var _g = 0;
			while(_g < tab_names_and_labels_.length) {
				var tdata = tab_names_and_labels_[_g];
				++_g;
				var fb = new flixel_addons_ui_FlxUIButton(0,0,tdata.label);
				fb.up_color = 16777215;
				fb.down_color = 16777215;
				fb.over_color = 16777215;
				fb.up_toggle_color = 16777215;
				fb.down_toggle_color = 16777215;
				fb.over_toggle_color = 16777215;
				fb.label.set_color(16777215);
				var _this = fb.label;
				_this.set_borderStyle(flixel_text_FlxTextBorderStyle.OUTLINE);
				_this.set_borderColor(0);
				_this.set_borderSize(1);
				_this.set_borderQuality(1);
				fb.name = tdata.name;
				var graphic_names = ["flixel/flixel-ui/img/tab_back.png","flixel/flixel-ui/img/tab_back.png","flixel/flixel-ui/img/tab_back.png","flixel/flixel-ui/img/tab.png","flixel/flixel-ui/img/tab.png","flixel/flixel-ui/img/tab.png"];
				var slice9tab = flixel_util_FlxStringUtil.toIntArray("6,6,11,11");
				var slice9_names = [slice9tab,slice9tab,slice9tab,slice9tab,slice9tab,slice9tab];
				fb.loadGraphicSlice9(graphic_names,0,0,slice9_names,0,-1,true);
				tabs_.push(fb);
			}
		}
	}
	this._tabs = tabs_;
	this._stretch_tabs = stretch_tabs;
	this._tab_spacing = tab_spacing;
	this._tab_stacking = tab_stacking;
	if(this._tab_stacking == null) {
		this._tab_stacking = ["front","back"];
	}
	this._tab_offset = tab_offset;
	var i = 0;
	var tab = null;
	var _g = 0;
	var _g1 = this._tabs;
	while(_g < _g1.length) {
		var t = _g1[_g];
		++_g;
		tab = t;
		this.add(tab);
		var tmp = (function(_g,name) {
			return function() {
				_g[0](name[0]);
			};
		})([$bind(this,this._onTabEvent)],[tab.name]);
		tab.onUp.callback = tmp;
		++i;
	}
	this.distributeTabs();
	this._tab_groups = [];
};
$hxClasses["flixel.addons.ui.FlxUITabMenu"] = flixel_addons_ui_FlxUITabMenu;
flixel_addons_ui_FlxUITabMenu.__name__ = "flixel.addons.ui.FlxUITabMenu";
flixel_addons_ui_FlxUITabMenu.__interfaces__ = [flixel_addons_ui_interfaces_IEventGetter,flixel_addons_ui_interfaces_IFlxUIClickable,flixel_addons_ui_interfaces_IResizable];
flixel_addons_ui_FlxUITabMenu.__super__ = flixel_addons_ui_FlxUIGroup;
flixel_addons_ui_FlxUITabMenu.prototype = $extend(flixel_addons_ui_FlxUIGroup.prototype,{
	get_numTabs: function() {
		if(this._tabs != null) {
			return this._tabs.length;
		}
		return 0;
	}
	,getEvent: function(name,sender,data,params) {
	}
	,getRequest: function(name,sender,data,params) {
		return null;
	}
	,skipButtonUpdate: null
	,set_skipButtonUpdate: function(b) {
		this.skipButtonUpdate = b;
		var _g = 0;
		var _g1 = this._tabs;
		while(_g < _g1.length) {
			var tab = _g1[_g];
			++_g;
			var tabtyped = tab;
			tabtyped.set_skipButtonUpdate(b);
		}
		var _g = 0;
		var _g1 = this._tab_groups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = group.group.members;
			while(_g2 < _g3.length) {
				var sprite = _g3[_g2];
				++_g2;
				if(js_Boot.__implements(sprite,flixel_addons_ui_interfaces_IFlxUIClickable)) {
					var widget = sprite;
					widget.set_skipButtonUpdate(b);
				}
			}
		}
		return b;
	}
	,get_width: function() {
		return this._back.get_width();
	}
	,get_height: function() {
		var fbt = this.getFirstTab();
		if(fbt != null) {
			return this._back.y + this._back.get_height() - fbt.y;
		}
		return this._back.get_height();
	}
	,resize: function(W,H) {
		var ir;
		if(js_Boot.__implements(this._back,flixel_addons_ui_interfaces_IResizable)) {
			this.distributeTabs(W);
			ir = this._back;
			var fbt = this.getFirstTab();
			if(fbt != null) {
				ir.resize(W,H - fbt.get_height());
			} else {
				ir.resize(W,H);
			}
		} else {
			this.distributeTabs();
		}
	}
	,get_selected_tab: function() {
		return this._selected_tab;
	}
	,set_selected_tab: function(i) {
		this.showTabInt(i);
		return this._selected_tab;
	}
	,get_selected_tab_id: function() {
		return this._selected_tab_id;
	}
	,set_selected_tab_id: function(str) {
		this.showTabId(str);
		return this._selected_tab_id;
	}
	,destroy: function() {
		flixel_addons_ui_FlxUIGroup.prototype.destroy.call(this);
		flixel_addons_ui_U.clearArray(this._tab_groups);
		flixel_addons_ui_U.clearArray(this._tabs);
		this._back = null;
		this._tabs = null;
		this._tab_groups = null;
	}
	,getTab: function(name,index) {
		if(name != null) {
			var _g = 0;
			var _g1 = this._tabs;
			while(_g < _g1.length) {
				var tab = _g1[_g];
				++_g;
				if(tab.name == name) {
					return tab;
				}
			}
		}
		if(index != null) {
			if(index < this._tabs.length) {
				return this._tabs[index];
			}
		}
		return null;
	}
	,getTabGroup: function(name,index) {
		if(name != null) {
			var _g = 0;
			var _g1 = this._tab_groups;
			while(_g < _g1.length) {
				var tabGroup = _g1[_g];
				++_g;
				if(tabGroup.name == name) {
					return tabGroup;
				}
			}
		}
		if(index != null) {
			if(index < this._tab_groups.length) {
				return this._tab_groups[index];
			}
		}
		return null;
	}
	,getBack: function() {
		return this._back;
	}
	,replaceBack: function(newBack) {
		var i = this.group.members.indexOf(this._back);
		if(i != -1) {
			var oldBack = this._back;
			if(js_Boot.__implements(newBack,flixel_addons_ui_interfaces_IResizable)) {
				var ir = newBack;
				ir.resize(oldBack.get_width(),oldBack.get_height());
			}
			this.group.members[i] = newBack;
			newBack.set_x(oldBack.x);
			newBack.set_y(oldBack.y);
			oldBack.destroy();
		}
	}
	,addGroup: function(g) {
		if(g == this) {
			return;
		}
		if(!this.hasThis(g)) {
			g.set_y(this._back.y - this.y);
			this.add(g);
			this._tab_groups.push(g);
		}
		this._showOnlyGroup("");
		if(this._tab_groups.length == 1) {
			this.set_selected_tab(0);
		}
		if(this._selected_tab != -1) {
			this.set_selected_tab(this._selected_tab);
		}
	}
	,_onTabEvent: function(name) {
		this.showTabId(name);
		var tab = this.getTab(name);
		var params = tab != null ? tab.params : null;
		if(this.broadcastToFlxUI) {
			flixel_addons_ui_FlxUI.event("tab_menu_click",this,name,params);
		}
	}
	,stackTabs: function() {
		var _backx = this._back.x;
		var _backy = this._back.y;
		this.group.remove(this._back,true);
		var tab = null;
		var _g = 0;
		var _g1 = this._tabs;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			tab = t;
			if(tab.toggled) {
				this.group.remove(tab,true);
			}
		}
		this.group.add(this._back);
		var _g = 0;
		var _g1 = this._tabs;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			tab = t;
			if(tab.toggled) {
				this.group.add(tab);
			}
		}
		var _g = 0;
		var _g1 = this._tab_groups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			var tempX = group.x;
			var tempY = group.y;
			this.remove(group,true);
			this.add(group);
			group.set_x(tempX);
			group.set_y(tempY);
		}
		this._back.set_x(_backx);
		this._back.set_y(_backy);
	}
	,showTabId: function(name) {
		this._selected_tab = -1;
		this._selected_tab_id = "";
		var i = 0;
		var _g = 0;
		var _g1 = this._tabs;
		while(_g < _g1.length) {
			var tab = _g1[_g];
			++_g;
			tab.set_toggled(false);
			tab.forceStateHandler("out_button");
			if(tab.name == name) {
				tab.set_toggled(true);
				this._selected_tab_id = name;
				this._selected_tab = i;
			}
			++i;
		}
		this._showOnlyGroup(name);
		this.stackTabs();
	}
	,_back: null
	,_tabs: null
	,_tab_groups: null
	,_stretch_tabs: null
	,_tab_spacing: null
	,_tab_stacking: null
	,_tab_offset: null
	,_selected_tab_id: null
	,_selected_tab: null
	,sortTabs: function(a,b) {
		if(a.name < b.name) {
			return -1;
		} else if(a.name > b.name) {
			return 1;
		}
		return -1;
	}
	,showTabInt: function(i) {
		if(i >= 0 && this._tabs != null && this._tabs.length > i) {
			var _tab = this._tabs[i];
			var name = _tab.name;
			this.showTabId(name);
		} else {
			this.showTabId("");
		}
	}
	,_showOnlyGroup: function(name) {
		var _g = 0;
		var _g1 = this._tab_groups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.name == name) {
				group.set_visible(group.set_active(true));
			} else {
				group.set_visible(group.set_active(false));
			}
		}
	}
	,getFirstTab: function() {
		var _the_tab = null;
		if(this._tabs != null && this._tabs.length > 0) {
			_the_tab = this._tabs[0];
		}
		return _the_tab;
	}
	,distributeTabs: function(W) {
		if(W == null) {
			W = -1;
		}
		var xx = 0;
		var tab_width = 0;
		if(W == -1) {
			W = this._back.get_width();
		}
		var diff_size = 0;
		if(this._stretch_tabs) {
			tab_width = W / this._tabs.length;
			var tot_size = (tab_width | 0) * this._tabs.length;
			if(tot_size < W) {
				diff_size = W - tot_size;
			}
		}
		this._tabs.sort($bind(this,this.sortTabs));
		var i = 0;
		var firstHeight = 0;
		var tab;
		var _g = 0;
		var _g1 = this._tabs;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			tab = t;
			tab.set_x(this.x + xx);
			tab.set_y(this.y);
			if(this._tab_offset != null) {
				var _g2 = tab;
				_g2.set_x(_g2.x + this._tab_offset.x);
				var _g3 = tab;
				_g3.set_y(_g3.y + this._tab_offset.y);
			}
			if(this._stretch_tabs) {
				var theHeight = tab.get_height();
				if(i != 0) {
					theHeight = firstHeight;
					tab.resize_ratio = -1;
				}
				if(diff_size > 0) {
					tab.resize(tab_width + 1,theHeight);
					xx += (tab_width | 0) + 1;
					--diff_size;
				} else {
					tab.resize(tab_width,theHeight);
					xx += tab_width | 0;
				}
			} else if(this._tab_spacing != null) {
				xx += tab.get_width() + this._tab_spacing;
			} else {
				xx += tab.get_width();
			}
			if(i == 0) {
				firstHeight = tab.get_height();
			}
			++i;
		}
		if(this._tabs != null && this._tabs.length > 0 && this._tabs[0] != null) {
			this._back.set_y(this._tabs[0].y + this._tabs[0].get_height() - 2);
			if(this._tab_offset != null) {
				var _g = this._back;
				_g.set_y(_g.y - this._tab_offset.y);
			}
		}
		this.calcBounds();
	}
	,__class__: flixel_addons_ui_FlxUITabMenu
	,__properties__: $extend(flixel_addons_ui_FlxUIGroup.prototype.__properties__,{set_selected_tab_id:"set_selected_tab_id",get_selected_tab_id:"get_selected_tab_id",set_selected_tab:"set_selected_tab",get_selected_tab:"get_selected_tab",set_skipButtonUpdate:"set_skipButtonUpdate",get_numTabs:"get_numTabs"})
});
var flixel_addons_ui_FlxUIText = function(X,Y,FieldWidth,Text1,Size,EmbeddedFont) {
	if(EmbeddedFont == null) {
		EmbeddedFont = true;
	}
	if(Size == null) {
		Size = 8;
	}
	if(FieldWidth == null) {
		FieldWidth = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this.minimumHeight = 1;
	this.broadcastToFlxUI = true;
	flixel_text_FlxText.call(this,X,Y,FieldWidth,Text1,Size,EmbeddedFont);
};
$hxClasses["flixel.addons.ui.FlxUIText"] = flixel_addons_ui_FlxUIText;
flixel_addons_ui_FlxUIText.__name__ = "flixel.addons.ui.FlxUIText";
flixel_addons_ui_FlxUIText.__interfaces__ = [flixel_addons_ui_interfaces_IHasParams,flixel_addons_ui_interfaces_IFlxUIWidget,flixel_addons_ui_interfaces_IResizable];
flixel_addons_ui_FlxUIText.__super__ = flixel_text_FlxText;
flixel_addons_ui_FlxUIText.prototype = $extend(flixel_text_FlxText.prototype,{
	broadcastToFlxUI: null
	,name: null
	,params: null
	,minimumHeight: null
	,resize: function(w,h) {
		var sign = 1;
		if(h < this.minimumHeight) {
			h = this.minimumHeight;
		}
		if(h < this.get_height()) {
			sign = -1;
		}
		this.set_width(w);
		this.set_height(h);
		this.textField.set_width(this.get_width());
		var old_size = this._defaultFormat.size | 0;
		var diff = this.get_height() - this.graphic.bitmap.height;
		var failsafe = 0;
		var numLines = this.textField.get_numLines();
		while(diff * sign > 0 && failsafe < 999) {
			++failsafe;
			var _g = this;
			_g.set_size((_g._defaultFormat.size | 0) + sign);
			if(sign > 0 && this.textField.get_numLines() > numLines) {
				var _g1 = this;
				_g1.set_size((_g1._defaultFormat.size | 0) - sign);
				break;
			}
			this._regen = true;
			this.calcFrame(true);
			diff = h - this.graphic.bitmap.height;
			diff = h - this.graphic.bitmap.height;
		}
		if(failsafe >= 999) {
			this.set_size(old_size);
		}
		this.set_width(w);
		this.set_height(h);
		this._regen = true;
		this.calcFrame(true);
	}
	,set_minimumHeight: function(H) {
		if(H < 1) {
			H = 1;
		}
		this.minimumHeight = H;
		return this.minimumHeight;
	}
	,set_params: function(p) {
		this.params = p;
		return this.params;
	}
	,clone: function() {
		var newText = new flixel_addons_ui_FlxUIText();
		newText.set_width(this.get_width());
		newText.set_height(this.get_height());
		var theFont = this._font;
		theFont = flixel_addons_ui_FontFixer.fix(this._font);
		newText.setFormat(theFont,this._defaultFormat.size | 0,this.color);
		if(this._defaultFormat != null && this._defaultFormat.align != null) {
			newText.set_alignment(flixel_text_FlxTextAlign.fromOpenFL(this._defaultFormat.align));
		}
		var Color = this.borderColor;
		var Size = this.borderSize;
		var Quality = this.borderQuality;
		if(Quality == null) {
			Quality = 1;
		}
		if(Size == null) {
			Size = 1;
		}
		if(Color == null) {
			Color = 0;
		}
		newText.set_borderStyle(this.borderStyle);
		newText.set_borderColor(Color);
		newText.set_borderSize(Size);
		newText.set_borderQuality(Quality);
		newText.set_text(this.text);
		return newText;
	}
	,__class__: flixel_addons_ui_FlxUIText
	,__properties__: $extend(flixel_text_FlxText.prototype.__properties__,{set_minimumHeight:"set_minimumHeight",set_params:"set_params"})
});
var flixel_addons_ui_FlxUITileTest = function(X,Y,TileWidth,TileHeight,tilesWide,tilesTall,color1,color2,FloorToEven) {
	if(FloorToEven == null) {
		FloorToEven = false;
	}
	if(color2 == null) {
		color2 = 12895428;
	}
	if(color1 == null) {
		color1 = 8421504;
	}
	this.baseTileSize = -1;
	this.floorToEven = false;
	this._color2 = 0;
	this._color1 = 0;
	this._tilesTall = 2;
	this._tilesWide = 2;
	flixel_addons_ui_FlxUISprite.call(this,X,Y);
	this.tileWidth = TileWidth;
	this.tileHeight = TileHeight;
	this._tilesWide = tilesWide;
	this._tilesTall = tilesTall;
	this._color1 = color1;
	this._color2 = color2;
	this.floorToEven = FloorToEven;
	this.makeTiles(this.tileWidth,this.tileHeight,this._tilesWide,this._tilesTall,this._color1,this._color2);
};
$hxClasses["flixel.addons.ui.FlxUITileTest"] = flixel_addons_ui_FlxUITileTest;
flixel_addons_ui_FlxUITileTest.__name__ = "flixel.addons.ui.FlxUITileTest";
flixel_addons_ui_FlxUITileTest.__interfaces__ = [flixel_addons_ui_interfaces_IFlxUIWidget,flixel_addons_ui_interfaces_IResizable];
flixel_addons_ui_FlxUITileTest.__super__ = flixel_addons_ui_FlxUISprite;
flixel_addons_ui_FlxUITileTest.prototype = $extend(flixel_addons_ui_FlxUISprite.prototype,{
	tileWidth: null
	,tileHeight: null
	,get_widthInTiles: function() {
		return this._tilesWide;
	}
	,get_heightInTiles: function() {
		return this._tilesTall;
	}
	,_tilesWide: null
	,_tilesTall: null
	,_color1: null
	,_color2: null
	,floorToEven: null
	,baseTileSize: null
	,makeTiles: function(tileWidth,tileHeight,tilesWide,tilesTall,color1,color2) {
		if(color2 == null) {
			color2 = -3881788;
		}
		if(color1 == null) {
			color1 = -8355712;
		}
		var size = this.constrain(tileWidth * this._tilesWide,tileHeight * this._tilesTall);
		tileWidth = size.x | 0;
		tileHeight = size.y | 0;
		this.makeGraphic(tilesWide,tilesTall,color1);
		var canvas = this.get_pixels();
		var j = 0;
		var _g = 0;
		var _g1 = tilesWide;
		while(_g < _g1) {
			var ix = _g++;
			var _g2 = 0;
			var _g3 = tilesTall;
			while(_g2 < _g3) {
				var iy = _g2++;
				if(j % 2 == 0) {
					canvas.setPixel(ix,iy,color2);
				}
				++j;
			}
			if(tilesWide % 2 != 0) {
				++j;
			}
		}
		this.set_pixels(canvas);
		this.scale.set(tileWidth,tileHeight);
		this.updateHitbox();
	}
	,constrain: function(w,h) {
		var tileWidth = w / this._tilesWide | 0;
		var tileHeight = h / this._tilesTall | 0;
		if(tileWidth < tileHeight) {
			tileHeight = tileWidth;
		} else if(tileHeight < tileWidth) {
			tileWidth = tileHeight;
		}
		if(this.floorToEven) {
			if(tileWidth % 2 == 1) {
				--tileWidth;
				tileHeight = tileWidth;
			}
		}
		if(this.baseTileSize > 0) {
			tileWidth = (tileWidth / this.baseTileSize | 0) * this.baseTileSize;
			tileHeight = tileWidth;
		}
		return new flixel_math_FlxPoint(tileWidth,tileHeight);
	}
	,resize: function(w,h) {
		this.makeTiles(this.tileWidth,this.tileHeight,this._tilesWide,this._tilesTall,this._color1,this._color2);
	}
	,__class__: flixel_addons_ui_FlxUITileTest
	,__properties__: $extend(flixel_addons_ui_FlxUISprite.prototype.__properties__,{get_heightInTiles:"get_heightInTiles",get_widthInTiles:"get_widthInTiles"})
});
var flixel_addons_ui_FlxUITooltip = function(Width,Height,Anchor_,Style) {
	flixel_addons_ui_FlxUIGroup.call(this,0,0);
	if(Anchor_ == null) {
		Anchor_ = new flixel_addons_ui_Anchor(0,0,"left","top","right","top");
	}
	Style = flixel_addons_ui_FlxUITooltip.styleFix(Style);
	this.refresh(Width,Height,"","",Anchor_,Style);
	this.setScrollFactor(0,0);
};
$hxClasses["flixel.addons.ui.FlxUITooltip"] = flixel_addons_ui_FlxUITooltip;
flixel_addons_ui_FlxUITooltip.__name__ = "flixel.addons.ui.FlxUITooltip";
flixel_addons_ui_FlxUITooltip.styleFix = function(Style,DefaultStyle) {
	if(Style == null) {
		Style = { titleFormat : null, bodyFormat : null, titleBorder : null, bodyBorder : null, titleOffset : null, bodyOffset : null, background : null, borderSize : -1, borderColor : null, arrow : null, titleWidth : -1, bodyWidth : -1, autoSizeHorizontal : null, autoSizeVertical : null, leftPadding : -1, rightPadding : -1, topPadding : -1, bottomPadding : -1};
	}
	if(DefaultStyle != null) {
		if(Style.titleFormat == null) {
			Style.titleFormat = DefaultStyle.titleFormat;
		}
		if(Style.bodyFormat == null) {
			Style.bodyFormat = DefaultStyle.bodyFormat;
		}
		if(Style.titleBorder == null) {
			Style.titleBorder = DefaultStyle.titleBorder;
		}
		if(Style.bodyBorder == null) {
			Style.bodyBorder = DefaultStyle.bodyBorder;
		}
		if(Style.titleOffset == null) {
			Style.titleOffset = DefaultStyle.titleOffset;
		}
		if(Style.bodyOffset == null) {
			Style.bodyOffset = DefaultStyle.bodyOffset;
		}
		if(Style.background == null) {
			Style.background = DefaultStyle.background;
		}
		if(Style.borderColor == null) {
			Style.borderColor = DefaultStyle.borderColor;
		}
		if(Style.arrow == null) {
			Style.arrow = DefaultStyle.arrow;
		}
		if(Style.borderSize == null || Style.borderSize < 0) {
			Style.borderSize = DefaultStyle.borderSize;
		}
		if(Style.titleWidth == null || Style.titleWidth < 0) {
			Style.titleWidth = DefaultStyle.titleWidth;
		}
		if(Style.bodyWidth == null || Style.bodyWidth < 0) {
			Style.bodyWidth = DefaultStyle.bodyWidth;
		}
		if(Style.autoSizeHorizontal == null) {
			Style.autoSizeHorizontal = DefaultStyle.autoSizeHorizontal;
		}
		if(Style.autoSizeVertical == null) {
			Style.autoSizeVertical = DefaultStyle.autoSizeVertical;
		}
		if(Style.leftPadding == null || Style.leftPadding < 0) {
			Style.leftPadding = DefaultStyle.leftPadding;
		}
		if(Style.rightPadding == null || Style.rightPadding < 0) {
			Style.rightPadding = DefaultStyle.rightPadding;
		}
		if(Style.topPadding == null || Style.topPadding < 0) {
			Style.topPadding = DefaultStyle.topPadding;
		}
		if(Style.leftPadding == null || Style.bottomPadding < 0) {
			Style.bottomPadding = DefaultStyle.bottomPadding;
		}
	}
	if(DefaultStyle != null) {
		if(Style.titleFormat != null) {
			flixel_addons_ui_FlxUITooltip.fillFontDefNulls(Style.titleFormat,DefaultStyle.titleFormat);
			if(Style.titleFormat.format != null && DefaultStyle.titleFormat.format != null) {
				flixel_addons_ui_FlxUITooltip.fillFormatNulls(Style.titleFormat.format,DefaultStyle.titleFormat.format);
			}
		}
		if(Style.bodyFormat != null) {
			flixel_addons_ui_FlxUITooltip.fillFontDefNulls(Style.bodyFormat,DefaultStyle.bodyFormat);
			if(Style.bodyFormat.format != null && DefaultStyle.bodyFormat.format != null) {
				flixel_addons_ui_FlxUITooltip.fillFormatNulls(Style.bodyFormat.format,DefaultStyle.bodyFormat.format);
			}
		}
	}
	if(Style.titleFormat == null) {
		Style.titleFormat = new flixel_addons_ui_FontDef(null,null,null,new openfl_text_TextFormat(null,8,-16777216),null);
	}
	if(Style.bodyFormat == null) {
		Style.bodyFormat = new flixel_addons_ui_FontDef(null,null,null,new openfl_text_TextFormat(null,8,-16777216),null);
	}
	if(Style.titleBorder == null) {
		Style.titleBorder = new flixel_addons_ui_BorderDef(flixel_text_FlxTextBorderStyle.NONE,0,0,1);
	}
	if(Style.bodyBorder == null) {
		Style.bodyBorder = new flixel_addons_ui_BorderDef(flixel_text_FlxTextBorderStyle.NONE,0,0,1);
	}
	if(Style.titleOffset == null) {
		Style.titleOffset = new flixel_math_FlxPoint(0,0);
	}
	if(Style.bodyOffset == null) {
		Style.bodyOffset = new flixel_math_FlxPoint(0,0);
	}
	if(Style.background == null) {
		Style.background = 16777162;
	}
	if(Style.borderColor == null) {
		Style.borderColor = -16777216;
	}
	if(Style.arrow == null) {
		Style.arrow = "flixel/flixel-ui/img/tooltip_arrow.png";
	}
	if(Style.borderSize == null || Style.borderSize < 0) {
		Style.borderSize = 1;
	}
	if(Style.titleWidth == null || Style.titleWidth < 0) {
		Style.titleWidth = 100;
	}
	if(Style.bodyWidth == null || Style.bodyWidth < 0) {
		Style.bodyWidth = 100;
	}
	if(Style.autoSizeHorizontal == null) {
		Style.autoSizeHorizontal = true;
	}
	if(Style.autoSizeVertical == null) {
		Style.autoSizeVertical = true;
	}
	if(Style.leftPadding == null || Style.leftPadding < 0) {
		Style.leftPadding = 0;
	}
	if(Style.rightPadding == null || Style.rightPadding < 0) {
		Style.rightPadding = 0;
	}
	if(Style.topPadding == null || Style.topPadding < 0) {
		Style.topPadding = 0;
	}
	if(Style.leftPadding == null || Style.bottomPadding < 0) {
		Style.bottomPadding = 0;
	}
	return Style;
};
flixel_addons_ui_FlxUITooltip.cloneStyle = function(s) {
	var tf = s.titleFormat != null ? s.titleFormat.clone() : null;
	var bf = s.bodyFormat != null ? s.bodyFormat.clone() : null;
	var obj = { titleFormat : tf, bodyFormat : bf, borderSize : s.borderSize, titleWidth : s.titleWidth, bodyWidth : s.bodyWidth, background : s.background, borderColor : s.borderColor, arrow : s.arrow, titleOffset : s.titleOffset.copyTo(), bodyOffset : s.bodyOffset.copyTo(), titleBorder : s.titleBorder.clone(), bodyBorder : s.bodyBorder.clone(), autoSizeVertical : s.autoSizeVertical, autoSizeHorizontal : s.autoSizeHorizontal, leftPadding : s.leftPadding, rightPadding : s.rightPadding, topPadding : s.topPadding, bottomPadding : s.bottomPadding};
	return obj;
};
flixel_addons_ui_FlxUITooltip.fillFontDefNulls = function(a,b) {
	if(a.get_size() == 0) {
		a.set_size(b.get_size());
	}
	if(a.name == null || a.name == "") {
		a.name = b.name;
	}
	if(a.file == null || a.file == "") {
		a.file = b.file;
	}
	if(a.extension == null || a.extension == "") {
		a.extension = b.extension;
	}
	if(a.border == null) {
		a.border = b.border != null ? b.border.clone() : null;
	}
};
flixel_addons_ui_FlxUITooltip.fillFormatNulls = function(a,b) {
	if(a.align == null) {
		a.align = b.align;
	}
	if(a.blockIndent == null) {
		a.blockIndent = b.blockIndent;
	}
	if(a.bold == null) {
		a.bold = b.bold;
	}
	if(a.bullet == null) {
		a.bullet = b.bullet;
	}
	if(a.color == null) {
		a.color = b.color;
	}
	if(a.font == null) {
		a.font = b.font;
	}
	if(a.indent == null) {
		a.indent = b.indent;
	}
	if(a.italic == null) {
		a.italic = b.italic;
	}
	if(a.kerning == null) {
		a.kerning = b.kerning;
	}
	if(a.leading == null) {
		a.leading = b.leading;
	}
	if(a.leftMargin == null) {
		a.leftMargin = b.leftMargin;
	}
	if(a.letterSpacing == null) {
		a.letterSpacing = b.letterSpacing;
	}
	if(a.rightMargin == null) {
		a.rightMargin = b.rightMargin;
	}
	if(a.size == null) {
		a.size = b.size;
	}
	if(a.tabStops == null) {
		a.tabStops = b.tabStops;
	}
	if(a.target == null) {
		a.target = b.target;
	}
	if(a.underline == null) {
		a.underline = b.underline;
	}
	if(a.url == null) {
		a.url = b.url;
	}
};
flixel_addons_ui_FlxUITooltip.__super__ = flixel_addons_ui_FlxUIGroup;
flixel_addons_ui_FlxUITooltip.prototype = $extend(flixel_addons_ui_FlxUIGroup.prototype,{
	style: null
	,anchor: null
	,title: null
	,body: null
	,show: function(obj,Title,Body,AutoSizeVertical,AutoSizeHorizontal,ShowArrow) {
		if(ShowArrow == null) {
			ShowArrow = true;
		}
		if(AutoSizeHorizontal == null) {
			AutoSizeHorizontal = true;
		}
		if(AutoSizeVertical == null) {
			AutoSizeVertical = true;
		}
		if(Body == null) {
			Body = "";
		}
		if(Title == null) {
			Title = "";
		}
		this.set_visible(true);
		this.set_active(true);
		this.set_x(0);
		this.set_y(0);
		this._bkg.set_x(0);
		this._bkg.set_y(0);
		this._arrow.set_x(0);
		this._arrow.set_y(0);
		this._arrowBkg.set_x(0);
		this._arrowBkg.set_y(0);
		this._arrowBkg = this.makeArrowBkg(this._arrowBkg);
		this._arrow.set_color(this.style.background);
		this._arrow.set_visible(this._arrowBkg.set_visible(ShowArrow));
		if(this.style.titleWidth > 0) {
			this._titleText.set_width(this._titleText.textField.set_width(this.style.titleWidth) | 0);
		}
		if(this.style.bodyWidth > 0) {
			this._bodyText.set_width(this._bodyText.textField.set_width(this.style.bodyWidth) | 0);
		}
		if(this.style.titleFormat != null) {
			this.style.titleFormat.apply(null,this._titleText);
		}
		if(this.style.bodyFormat != null) {
			this.style.bodyFormat.apply(null,this._bodyText);
		}
		if(this.style.titleBorder != null) {
			this.style.titleBorder.apply(this._titleText);
		}
		if(this.style.bodyBorder != null) {
			this.style.bodyBorder.apply(this._bodyText);
		}
		this._titleText.set_text(Title);
		this._bodyText.set_text(Body);
		this._titleText.update(0);
		this._bodyText.update(0);
		var titleHeight = this._titleText.textField.get_textHeight() + 4 | 0;
		if(this.style.titleOffset != null) {
			this._titleText.set_x(this.style.titleOffset.x | 0);
			this._titleText.set_y(this.style.titleOffset.y | 0);
		}
		if(this.style.bodyOffset != null) {
			this._bodyText.set_x(this.style.bodyOffset.x | 0);
			this._bodyText.set_y(this._titleText.y + titleHeight + this.style.bodyOffset.y | 0);
		}
		var W = this._bkg.get_width() | 0;
		var H = this._bkg.get_height() | 0;
		if(AutoSizeHorizontal) {
			var tw = this._titleText.text != "" ? this._titleText.x + this._titleText.get_width() : 0;
			var bw = this._bodyText.text != "" ? this._bodyText.x + this._bodyText.get_width() : 0;
			W = Math.max(tw,bw) | 0;
		}
		if(AutoSizeVertical) {
			var th = this._titleText.text != "" ? this._titleText.y + this._titleText.get_height() : 0;
			var bh = this._bodyText.text != "" ? this._bodyText.y + this._bodyText.get_height() : 0;
			H = Math.max(th,bh) | 0;
			H = Math.max(H,this._arrowBkg.get_height()) | 0;
		}
		if(this.style.leftPadding == null) {
			this.style.leftPadding = 0;
		}
		if(this.style.rightPadding == null) {
			this.style.rightPadding = 0;
		}
		if(this.style.topPadding == null) {
			this.style.topPadding = 0;
		}
		if(this.style.bottomPadding == null) {
			this.style.bottomPadding = 0;
		}
		W += this.style.leftPadding + this.style.rightPadding;
		H += this.style.topPadding + this.style.bottomPadding;
		W |= 0;
		H |= 0;
		this.refreshBkg(W,H,this.style);
		var oldOffX = this._anchorArrow.x.offset | 0;
		var oldOffY = this._anchorArrow.y.offset | 0;
		this._anchorArrow.x.offset -= this.anchor.x.offset;
		this._anchorArrow.y.offset += this.anchor.y.offset;
		this._anchorArrow.x.offset = this._anchorArrow.x.offset | 0;
		this._anchorArrow.y.offset = this._anchorArrow.y.offset | 0;
		this._anchorArrow.anchorThing(this._arrow,this._bkg);
		this._anchorArrow.x.offset = oldOffX;
		this._anchorArrow.y.offset = oldOffY;
		if(this._arrow.x < 0) {
			var xx = Math.abs(this._arrow.x) | 0;
			var _g = this._bkg;
			_g.set_x(_g.x + xx);
			var _g = this._titleText;
			_g.set_x(_g.x + xx);
			var _g = this._bodyText;
			_g.set_x(_g.x + xx);
			this._arrow.set_x(0);
		}
		if(this._arrow.y < 0) {
			var yy = Math.abs(this._arrow.y) | 0;
			var _g = this._bkg;
			_g.set_y(_g.y + yy);
			var _g = this._titleText;
			_g.set_y(_g.y + yy);
			var _g = this._bodyText;
			_g.set_y(_g.y + yy);
			this._arrow.set_y(0);
		}
		if(this._titleText.text != "" && this._bodyText.text == "") {
			var tempH = H - (this.style.topPadding + this.style.bottomPadding);
			var titleOnlyOffset = (tempH - titleHeight) / 2 | 0;
			var _g = this._titleText;
			_g.set_y(_g.y + titleOnlyOffset);
		}
		var _g = this._titleText;
		_g.set_x(_g.x + this.style.leftPadding);
		var _g = this._bodyText;
		_g.set_x(_g.x + this.style.leftPadding);
		var _g = this._titleText;
		_g.set_y(_g.y + this.style.topPadding);
		var _g = this._bodyText;
		_g.set_y(_g.y + this.style.topPadding);
		if(this._titleText.text == "") {
			this._titleText.set_x(this._bkg.x);
			this._titleText.set_y(this._bkg.y);
			this._titleText.set_width(this._bkg.get_width());
		}
		if(this._bodyText.text == "") {
			this._bodyText.set_x(this._bkg.x);
			this._bodyText.set_y(this._bkg.y);
			this._bodyText.set_width(this._bkg.get_width());
		}
		this.anchor.anchorThing(this,obj);
		this.set_x(this.x | 0);
		this.set_y(this.y | 0);
		this._arrowBkg.set_x(this._arrow.x - this.style.borderSize | 0);
		this._arrowBkg.set_y(this._arrow.y - this.style.borderSize | 0);
		this._titleText.set_x(this._titleText.x | 0);
		this._bodyText.set_x(this._bodyText.x | 0);
		this._bkg.set_x(this._bkg.x | 0);
		this._bkg.set_y(this._bkg.y | 0);
		this._arrowBkg.set_x(this._arrowBkg.x | 0);
		this._arrowBkg.set_y(this._arrowBkg.y | 0);
		this._arrow.set_x(this._arrow.x | 0);
		this._arrow.set_y(this._arrow.y | 0);
	}
	,get_height: function() {
		if(this.group.length == 0) {
			return 0;
		}
		var minY = Infinity;
		var maxY = -Infinity;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var member = _g1[_g];
			++_g;
			if(member == null) {
				continue;
			}
			if(((member) instanceof flixel_text_FlxText)) {
				continue;
			}
			var minMemberY = member.y;
			var maxMemberY = minMemberY + member.get_height();
			if(maxMemberY > maxY) {
				maxY = maxMemberY;
			}
			if(minMemberY < minY) {
				minY = minMemberY;
			}
		}
		return maxY - minY;
	}
	,hide: function() {
		this.set_visible(false);
		this.set_active(false);
	}
	,set_anchor: function(a) {
		this.anchor = a;
		this._anchorArrow = this.getArrowAnchor(a,this._anchorArrow);
		if(this._arrowBkg != null) {
			this.makeArrowBkg(this._arrowBkg);
		}
		return a;
	}
	,set_style: function(s) {
		this.style = s;
		return s;
	}
	,set_title: function(t) {
		this.title = t;
		return t;
	}
	,set_body: function(b) {
		this.body = b;
		return b;
	}
	,_bkg: null
	,_titleText: null
	,_bodyText: null
	,_arrow: null
	,_arrowBkg: null
	,_anchorArrow: null
	,refresh: function(Width,Height,Title,Body,Anchor_,Style) {
		var newBkg = this._bkg == null;
		var newArrow = this._arrow == null;
		var newTitle = this._titleText == null;
		var newBody = this._bodyText == null;
		if(newBkg) {
			this._bkg = new flixel_FlxSprite();
		}
		if(newArrow) {
			this._arrow = new flixel_FlxSprite();
		}
		if(newTitle) {
			this._titleText = new flixel_addons_ui_FlxUIText(0,0,Width);
			if(Style.titleFormat != null) {
				Style.titleFormat.apply(null,this._titleText);
			}
			if(Style.titleBorder != null) {
				Style.titleBorder.apply(this._titleText);
			}
		}
		if(newBody) {
			this._bodyText = new flixel_addons_ui_FlxUIText(0,0,Width);
			if(Style.bodyFormat != null) {
				Style.bodyFormat.apply(null,this._bodyText);
			}
			if(Style.bodyBorder != null) {
				Style.bodyBorder.apply(this._bodyText);
			}
		}
		this._titleText.set_text(Title);
		this._bodyText.set_text(Body);
		this._arrow.set_color(Style.background);
		var test = flixel_FlxG.bitmap.add(Style.arrow);
		if(Style.arrow == null) {
			Style.arrow = "flixel/flixel-ui/img/tooltip_arrow.png";
			flixel_FlxG.bitmap.add(Style.arrow);
		}
		this._arrow.loadGraphic(Style.arrow,true,test.height,test.height);
		if(newArrow) {
			this._arrow.animation.add("right",[0],0,false);
			this._arrow.animation.add("down",[1],0,false);
			this._arrow.animation.add("left",[2],0,false);
			this._arrow.animation.add("up",[3],0,false);
		}
		this.refreshBkg(Width,Height,Style);
		this.set_style(Style);
		if(newArrow && Style.borderSize > 0) {
			this._arrowBkg = new flixel_FlxSprite();
			this.add(this._arrowBkg);
		}
		this.set_anchor(Anchor_);
		if(newBkg) {
			this.add(this._bkg);
		}
		if(newArrow) {
			this.add(this._arrow);
		}
		if(newTitle) {
			this.add(this._titleText);
		}
		if(newBody) {
			this.add(this._bodyText);
		}
	}
	,refreshBkg: function(Width,Height,Style) {
		var key = this.getStyleKey(Width,Height,Style);
		if(flixel_FlxG.bitmap._cache.h[key] == null) {
			var pix = null;
			if(Style.borderSize > 0) {
				pix = new openfl_display_BitmapData(Width,Height,false,Style.borderColor);
				pix.fillRect(new openfl_geom_Rectangle(Style.borderSize,Style.borderSize,Width - Style.borderSize * 2,Height - Style.borderSize * 2),Style.background);
			} else {
				pix = new openfl_display_BitmapData(Width,Height,false,Style.background);
			}
			flixel_FlxG.bitmap.add(pix,true,key);
		}
		this._bkg.loadGraphic(key);
	}
	,getStyleKey: function(W,H,Style) {
		var this1 = Style.background;
		var tmp = W + "," + H + "," + ("0x" + StringTools.hex(this1 >> 24 & 255,2) + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2)) + "," + Style.borderSize + ",";
		var this1 = Style.borderColor;
		return tmp + ("0x" + StringTools.hex(this1 >> 24 & 255,2) + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2));
	}
	,makeArrowBkg: function(b) {
		if(b == null) {
			b = new flixel_FlxSprite();
		}
		var animName = this._arrow == null ? "null" : this._arrow.animation._curAnim == null ? "null" : this._arrow.animation._curAnim.name;
		var key = "arrowBkg:" + this.style.background + "," + this.style.borderSize + "," + this.style.borderColor + "," + animName;
		if(flixel_FlxG.bitmap._cache.h[key] == null) {
			var bs = this.style.borderSize;
			if(bs < 0 || bs == null) {
				bs = 0;
			}
			var W = this._arrow.get_width() + bs | 0;
			var H = this._arrow.get_height() + bs | 0;
			var bd = new openfl_display_BitmapData(W,H,true,0);
			flixel_FlxG.bitmap.add(bd,false,key);
			b.loadGraphic(key);
			var oldColor = this._arrow.color;
			this._arrow.set_color(this.style.borderColor);
			var m = new openfl_geom_Matrix();
			m.identity();
			b.stamp(this._arrow,0 * this.style.borderSize,0 * this.style.borderSize);
			b.stamp(this._arrow,this.style.borderSize,0 * this.style.borderSize);
			b.stamp(this._arrow,2 * this.style.borderSize,0 * this.style.borderSize);
			b.stamp(this._arrow,0 * this.style.borderSize,this.style.borderSize);
			b.stamp(this._arrow,2 * this.style.borderSize,this.style.borderSize);
			b.stamp(this._arrow,0 * this.style.borderSize,2 * this.style.borderSize);
			b.stamp(this._arrow,this.style.borderSize,2 * this.style.borderSize);
			b.stamp(this._arrow,2 * this.style.borderSize,2 * this.style.borderSize);
			this._arrow.set_color(oldColor);
		}
		b.loadGraphic(key);
		return b;
	}
	,getArrowAnchor: function(a,result) {
		var touchHorz = a.x.side == "left" && a.x.flush == "right" || a.x.side == "right" && a.x.flush == "left";
		var touchVert = a.y.side == "top" && a.y.flush == "bottom" || a.y.side == "bottom" && a.y.flush == "top";
		var matchHorz = a.x.side == "left" && a.x.flush == "left" || a.x.side == "right" && a.x.flush == "right";
		var matchVert = a.y.side == "top" && a.y.flush == "top" || a.y.side == "bottom" && a.y.flush == "bottom";
		var touchBoth = touchHorz && touchVert;
		var matchBoth = matchHorz && matchVert;
		var off = this.style.borderSize;
		if(!touchBoth) {
			if(touchHorz) {
				result = a.getFlipped(true,false,result);
				if(result.x.flush == "left") {
					result.x.offset -= off;
					this._arrow.animation.play("right");
				}
				if(result.x.flush == "right") {
					result.x.offset += off;
					this._arrow.animation.play("left");
				}
			}
			if(touchVert) {
				result = a.getFlipped(false,true,result);
				if(result.y.flush == "top") {
					result.y.offset -= off;
					this._arrow.animation.play("down");
				}
				if(result.y.flush == "bottom") {
					result.y.offset += off;
					this._arrow.animation.play("up");
				}
			}
		}
		if(!matchBoth) {
			if(matchHorz) {
				if(result.x.flush == "left") {
					result.x.offset += off;
				}
				if(result.x.flush == "right") {
					result.x.offset -= off;
				}
			}
			if(matchVert) {
				if(result.y.flush == "top") {
					result.y.offset += off;
				}
				if(result.y.flush == "bottom") {
					result.y.offset -= off;
				}
			}
		}
		if(result != null) {
			return result;
		}
		return a;
	}
	,__class__: flixel_addons_ui_FlxUITooltip
	,__properties__: $extend(flixel_addons_ui_FlxUIGroup.prototype.__properties__,{set_body:"set_body",set_title:"set_title",set_anchor:"set_anchor",set_style:"set_style"})
});
var flixel_addons_ui_FlxUITooltipManager = function(State,SubState) {
	this.current = -1;
	this._init = false;
	this.delay = 0.1;
	this.showOnClick = false;
	this.defaultStyle = null;
	this.fixedPosition = null;
	this.defaultAnchor = null;
	this.autoFlipAnchor = true;
	if(State != null) {
		this.state = State;
	} else if(SubState != null) {
		this.subState = SubState;
	}
	this.list = [];
	this.tooltip = new flixel_addons_ui_FlxUITooltip(100,50);
	this.lastPosition = new flixel_math_FlxPoint(0,0);
	this.defaultAnchor = this.tooltip.anchor.clone();
	this.defaultStyle = flixel_addons_ui_FlxUITooltip.cloneStyle(this.tooltip.style);
};
$hxClasses["flixel.addons.ui.FlxUITooltipManager"] = flixel_addons_ui_FlxUITooltipManager;
flixel_addons_ui_FlxUITooltipManager.__name__ = "flixel.addons.ui.FlxUITooltipManager";
flixel_addons_ui_FlxUITooltipManager.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_addons_ui_FlxUITooltipManager.prototype = {
	autoFlipAnchor: null
	,defaultAnchor: null
	,fixedPosition: null
	,defaultStyle: null
	,showOnClick: null
	,delay: null
	,showTooltipArrow: null
	,cameras: null
	,init: function() {
		var ui = this.state != null ? this.state._ui : this.subState != null ? this.subState._ui : null;
		if(ui == null) {
			return;
		}
		if(ui != null && ui.getDefinition("default:tooltip") != null) {
			var tt = ui._loadTooltipData(null);
			this.defaultStyle = flixel_addons_ui_FlxUITooltip.cloneStyle(tt.style);
			this.tooltip.set_style(this.defaultStyle);
		}
	}
	,destroy: function() {
		flixel_util_FlxDestroyUtil.destroyArray(this.list);
		this.list = null;
		this.tooltip = null;
		this.lastPosition = null;
		this.state = null;
		this.subState = null;
		this.defaultAnchor = null;
		this.defaultStyle = null;
	}
	,clear: function() {
		while(this.list.length > 0) {
			var entry = this.list.pop();
			if(entry != null) {
				entry.destroy();
			}
		}
	}
	,hideCurrent: function() {
		if(this.current > 0) {
			this.hide(this.current);
		}
	}
	,isVisible: function() {
		return this.current > 0;
	}
	,doesCurrentTooltipBelongTo: function(thing,checkChildren) {
		if(checkChildren == null) {
			checkChildren = true;
		}
		if(((thing) instanceof flixel_addons_ui_FlxUIGroup)) {
			var i = this.findObj(thing);
			if(i != -1) {
				return i == this.current;
			}
			if(checkChildren) {
				var fuig = thing;
				var _g = 0;
				var _g1 = fuig.group.members;
				while(_g < _g1.length) {
					var member = _g1[_g];
					++_g;
					if(this.doesCurrentTooltipBelongTo(member)) {
						return true;
					}
				}
			}
		} else if(((thing) instanceof flixel_addons_ui_FlxUIButton)) {
			var i = this.findBtn(thing);
			if(i == -1) {
				return false;
			}
			return i == this.current;
		} else if(((thing) instanceof flixel_FlxObject)) {
			var i = this.findObj(thing);
			if(i == -1) {
				return false;
			}
			return i == this.current;
		}
		return false;
	}
	,stickyTooltipFor: function(thing,sticky) {
		if(sticky == null) {
			sticky = true;
		}
		var i = this.findThing(thing);
		if(i != -1) {
			this.list[i].sticky = sticky;
		}
	}
	,showTooltipFor: function(thing,value) {
		if(value == null) {
			value = true;
		}
		var i = this.findThing(thing);
		if(i != -1) {
			this.current = -1;
			if(value) {
				this.show(i);
			} else {
				this.hide(i);
			}
		}
	}
	,enableTooltipFor: function(thing,enabled) {
		var i = this.findThing(thing);
		if(i >= 0 && i < this.list.length) {
			var entry = this.list[i];
			entry.enabled = enabled;
			return true;
		}
		return false;
	}
	,add: function(thing,data) {
		if(this._init) {
			data.style = flixel_addons_ui_FlxUITooltip.styleFix(data.style,this.defaultStyle);
		}
		var btn = null;
		var i = -1;
		if(js_Boot.__implements(thing,flixel_addons_ui_interfaces_IFlxUIButton)) {
			btn = thing;
			i = this.findBtn(btn);
			if(i == -1) {
				this.list.push(new flixel_addons_ui__$FlxUITooltipManager_FlxUITooltipEntry(btn,data));
			} else {
				this.list[i].data = data;
				this.list[i].count = 0;
			}
		} else {
			i = this.findObj(thing);
			if(i == -1) {
				var b = new flixel_addons_ui_FlxUIButton(0,0,"",null,false,true);
				b.resize(thing.get_width(),thing.get_height());
				btn = b;
				btn.set_x(thing.x);
				btn.set_y(thing.y);
				btn.set_width(thing.get_width());
				btn.set_height(thing.get_height());
				btn.scrollFactor.set(thing.scrollFactor.x,thing.scrollFactor.y);
				if(this.state != null) {
					this.state.add(btn);
				} else if(this.subState != null) {
					this.subState.add(btn);
				}
				this.list.push(new flixel_addons_ui__$FlxUITooltipManager_FlxUITooltipEntry(btn,data,thing));
			} else {
				this.list[i].data = data;
				this.list[i].count = 0;
				this.list[i].btn.set_x(thing.x);
				this.list[i].btn.set_y(thing.y);
				this.list[i].btn.set_width(thing.get_width());
				this.list[i].btn.set_height(thing.get_height());
				this.list[i].btn.scrollFactor.set(thing.scrollFactor.x,thing.scrollFactor.y);
			}
		}
	}
	,remove: function(thing) {
		var btn = null;
		var i = -1;
		if(js_Boot.__implements(thing,flixel_addons_ui_interfaces_IFlxUIButton)) {
			btn = thing;
			i = this.findBtn(btn);
		} else {
			i = this.findObj(thing);
		}
		if(i != -1) {
			if(this.current == i) {
				this.hide(this.current);
			}
			var entry = this.list[i];
			this.list.splice(i,1);
			entry.destroy();
		}
	}
	,update: function(elapsed) {
		var _g = 0;
		var _g1 = this.list.length;
		while(_g < _g1) {
			var i = _g++;
			var btn = this.list[i].btn;
			var obj = this.list[i].obj;
			if(this.list[i].enabled == false) {
				if(this.current == i) {
					this.hide(i);
				}
				this.list[i].count = 0;
				continue;
			}
			if(obj != null) {
				btn.set_x(obj.x);
				btn.set_y(obj.y);
				btn.set_width(obj.get_width());
				btn.set_height(obj.get_height());
				btn.set_visible(obj.visible);
			}
			if(this.list[i].sticky == false && (false == btn.visible || btn.get_justMousedOut() || btn.get_mouseIsOut())) {
				this.list[i].count = 0;
				this.hide(i);
			} else if(btn.get_justMousedOver() || btn.get_mouseIsOver()) {
				if(btn.get_mouseIsOver()) {
					this.list[i].count += elapsed;
				}
			}
			if(this.list[i].count > this.delay || this.list[i].data.delay >= 0 && this.list[i].count > this.list[i].data.delay) {
				if(this.current != i) {
					this.show(i);
				} else if(this.list[i].data.moving) {
					this.show(i);
				}
			}
		}
	}
	,_init: null
	,list: null
	,tooltip: null
	,current: null
	,lastPosition: null
	,state: null
	,subState: null
	,hide: function(i) {
		if(this.current == i) {
			this.tooltip.hide();
			if(this.state != null) {
				this.state.remove(this.tooltip,true);
			}
			if(this.subState != null) {
				this.subState.remove(this.tooltip,true);
			}
			this.current = -1;
		}
	}
	,findThing: function(thing) {
		if(thing == null) {
			return -1;
		}
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.obj == thing || js_Boot.__implements(thing,flixel_addons_ui_interfaces_IFlxUIButton) && js_Boot.__cast(thing , flixel_addons_ui_interfaces_IFlxUIButton) == entry.btn) {
				return this.list.indexOf(entry);
			}
		}
		return -1;
	}
	,findBtn: function(btn) {
		if(btn == null) {
			return -1;
		}
		var _g = 0;
		var _g1 = this.list.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.list[i] != null && this.list[i].btn == btn) {
				return i;
			}
		}
		return -1;
	}
	,findObj: function(obj) {
		if(obj == null) {
			return -1;
		}
		var _g = 0;
		var _g1 = this.list.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.list[i] != null && this.list[i].obj == obj) {
				return i;
			}
		}
		return -1;
	}
	,set_fixedPosition: function(value) {
		this.fixedPosition = value;
		if(this.tooltip != null && this.tooltip.visible) {
			this.show(this.current);
		}
		return this.fixedPosition;
	}
	,set_showTooltipArrow: function(b) {
		this.showTooltipArrow = b;
		if(this.tooltip != null && this.tooltip.visible) {
			this.tooltip._arrow.set_visible(this.tooltip._arrowBkg.set_visible(b));
		}
		return this.showTooltipArrow;
	}
	,show: function(i) {
		if(i < 0 || i >= this.list.length) {
			return;
		}
		var btn = this.list[i].btn;
		if(btn.visible == false || this.list[i].obj != null && this.list[i].obj.visible == false) {
			return;
		}
		if(this.current == i) {
			var deltaX = btn.x - this.lastPosition.x;
			var deltaY = btn.y - this.lastPosition.y;
			this.lastPosition.set_x(btn.x);
			this.lastPosition.set_y(btn.y);
			var _g = this.tooltip;
			_g.set_x(_g.x + deltaX);
			var _g = this.tooltip;
			_g.set_y(_g.y + deltaY);
			return;
		}
		this.current = i;
		var data = this.list[i].data;
		if(data.init != true) {
			data.style = flixel_addons_ui_FlxUITooltip.styleFix(data.style,this.defaultStyle);
			data.init = true;
		}
		var autoSizeVertical = true;
		var autoSizeHorizontal = true;
		if(data.style != null) {
			this.tooltip.set_style(data.style);
			autoSizeVertical = data.style.autoSizeVertical;
			autoSizeHorizontal = data.style.autoSizeHorizontal;
		}
		if(data.anchor != null) {
			this.tooltip.set_anchor(data.anchor);
		} else if(this.defaultAnchor != null) {
			this.tooltip.set_anchor(this.defaultAnchor);
		}
		if(this.state != null) {
			this.state.add(this.tooltip);
		}
		if(this.subState != null) {
			this.subState.add(this.tooltip);
		}
		this.tooltip.show(btn,data.title,data.body,autoSizeVertical,autoSizeHorizontal);
		if(this.fixedPosition != null) {
			this.fixedPosition.anchor.anchorThing(this.tooltip,this.fixedPosition.object);
		}
		if(this.autoFlipAnchor) {
			if(this.checkAutoFlip(this.tooltip,this.fixedPosition != null ? this.fixedPosition.anchor : null)) {
				if(this.fixedPosition != null) {
					this.fixedPosition.anchor.anchorThing(this.tooltip,this.fixedPosition.object);
				} else {
					this.tooltip.show(btn,data.title,data.body,autoSizeVertical,autoSizeHorizontal,this.showTooltipArrow);
				}
			}
		}
		this.lastPosition.set(btn.x,btn.y);
		if(this.state != null) {
			this.state.onShowTooltip(this.tooltip);
		} else if(this.subState != null) {
			this.subState.onShowTooltip(this.tooltip);
		}
	}
	,checkAutoFlip: function(tooltip,anchor) {
		var flipX = tooltip.x < 0 || tooltip.x + tooltip.get_width() > flixel_FlxG.width;
		var flipY = tooltip.y < 0 || tooltip.y + tooltip.get_height() > flixel_FlxG.height;
		if(flipX || flipY) {
			if(anchor == null) {
				anchor = tooltip.anchor;
			}
			anchor.getFlipped(flipX,flipY,anchor);
			return true;
		}
		return false;
	}
	,set_cameras: function(value) {
		this.tooltip.set_cameras(value);
		return this.cameras = value;
	}
	,__class__: flixel_addons_ui_FlxUITooltipManager
	,__properties__: {set_cameras:"set_cameras",set_showTooltipArrow:"set_showTooltipArrow",set_fixedPosition:"set_fixedPosition"}
};
var flixel_addons_ui__$FlxUITooltipManager_FlxUITooltipEntry = function(Btn,Data,Obj) {
	this.sticky = false;
	this.btn = Btn;
	this.data = Data;
	this.obj = Obj;
	this.count = 0;
	this.enabled = true;
	if(this.data != null) {
		if(this.data.delay == null) {
			this.data.delay = -1;
		}
		if(this.data.moving == null) {
			this.data.moving = false;
		}
	}
};
$hxClasses["flixel.addons.ui._FlxUITooltipManager.FlxUITooltipEntry"] = flixel_addons_ui__$FlxUITooltipManager_FlxUITooltipEntry;
flixel_addons_ui__$FlxUITooltipManager_FlxUITooltipEntry.__name__ = "flixel.addons.ui._FlxUITooltipManager.FlxUITooltipEntry";
flixel_addons_ui__$FlxUITooltipManager_FlxUITooltipEntry.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_addons_ui__$FlxUITooltipManager_FlxUITooltipEntry.prototype = {
	obj: null
	,btn: null
	,count: null
	,data: null
	,enabled: null
	,sticky: null
	,destroy: function() {
		this.count = 0;
		this.obj = null;
		this.btn = null;
		this.data.anchor = null;
		this.data.style = null;
		this.data = null;
	}
	,__class__: flixel_addons_ui__$FlxUITooltipManager_FlxUITooltipEntry
};
var flixel_addons_ui_FontDef = function(Name,Extension,File1,Format,Border) {
	if(File1 == null) {
		File1 = "";
	}
	if(Extension == null) {
		Extension = ".ttf";
	}
	this._size = 0;
	this.name = Name;
	this.extension = Extension;
	this.file = File1;
	this.format = Format;
	if(this.format == null) {
		this.format = new openfl_text_TextFormat();
	}
	this.border = Border;
	if(this.border == null) {
		this.border = new flixel_addons_ui_BorderDef(flixel_text_FlxTextBorderStyle.NONE,0);
	}
};
$hxClasses["flixel.addons.ui.FontDef"] = flixel_addons_ui_FontDef;
flixel_addons_ui_FontDef.__name__ = "flixel.addons.ui.FontDef";
flixel_addons_ui_FontDef.copyFromTextField = function(t) {
	var dtf = t.get_defaultTextFormat();
	var fd = new flixel_addons_ui_FontDef("");
	fd.fromStr(dtf.font);
	fd.format.font = dtf.font;
	fd.format.size = dtf.size;
	fd.format.color = dtf.color;
	fd.format.bold = dtf.bold;
	fd.format.italic = dtf.italic;
	fd.format.underline = dtf.underline;
	fd.format.url = dtf.url;
	fd.format.letterSpacing = dtf.letterSpacing;
	fd.format.leading = dtf.leading;
	fd.format.target = dtf.target;
	fd.format.align = dtf.align;
	return fd;
};
flixel_addons_ui_FontDef.copyFromFlxText = function(t) {
	var fd = flixel_addons_ui_FontDef.copyFromTextField(t.textField);
	fd.fromStr(t._font);
	fd.border.style = t.borderStyle;
	fd.border.color = t.borderColor;
	fd.border.quality = t.borderQuality;
	fd.border.size = t.borderSize;
	return fd;
};
flixel_addons_ui_FontDef.fromXML = function(data) {
	var fontFace = flixel_addons_ui_U.xml_str(data,"font");
	var fontStyle = flixel_addons_ui_U.xml_str(data,"style");
	var fontFile = null;
	if(fontFace != "") {
		fontFile = flixel_addons_ui_FlxUI.font(fontFace,fontStyle);
	}
	var fontStyle = flixel_addons_ui_U.xml_str(data,"style");
	var fontSize = flixel_addons_ui_FlxUI.fontSize(fontFile,flixel_addons_ui_U.xml_i(data,"size",8));
	var fontColor = flixel_addons_ui_U.xml_color(data,"color",true,-1);
	var fontAlign = flixel_addons_ui_U.xml_str(data,"align");
	var align;
	switch(fontAlign.toLowerCase()) {
	case "center":
		align = 0;
		break;
	case "justify":
		align = 2;
		break;
	case "left":
		align = 3;
		break;
	case "right":
		align = 4;
		break;
	default:
		align = 3;
	}
	var fd = new flixel_addons_ui_FontDef(flixel_addons_ui_U.xml_str(data,"font"),".ttf",fontFile);
	fd.format.color = fontColor;
	fd.format.size = fontSize;
	fd.format.align = align;
	fd.set_size(fontSize);
	fd.setFontStyle(fontStyle);
	fd.border = flixel_addons_ui_BorderDef.fromXML(data);
	return fd;
};
flixel_addons_ui_FontDef.prototype = {
	name: null
	,extension: null
	,file: null
	,format: null
	,border: null
	,get_size: function() {
		if(this.format != null) {
			this._size = this.format.size | 0;
		}
		return this._size;
	}
	,set_size: function(i) {
		if(this.format != null) {
			this.format.size = i;
		}
		this._size = i;
		return this._size;
	}
	,clone: function() {
		var newBorder = this.border == null ? null : this.border.clone();
		var newFormat = this.format == null ? null : new openfl_text_TextFormat(this.format.font,this.format.size,this.format.color,this.format.bold,this.format.italic,this.format.underline,this.format.url,this.format.target,this.format.align,this.format.leftMargin,this.format.rightMargin,this.format.indent,this.format.leading);
		if(this.format != null) {
			newFormat.letterSpacing = this.format.letterSpacing;
		}
		var newThis = new flixel_addons_ui_FontDef(this.name,this.extension,this.file,newFormat,newBorder);
		newThis.set_size(this.get_size());
		return newThis;
	}
	,applyTxt: function(textField) {
		textField.setTextFormat(this.format);
		return textField;
	}
	,applyFlx: function(flxText) {
		var flxTxtAlign = null;
		if(this.format.align != null) {
			switch(this.format.align) {
			case 0:
				flxTxtAlign = "center";
				break;
			case 2:
				flxTxtAlign = "justify";
				break;
			case 3:
				flxTxtAlign = "left";
				break;
			case 4:
				flxTxtAlign = "right";
				break;
			default:
				flxTxtAlign = "left";
			}
		}
		var font = this.file == "" || this.file == null ? null : this.file;
		flxText.setFormat(font,this.format.size | 0,this.format.color,flxTxtAlign,this.border.style,this.border.color);
		flxText.textField.get_defaultTextFormat().leading = this.format.leading;
		flxText.textField.get_defaultTextFormat().letterSpacing = this.format.letterSpacing;
		return flxText;
	}
	,apply: function(textField,flxText) {
		if(textField != null) {
			textField.setTextFormat(this.format);
		}
		if(flxText != null) {
			this.applyFlx(flxText);
		}
	}
	,fromStr: function(str,recursion) {
		if(recursion == null) {
			recursion = 0;
		}
		if(recursion > 3) {
			return;
		}
		str = flixel_addons_ui_FontFixer.fix(str);
		var style = this.getFontStyle(str);
		this.setFontStyle(style);
		var extension = "";
		var _g = 0;
		var _g1 = flixel_addons_ui_FontDef.EXTENSIONS;
		while(_g < _g1.length) {
			var ext = _g1[_g];
			++_g;
			if(str.indexOf(ext) != -1) {
				if(openfl_utils_Assets.exists(str + extension,"FONT")) {
					this.name = StringTools.replace(str,extension,"");
					this.file = str;
					extension = ext;
					break;
				}
			}
		}
		if(extension == "") {
			var _g = 0;
			var _g1 = flixel_addons_ui_FontDef.EXTENSIONS;
			while(_g < _g1.length) {
				var ext = _g1[_g];
				++_g;
				if(openfl_utils_Assets.exists(str + ext,"FONT")) {
					extension = ext;
					this.name = str;
					this.file = str + extension;
					extension = ext;
					break;
				}
			}
		} else {
			str = this.stripFontExtensions(str);
			var fontStyle = this.getFontStyle(str);
			if(fontStyle != "") {
				str = HxOverrides.substr(str,str.length - 1,1);
				this.fromStr(str,recursion + 1);
				return;
			} else {
				this.fromStr(str,recursion + 1);
				return;
			}
		}
		this.setFontStyle(style);
	}
	,_size: null
	,stripFontExtensions: function(str) {
		if(str == null) {
			return str;
		}
		var _g = 0;
		var _g1 = flixel_addons_ui_FontDef.EXTENSIONS;
		while(_g < _g1.length) {
			var ext = _g1[_g];
			++_g;
			if(str != null && str.indexOf(ext) != -1) {
				str = StringTools.replace(str,ext,"");
			}
		}
		return str;
	}
	,getFontExtension: function(str) {
		if(str == null) {
			return "";
		}
		var _g = 0;
		var _g1 = flixel_addons_ui_FontDef.EXTENSIONS;
		while(_g < _g1.length) {
			var ext = _g1[_g];
			++_g;
			if(str.indexOf(ext) != -1) {
				return ext;
			}
		}
		return str;
	}
	,fixFontName: function() {
		var fontStyle = this.getFontStyle(this.file);
		var extension = this.getFontExtension(this.file);
		var fontbase = this.stripFontExtensions(this.file);
		if(fontStyle != "") {
			fontbase = HxOverrides.substr(fontbase,0,fontbase.length - 1);
		}
		var styleStr = "";
		if(this.format.bold && this.format.italic) {
			styleStr = "z";
		} else if(this.format.bold) {
			styleStr = "b";
		} else if(this.format.italic) {
			styleStr = "i";
		}
		this.file = fontbase + styleStr + extension;
	}
	,getFontStyle: function(str) {
		if(str == null) {
			return "";
		}
		str = this.stripFontExtensions(str);
		var lastChar = HxOverrides.substr(str,str.length - 1,1);
		if(lastChar != "" && lastChar != null) {
			lastChar = lastChar.toLowerCase();
			switch(lastChar) {
			case "b":
				return "b";
			case "i":
				return "i";
			case "z":
				return "z";
			default:
				return "";
			}
		}
		return "";
	}
	,setFontStyle: function(str) {
		str = str.toLowerCase();
		switch(str) {
		case "b":case "bold":
			this.format.bold = true;
			this.format.italic = false;
			break;
		case "all":case "bi":case "bold-italic":case "bolditalic":case "both":case "ib":case "italicbold":case "z":
			this.format.bold = true;
			this.format.italic = true;
			break;
		case "i":case "italic":
			this.format.bold = false;
			this.format.italic = true;
			break;
		default:
			this.format.bold = false;
			this.format.italic = false;
		}
		this.fixFontName();
	}
	,toString: function() {
		return "{name:" + this.name + ",size:" + this.get_size() + ",file:" + this.file + ",extension:" + this.extension + ",format:" + Std.string(this.format) + ",border:" + Std.string(this.border) + "}";
	}
	,__class__: flixel_addons_ui_FontDef
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var flixel_addons_ui_FontFixer = function() { };
$hxClasses["flixel.addons.ui.FontFixer"] = flixel_addons_ui_FontFixer;
flixel_addons_ui_FontFixer.__name__ = "flixel.addons.ui.FontFixer";
flixel_addons_ui_FontFixer.name2File = null;
flixel_addons_ui_FontFixer.init = function() {
	if(flixel_addons_ui_FontFixer.name2File == null) {
		flixel_addons_ui_FontFixer.name2File = new haxe_ds_StringMap();
	}
};
flixel_addons_ui_FontFixer.fix = function(font) {
	flixel_addons_ui_FontFixer.init();
	if(font.indexOf(".ttf") == -1) {
		if(Object.prototype.hasOwnProperty.call(flixel_addons_ui_FontFixer.name2File.h,font)) {
			font = flixel_addons_ui_FontFixer.name2File.h[font];
		}
	}
	return font;
};
flixel_addons_ui_FontFixer.add = function(file,name) {
	if(name == null) {
		name = "";
	}
	flixel_addons_ui_FontFixer.init();
	if(name != "" && Object.prototype.hasOwnProperty.call(flixel_addons_ui_FontFixer.name2File.h,name)) {
		return flixel_addons_ui_FontFixer.name2File.h[name];
	}
	if(!openfl_utils_Assets.exists(file,"FONT")) {
		return file;
	}
	var font = openfl_utils_Assets.getFont(file);
	if(font == null) {
		return file;
	}
	if(name == "") {
		name = font.name;
	}
	flixel_addons_ui_FontFixer.name2File.h[name] = file;
	return flixel_addons_ui_FontFixer.fix(file);
};
var flixel_addons_ui_StrNameLabel = function(Name,Label) {
	if(Label == null) {
		Label = "";
	}
	if(Name == null) {
		Name = "";
	}
	this.name = Name;
	this.label = Label;
};
$hxClasses["flixel.addons.ui.StrNameLabel"] = flixel_addons_ui_StrNameLabel;
flixel_addons_ui_StrNameLabel.__name__ = "flixel.addons.ui.StrNameLabel";
flixel_addons_ui_StrNameLabel.sortByLabel = function(a,b) {
	if(a.label < b.label) {
		return -1;
	}
	if(a.label > b.label) {
		return 1;
	}
	return 0;
};
flixel_addons_ui_StrNameLabel.sortByName = function(a,b) {
	if(a.name < b.name) {
		return -1;
	}
	if(a.name > b.name) {
		return 1;
	}
	return 0;
};
flixel_addons_ui_StrNameLabel.prototype = {
	name: null
	,label: null
	,copy: function() {
		return new flixel_addons_ui_StrNameLabel(this.name,this.label);
	}
	,toString: function() {
		var value = this.name;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "name";
		_this.value = value;
		var value = this.label;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "label";
		_this1.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1]);
	}
	,__class__: flixel_addons_ui_StrNameLabel
};
var flixel_addons_ui_U = function() { };
$hxClasses["flixel.addons.ui.U"] = flixel_addons_ui_U;
flixel_addons_ui_U.__name__ = "flixel.addons.ui.U";
flixel_addons_ui_U.xml_str = function(data,att,lower_case,default_str) {
	if(default_str == null) {
		default_str = "";
	}
	if(lower_case == null) {
		lower_case = false;
	}
	if(data.get(att) != null) {
		if(lower_case) {
			return data.get(att).toLowerCase();
		} else {
			return data.get(att);
		}
	}
	return default_str;
};
flixel_addons_ui_U.xml_name = function(data) {
	var name = flixel_addons_ui_U.xml_str(data,"name",true,"");
	if(name == "") {
		name = flixel_addons_ui_U.xml_str(data,"id",true,"");
	}
	return name;
};
flixel_addons_ui_U.xml_color = function(data,att,cast32Bit,defaultColor) {
	if(cast32Bit == null) {
		cast32Bit = true;
	}
	var col = null;
	var str = flixel_addons_ui_U.xml_str(data,att,true);
	if(str != "") {
		var cast32Bit1 = cast32Bit;
		var return_val = flixel_util_FlxColor.fromString(str);
		if(return_val == null) {
			throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + str);
		}
		col = return_val;
	}
	if(col == null && defaultColor != null) {
		col = defaultColor;
	}
	return col;
};
flixel_addons_ui_U.xml_iArray = function(data,att) {
	var arr = flixel_addons_ui_U.xml_strArray(data,att);
	var ints = null;
	if(arr != null && arr.length > 0) {
		ints = [];
		var _g = 0;
		var _g1 = arr.length;
		while(_g < _g1) {
			var i = _g++;
			ints[i] = Std.parseInt(arr[i]);
		}
	}
	return ints;
};
flixel_addons_ui_U.xml_fArray = function(data,att) {
	var arr = flixel_addons_ui_U.xml_strArray(data,att);
	var fs = null;
	if(arr != null && arr.length > 0) {
		fs = [];
		var _g = 0;
		var _g1 = arr.length;
		while(_g < _g1) {
			var i = _g++;
			fs[i] = parseFloat(arr[i]);
		}
	}
	return fs;
};
flixel_addons_ui_U.xml_strArray = function(data,att,lowerCase,default_) {
	if(lowerCase == null) {
		lowerCase = true;
	}
	var str = flixel_addons_ui_U.xml_str(data,att,lowerCase);
	if(str != "") {
		var arr = str.split(",");
		return arr;
	} else {
		return default_;
	}
};
flixel_addons_ui_U.xml_colorArray = function(data,att,cast32Bit) {
	if(cast32Bit == null) {
		cast32Bit = true;
	}
	var arr = flixel_addons_ui_U.xml_strArray(data,att);
	var cols = null;
	if(arr != null && arr.length > 0) {
		cols = [];
		var _g = 0;
		var _g1 = arr.length;
		while(_g < _g1) {
			var i = _g++;
			var str = arr[i];
			var cast32Bit1 = cast32Bit;
			var return_val = flixel_util_FlxColor.fromString(str);
			if(return_val == null) {
				throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + str);
			}
			cols[i] = return_val;
		}
	}
	return cols;
};
flixel_addons_ui_U.perc_to_float = function(str) {
	if(str.lastIndexOf("%") == str.length - 1) {
		str = HxOverrides.substr(str,0,str.length - 1);
		var r = new EReg("([0-9]+)?(\\.)?([0-9]*)?","");
		if(r.match(str)) {
			var match = r.matchedPos();
			if(match.pos == 0 && match.len == str.length) {
				var perc_float = parseFloat(str);
				perc_float /= 100;
				return perc_float;
			}
		}
	}
	return NaN;
};
flixel_addons_ui_U.isStrNum = function(str) {
	if(str == null || str == "") {
		return false;
	}
	var r = new EReg("-?([0-9]+)?(\\.)?([0-9]*)?","");
	if(r.match(str)) {
		var p = r.matchedPos();
		if(p.pos == 0 && p.len == str.length) {
			return true;
		}
	}
	return false;
};
flixel_addons_ui_U.isStrInt = function(str) {
	var r = new EReg("[0-9]+","");
	if(r.match(str)) {
		var p = r.matchedPos();
		if(p.pos == 0 && p.len == str.length) {
			return true;
		}
	}
	return false;
};
flixel_addons_ui_U.isStrFloat = function(str) {
	var r = new EReg("[0-9]+\\.[0-9]+","");
	if(r.match(str)) {
		var p = r.matchedPos();
		if(p.pos == 0 && p.len == str.length) {
			return true;
		}
	}
	return false;
};
flixel_addons_ui_U.xml_f = function(data,att,default_) {
	if(default_ == null) {
		default_ = 0;
	}
	if(data.get(att) != null) {
		return parseFloat(data.get(att));
	}
	return default_;
};
flixel_addons_ui_U.xml_i = function(data,att,default_) {
	if(default_ == null) {
		default_ = 0;
	}
	if(data.get(att) != null) {
		return Std.parseInt(data.get(att));
	}
	return default_;
};
flixel_addons_ui_U.xml_pt = function(data,att,default_) {
	if(data.get(att) != null) {
		return flixel_addons_ui_U.pointify(data.get(att));
	}
	return default_;
};
flixel_addons_ui_U.boolify = function(str) {
	str = str.toLowerCase();
	if(str == "true" || str == "1") {
		return true;
	}
	return false;
};
flixel_addons_ui_U.pointify = function(str) {
	var pt = null;
	if(str != null) {
		var arr = ["(",")"," ","=",":"];
		var _g = 0;
		while(_g < arr.length) {
			var thing = arr[_g];
			++_g;
			while(str.indexOf(thing) != -1) str = StringTools.replace(str,thing,"");
		}
		if(str.indexOf(",") == -1) {
			if(str.indexOf("x") != -1) {
				str = StringTools.replace(str,"x",",");
			}
		}
		arr = str.split(",");
		if(arr.length == 2) {
			pt = new flixel_math_FlxPoint(parseFloat(arr[0]),parseFloat(arr[1]));
		}
	}
	return pt;
};
flixel_addons_ui_U.compareStringVars = function(variable,otherValue,type,op) {
	if(op == null) {
		op = "==";
	}
	switch(type) {
	case "bool":
		var ba = flixel_addons_ui_U.boolify(variable);
		var bb = flixel_addons_ui_U.boolify(otherValue);
		if(op == "==" || op == "=") {
			return ba == bb;
		} else if(op == "!==" || op == "!=") {
			return ba != bb;
		}
		break;
	case "float":
		var fa = parseFloat(variable);
		var fb = parseFloat(otherValue);
		if(op == "==" || op == "=") {
			return fa == fb;
		} else if(op == "!==" || op == "!=") {
			return fa != fb;
		} else if(op == "<") {
			return fa < fb;
		} else if(op == ">") {
			return fa > fb;
		} else if(op == "<=") {
			return fa <= fb;
		} else if(op == ">=") {
			return fa >= fb;
		}
		break;
	case "int":
		var ia = Std.parseInt(variable);
		var ib = Std.parseInt(otherValue);
		if(op == "==" || op == "=") {
			return ia == ib;
		} else if(op == "!==" || op == "!=") {
			return ia != ib;
		} else if(op == "<") {
			return ia < ib;
		} else if(op == ">") {
			return ia > ib;
		} else if(op == "<=") {
			return ia <= ib;
		} else if(op == ">=") {
			return ia >= ib;
		}
		break;
	case "string":
		if(op == "==" || op == "=") {
			return variable == otherValue;
		}
		if(op == "!==" || op == "!=") {
			return variable != otherValue;
		}
		break;
	}
	return false;
};
flixel_addons_ui_U.xml_bool = function(data,att,default_) {
	if(default_ == null) {
		default_ = false;
	}
	if(data.get(att) != null) {
		var str = data.get(att);
		str = str.toLowerCase();
		if(str == "true" || str == "1") {
			return true;
		}
		return false;
	}
	return default_;
};
flixel_addons_ui_U.xml_gfx = function(data,att,test) {
	if(test == null) {
		test = true;
	}
	var str = "";
	if(data.get(att) != null) {
		str = data.get(att);
		if(str == "" || str == null) {
			str = "";
		} else {
			str = flixel_addons_ui_U.gfx(str);
			if(test) {
				try {
					if(!openfl_utils_Assets.exists(str,"IMAGE")) {
						throw haxe_Exception.thrown("couldn't load bmp \"" + att + "\"");
					}
				} catch( _g ) {
					haxe_NativeStackTrace.lastError = _g;
					if(typeof(haxe_Exception.caught(_g).unwrap()) != "string") {
						throw _g;
					}
				}
			}
		}
	}
	return str;
};
flixel_addons_ui_U.center = function(fb1,fb2,centerX,centerY) {
	if(centerY == null) {
		centerY = true;
	}
	if(centerX == null) {
		centerX = true;
	}
	if(centerX) {
		fb2.set_x(fb1.x + (fb1.get_width() - fb2.get_width()) / 2);
	}
	if(centerY) {
		fb2.set_y(fb1.y + (fb1.get_height() - fb2.get_height()) / 2);
	}
};
flixel_addons_ui_U.test_int = function(i1,test,i2) {
	switch(test) {
	case "!=":
		return i1 != i2;
	case "<":
		return i1 < i2;
	case "<=":
		return i1 <= i2;
	case "==":
		return i1 == i2;
	case ">":
		return i1 > i2;
	case ">=":
		return i1 >= i2;
	default:
		return false;
	}
};
flixel_addons_ui_U.test_float = function(f1,test,f2) {
	switch(test) {
	case "!=":
		return f1 != f2;
	case "<":
		return f1 < f2;
	case "<=":
		return f1 <= f2;
	case "==":
		return f1 == f2;
	case ">":
		return f1 > f2;
	case ">=":
		return f1 >= f2;
	default:
		return false;
	}
};
flixel_addons_ui_U.padDigits = function(i,d,padChar) {
	if(padChar == null) {
		padChar = "0";
	}
	var f = i;
	var str = "";
	var num_digits = 0;
	while(f >= 1) {
		f /= 10;
		++num_digits;
	}
	if(i == 0) {
		num_digits = 1;
	}
	if(num_digits < d) {
		var _g = 0;
		var _g1 = d - num_digits;
		while(_g < _g1) {
			var temp = _g++;
			str += padChar;
		}
	}
	return str + (i == null ? "null" : "" + i);
};
flixel_addons_ui_U.conformToBounds = function(pt,maxMin) {
	if(maxMin != null) {
		if(pt.x < maxMin.min_width) {
			pt.x = maxMin.min_width;
		}
		if(pt.y < maxMin.min_height) {
			pt.y = maxMin.min_height;
		}
		if(pt.x > maxMin.max_width) {
			pt.x = maxMin.max_width;
		}
		if(pt.x > maxMin.max_height) {
			pt.y = maxMin.max_height;
		}
	}
	return pt;
};
flixel_addons_ui_U.parseHex = function(str,cast32Bit,safe,default_color) {
	if(default_color == null) {
		default_color = 0;
	}
	if(safe == null) {
		safe = false;
	}
	if(cast32Bit == null) {
		cast32Bit = false;
	}
	var return_val = flixel_util_FlxColor.fromString(str);
	if(return_val == null) {
		if(!safe) {
			throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + str);
		} else {
			return_val = default_color;
		}
	}
	return return_val;
};
flixel_addons_ui_U.hexChar2dec = function(hex_char) {
	switch(hex_char) {
	case "0":case "1":case "10":case "2":case "3":case "4":case "5":case "6":case "7":case "8":case "9":
		return Std.parseInt(hex_char);
	case "A":case "a":
		return 10;
	case "C":case "c":
		return 12;
	case "E":case "e":
		return 14;
	case "B":case "b":
		return 11;
	case "D":case "d":
		return 13;
	case "F":case "f":
		return 15;
	default:
		throw haxe_Exception.thrown("U.hexChar2dec() illegal char(" + hex_char + ")");
	}
};
flixel_addons_ui_U.hex2dec = function(hex_str) {
	var length = hex_str.length;
	var place_mult = 1;
	var sum = 0;
	var i = length - 1;
	while(i >= 0) {
		var char_hex = HxOverrides.substr(hex_str,i,1);
		var char_int;
		switch(char_hex) {
		case "0":case "1":case "10":case "2":case "3":case "4":case "5":case "6":case "7":case "8":case "9":
			char_int = Std.parseInt(char_hex);
			break;
		case "A":case "a":
			char_int = 10;
			break;
		case "C":case "c":
			char_int = 12;
			break;
		case "E":case "e":
			char_int = 14;
			break;
		case "B":case "b":
			char_int = 11;
			break;
		case "D":case "d":
			char_int = 13;
			break;
		case "F":case "f":
			char_int = 15;
			break;
		default:
			throw haxe_Exception.thrown("U.hexChar2dec() illegal char(" + char_hex + ")");
		}
		sum += char_int * place_mult;
		place_mult *= 16;
		--i;
	}
	return sum;
};
flixel_addons_ui_U.hex2rgb = function(hex) {
	return [hex >> 16 & 255,hex >> 8 & 255,hex & 255];
};
flixel_addons_ui_U.applyResize = function(resize_ratio,resize_ratio_axis,w,h,pt) {
	if(pt == null) {
		pt = new flixel_math_FlxPoint();
	}
	if(resize_ratio > 0) {
		var effective_ratio = w / h;
		if(Math.abs(effective_ratio - resize_ratio) > 0.0001) {
			if(resize_ratio_axis == 1) {
				h = w * (1 / resize_ratio);
			} else {
				w = h * (1 / resize_ratio);
			}
		}
	}
	var iw = w | 0;
	if(iw < 1) {
		w = 1;
	}
	var ih = h | 0;
	if(ih < 1) {
		h = 1;
	}
	pt.set(w,h);
	return pt;
};
flixel_addons_ui_U.rgb2hex = function(r,g,b) {
	return r << 16 | g << 8 | b;
};
flixel_addons_ui_U.interpolate = function(hex1,hex2,amt) {
	if(amt < 0) {
		amt = 0;
	} else if(amt > 1) {
		amt = 1;
	}
	var a1 = 1 - amt;
	var c1r = hex1 >> 16 & 255;
	var c1g = hex1 >> 8 & 255;
	var c1b = hex1 & 255;
	var c2r = hex2 >> 16 & 255;
	var c2g = hex2 >> 8 & 255;
	var c2b = hex2 & 255;
	var c3r = c1r * a1 + c2r * amt | 0;
	var c3g = c1g * a1 + c2g * amt | 0;
	var c3b = c1b * a1 + c2b * amt | 0;
	return c3r << 16 | c3g << 8 | c3b;
};
flixel_addons_ui_U.getLocList = function(xmin,ymin,xmax,ymax) {
	var list = [];
	var _g = ymin;
	var _g1 = ymax + 1;
	while(_g < _g1) {
		var yy = _g++;
		var _g2 = xmin;
		var _g3 = xmax + 1;
		while(_g2 < _g3) {
			var xx = _g2++;
			var X = xx;
			var Y = yy;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			list.push(point);
		}
	}
	return list;
};
flixel_addons_ui_U.disposeXML = function(thing) {
};
flixel_addons_ui_U.copyAccess = function(fast) {
	var x = Xml.parse(haxe_xml_Printer.print(fast)).firstElement();
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
	}
	var this1 = x;
	return this1;
};
flixel_addons_ui_U.copyXml = function(data) {
	return Xml.parse(haxe_xml_Printer.print(data)).firstElement();
};
flixel_addons_ui_U.getXML = function(str,folder) {
	if(folder == null) {
		folder = "";
	}
	var id = str;
	if(folder != "") {
		id = folder + "/" + id;
	}
	return flixel_addons_ui_U.xml(id);
};
flixel_addons_ui_U.json = function(str,extension,dir) {
	if(dir == null) {
		dir = "assets/json/";
	}
	if(extension == null) {
		extension = "json";
	}
	var json_str = openfl_utils_Assets.getText(dir + str + "." + extension);
	if(json_str != "" && json_str != null) {
		var the_json = JSON.parse(json_str);
		return the_json;
	}
	return null;
};
flixel_addons_ui_U.field = function(object,field,_default) {
	if(object == null) {
		return null;
	}
	if(Object.prototype.hasOwnProperty.call(object,field)) {
		var thing = Reflect.field(object,field);
		if(thing == null) {
			return _default;
		}
		return thing;
	}
	return _default;
};
flixel_addons_ui_U.xml = function(id,extension,getAccess,dir) {
	if(dir == null) {
		dir = "assets/xml/";
	}
	if(getAccess == null) {
		getAccess = true;
	}
	if(extension == null) {
		extension = "xml";
	}
	if(id.indexOf("raw:") == 0 || id.indexOf("RAW:") == 0) {
		id = HxOverrides.substr(id,4,id.length - 4);
		dir = "";
	}
	var thePath = dir + id + "." + extension;
	var exists = openfl_utils_Assets.exists(thePath,"TEXT");
	if(!exists) {
		return null;
	}
	var str = openfl_utils_Assets.getText(dir + id + "." + extension);
	if(str == null) {
		return null;
	}
	var the_xml = Xml.parse(str);
	if(getAccess) {
		var x = the_xml.firstElement();
		if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
		}
		var this1 = x;
		var fast = this1;
		return fast;
	} else {
		return the_xml.firstElement();
	}
};
flixel_addons_ui_U.clearArraySoft = function(array) {
	if(array == null) {
		return;
	}
	var i = array.length - 1;
	while(i >= 0) {
		array[i] = null;
		array.splice(i,1);
		--i;
	}
	array = null;
};
flixel_addons_ui_U.clearArray = function(array) {
	if(array == null) {
		return;
	}
	var i = array.length - 1;
	while(i >= 0) {
		flixel_addons_ui_U.destroyThing(array[i]);
		array[i] = null;
		array.splice(i,1);
		--i;
	}
	array = null;
};
flixel_addons_ui_U.destroyThing = function(thing) {
	if(thing == null) {
		return;
	}
	if(((thing) instanceof Array)) {
		flixel_addons_ui_U.clearArray(thing);
	} else if(js_Boot.__implements(thing,flixel_util_IFlxDestroyable)) {
		var idstr = js_Boot.__cast(thing , flixel_util_IFlxDestroyable);
		idstr.destroy();
		idstr = null;
	} else if(((thing) instanceof flixel_FlxBasic)) {
		var fb = js_Boot.__cast(thing , flixel_FlxBasic);
		fb.destroy();
		fb = null;
	}
	thing = null;
};
flixel_addons_ui_U.fontStr = function(str,style) {
	if(style == null) {
		style = "";
	}
	var style1 = style;
	if(style1 == null) {
		style1 = "";
	}
	style1 = style1.toLowerCase();
	var suffix = "";
	switch(style1) {
	case "b":case "bold":
		suffix = "b";
		break;
	case "bi":case "bold-italic":case "boldi":case "bolditalic":case "ib":case "ibold":case "italic-bold":case "italicbold":case "z":
		suffix = "z";
		break;
	case "i":case "italic":
		suffix = "i";
		break;
	case "":case "none":case "normal":case "regular":
		suffix = "";
		break;
	}
	if(str.indexOf("assets/fonts/") != 0) {
		return "assets/fonts/" + str + suffix;
	} else {
		return str + suffix;
	}
};
flixel_addons_ui_U.font = function(str,style,extension) {
	if(extension == null) {
		extension = ".ttf";
	}
	if(style == null) {
		style = "";
	}
	var ostr = str;
	var style1 = style;
	if(style1 == null) {
		style1 = "";
	}
	style1 = style1.toLowerCase();
	var suffix = "";
	switch(style1) {
	case "b":case "bold":
		suffix = "b";
		break;
	case "bi":case "bold-italic":case "boldi":case "bolditalic":case "ib":case "ibold":case "italic-bold":case "italicbold":case "z":
		suffix = "z";
		break;
	case "i":case "italic":
		suffix = "i";
		break;
	case "":case "none":case "normal":case "regular":
		suffix = "";
		break;
	}
	if(str.indexOf("assets/fonts/") != 0) {
		str = "assets/fonts/" + str + suffix;
	} else {
		str += suffix;
	}
	if(str.indexOf(extension) == -1) {
		str += extension;
	}
	str = flixel_addons_ui_FontFixer.add(str);
	var exists = openfl_utils_Assets.exists(str,"FONT");
	if(!exists && extension == ".ttf") {
		var alt = flixel_addons_ui_U.font(ostr,style,".otf");
		if(openfl_utils_Assets.exists(alt,"FONT")) {
			return alt;
		}
	}
	return str;
};
flixel_addons_ui_U._font = function(str,style) {
	if(style == null) {
		style = "";
	}
	style = style.toLowerCase();
	var suffix = "";
	switch(style) {
	case "b":case "bold":
		suffix = "b";
		break;
	case "bi":case "bold-italic":case "boldi":case "bolditalic":case "ib":case "ibold":case "italic-bold":case "italicbold":case "z":
		suffix = "z";
		break;
	case "i":case "italic":
		suffix = "i";
		break;
	case "":case "none":case "normal":case "regular":
		suffix = "";
		break;
	}
	if(str.indexOf("assets/fonts/") != 0) {
		return "assets/fonts/" + str + suffix;
	}
	return str + suffix;
};
flixel_addons_ui_U.fsx = function(data) {
	return new flixel_addons_ui_FlxUISprite(0,0,data);
};
flixel_addons_ui_U.fs = function(data) {
	return new flixel_FlxSprite(0,0,data);
};
flixel_addons_ui_U.FU = function(str) {
	return HxOverrides.substr(str,0,1).toUpperCase() + HxOverrides.substr(str,1,str.length - 1);
};
flixel_addons_ui_U.FUL = function(str) {
	return HxOverrides.substr(str,0,1).toUpperCase() + HxOverrides.substr(str,1,str.length - 1).toLowerCase();
};
flixel_addons_ui_U.getBmp = function(asset) {
	var str = null;
	if(typeof(asset) == "string") {
		str = asset;
	} else if(((asset) instanceof flixel_graphics_FlxGraphic)) {
		var fg = asset;
		str = fg.key;
	} else if(((asset) instanceof openfl_display_BitmapData)) {
		var bmp = asset;
		return bmp;
	}
	if(flixel_FlxG.bitmap._cache.h[str] != null) {
		var cg = flixel_FlxG.bitmap._cache.h[str];
		if(cg.bitmap != null) {
			return cg.bitmap;
		}
	}
	return openfl_utils_Assets.getBitmapData(str,false);
};
flixel_addons_ui_U.checkHaxedef = function(str) {
	str = str.toLowerCase();
	switch(str) {
	case "android":
		break;
	case "console-pc":case "console_pc":
		break;
	case "cpp":
		break;
	case "demo":
		break;
	case "desktop":
		break;
	case "flash":
		break;
	case "html5":
		return true;
	case "ios":
		break;
	case "js":
		return true;
	case "legacy":case "lime_legacy":
		break;
	case "lime_next":case "next":
		var val = true;
		return val;
	case "linux":
		break;
	case "mac":
		break;
	case "mobile":
		break;
	case "neko":
		break;
	case "ps3":
		break;
	case "ps4":
		break;
	case "sys":
		break;
	case "tvos":
		break;
	case "vita":
		break;
	case "web":
		return true;
	case "wiiu":
		break;
	case "windows":
		break;
	case "xbox1":
		break;
	}
	return false;
};
flixel_addons_ui_U.copy_shallow_arr = function(src) {
	if(src == null) {
		return null;
	}
	var arr = [];
	if(src == null) {
		return arr;
	}
	var _g = 0;
	while(_g < src.length) {
		var thing = src[_g];
		++_g;
		arr.push(thing);
	}
	return arr;
};
flixel_addons_ui_U.copy_arr_arr_i = function(src) {
	if(src == null) {
		return null;
	}
	var arrarr = [];
	var _g = 0;
	while(_g < src.length) {
		var arri = src[_g];
		++_g;
		var temp = [];
		var _g1 = 0;
		while(_g1 < arri.length) {
			var i = arri[_g1];
			++_g1;
			temp.push(i);
		}
		arrarr.push(temp);
	}
	return arrarr;
};
flixel_addons_ui_U.copy_shallow_arr_i = function(src) {
	if(src == null) {
		return null;
	}
	var arr = [];
	var _g = 0;
	while(_g < src.length) {
		var thing = src[_g];
		++_g;
		arr.push(thing);
	}
	return arr;
};
flixel_addons_ui_U.copy_shallow_arr_str = function(src) {
	if(src == null) {
		return null;
	}
	var arr = [];
	var _g = 0;
	while(_g < src.length) {
		var thing = src[_g];
		++_g;
		arr.push(thing);
	}
	return arr;
};
flixel_addons_ui_U.FU_ = function(str) {
	var arr = str.split(" ");
	var str = "";
	var _g = 0;
	var _g1 = arr.length;
	while(_g < _g1) {
		var i = _g++;
		str += flixel_addons_ui_U.FU(arr[i]);
		if(i != arr.length - 1) {
			str += " ";
		}
	}
	return str;
};
flixel_addons_ui_U.xml_blend = function(x,att) {
	return flixel_addons_ui_U.blendModeFromString(flixel_addons_ui_U.xml_str(x,att,true,"normal"));
};
flixel_addons_ui_U.blendModeFromString = function(str) {
	str = str.toLowerCase();
	switch(str) {
	case "add":
		return 0;
	case "alpha":
		return 1;
	case "darken":
		return 2;
	case "difference":
		return 3;
	case "erase":
		return 4;
	case "hardlight":
		return 5;
	case "invert":
		return 6;
	case "layer":
		return 7;
	case "lighten":
		return 8;
	case "multiply":
		return 9;
	case "normal":
		return 10;
	case "overlay":
		return 11;
	case "screen":
		return 12;
	case "subtract":
		return 14;
	default:
		return 10;
	}
};
flixel_addons_ui_U.scaleTileBmp = function(orig_id,scale,origW,origH,W,H,smooth) {
	if(smooth == null) {
		smooth = true;
	}
	if(H == null) {
		H = -1;
	}
	if(W == null) {
		W = -1;
	}
	var orig = openfl_utils_Assets.getBitmapData(orig_id,false);
	if(orig == null) {
		if(flixel_FlxG.bitmap._cache.h[orig_id] != null) {
			orig = flixel_FlxG.bitmap._cache.h[orig_id].bitmap;
		} else {
			return null;
		}
	}
	var widthInTiles = orig.width / origW | 0;
	var heightInTiles = orig.height / origH | 0;
	if(W == -1) {
		W = origW * scale | 0;
	}
	if(H == -1) {
		H = origH * scale | 0;
		scale = H / origH;
	}
	if(Math.abs(scale - 1.0) > 0.001) {
		var scaled = new openfl_display_BitmapData(W * widthInTiles | 0,H * heightInTiles | 0,true,0);
		var rect = new openfl_geom_Rectangle();
		var pt = new openfl_geom_Point();
		var matrix = new openfl_geom_Matrix();
		matrix.scale(scale,scale);
		var _g = 0;
		var _g1 = heightInTiles;
		while(_g < _g1) {
			var tiley = _g++;
			var _g2 = 0;
			var _g3 = widthInTiles;
			while(_g2 < _g3) {
				var tilex = _g2++;
				var tile = new openfl_display_BitmapData(origW,origH,true,0);
				rect.setTo(tilex * origW,tiley * origH,origW,origH);
				pt.setTo(0,0);
				tile.copyPixels(orig,rect,pt);
				var scaleTile = new openfl_display_BitmapData(W,H,true,0);
				scaleTile.draw(tile,matrix,null,null,null,smooth);
				pt.setTo(tilex * W,tiley * H);
				scaled.copyPixels(scaleTile,scaleTile.rect,pt);
			}
		}
		return scaled;
	} else {
		return orig.clone();
	}
};
flixel_addons_ui_U.scaleAndStoreTileset = function(orig_id,scale,OrigW,OrigH,TileW,TileH,Smooth) {
	if(Smooth == null) {
		Smooth = true;
	}
	if(TileH == null) {
		TileH = -1;
	}
	if(TileW == null) {
		TileW = -1;
	}
	var assetKey = orig_id + "_x" + scale;
	if(flixel_FlxG.bitmap._cache.h[assetKey] != null == false) {
		var bmp = flixel_addons_ui_U.scaleTileBmp(orig_id,scale,OrigW,OrigH,TileW,TileH,Smooth);
		flixel_FlxG.bitmap.add(bmp,false,assetKey);
	}
	return assetKey;
};
flixel_addons_ui_U.loadScaledImage = function(src,W,H,smooth) {
	if(smooth == null) {
		smooth = true;
	}
	var bmpSrc = flixel_addons_ui_U.gfx(src);
	var testBmp = openfl_utils_Assets.getBitmapData(bmpSrc,false);
	if(testBmp != null) {
		if(W < 0) {
			W = testBmp.width;
		}
		if(H < 0) {
			H = testBmp.height;
		}
		var diff = Math.abs(W - testBmp.width) + Math.abs(H - testBmp.height);
		if(diff > 0.01) {
			var scaleKey = bmpSrc + "_" + (W | 0) + "x" + (H | 0);
			if(flixel_FlxG.bitmap._cache.h[scaleKey] == null) {
				var scaledBmp = new openfl_display_BitmapData(W | 0,H | 0,true,0);
				var m = flixel_addons_ui_U.getMatrix();
				m.identity();
				m.scale(W / testBmp.width,H / testBmp.height);
				scaledBmp.draw(testBmp,m,null,null,null,smooth);
				flixel_FlxG.bitmap.add(scaledBmp,true,scaleKey);
			}
			return scaleKey;
		} else {
			return bmpSrc;
		}
	}
	return null;
};
flixel_addons_ui_U.loadImageScaleToHeight = function(src,Height,Smooth,checkFlxBitmap) {
	if(checkFlxBitmap == null) {
		checkFlxBitmap = false;
	}
	if(Smooth == null) {
		Smooth = true;
	}
	var bmpSrc = flixel_addons_ui_U.gfx(src);
	var testBmp = null;
	if(!checkFlxBitmap) {
		testBmp = openfl_utils_Assets.getBitmapData(bmpSrc,false);
	} else {
		var flximg = flixel_FlxG.bitmap._cache.h[bmpSrc];
		testBmp = flximg != null ? flximg.bitmap : null;
	}
	var ratio = testBmp != null ? Height / testBmp.height : 1.0;
	return flixel_addons_ui_U.loadMonoScaledImage(bmpSrc,ratio,Smooth,checkFlxBitmap);
};
flixel_addons_ui_U.loadMonoScaledImage = function(src,Scale,smooth,checkFlxBitmap,fixAlphaChannel) {
	if(fixAlphaChannel == null) {
		fixAlphaChannel = false;
	}
	if(checkFlxBitmap == null) {
		checkFlxBitmap = false;
	}
	if(smooth == null) {
		smooth = true;
	}
	var bmpSrc = flixel_addons_ui_U.gfx(src);
	var testBmp = null;
	if(!checkFlxBitmap) {
		testBmp = openfl_utils_Assets.getBitmapData(bmpSrc,false);
		if(testBmp == null) {
			testBmp = openfl_utils_Assets.getBitmapData(bmpSrc,true);
		}
	} else {
		var flximg = flixel_FlxG.bitmap._cache.h[bmpSrc];
		testBmp = flximg != null ? flximg.bitmap : null;
	}
	if(testBmp != null) {
		if(Scale <= 0) {
			throw haxe_Exception.thrown("Error! Scale must be positive & > 0! (Scale was = " + Scale + ")");
		}
		if(Math.abs(Scale - 1.00) > 0.001) {
			var scaleKey = bmpSrc + "_ScaleX" + Scale;
			if(flixel_FlxG.bitmap._cache.h[scaleKey] == null) {
				var scaledBmp = new openfl_display_BitmapData(testBmp.width * Scale | 0,testBmp.height * Scale | 0,true,0);
				var m = flixel_addons_ui_U.getMatrix();
				m.identity();
				m.scale(Scale,Scale);
				scaledBmp.draw(testBmp,m,null,null,null,smooth);
				if(fixAlphaChannel) {
					var black = new openfl_display_BitmapData(scaledBmp.width,scaledBmp.height,true,-16777216);
					black.copyPixels(scaledBmp,scaledBmp.rect,new openfl_geom_Point(),null,null,true);
					black.copyChannel(scaledBmp,scaledBmp.rect,new openfl_geom_Point(0,0),8,8);
					var temp = scaledBmp;
					scaledBmp = black;
					temp.dispose();
				}
				flixel_FlxG.bitmap.add(scaledBmp,true,scaleKey);
			}
			return scaleKey;
		} else {
			flixel_FlxG.bitmap.add(testBmp,false,bmpSrc);
			return bmpSrc;
		}
	}
	return null;
};
flixel_addons_ui_U.gfx = function(id,dir1,dir2,dir3,dir4,suppressError) {
	if(suppressError == null) {
		suppressError = false;
	}
	if(dir4 == null) {
		dir4 = "";
	}
	if(dir3 == null) {
		dir3 = "";
	}
	if(dir2 == null) {
		dir2 = "";
	}
	if(dir1 == null) {
		dir1 = "";
	}
	if(id != null) {
		id = id.toLowerCase();
	}
	var prefix = "";
	if(dir1 != "") {
		prefix = dir1 + "/";
		if(dir2 != "") {
			prefix += dir2 + "/";
			if(dir3 != "") {
				prefix += dir3 + "/";
				if(dir4 != "") {
					prefix += dir4 + "/";
				}
			}
		}
	}
	if(prefix != "") {
		id = prefix + id;
	}
	if(id.indexOf("raw:") != 0) {
		id = StringTools.replace(id,"-","_");
	}
	return flixel_addons_ui_U.get_gfx(id);
};
flixel_addons_ui_U.bmpToArrayIntLayer = function(color_index,bd) {
	var p;
	var arr = [];
	var w = bd.width;
	var h = bd.height;
	var _g = 0;
	var _g1 = h;
	while(_g < _g1) {
		var r = _g++;
		var _g2 = 0;
		var _g3 = w;
		while(_g2 < _g3) {
			var c = _g2++;
			p = bd.getPixel(c,r);
			if(p == color_index) {
				p = 1;
			} else {
				p = 0;
			}
			arr.push(p);
		}
	}
	return arr;
};
flixel_addons_ui_U.bmpToCSVLayer = function(color_index,bd) {
	var p;
	var csv = "";
	var w = bd.width;
	var h = bd.height;
	var _g = 0;
	var _g1 = h;
	while(_g < _g1) {
		var r = _g++;
		var _g2 = 0;
		var _g3 = w;
		while(_g2 < _g3) {
			var c = _g2++;
			p = bd.getPixel(c,r);
			if(p == color_index) {
				p = 1;
			} else {
				p = 0;
			}
			if(c == 0) {
				if(r == 0) {
					csv += p;
				} else {
					csv += "\n" + p;
				}
			} else {
				csv += ", " + p;
			}
		}
	}
	return csv;
};
flixel_addons_ui_U.get_gfx = function(str) {
	var return_str = "";
	var suffix = "";
	if(str.indexOf(".jpg") != -1) {
		suffix = ".jpg";
	} else {
		suffix = ".png";
	}
	if(str != null && str.length > 4 && str.indexOf(suffix) != -1) {
		str = HxOverrides.substr(str,0,str.length - 4);
	}
	if(str.indexOf("raw:") == 0 || str.indexOf("RAW:") == 0) {
		str = HxOverrides.substr(str,4,str.length - 4);
		return_str = str + suffix;
	}
	if(str != null && str.indexOf("assets/gfx/") == 0) {
		return_str = str + suffix;
	}
	if(return_str == "") {
		return_str = "assets/gfx/" + str + suffix;
	}
	if(return_str.indexOf(".stitch.txt" + suffix) != -1) {
		return_str = StringTools.replace(return_str,".stitch.txt" + suffix,".stitch.txt");
	}
	return return_str;
};
flixel_addons_ui_U.sfx = function(str) {
	var extension = "";
	extension = ".ogg";
	if(str.indexOf("RAW:") == 0) {
		str = HxOverrides.substr(str,4,str.length - 4);
		return str + extension;
	}
	return "assets/sfx/" + str + extension;
};
flixel_addons_ui_U.intStr_to_arr = function(str) {
	var arr = str.split(",");
	var str_arr = [];
	var _g = 0;
	while(_g < arr.length) {
		var s = arr[_g];
		++_g;
		if(s.indexOf("-") == -1) {
			str_arr.push(Std.parseInt(s));
		} else {
			var range = str.split("-");
			var lo = -1;
			var hi = -1;
			if(range != null && range.length == 2) {
				lo = Std.parseInt(range[0]);
				hi = Std.parseInt(range[1]) + 1;
				if(lo >= 0 && hi > lo) {
					var _g1 = lo;
					var _g2 = hi;
					while(_g1 < _g2) {
						var i = _g1++;
						str_arr.push(i);
					}
				}
			}
		}
	}
	return str_arr;
};
flixel_addons_ui_U.intStr_to_arrStr = function(str) {
	var arr = str.split(",");
	var str_arr = [];
	var _g = 0;
	while(_g < arr.length) {
		var s = arr[_g];
		++_g;
		if(s.indexOf("-") == -1) {
			str_arr.push(Std.string(Std.parseInt(s)));
		} else {
			var range = str.split("-");
			var lo = -1;
			var hi = -1;
			if(range != null && range.length == 2) {
				lo = Std.parseInt(range[0]);
				hi = Std.parseInt(range[1]) + 1;
				if(lo >= 0 && hi > lo) {
					var _g1 = lo;
					var _g2 = hi;
					while(_g1 < _g2) {
						var i = _g1++;
						str_arr.push(i == null ? "null" : "" + i);
					}
				}
			}
		}
	}
	return str_arr;
};
flixel_addons_ui_U.dirStr = function(XX,YY) {
	var str = "";
	if(XX == 0) {
		if(YY == -1) {
			str = "N";
		} else if(YY == 1) {
			str = "S";
		} else if(YY == 0) {
			str = "NONE";
		}
	} else if(XX == 1) {
		if(YY == -1) {
			str = "NE";
		} else if(YY == 1) {
			str = "SE";
		} else if(YY == 0) {
			str = "E";
		}
	} else if(XX == -1) {
		if(YY == -1) {
			str = "NW";
		} else if(YY == 1) {
			str = "SW";
		} else if(YY == 0) {
			str = "W";
		}
	} else {
		str = "NONE";
	}
	return str;
};
flixel_addons_ui_U.obj_direction = function(a,b) {
	var dx = a.x - b.x;
	var dy = a.y - b.y;
	var X = dx / Math.abs(dx) | 0;
	var Y = dy / Math.abs(dy) | 0;
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	var ipt = point;
	return ipt;
};
flixel_addons_ui_U.circle_test = function(x1,y1,r1,x2,y2,r2) {
	var dx = x1 - x2;
	var dy = y1 - y2;
	var d2 = dx * dx + dy * dy;
	var dr2 = r1 * r1 + r2 * r2;
	return d2 <= dr2;
};
flixel_addons_ui_U.point_circle_test = function(x,y,cx,cy,r) {
	var dx = x - cx;
	var dy = y - cy;
	var d2 = dx * dx + dy * dy;
	return d2 <= r * r;
};
flixel_addons_ui_U.aabb_test_mult = function(a,b,multA,multB) {
	if(multB == null) {
		multB = 1;
	}
	if(multA == null) {
		multA = 1;
	}
	var extra = a.get_width() * multA;
	var diff = (extra - a.get_width()) / 2;
	var ax1 = a.x - diff;
	var ax2 = a.x + a.get_width() + diff;
	extra = a.get_height() * multA;
	diff = (extra - a.get_height()) / 2;
	var ay1 = a.y - diff;
	var ay2 = a.y + a.get_height() + diff;
	extra = b.get_width() * multB;
	diff = (extra - b.get_width()) / 2;
	var bx1 = b.x - diff;
	var bx2 = b.x + b.get_width() + diff;
	extra = b.get_height() * multB;
	diff = (extra - b.get_height()) / 2;
	var by1 = b.y - diff;
	var by2 = b.y + b.get_height() + diff;
	if(Math.abs(bx2 + bx1 - (ax2 + ax1)) <= bx2 - bx1 + ax2 - ax1) {
		return Math.abs(by2 + by1 - (ay2 + ay1)) <= by2 - by1 + ay2 - ay1;
	} else {
		return false;
	}
};
flixel_addons_ui_U.aabb_test = function(a,b) {
	var ax1 = a.x;
	var ax2 = a.x + a.get_width();
	var ay1 = a.y;
	var ay2 = a.y + a.get_height();
	var bx1 = b.x;
	var bx2 = b.x + b.get_width();
	var by1 = b.y;
	var by2 = b.y + b.get_height();
	if(Math.abs(bx2 + bx1 - (ax2 + ax1)) <= bx2 - bx1 + ax2 - ax1) {
		return Math.abs(by2 + by1 - (ay2 + ay1)) <= by2 - by1 + ay2 - ay1;
	} else {
		return false;
	}
};
flixel_addons_ui_U.bitStringDimensions = function(str) {
	var pt = new openfl_geom_Point(0,0);
	var arr = str.split("\n");
	if(arr != null && arr.length > 1) {
		pt.y = arr.length;
		if(arr[0] != null && arr[0].length > 1) {
			pt.x = arr[0].length;
		}
	}
	return pt;
};
flixel_addons_ui_U.splitBitString = function(str) {
	var result = [];
	var arr = str.split("\n");
	var i = 0;
	while(i < arr.length) {
		var len = arr[i].length;
		var j = 0;
		while(j < len) {
			var char = arr[i].charAt(j);
			var num = Std.parseInt(char);
			result.push(num);
			++j;
		}
		++i;
	}
	return result;
};
flixel_addons_ui_U.getShortTextFromFlxKeyText = function(str) {
	str = str.toUpperCase();
	switch(str) {
	case "ACCENT":
		return "`";
	case "ALT":
		return "AT";
	case "BACKSLASH":
		return "\\";
	case "BACKSPACE":
		return "BK";
	case "CAPSLOCK":
		return "CP";
	case "COMMA":
		return ",";
	case "CONTROL":
		return "CT";
	case "DELETE":
		return "DE";
	case "DOWN":
		return "DN";
	case "EIGHT":
		return "8";
	case "END":
		return "ED";
	case "ENTER":
		return "EN";
	case "EQUALS":
		return "=";
	case "ESC":case "ESCAPE":
		return "EC";
	case "FIVE":
		return "5";
	case "FOUR":
		return "4";
	case "HOME":
		return "HM";
	case "INSERT":
		return "IN";
	case "LBRACKET":
		return "[";
	case "LEFT":
		return "LT";
	case "MINUS":
		return "-";
	case "NINE":
		return "9";
	case "NULL":
		return " ";
	case "NUM0":
		return "N0";
	case "NUM1":
		return "N1";
	case "NUM2":
		return "N2";
	case "NUM3":
		return "N3";
	case "NUM4":
		return "N4";
	case "NUM5":
		return "N5";
	case "NUM6":
		return "N6";
	case "NUM7":
		return "N7";
	case "NUM8":
		return "N8";
	case "NUM9":
		return "N9";
	case "NUMDEC":
		return "N.";
	case "NUMDIV":
		return "N/";
	case "NUMLOCK":
		return "NM";
	case "NUMMINUS":
		return "N-";
	case "NUMMULT":
		return "N*";
	case "NUMPLUS":
		return "N+";
	case "ONE":
		return "1";
	case "PAGEDOWN":
		return "PD";
	case "PAGEUP":
		return "PU";
	case "PAUSEBREAK":
		return "PB";
	case "PERIOD":
		return ".";
	case "PLUS":
		return "+";
	case "QUOTE":
		return "\"";
	case "RBRACKET":
		return "]";
	case "RIGHT":
		return "RT";
	case "SCROLLLOCK":
		return "SC";
	case "SEMICOLON":
		return ";";
	case "SEVEN":
		return "7";
	case "SHIFT":
		return "SH";
	case "SIX":
		return "6";
	case "SLASH":
		return "/";
	case "SPACE":
		return "SP";
	case "TAB":
		return "TB";
	case "TEN":
		return "10";
	case "THREE":
		return "3";
	case "TWO":
		return "2";
	case "UP":
		return "UP";
	case "ZERO":
		return "0";
	default:
		return str;
	}
};
flixel_addons_ui_U.getFlxKeyTextFromShortText = function(str) {
	str = str.toUpperCase();
	switch(str) {
	case "":
		return " ";
	case "\"":
		return "QUOTE";
	case "*":
		return "NUMMULT";
	case "+":
		return "PLUS";
	case ",":
		return "COMMA";
	case "-":
		return "MINUS";
	case ".":
		return "PERIOD";
	case "/":
		return "SLASH";
	case "0":
		return "ZERO";
	case "1":
		return "ONE";
	case "10":
		return "TEN";
	case "2":
		return "TWO";
	case "3":
		return "THREE";
	case "4":
		return "FOUR";
	case "5":
		return "FIVE";
	case "6":
		return "SIX";
	case "7":
		return "SEVEN";
	case "8":
		return "EIGHT";
	case "9":
		return "NINE";
	case ";":
		return "SEMICOLON";
	case "=":
		return "EQUALS";
	case "AT":
		return "ALT";
	case "BK":
		return "BACKSPACE";
	case "CP":
		return "CAPSLOCK";
	case "CT":
		return "CONTROL";
	case "DE":
		return "DELETE";
	case "DN":
		return "DOWN";
	case "EC":
		return "ESCAPE";
	case "ED":
		return "END";
	case "EN":
		return "ENTER";
	case "HM":
		return "HOME";
	case "IN":
		return "INSERT";
	case "LT":
		return "LEFT";
	case "N+":
		return "NUMPLUS";
	case "N-":
		return "NUMMINUS";
	case "N.":
		return "NUMDEC";
	case "N/":
		return "NUMDIV";
	case "N0":
		return "NUM0";
	case "N1":
		return "NUM1";
	case "N2":
		return "NUM2";
	case "N3":
		return "NUM3";
	case "N4":
		return "NUM4";
	case "N5":
		return "NUM5";
	case "N6":
		return "NUM6";
	case "N7":
		return "NUM7";
	case "N8":
		return "NUM8";
	case "N9":
		return "NUM9";
	case "NM":
		return "NUMLOCK";
	case "PB":
		return "PAUSEBREAK";
	case "PD":
		return "PAGEDOWN";
	case "PU":
		return "PAGEUP";
	case "RT":
		return "RIGHT";
	case "SC":
		return "SCROLLLOCK";
	case "SH":
		return "SHIFT";
	case "SP":
		return "SPACE";
	case "TB":
		return "TAB";
	case "UP":
		return "UP";
	case "[":
		return "LBRACKET";
	case "\\":
		return "BACKSLASH";
	case "]":
		return "RBRACKET";
	case "`":
		return "ACCENT";
	default:
		return str;
	}
};
flixel_addons_ui_U.formatXml = function(_xml) {
	var s = haxe_xml_Printer.print(_xml);
	var r = new EReg(">[^`<]*<","g");
	s = s.replace(r.r,">___SPLITHERE___<");
	r = new EReg("___SPLITHERE___","g");
	var split = r.split(s);
	s = "";
	var childDepht = 0;
	var whiteSpace = "\t";
	var _g = 0;
	while(_g < split.length) {
		var str = split[_g];
		++_g;
		var _g1 = 0;
		var _g2 = childDepht;
		while(_g1 < _g2) {
			var i = _g1++;
			s += whiteSpace;
		}
		if(str.charAt(0) == "<" && str.charAt(1) == "/") {
			--childDepht;
			s = HxOverrides.substr(s,0,s.length - whiteSpace.length);
		} else if(str.charAt(str.length - 1) == ">" && str.charAt(str.length - 2) != "/" && str.charAt(str.length - 2) != "-") {
			++childDepht;
		}
		s += str + "\n";
	}
	return s;
};
flixel_addons_ui_U.strCase = function(str,code) {
	switch(code) {
	case "fu":
		return flixel_addons_ui_U.FU(str);
	case "fu_":
		return flixel_addons_ui_U.FU_(str);
	case "l":
		return str.toLowerCase();
	case "u":
		return str.toUpperCase();
	default:
		return str;
	}
};
flixel_addons_ui_U.unparentXML = function(f) {
	if(f.parent != null) {
		f.parent.removeChild(f);
	}
	return f;
};
flixel_addons_ui_U.setButtonLabel = function(btn,str) {
	if(btn == null) {
		return;
	}
	if(((btn) instanceof flixel_addons_ui_FlxUIButton)) {
		(js_Boot.__cast(btn , flixel_addons_ui_FlxUIButton)).label.set_text(str);
	} else if(((btn) instanceof flixel_addons_ui_FlxUISpriteButton)) {
		var fuisb = btn;
		if(fuisb.label == null) {
			return;
		}
		if(((fuisb.label) instanceof flixel_group_FlxTypedSpriteGroup)) {
			var g = fuisb.label;
			if(g.group.members == null) {
				return;
			}
			var _g = 0;
			var _g1 = g.group.members;
			while(_g < _g1.length) {
				var sprite = _g1[_g];
				++_g;
				if(sprite == null) {
					continue;
				}
				if(((sprite) instanceof flixel_text_FlxText)) {
					(js_Boot.__cast(sprite , flixel_text_FlxText)).set_text(str);
					return;
				}
			}
		}
	}
};
flixel_addons_ui_U.getMatrix = function() {
	if(flixel_addons_ui_U._matrix == null) {
		flixel_addons_ui_U._matrix = new openfl_geom_Matrix();
	}
	return flixel_addons_ui_U._matrix;
};
var flixel_addons_ui_interfaces_IFireTongue = function() { };
$hxClasses["flixel.addons.ui.interfaces.IFireTongue"] = flixel_addons_ui_interfaces_IFireTongue;
flixel_addons_ui_interfaces_IFireTongue.__name__ = "flixel.addons.ui.interfaces.IFireTongue";
flixel_addons_ui_interfaces_IFireTongue.__isInterface__ = true;
flixel_addons_ui_interfaces_IFireTongue.prototype = {
	get: null
	,getFont: null
	,getFontSize: null
	,locale: null
	,__class__: flixel_addons_ui_interfaces_IFireTongue
};
var flixel_animation_FlxBaseAnimation = function(Parent,Name) {
	this.curIndex = 0;
	this.parent = Parent;
	this.name = Name;
};
$hxClasses["flixel.animation.FlxBaseAnimation"] = flixel_animation_FlxBaseAnimation;
flixel_animation_FlxBaseAnimation.__name__ = "flixel.animation.FlxBaseAnimation";
flixel_animation_FlxBaseAnimation.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_animation_FlxBaseAnimation.prototype = {
	parent: null
	,name: null
	,curIndex: null
	,set_curIndex: function(Value) {
		this.curIndex = Value;
		if(this.parent != null && this.parent._curAnim == this) {
			this.parent.set_frameIndex(Value);
		}
		return Value;
	}
	,destroy: function() {
		this.parent = null;
		this.name = null;
	}
	,update: function(elapsed) {
	}
	,clone: function(Parent) {
		return null;
	}
	,__class__: flixel_animation_FlxBaseAnimation
	,__properties__: {set_curIndex:"set_curIndex"}
};
var flixel_animation_FlxAnimation = function(Parent,Name,Frames,FrameRate,Looped,FlipX,FlipY) {
	if(FlipY == null) {
		FlipY = false;
	}
	if(FlipX == null) {
		FlipX = false;
	}
	if(Looped == null) {
		Looped = true;
	}
	if(FrameRate == null) {
		FrameRate = 0;
	}
	this._frameTimer = 0;
	this.flipY = false;
	this.flipX = false;
	this.reversed = false;
	this.looped = true;
	this.paused = true;
	this.finished = true;
	this.delay = 0;
	this.curFrame = 0;
	flixel_animation_FlxBaseAnimation.call(this,Parent,Name);
	this.set_frameRate(FrameRate);
	this.frames = Frames;
	this.looped = Looped;
	this.flipX = FlipX;
	this.flipY = FlipY;
};
$hxClasses["flixel.animation.FlxAnimation"] = flixel_animation_FlxAnimation;
flixel_animation_FlxAnimation.__name__ = "flixel.animation.FlxAnimation";
flixel_animation_FlxAnimation.__super__ = flixel_animation_FlxBaseAnimation;
flixel_animation_FlxAnimation.prototype = $extend(flixel_animation_FlxBaseAnimation.prototype,{
	frameRate: null
	,curFrame: null
	,delay: null
	,finished: null
	,paused: null
	,looped: null
	,reversed: null
	,flipX: null
	,flipY: null
	,frames: null
	,_frameTimer: null
	,destroy: function() {
		this.frames = null;
		this.name = null;
		flixel_animation_FlxBaseAnimation.prototype.destroy.call(this);
	}
	,play: function(Force,Reversed,Frame) {
		if(Frame == null) {
			Frame = 0;
		}
		if(Reversed == null) {
			Reversed = false;
		}
		if(Force == null) {
			Force = false;
		}
		if(!Force && !this.finished && this.reversed == Reversed) {
			this.paused = false;
			this.finished = false;
			return;
		}
		this.reversed = Reversed;
		this.paused = false;
		this._frameTimer = 0;
		this.finished = this.delay == 0;
		var maxFrameIndex = this.frames.length - 1;
		if(Frame < 0) {
			this.set_curFrame(flixel_FlxG.random.int(0,maxFrameIndex));
		} else {
			if(Frame > maxFrameIndex) {
				Frame = maxFrameIndex;
			}
			if(this.reversed) {
				Frame = maxFrameIndex - Frame;
			}
			this.set_curFrame(Frame);
		}
		if(this.finished) {
			var _this = this.parent;
			if(_this.finishCallback != null) {
				_this.finishCallback(this.name);
			}
		}
	}
	,restart: function() {
		this.play(true,this.reversed);
	}
	,stop: function() {
		this.finished = true;
		this.paused = true;
	}
	,reset: function() {
		this.stop();
		this.set_curFrame(this.reversed ? this.frames.length - 1 : 0);
	}
	,finish: function() {
		this.stop();
		this.set_curFrame(this.reversed ? 0 : this.frames.length - 1);
	}
	,pause: function() {
		this.paused = true;
	}
	,resume: function() {
		this.paused = false;
	}
	,reverse: function() {
		this.reversed = !this.reversed;
		if(this.finished) {
			this.play(false,this.reversed);
		}
	}
	,update: function(elapsed) {
		if(this.delay == 0 || this.finished || this.paused) {
			return;
		}
		this._frameTimer += elapsed;
		while(this._frameTimer > this.delay && !this.finished) {
			this._frameTimer -= this.delay;
			if(this.reversed) {
				if(this.looped && this.curFrame == 0) {
					this.set_curFrame(this.frames.length - 1);
				} else {
					var _g = this;
					_g.set_curFrame(_g.curFrame - 1);
				}
			} else if(this.looped && this.curFrame == this.frames.length - 1) {
				this.set_curFrame(0);
			} else {
				var _g1 = this;
				_g1.set_curFrame(_g1.curFrame + 1);
			}
		}
	}
	,clone: function(Parent) {
		return new flixel_animation_FlxAnimation(Parent,this.name,this.frames,this.frameRate,this.looped,this.flipX,this.flipY);
	}
	,set_frameRate: function(value) {
		this.delay = 0;
		this.frameRate = value;
		if(value > 0) {
			this.delay = 1.0 / value;
		}
		return value;
	}
	,set_curFrame: function(Frame) {
		var maxFrameIndex = this.frames.length - 1;
		var tempFrame = this.reversed ? maxFrameIndex - Frame : Frame;
		if(tempFrame >= 0) {
			if(!this.looped && Frame > maxFrameIndex) {
				this.finished = true;
				this.curFrame = this.reversed ? 0 : maxFrameIndex;
			} else {
				this.curFrame = Frame;
			}
		} else {
			this.curFrame = flixel_FlxG.random.int(0,maxFrameIndex);
		}
		this.set_curIndex(this.frames[this.curFrame]);
		if(this.finished && this.parent != null) {
			var _this = this.parent;
			if(_this.finishCallback != null) {
				_this.finishCallback(this.name);
			}
		}
		return Frame;
	}
	,get_numFrames: function() {
		return this.frames.length;
	}
	,__class__: flixel_animation_FlxAnimation
	,__properties__: $extend(flixel_animation_FlxBaseAnimation.prototype.__properties__,{get_numFrames:"get_numFrames",set_curFrame:"set_curFrame",set_frameRate:"set_frameRate"})
});
var flixel_animation_FlxAnimationController = function(Sprite) {
	this.frameIndex = -1;
	this._sprite = Sprite;
	this._animations = new haxe_ds_StringMap();
};
$hxClasses["flixel.animation.FlxAnimationController"] = flixel_animation_FlxAnimationController;
flixel_animation_FlxAnimationController.__name__ = "flixel.animation.FlxAnimationController";
flixel_animation_FlxAnimationController.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_animation_FlxAnimationController.prototype = {
	frameIndex: null
	,callback: null
	,finishCallback: null
	,_sprite: null
	,_curAnim: null
	,_animations: null
	,_prerotated: null
	,update: function(elapsed) {
		if(this._curAnim != null) {
			this._curAnim.update(elapsed);
		} else if(this._prerotated != null) {
			this._prerotated.set_angle(this._sprite.angle);
		}
	}
	,copyFrom: function(controller) {
		this.destroyAnimations();
		var anim = haxe_ds_StringMap.valueIterator(controller._animations.h);
		while(anim.hasNext()) {
			var anim1 = anim.next();
			this.add(anim1.name,anim1.frames,anim1.frameRate,anim1.looped,anim1.flipX,anim1.flipY);
		}
		if(controller._prerotated != null) {
			this.createPrerotated();
		}
		if(controller.get_name() != null) {
			this.set_name(controller.get_name());
		}
		this.set_frameIndex(controller.frameIndex);
		return this;
	}
	,createPrerotated: function(Controller) {
		this.destroyAnimations();
		if(Controller == null) {
			Controller = this;
		}
		this._prerotated = new flixel_animation_FlxPrerotatedAnimation(Controller,Controller._sprite.bakedRotationAngle);
		this._prerotated.set_angle(this._sprite.angle);
	}
	,destroyAnimations: function() {
		this.clearAnimations();
		this.clearPrerotated();
	}
	,destroy: function() {
		this.destroyAnimations();
		this._animations = null;
		this.callback = null;
		this._sprite = null;
	}
	,clearPrerotated: function() {
		if(this._prerotated != null) {
			this._prerotated.destroy();
		}
		this._prerotated = null;
	}
	,clearAnimations: function() {
		if(this._animations != null) {
			var anim;
			var key = haxe_ds_StringMap.keysIterator(this._animations.h);
			while(key.hasNext()) {
				var key1 = key.next();
				anim = this._animations.h[key1];
				if(anim != null) {
					anim.destroy();
				}
			}
		}
		this._animations = new haxe_ds_StringMap();
		this._curAnim = null;
	}
	,add: function(Name,Frames,FrameRate,Looped,FlipX,FlipY) {
		if(FlipY == null) {
			FlipY = false;
		}
		if(FlipX == null) {
			FlipX = false;
		}
		if(Looped == null) {
			Looped = true;
		}
		if(FrameRate == null) {
			FrameRate = 30;
		}
		var framesToAdd = Frames;
		var numFrames = framesToAdd.length - 1;
		var i = numFrames;
		while(i >= 0) {
			if(framesToAdd[i] >= this._sprite.numFrames) {
				if(framesToAdd == Frames) {
					framesToAdd = Frames.slice();
				}
				framesToAdd.splice(i,1);
			}
			--i;
		}
		if(framesToAdd.length > 0) {
			var anim = new flixel_animation_FlxAnimation(this,Name,framesToAdd,FrameRate,Looped,FlipX,FlipY);
			this._animations.h[Name] = anim;
		}
	}
	,remove: function(Name) {
		var anim = this._animations.h[Name];
		if(anim != null) {
			var _this = this._animations;
			if(Object.prototype.hasOwnProperty.call(_this.h,Name)) {
				delete(_this.h[Name]);
			}
			anim.destroy();
		}
	}
	,append: function(Name,Frames) {
		var anim = this._animations.h[Name];
		if(anim == null) {
			return;
		}
		var numFrames = Frames.length - 1;
		var i = numFrames;
		while(i >= 0) {
			if(Frames[numFrames - i] < this._sprite.numFrames) {
				anim.frames.push(Frames[numFrames - i]);
			}
			--i;
		}
	}
	,addByNames: function(Name,FrameNames,FrameRate,Looped,FlipX,FlipY) {
		if(FlipY == null) {
			FlipY = false;
		}
		if(FlipX == null) {
			FlipX = false;
		}
		if(Looped == null) {
			Looped = true;
		}
		if(FrameRate == null) {
			FrameRate = 30;
		}
		if(this._sprite.frames != null) {
			var indices = [];
			this.byNamesHelper(indices,FrameNames);
			if(indices.length > 0) {
				var anim = new flixel_animation_FlxAnimation(this,Name,indices,FrameRate,Looped,FlipX,FlipY);
				this._animations.h[Name] = anim;
			}
		}
	}
	,appendByNames: function(Name,FrameNames) {
		var anim = this._animations.h[Name];
		if(anim == null) {
			return;
		}
		if(this._sprite.frames != null) {
			this.byNamesHelper(anim.frames,FrameNames);
		}
	}
	,addByStringIndices: function(Name,Prefix,Indices,Postfix,FrameRate,Looped,FlipX,FlipY) {
		if(FlipY == null) {
			FlipY = false;
		}
		if(FlipX == null) {
			FlipX = false;
		}
		if(Looped == null) {
			Looped = true;
		}
		if(FrameRate == null) {
			FrameRate = 30;
		}
		if(this._sprite.frames != null) {
			var frameIndices = [];
			this.byStringIndicesHelper(frameIndices,Prefix,Indices,Postfix);
			if(frameIndices.length > 0) {
				var anim = new flixel_animation_FlxAnimation(this,Name,frameIndices,FrameRate,Looped,FlipX,FlipY);
				this._animations.h[Name] = anim;
			}
		}
	}
	,appendByStringIndices: function(Name,Prefix,Indices,Postfix) {
		var anim = this._animations.h[Name];
		if(anim == null) {
			return;
		}
		if(this._sprite.frames != null) {
			this.byStringIndicesHelper(anim.frames,Prefix,Indices,Postfix);
		}
	}
	,addByIndices: function(Name,Prefix,Indices,Postfix,FrameRate,Looped,FlipX,FlipY) {
		if(FlipY == null) {
			FlipY = false;
		}
		if(FlipX == null) {
			FlipX = false;
		}
		if(Looped == null) {
			Looped = true;
		}
		if(FrameRate == null) {
			FrameRate = 30;
		}
		if(this._sprite.frames != null) {
			var frameIndices = [];
			this.byIndicesHelper(frameIndices,Prefix,Indices,Postfix);
			if(frameIndices.length > 0) {
				var anim = new flixel_animation_FlxAnimation(this,Name,frameIndices,FrameRate,Looped,FlipX,FlipY);
				this._animations.h[Name] = anim;
			}
		}
	}
	,appendByIndices: function(Name,Prefix,Indices,Postfix) {
		var anim = this._animations.h[Name];
		if(anim == null) {
			return;
		}
		if(this._sprite.frames != null) {
			this.byIndicesHelper(anim.frames,Prefix,Indices,Postfix);
		}
	}
	,findSpriteFrame: function(Prefix,Index,Postfix) {
		var numFrames = this._sprite.numFrames;
		var flxFrames = this._sprite.frames.frames;
		var _g = 0;
		var _g1 = numFrames;
		while(_g < _g1) {
			var i = _g++;
			var name = flxFrames[i].name;
			if(StringTools.startsWith(name,Prefix) && StringTools.endsWith(name,Postfix)) {
				var index = Std.parseInt(name.substring(Prefix.length,name.length - Postfix.length));
				if(index != null && index == Index) {
					return i;
				}
			}
		}
		return -1;
	}
	,addByPrefix: function(Name,Prefix,FrameRate,Looped,FlipX,FlipY) {
		if(FlipY == null) {
			FlipY = false;
		}
		if(FlipX == null) {
			FlipX = false;
		}
		if(Looped == null) {
			Looped = true;
		}
		if(FrameRate == null) {
			FrameRate = 30;
		}
		if(this._sprite.frames != null) {
			var animFrames = [];
			this.findByPrefix(animFrames,Prefix);
			if(animFrames.length > 0) {
				var frameIndices = [];
				this.byPrefixHelper(frameIndices,animFrames,Prefix);
				if(frameIndices.length > 0) {
					var anim = new flixel_animation_FlxAnimation(this,Name,frameIndices,FrameRate,Looped,FlipX,FlipY);
					this._animations.h[Name] = anim;
				}
			}
		}
	}
	,appendByPrefix: function(Name,Prefix) {
		var anim = this._animations.h[Name];
		if(anim == null) {
			return;
		}
		if(this._sprite.frames != null) {
			var animFrames = [];
			this.findByPrefix(animFrames,Prefix);
			if(animFrames.length > 0) {
				this.byPrefixHelper(anim.frames,animFrames,Prefix);
			}
		}
	}
	,play: function(AnimName,Force,Reversed,Frame) {
		if(Frame == null) {
			Frame = 0;
		}
		if(Reversed == null) {
			Reversed = false;
		}
		if(Force == null) {
			Force = false;
		}
		if(AnimName == null) {
			if(this._curAnim != null) {
				this._curAnim.stop();
			}
			this._curAnim = null;
		}
		if(AnimName == null || this._animations.h[AnimName] == null) {
			return;
		}
		var oldFlipX = false;
		var oldFlipY = false;
		if(this._curAnim != null && AnimName != this._curAnim.name) {
			oldFlipX = this._curAnim.flipX;
			oldFlipY = this._curAnim.flipY;
			this._curAnim.stop();
		}
		this._curAnim = this._animations.h[AnimName];
		this._curAnim.play(Force,Reversed,Frame);
		if(oldFlipX != this._curAnim.flipX || oldFlipY != this._curAnim.flipY) {
			this._sprite.dirty = true;
		}
	}
	,reset: function() {
		if(this._curAnim != null) {
			this._curAnim.reset();
		}
	}
	,finish: function() {
		if(this._curAnim != null) {
			this._curAnim.finish();
		}
	}
	,stop: function() {
		if(this._curAnim != null) {
			this._curAnim.stop();
		}
	}
	,pause: function() {
		if(this._curAnim != null) {
			this._curAnim.pause();
		}
	}
	,resume: function() {
		if(this._curAnim != null) {
			this._curAnim.paused = false;
		}
	}
	,reverse: function() {
		if(this._curAnim != null) {
			this._curAnim.reverse();
		}
	}
	,getByName: function(Name) {
		return this._animations.h[Name];
	}
	,randomFrame: function() {
		if(this._curAnim != null) {
			this._curAnim.stop();
			this._curAnim = null;
		}
		this.set_frameIndex(flixel_FlxG.random.int(0,this._sprite.numFrames - 1));
	}
	,fireCallback: function() {
		if(this.callback != null) {
			var name = this._curAnim != null ? this._curAnim.name : null;
			var number = this._curAnim != null ? this._curAnim.curFrame : this.frameIndex;
			this.callback(name,number,this.frameIndex);
		}
	}
	,fireFinishCallback: function(name) {
		if(this.finishCallback != null) {
			this.finishCallback(name);
		}
	}
	,byNamesHelper: function(AddTo,FrameNames) {
		var _g = 0;
		while(_g < FrameNames.length) {
			var frameName = FrameNames[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this._sprite.frames.framesHash.h,frameName)) {
				var frameToAdd = this._sprite.frames.framesHash.h[frameName];
				AddTo.push(this._sprite.frames.frames.indexOf(frameToAdd));
			}
		}
	}
	,byStringIndicesHelper: function(AddTo,Prefix,Indices,Postfix) {
		var _g = 0;
		while(_g < Indices.length) {
			var index = Indices[_g];
			++_g;
			var name = Prefix + index + Postfix;
			if(Object.prototype.hasOwnProperty.call(this._sprite.frames.framesHash.h,name)) {
				var frameToAdd = this._sprite.frames.framesHash.h[name];
				AddTo.push(this._sprite.frames.frames.indexOf(frameToAdd));
			}
		}
	}
	,byIndicesHelper: function(AddTo,Prefix,Indices,Postfix) {
		var _g = 0;
		while(_g < Indices.length) {
			var index = Indices[_g];
			++_g;
			var indexToAdd = this.findSpriteFrame(Prefix,index,Postfix);
			if(indexToAdd != -1) {
				AddTo.push(indexToAdd);
			}
		}
	}
	,byPrefixHelper: function(AddTo,AnimFrames,Prefix) {
		var name = AnimFrames[0].name;
		var postIndex = name.indexOf(".",Prefix.length);
		var postFix = name.substring(postIndex == -1 ? name.length : postIndex,name.length);
		flixel_graphics_frames_FlxFrame.sort(AnimFrames,Prefix.length,postFix.length);
		var _g = 0;
		while(_g < AnimFrames.length) {
			var animFrame = AnimFrames[_g];
			++_g;
			AddTo.push(this._sprite.frames.frames.indexOf(animFrame));
		}
	}
	,findByPrefix: function(AnimFrames,Prefix) {
		var _g = 0;
		var _g1 = this._sprite.frames.frames;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			if(frame.name != null && StringTools.startsWith(frame.name,Prefix)) {
				AnimFrames.push(frame);
			}
		}
	}
	,set_frameIndex: function(Frame) {
		if(this._sprite.frames != null && this._sprite.numFrames > 0) {
			Frame %= this._sprite.numFrames;
			this._sprite.set_frame(this._sprite.frames.frames[Frame]);
			this.frameIndex = Frame;
			if(this.callback != null) {
				var name = this._curAnim != null ? this._curAnim.name : null;
				var number = this._curAnim != null ? this._curAnim.curFrame : this.frameIndex;
				this.callback(name,number,this.frameIndex);
			}
		}
		return this.frameIndex;
	}
	,get_frameName: function() {
		return this._sprite.frame.name;
	}
	,set_frameName: function(Value) {
		if(this._sprite.frames != null && Object.prototype.hasOwnProperty.call(this._sprite.frames.framesHash.h,Value)) {
			if(this._curAnim != null) {
				this._curAnim.stop();
				this._curAnim = null;
			}
			var frame = this._sprite.frames.framesHash.h[Value];
			if(frame != null) {
				this.set_frameIndex(this._sprite.frames.frames.indexOf(frame));
			}
		}
		return Value;
	}
	,get_name: function() {
		var animName = null;
		if(this._curAnim != null) {
			animName = this._curAnim.name;
		}
		return animName;
	}
	,set_name: function(AnimName) {
		this.play(AnimName);
		return AnimName;
	}
	,get_curAnim: function() {
		return this._curAnim;
	}
	,set_curAnim: function(Anim) {
		if(Anim != this._curAnim) {
			if(this._curAnim != null) {
				this._curAnim.stop();
			}
			if(Anim != null) {
				Anim.play();
			}
		}
		return this._curAnim = Anim;
	}
	,get_paused: function() {
		var paused = false;
		if(this._curAnim != null) {
			paused = this._curAnim.paused;
		}
		return paused;
	}
	,set_paused: function(Value) {
		if(this._curAnim != null) {
			if(Value) {
				this._curAnim.pause();
			} else {
				this._curAnim.paused = false;
			}
		}
		return Value;
	}
	,get_finished: function() {
		var finished = true;
		if(this._curAnim != null) {
			finished = this._curAnim.finished;
		}
		return finished;
	}
	,set_finished: function(Value) {
		if(Value && this._curAnim != null) {
			this._curAnim.finish();
		}
		return Value;
	}
	,get_frames: function() {
		return this._sprite.numFrames;
	}
	,getFrameIndex: function(Frame) {
		return this._sprite.frames.frames.indexOf(Frame);
	}
	,__class__: flixel_animation_FlxAnimationController
	,__properties__: {get_frames:"get_frames",set_finished:"set_finished",get_finished:"get_finished",set_paused:"set_paused",get_paused:"get_paused",set_name:"set_name",get_name:"get_name",set_frameName:"set_frameName",get_frameName:"get_frameName",set_frameIndex:"set_frameIndex",set_curAnim:"set_curAnim",get_curAnim:"get_curAnim"}
};
var flixel_animation_FlxPrerotatedAnimation = function(Parent,Baked) {
	this.angle = 0;
	flixel_animation_FlxBaseAnimation.call(this,Parent,"prerotated_animation");
	this.baked = Baked;
	this.rotations = Math.round(360 / Baked);
};
$hxClasses["flixel.animation.FlxPrerotatedAnimation"] = flixel_animation_FlxPrerotatedAnimation;
flixel_animation_FlxPrerotatedAnimation.__name__ = "flixel.animation.FlxPrerotatedAnimation";
flixel_animation_FlxPrerotatedAnimation.__super__ = flixel_animation_FlxBaseAnimation;
flixel_animation_FlxPrerotatedAnimation.prototype = $extend(flixel_animation_FlxBaseAnimation.prototype,{
	rotations: null
	,baked: null
	,angle: null
	,set_angle: function(Value) {
		if(isNaN(Value)) {
			throw haxe_Exception.thrown("angle must not be NaN");
		}
		var oldIndex = this.curIndex;
		var angleHelper = Math.floor(Value % 360);
		while(angleHelper < 0) angleHelper += 360;
		var newIndex = Math.floor(angleHelper / this.baked + 0.5);
		newIndex = newIndex % this.rotations | 0;
		if(oldIndex != newIndex) {
			this.set_curIndex(newIndex);
		}
		return this.angle = Value;
	}
	,set_curIndex: function(Value) {
		this.curIndex = Value;
		if(this.parent != null) {
			this.parent.set_frameIndex(Value);
		}
		return Value;
	}
	,clone: function(Parent) {
		return new flixel_animation_FlxPrerotatedAnimation(Parent,this.baked);
	}
	,__class__: flixel_animation_FlxPrerotatedAnimation
	,__properties__: $extend(flixel_animation_FlxBaseAnimation.prototype.__properties__,{set_angle:"set_angle"})
});
var flixel_util_FlxPool_$flixel_$effects_$FlxFlicker = function(classObj) {
	this._count = 0;
	this._pool = [];
	this._class = classObj;
};
$hxClasses["flixel.util.FlxPool_flixel_effects_FlxFlicker"] = flixel_util_FlxPool_$flixel_$effects_$FlxFlicker;
flixel_util_FlxPool_$flixel_$effects_$FlxFlicker.__name__ = "flixel.util.FlxPool_flixel_effects_FlxFlicker";
flixel_util_FlxPool_$flixel_$effects_$FlxFlicker.__interfaces__ = [flixel_util_IFlxPool];
flixel_util_FlxPool_$flixel_$effects_$FlxFlicker.prototype = {
	_pool: null
	,_class: null
	,_count: null
	,get: function() {
		if(this._count == 0) {
			return Type.createInstance(this._class,[]);
		}
		return this._pool[--this._count];
	}
	,put: function(obj) {
		if(obj != null) {
			var i = this._pool.indexOf(obj);
			if(i == -1 || i >= this._count) {
				obj.destroy();
				this._pool[this._count++] = obj;
			}
		}
	}
	,putUnsafe: function(obj) {
		if(obj != null) {
			obj.destroy();
			this._pool[this._count++] = obj;
		}
	}
	,preAllocate: function(numObjects) {
		while(numObjects-- > 0) this._pool[this._count++] = Type.createInstance(this._class,[]);
	}
	,clear: function() {
		this._count = 0;
		var oldPool = this._pool;
		this._pool = [];
		return oldPool;
	}
	,get_length: function() {
		return this._count;
	}
	,__class__: flixel_util_FlxPool_$flixel_$effects_$FlxFlicker
	,__properties__: {get_length:"get_length"}
};
var flixel_effects_FlxFlicker = function() {
};
$hxClasses["flixel.effects.FlxFlicker"] = flixel_effects_FlxFlicker;
flixel_effects_FlxFlicker.__name__ = "flixel.effects.FlxFlicker";
flixel_effects_FlxFlicker.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_effects_FlxFlicker.flicker = function(Object1,Duration,Interval,EndVisibility,ForceRestart,CompletionCallback,ProgressCallback) {
	if(ForceRestart == null) {
		ForceRestart = true;
	}
	if(EndVisibility == null) {
		EndVisibility = true;
	}
	if(Interval == null) {
		Interval = 0.04;
	}
	if(Duration == null) {
		Duration = 1;
	}
	if(flixel_effects_FlxFlicker.isFlickering(Object1)) {
		if(ForceRestart) {
			flixel_effects_FlxFlicker.stopFlickering(Object1);
		} else {
			return flixel_effects_FlxFlicker._boundObjects.h[Object1.__id__];
		}
	}
	if(Interval <= 0) {
		Interval = flixel_FlxG.elapsed;
	}
	var flicker = flixel_effects_FlxFlicker._pool.get();
	flicker.start(Object1,Duration,Interval,EndVisibility,CompletionCallback,ProgressCallback);
	flixel_effects_FlxFlicker._boundObjects.set(Object1,flicker);
	return flicker;
};
flixel_effects_FlxFlicker.isFlickering = function(Object1) {
	return flixel_effects_FlxFlicker._boundObjects.h.__keys__[Object1.__id__] != null;
};
flixel_effects_FlxFlicker.stopFlickering = function(Object1) {
	var boundFlicker = flixel_effects_FlxFlicker._boundObjects.h[Object1.__id__];
	if(boundFlicker != null) {
		boundFlicker.stop();
	}
};
flixel_effects_FlxFlicker.prototype = {
	object: null
	,endVisibility: null
	,timer: null
	,completionCallback: null
	,progressCallback: null
	,duration: null
	,interval: null
	,destroy: function() {
		this.object = null;
		this.timer = null;
		this.completionCallback = null;
		this.progressCallback = null;
	}
	,start: function(Object1,Duration,Interval,EndVisibility,CompletionCallback,ProgressCallback) {
		this.object = Object1;
		this.duration = Duration;
		this.interval = Interval;
		this.completionCallback = CompletionCallback;
		this.progressCallback = ProgressCallback;
		this.endVisibility = EndVisibility;
		this.timer = new flixel_util_FlxTimer().start(this.interval,$bind(this,this.flickerProgress),this.duration / this.interval | 0);
	}
	,stop: function() {
		this.timer.cancel();
		this.object.set_visible(true);
		this.release();
	}
	,release: function() {
		flixel_effects_FlxFlicker._boundObjects.remove(this.object);
		flixel_effects_FlxFlicker._pool.put(this);
	}
	,flickerProgress: function(Timer) {
		this.object.set_visible(!this.object.visible);
		if(this.progressCallback != null) {
			this.progressCallback(this);
		}
		if(Timer.loops > 0 && Timer.loops - Timer._loopsCounter == 0) {
			this.object.set_visible(this.endVisibility);
			if(this.completionCallback != null) {
				this.completionCallback(this);
			}
			this.release();
		}
	}
	,__class__: flixel_effects_FlxFlicker
};
var flixel_effects_postprocess_PostProcess = function(shader) {
};
$hxClasses["flixel.effects.postprocess.PostProcess"] = flixel_effects_postprocess_PostProcess;
flixel_effects_postprocess_PostProcess.__name__ = "flixel.effects.postprocess.PostProcess";
flixel_effects_postprocess_PostProcess.prototype = {
	enable: function(to) {
	}
	,capture: function() {
	}
	,rebuild: function() {
	}
	,update: function(elapsed) {
	}
	,render: function(rect) {
	}
	,setUniform: function(uniform,value) {
	}
	,set_to: function(value) {
		return null;
	}
	,__class__: flixel_effects_postprocess_PostProcess
	,__properties__: {set_to:"set_to"}
};
var flixel_graphics_FlxGraphic = function(Key,Bitmap,Persist) {
	this._destroyOnNoUse = true;
	this._useCount = 0;
	this.unique = false;
	this.isDumped = false;
	this.persist = false;
	this.height = 0;
	this.width = 0;
	this.key = Key;
	this.persist = Persist != null ? Persist : flixel_graphics_FlxGraphic.defaultPersist;
	this.frameCollections = new haxe_ds_EnumValueMap();
	this.frameCollectionTypes = [];
	this.set_bitmap(Bitmap);
	this.shader = new flixel_graphics_tile_FlxGraphicsShader();
};
$hxClasses["flixel.graphics.FlxGraphic"] = flixel_graphics_FlxGraphic;
flixel_graphics_FlxGraphic.__name__ = "flixel.graphics.FlxGraphic";
flixel_graphics_FlxGraphic.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_graphics_FlxGraphic.fromAssetKey = function(Source,Unique,Key,Cache1) {
	if(Cache1 == null) {
		Cache1 = true;
	}
	if(Unique == null) {
		Unique = false;
	}
	var bitmap = null;
	if(!Cache1) {
		bitmap = openfl_utils_Assets.exists(Source) ? openfl_utils_Assets.getBitmapData(Source,false) : null;
		if(bitmap == null) {
			return null;
		}
		return flixel_graphics_FlxGraphic.createGraphic(bitmap,Key,Unique,Cache1);
	}
	var key = flixel_FlxG.bitmap.generateKey(Source,Key,Unique);
	var graphic = flixel_FlxG.bitmap._cache.h[key];
	if(graphic != null) {
		return graphic;
	}
	bitmap = openfl_utils_Assets.exists(Source) ? openfl_utils_Assets.getBitmapData(Source,false) : null;
	if(bitmap == null) {
		return null;
	}
	graphic = flixel_graphics_FlxGraphic.createGraphic(bitmap,key,Unique);
	graphic.assetsKey = Source;
	return graphic;
};
flixel_graphics_FlxGraphic.fromClass = function(Source,Unique,Key,Cache1) {
	if(Cache1 == null) {
		Cache1 = true;
	}
	if(Unique == null) {
		Unique = false;
	}
	var bitmap = null;
	if(!Cache1) {
		bitmap = Type.createInstance(Source,[]);
		return flixel_graphics_FlxGraphic.createGraphic(bitmap,Key,Unique,Cache1);
	}
	var _this = flixel_FlxG.bitmap;
	var key = Source.__name__;
	key = flixel_FlxG.bitmap.generateKey(key,Key,Unique);
	var graphic = flixel_FlxG.bitmap._cache.h[key];
	if(graphic != null) {
		return graphic;
	}
	bitmap = Type.createInstance(Source,[]);
	graphic = flixel_graphics_FlxGraphic.createGraphic(bitmap,key,Unique);
	graphic.assetsClass = Source;
	return graphic;
};
flixel_graphics_FlxGraphic.fromBitmapData = function(Source,Unique,Key,Cache1) {
	if(Cache1 == null) {
		Cache1 = true;
	}
	if(Unique == null) {
		Unique = false;
	}
	if(!Cache1) {
		return flixel_graphics_FlxGraphic.createGraphic(Source,Key,Unique,Cache1);
	}
	var key = flixel_FlxG.bitmap.findKeyForBitmap(Source);
	var assetKey = null;
	var assetClass = null;
	var graphic = null;
	if(key != null) {
		graphic = flixel_FlxG.bitmap._cache.h[key];
		assetKey = graphic.assetsKey;
		assetClass = graphic.assetsClass;
	}
	key = flixel_FlxG.bitmap.generateKey(key,Key,Unique);
	graphic = flixel_FlxG.bitmap._cache.h[key];
	if(graphic != null) {
		return graphic;
	}
	graphic = flixel_graphics_FlxGraphic.createGraphic(Source,key,Unique);
	graphic.assetsKey = assetKey;
	graphic.assetsClass = assetClass;
	return graphic;
};
flixel_graphics_FlxGraphic.fromFrame = function(Source,Unique,Key,Cache1) {
	if(Cache1 == null) {
		Cache1 = true;
	}
	if(Unique == null) {
		Unique = false;
	}
	var key = Source.name;
	if(key == null) {
		var _this = Source.frame;
		var value = _this.x;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "x";
		_this1.value = value;
		var value = _this.y;
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "y";
		_this2.value = value;
		var value = _this.width;
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "w";
		_this3.value = value;
		var value = _this.height;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "h";
		_this.value = value;
		key = flixel_util_FlxStringUtil.getDebugString([_this1,_this2,_this3,_this]);
	}
	key = Source.parent.key + ":" + key;
	key = flixel_FlxG.bitmap.generateKey(key,Key,Unique);
	var graphic = flixel_FlxG.bitmap._cache.h[key];
	if(graphic != null) {
		return graphic;
	}
	var bitmap = Source.paint();
	graphic = flixel_graphics_FlxGraphic.createGraphic(bitmap,key,Unique,Cache1);
	var image = flixel_graphics_frames_FlxImageFrame.fromGraphic(graphic);
	image.frames[0].name = Source.name;
	return graphic;
};
flixel_graphics_FlxGraphic.fromFrames = function(Source,Unique,Key) {
	if(Unique == null) {
		Unique = false;
	}
	return flixel_graphics_FlxGraphic.fromGraphic(Source.parent,Unique,Key);
};
flixel_graphics_FlxGraphic.fromGraphic = function(Source,Unique,Key) {
	if(Unique == null) {
		Unique = false;
	}
	if(!Unique) {
		return Source;
	}
	var key = flixel_FlxG.bitmap.generateKey(Source.key,Key,Unique);
	var graphic = flixel_graphics_FlxGraphic.createGraphic(Source.bitmap,key,Unique);
	graphic.unique = Unique;
	graphic.assetsClass = Source.assetsClass;
	graphic.assetsKey = Source.assetsKey;
	flixel_FlxG.bitmap._cache.h[graphic.key] = graphic;
	return graphic;
};
flixel_graphics_FlxGraphic.fromRectangle = function(Width,Height,Color,Unique,Key) {
	if(Unique == null) {
		Unique = false;
	}
	var systemKey = Width + "x" + Height + ":" + Color;
	var key = flixel_FlxG.bitmap.generateKey(systemKey,Key,Unique);
	var graphic = flixel_FlxG.bitmap._cache.h[key];
	if(graphic != null) {
		return graphic;
	}
	var bitmap = new openfl_display_BitmapData(Width,Height,true,Color);
	return flixel_graphics_FlxGraphic.createGraphic(bitmap,key);
};
flixel_graphics_FlxGraphic.getBitmap = function(Bitmap,Unique) {
	if(Unique == null) {
		Unique = false;
	}
	if(Unique) {
		return Bitmap.clone();
	} else {
		return Bitmap;
	}
};
flixel_graphics_FlxGraphic.createGraphic = function(Bitmap,Key,Unique,Cache1) {
	if(Cache1 == null) {
		Cache1 = true;
	}
	if(Unique == null) {
		Unique = false;
	}
	var Unique1 = Unique;
	if(Unique1 == null) {
		Unique1 = false;
	}
	if(Unique1) {
		Bitmap = Bitmap.clone();
	}
	var graphic = null;
	if(Cache1) {
		graphic = new flixel_graphics_FlxGraphic(Key,Bitmap);
		graphic.unique = Unique;
		flixel_FlxG.bitmap._cache.h[graphic.key] = graphic;
	} else {
		graphic = new flixel_graphics_FlxGraphic(null,Bitmap);
	}
	return graphic;
};
flixel_graphics_FlxGraphic.prototype = {
	key: null
	,bitmap: null
	,width: null
	,height: null
	,assetsKey: null
	,assetsClass: null
	,persist: null
	,isDumped: null
	,shader: null
	,frameCollections: null
	,frameCollectionTypes: null
	,unique: null
	,_imageFrame: null
	,_useCount: null
	,_destroyOnNoUse: null
	,dump: function() {
	}
	,undump: function() {
		var newBitmap = this.getBitmapFromSystem();
		if(newBitmap != null) {
			this.set_bitmap(newBitmap);
		}
		this.isDumped = false;
	}
	,onContext: function() {
		if(this.isDumped) {
			this.undump();
			this.dump();
		}
	}
	,onAssetsReload: function() {
		if(!(this.assetsClass != null || this.assetsKey != null)) {
			return;
		}
		var dumped = this.isDumped;
		this.undump();
		if(dumped) {
			this.dump();
		}
	}
	,destroy: function() {
		this.set_bitmap(flixel_util_FlxDestroyUtil.dispose(this.bitmap));
		this.shader = null;
		this.key = null;
		this.assetsKey = null;
		this.assetsClass = null;
		this._imageFrame = null;
		if(this.frameCollections == null) {
			return;
		}
		var collections;
		var _g = 0;
		var _g1 = this.frameCollectionTypes;
		while(_g < _g1.length) {
			var collectionType = _g1[_g];
			++_g;
			collections = this.frameCollections.get(collectionType);
			flixel_util_FlxDestroyUtil.destroyArray(collections);
		}
		this.frameCollections = null;
		this.frameCollectionTypes = null;
	}
	,addFrameCollection: function(collection) {
		if(collection.type != null) {
			var type = collection.type;
			var collections = this.frameCollections.get(type);
			if(collections == null) {
				collections = [];
				this.frameCollections.set(type,collections);
			}
			var collections1 = collections;
			collections1.push(collection);
		}
	}
	,getFramesCollections: function(type) {
		var collections = this.frameCollections.get(type);
		if(collections == null) {
			collections = [];
			this.frameCollections.set(type,collections);
		}
		return collections;
	}
	,getEmptyFrame: function(size) {
		var frame = new flixel_graphics_frames_FlxFrame(this);
		frame.type = 2;
		var _this = flixel_math_FlxRect._pool.get();
		var X = 0;
		var Y = 0;
		var Width = 0;
		var Height = 0;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var rect = _this;
		rect._inPool = false;
		frame.set_frame(rect);
		var _this = frame.sourceSize;
		_this.set_x(size.x);
		_this.set_y(size.y);
		if(size._weak) {
			size.put();
		}
		return frame;
	}
	,getBitmapFromSystem: function() {
		var newBitmap = null;
		if(this.assetsClass != null) {
			newBitmap = Type.createInstance(this.assetsClass,[]);
		} else if(this.assetsKey != null) {
			var id = this.assetsKey;
			newBitmap = openfl_utils_Assets.exists(id) ? openfl_utils_Assets.getBitmapData(id,false) : null;
		}
		if(newBitmap != null) {
			var Unique = this.unique;
			if(Unique == null) {
				Unique = false;
			}
			if(Unique) {
				return newBitmap.clone();
			} else {
				return newBitmap;
			}
		}
		return null;
	}
	,get_canBeDumped: function() {
		if(this.assetsClass == null) {
			return this.assetsKey != null;
		} else {
			return true;
		}
	}
	,get_useCount: function() {
		return this._useCount;
	}
	,set_useCount: function(Value) {
		if(Value <= 0 && this._destroyOnNoUse && !this.persist) {
			flixel_FlxG.bitmap.remove(this);
		}
		return this._useCount = Value;
	}
	,get_destroyOnNoUse: function() {
		return this._destroyOnNoUse;
	}
	,set_destroyOnNoUse: function(Value) {
		if(Value && this._useCount <= 0 && this.key != null && !this.persist) {
			flixel_FlxG.bitmap.remove(this);
		}
		return this._destroyOnNoUse = Value;
	}
	,get_imageFrame: function() {
		if(this._imageFrame == null) {
			var X = 0;
			var Y = 0;
			var Width = this.bitmap.width;
			var Height = this.bitmap.height;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
			var rect = _this;
			rect._inPool = false;
			this._imageFrame = flixel_graphics_frames_FlxImageFrame.fromRectangle(this,rect);
		}
		return this._imageFrame;
	}
	,get_atlasFrames: function() {
		return flixel_graphics_frames_FlxAtlasFrames.findFrame(this,null);
	}
	,set_bitmap: function(value) {
		if(value != null) {
			this.bitmap = value;
			this.width = this.bitmap.width;
			this.height = this.bitmap.height;
		}
		return value;
	}
	,__class__: flixel_graphics_FlxGraphic
	,__properties__: {get_atlasFrames:"get_atlasFrames",get_imageFrame:"get_imageFrame",set_useCount:"set_useCount",get_useCount:"get_useCount",get_canBeDumped:"get_canBeDumped",set_destroyOnNoUse:"set_destroyOnNoUse",get_destroyOnNoUse:"get_destroyOnNoUse",set_bitmap:"set_bitmap"}
};
var flixel_graphics_atlas_FlxAtlas = function(name,powerOfTwo,border,rotate,minSize,maxSize) {
	if(rotate == null) {
		rotate = false;
	}
	if(border == null) {
		border = 1;
	}
	if(powerOfTwo == null) {
		powerOfTwo = false;
	}
	this.powerOfTwo = false;
	this.allowRotation = false;
	this.maxHeight = 1024;
	this.maxWidth = 1024;
	this.minHeight = 128;
	this.minWidth = 128;
	this.border = 1;
	this.persist = false;
	this.nodes = new haxe_ds_StringMap();
	this.name = name;
	this.set_powerOfTwo(powerOfTwo);
	this.border = border;
	if(minSize == null) {
		minSize = flixel_graphics_atlas_FlxAtlas.defaultMinSize;
	}
	if(maxSize == null) {
		maxSize = flixel_graphics_atlas_FlxAtlas.defaultMaxSize;
	}
	this.set_minWidth(minSize.x | 0);
	this.set_minHeight(minSize.y | 0);
	this.set_maxWidth(maxSize.x > minSize.x ? maxSize.x | 0 : this.minWidth);
	this.set_maxHeight(maxSize.y > minSize.x ? maxSize.y | 0 : this.minHeight);
	this.allowRotation = rotate;
	this.initRoot();
	flixel_FlxG.signals.preStateCreate.add($bind(this,this.onClear));
};
$hxClasses["flixel.graphics.atlas.FlxAtlas"] = flixel_graphics_atlas_FlxAtlas;
flixel_graphics_atlas_FlxAtlas.__name__ = "flixel.graphics.atlas.FlxAtlas";
flixel_graphics_atlas_FlxAtlas.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_graphics_atlas_FlxAtlas.prototype = {
	root: null
	,name: null
	,nodes: null
	,bitmapData: null
	,persist: null
	,border: null
	,width: null
	,height: null
	,minWidth: null
	,minHeight: null
	,maxWidth: null
	,maxHeight: null
	,allowRotation: null
	,powerOfTwo: null
	,_graphic: null
	,_tempStorage: null
	,initRoot: function() {
		var rootWidth = this.minWidth;
		var rootHeight = this.minHeight;
		if(this.powerOfTwo) {
			rootWidth = this.getNextPowerOfTwo(rootWidth);
			rootHeight = this.getNextPowerOfTwo(rootHeight);
		}
		var X = 0;
		var Y = 0;
		var Width = rootWidth;
		var Height = rootHeight;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _this = flixel_math_FlxRect._pool.get();
		var X1 = X;
		var Y1 = Y;
		var Width1 = Width;
		var Height1 = Height;
		if(Height1 == null) {
			Height1 = 0;
		}
		if(Width1 == null) {
			Width1 = 0;
		}
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		_this.x = X1;
		_this.y = Y1;
		_this.width = Width1;
		_this.height = Height1;
		var rect = _this;
		rect._inPool = false;
		this.root = new flixel_graphics_atlas_FlxNode(rect,this);
	}
	,addNode: function(Graphic,Key) {
		var key = flixel_system_FlxAssets.resolveKey(Graphic,Key);
		if(key == null) {
			return null;
		}
		if(this.hasNodeWithName(key)) {
			return this.nodes.h[key];
		}
		var data = flixel_system_FlxAssets.resolveBitmapData(Graphic);
		if(data == null) {
			return null;
		}
		if(this.root.left == null) {
			return this.insertFirstNodeInRoot(data,key);
		}
		if(this.root.right == null) {
			return this.expand(data,key);
		}
		var inserted = this.tryInsert(data,key);
		if(inserted != null) {
			return inserted;
		}
		this.wrapRoot();
		return this.expand(data,key);
	}
	,wrapRoot: function() {
		var temp = this.root;
		var X = 0;
		var Y = 0;
		var Width = temp.rect.width | 0;
		var Height = temp.rect.height | 0;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _this = flixel_math_FlxRect._pool.get();
		var X1 = X;
		var Y1 = Y;
		var Width1 = Width;
		var Height1 = Height;
		if(Height1 == null) {
			Height1 = 0;
		}
		if(Width1 == null) {
			Width1 = 0;
		}
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		_this.x = X1;
		_this.y = Y1;
		_this.width = Width1;
		_this.height = Height1;
		var rect = _this;
		rect._inPool = false;
		this.root = new flixel_graphics_atlas_FlxNode(rect,this);
		this.root.left = temp;
	}
	,tryInsert: function(data,key) {
		var insertWidth = data.width + this.border;
		var insertHeight = data.height + this.border;
		var rotateNode = false;
		var nodeToInsert = this.findNodeToInsert(insertWidth,insertHeight);
		if(this.allowRotation) {
			var nodeToInsertWithRotation = this.findNodeToInsert(insertHeight,insertWidth);
			if(nodeToInsertWithRotation != null) {
				var nodeWithRotationArea = (nodeToInsertWithRotation.rect.width | 0) * (nodeToInsertWithRotation.rect.height | 0);
				if(nodeToInsert == null || nodeToInsert != null && (nodeToInsert.rect.width | 0) * (nodeToInsert.rect.height | 0) > nodeWithRotationArea) {
					nodeToInsert = nodeToInsertWithRotation;
					rotateNode = true;
					var temp = insertWidth;
					insertWidth = insertHeight;
					insertHeight = temp;
				}
			}
		}
		if(nodeToInsert != null) {
			var horizontally = this.needToDivideHorizontally(nodeToInsert,insertWidth,insertHeight);
			return this.divideNode(nodeToInsert,insertWidth,insertHeight,horizontally,data,key,rotateNode);
		}
		return null;
	}
	,needToDivideHorizontally: function(nodeToDivide,insertWidth,insertHeight) {
		var dw = (nodeToDivide.rect.width | 0) - insertWidth;
		var dh = (nodeToDivide.rect.height | 0) - insertHeight;
		return dw > dh;
	}
	,divideNode: function(nodeToDivide,insertWidth,insertHeight,divideHorizontally,firstGrandChildData,firstGrandChildKey,firstGrandChildRotated) {
		if(firstGrandChildRotated == null) {
			firstGrandChildRotated = false;
		}
		if(nodeToDivide != null) {
			var firstChild = null;
			var secondChild = null;
			var firstGrandChild = null;
			var secondGrandChild = null;
			var firstGrandChildFilled = firstGrandChildKey != null;
			if(divideHorizontally) {
				var X = nodeToDivide.rect.x | 0;
				var Y = nodeToDivide.rect.y | 0;
				var Width = insertWidth;
				var Height = nodeToDivide.rect.height | 0;
				if(Height == null) {
					Height = 0;
				}
				if(Width == null) {
					Width = 0;
				}
				if(Y == null) {
					Y = 0;
				}
				if(X == null) {
					X = 0;
				}
				var _this = flixel_math_FlxRect._pool.get();
				var X1 = X;
				var Y1 = Y;
				var Width1 = Width;
				var Height1 = Height;
				if(Height1 == null) {
					Height1 = 0;
				}
				if(Width1 == null) {
					Width1 = 0;
				}
				if(Y1 == null) {
					Y1 = 0;
				}
				if(X1 == null) {
					X1 = 0;
				}
				_this.x = X1;
				_this.y = Y1;
				_this.width = Width1;
				_this.height = Height1;
				var rect = _this;
				rect._inPool = false;
				firstChild = new flixel_graphics_atlas_FlxNode(rect,this);
				if((nodeToDivide.rect.width | 0) - insertWidth > 0) {
					var X = (nodeToDivide.rect.x | 0) + insertWidth;
					var Y = nodeToDivide.rect.y | 0;
					var Width = (nodeToDivide.rect.width | 0) - insertWidth;
					var Height = nodeToDivide.rect.height | 0;
					if(Height == null) {
						Height = 0;
					}
					if(Width == null) {
						Width = 0;
					}
					if(Y == null) {
						Y = 0;
					}
					if(X == null) {
						X = 0;
					}
					var _this = flixel_math_FlxRect._pool.get();
					var X1 = X;
					var Y1 = Y;
					var Width1 = Width;
					var Height1 = Height;
					if(Height1 == null) {
						Height1 = 0;
					}
					if(Width1 == null) {
						Width1 = 0;
					}
					if(Y1 == null) {
						Y1 = 0;
					}
					if(X1 == null) {
						X1 = 0;
					}
					_this.x = X1;
					_this.y = Y1;
					_this.width = Width1;
					_this.height = Height1;
					var rect = _this;
					rect._inPool = false;
					secondChild = new flixel_graphics_atlas_FlxNode(rect,this);
				}
				var X = firstChild.rect.x | 0;
				var Y = firstChild.rect.y | 0;
				var Width = insertWidth;
				var Height = insertHeight;
				if(Height == null) {
					Height = 0;
				}
				if(Width == null) {
					Width = 0;
				}
				if(Y == null) {
					Y = 0;
				}
				if(X == null) {
					X = 0;
				}
				var _this = flixel_math_FlxRect._pool.get();
				var X1 = X;
				var Y1 = Y;
				var Width1 = Width;
				var Height1 = Height;
				if(Height1 == null) {
					Height1 = 0;
				}
				if(Width1 == null) {
					Width1 = 0;
				}
				if(Y1 == null) {
					Y1 = 0;
				}
				if(X1 == null) {
					X1 = 0;
				}
				_this.x = X1;
				_this.y = Y1;
				_this.width = Width1;
				_this.height = Height1;
				var rect = _this;
				rect._inPool = false;
				firstGrandChild = new flixel_graphics_atlas_FlxNode(rect,this,firstGrandChildFilled,firstGrandChildKey,firstGrandChildRotated);
				if((firstChild.rect.height | 0) - insertHeight > 0) {
					var X = firstChild.rect.x | 0;
					var Y = (firstChild.rect.y | 0) + insertHeight;
					var Width = insertWidth;
					var Height = (firstChild.rect.height | 0) - insertHeight;
					if(Height == null) {
						Height = 0;
					}
					if(Width == null) {
						Width = 0;
					}
					if(Y == null) {
						Y = 0;
					}
					if(X == null) {
						X = 0;
					}
					var _this = flixel_math_FlxRect._pool.get();
					var X1 = X;
					var Y1 = Y;
					var Width1 = Width;
					var Height1 = Height;
					if(Height1 == null) {
						Height1 = 0;
					}
					if(Width1 == null) {
						Width1 = 0;
					}
					if(Y1 == null) {
						Y1 = 0;
					}
					if(X1 == null) {
						X1 = 0;
					}
					_this.x = X1;
					_this.y = Y1;
					_this.width = Width1;
					_this.height = Height1;
					var rect = _this;
					rect._inPool = false;
					secondGrandChild = new flixel_graphics_atlas_FlxNode(rect,this);
				}
			} else {
				var X = nodeToDivide.rect.x | 0;
				var Y = nodeToDivide.rect.y | 0;
				var Width = nodeToDivide.rect.width | 0;
				var Height = insertHeight;
				if(Height == null) {
					Height = 0;
				}
				if(Width == null) {
					Width = 0;
				}
				if(Y == null) {
					Y = 0;
				}
				if(X == null) {
					X = 0;
				}
				var _this = flixel_math_FlxRect._pool.get();
				var X1 = X;
				var Y1 = Y;
				var Width1 = Width;
				var Height1 = Height;
				if(Height1 == null) {
					Height1 = 0;
				}
				if(Width1 == null) {
					Width1 = 0;
				}
				if(Y1 == null) {
					Y1 = 0;
				}
				if(X1 == null) {
					X1 = 0;
				}
				_this.x = X1;
				_this.y = Y1;
				_this.width = Width1;
				_this.height = Height1;
				var rect = _this;
				rect._inPool = false;
				firstChild = new flixel_graphics_atlas_FlxNode(rect,this);
				if((nodeToDivide.rect.height | 0) - insertHeight > 0) {
					var X = nodeToDivide.rect.x | 0;
					var Y = (nodeToDivide.rect.y | 0) + insertHeight;
					var Width = nodeToDivide.rect.width | 0;
					var Height = (nodeToDivide.rect.height | 0) - insertHeight;
					if(Height == null) {
						Height = 0;
					}
					if(Width == null) {
						Width = 0;
					}
					if(Y == null) {
						Y = 0;
					}
					if(X == null) {
						X = 0;
					}
					var _this = flixel_math_FlxRect._pool.get();
					var X1 = X;
					var Y1 = Y;
					var Width1 = Width;
					var Height1 = Height;
					if(Height1 == null) {
						Height1 = 0;
					}
					if(Width1 == null) {
						Width1 = 0;
					}
					if(Y1 == null) {
						Y1 = 0;
					}
					if(X1 == null) {
						X1 = 0;
					}
					_this.x = X1;
					_this.y = Y1;
					_this.width = Width1;
					_this.height = Height1;
					var rect = _this;
					rect._inPool = false;
					secondChild = new flixel_graphics_atlas_FlxNode(rect,this);
				}
				var X = firstChild.rect.x | 0;
				var Y = firstChild.rect.y | 0;
				var Width = insertWidth;
				var Height = insertHeight;
				if(Height == null) {
					Height = 0;
				}
				if(Width == null) {
					Width = 0;
				}
				if(Y == null) {
					Y = 0;
				}
				if(X == null) {
					X = 0;
				}
				var _this = flixel_math_FlxRect._pool.get();
				var X1 = X;
				var Y1 = Y;
				var Width1 = Width;
				var Height1 = Height;
				if(Height1 == null) {
					Height1 = 0;
				}
				if(Width1 == null) {
					Width1 = 0;
				}
				if(Y1 == null) {
					Y1 = 0;
				}
				if(X1 == null) {
					X1 = 0;
				}
				_this.x = X1;
				_this.y = Y1;
				_this.width = Width1;
				_this.height = Height1;
				var rect = _this;
				rect._inPool = false;
				firstGrandChild = new flixel_graphics_atlas_FlxNode(rect,this,firstGrandChildFilled,firstGrandChildKey,firstGrandChildRotated);
				if((firstChild.rect.width | 0) - insertWidth > 0) {
					var X = (firstChild.rect.x | 0) + insertWidth;
					var Y = firstChild.rect.y | 0;
					var Width = (firstChild.rect.width | 0) - insertWidth;
					var Height = insertHeight;
					if(Height == null) {
						Height = 0;
					}
					if(Width == null) {
						Width = 0;
					}
					if(Y == null) {
						Y = 0;
					}
					if(X == null) {
						X = 0;
					}
					var _this = flixel_math_FlxRect._pool.get();
					var X1 = X;
					var Y1 = Y;
					var Width1 = Width;
					var Height1 = Height;
					if(Height1 == null) {
						Height1 = 0;
					}
					if(Width1 == null) {
						Width1 = 0;
					}
					if(Y1 == null) {
						Y1 = 0;
					}
					if(X1 == null) {
						X1 = 0;
					}
					_this.x = X1;
					_this.y = Y1;
					_this.width = Width1;
					_this.height = Height1;
					var rect = _this;
					rect._inPool = false;
					secondGrandChild = new flixel_graphics_atlas_FlxNode(rect,this);
				}
			}
			firstChild.left = firstGrandChild;
			firstChild.right = secondGrandChild;
			nodeToDivide.left = firstChild;
			nodeToDivide.right = secondChild;
			if(firstGrandChildKey != null && firstGrandChildData != null) {
				this.expandBitmapData();
				if(firstGrandChildRotated) {
					flixel_graphics_atlas_FlxAtlas.matrix.identity();
					flixel_graphics_atlas_FlxAtlas.matrix.rotate(Math.PI / 2);
					flixel_graphics_atlas_FlxAtlas.matrix.translate(firstGrandChildData.height + (firstGrandChild.rect.x | 0),firstGrandChild.rect.y | 0);
					this.bitmapData.draw(firstGrandChildData,flixel_graphics_atlas_FlxAtlas.matrix);
				} else {
					flixel_graphics_atlas_FlxAtlas.point.setTo(firstGrandChild.rect.x | 0,firstGrandChild.rect.y | 0);
					this.bitmapData.copyPixels(firstGrandChildData,firstGrandChildData.rect,flixel_graphics_atlas_FlxAtlas.point);
				}
				this.addNodeToAtlasFrames(firstGrandChild);
				this.nodes.h[firstGrandChildKey] = firstGrandChild;
			}
			return firstGrandChild;
		}
		return null;
	}
	,insertFirstNodeInRoot: function(data,key) {
		if(this.root.left == null) {
			var insertWidth = data.width + this.border;
			var insertHeight = data.height + this.border;
			var rootWidth = insertWidth;
			var rootHeight = insertHeight;
			if(this.powerOfTwo) {
				rootWidth = this.getNextPowerOfTwo(rootWidth);
				rootHeight = this.getNextPowerOfTwo(rootHeight);
			}
			if(this.minWidth > rootWidth) {
				rootWidth = this.minWidth;
			}
			if(this.minHeight > rootHeight) {
				rootHeight = this.minHeight;
			}
			if(this.powerOfTwo) {
				rootWidth = this.getNextPowerOfTwo(rootWidth);
				rootHeight = this.getNextPowerOfTwo(rootHeight);
			}
			if(this.maxWidth > 0 && rootWidth > this.maxWidth || this.maxHeight > 0 && rootHeight > this.maxHeight) {
				return null;
			}
			this.root.set_width(rootWidth);
			this.root.set_height(rootHeight);
			var horizontally = this.needToDivideHorizontally(this.root,insertWidth,insertHeight);
			return this.divideNode(this.root,insertWidth,insertHeight,horizontally,data,key);
		}
		return null;
	}
	,expand: function(data,key) {
		if(this.root.right == null) {
			var insertWidth = data.width + this.border;
			var insertHeight = data.height + this.border;
			var addRightWidth = (this.root.rect.width | 0) + insertWidth;
			var addRightHeight = Math.max(this.root.rect.height | 0,insertHeight) | 0;
			var addBottomWidth = Math.max(this.root.rect.width | 0,insertWidth) | 0;
			var addBottomHeight = (this.root.rect.height | 0) + insertHeight;
			var addRightWidthRotate = addRightWidth;
			var addRightHeightRotate = addRightHeight;
			var addBottomWidthRotate = addBottomWidth;
			var addBottomHeightRotate = addBottomHeight;
			if(this.allowRotation) {
				addRightWidthRotate = (this.root.rect.width | 0) + insertHeight;
				addRightHeightRotate = Math.max(this.root.rect.height | 0,insertWidth) | 0;
				addBottomWidthRotate = Math.max(this.root.rect.width | 0,insertHeight) | 0;
				addBottomHeightRotate = (this.root.rect.height | 0) + insertWidth;
			}
			if(this.powerOfTwo) {
				addRightWidth = this.getNextPowerOfTwo(addRightWidth);
				addRightWidthRotate = addRightWidth;
				addRightHeight = this.getNextPowerOfTwo(addRightHeight);
				addRightHeightRotate = addRightHeight;
				addBottomWidth = this.getNextPowerOfTwo(addBottomWidth);
				addBottomWidthRotate = addBottomWidth;
				addBottomHeight = this.getNextPowerOfTwo(addBottomHeight);
				addBottomHeightRotate = addBottomHeight;
				if(this.allowRotation) {
					addRightWidthRotate = this.getNextPowerOfTwo(addRightWidthRotate);
					addRightHeightRotate = this.getNextPowerOfTwo(addRightHeightRotate);
					addBottomWidthRotate = this.getNextPowerOfTwo(addBottomWidthRotate);
					addBottomHeightRotate = this.getNextPowerOfTwo(addBottomHeightRotate);
				}
			}
			var canExpandRight = true;
			var canExpandBottom = true;
			var canExpandRightRotate = this.allowRotation;
			var canExpandBottomRotate = this.allowRotation;
			if(this.maxWidth > 0 && addRightWidth > this.maxWidth || this.maxHeight > 0 && addRightHeight > this.maxHeight) {
				canExpandRight = false;
			}
			if(this.maxWidth > 0 && addBottomWidth > this.maxWidth || this.maxHeight > 0 && addBottomHeight > this.maxHeight) {
				canExpandBottom = false;
			}
			if(this.maxWidth > 0 && addRightWidthRotate > this.maxWidth || this.maxHeight > 0 && addRightHeightRotate > this.maxHeight) {
				canExpandRightRotate = false;
			}
			if(this.maxWidth > 0 && addBottomWidthRotate > this.maxWidth || this.maxHeight > 0 && addBottomHeightRotate > this.maxHeight) {
				canExpandBottomRotate = false;
			}
			if(!canExpandRight && !canExpandBottom && !canExpandRightRotate && !canExpandBottomRotate) {
				return null;
			}
			var addRightArea = addRightWidth * addRightHeight;
			var addBottomArea = addBottomWidth * addBottomHeight;
			var addRightAreaRotate = addRightWidthRotate * addRightHeightRotate;
			var addBottomAreaRotate = addBottomWidthRotate * addBottomHeightRotate;
			var rotateRight = false;
			var rotateBottom = false;
			var rotateNode = false;
			if(canExpandRight && canExpandRightRotate && addRightArea > addRightAreaRotate || !canExpandRight && canExpandRightRotate) {
				addRightArea = addBottomAreaRotate;
				addRightWidth = addRightWidthRotate;
				addRightHeight = addRightHeightRotate;
				canExpandRight = true;
				rotateRight = true;
			}
			if(canExpandBottom && canExpandBottomRotate && addBottomArea > addBottomAreaRotate || !canExpandBottom && canExpandBottomRotate) {
				addBottomArea = addBottomAreaRotate;
				addBottomWidth = addBottomWidthRotate;
				addBottomHeight = addBottomHeightRotate;
				canExpandBottom = true;
				rotateBottom = true;
			}
			if(!canExpandRight && canExpandBottom) {
				addRightArea = addBottomArea + 1;
				rotateNode = rotateRight;
			} else if(canExpandRight && !canExpandBottom) {
				addBottomArea = addRightArea + 1;
				rotateNode = rotateBottom;
			}
			var dataNode = null;
			var temp = this.root;
			var insertNodeWidth = insertWidth;
			var insertNodeHeight = insertHeight;
			if(addBottomArea >= addRightArea) {
				if(rotateRight) {
					insertNodeWidth = insertHeight;
					insertNodeHeight = insertWidth;
				}
				this.expandRoot((temp.rect.width | 0) + insertNodeWidth,Math.max(temp.rect.height | 0,insertNodeHeight),true);
				dataNode = this.divideNode(this.root.right,insertNodeWidth,insertNodeHeight,true,data,key,rotateRight);
				this.expandRoot(addRightWidth,addRightHeight,false,true);
			} else {
				if(rotateBottom) {
					insertNodeWidth = insertHeight;
					insertNodeHeight = insertWidth;
				}
				this.expandRoot(Math.max(temp.rect.width | 0,insertNodeWidth),(temp.rect.height | 0) + insertNodeHeight,false);
				dataNode = this.divideNode(this.root.right,insertNodeWidth,insertNodeHeight,true,data,key,rotateBottom);
				this.expandRoot(addBottomWidth,addBottomHeight,false,true);
			}
			return dataNode;
		}
		return null;
	}
	,expandRoot: function(newWidth,newHeight,divideHorizontally,decideHowToDivide) {
		if(decideHowToDivide == null) {
			decideHowToDivide = false;
		}
		if(newWidth > (this.root.rect.width | 0) || newHeight > (this.root.rect.height | 0)) {
			var temp = this.root;
			var X = 0;
			var Y = 0;
			var Width = newWidth;
			var Height = newHeight;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
			var rect = _this;
			rect._inPool = false;
			this.root = new flixel_graphics_atlas_FlxNode(rect,this);
			if(decideHowToDivide) {
				divideHorizontally = this.needToDivideHorizontally(this.root,temp.rect.width | 0,temp.rect.height | 0);
			}
			this.divideNode(this.root,temp.rect.width | 0,temp.rect.height | 0,divideHorizontally);
			this.root.left.left = temp;
		}
	}
	,expandBitmapData: function() {
		if(this.bitmapData != null && this.bitmapData.width == (this.root.rect.width | 0) && this.bitmapData.height == (this.root.rect.height | 0)) {
			return;
		}
		var newBitmapData = new openfl_display_BitmapData(this.root.rect.width | 0,this.root.rect.height | 0,true,0);
		if(this.bitmapData != null) {
			flixel_graphics_atlas_FlxAtlas.point.setTo(0,0);
			newBitmapData.copyPixels(this.bitmapData,this.bitmapData.rect,flixel_graphics_atlas_FlxAtlas.point);
		}
		this.set_bitmapData(flixel_util_FlxDestroyUtil.dispose(this.bitmapData));
		this.set_bitmapData(newBitmapData);
	}
	,getNextPowerOfTwo: function(number) {
		var n = number | 0;
		if(n > 0 && (n & n - 1) == 0) {
			return n;
		}
		var result = 1;
		while(result < n) result <<= 1;
		return result;
	}
	,addNodeWithSpacesAndBorders: function(Graphic,Key,tileSize,tileSpacing,tileBorder,region) {
		var key = flixel_system_FlxAssets.resolveKey(Graphic,Key);
		if(key == null) {
			return null;
		}
		key = flixel_FlxG.bitmap.getKeyWithSpacesAndBorders(key,tileSize,tileSpacing,tileBorder,region);
		if(this.hasNodeWithName(key)) {
			return this.nodes.h[key].getTileFrames(tileSize,tileSpacing,tileBorder);
		}
		var data = flixel_system_FlxAssets.resolveBitmapData(Graphic);
		if(data == null) {
			return null;
		}
		var nodeData = flixel_util_FlxBitmapDataUtil.addSpacesAndBorders(data,tileSize,tileSpacing,tileBorder,region);
		var node = this.addNode(nodeData,key);
		if(node == null) {
			return null;
		}
		if(tileBorder != null) {
			var X = 2 * tileBorder.x;
			var Y = 2 * tileBorder.y;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _g = tileSize;
			_g.set_x(_g.x + X);
			var _g = tileSize;
			_g.set_y(_g.y + Y);
		}
		return node.getTileFrames(tileSize,tileSpacing,tileBorder);
	}
	,getAtlasFrames: function() {
		var graph = this.get_graphic();
		var atlasFrames = graph.get_atlasFrames();
		if(graph.get_atlasFrames() == null) {
			atlasFrames = new flixel_graphics_frames_FlxAtlasFrames(graph);
		}
		var node = haxe_ds_StringMap.valueIterator(this.nodes.h);
		while(node.hasNext()) {
			var node1 = node.next();
			this.addNodeToAtlasFrames(node1);
		}
		return atlasFrames;
	}
	,addNodeToAtlasFrames: function(node) {
		if(this._graphic == null || this._graphic.get_atlasFrames() == null || node == null) {
			return;
		}
		var atlasFrames = this._graphic.get_atlasFrames();
		if(node.filled && !Object.prototype.hasOwnProperty.call(atlasFrames.framesHash.h,node.key)) {
			var X = node.rect.x | 0;
			var Y = node.rect.y | 0;
			var Width = (node.rect.width | 0) - this.border;
			var Height = (node.rect.height | 0) - this.border;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
			var rect = _this;
			rect._inPool = false;
			var frame = rect;
			var sourceSize;
			if(node.rotated) {
				var X = (node.rect.height | 0) - this.border;
				var Y = (node.rect.width | 0) - this.border;
				if(Y == null) {
					Y = 0;
				}
				if(X == null) {
					X = 0;
				}
				var point = flixel_math_FlxPoint._pool.get().set(X,Y);
				point._inPool = false;
				sourceSize = point;
			} else {
				var X = (node.rect.width | 0) - this.border;
				var Y = (node.rect.height | 0) - this.border;
				if(Y == null) {
					Y = 0;
				}
				if(X == null) {
					X = 0;
				}
				var point = flixel_math_FlxPoint._pool.get().set(X,Y);
				point._inPool = false;
				sourceSize = point;
			}
			var X = 0;
			var Y = 0;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			var offset = point;
			var angle = node.rotated ? -90 : 0;
			atlasFrames.addAtlasFrame(frame,sourceSize,offset,node.key,angle);
		}
	}
	,hasNodeWithName: function(nodeName) {
		return Object.prototype.hasOwnProperty.call(this.nodes.h,nodeName);
	}
	,getNode: function(key) {
		return this.nodes.h[key];
	}
	,addNodes: function(bitmaps,keys) {
		var numKeys = keys.length;
		var numBitmaps = bitmaps.length;
		if(numBitmaps != numKeys) {
			return null;
		}
		this._tempStorage = [];
		var _g = 0;
		var _g1 = numBitmaps;
		while(_g < _g1) {
			var i = _g++;
			this._tempStorage.push({ bmd : bitmaps[i], keyStr : keys[i]});
		}
		this.addFromAtlasObjects(this._tempStorage);
		return this;
	}
	,addFromAtlasObjects: function(objects) {
		objects.sort($bind(this,this.bitmapSorter));
		var numBitmaps = objects.length;
		var _g = 0;
		var _g1 = numBitmaps;
		while(_g < _g1) {
			var i = _g++;
			this.addNode(objects[i].bmd,objects[i].keyStr);
		}
		this._tempStorage = null;
	}
	,bitmapSorter: function(obj1,obj2) {
		if(this.allowRotation) {
			var area1 = obj1.bmd.width * obj1.bmd.height;
			var area2 = obj2.bmd.width * obj2.bmd.height;
			return area2 - area1;
		}
		if(obj2.bmd.width == obj1.bmd.width) {
			return obj2.bmd.height - obj1.bmd.height;
		}
		return obj2.bmd.width - obj1.bmd.width;
	}
	,createQueue: function() {
		this._tempStorage = [];
		return this;
	}
	,addToQueue: function(data,key) {
		if(this._tempStorage == null) {
			this._tempStorage = [];
		}
		this._tempStorage.push({ bmd : data, keyStr : key});
		return this;
	}
	,generateFromQueue: function() {
		if(this._tempStorage != null) {
			this.addFromAtlasObjects(this._tempStorage);
		}
		return this;
	}
	,onClear: function(_) {
		if(!this.persist || this._graphic != null && this._graphic.get_useCount() <= 0) {
			this.destroy();
		}
	}
	,destroy: function() {
		this._tempStorage = null;
		this.deleteSubtree(this.root);
		this.root = null;
		flixel_FlxG.bitmap.removeByKey(this.name);
		this.set_bitmapData(null);
		this.nodes = null;
		this._graphic = null;
		flixel_FlxG.signals.preStateCreate.remove($bind(this,this.onClear));
	}
	,clear: function() {
		this.deleteSubtree(this.root);
		this.initRoot();
		flixel_FlxG.bitmap.removeByKey(this.name);
		this.set_bitmapData(null);
		this.nodes = new haxe_ds_StringMap();
		this._graphic = null;
	}
	,getLibGdxData: function() {
		var data = "\n";
		data += this.name + "\n";
		data += "format: RGBA8888\n";
		data += "filter: Linear,Linear\n";
		data += "repeat: none\n";
		var node = haxe_ds_StringMap.valueIterator(this.nodes.h);
		while(node.hasNext()) {
			var node1 = node.next();
			data += node1.key + "\n";
			data += "  rotate: " + (node1.rotated == null ? "null" : "" + node1.rotated) + "\n";
			data += "  xy: " + (node1.rect.x | 0) + ", " + (node1.rect.y | 0) + "\n";
			if(this.allowRotation) {
				data += "size: " + (node1.rect.height | 0) + ", " + (node1.rect.width | 0) + "\n";
				data += "orig: " + (node1.rect.height | 0) + ", " + (node1.rect.width | 0) + "\n";
			} else {
				data += "size: " + (node1.rect.width | 0) + ", " + (node1.rect.height | 0) + "\n";
				data += "orig: " + (node1.rect.width | 0) + ", " + (node1.rect.height | 0) + "\n";
			}
			data += "  offset: 0, 0\n";
			data += "  index: -1\n";
		}
		return data;
	}
	,deleteSubtree: function(node) {
		if(node != null) {
			if(node.left != null) {
				this.deleteSubtree(node.left);
			}
			if(node.right != null) {
				this.deleteSubtree(node.right);
			}
			node.key = null;
			node.left = null;
			node.right = null;
			node.rect = null;
			node.atlas = null;
		}
	}
	,findNodeToInsert: function(insertWidth,insertHeight) {
		var stack = [];
		var current = this.root;
		var emptyNodes = [];
		var canPlaceRight = false;
		var canPlaceLeft = false;
		var looping = true;
		var result = null;
		var minArea = this.maxWidth * this.maxHeight + 1;
		var nodeArea;
		while(looping) {
			if(!current.filled && current.left == null && current.right == null && (current.rect.width >= insertWidth && current.rect.height >= insertHeight)) {
				nodeArea = (current.rect.width | 0) * (current.rect.height | 0);
				if(nodeArea < minArea) {
					minArea = nodeArea;
					result = current;
				}
			}
			if(current.right != null) {
				var _this = current.right;
				canPlaceRight = _this.rect.width >= insertWidth && _this.rect.height >= insertHeight;
			} else {
				canPlaceRight = false;
			}
			if(current.left != null) {
				var _this1 = current.left;
				canPlaceLeft = _this1.rect.width >= insertWidth && _this1.rect.height >= insertHeight;
			} else {
				canPlaceLeft = false;
			}
			if(canPlaceRight && canPlaceLeft) {
				stack.push(current.right);
				current = current.left;
			} else if(canPlaceLeft) {
				current = current.left;
			} else if(canPlaceRight) {
				current = current.right;
			} else if(stack.length > 0) {
				current = stack.pop();
			} else {
				looping = false;
			}
		}
		return result;
	}
	,set_bitmapData: function(value) {
		if(value != null && this._graphic != null) {
			this._graphic.set_bitmap(value);
		}
		return this.bitmapData = value;
	}
	,get_graphic: function() {
		if(this._graphic != null) {
			return this._graphic;
		}
		this._graphic = flixel_FlxG.bitmap.add(this.bitmapData,false,this.name);
		this._graphic.persist = this.persist;
		return this._graphic;
	}
	,set_persist: function(value) {
		if(this._graphic != null) {
			this._graphic.persist = value;
		}
		return this.persist = value;
	}
	,set_minWidth: function(value) {
		if(value <= this.maxWidth) {
			this.minWidth = value;
			if(value > this.get_width()) {
				this.set_width(value);
			}
		}
		return this.minWidth;
	}
	,set_minHeight: function(value) {
		if(value <= this.maxHeight) {
			this.minHeight = value;
			if(value > this.get_height()) {
				this.set_height(value);
			}
		}
		return this.minHeight;
	}
	,get_width: function() {
		if(this.root != null) {
			return this.root.rect.width | 0;
		}
		return 0;
	}
	,set_width: function(value) {
		if(value > this.get_width()) {
			if(this.powerOfTwo) {
				value = this.getNextPowerOfTwo(value);
			}
			if(value <= this.maxWidth) {
				if(this.root != null && (this.root.rect.width | 0) < value) {
					this.expandRoot(value,this.root.rect.height | 0,this.needToDivideHorizontally(this.root,this.root.rect.width | 0,this.root.rect.height | 0));
				}
			}
		}
		return value;
	}
	,get_height: function() {
		if(this.root != null) {
			return this.root.rect.height | 0;
		}
		return 0;
	}
	,set_height: function(value) {
		if(value > this.get_height()) {
			if(this.powerOfTwo) {
				value = this.getNextPowerOfTwo(value);
			}
			if(value <= this.maxHeight) {
				if(this.root != null && (this.root.rect.height | 0) < value) {
					this.expandRoot(this.root.rect.width | 0,value,this.needToDivideHorizontally(this.root,this.root.rect.width | 0,this.root.rect.height | 0));
				}
			}
		}
		return value;
	}
	,set_maxWidth: function(value) {
		if(value >= this.minWidth && (this.root == null || value >= this.get_width())) {
			this.maxWidth = value;
		}
		return this.maxWidth;
	}
	,set_maxHeight: function(value) {
		if(value >= this.minHeight && (this.root == null || value >= this.get_height())) {
			this.maxHeight = value;
		}
		return this.maxHeight;
	}
	,set_powerOfTwo: function(value) {
		if(value != this.powerOfTwo && value && this.root != null) {
			var nextWidth = this.getNextPowerOfTwo(this.root.rect.width | 0);
			var nextHeight = this.getNextPowerOfTwo(this.root.rect.height | 0);
			if(nextWidth != (this.root.rect.width | 0) || nextHeight != (this.root.rect.height | 0)) {
				if(this.maxWidth > 0 && nextWidth > this.maxWidth || this.maxHeight > 0 && nextHeight > this.maxHeight) {
					return false;
				}
				var temp = this.root;
				var X = 0;
				var Y = 0;
				var Width = nextWidth;
				var Height = nextHeight;
				if(Height == null) {
					Height = 0;
				}
				if(Width == null) {
					Width = 0;
				}
				if(Y == null) {
					Y = 0;
				}
				if(X == null) {
					X = 0;
				}
				var _this = flixel_math_FlxRect._pool.get();
				var X1 = X;
				var Y1 = Y;
				var Width1 = Width;
				var Height1 = Height;
				if(Height1 == null) {
					Height1 = 0;
				}
				if(Width1 == null) {
					Width1 = 0;
				}
				if(Y1 == null) {
					Y1 = 0;
				}
				if(X1 == null) {
					X1 = 0;
				}
				_this.x = X1;
				_this.y = Y1;
				_this.width = Width1;
				_this.height = Height1;
				var rect = _this;
				rect._inPool = false;
				this.root = new flixel_graphics_atlas_FlxNode(rect,this);
				if(temp.left != null) {
					this.divideNode(this.root,temp.rect.width | 0,temp.rect.height | 0,this.needToDivideHorizontally(this.root,temp.rect.width | 0,temp.rect.height | 0));
					this.root.left.left = temp;
				}
			}
		}
		return this.powerOfTwo = value;
	}
	,__class__: flixel_graphics_atlas_FlxAtlas
	,__properties__: {set_powerOfTwo:"set_powerOfTwo",set_maxHeight:"set_maxHeight",set_maxWidth:"set_maxWidth",set_minHeight:"set_minHeight",set_minWidth:"set_minWidth",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_persist:"set_persist",get_graphic:"get_graphic",set_bitmapData:"set_bitmapData"}
};
var flixel_graphics_atlas_FlxNode = function(rect,atlas,filled,key,rotated) {
	if(rotated == null) {
		rotated = false;
	}
	if(key == null) {
		key = "";
	}
	if(filled == null) {
		filled = false;
	}
	this.filled = filled;
	this.left = null;
	this.right = null;
	this.rect = rect;
	this.key = key;
	this.atlas = atlas;
	this.rotated = rotated;
};
$hxClasses["flixel.graphics.atlas.FlxNode"] = flixel_graphics_atlas_FlxNode;
flixel_graphics_atlas_FlxNode.__name__ = "flixel.graphics.atlas.FlxNode";
flixel_graphics_atlas_FlxNode.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_graphics_atlas_FlxNode.prototype = {
	left: null
	,right: null
	,rect: null
	,key: null
	,filled: null
	,atlas: null
	,rotated: null
	,destroy: function() {
		this.key = null;
		this.left = null;
		this.right = null;
		this.rect = null;
		this.atlas = null;
	}
	,canPlace: function(width,height) {
		if(this.rect.width >= width) {
			return this.rect.height >= height;
		} else {
			return false;
		}
	}
	,getTileFrames: function(tileSize,tileSpacing,tileBorder) {
		flixel_FlxG.bitmap.add(this.atlas.bitmapData,false,this.atlas.name);
		var frame = this.atlas.getAtlasFrames().framesHash.h[this.key];
		if(frame != null) {
			var tileFrames = flixel_graphics_frames_FlxTileFrames.fromFrame(frame,tileSize,tileSpacing);
			if(tileBorder != null) {
				tileFrames = tileFrames.addBorder(tileBorder);
			}
			return tileFrames;
		}
		return null;
	}
	,getImageFrame: function() {
		flixel_FlxG.bitmap.add(this.atlas.bitmapData,false,this.atlas.name);
		var frame = this.atlas.getAtlasFrames().framesHash.h[this.key];
		if(frame != null) {
			return flixel_graphics_frames_FlxImageFrame.fromFrame(frame);
		}
		return null;
	}
	,get_isEmpty: function() {
		if(!this.filled && this.left == null) {
			return this.right == null;
		} else {
			return false;
		}
	}
	,get_x: function() {
		return this.rect.x | 0;
	}
	,get_y: function() {
		return this.rect.y | 0;
	}
	,get_width: function() {
		return this.rect.width | 0;
	}
	,set_width: function(value) {
		this.rect.width = value;
		return value;
	}
	,get_height: function() {
		return this.rect.height | 0;
	}
	,set_height: function(value) {
		this.rect.height = value;
		return value;
	}
	,__class__: flixel_graphics_atlas_FlxNode
	,__properties__: {get_isEmpty:"get_isEmpty",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
};
var flixel_graphics_frames_FlxFramesCollection = function(parent,type,border) {
	this.parent = parent;
	this.type = type;
	var tmp;
	if(border == null) {
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		tmp = point;
	} else {
		tmp = border;
	}
	this.border = tmp;
	this.frames = [];
	this.framesHash = new haxe_ds_StringMap();
	if(parent != null) {
		parent.addFrameCollection(this);
	}
};
$hxClasses["flixel.graphics.frames.FlxFramesCollection"] = flixel_graphics_frames_FlxFramesCollection;
flixel_graphics_frames_FlxFramesCollection.__name__ = "flixel.graphics.frames.FlxFramesCollection";
flixel_graphics_frames_FlxFramesCollection.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_graphics_frames_FlxFramesCollection.prototype = {
	frames: null
	,framesHash: null
	,parent: null
	,type: null
	,border: null
	,getByName: function(name) {
		return this.framesHash.h[name];
	}
	,getByIndex: function(index) {
		return this.frames[index];
	}
	,getIndexByName: function(name) {
		var _g = 0;
		var _g1 = this.frames.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.frames[i].name == name) {
				return i;
			}
		}
		return -1;
	}
	,getFrameIndex: function(frame) {
		return this.frames.indexOf(frame);
	}
	,destroy: function() {
		this.frames = flixel_util_FlxDestroyUtil.destroyArray(this.frames);
		this.border = flixel_util_FlxDestroyUtil.put(this.border);
		this.framesHash = null;
		this.parent = null;
		this.type = null;
	}
	,addEmptyFrame: function(size) {
		var frame = new flixel_graphics_frames_FlxFrame(this.parent);
		frame.type = 2;
		var _this = flixel_math_FlxRect._pool.get();
		var X = 0;
		var Y = 0;
		var Width = 0;
		var Height = 0;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var rect = _this;
		rect._inPool = false;
		frame.set_frame(rect);
		frame.sourceSize.set(size.width,size.height);
		this.frames.push(frame);
		return frame;
	}
	,addSpriteSheetFrame: function(region) {
		var frame = new flixel_graphics_frames_FlxFrame(this.parent);
		frame.set_frame(this.checkFrame(region));
		frame.sourceSize.set(region.width,region.height);
		frame.offset.set(0,0);
		return this.pushFrame(frame);
	}
	,addAtlasFrame: function(frame,sourceSize,offset,name,angle,flipX,flipY) {
		if(flipY == null) {
			flipY = false;
		}
		if(flipX == null) {
			flipX = false;
		}
		if(angle == null) {
			angle = 0;
		}
		if(name != null && Object.prototype.hasOwnProperty.call(this.framesHash.h,name)) {
			return this.framesHash.h[name];
		}
		var texFrame = new flixel_graphics_frames_FlxFrame(this.parent,angle,flipX,flipY);
		texFrame.name = name;
		texFrame.sourceSize.set(sourceSize.x,sourceSize.y);
		texFrame.offset.set(offset.x,offset.y);
		texFrame.set_frame(this.checkFrame(frame,name));
		sourceSize = flixel_util_FlxDestroyUtil.put(sourceSize);
		offset = flixel_util_FlxDestroyUtil.put(offset);
		return this.pushFrame(texFrame);
	}
	,checkFrame: function(frame,name) {
		var Value = frame.x;
		var Max = this.parent.width;
		var lowerBound = Value < 0 ? 0 : Value;
		var x = Max != null && lowerBound > Max ? Max : lowerBound;
		var Value = frame.y;
		var Max = this.parent.height;
		var lowerBound = Value < 0 ? 0 : Value;
		var y = Max != null && lowerBound > Max ? Max : lowerBound;
		var Value = frame.x + frame.width;
		var Max = this.parent.width;
		var lowerBound = Value < 0 ? 0 : Value;
		var r = Max != null && lowerBound > Max ? Max : lowerBound;
		var Value = frame.y + frame.height;
		var Max = this.parent.height;
		var lowerBound = Value < 0 ? 0 : Value;
		var b = Max != null && lowerBound > Max ? Max : lowerBound;
		var X = x;
		var Y = y;
		var Width = r - x;
		var Height = b - y;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		frame.x = X;
		frame.y = Y;
		frame.width = Width;
		frame.height = Height;
		var tmp = frame.width <= 0 || frame.height <= 0;
		return frame;
	}
	,pushFrame: function(frameObj) {
		var name = frameObj.name;
		if(name != null && Object.prototype.hasOwnProperty.call(this.framesHash.h,name)) {
			return this.framesHash.h[name];
		}
		this.frames.push(frameObj);
		frameObj.cacheFrameMatrix();
		if(name != null) {
			this.framesHash.h[name] = frameObj;
		}
		return frameObj;
	}
	,addBorder: function(border) {
		throw haxe_Exception.thrown("To be overriden in subclasses");
	}
	,toString: function() {
		var value = this.frames;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "frames";
		_this.value = value;
		var value = this.type;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "type";
		_this1.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1]);
	}
	,get_numFrames: function() {
		return this.frames.length;
	}
	,__class__: flixel_graphics_frames_FlxFramesCollection
	,__properties__: {get_numFrames:"get_numFrames"}
};
var flixel_graphics_frames_FlxAtlasFrames = function(parent,border) {
	flixel_graphics_frames_FlxFramesCollection.call(this,parent,flixel_graphics_frames_FlxFrameCollectionType.ATLAS,border);
};
$hxClasses["flixel.graphics.frames.FlxAtlasFrames"] = flixel_graphics_frames_FlxAtlasFrames;
flixel_graphics_frames_FlxAtlasFrames.__name__ = "flixel.graphics.frames.FlxAtlasFrames";
flixel_graphics_frames_FlxAtlasFrames.fromTexturePackerJson = function(Source,Description) {
	var graphic = flixel_FlxG.bitmap.add(Source,false);
	if(graphic == null) {
		return null;
	}
	var frames = flixel_graphics_frames_FlxAtlasFrames.findFrame(graphic);
	if(frames != null) {
		return frames;
	}
	if(graphic == null || Description == null) {
		return null;
	}
	frames = new flixel_graphics_frames_FlxAtlasFrames(graphic);
	var data;
	if(typeof(Description) == "string") {
		var json = Description;
		if(openfl_utils_Assets.exists(json)) {
			json = openfl_utils_Assets.getText(json);
		}
		data = JSON.parse(json);
	} else {
		data = Description;
	}
	if(((data.frames) instanceof Array)) {
		var _g = 0;
		var _g1 = Lambda.array(data.frames);
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			flixel_graphics_frames_FlxAtlasFrames.texturePackerHelper(frame.filename,frame,frames);
		}
	} else {
		var _g = 0;
		var _g1 = Reflect.fields(data.frames);
		while(_g < _g1.length) {
			var frameName = _g1[_g];
			++_g;
			flixel_graphics_frames_FlxAtlasFrames.texturePackerHelper(frameName,Reflect.field(data.frames,frameName),frames);
		}
	}
	return frames;
};
flixel_graphics_frames_FlxAtlasFrames.texturePackerHelper = function(FrameName,FrameData,Frames) {
	var rotated = FrameData.rotated;
	var name = FrameName;
	var X = FrameData.sourceSize.w;
	var Y = FrameData.sourceSize.h;
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	var sourceSize = point;
	var X = FrameData.spriteSourceSize.x;
	var Y = FrameData.spriteSourceSize.y;
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	var offset = point;
	var angle = 0;
	var frameRect = null;
	if(rotated) {
		var X = FrameData.frame.x;
		var Y = FrameData.frame.y;
		var Width = FrameData.frame.h;
		var Height = FrameData.frame.w;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _this = flixel_math_FlxRect._pool.get();
		var X1 = X;
		var Y1 = Y;
		var Width1 = Width;
		var Height1 = Height;
		if(Height1 == null) {
			Height1 = 0;
		}
		if(Width1 == null) {
			Width1 = 0;
		}
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		_this.x = X1;
		_this.y = Y1;
		_this.width = Width1;
		_this.height = Height1;
		var rect = _this;
		rect._inPool = false;
		frameRect = rect;
		angle = -90;
	} else {
		var X = FrameData.frame.x;
		var Y = FrameData.frame.y;
		var Width = FrameData.frame.w;
		var Height = FrameData.frame.h;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _this = flixel_math_FlxRect._pool.get();
		var X1 = X;
		var Y1 = Y;
		var Width1 = Width;
		var Height1 = Height;
		if(Height1 == null) {
			Height1 = 0;
		}
		if(Width1 == null) {
			Width1 = 0;
		}
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		_this.x = X1;
		_this.y = Y1;
		_this.width = Width1;
		_this.height = Height1;
		var rect = _this;
		rect._inPool = false;
		frameRect = rect;
	}
	Frames.addAtlasFrame(frameRect,sourceSize,offset,name,angle);
};
flixel_graphics_frames_FlxAtlasFrames.fromLibGdx = function(source,description) {
	var graphic = flixel_FlxG.bitmap.add(source);
	if(graphic == null) {
		return null;
	}
	var frames = flixel_graphics_frames_FlxAtlasFrames.findFrame(graphic);
	if(frames != null) {
		return frames;
	}
	if(graphic == null || description == null) {
		return null;
	}
	frames = new flixel_graphics_frames_FlxAtlasFrames(graphic);
	if(openfl_utils_Assets.exists(description)) {
		description = openfl_utils_Assets.getText(description);
	}
	var pack = StringTools.trim(description);
	var lines = pack.split("\n");
	var repeatLine = lines[3].indexOf("repeat:") > -1 ? 3 : 4;
	lines.splice(0,repeatLine + 1);
	var numElementsPerImage = 7;
	var numImages = lines.length / numElementsPerImage | 0;
	var _g = 0;
	var _g1 = numImages;
	while(_g < _g1) {
		var i = _g++;
		var curIndex = i * numElementsPerImage;
		var name = lines[curIndex++];
		var rotated = lines[curIndex++].indexOf("true") >= 0;
		var angle = rotated ? 90 : 0;
		var tempString = lines[curIndex++];
		var size = flixel_graphics_frames_FlxAtlasFrames.getDimensions(tempString);
		var imageX = size.x;
		var imageY = size.y;
		tempString = lines[curIndex++];
		size = flixel_graphics_frames_FlxAtlasFrames.getDimensions(tempString);
		var imageWidth = size.x;
		var imageHeight = size.y;
		var X = imageX;
		var Y = imageY;
		var Width = imageWidth;
		var Height = imageHeight;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _this = flixel_math_FlxRect._pool.get();
		var X1 = X;
		var Y1 = Y;
		var Width1 = Width;
		var Height1 = Height;
		if(Height1 == null) {
			Height1 = 0;
		}
		if(Width1 == null) {
			Width1 = 0;
		}
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		_this.x = X1;
		_this.y = Y1;
		_this.width = Width1;
		_this.height = Height1;
		var rect = _this;
		rect._inPool = false;
		var rect1 = rect;
		tempString = lines[curIndex++];
		size = flixel_graphics_frames_FlxAtlasFrames.getDimensions(tempString);
		var X2 = size.x;
		var Y2 = size.y;
		if(Y2 == null) {
			Y2 = 0;
		}
		if(X2 == null) {
			X2 = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X2,Y2);
		point._inPool = false;
		var sourceSize = point;
		tempString = lines[curIndex++];
		size = flixel_graphics_frames_FlxAtlasFrames.getDimensions(tempString);
		tempString = lines[curIndex++];
		var index = Std.parseInt(tempString.split(":")[1]);
		if(index != -1) {
			name += "_" + index;
		}
		var X3 = size.x;
		var Y3 = sourceSize.y - size.y - imageHeight;
		if(Y3 == null) {
			Y3 = 0;
		}
		if(X3 == null) {
			X3 = 0;
		}
		var point1 = flixel_math_FlxPoint._pool.get().set(X3,Y3);
		point1._inPool = false;
		var offset = point1;
		frames.addAtlasFrame(rect1,sourceSize,offset,name,angle);
	}
	return frames;
};
flixel_graphics_frames_FlxAtlasFrames.getDimensions = function(line) {
	var colonPosition = line.indexOf(":");
	var comaPosition = line.indexOf(",");
	return { x : Std.parseInt(line.substring(colonPosition + 1,comaPosition)), y : Std.parseInt(line.substring(comaPosition + 1,line.length))};
};
flixel_graphics_frames_FlxAtlasFrames.fromSparrow = function(Source,Description) {
	var graphic = flixel_FlxG.bitmap.add(Source);
	if(graphic == null) {
		return null;
	}
	var frames = flixel_graphics_frames_FlxAtlasFrames.findFrame(graphic);
	if(frames != null) {
		return frames;
	}
	if(graphic == null || Description == null) {
		return null;
	}
	frames = new flixel_graphics_frames_FlxAtlasFrames(graphic);
	if(openfl_utils_Assets.exists(Description)) {
		Description = openfl_utils_Assets.getText(Description);
	}
	var x = Xml.parse(Description).firstElement();
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
	}
	var this1 = x;
	var data = this1;
	var _g = 0;
	var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"SubTexture");
	while(_g < _g1.length) {
		var texture = _g1[_g];
		++_g;
		var name = haxe_xml__$Access_AttribAccess.resolve(texture,"name");
		var trimmed = haxe_xml__$Access_HasAttribAccess.resolve(texture,"frameX");
		var rotated = haxe_xml__$Access_HasAttribAccess.resolve(texture,"rotated") && haxe_xml__$Access_AttribAccess.resolve(texture,"rotated") == "true";
		var flipX = haxe_xml__$Access_HasAttribAccess.resolve(texture,"flipX") && haxe_xml__$Access_AttribAccess.resolve(texture,"flipX") == "true";
		var flipY = haxe_xml__$Access_HasAttribAccess.resolve(texture,"flipY") && haxe_xml__$Access_AttribAccess.resolve(texture,"flipY") == "true";
		var X = parseFloat(haxe_xml__$Access_AttribAccess.resolve(texture,"x"));
		var Y = parseFloat(haxe_xml__$Access_AttribAccess.resolve(texture,"y"));
		var Width = parseFloat(haxe_xml__$Access_AttribAccess.resolve(texture,"width"));
		var Height = parseFloat(haxe_xml__$Access_AttribAccess.resolve(texture,"height"));
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _this = flixel_math_FlxRect._pool.get();
		var X1 = X;
		var Y1 = Y;
		var Width1 = Width;
		var Height1 = Height;
		if(Height1 == null) {
			Height1 = 0;
		}
		if(Width1 == null) {
			Width1 = 0;
		}
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		_this.x = X1;
		_this.y = Y1;
		_this.width = Width1;
		_this.height = Height1;
		var rect = _this;
		rect._inPool = false;
		var rect1 = rect;
		var size = trimmed ? new openfl_geom_Rectangle(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(texture,"frameX")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(texture,"frameY")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(texture,"frameWidth")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(texture,"frameHeight"))) : new openfl_geom_Rectangle(0,0,rect1.width,rect1.height);
		var angle = rotated ? -90 : 0;
		var X2 = -size.get_left();
		var Y2 = -size.get_top();
		if(Y2 == null) {
			Y2 = 0;
		}
		if(X2 == null) {
			X2 = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X2,Y2);
		point._inPool = false;
		var offset = point;
		var X3 = size.width;
		var Y3 = size.height;
		if(Y3 == null) {
			Y3 = 0;
		}
		if(X3 == null) {
			X3 = 0;
		}
		var point1 = flixel_math_FlxPoint._pool.get().set(X3,Y3);
		point1._inPool = false;
		var sourceSize = point1;
		if(rotated && !trimmed) {
			sourceSize.set(size.height,size.width);
		}
		frames.addAtlasFrame(rect1,sourceSize,offset,name,angle,flipX,flipY);
	}
	return frames;
};
flixel_graphics_frames_FlxAtlasFrames.fromTexturePackerXml = function(Source,Description) {
	var graphic = flixel_FlxG.bitmap.add(Source,false);
	if(graphic == null) {
		return null;
	}
	var frames = flixel_graphics_frames_FlxAtlasFrames.findFrame(graphic);
	if(frames != null) {
		return frames;
	}
	if(graphic == null || Description == null) {
		return null;
	}
	frames = new flixel_graphics_frames_FlxAtlasFrames(graphic);
	if(openfl_utils_Assets.exists(Description)) {
		Description = openfl_utils_Assets.getText(Description);
	}
	var xml = Xml.parse(Description);
	var sprite = xml.firstElement().elements();
	while(sprite.hasNext()) {
		var sprite1 = sprite.next();
		var trimmed = sprite1.exists("oX") || sprite1.exists("oY");
		var rotated = sprite1.exists("r") && sprite1.get("r") == "y";
		var angle = rotated ? -90 : 0;
		var name = sprite1.get("n");
		var X = 0;
		var Y = 0;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		var offset = point;
		var X1 = Std.parseInt(sprite1.get("x"));
		var Y1 = Std.parseInt(sprite1.get("y"));
		var Width = Std.parseInt(sprite1.get("w"));
		var Height = Std.parseInt(sprite1.get("h"));
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		var _this = flixel_math_FlxRect._pool.get();
		var X2 = X1;
		var Y2 = Y1;
		var Width1 = Width;
		var Height1 = Height;
		if(Height1 == null) {
			Height1 = 0;
		}
		if(Width1 == null) {
			Width1 = 0;
		}
		if(Y2 == null) {
			Y2 = 0;
		}
		if(X2 == null) {
			X2 = 0;
		}
		_this.x = X2;
		_this.y = Y2;
		_this.width = Width1;
		_this.height = Height1;
		var rect = _this;
		rect._inPool = false;
		var rect1 = rect;
		var X3 = rect1.width;
		var Y3 = rect1.height;
		if(Y3 == null) {
			Y3 = 0;
		}
		if(X3 == null) {
			X3 = 0;
		}
		var point1 = flixel_math_FlxPoint._pool.get().set(X3,Y3);
		point1._inPool = false;
		var sourceSize = point1;
		if(trimmed) {
			offset.set(Std.parseInt(sprite1.get("oX")),Std.parseInt(sprite1.get("oY")));
			sourceSize.set(Std.parseInt(sprite1.get("oW")),Std.parseInt(sprite1.get("oH")));
		}
		frames.addAtlasFrame(rect1,sourceSize,offset,name,angle);
	}
	return frames;
};
flixel_graphics_frames_FlxAtlasFrames.fromSpriteSheetPacker = function(Source,Description) {
	var graphic = flixel_FlxG.bitmap.add(Source);
	if(graphic == null) {
		return null;
	}
	var frames = flixel_graphics_frames_FlxAtlasFrames.findFrame(graphic);
	if(frames != null) {
		return frames;
	}
	if(graphic == null || Description == null) {
		return null;
	}
	frames = new flixel_graphics_frames_FlxAtlasFrames(graphic);
	if(openfl_utils_Assets.exists(Description)) {
		Description = openfl_utils_Assets.getText(Description);
	}
	var pack = StringTools.trim(Description);
	var lines = pack.split("\n");
	var _g = 0;
	var _g1 = lines.length;
	while(_g < _g1) {
		var i = _g++;
		var currImageData = lines[i].split("=");
		var name = StringTools.trim(currImageData[0]);
		var currImageRegion = StringTools.trim(currImageData[1]).split(" ");
		var X = Std.parseInt(currImageRegion[0]);
		var Y = Std.parseInt(currImageRegion[1]);
		var Width = Std.parseInt(currImageRegion[2]);
		var Height = Std.parseInt(currImageRegion[3]);
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _this = flixel_math_FlxRect._pool.get();
		var X1 = X;
		var Y1 = Y;
		var Width1 = Width;
		var Height1 = Height;
		if(Height1 == null) {
			Height1 = 0;
		}
		if(Width1 == null) {
			Width1 = 0;
		}
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		_this.x = X1;
		_this.y = Y1;
		_this.width = Width1;
		_this.height = Height1;
		var rect = _this;
		rect._inPool = false;
		var rect1 = rect;
		var X2 = rect1.width;
		var Y2 = rect1.height;
		if(Y2 == null) {
			Y2 = 0;
		}
		if(X2 == null) {
			X2 = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X2,Y2);
		point._inPool = false;
		var sourceSize = point;
		var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
		point1._inPool = false;
		var offset = point1;
		frames.addAtlasFrame(rect1,sourceSize,offset,name,0);
	}
	return frames;
};
flixel_graphics_frames_FlxAtlasFrames.findFrame = function(graphic,border) {
	if(border == null) {
		var X = 0;
		var Y = 0;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		var point1 = point;
		point1._weak = true;
		border = point1;
	}
	var type = flixel_graphics_frames_FlxFrameCollectionType.ATLAS;
	var collections = graphic.frameCollections.get(type);
	if(collections == null) {
		collections = [];
		graphic.frameCollections.set(type,collections);
	}
	var atlasFrames = collections;
	var _g = 0;
	while(_g < atlasFrames.length) {
		var atlas = atlasFrames[_g];
		++_g;
		var _this = atlas.border;
		var result = Math.abs(_this.x - border.x) <= 0.0000001 && Math.abs(_this.y - border.y) <= 0.0000001;
		if(border._weak) {
			border.put();
		}
		if(result) {
			return atlas;
		}
	}
	return null;
};
flixel_graphics_frames_FlxAtlasFrames.__super__ = flixel_graphics_frames_FlxFramesCollection;
flixel_graphics_frames_FlxAtlasFrames.prototype = $extend(flixel_graphics_frames_FlxFramesCollection.prototype,{
	addBorder: function(border) {
		var X = 0;
		var Y = 0;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		var point1 = point;
		point1._weak = true;
		var resultBorder = point1.addPoint(this.border).addPoint(border);
		var atlasFrames = flixel_graphics_frames_FlxAtlasFrames.findFrame(this.parent,resultBorder);
		if(atlasFrames != null) {
			return atlasFrames;
		}
		atlasFrames = new flixel_graphics_frames_FlxAtlasFrames(this.parent,resultBorder);
		var _g = 0;
		var _g1 = this.frames;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			atlasFrames.pushFrame(frame.setBorderTo(border));
		}
		return atlasFrames;
	}
	,__class__: flixel_graphics_frames_FlxAtlasFrames
});
var flixel_graphics_frames_FlxFrame = function(parent,angle,flipX,flipY) {
	if(flipY == null) {
		flipY = false;
	}
	if(flipX == null) {
		flipX = false;
	}
	if(angle == null) {
		angle = 0;
	}
	this.matrix = new flixel_math_FlxMatrix();
	this.rect = new openfl_geom_Rectangle();
	this.point2 = new openfl_geom_Point();
	this.point1 = new openfl_geom_Point();
	this.parent = parent;
	this.angle = angle;
	this.flipX = flipX;
	this.flipY = flipY;
	this.type = 0;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.sourceSize = point;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.offset = point;
	var this1 = new Array(6);
	this.blitMatrix = this1;
	if(flixel_FlxG.renderTile) {
		var this1 = new Array(6);
		this.tileMatrix = this1;
	}
};
$hxClasses["flixel.graphics.frames.FlxFrame"] = flixel_graphics_frames_FlxFrame;
flixel_graphics_frames_FlxFrame.__name__ = "flixel.graphics.frames.FlxFrame";
flixel_graphics_frames_FlxFrame.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_graphics_frames_FlxFrame.sort = function(frames,prefixLength,postfixLength) {
	var prefixLength1 = prefixLength;
	var postfixLength1 = postfixLength;
	haxe_ds_ArraySort.sort(frames,function(frame1,frame2) {
		return flixel_graphics_frames_FlxFrame.sortByName(frame1,frame2,prefixLength1,postfixLength1);
	});
};
flixel_graphics_frames_FlxFrame.sortByName = function(frame1,frame2,prefixLength,postfixLength) {
	var name1 = frame1.name;
	var name2 = frame2.name;
	var num1 = Std.parseInt(name1.substring(prefixLength,name1.length - postfixLength));
	var num2 = Std.parseInt(name2.substring(prefixLength,name2.length - postfixLength));
	if(num1 == null) {
		num1 = 0;
	}
	if(num2 == null) {
		num2 = 0;
	}
	return num1 - num2;
};
flixel_graphics_frames_FlxFrame.prototype = {
	point1: null
	,point2: null
	,rect: null
	,matrix: null
	,name: null
	,frame: null
	,uv: null
	,parent: null
	,angle: null
	,flipX: null
	,flipY: null
	,sourceSize: null
	,offset: null
	,type: null
	,tileMatrix: null
	,blitMatrix: null
	,cacheFrameMatrix: function() {
		var mat = this.matrix;
		var blit = true;
		if(blit == null) {
			blit = true;
		}
		mat.identity();
		if(blit) {
			mat.translate(-this.frame.x,-this.frame.y);
		}
		if(this.angle == 90) {
			mat.setTo(-mat.b,mat.a,-mat.d,mat.c,-mat.ty,mat.tx);
			mat.translate(this.frame.height,0);
		} else if(this.angle == -90) {
			mat.setTo(mat.b,-mat.a,mat.d,-mat.c,mat.ty,-mat.tx);
			mat.translate(0,this.frame.width);
		}
		mat.translate(this.offset.x,this.offset.y);
		this.blitMatrix[0] = this.matrix.a;
		this.blitMatrix[1] = this.matrix.b;
		this.blitMatrix[2] = this.matrix.c;
		this.blitMatrix[3] = this.matrix.d;
		this.blitMatrix[4] = this.matrix.tx;
		this.blitMatrix[5] = this.matrix.ty;
		if(flixel_FlxG.renderTile) {
			var mat = this.matrix;
			var blit = false;
			if(blit == null) {
				blit = true;
			}
			mat.identity();
			if(blit) {
				mat.translate(-this.frame.x,-this.frame.y);
			}
			if(this.angle == 90) {
				mat.setTo(-mat.b,mat.a,-mat.d,mat.c,-mat.ty,mat.tx);
				mat.translate(this.frame.height,0);
			} else if(this.angle == -90) {
				mat.setTo(mat.b,-mat.a,mat.d,-mat.c,mat.ty,-mat.tx);
				mat.translate(0,this.frame.width);
			}
			mat.translate(this.offset.x,this.offset.y);
			this.tileMatrix[0] = this.matrix.a;
			this.tileMatrix[1] = this.matrix.b;
			this.tileMatrix[2] = this.matrix.c;
			this.tileMatrix[3] = this.matrix.d;
			this.tileMatrix[4] = this.matrix.tx;
			this.tileMatrix[5] = this.matrix.ty;
		}
	}
	,prepareBlitMatrix: function(mat,blit) {
		if(blit == null) {
			blit = true;
		}
		mat.identity();
		if(blit) {
			mat.translate(-this.frame.x,-this.frame.y);
		}
		if(this.angle == 90) {
			mat.setTo(-mat.b,mat.a,-mat.d,mat.c,-mat.ty,mat.tx);
			mat.translate(this.frame.height,0);
		} else if(this.angle == -90) {
			mat.setTo(mat.b,-mat.a,mat.d,-mat.c,mat.ty,-mat.tx);
			mat.translate(0,this.frame.width);
		}
		mat.translate(this.offset.x,this.offset.y);
		return mat;
	}
	,rotateAndFlip: function(mat,rotation,flipX,flipY) {
		if(flipY == null) {
			flipY = false;
		}
		if(flipX == null) {
			flipX = false;
		}
		if(rotation == null) {
			rotation = 0;
		}
		var w = this.sourceSize.x | 0;
		var h = this.sourceSize.y | 0;
		if(rotation != 0) {
			var t = w;
			w = h;
			h = t;
			if(rotation == 90) {
				mat.setTo(-mat.b,mat.a,-mat.d,mat.c,-mat.ty,mat.tx);
				mat.translate(this.sourceSize.y,0);
			} else if(rotation == -90 || rotation == -90) {
				mat.setTo(mat.b,-mat.a,mat.d,-mat.c,mat.ty,-mat.tx);
				mat.translate(0,this.sourceSize.x);
			}
		}
		if(flipX) {
			mat.scale(-1,1);
			mat.translate(w,0);
		}
		if(flipY) {
			mat.scale(1,-1);
			mat.translate(0,h);
		}
		return mat;
	}
	,prepareTransformedBlitMatrix: function(mat,rotation,flipX,flipY) {
		if(flipY == null) {
			flipY = false;
		}
		if(flipX == null) {
			flipX = false;
		}
		if(rotation == null) {
			rotation = 0;
		}
		mat.a = this.blitMatrix[0];
		mat.b = this.blitMatrix[1];
		mat.c = this.blitMatrix[2];
		mat.d = this.blitMatrix[3];
		mat.tx = this.blitMatrix[4];
		mat.ty = this.blitMatrix[5];
		var rotation1 = rotation;
		var flipX1 = flipX;
		var flipY1 = flipY;
		if(flipY1 == null) {
			flipY1 = false;
		}
		if(flipX1 == null) {
			flipX1 = false;
		}
		if(rotation1 == null) {
			rotation1 = 0;
		}
		var w = this.sourceSize.x | 0;
		var h = this.sourceSize.y | 0;
		if(rotation1 != 0) {
			var t = w;
			w = h;
			h = t;
			if(rotation1 == 90) {
				mat.setTo(-mat.b,mat.a,-mat.d,mat.c,-mat.ty,mat.tx);
				mat.translate(this.sourceSize.y,0);
			} else if(rotation1 == -90 || rotation1 == -90) {
				mat.setTo(mat.b,-mat.a,mat.d,-mat.c,mat.ty,-mat.tx);
				mat.translate(0,this.sourceSize.x);
			}
		}
		if(flipX1) {
			mat.scale(-1,1);
			mat.translate(w,0);
		}
		if(flipY1) {
			mat.scale(1,-1);
			mat.translate(0,h);
		}
		return mat;
	}
	,prepareMatrix: function(mat,rotation,flipX,flipY) {
		if(flipY == null) {
			flipY = false;
		}
		if(flipX == null) {
			flipX = false;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(flixel_FlxG.renderBlit) {
			mat.identity();
			return mat;
		}
		mat.a = this.tileMatrix[0];
		mat.b = this.tileMatrix[1];
		mat.c = this.tileMatrix[2];
		mat.d = this.tileMatrix[3];
		mat.tx = this.tileMatrix[4];
		mat.ty = this.tileMatrix[5];
		var doFlipX = flipX != this.flipX;
		var doFlipY = flipY != this.flipY;
		if(rotation == 0 && !doFlipX && !doFlipY) {
			return mat;
		}
		var rotation1 = rotation;
		var flipX = doFlipX;
		var flipY = doFlipY;
		if(flipY == null) {
			flipY = false;
		}
		if(flipX == null) {
			flipX = false;
		}
		if(rotation1 == null) {
			rotation1 = 0;
		}
		var w = this.sourceSize.x | 0;
		var h = this.sourceSize.y | 0;
		if(rotation1 != 0) {
			var t = w;
			w = h;
			h = t;
			if(rotation1 == 90) {
				mat.setTo(-mat.b,mat.a,-mat.d,mat.c,-mat.ty,mat.tx);
				mat.translate(this.sourceSize.y,0);
			} else if(rotation1 == -90 || rotation1 == -90) {
				mat.setTo(mat.b,-mat.a,mat.d,-mat.c,mat.ty,-mat.tx);
				mat.translate(0,this.sourceSize.x);
			}
		}
		if(flipX) {
			mat.scale(-1,1);
			mat.translate(w,0);
		}
		if(flipY) {
			mat.scale(1,-1);
			mat.translate(0,h);
		}
		return mat;
	}
	,fillBlitMatrix: function(mat) {
		mat.a = this.blitMatrix[0];
		mat.b = this.blitMatrix[1];
		mat.c = this.blitMatrix[2];
		mat.d = this.blitMatrix[3];
		mat.tx = this.blitMatrix[4];
		mat.ty = this.blitMatrix[5];
		return mat;
	}
	,paint: function(bmd,point,mergeAlpha,disposeIfNotEqual) {
		if(disposeIfNotEqual == null) {
			disposeIfNotEqual = false;
		}
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(point == null) {
			point = this.point1;
			point.setTo(0,0);
		}
		var bmd1 = bmd;
		var rotation = 0;
		var mergeAlpha1 = mergeAlpha;
		var disposeIfNotEqual1 = disposeIfNotEqual;
		if(disposeIfNotEqual1 == null) {
			disposeIfNotEqual1 = false;
		}
		if(mergeAlpha1 == null) {
			mergeAlpha1 = false;
		}
		if(rotation == null) {
			rotation = 0;
		}
		var w = this.sourceSize.x | 0;
		var h = this.sourceSize.y | 0;
		if(rotation != 0) {
			var t = w;
			w = h;
			h = t;
		}
		if(bmd1 != null && disposeIfNotEqual1) {
			bmd1 = flixel_util_FlxDestroyUtil.disposeIfNotEqual(bmd1,w,h);
		}
		if(bmd1 != null && !mergeAlpha1) {
			this.rect.setTo(point.x,point.y,w,h);
			bmd1.fillRect(this.rect,0);
		} else if(bmd1 == null) {
			bmd1 = new openfl_display_BitmapData(w,h,true,0);
		}
		bmd = bmd1;
		if(this.type == 2) {
			return bmd;
		}
		if(this.angle == 0) {
			var _this = this.offset;
			var FlashPoint = this.point2;
			if(FlashPoint == null) {
				FlashPoint = new openfl_geom_Point();
			}
			FlashPoint.x = _this.x;
			FlashPoint.y = _this.y;
			this.point2.x += point.x;
			this.point2.y += point.y;
			var tmp = this.parent.bitmap;
			var _this = this.frame;
			var FlashRect = this.rect;
			if(FlashRect == null) {
				FlashRect = new openfl_geom_Rectangle();
			}
			FlashRect.x = _this.x;
			FlashRect.y = _this.y;
			FlashRect.width = _this.width;
			FlashRect.height = _this.height;
			bmd.copyPixels(tmp,FlashRect,this.point2,null,null,mergeAlpha);
		} else {
			var mat = this.matrix;
			mat.a = this.blitMatrix[0];
			mat.b = this.blitMatrix[1];
			mat.c = this.blitMatrix[2];
			mat.d = this.blitMatrix[3];
			mat.tx = this.blitMatrix[4];
			mat.ty = this.blitMatrix[5];
			this.matrix.translate(point.x,point.y);
			var mat = this.matrix;
			var X = this.frame.x;
			var Y = this.frame.y;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var X1 = X;
			var Y1 = Y;
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X1,Y1);
			point._inPool = false;
			var point1 = point;
			point1._weak = true;
			var p1 = point1;
			var _this = this.frame;
			var X = _this.x + _this.width;
			var _this = this.frame;
			var Y = _this.y + _this.height;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var X1 = X;
			var Y1 = Y;
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X1,Y1);
			point._inPool = false;
			var point1 = point;
			point1._weak = true;
			var p2 = point1;
			var x1 = p1.x * mat.a + p1.y * mat.c + mat.tx;
			var y1 = p1.x * mat.b + p1.y * mat.d + mat.ty;
			p1.set(x1,y1);
			var x1 = p2.x * mat.a + p2.y * mat.c + mat.tx;
			var y1 = p2.x * mat.b + p2.y * mat.d + mat.ty;
			p2.set(x1,y1);
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect = _this;
			rect._inPool = false;
			var _this = rect;
			var minX = Math.min(p1.x,p2.x);
			var minY = Math.min(p1.y,p2.y);
			var maxX = Math.max(p1.x,p2.x);
			var maxY = Math.max(p1.y,p2.y);
			if(p1._weak) {
				p1.put();
			}
			if(p2._weak) {
				p2.put();
			}
			var X = minX;
			var Y = minY;
			var Width = maxX - minX;
			var Height = maxY - minY;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var flxRect = _this;
			var FlashRect = this.rect;
			if(FlashRect == null) {
				FlashRect = new openfl_geom_Rectangle();
			}
			FlashRect.x = flxRect.x;
			FlashRect.y = flxRect.y;
			FlashRect.width = flxRect.width;
			FlashRect.height = flxRect.height;
			if(!flxRect._inPool) {
				flxRect._inPool = true;
				flxRect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(flxRect);
			}
			var rect = this.rect;
			bmd.draw(this.parent.bitmap,this.matrix,null,null,rect);
		}
		return bmd;
	}
	,paintRotatedAndFlipped: function(bmd,point,rotation,flipX,flipY,mergeAlpha,disposeIfNotEqual) {
		if(disposeIfNotEqual == null) {
			disposeIfNotEqual = false;
		}
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(flipY == null) {
			flipY = false;
		}
		if(flipX == null) {
			flipX = false;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(this.type == 2 && rotation == 0) {
			return this.paint(bmd,point,mergeAlpha,disposeIfNotEqual);
		}
		if(point == null) {
			point = this.point2;
			point.setTo(0,0);
		}
		var bmd1 = bmd;
		var rotation1 = rotation;
		var mergeAlpha1 = mergeAlpha;
		var disposeIfNotEqual1 = disposeIfNotEqual;
		if(disposeIfNotEqual1 == null) {
			disposeIfNotEqual1 = false;
		}
		if(mergeAlpha1 == null) {
			mergeAlpha1 = false;
		}
		if(rotation1 == null) {
			rotation1 = 0;
		}
		var w = this.sourceSize.x | 0;
		var h = this.sourceSize.y | 0;
		if(rotation1 != 0) {
			var t = w;
			w = h;
			h = t;
		}
		if(bmd1 != null && disposeIfNotEqual1) {
			bmd1 = flixel_util_FlxDestroyUtil.disposeIfNotEqual(bmd1,w,h);
		}
		if(bmd1 != null && !mergeAlpha1) {
			this.rect.setTo(point.x,point.y,w,h);
			bmd1.fillRect(this.rect,0);
		} else if(bmd1 == null) {
			bmd1 = new openfl_display_BitmapData(w,h,true,0);
		}
		bmd = bmd1;
		if(this.type == 2) {
			return bmd;
		}
		var doFlipX = flipX != this.flipX;
		var doFlipY = flipY != this.flipY;
		this.prepareTransformedBlitMatrix(this.matrix,rotation,doFlipX,doFlipY);
		this.matrix.translate(point.x,point.y);
		var mat = this.matrix;
		var X = this.frame.x;
		var Y = this.frame.y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var X1 = X;
		var Y1 = Y;
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X1,Y1);
		point._inPool = false;
		var point1 = point;
		point1._weak = true;
		var p1 = point1;
		var _this = this.frame;
		var X = _this.x + _this.width;
		var _this = this.frame;
		var Y = _this.y + _this.height;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var X1 = X;
		var Y1 = Y;
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X1,Y1);
		point._inPool = false;
		var point1 = point;
		point1._weak = true;
		var p2 = point1;
		var x1 = p1.x * mat.a + p1.y * mat.c + mat.tx;
		var y1 = p1.x * mat.b + p1.y * mat.d + mat.ty;
		p1.set(x1,y1);
		var x1 = p2.x * mat.a + p2.y * mat.c + mat.tx;
		var y1 = p2.x * mat.b + p2.y * mat.d + mat.ty;
		p2.set(x1,y1);
		var _this = flixel_math_FlxRect._pool.get();
		var X = 0;
		var Y = 0;
		var Width = 0;
		var Height = 0;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var rect = _this;
		rect._inPool = false;
		var _this = rect;
		var minX = Math.min(p1.x,p2.x);
		var minY = Math.min(p1.y,p2.y);
		var maxX = Math.max(p1.x,p2.x);
		var maxY = Math.max(p1.y,p2.y);
		if(p1._weak) {
			p1.put();
		}
		if(p2._weak) {
			p2.put();
		}
		var X = minX;
		var Y = minY;
		var Width = maxX - minX;
		var Height = maxY - minY;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var flxRect = _this;
		var FlashRect = this.rect;
		if(FlashRect == null) {
			FlashRect = new openfl_geom_Rectangle();
		}
		FlashRect.x = flxRect.x;
		FlashRect.y = flxRect.y;
		FlashRect.width = flxRect.width;
		FlashRect.height = flxRect.height;
		if(!flxRect._inPool) {
			flxRect._inPool = true;
			flxRect._weak = false;
			flixel_math_FlxRect._pool.putUnsafe(flxRect);
		}
		var rect = this.rect;
		bmd.draw(this.parent.bitmap,this.matrix,null,null,rect);
		return bmd;
	}
	,checkInputBitmap: function(bmd,point,rotation,mergeAlpha,disposeIfNotEqual) {
		if(disposeIfNotEqual == null) {
			disposeIfNotEqual = false;
		}
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(rotation == null) {
			rotation = 0;
		}
		var w = this.sourceSize.x | 0;
		var h = this.sourceSize.y | 0;
		if(rotation != 0) {
			var t = w;
			w = h;
			h = t;
		}
		if(bmd != null && disposeIfNotEqual) {
			bmd = flixel_util_FlxDestroyUtil.disposeIfNotEqual(bmd,w,h);
		}
		if(bmd != null && !mergeAlpha) {
			this.rect.setTo(point.x,point.y,w,h);
			bmd.fillRect(this.rect,0);
		} else if(bmd == null) {
			bmd = new openfl_display_BitmapData(w,h,true,0);
		}
		return bmd;
	}
	,getDrawFrameRect: function(mat) {
		var X = this.frame.x;
		var Y = this.frame.y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var X1 = X;
		var Y1 = Y;
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X1,Y1);
		point._inPool = false;
		var point1 = point;
		point1._weak = true;
		var p1 = point1;
		var _this = this.frame;
		var X = _this.x + _this.width;
		var _this = this.frame;
		var Y = _this.y + _this.height;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var X1 = X;
		var Y1 = Y;
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X1,Y1);
		point._inPool = false;
		var point1 = point;
		point1._weak = true;
		var p2 = point1;
		var x1 = p1.x * mat.a + p1.y * mat.c + mat.tx;
		var y1 = p1.x * mat.b + p1.y * mat.d + mat.ty;
		p1.set(x1,y1);
		var x1 = p2.x * mat.a + p2.y * mat.c + mat.tx;
		var y1 = p2.x * mat.b + p2.y * mat.d + mat.ty;
		p2.set(x1,y1);
		var _this = flixel_math_FlxRect._pool.get();
		var X = 0;
		var Y = 0;
		var Width = 0;
		var Height = 0;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var rect = _this;
		rect._inPool = false;
		var _this = rect;
		var minX = Math.min(p1.x,p2.x);
		var minY = Math.min(p1.y,p2.y);
		var maxX = Math.max(p1.x,p2.x);
		var maxY = Math.max(p1.y,p2.y);
		if(p1._weak) {
			p1.put();
		}
		if(p2._weak) {
			p2.put();
		}
		var X = minX;
		var Y = minY;
		var Width = maxX - minX;
		var Height = maxY - minY;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var flxRect = _this;
		var FlashRect = this.rect;
		if(FlashRect == null) {
			FlashRect = new openfl_geom_Rectangle();
		}
		FlashRect.x = flxRect.x;
		FlashRect.y = flxRect.y;
		FlashRect.width = flxRect.width;
		FlashRect.height = flxRect.height;
		if(!flxRect._inPool) {
			flxRect._inPool = true;
			flxRect._weak = false;
			flixel_math_FlxRect._pool.putUnsafe(flxRect);
		}
		return this.rect;
	}
	,subFrameTo: function(rect,frameToFill) {
		if(frameToFill == null) {
			frameToFill = new flixel_graphics_frames_FlxFrame(this.parent,this.angle);
		} else {
			frameToFill.parent = this.parent;
			frameToFill.angle = this.angle;
			frameToFill.set_frame(flixel_util_FlxDestroyUtil.put(frameToFill.frame));
		}
		frameToFill.sourceSize.set(rect.width,rect.height);
		if(this.type == 2) {
			frameToFill.type = 2;
			frameToFill.offset.set(0,0);
			return frameToFill;
		}
		var _this = flixel_math_FlxRect._pool.get();
		var X = 0;
		var Y = 0;
		var Width = 0;
		var Height = 0;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var rect1 = _this;
		rect1._inPool = false;
		var _this = rect1;
		_this.width = this.frame.width;
		_this.height = this.frame.height;
		var clippedRect = _this;
		if(this.angle != 0) {
			clippedRect.width = this.frame.height;
			clippedRect.height = this.frame.width;
		}
		var ox = Math.max(this.offset.x,0);
		var oy = Math.max(this.offset.y,0);
		rect.x += -ox;
		rect.y += -oy;
		var frameRect = clippedRect.intersection(rect);
		clippedRect = flixel_util_FlxDestroyUtil.put(clippedRect);
		rect.x += ox;
		rect.y += oy;
		if(frameRect.width == 0 || frameRect.height == 0) {
			frameToFill.type = 2;
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			frameRect.x = X;
			frameRect.y = Y;
			frameRect.width = Width;
			frameRect.height = Height;
			frameToFill.set_frame(frameRect);
			frameToFill.offset.set(0,0);
		} else {
			frameToFill.type = 0;
			var _this = frameToFill.offset.set(frameRect.x,frameRect.y);
			var X = rect.x;
			var Y = rect.y;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _g = _this;
			_g.set_x(_g.x - X);
			var _g = _this;
			_g.set_y(_g.y - Y);
			_this.addPoint(this.offset);
			var X = frameRect.x;
			var Y = frameRect.y;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var X1 = X;
			var Y1 = Y;
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X1,Y1);
			point._inPool = false;
			var point1 = point;
			point1._weak = true;
			var p1 = point1;
			var X = frameRect.x + frameRect.width;
			var Y = frameRect.y + frameRect.height;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var X1 = X;
			var Y1 = Y;
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X1,Y1);
			point._inPool = false;
			var point1 = point;
			point1._weak = true;
			var p2 = point1;
			this.matrix.identity();
			if(this.angle == -90) {
				var _this = this.matrix;
				_this.setTo(-_this.b,_this.a,-_this.d,_this.c,-_this.ty,_this.tx);
				this.matrix.translate(this.frame.width,0);
			} else if(this.angle == 90) {
				var _this = this.matrix;
				_this.setTo(_this.b,-_this.a,_this.d,-_this.c,_this.ty,-_this.tx);
				this.matrix.translate(0,this.frame.height);
			}
			if(this.angle != 0) {
				var matrix = this.matrix;
				var x1 = p1.x * matrix.a + p1.y * matrix.c + matrix.tx;
				var y1 = p1.x * matrix.b + p1.y * matrix.d + matrix.ty;
				p1.set(x1,y1);
				var matrix = this.matrix;
				var x1 = p2.x * matrix.a + p2.y * matrix.c + matrix.tx;
				var y1 = p2.x * matrix.b + p2.y * matrix.d + matrix.ty;
				p2.set(x1,y1);
			}
			var minX = Math.min(p1.x,p2.x);
			var minY = Math.min(p1.y,p2.y);
			var maxX = Math.max(p1.x,p2.x);
			var maxY = Math.max(p1.y,p2.y);
			if(p1._weak) {
				p1.put();
			}
			if(p2._weak) {
				p2.put();
			}
			var X = minX;
			var Y = minY;
			var Width = maxX - minX;
			var Height = maxY - minY;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			frameRect.x = X;
			frameRect.y = Y;
			frameRect.width = Width;
			frameRect.height = Height;
			frameRect.x += this.frame.x;
			frameRect.y += this.frame.y;
			frameToFill.set_frame(frameRect);
			frameToFill.cacheFrameMatrix();
		}
		return frameToFill;
	}
	,setBorderTo: function(border,frameToFill) {
		var X = border.x;
		var Y = border.y;
		var Width = this.sourceSize.x - 2 * border.x;
		var Height = this.sourceSize.y - 2 * border.y;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _this = flixel_math_FlxRect._pool.get();
		var X1 = X;
		var Y1 = Y;
		var Width1 = Width;
		var Height1 = Height;
		if(Height1 == null) {
			Height1 = 0;
		}
		if(Width1 == null) {
			Width1 = 0;
		}
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		_this.x = X1;
		_this.y = Y1;
		_this.width = Width1;
		_this.height = Height1;
		var rect = _this;
		rect._inPool = false;
		var rect1 = rect;
		frameToFill = this.subFrameTo(rect1,frameToFill);
		frameToFill.name = this.name;
		rect1 = flixel_util_FlxDestroyUtil.put(rect1);
		return frameToFill;
	}
	,clipTo: function(clip,clippedFrame) {
		if(clippedFrame == null) {
			clippedFrame = new flixel_graphics_frames_FlxFrame(this.parent,this.angle);
		} else {
			clippedFrame.parent = this.parent;
			clippedFrame.angle = this.angle;
			clippedFrame.set_frame(flixel_util_FlxDestroyUtil.put(clippedFrame.frame));
		}
		var _this = clippedFrame.sourceSize;
		var point = this.sourceSize;
		_this.set_x(point.x);
		_this.set_y(point.y);
		if(point._weak) {
			point.put();
		}
		clippedFrame.name = this.name;
		if(this.type == 2) {
			clippedFrame.type = 2;
			clippedFrame.offset.set(0,0);
			return clippedFrame;
		}
		var X = 0;
		var Y = 0;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _this = flixel_math_FlxRect._pool.get();
		var X1 = X;
		var Y1 = Y;
		var Width = 0;
		var Height = 0;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		_this.x = X1;
		_this.y = Y1;
		_this.width = Width;
		_this.height = Height;
		var rect = _this;
		rect._inPool = false;
		var _this = rect;
		_this.width = this.frame.width;
		_this.height = this.frame.height;
		var clippedRect = _this;
		if(this.angle != 0) {
			clippedRect.width = this.frame.height;
			clippedRect.height = this.frame.width;
		}
		clip.x += -this.offset.x;
		clip.y += -this.offset.y;
		var frameRect = clippedRect.intersection(clip);
		clippedRect = flixel_util_FlxDestroyUtil.put(clippedRect);
		if(frameRect.width == 0 || frameRect.height == 0) {
			clippedFrame.type = 2;
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			frameRect.x = X;
			frameRect.y = Y;
			frameRect.width = Width;
			frameRect.height = Height;
			clippedFrame.set_frame(frameRect);
			clippedFrame.offset.set(0,0);
		} else {
			clippedFrame.type = 0;
			clippedFrame.offset.set(frameRect.x,frameRect.y).addPoint(this.offset);
			var X = frameRect.x;
			var Y = frameRect.y;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var X1 = X;
			var Y1 = Y;
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X1,Y1);
			point._inPool = false;
			var point1 = point;
			point1._weak = true;
			var p1 = point1;
			var X = frameRect.x + frameRect.width;
			var Y = frameRect.y + frameRect.height;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var X1 = X;
			var Y1 = Y;
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X1,Y1);
			point._inPool = false;
			var point1 = point;
			point1._weak = true;
			var p2 = point1;
			this.matrix.identity();
			if(this.angle == -90) {
				var _this = this.matrix;
				_this.setTo(-_this.b,_this.a,-_this.d,_this.c,-_this.ty,_this.tx);
				this.matrix.translate(this.frame.width,0);
			} else if(this.angle == 90) {
				var _this = this.matrix;
				_this.setTo(_this.b,-_this.a,_this.d,-_this.c,_this.ty,-_this.tx);
				this.matrix.translate(0,this.frame.height);
			}
			if(this.angle != 0) {
				var matrix = this.matrix;
				var x1 = p1.x * matrix.a + p1.y * matrix.c + matrix.tx;
				var y1 = p1.x * matrix.b + p1.y * matrix.d + matrix.ty;
				p1.set(x1,y1);
				var matrix = this.matrix;
				var x1 = p2.x * matrix.a + p2.y * matrix.c + matrix.tx;
				var y1 = p2.x * matrix.b + p2.y * matrix.d + matrix.ty;
				p2.set(x1,y1);
			}
			var minX = Math.min(p1.x,p2.x);
			var minY = Math.min(p1.y,p2.y);
			var maxX = Math.max(p1.x,p2.x);
			var maxY = Math.max(p1.y,p2.y);
			if(p1._weak) {
				p1.put();
			}
			if(p2._weak) {
				p2.put();
			}
			var X = minX;
			var Y = minY;
			var Width = maxX - minX;
			var Height = maxY - minY;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			frameRect.x = X;
			frameRect.y = Y;
			frameRect.width = Width;
			frameRect.height = Height;
			frameRect.x += this.frame.x;
			frameRect.y += this.frame.y;
			clippedFrame.set_frame(frameRect);
			clippedFrame.cacheFrameMatrix();
		}
		clip.x += this.offset.x;
		clip.y += this.offset.y;
		return clippedFrame;
	}
	,copyTo: function(clone) {
		if(clone == null) {
			clone = new flixel_graphics_frames_FlxFrame(this.parent,this.angle);
		} else {
			clone.parent = this.parent;
			clone.angle = this.angle;
			clone.set_frame(flixel_util_FlxDestroyUtil.put(clone.frame));
		}
		var _this = clone.offset;
		var point = this.offset;
		_this.set_x(point.x);
		_this.set_y(point.y);
		if(point._weak) {
			point.put();
		}
		clone.flipX = this.flipX;
		clone.flipY = this.flipY;
		var _this = clone.sourceSize;
		var point = this.sourceSize;
		_this.set_x(point.x);
		_this.set_y(point.y);
		if(point._weak) {
			point.put();
		}
		var _this = flixel_math_FlxRect._pool.get();
		var X = 0;
		var Y = 0;
		var Width = 0;
		var Height = 0;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var rect = _this;
		rect._inPool = false;
		var _this = rect;
		var Rect = this.frame;
		_this.x = Rect.x;
		_this.y = Rect.y;
		_this.width = Rect.width;
		_this.height = Rect.height;
		if(Rect._weak) {
			if(!Rect._inPool) {
				Rect._inPool = true;
				Rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(Rect);
			}
		}
		clone.set_frame(_this);
		clone.type = this.type;
		clone.name = this.name;
		clone.cacheFrameMatrix();
		return clone;
	}
	,destroy: function() {
		this.name = null;
		this.parent = null;
		this.sourceSize = flixel_util_FlxDestroyUtil.put(this.sourceSize);
		this.offset = flixel_util_FlxDestroyUtil.put(this.offset);
		this.set_frame(flixel_util_FlxDestroyUtil.put(this.frame));
		this.uv = flixel_util_FlxDestroyUtil.put(this.uv);
		this.blitMatrix = null;
		this.tileMatrix = null;
	}
	,toString: function() {
		var value = this.name;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "name";
		_this.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this]);
	}
	,set_frame: function(value) {
		if(value != null) {
			if(this.uv == null) {
				var _this = flixel_math_FlxRect._pool.get();
				var X = 0;
				var Y = 0;
				var Width = 0;
				var Height = 0;
				if(Height == null) {
					Height = 0;
				}
				if(Width == null) {
					Width = 0;
				}
				if(Y == null) {
					Y = 0;
				}
				if(X == null) {
					X = 0;
				}
				_this.x = X;
				_this.y = Y;
				_this.width = Width;
				_this.height = Height;
				var rect = _this;
				rect._inPool = false;
				this.uv = rect;
			}
			var _this = this.uv;
			var X = value.x / this.parent.width;
			var Y = value.y / this.parent.height;
			var Width = (value.x + value.width) / this.parent.width;
			var Height = (value.y + value.height) / this.parent.height;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
		}
		return this.frame = value;
	}
	,__class__: flixel_graphics_frames_FlxFrame
	,__properties__: {set_frame:"set_frame"}
};
var flixel_graphics_frames_FlxFrameCollectionType = $hxEnums["flixel.graphics.frames.FlxFrameCollectionType"] = { __ename__ : "flixel.graphics.frames.FlxFrameCollectionType", __constructs__ : ["IMAGE","TILES","ATLAS","FONT","USER","FILTER"]
	,IMAGE: {_hx_index:0,__enum__:"flixel.graphics.frames.FlxFrameCollectionType",toString:$estr}
	,TILES: {_hx_index:1,__enum__:"flixel.graphics.frames.FlxFrameCollectionType",toString:$estr}
	,ATLAS: {_hx_index:2,__enum__:"flixel.graphics.frames.FlxFrameCollectionType",toString:$estr}
	,FONT: {_hx_index:3,__enum__:"flixel.graphics.frames.FlxFrameCollectionType",toString:$estr}
	,USER: ($_=function(type) { return {_hx_index:4,type:type,__enum__:"flixel.graphics.frames.FlxFrameCollectionType",toString:$estr}; },$_.__params__ = ["type"],$_)
	,FILTER: {_hx_index:5,__enum__:"flixel.graphics.frames.FlxFrameCollectionType",toString:$estr}
};
flixel_graphics_frames_FlxFrameCollectionType.__empty_constructs__ = [flixel_graphics_frames_FlxFrameCollectionType.IMAGE,flixel_graphics_frames_FlxFrameCollectionType.TILES,flixel_graphics_frames_FlxFrameCollectionType.ATLAS,flixel_graphics_frames_FlxFrameCollectionType.FONT,flixel_graphics_frames_FlxFrameCollectionType.FILTER];
var flixel_graphics_frames_FlxImageFrame = function(parent,border) {
	flixel_graphics_frames_FlxFramesCollection.call(this,parent,flixel_graphics_frames_FlxFrameCollectionType.IMAGE,border);
};
$hxClasses["flixel.graphics.frames.FlxImageFrame"] = flixel_graphics_frames_FlxImageFrame;
flixel_graphics_frames_FlxImageFrame.__name__ = "flixel.graphics.frames.FlxImageFrame";
flixel_graphics_frames_FlxImageFrame.fromEmptyFrame = function(graphic,frameRect) {
	if(graphic == null || frameRect == null) {
		return null;
	}
	var imageFrame = flixel_graphics_frames_FlxImageFrame.findEmptyFrame(graphic,frameRect);
	if(imageFrame != null) {
		return imageFrame;
	}
	imageFrame = new flixel_graphics_frames_FlxImageFrame(graphic);
	imageFrame.addEmptyFrame(frameRect);
	return imageFrame;
};
flixel_graphics_frames_FlxImageFrame.fromFrame = function(source) {
	var graphic = source.parent;
	var rect = source.frame;
	var imageFrame = flixel_graphics_frames_FlxImageFrame.findFrame(graphic,rect);
	if(imageFrame != null) {
		return imageFrame;
	}
	imageFrame = new flixel_graphics_frames_FlxImageFrame(graphic);
	var _this = flixel_math_FlxRect._pool.get();
	var X = 0;
	var Y = 0;
	var Width = 0;
	var Height = 0;
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	_this.x = X;
	_this.y = Y;
	_this.width = Width;
	_this.height = Height;
	var rect1 = _this;
	rect1._inPool = false;
	var Rect = rect1;
	Rect.x = rect.x;
	Rect.y = rect.y;
	Rect.width = rect.width;
	Rect.height = rect.height;
	if(Rect._weak) {
		if(!Rect._inPool) {
			Rect._inPool = true;
			Rect._weak = false;
			flixel_math_FlxRect._pool.putUnsafe(Rect);
		}
	}
	imageFrame.addSpriteSheetFrame(Rect);
	return imageFrame;
};
flixel_graphics_frames_FlxImageFrame.fromImage = function(source) {
	return flixel_graphics_frames_FlxImageFrame.fromRectangle(source,null);
};
flixel_graphics_frames_FlxImageFrame.fromGraphic = function(graphic,region) {
	if(graphic == null) {
		return null;
	}
	var checkRegion = region;
	if(checkRegion == null) {
		var X = 0;
		var Y = 0;
		var Width = graphic.width;
		var Height = graphic.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var X1 = X;
		var Y1 = Y;
		var Width1 = Width;
		var Height1 = Height;
		if(Height1 == null) {
			Height1 = 0;
		}
		if(Width1 == null) {
			Width1 = 0;
		}
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		var _this = flixel_math_FlxRect._pool.get();
		var X = X1;
		var Y = Y1;
		var Width = Width1;
		var Height = Height1;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var rect = _this;
		rect._inPool = false;
		var rect1 = rect;
		rect1._weak = true;
		checkRegion = rect1;
	}
	var imageFrame = flixel_graphics_frames_FlxImageFrame.findFrame(graphic,checkRegion);
	if(imageFrame != null) {
		return imageFrame;
	}
	imageFrame = new flixel_graphics_frames_FlxImageFrame(graphic);
	if(region == null) {
		var X = 0;
		var Y = 0;
		var Width = graphic.width;
		var Height = graphic.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _this = flixel_math_FlxRect._pool.get();
		var X1 = X;
		var Y1 = Y;
		var Width1 = Width;
		var Height1 = Height;
		if(Height1 == null) {
			Height1 = 0;
		}
		if(Width1 == null) {
			Width1 = 0;
		}
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		_this.x = X1;
		_this.y = Y1;
		_this.width = Width1;
		_this.height = Height1;
		var rect = _this;
		rect._inPool = false;
		region = rect;
	} else {
		if(region.width == 0) {
			region.width = graphic.width - region.x;
		}
		if(region.height == 0) {
			region.height = graphic.height - region.y;
		}
	}
	imageFrame.addSpriteSheetFrame(region);
	return imageFrame;
};
flixel_graphics_frames_FlxImageFrame.fromRectangle = function(source,region) {
	var graphic = flixel_FlxG.bitmap.add(source,false);
	return flixel_graphics_frames_FlxImageFrame.fromGraphic(graphic,region);
};
flixel_graphics_frames_FlxImageFrame.fromBitmapAddSpacesAndBorders = function(source,border,region) {
	var graphic = flixel_FlxG.bitmap.add(source,false);
	if(graphic == null) {
		return null;
	}
	var key = flixel_FlxG.bitmap.getKeyWithSpacesAndBorders(graphic.key,null,null,border,region);
	var result = flixel_FlxG.bitmap._cache.h[key];
	if(result == null) {
		var bitmap = flixel_util_FlxBitmapDataUtil.addSpacesAndBorders(graphic.bitmap,null,null,border,region);
		result = flixel_FlxG.bitmap.add(bitmap,false,key);
	}
	var imageFrame = flixel_graphics_frames_FlxImageFrame.fromGraphic(graphic);
	return imageFrame.addBorder(border);
};
flixel_graphics_frames_FlxImageFrame.fromFrameAddSpacesAndBorders = function(frame,border) {
	var bitmap = frame.paint();
	return flixel_graphics_frames_FlxImageFrame.fromBitmapAddSpacesAndBorders(bitmap,border);
};
flixel_graphics_frames_FlxImageFrame.findFrame = function(graphic,frameRect,frameBorder) {
	if(frameBorder == null) {
		var X = 0;
		var Y = 0;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		var point1 = point;
		point1._weak = true;
		frameBorder = point1;
	}
	var type = flixel_graphics_frames_FlxFrameCollectionType.IMAGE;
	var collections = graphic.frameCollections.get(type);
	if(collections == null) {
		collections = [];
		graphic.frameCollections.set(type,collections);
	}
	var imageFrames = collections;
	var _g = 0;
	while(_g < imageFrames.length) {
		var imageFrame = imageFrames[_g];
		++_g;
		var tmp;
		var rect = imageFrame.get_frame().frame;
		var result = Math.abs(frameRect.x - rect.x) <= 0.0000001 && Math.abs(frameRect.y - rect.y) <= 0.0000001 && Math.abs(frameRect.width - rect.width) <= 0.0000001 && Math.abs(frameRect.height - rect.height) <= 0.0000001;
		if(rect._weak) {
			if(!rect._inPool) {
				rect._inPool = true;
				rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(rect);
			}
		}
		if(result) {
			var point = imageFrame.border;
			var result1 = Math.abs(frameBorder.x - point.x) <= 0.0000001 && Math.abs(frameBorder.y - point.y) <= 0.0000001;
			if(point._weak) {
				point.put();
			}
			tmp = result1;
		} else {
			tmp = false;
		}
		if(tmp && imageFrame.get_frame().type != 2) {
			return imageFrame;
		}
	}
	return null;
};
flixel_graphics_frames_FlxImageFrame.findEmptyFrame = function(graphic,frameRect) {
	var type = flixel_graphics_frames_FlxFrameCollectionType.IMAGE;
	var collections = graphic.frameCollections.get(type);
	if(collections == null) {
		collections = [];
		graphic.frameCollections.set(type,collections);
	}
	var imageFrames = collections;
	var _g = 0;
	while(_g < imageFrames.length) {
		var imageFrame = imageFrames[_g];
		++_g;
		var frame = imageFrame.get_frame();
		if(frame.sourceSize.x == frameRect.width && frame.sourceSize.y == frameRect.height && frame.type == 2) {
			return imageFrame;
		}
	}
	return null;
};
flixel_graphics_frames_FlxImageFrame.__super__ = flixel_graphics_frames_FlxFramesCollection;
flixel_graphics_frames_FlxImageFrame.prototype = $extend(flixel_graphics_frames_FlxFramesCollection.prototype,{
	equals: function(rect,border) {
		var rect1 = this.get_frame().frame;
		var result = Math.abs(rect.x - rect1.x) <= 0.0000001 && Math.abs(rect.y - rect1.y) <= 0.0000001 && Math.abs(rect.width - rect1.width) <= 0.0000001 && Math.abs(rect.height - rect1.height) <= 0.0000001;
		if(rect1._weak) {
			if(!rect1._inPool) {
				rect1._inPool = true;
				rect1._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(rect1);
			}
		}
		if(result) {
			var point = this.border;
			var result = Math.abs(border.x - point.x) <= 0.0000001 && Math.abs(border.y - point.y) <= 0.0000001;
			if(point._weak) {
				point.put();
			}
			return result;
		} else {
			return false;
		}
	}
	,addBorder: function(border) {
		var X = 0;
		var Y = 0;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		var point1 = point;
		point1._weak = true;
		var resultBorder = point1.addPoint(this.border).addPoint(border);
		var imageFrame = flixel_graphics_frames_FlxImageFrame.findFrame(this.parent,this.get_frame().frame,resultBorder);
		if(imageFrame != null) {
			return imageFrame;
		}
		imageFrame = new flixel_graphics_frames_FlxImageFrame(this.parent,resultBorder);
		imageFrame.pushFrame(this.get_frame().setBorderTo(border));
		return imageFrame;
	}
	,destroy: function() {
		flixel_graphics_frames_FlxFramesCollection.prototype.destroy.call(this);
		flixel_util_FlxDestroyUtil.destroy(this.get_frame());
	}
	,get_frame: function() {
		return this.frames[0];
	}
	,__class__: flixel_graphics_frames_FlxImageFrame
	,__properties__: $extend(flixel_graphics_frames_FlxFramesCollection.prototype.__properties__,{get_frame:"get_frame"})
});
var flixel_graphics_frames_FlxTileFrames = function(parent,border) {
	this.numCols = 0;
	this.numRows = 0;
	flixel_graphics_frames_FlxFramesCollection.call(this,parent,flixel_graphics_frames_FlxFrameCollectionType.TILES,border);
};
$hxClasses["flixel.graphics.frames.FlxTileFrames"] = flixel_graphics_frames_FlxTileFrames;
flixel_graphics_frames_FlxTileFrames.__name__ = "flixel.graphics.frames.FlxTileFrames";
flixel_graphics_frames_FlxTileFrames.fromBitmapAddSpacesAndBorders = function(source,tileSize,tileSpacing,tileBorder,region) {
	var graphic = flixel_FlxG.bitmap.add(source,false);
	if(graphic == null) {
		return null;
	}
	var key = flixel_FlxG.bitmap.getKeyWithSpacesAndBorders(graphic.key,tileSize,tileSpacing,tileBorder,region);
	var result = flixel_FlxG.bitmap._cache.h[key];
	if(result == null) {
		var bitmap = flixel_util_FlxBitmapDataUtil.addSpacesAndBorders(graphic.bitmap,tileSize,tileSpacing,tileBorder,region);
		result = flixel_FlxG.bitmap.add(bitmap,false,key);
	}
	var borderX = 0;
	var borderY = 0;
	if(tileBorder != null) {
		borderX = tileBorder.x | 0;
		borderY = tileBorder.y | 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	var _this = point.addPoint(tileSize);
	var X = 2 * borderX;
	var Y = 2 * borderY;
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var _g = _this;
	_g.set_x(_g.x + X);
	var _g = _this;
	_g.set_y(_g.y + Y);
	var tileFrames = flixel_graphics_frames_FlxTileFrames.fromGraphic(result,_this,null,tileSpacing);
	if(tileBorder == null) {
		return tileFrames;
	}
	return tileFrames.addBorder(tileBorder);
};
flixel_graphics_frames_FlxTileFrames.fromFrameAddSpacesAndBorders = function(frame,tileSize,tileSpacing,tileBorder) {
	var bitmap = frame.paint();
	return flixel_graphics_frames_FlxTileFrames.fromBitmapAddSpacesAndBorders(bitmap,tileSize,tileSpacing,tileBorder);
};
flixel_graphics_frames_FlxTileFrames.fromFrame = function(frame,tileSize,tileSpacing) {
	var graphic = frame.parent;
	var tileFrames = flixel_graphics_frames_FlxTileFrames.findFrame(graphic,tileSize,null,frame,tileSpacing);
	if(tileFrames != null) {
		return tileFrames;
	}
	if(tileSpacing == null) {
		var X = 0;
		var Y = 0;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		tileSpacing = point;
	}
	tileFrames = new flixel_graphics_frames_FlxTileFrames(graphic);
	tileFrames.atlasFrame = frame;
	tileFrames.region = frame.frame;
	tileFrames.tileSize = tileSize;
	tileFrames.tileSpacing = tileSpacing;
	tileSpacing.set_x(Math.floor(tileSpacing.x));
	tileSpacing.set_y(Math.floor(tileSpacing.y));
	tileSize.set_x(Math.floor(tileSize.x));
	tileSize.set_y(Math.floor(tileSize.y));
	var spacedWidth = tileSize.x + tileSpacing.x;
	var spacedHeight = tileSize.y + tileSpacing.y;
	var numRows = tileSize.y == 0 ? 1 : (frame.sourceSize.y + tileSpacing.y) / spacedHeight | 0;
	var numCols = tileSize.x == 0 ? 1 : (frame.sourceSize.x + tileSpacing.x) / spacedWidth | 0;
	var X = 0;
	var Y = 0;
	var Width = tileSize.x;
	var Height = tileSize.y;
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var _this = flixel_math_FlxRect._pool.get();
	var X1 = X;
	var Y1 = Y;
	var Width1 = Width;
	var Height1 = Height;
	if(Height1 == null) {
		Height1 = 0;
	}
	if(Width1 == null) {
		Width1 = 0;
	}
	if(Y1 == null) {
		Y1 = 0;
	}
	if(X1 == null) {
		X1 = 0;
	}
	_this.x = X1;
	_this.y = Y1;
	_this.width = Width1;
	_this.height = Height1;
	var rect = _this;
	rect._inPool = false;
	var helperRect = rect;
	var _g = 0;
	var _g1 = numRows;
	while(_g < _g1) {
		var j = _g++;
		var _g2 = 0;
		var _g3 = numCols;
		while(_g2 < _g3) {
			var i = _g2++;
			helperRect.x = spacedWidth * i;
			helperRect.y = spacedHeight * j;
			tileFrames.pushFrame(frame.subFrameTo(helperRect));
		}
	}
	helperRect = flixel_util_FlxDestroyUtil.put(helperRect);
	tileFrames.numCols = numCols;
	tileFrames.numRows = numRows;
	return tileFrames;
};
flixel_graphics_frames_FlxTileFrames.fromFrames = function(Frames) {
	var firstFrame = Frames[0];
	var graphic = firstFrame.parent;
	var _g = 0;
	while(_g < Frames.length) {
		var frame = Frames[_g];
		++_g;
		var tmp;
		if(frame.parent == firstFrame.parent) {
			var _this = frame.sourceSize;
			var point = firstFrame.sourceSize;
			var result = Math.abs(_this.x - point.x) <= 0.0000001 && Math.abs(_this.y - point.y) <= 0.0000001;
			if(point._weak) {
				point.put();
			}
			tmp = !result;
		} else {
			tmp = true;
		}
		if(tmp) {
			return null;
		}
	}
	var tileFrames = new flixel_graphics_frames_FlxTileFrames(graphic);
	tileFrames.region = null;
	tileFrames.atlasFrame = null;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	var _this = point;
	var point = firstFrame.sourceSize;
	_this.set_x(point.x);
	_this.set_y(point.y);
	if(point._weak) {
		point.put();
	}
	tileFrames.tileSize = _this;
	var X = 0;
	var Y = 0;
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	tileFrames.tileSpacing = point;
	tileFrames.numCols = Frames.length;
	tileFrames.numRows = 1;
	var _g = 0;
	while(_g < Frames.length) {
		var frame = Frames[_g];
		++_g;
		tileFrames.frames.push(frame);
		if(frame.name != null) {
			tileFrames.framesHash.h[frame.name] = frame;
		}
	}
	return tileFrames;
};
flixel_graphics_frames_FlxTileFrames.fromAtlasByPrefix = function(Frames,Prefix) {
	var framesToAdd = [];
	var _g = 0;
	var _g1 = Frames.frames;
	while(_g < _g1.length) {
		var frame = _g1[_g];
		++_g;
		if(StringTools.startsWith(frame.name,Prefix)) {
			framesToAdd.push(frame);
		}
	}
	if(framesToAdd.length > 0) {
		var name = framesToAdd[0].name;
		var postIndex = name.indexOf(".",Prefix.length);
		var postFix = name.substring(postIndex == -1 ? name.length : postIndex,name.length);
		flixel_graphics_frames_FlxFrame.sort(framesToAdd,Prefix.length,postFix.length);
		return flixel_graphics_frames_FlxTileFrames.fromFrames(framesToAdd);
	}
	return null;
};
flixel_graphics_frames_FlxTileFrames.fromGraphic = function(graphic,tileSize,region,tileSpacing) {
	var tileFrames = flixel_graphics_frames_FlxTileFrames.findFrame(graphic,tileSize,region,null,tileSpacing);
	if(tileFrames != null) {
		return tileFrames;
	}
	if(region == null) {
		var X = 0;
		var Y = 0;
		var Width = graphic.width;
		var Height = graphic.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _this = flixel_math_FlxRect._pool.get();
		var X1 = X;
		var Y1 = Y;
		var Width1 = Width;
		var Height1 = Height;
		if(Height1 == null) {
			Height1 = 0;
		}
		if(Width1 == null) {
			Width1 = 0;
		}
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		_this.x = X1;
		_this.y = Y1;
		_this.width = Width1;
		_this.height = Height1;
		var rect = _this;
		rect._inPool = false;
		region = rect;
	} else {
		if(region.width == 0) {
			region.width = graphic.width - region.x;
		}
		if(region.height == 0) {
			region.height = graphic.height - region.y;
		}
	}
	if(tileSpacing == null) {
		var X = 0;
		var Y = 0;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		tileSpacing = point;
	}
	tileFrames = new flixel_graphics_frames_FlxTileFrames(graphic);
	tileFrames.region = region;
	tileFrames.atlasFrame = null;
	tileFrames.tileSize = tileSize;
	tileFrames.tileSpacing = tileSpacing;
	region.x = Math.floor(region.x);
	region.y = Math.floor(region.y);
	region.width = Math.floor(region.width);
	region.height = Math.floor(region.height);
	tileSpacing.set_x(Math.floor(tileSpacing.x));
	tileSpacing.set_y(Math.floor(tileSpacing.y));
	tileSize.set_x(Math.floor(tileSize.x));
	tileSize.set_y(Math.floor(tileSize.y));
	var spacedWidth = tileSize.x + tileSpacing.x;
	var spacedHeight = tileSize.y + tileSpacing.y;
	var numRows = tileSize.y == 0 ? 1 : (region.height + tileSpacing.y) / spacedHeight | 0;
	var numCols = tileSize.x == 0 ? 1 : (region.width + tileSpacing.x) / spacedWidth | 0;
	var tileRect;
	var _g = 0;
	var _g1 = numRows;
	while(_g < _g1) {
		var j = _g++;
		var _g2 = 0;
		var _g3 = numCols;
		while(_g2 < _g3) {
			var i = _g2++;
			var X = region.x + i * spacedWidth;
			var Y = region.y + j * spacedHeight;
			var Width = tileSize.x;
			var Height = tileSize.y;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
			var rect = _this;
			rect._inPool = false;
			tileRect = rect;
			tileFrames.addSpriteSheetFrame(tileRect);
		}
	}
	tileFrames.numCols = numCols;
	tileFrames.numRows = numRows;
	return tileFrames;
};
flixel_graphics_frames_FlxTileFrames.fromRectangle = function(source,tileSize,region,tileSpacing) {
	var graphic = flixel_FlxG.bitmap.add(source,false);
	if(graphic == null) {
		return null;
	}
	return flixel_graphics_frames_FlxTileFrames.fromGraphic(graphic,tileSize,region,tileSpacing);
};
flixel_graphics_frames_FlxTileFrames.combineTileSets = function(bitmaps,tileSize,spacing,border) {
	var framesCollections = [];
	var _g = 0;
	while(_g < bitmaps.length) {
		var bitmap = bitmaps[_g];
		++_g;
		framesCollections.push(flixel_graphics_frames_FlxTileFrames.fromRectangle(bitmap,tileSize));
	}
	return flixel_graphics_frames_FlxTileFrames.combineTileFrames(framesCollections,spacing,border);
};
flixel_graphics_frames_FlxTileFrames.combineTileFrames = function(tileframes,spacing,border) {
	var totalArea = 0;
	var rows = 0;
	var cols = 0;
	var tileWidth = tileframes[0].frames[0].sourceSize.x | 0;
	var tileHeight = tileframes[0].frames[0].sourceSize.y | 0;
	var spaceX = 0;
	var spaceY = 0;
	if(spacing != null) {
		spaceX = spacing.x | 0;
		spaceY = spacing.y | 0;
	}
	var borderX = 0;
	var borderY = 0;
	if(border != null) {
		borderX = border.x | 0;
		borderY = border.y | 0;
	}
	var _g = 0;
	while(_g < tileframes.length) {
		var collection = tileframes[_g];
		++_g;
		cols = collection.numCols;
		rows = collection.numRows;
		totalArea += cols * (tileWidth + 2 * borderX) * rows * (tileHeight + 2 * borderY) | 0;
	}
	var side = Math.sqrt(totalArea);
	cols = side / (tileWidth + 2 * borderX) | 0;
	rows = Math.ceil(totalArea / (cols * (tileWidth + 2 * borderX) * (tileHeight + 2 * borderY)));
	var width = (cols * (tileWidth + 2 * borderX) | 0) + (cols - 1) * spaceX;
	var height = (rows * (tileHeight + 2 * borderY) | 0) + (rows - 1) * spaceY;
	var combined = new openfl_display_BitmapData(width,height,true,0);
	var graphic = flixel_FlxG.bitmap.add(combined);
	var result = new flixel_graphics_frames_FlxTileFrames(graphic);
	var destPoint = new openfl_geom_Point(borderX,borderY);
	var X = 0;
	var Y = 0;
	var Width = width;
	var Height = height;
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var _this = flixel_math_FlxRect._pool.get();
	var X1 = X;
	var Y1 = Y;
	var Width1 = Width;
	var Height1 = Height;
	if(Height1 == null) {
		Height1 = 0;
	}
	if(Width1 == null) {
		Width1 = 0;
	}
	if(Y1 == null) {
		Y1 = 0;
	}
	if(X1 == null) {
		X1 = 0;
	}
	_this.x = X1;
	_this.y = Y1;
	_this.width = Width1;
	_this.height = Height1;
	var rect = _this;
	rect._inPool = false;
	result.region = rect;
	result.atlasFrame = null;
	var X = tileWidth;
	var Y = tileHeight;
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	result.tileSize = point;
	var X = spaceX;
	var Y = spaceY;
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	result.tileSpacing = point;
	result.numCols = cols;
	result.numRows = rows;
	var _g = 0;
	while(_g < tileframes.length) {
		var collection = tileframes[_g];
		++_g;
		var _g1 = 0;
		var _g2 = collection.frames;
		while(_g1 < _g2.length) {
			var frame = _g2[_g1];
			++_g1;
			frame.paint(combined,destPoint,true);
			var X = destPoint.x;
			var Y = destPoint.y;
			var Width = tileWidth;
			var Height = tileHeight;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
			var rect = _this;
			rect._inPool = false;
			var X2 = tileWidth;
			var Y2 = tileHeight;
			if(Y2 == null) {
				Y2 = 0;
			}
			if(X2 == null) {
				X2 = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X2,Y2);
			point._inPool = false;
			var X3 = 0;
			var Y3 = 0;
			if(Y3 == null) {
				Y3 = 0;
			}
			if(X3 == null) {
				X3 = 0;
			}
			var point1 = flixel_math_FlxPoint._pool.get().set(X3,Y3);
			point1._inPool = false;
			result.addAtlasFrame(rect,point,point1);
			destPoint.x += tileWidth + 2 * borderX + spaceX;
			if(destPoint.x >= combined.width) {
				destPoint.x = borderX;
				destPoint.y += tileHeight + 2 * borderY + spaceY;
			}
		}
	}
	flixel_util_FlxBitmapDataUtil.copyBorderPixels(combined,tileWidth,tileHeight,spaceX,spaceY,borderX,borderY,cols,rows);
	return result;
};
flixel_graphics_frames_FlxTileFrames.findFrame = function(graphic,tileSize,region,atlasFrame,tileSpacing,border) {
	var type = flixel_graphics_frames_FlxFrameCollectionType.TILES;
	var collections = graphic.frameCollections.get(type);
	if(collections == null) {
		collections = [];
		graphic.frameCollections.set(type,collections);
	}
	var tileFrames = collections;
	var _g = 0;
	while(_g < tileFrames.length) {
		var sheet = tileFrames[_g];
		++_g;
		if(sheet.equals(tileSize,region,null,tileSpacing,border)) {
			return sheet;
		}
	}
	return null;
};
flixel_graphics_frames_FlxTileFrames.__super__ = flixel_graphics_frames_FlxFramesCollection;
flixel_graphics_frames_FlxTileFrames.prototype = $extend(flixel_graphics_frames_FlxFramesCollection.prototype,{
	atlasFrame: null
	,region: null
	,tileSize: null
	,tileSpacing: null
	,numRows: null
	,numCols: null
	,getByTilePosition: function(column,row) {
		return this.frames[row * this.numCols + column];
	}
	,equals: function(tileSize,region,atlasFrame,tileSpacing,border) {
		if(this.region == null && this.atlasFrame == null) {
			return false;
		}
		if(atlasFrame != null) {
			region = atlasFrame.frame;
		}
		if(region == null) {
			var X = 0;
			var Y = 0;
			var Width = this.parent.width;
			var Height = this.parent.height;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X = X1;
			var Y = Y1;
			var Width = Width1;
			var Height = Height1;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect = _this;
			rect._inPool = false;
			var rect1 = rect;
			rect1._weak = true;
			region = rect1;
		}
		if(tileSpacing == null) {
			var X = 0;
			var Y = 0;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			var point1 = point;
			point1._weak = true;
			tileSpacing = point1;
		}
		if(border == null) {
			var X = 0;
			var Y = 0;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			var point1 = point;
			point1._weak = true;
			border = point1;
		}
		var tmp;
		var tmp1;
		var tmp2;
		if(this.atlasFrame == atlasFrame) {
			var _this = this.region;
			var result = Math.abs(_this.x - region.x) <= 0.0000001 && Math.abs(_this.y - region.y) <= 0.0000001 && Math.abs(_this.width - region.width) <= 0.0000001 && Math.abs(_this.height - region.height) <= 0.0000001;
			if(region._weak) {
				if(!region._inPool) {
					region._inPool = true;
					region._weak = false;
					flixel_math_FlxRect._pool.putUnsafe(region);
				}
			}
			tmp2 = result;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			var _this = this.tileSize;
			var result = Math.abs(_this.x - tileSize.x) <= 0.0000001 && Math.abs(_this.y - tileSize.y) <= 0.0000001;
			if(tileSize._weak) {
				tileSize.put();
			}
			tmp1 = result;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			var _this = this.tileSpacing;
			var result = Math.abs(_this.x - tileSpacing.x) <= 0.0000001 && Math.abs(_this.y - tileSpacing.y) <= 0.0000001;
			if(tileSpacing._weak) {
				tileSpacing.put();
			}
			tmp = result;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this = this.border;
			var result = Math.abs(_this.x - border.x) <= 0.0000001 && Math.abs(_this.y - border.y) <= 0.0000001;
			if(border._weak) {
				border.put();
			}
			return result;
		} else {
			return false;
		}
	}
	,addBorder: function(border) {
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		var resultBorder = point.addPoint(this.border).addPoint(border);
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		var _this = point;
		var point = this.tileSize;
		_this.set_x(point.x);
		_this.set_y(point.y);
		if(point._weak) {
			point.put();
		}
		var _this1 = _this;
		var X = 2 * border.x;
		var Y = 2 * border.y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _g = _this1;
		_g.set_x(_g.x - X);
		var _g = _this1;
		_g.set_y(_g.y - Y);
		var resultSize = _this1;
		var tileFrames = flixel_graphics_frames_FlxTileFrames.findFrame(this.parent,resultSize,this.region,this.atlasFrame,this.tileSpacing,resultBorder);
		if(tileFrames != null) {
			resultSize = flixel_util_FlxDestroyUtil.put(resultSize);
			return tileFrames;
		}
		tileFrames = new flixel_graphics_frames_FlxTileFrames(this.parent,resultBorder);
		var _this = flixel_math_FlxRect._pool.get();
		var X = 0;
		var Y = 0;
		var Width = 0;
		var Height = 0;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var rect = _this;
		rect._inPool = false;
		var _this = rect;
		var Rect = this.region;
		_this.x = Rect.x;
		_this.y = Rect.y;
		_this.width = Rect.width;
		_this.height = Rect.height;
		if(Rect._weak) {
			if(!Rect._inPool) {
				Rect._inPool = true;
				Rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(Rect);
			}
		}
		tileFrames.region = _this;
		tileFrames.atlasFrame = this.atlasFrame;
		tileFrames.tileSize = resultSize;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		var _this = point;
		var point = this.tileSpacing;
		_this.set_x(point.x);
		_this.set_y(point.y);
		if(point._weak) {
			point.put();
		}
		tileFrames.tileSpacing = _this;
		var _g = 0;
		var _g1 = this.frames;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			tileFrames.pushFrame(frame.setBorderTo(border));
		}
		return tileFrames;
	}
	,destroy: function() {
		flixel_graphics_frames_FlxFramesCollection.prototype.destroy.call(this);
		this.atlasFrame = null;
		this.region = flixel_util_FlxDestroyUtil.put(this.region);
		this.tileSize = flixel_util_FlxDestroyUtil.put(this.tileSize);
		this.tileSpacing = flixel_util_FlxDestroyUtil.put(this.tileSpacing);
	}
	,__class__: flixel_graphics_frames_FlxTileFrames
});
var flixel_graphics_tile_FlxDrawBaseItem = function() {
	this.blending = 0;
	this.hasColorOffsets = false;
	this.colored = false;
	this.antialiasing = false;
};
$hxClasses["flixel.graphics.tile.FlxDrawBaseItem"] = flixel_graphics_tile_FlxDrawBaseItem;
flixel_graphics_tile_FlxDrawBaseItem.__name__ = "flixel.graphics.tile.FlxDrawBaseItem";
flixel_graphics_tile_FlxDrawBaseItem.blendToInt = function(blend) {
	return 0;
};
flixel_graphics_tile_FlxDrawBaseItem.prototype = {
	nextTyped: null
	,next: null
	,graphics: null
	,antialiasing: null
	,colored: null
	,hasColorOffsets: null
	,blending: null
	,blend: null
	,type: null
	,reset: function() {
		this.graphics = null;
		this.antialiasing = false;
		this.nextTyped = null;
		this.next = null;
	}
	,dispose: function() {
		this.graphics = null;
		this.next = null;
		this.type = null;
		this.nextTyped = null;
	}
	,render: function(camera) {
		flixel_graphics_tile_FlxDrawBaseItem.drawCalls++;
	}
	,addQuad: function(frame,matrix,transform) {
	}
	,get_numVertices: function() {
		return 0;
	}
	,get_numTriangles: function() {
		return 0;
	}
	,__class__: flixel_graphics_tile_FlxDrawBaseItem
	,__properties__: {get_numTriangles:"get_numTriangles",get_numVertices:"get_numVertices"}
};
var flixel_graphics_tile_FlxDrawItemType = $hxEnums["flixel.graphics.tile.FlxDrawItemType"] = { __ename__ : "flixel.graphics.tile.FlxDrawItemType", __constructs__ : ["TILES","TRIANGLES"]
	,TILES: {_hx_index:0,__enum__:"flixel.graphics.tile.FlxDrawItemType",toString:$estr}
	,TRIANGLES: {_hx_index:1,__enum__:"flixel.graphics.tile.FlxDrawItemType",toString:$estr}
};
flixel_graphics_tile_FlxDrawItemType.__empty_constructs__ = [flixel_graphics_tile_FlxDrawItemType.TILES,flixel_graphics_tile_FlxDrawItemType.TRIANGLES];
var flixel_graphics_tile_FlxDrawQuadsItem = function() {
	flixel_graphics_tile_FlxDrawBaseItem.call(this);
	this.type = flixel_graphics_tile_FlxDrawItemType.TILES;
	this.rects = openfl_Vector.toFloatVector(null);
	this.transforms = openfl_Vector.toFloatVector(null);
	this.alphas = [];
};
$hxClasses["flixel.graphics.tile.FlxDrawQuadsItem"] = flixel_graphics_tile_FlxDrawQuadsItem;
flixel_graphics_tile_FlxDrawQuadsItem.__name__ = "flixel.graphics.tile.FlxDrawQuadsItem";
flixel_graphics_tile_FlxDrawQuadsItem.__super__ = flixel_graphics_tile_FlxDrawBaseItem;
flixel_graphics_tile_FlxDrawQuadsItem.prototype = $extend(flixel_graphics_tile_FlxDrawBaseItem.prototype,{
	shader: null
	,rects: null
	,transforms: null
	,alphas: null
	,colorMultipliers: null
	,colorOffsets: null
	,reset: function() {
		flixel_graphics_tile_FlxDrawBaseItem.prototype.reset.call(this);
		this.rects.set_length(0);
		this.transforms.set_length(0);
		this.alphas.splice(0,this.alphas.length);
		if(this.colorMultipliers != null) {
			this.colorMultipliers.splice(0,this.colorMultipliers.length);
		}
		if(this.colorOffsets != null) {
			this.colorOffsets.splice(0,this.colorOffsets.length);
		}
	}
	,dispose: function() {
		flixel_graphics_tile_FlxDrawBaseItem.prototype.dispose.call(this);
		this.rects = null;
		this.transforms = null;
		this.alphas = null;
		this.colorMultipliers = null;
		this.colorOffsets = null;
	}
	,addQuad: function(frame,matrix,transform) {
		var rect = frame.frame;
		this.rects.push(rect.x);
		this.rects.push(rect.y);
		this.rects.push(rect.width);
		this.rects.push(rect.height);
		this.transforms.push(matrix.a);
		this.transforms.push(matrix.b);
		this.transforms.push(matrix.c);
		this.transforms.push(matrix.d);
		this.transforms.push(matrix.tx);
		this.transforms.push(matrix.ty);
		this.alphas.push(transform != null ? transform.alphaMultiplier : 1.0);
		this.alphas.push(transform != null ? transform.alphaMultiplier : 1.0);
		this.alphas.push(transform != null ? transform.alphaMultiplier : 1.0);
		this.alphas.push(transform != null ? transform.alphaMultiplier : 1.0);
		if(this.colored || this.hasColorOffsets) {
			if(this.colorMultipliers == null) {
				this.colorMultipliers = [];
			}
			if(this.colorOffsets == null) {
				this.colorOffsets = [];
			}
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				if(transform != null) {
					this.colorMultipliers.push(transform.redMultiplier);
					this.colorMultipliers.push(transform.greenMultiplier);
					this.colorMultipliers.push(transform.blueMultiplier);
					this.colorOffsets.push(transform.redOffset);
					this.colorOffsets.push(transform.greenOffset);
					this.colorOffsets.push(transform.blueOffset);
					this.colorOffsets.push(transform.alphaOffset);
				} else {
					this.colorMultipliers.push(1);
					this.colorMultipliers.push(1);
					this.colorMultipliers.push(1);
					this.colorOffsets.push(0);
					this.colorOffsets.push(0);
					this.colorOffsets.push(0);
					this.colorOffsets.push(0);
				}
				this.colorMultipliers.push(1);
			}
		}
	}
	,render: function(camera) {
		if(this.rects.get_length() == 0) {
			return;
		}
		var shader = this.shader != null ? this.shader : this.graphics.shader;
		shader.bitmap.input = this.graphics.bitmap;
		shader.bitmap.filter = camera.antialiasing || this.antialiasing ? 4 : 5;
		shader.alpha.value = this.alphas;
		if(this.colored || this.hasColorOffsets) {
			shader.colorMultiplier.value = this.colorMultipliers;
			shader.colorOffset.value = this.colorOffsets;
		}
		var parameter = shader.hasTransform;
		if(parameter.value == null) {
			parameter.value = [];
		}
		parameter.value[0] = true;
		var parameter = shader.hasColorTransform;
		if(parameter.value == null) {
			parameter.value = [];
		}
		parameter.value[0] = this.colored || this.hasColorOffsets;
		camera.canvas.get_graphics().overrideBlendMode(this.blend);
		camera.canvas.get_graphics().beginShaderFill(shader);
		camera.canvas.get_graphics().drawQuads(this.rects,null,this.transforms);
		flixel_graphics_tile_FlxDrawBaseItem.prototype.render.call(this,camera);
	}
	,setParameterValue: function(parameter,value) {
		if(parameter.value == null) {
			parameter.value = [];
		}
		parameter.value[0] = value;
	}
	,__class__: flixel_graphics_tile_FlxDrawQuadsItem
});
var flixel_graphics_tile_FlxDrawTrianglesItem = function() {
	var _this = flixel_math_FlxRect._pool.get();
	_this.x = 0;
	_this.y = 0;
	_this.width = 0;
	_this.height = 0;
	_this._inPool = false;
	this.bounds = _this;
	this.colorsPosition = 0;
	this.indicesPosition = 0;
	this.verticesPosition = 0;
	this.colors = openfl_Vector.toIntVector(null);
	this.uvtData = openfl_Vector.toFloatVector(null);
	this.indices = openfl_Vector.toIntVector(null);
	this.vertices = openfl_Vector.toFloatVector(null);
	flixel_graphics_tile_FlxDrawBaseItem.call(this);
	this.type = flixel_graphics_tile_FlxDrawItemType.TRIANGLES;
};
$hxClasses["flixel.graphics.tile.FlxDrawTrianglesItem"] = flixel_graphics_tile_FlxDrawTrianglesItem;
flixel_graphics_tile_FlxDrawTrianglesItem.__name__ = "flixel.graphics.tile.FlxDrawTrianglesItem";
flixel_graphics_tile_FlxDrawTrianglesItem.inflateBounds = function(bounds,x,y) {
	if(x < bounds.x) {
		bounds.width += bounds.x - x;
		bounds.x = x;
	}
	if(y < bounds.y) {
		bounds.height += bounds.y - y;
		bounds.y = y;
	}
	if(x > bounds.x + bounds.width) {
		bounds.width = x - bounds.x;
	}
	if(y > bounds.y + bounds.height) {
		bounds.height = y - bounds.y;
	}
	return bounds;
};
flixel_graphics_tile_FlxDrawTrianglesItem.__super__ = flixel_graphics_tile_FlxDrawBaseItem;
flixel_graphics_tile_FlxDrawTrianglesItem.prototype = $extend(flixel_graphics_tile_FlxDrawBaseItem.prototype,{
	vertices: null
	,indices: null
	,uvtData: null
	,colors: null
	,verticesPosition: null
	,indicesPosition: null
	,colorsPosition: null
	,bounds: null
	,render: function(camera) {
		if(!flixel_FlxG.renderTile) {
			return;
		}
		if(this.get_numTriangles() <= 0) {
			return;
		}
		var tmp = camera.antialiasing || this.antialiasing;
		camera.canvas.get_graphics().beginBitmapFill(this.graphics.bitmap,null,true,tmp);
		camera.canvas.get_graphics().drawTriangles(this.vertices,this.indices,this.uvtData,1);
		camera.canvas.get_graphics().endFill();
		flixel_graphics_tile_FlxDrawBaseItem.prototype.render.call(this,camera);
	}
	,reset: function() {
		flixel_graphics_tile_FlxDrawBaseItem.prototype.reset.call(this);
		this.vertices.splice(0,this.vertices.get_length());
		this.indices.splice(0,this.indices.get_length());
		this.uvtData.splice(0,this.uvtData.get_length());
		this.colors.splice(0,this.colors.get_length());
		this.verticesPosition = 0;
		this.indicesPosition = 0;
		this.colorsPosition = 0;
	}
	,dispose: function() {
		flixel_graphics_tile_FlxDrawBaseItem.prototype.dispose.call(this);
		this.vertices = null;
		this.indices = null;
		this.uvtData = null;
		this.colors = null;
		this.bounds = null;
	}
	,addTriangles: function(vertices,indices,uvtData,colors,position,cameraBounds) {
		if(position == null) {
			position = flixel_graphics_tile_FlxDrawTrianglesItem.point.set();
		}
		if(cameraBounds == null) {
			var _this = flixel_graphics_tile_FlxDrawTrianglesItem.rect;
			var X = 0;
			var Y = 0;
			var Width = flixel_FlxG.width;
			var Height = flixel_FlxG.height;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			cameraBounds = _this;
		}
		var verticesLength = vertices.get_length();
		var prevVerticesLength = this.vertices.get_length();
		var numberOfVertices = verticesLength / 2 | 0;
		var prevIndicesLength = this.indices.get_length();
		var prevUVTDataLength = this.uvtData.get_length();
		var prevColorsLength = this.colors.get_length();
		var prevNumberOfVertices = this.get_numVertices();
		var tempX;
		var tempY;
		var i = 0;
		var currentVertexPosition = prevVerticesLength;
		while(i < verticesLength) {
			tempX = position.x + vertices.get(i);
			tempY = position.y + vertices.get(i + 1);
			this.vertices.set(currentVertexPosition++,tempX);
			this.vertices.set(currentVertexPosition++,tempY);
			if(i == 0) {
				var _this = this.bounds;
				var X = tempX;
				var Y = tempY;
				var Width = 0;
				var Height = 0;
				if(Height == null) {
					Height = 0;
				}
				if(Width == null) {
					Width = 0;
				}
				if(Y == null) {
					Y = 0;
				}
				if(X == null) {
					X = 0;
				}
				_this.x = X;
				_this.y = Y;
				_this.width = Width;
				_this.height = Height;
			} else {
				var bounds = this.bounds;
				if(tempX < bounds.x) {
					bounds.width += bounds.x - tempX;
					bounds.x = tempX;
				}
				if(tempY < bounds.y) {
					bounds.height += bounds.y - tempY;
					bounds.y = tempY;
				}
				if(tempX > bounds.x + bounds.width) {
					bounds.width = tempX - bounds.x;
				}
				if(tempY > bounds.y + bounds.height) {
					bounds.height = tempY - bounds.y;
				}
			}
			i += 2;
		}
		var Rect = this.bounds;
		var result = Rect.x + Rect.width > cameraBounds.x && Rect.x < cameraBounds.x + cameraBounds.width && Rect.y + Rect.height > cameraBounds.y && Rect.y < cameraBounds.y + cameraBounds.height;
		if(Rect._weak) {
			if(!Rect._inPool) {
				Rect._inPool = true;
				Rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(Rect);
			}
		}
		if(!result) {
			this.vertices.splice(this.vertices.get_length() - verticesLength,verticesLength);
		} else {
			var uvtDataLength = uvtData.get_length();
			var _g = 0;
			var _g1 = uvtDataLength;
			while(_g < _g1) {
				var i = _g++;
				this.uvtData.set(prevUVTDataLength + i,uvtData.get(i));
			}
			var indicesLength = indices.get_length();
			var _g = 0;
			var _g1 = indicesLength;
			while(_g < _g1) {
				var i = _g++;
				this.indices.set(prevIndicesLength + i,indices.get(i) + prevNumberOfVertices);
			}
			if(this.colored) {
				var _g = 0;
				var _g1 = numberOfVertices;
				while(_g < _g1) {
					var i = _g++;
					this.colors.set(prevColorsLength + i,colors.get(i));
				}
				this.colorsPosition += numberOfVertices;
			}
			this.verticesPosition += verticesLength;
			this.indicesPosition += indicesLength;
		}
		if(position._weak) {
			position.put();
		}
		if(cameraBounds._weak) {
			if(!cameraBounds._inPool) {
				cameraBounds._inPool = true;
				cameraBounds._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(cameraBounds);
			}
		}
	}
	,addQuad: function(frame,matrix,transform) {
		var prevVerticesPos = this.verticesPosition;
		var prevIndicesPos = this.indicesPosition;
		var prevColorsPos = this.colorsPosition;
		var prevNumberOfVertices = this.get_numVertices();
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		var point1 = point;
		var x1 = point1.x * matrix.a + point1.y * matrix.c + matrix.tx;
		var y1 = point1.x * matrix.b + point1.y * matrix.d + matrix.ty;
		point1.set(x1,y1);
		this.vertices.set(prevVerticesPos,point1.x);
		this.vertices.set(prevVerticesPos + 1,point1.y);
		this.uvtData.set(prevVerticesPos,frame.uv.x);
		this.uvtData.set(prevVerticesPos + 1,frame.uv.y);
		point1.set(frame.frame.width,0);
		var x1 = point1.x * matrix.a + point1.y * matrix.c + matrix.tx;
		var y1 = point1.x * matrix.b + point1.y * matrix.d + matrix.ty;
		point1.set(x1,y1);
		this.vertices.set(prevVerticesPos + 2,point1.x);
		this.vertices.set(prevVerticesPos + 3,point1.y);
		this.uvtData.set(prevVerticesPos + 2,frame.uv.width);
		this.uvtData.set(prevVerticesPos + 3,frame.uv.y);
		point1.set(frame.frame.width,frame.frame.height);
		var x1 = point1.x * matrix.a + point1.y * matrix.c + matrix.tx;
		var y1 = point1.x * matrix.b + point1.y * matrix.d + matrix.ty;
		point1.set(x1,y1);
		this.vertices.set(prevVerticesPos + 4,point1.x);
		this.vertices.set(prevVerticesPos + 5,point1.y);
		this.uvtData.set(prevVerticesPos + 4,frame.uv.width);
		this.uvtData.set(prevVerticesPos + 5,frame.uv.height);
		point1.set(0,frame.frame.height);
		var x1 = point1.x * matrix.a + point1.y * matrix.c + matrix.tx;
		var y1 = point1.x * matrix.b + point1.y * matrix.d + matrix.ty;
		point1.set(x1,y1);
		this.vertices.set(prevVerticesPos + 6,point1.x);
		this.vertices.set(prevVerticesPos + 7,point1.y);
		point1.put();
		this.uvtData.set(prevVerticesPos + 6,frame.uv.x);
		this.uvtData.set(prevVerticesPos + 7,frame.uv.height);
		this.indices.set(prevIndicesPos,prevNumberOfVertices);
		this.indices.set(prevIndicesPos + 1,prevNumberOfVertices + 1);
		this.indices.set(prevIndicesPos + 2,prevNumberOfVertices + 2);
		this.indices.set(prevIndicesPos + 3,prevNumberOfVertices + 2);
		this.indices.set(prevIndicesPos + 4,prevNumberOfVertices + 3);
		this.indices.set(prevIndicesPos + 5,prevNumberOfVertices);
		if(this.colored) {
			var red = 1.0;
			var green = 1.0;
			var blue = 1.0;
			var alpha = 1.0;
			if(transform != null) {
				red = transform.redMultiplier;
				green = transform.greenMultiplier;
				blue = transform.blueMultiplier;
				alpha = transform.alphaMultiplier;
			}
			var Alpha = alpha;
			if(Alpha == null) {
				Alpha = 1;
			}
			var color = flixel_util_FlxColor._new();
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 1;
			}
			var Value = Math.round(red * 255);
			color &= -16711681;
			color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(green * 255);
			color &= -65281;
			color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(blue * 255);
			color &= -256;
			color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			var Value = Math.round(Alpha1 * 255);
			color &= 16777215;
			color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
			var color1 = color;
			this.colors.set(prevColorsPos,color1);
			this.colors.set(prevColorsPos + 1,color1);
			this.colors.set(prevColorsPos + 2,color1);
			this.colors.set(prevColorsPos + 3,color1);
			this.colorsPosition += 4;
		}
		this.verticesPosition += 8;
		this.indicesPosition += 6;
	}
	,get_numVertices: function() {
		return this.vertices.get_length() / 2 | 0;
	}
	,get_numTriangles: function() {
		return this.indices.get_length() / 3 | 0;
	}
	,__class__: flixel_graphics_tile_FlxDrawTrianglesItem
});
var flixel_group_FlxTypedGroupIterator = function(GroupMembers,filter) {
	this._groupMembers = GroupMembers;
	this._filter = filter;
	this._cursor = 0;
	this._length = this._groupMembers.length;
};
$hxClasses["flixel.group.FlxTypedGroupIterator"] = flixel_group_FlxTypedGroupIterator;
flixel_group_FlxTypedGroupIterator.__name__ = "flixel.group.FlxTypedGroupIterator";
flixel_group_FlxTypedGroupIterator.prototype = {
	_groupMembers: null
	,_filter: null
	,_cursor: null
	,_length: null
	,next: function() {
		if(this.hasNext()) {
			return this._groupMembers[this._cursor++];
		} else {
			return null;
		}
	}
	,hasNext: function() {
		while(this._cursor < this._length && (this._groupMembers[this._cursor] == null || this._filter != null && !this._filter(this._groupMembers[this._cursor]))) this._cursor++;
		return this._cursor < this._length;
	}
	,__class__: flixel_group_FlxTypedGroupIterator
};
var flixel_input_FlxAccelerometer = function() {
	this.z = 0;
	this.y = 0;
	this.x = 0;
	if(openfl_sensors_Accelerometer.get_isSupported()) {
		this._sensor = new openfl_sensors_Accelerometer();
		this._sensor.addEventListener("update",$bind(this,this.update));
	}
};
$hxClasses["flixel.input.FlxAccelerometer"] = flixel_input_FlxAccelerometer;
flixel_input_FlxAccelerometer.__name__ = "flixel.input.FlxAccelerometer";
flixel_input_FlxAccelerometer.prototype = {
	x: null
	,y: null
	,z: null
	,_sensor: null
	,get_isSupported: function() {
		return openfl_sensors_Accelerometer.get_isSupported();
	}
	,update: function(Event1) {
		this.x = Event1.accelerationX;
		this.y = Event1.accelerationY;
		this.z = Event1.accelerationZ;
		this.x /= 10;
		this.y /= 10;
		this.z /= 10;
	}
	,__class__: flixel_input_FlxAccelerometer
	,__properties__: {get_isSupported:"get_isSupported"}
};
var flixel_input_FlxBaseKeyList = function(status,keyManager) {
	this.status = status;
	this.keyManager = keyManager;
};
$hxClasses["flixel.input.FlxBaseKeyList"] = flixel_input_FlxBaseKeyList;
flixel_input_FlxBaseKeyList.__name__ = "flixel.input.FlxBaseKeyList";
flixel_input_FlxBaseKeyList.prototype = {
	status: null
	,keyManager: null
	,check: function(keyCode) {
		return this.keyManager.checkStatus(keyCode,this.status);
	}
	,get_ANY: function() {
		var _g = 0;
		var _g1 = this.keyManager._keyListArray;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null && this.keyManager.checkStatus(key.ID,this.status)) {
				return true;
			}
		}
		return false;
	}
	,get_NONE: function() {
		var _g = 0;
		var _g1 = this.keyManager._keyListArray;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null && this.keyManager.checkStatus(key.ID,this.status)) {
				return false;
			}
		}
		return true;
	}
	,__class__: flixel_input_FlxBaseKeyList
	,__properties__: {get_NONE:"get_NONE",get_ANY:"get_ANY"}
};
var flixel_input_FlxInput = function(ID) {
	this.last = 0;
	this.current = 0;
	this.ID = ID;
};
$hxClasses["flixel.input.FlxInput"] = flixel_input_FlxInput;
flixel_input_FlxInput.__name__ = "flixel.input.FlxInput";
flixel_input_FlxInput.__interfaces__ = [flixel_input_IFlxInput];
flixel_input_FlxInput.prototype = {
	ID: null
	,current: null
	,last: null
	,press: function() {
		this.last = this.current;
		this.current = this.current == 1 || this.current == 2 ? 1 : 2;
	}
	,release: function() {
		this.last = this.current;
		this.current = this.current == 1 || this.current == 2 ? -1 : 0;
	}
	,update: function() {
		if(this.last == -1 && this.current == -1) {
			this.current = 0;
		} else if(this.last == 2 && this.current == 2) {
			this.current = 1;
		}
		this.last = this.current;
	}
	,reset: function() {
		this.current = 0;
		this.last = 0;
	}
	,hasState: function(state) {
		switch(state) {
		case -1:
			return this.current == -1;
		case 0:
			if(this.current != 0) {
				return this.current == -1;
			} else {
				return true;
			}
			break;
		case 1:
			if(this.current != 1) {
				return this.current == 2;
			} else {
				return true;
			}
			break;
		case 2:
			return this.current == 2;
		}
	}
	,get_justReleased: function() {
		return this.current == -1;
	}
	,get_released: function() {
		if(this.current != 0) {
			return this.current == -1;
		} else {
			return true;
		}
	}
	,get_pressed: function() {
		if(this.current != 1) {
			return this.current == 2;
		} else {
			return true;
		}
	}
	,get_justPressed: function() {
		return this.current == 2;
	}
	,__class__: flixel_input_FlxInput
	,__properties__: {get_justPressed:"get_justPressed",get_pressed:"get_pressed",get_released:"get_released",get_justReleased:"get_justReleased"}
};
var flixel_input_FlxKeyManager = function(createKeyList) {
	this._keyListMap = new haxe_ds_IntMap();
	this._keyListArray = [];
	this.preventDefaultKeys = [];
	this.enabled = true;
	openfl_Lib.get_current().stage.addEventListener("keyDown",$bind(this,this.onKeyDown));
	openfl_Lib.get_current().stage.addEventListener("keyUp",$bind(this,this.onKeyUp));
	this.pressed = createKeyList(1,this);
	this.released = createKeyList(0,this);
	this.justPressed = createKeyList(2,this);
	this.justReleased = createKeyList(-1,this);
};
$hxClasses["flixel.input.FlxKeyManager"] = flixel_input_FlxKeyManager;
flixel_input_FlxKeyManager.__name__ = "flixel.input.FlxKeyManager";
flixel_input_FlxKeyManager.__interfaces__ = [flixel_input_IFlxInputManager];
flixel_input_FlxKeyManager.prototype = {
	enabled: null
	,preventDefaultKeys: null
	,pressed: null
	,justPressed: null
	,released: null
	,justReleased: null
	,_keyListArray: null
	,_keyListMap: null
	,anyPressed: function(KeyArray) {
		return this.checkKeyArrayState(KeyArray,1);
	}
	,anyJustPressed: function(KeyArray) {
		return this.checkKeyArrayState(KeyArray,2);
	}
	,anyJustReleased: function(KeyArray) {
		return this.checkKeyArrayState(KeyArray,-1);
	}
	,firstPressed: function() {
		var _g = 0;
		var _g1 = this._keyListArray;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null && (key.current == 1 || key.current == 2)) {
				return key.ID;
			}
		}
		return -1;
	}
	,firstJustPressed: function() {
		var _g = 0;
		var _g1 = this._keyListArray;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null && key.current == 2) {
				return key.ID;
			}
		}
		return -1;
	}
	,firstJustReleased: function() {
		var _g = 0;
		var _g1 = this._keyListArray;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null && key.current == -1) {
				return key.ID;
			}
		}
		return -1;
	}
	,checkStatus: function(KeyCode,Status) {
		switch(KeyCode) {
		case -2:
			switch(Status) {
			case -1:
				return this.justReleased.get_ANY();
			case 0:
				return this.released.get_ANY();
			case 1:
				return this.pressed.get_ANY();
			case 2:
				return this.justPressed.get_ANY();
			}
			break;
		case -1:
			switch(Status) {
			case -1:
				return this.justReleased.get_NONE();
			case 0:
				return this.released.get_NONE();
			case 1:
				return this.pressed.get_NONE();
			case 2:
				return this.justPressed.get_NONE();
			}
			break;
		default:
			var key = this._keyListMap.h[KeyCode];
			if(key == null) {
				return false;
			}
			return key.hasState(Status);
		}
	}
	,getIsDown: function() {
		var keysDown = [];
		var _g = 0;
		var _g1 = this._keyListArray;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null && (key.current == 1 || key.current == 2)) {
				keysDown.push(key);
			}
		}
		return keysDown;
	}
	,destroy: function() {
		this._keyListArray = null;
		this._keyListMap = null;
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this._keyListArray;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null) {
				key.release();
			}
		}
	}
	,update: function() {
		var _g = 0;
		var _g1 = this._keyListArray;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null) {
				key.update();
			}
		}
	}
	,checkKeyArrayState: function(KeyArray,State) {
		if(KeyArray == null) {
			return false;
		}
		var _g = 0;
		while(_g < KeyArray.length) {
			var code = KeyArray[_g];
			++_g;
			if(this.checkStatus(code,State)) {
				return true;
			}
		}
		return false;
	}
	,onKeyUp: function(event) {
		var c = this.resolveKeyCode(event);
		this.handlePreventDefaultKeys(c,event);
		if(this.enabled) {
			var key = this._keyListMap.h[c];
			if(key != null) {
				key.release();
			}
		}
	}
	,onKeyDown: function(event) {
		var c = this.resolveKeyCode(event);
		this.handlePreventDefaultKeys(c,event);
		if(this.enabled) {
			var key = this._keyListMap.h[c];
			if(key != null) {
				key.press();
			}
		}
	}
	,handlePreventDefaultKeys: function(keyCode,event) {
		var key = this._keyListMap.h[keyCode];
		if(key != null && this.preventDefaultKeys != null && this.preventDefaultKeys.indexOf(key.ID) != -1) {
			event.stopImmediatePropagation();
			event.stopPropagation();
			event.preventDefault();
		}
	}
	,inKeyArray: function(KeyArray,Event1) {
		if(KeyArray == null) {
			return false;
		} else {
			var code = this.resolveKeyCode(Event1);
			var _g = 0;
			while(_g < KeyArray.length) {
				var key = KeyArray[_g];
				++_g;
				if(key == code || key == -2) {
					return true;
				}
			}
		}
		return false;
	}
	,resolveKeyCode: function(e) {
		return e.keyCode;
	}
	,updateKeyStates: function(KeyCode,Down) {
		var key = this._keyListMap.h[KeyCode];
		if(key != null) {
			if(Down) {
				key.press();
			} else {
				key.release();
			}
		}
	}
	,onFocus: function() {
	}
	,onFocusLost: function() {
		this.reset();
	}
	,getKey: function(KeyCode) {
		return this._keyListMap.h[KeyCode];
	}
	,__class__: flixel_input_FlxKeyManager
};
var flixel_input_FlxSwipe = function(ID,StartPosition,EndPosition,StartTimeInTicks) {
	this.ID = ID;
	this.startPosition = StartPosition;
	this.endPosition = EndPosition;
	this._startTimeInTicks = StartTimeInTicks;
	this._endTimeInTicks = flixel_FlxG.game.ticks;
};
$hxClasses["flixel.input.FlxSwipe"] = flixel_input_FlxSwipe;
flixel_input_FlxSwipe.__name__ = "flixel.input.FlxSwipe";
flixel_input_FlxSwipe.prototype = {
	ID: null
	,startPosition: null
	,endPosition: null
	,_startTimeInTicks: null
	,_endTimeInTicks: null
	,toString: function() {
		var value = this.ID;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "ID";
		_this.value = value;
		var value = this.startPosition;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "start";
		_this1.value = value;
		var value = this.endPosition;
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "end";
		_this2.value = value;
		var dx = this.startPosition.x - this.endPosition.x;
		var dy = this.startPosition.y - this.endPosition.y;
		var value = Math.sqrt(dx * dx + dy * dy);
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "distance";
		_this3.value = value;
		var value = this.startPosition.angleBetween(this.endPosition);
		var _this4 = flixel_util_LabelValuePair._pool.get();
		_this4.label = "angle";
		_this4.value = value;
		var value = (this._endTimeInTicks - this._startTimeInTicks) / 1000;
		var _this5 = flixel_util_LabelValuePair._pool.get();
		_this5.label = "duration";
		_this5.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3,_this4,_this5]);
	}
	,get_distance: function() {
		var dx = this.startPosition.x - this.endPosition.x;
		var dy = this.startPosition.y - this.endPosition.y;
		return Math.sqrt(dx * dx + dy * dy);
	}
	,get_angle: function() {
		return this.startPosition.angleBetween(this.endPosition);
	}
	,get_duration: function() {
		return (this._endTimeInTicks - this._startTimeInTicks) / 1000;
	}
	,__class__: flixel_input_FlxSwipe
	,__properties__: {get_duration:"get_duration",get_angle:"get_angle",get_distance:"get_distance"}
};
var flixel_input_actions_FlxAction = function(InputType,Name) {
	this.steamOriginsChanged = false;
	this._checked = false;
	this._timestamp = 0;
	this._y = null;
	this._x = null;
	this.triggered = false;
	this.steamHandle = -1;
	this.type = InputType;
	this.name = Name;
	this.inputs = [];
};
$hxClasses["flixel.input.actions.FlxAction"] = flixel_input_actions_FlxAction;
flixel_input_actions_FlxAction.__name__ = "flixel.input.actions.FlxAction";
flixel_input_actions_FlxAction.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_input_actions_FlxAction.prototype = {
	type: null
	,name: null
	,steamHandle: null
	,triggered: null
	,inputs: null
	,_x: null
	,_y: null
	,_timestamp: null
	,_checked: null
	,steamOriginsChanged: null
	,getFirstSteamOrigin: function() {
		return 0;
	}
	,getSteamOrigins: function(origins) {
		return origins;
	}
	,removeAll: function(Destroy) {
		if(Destroy == null) {
			Destroy = true;
		}
		var len = this.inputs.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var j = len - i - 1;
			var input = this.inputs[j];
			this.remove(input,Destroy);
			this.inputs.splice(j,1);
		}
	}
	,remove: function(Input,Destroy) {
		if(Destroy == null) {
			Destroy = false;
		}
		if(Input == null) {
			return;
		}
		HxOverrides.remove(this.inputs,Input);
		if(Destroy) {
			Input.destroy();
		}
	}
	,toString: function() {
		return "FlxAction(" + Std.string(this.type) + ") name:" + this.name;
	}
	,check: function() {
		this._x = null;
		this._y = null;
		if(this._timestamp == flixel_FlxG.game.ticks) {
			this.triggered = this._checked;
			return this._checked;
		}
		this._timestamp = flixel_FlxG.game.ticks;
		this._checked = false;
		var len = this.inputs != null ? this.inputs.length : 0;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var j = len - i - 1;
			var input = this.inputs[j];
			if(input.destroyed) {
				this.inputs.splice(j,1);
				continue;
			}
			input.update();
			if(input.check(this)) {
				this._checked = true;
			}
		}
		this.triggered = this._checked;
		return this._checked;
	}
	,update: function() {
		this.check();
	}
	,destroy: function() {
		flixel_util_FlxDestroyUtil.destroyArray(this.inputs);
		this.inputs = null;
	}
	,match: function(other) {
		if(this.name == other.name) {
			return this.steamHandle == other.steamHandle;
		} else {
			return false;
		}
	}
	,addGenericInput: function(input) {
		if(this.inputs == null) {
			this.inputs = [];
		}
		if(!this.checkExists(input)) {
			this.inputs.push(input);
		}
		return this;
	}
	,checkExists: function(input) {
		if(this.inputs == null) {
			return false;
		}
		return this.inputs.indexOf(input) != -1;
	}
	,__class__: flixel_input_actions_FlxAction
};
var flixel_input_actions_FlxActionDigital = function(Name,Callback) {
	if(Name == null) {
		Name = "";
	}
	flixel_input_actions_FlxAction.call(this,flixel_input_actions_FlxInputType.DIGITAL,Name);
	this.callback = Callback;
};
$hxClasses["flixel.input.actions.FlxActionDigital"] = flixel_input_actions_FlxActionDigital;
flixel_input_actions_FlxActionDigital.__name__ = "flixel.input.actions.FlxActionDigital";
flixel_input_actions_FlxActionDigital.__super__ = flixel_input_actions_FlxAction;
flixel_input_actions_FlxActionDigital.prototype = $extend(flixel_input_actions_FlxAction.prototype,{
	callback: null
	,add: function(input) {
		this.addGenericInput(input);
		return this;
	}
	,addInput: function(Input,Trigger) {
		return this.add(new flixel_input_actions_FlxActionInputDigitalIFlxInput(Input,Trigger));
	}
	,addGamepad: function(InputID,Trigger,GamepadID) {
		if(GamepadID == null) {
			GamepadID = -2;
		}
		return this.add(new flixel_input_actions_FlxActionInputDigitalGamepad(InputID,Trigger,GamepadID));
	}
	,addKey: function(Key,Trigger) {
		return this.add(new flixel_input_actions_FlxActionInputDigitalKeyboard(Key,Trigger));
	}
	,addMouse: function(ButtonID,Trigger) {
		return this.add(new flixel_input_actions_FlxActionInputDigitalMouse(ButtonID,Trigger));
	}
	,addMouseWheel: function(Positive,Trigger) {
		return this.add(new flixel_input_actions_FlxActionInputDigitalMouseWheel(Positive,Trigger));
	}
	,destroy: function() {
		this.callback = null;
		flixel_input_actions_FlxAction.prototype.destroy.call(this);
	}
	,check: function() {
		var val = flixel_input_actions_FlxAction.prototype.check.call(this);
		if(val && this.callback != null) {
			this.callback(this);
		}
		return val;
	}
	,__class__: flixel_input_actions_FlxActionDigital
});
var flixel_input_actions_FlxActionAnalog = function(Name,Callback) {
	if(Name == null) {
		Name = "";
	}
	flixel_input_actions_FlxAction.call(this,flixel_input_actions_FlxInputType.ANALOG,Name);
	this.callback = Callback;
};
$hxClasses["flixel.input.actions.FlxActionAnalog"] = flixel_input_actions_FlxActionAnalog;
flixel_input_actions_FlxActionAnalog.__name__ = "flixel.input.actions.FlxActionAnalog";
flixel_input_actions_FlxActionAnalog.__super__ = flixel_input_actions_FlxAction;
flixel_input_actions_FlxActionAnalog.prototype = $extend(flixel_input_actions_FlxAction.prototype,{
	callback: null
	,add: function(input) {
		this.addGenericInput(input);
		return this;
	}
	,addMouseClickAndDragMotion: function(ButtonID,Trigger,Axis,PixelsPerUnit,DeadZone,InvertY,InvertX) {
		if(InvertX == null) {
			InvertX = false;
		}
		if(InvertY == null) {
			InvertY = false;
		}
		if(DeadZone == null) {
			DeadZone = 0.1;
		}
		if(PixelsPerUnit == null) {
			PixelsPerUnit = 10;
		}
		if(Axis == null) {
			Axis = 3;
		}
		return this.add(new flixel_input_actions_FlxActionInputAnalogClickAndDragMouseMotion(ButtonID,Trigger,Axis,PixelsPerUnit,DeadZone,InvertY,InvertX));
	}
	,addMouseMotion: function(Trigger,Axis,PixelsPerUnit,DeadZone,InvertY,InvertX) {
		if(InvertX == null) {
			InvertX = false;
		}
		if(InvertY == null) {
			InvertY = false;
		}
		if(DeadZone == null) {
			DeadZone = 0.1;
		}
		if(PixelsPerUnit == null) {
			PixelsPerUnit = 10;
		}
		if(Axis == null) {
			Axis = 3;
		}
		return this.add(new flixel_input_actions_FlxActionInputAnalogMouseMotion(Trigger,Axis,PixelsPerUnit,DeadZone,InvertY,InvertX));
	}
	,addMousePosition: function(Trigger,Axis) {
		if(Axis == null) {
			Axis = 3;
		}
		return this.add(new flixel_input_actions_FlxActionInputAnalogMousePosition(Trigger,Axis));
	}
	,addGamepad: function(InputID,Trigger,Axis,GamepadID) {
		if(GamepadID == null) {
			GamepadID = -2;
		}
		if(Axis == null) {
			Axis = 3;
		}
		return this.add(new flixel_input_actions_FlxActionInputAnalogGamepad(InputID,Trigger,Axis,GamepadID));
	}
	,update: function() {
		this._x = null;
		this._y = null;
		flixel_input_actions_FlxAction.prototype.update.call(this);
	}
	,destroy: function() {
		this.callback = null;
		flixel_input_actions_FlxAction.prototype.destroy.call(this);
	}
	,toString: function() {
		return "FlxAction(" + Std.string(this.type) + ") name:" + this.name + " x/y:" + this._x + "," + this._y;
	}
	,check: function() {
		var val = flixel_input_actions_FlxAction.prototype.check.call(this);
		if(val && this.callback != null) {
			this.callback(this);
		}
		return val;
	}
	,get_x: function() {
		if(this._x != null) {
			return this._x;
		} else {
			return 0;
		}
	}
	,get_y: function() {
		if(this._y != null) {
			return this._y;
		} else {
			return 0;
		}
	}
	,__class__: flixel_input_actions_FlxActionAnalog
	,__properties__: {get_y:"get_y",get_x:"get_x"}
});
var flixel_input_actions_FlxActionInput = function(InputType,Device1,InputID,Trigger,DeviceID) {
	if(DeviceID == null) {
		DeviceID = -2;
	}
	this.destroyed = false;
	this.type = InputType;
	this.device = Device1;
	this.inputID = InputID;
	this.trigger = Trigger;
	this.deviceID = DeviceID;
};
$hxClasses["flixel.input.actions.FlxActionInput"] = flixel_input_actions_FlxActionInput;
flixel_input_actions_FlxActionInput.__name__ = "flixel.input.actions.FlxActionInput";
flixel_input_actions_FlxActionInput.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_input_actions_FlxActionInput.prototype = {
	type: null
	,device: null
	,deviceID: null
	,destroyed: null
	,inputID: null
	,trigger: null
	,update: function() {
	}
	,destroy: function() {
		this.destroyed = true;
	}
	,check: function(action) {
		return false;
	}
	,compareState: function(condition,state) {
		switch(condition) {
		case -1:
			return state == -1;
		case 0:
			if(state != 0) {
				return state == -1;
			} else {
				return true;
			}
			break;
		case 1:
			if(state != 1) {
				return state == 2;
			} else {
				return true;
			}
			break;
		case 2:
			return state == 2;
		default:
			return false;
		}
	}
	,__class__: flixel_input_actions_FlxActionInput
};
var flixel_input_actions_FlxInputType = $hxEnums["flixel.input.actions.FlxInputType"] = { __ename__ : "flixel.input.actions.FlxInputType", __constructs__ : ["DIGITAL","ANALOG"]
	,DIGITAL: {_hx_index:0,__enum__:"flixel.input.actions.FlxInputType",toString:$estr}
	,ANALOG: {_hx_index:1,__enum__:"flixel.input.actions.FlxInputType",toString:$estr}
};
flixel_input_actions_FlxInputType.__empty_constructs__ = [flixel_input_actions_FlxInputType.DIGITAL,flixel_input_actions_FlxInputType.ANALOG];
var flixel_input_actions_FlxInputDevice = $hxEnums["flixel.input.actions.FlxInputDevice"] = { __ename__ : "flixel.input.actions.FlxInputDevice", __constructs__ : ["UNKNOWN","MOUSE","MOUSE_WHEEL","KEYBOARD","GAMEPAD","STEAM_CONTROLLER","IFLXINPUT_OBJECT","OTHER","ANDROID","ALL","NONE"]
	,UNKNOWN: {_hx_index:0,__enum__:"flixel.input.actions.FlxInputDevice",toString:$estr}
	,MOUSE: {_hx_index:1,__enum__:"flixel.input.actions.FlxInputDevice",toString:$estr}
	,MOUSE_WHEEL: {_hx_index:2,__enum__:"flixel.input.actions.FlxInputDevice",toString:$estr}
	,KEYBOARD: {_hx_index:3,__enum__:"flixel.input.actions.FlxInputDevice",toString:$estr}
	,GAMEPAD: {_hx_index:4,__enum__:"flixel.input.actions.FlxInputDevice",toString:$estr}
	,STEAM_CONTROLLER: {_hx_index:5,__enum__:"flixel.input.actions.FlxInputDevice",toString:$estr}
	,IFLXINPUT_OBJECT: {_hx_index:6,__enum__:"flixel.input.actions.FlxInputDevice",toString:$estr}
	,OTHER: {_hx_index:7,__enum__:"flixel.input.actions.FlxInputDevice",toString:$estr}
	,ANDROID: {_hx_index:8,__enum__:"flixel.input.actions.FlxInputDevice",toString:$estr}
	,ALL: {_hx_index:9,__enum__:"flixel.input.actions.FlxInputDevice",toString:$estr}
	,NONE: {_hx_index:10,__enum__:"flixel.input.actions.FlxInputDevice",toString:$estr}
};
flixel_input_actions_FlxInputDevice.__empty_constructs__ = [flixel_input_actions_FlxInputDevice.UNKNOWN,flixel_input_actions_FlxInputDevice.MOUSE,flixel_input_actions_FlxInputDevice.MOUSE_WHEEL,flixel_input_actions_FlxInputDevice.KEYBOARD,flixel_input_actions_FlxInputDevice.GAMEPAD,flixel_input_actions_FlxInputDevice.STEAM_CONTROLLER,flixel_input_actions_FlxInputDevice.IFLXINPUT_OBJECT,flixel_input_actions_FlxInputDevice.OTHER,flixel_input_actions_FlxInputDevice.ANDROID,flixel_input_actions_FlxInputDevice.ALL,flixel_input_actions_FlxInputDevice.NONE];
var flixel_input_actions_FlxInputDeviceID = function() { };
$hxClasses["flixel.input.actions.FlxInputDeviceID"] = flixel_input_actions_FlxInputDeviceID;
flixel_input_actions_FlxInputDeviceID.__name__ = "flixel.input.actions.FlxInputDeviceID";
var flixel_input_actions_FlxInputDeviceObject = function(Device1,ID,Model) {
	if(Model == null) {
		Model = "";
	}
	this.device = Device1;
	this.id = ID;
	this.model = Model;
};
$hxClasses["flixel.input.actions.FlxInputDeviceObject"] = flixel_input_actions_FlxInputDeviceObject;
flixel_input_actions_FlxInputDeviceObject.__name__ = "flixel.input.actions.FlxInputDeviceObject";
flixel_input_actions_FlxInputDeviceObject.prototype = {
	device: null
	,id: null
	,model: null
	,toString: function() {
		return "{device:" + Std.string(this.device) + ",id:" + this.id + ",model:" + this.model + "}";
	}
	,__class__: flixel_input_actions_FlxInputDeviceObject
};
var flixel_input_actions_FlxActionInputAnalog = function(Device1,InputID,Trigger,Axis,DeviceID) {
	if(DeviceID == null) {
		DeviceID = -2;
	}
	if(Axis == null) {
		Axis = 3;
	}
	this.y = 0;
	this.x = 0;
	flixel_input_actions_FlxActionInput.call(this,flixel_input_actions_FlxInputType.ANALOG,Device1,InputID,Trigger,DeviceID);
	this.axis = Axis;
	this.xMoved = new flixel_input_FlxInput(0);
	this.yMoved = new flixel_input_FlxInput(1);
};
$hxClasses["flixel.input.actions.FlxActionInputAnalog"] = flixel_input_actions_FlxActionInputAnalog;
flixel_input_actions_FlxActionInputAnalog.__name__ = "flixel.input.actions.FlxActionInputAnalog";
flixel_input_actions_FlxActionInputAnalog.__super__ = flixel_input_actions_FlxActionInput;
flixel_input_actions_FlxActionInputAnalog.prototype = $extend(flixel_input_actions_FlxActionInput.prototype,{
	axis: null
	,x: null
	,y: null
	,xMoved: null
	,yMoved: null
	,check: function(Action1) {
		var returnVal;
		switch(this.axis) {
		case 0:
			var state = this.xMoved.current;
			switch(this.trigger) {
			case -1:
				returnVal = state == -1;
				break;
			case 0:
				returnVal = state == 0 || state == -1;
				break;
			case 1:
				returnVal = state == 1 || state == 2;
				break;
			case 2:
				returnVal = state == 2;
				break;
			default:
				returnVal = false;
			}
			break;
		case 1:
			var state = this.yMoved.current;
			switch(this.trigger) {
			case -1:
				returnVal = state == -1;
				break;
			case 0:
				returnVal = state == 0 || state == -1;
				break;
			case 1:
				returnVal = state == 1 || state == 2;
				break;
			case 2:
				returnVal = state == 2;
				break;
			default:
				returnVal = false;
			}
			break;
		case 2:
			var state = this.xMoved.current;
			var returnVal1;
			switch(this.trigger) {
			case -1:
				returnVal1 = state == -1;
				break;
			case 0:
				returnVal1 = state == 0 || state == -1;
				break;
			case 1:
				returnVal1 = state == 1 || state == 2;
				break;
			case 2:
				returnVal1 = state == 2;
				break;
			default:
				returnVal1 = false;
			}
			if(returnVal1) {
				var state = this.yMoved.current;
				switch(this.trigger) {
				case -1:
					returnVal = state == -1;
					break;
				case 0:
					returnVal = state == 0 || state == -1;
					break;
				case 1:
					returnVal = state == 1 || state == 2;
					break;
				case 2:
					returnVal = state == 2;
					break;
				default:
					returnVal = false;
				}
			} else {
				returnVal = false;
			}
			break;
		case 3:
			switch(this.trigger) {
			case -1:
				returnVal = this.checkAxis(true,-1) && this.checkAxis(false,0) || this.checkAxis(true,0) && this.checkAxis(false,-1);
				break;
			case 0:
				returnVal = this.checkAxis(true,0) || this.checkAxis(false,0);
				break;
			case 1:
				returnVal = this.checkAxis(true,1) || this.checkAxis(false,1);
				break;
			case 2:
				returnVal = this.checkAxis(true,2) && this.checkAxis(false,2) || this.checkAxis(true,2) && this.checkAxis(false,0) || this.checkAxis(true,0) && this.checkAxis(false,2);
				break;
			}
			break;
		}
		if(returnVal) {
			if(Action1._x == null) {
				Action1._x = this.x;
			}
			if(Action1._y == null) {
				Action1._y = this.y;
			}
		}
		return returnVal;
	}
	,checkAxis: function(isX,state) {
		var input = isX ? this.xMoved : this.yMoved;
		var state1 = input.current;
		switch(state) {
		case -1:
			return state1 == -1;
		case 0:
			if(state1 != 0) {
				return state1 == -1;
			} else {
				return true;
			}
			break;
		case 1:
			if(state1 != 1) {
				return state1 == 2;
			} else {
				return true;
			}
			break;
		case 2:
			return state1 == 2;
		default:
			return false;
		}
	}
	,updateValues: function(X,Y) {
		if(X != 0) {
			this.xMoved.press();
		} else {
			this.xMoved.release();
		}
		if(Y != 0) {
			this.yMoved.press();
		} else {
			this.yMoved.release();
		}
		this.x = X;
		this.y = Y;
	}
	,__class__: flixel_input_actions_FlxActionInputAnalog
});
var flixel_input_actions_FlxActionInputAnalogMouseMotion = function(Trigger,Axis,PixelsPerUnit,DeadZone,InvertY,InvertX) {
	if(InvertX == null) {
		InvertX = false;
	}
	if(InvertY == null) {
		InvertY = false;
	}
	if(DeadZone == null) {
		DeadZone = 0.1;
	}
	if(PixelsPerUnit == null) {
		PixelsPerUnit = 10;
	}
	if(Axis == null) {
		Axis = 3;
	}
	this.lastY = 0;
	this.lastX = 0;
	this.pixelsPerUnit = PixelsPerUnit;
	if(this.pixelsPerUnit < 1) {
		this.pixelsPerUnit = 1;
	}
	this.deadZone = DeadZone;
	this.invertX = InvertX;
	this.invertY = InvertY;
	flixel_input_actions_FlxActionInputAnalog.call(this,flixel_input_actions_FlxInputDevice.MOUSE,-1,Trigger,Axis);
};
$hxClasses["flixel.input.actions.FlxActionInputAnalogMouseMotion"] = flixel_input_actions_FlxActionInputAnalogMouseMotion;
flixel_input_actions_FlxActionInputAnalogMouseMotion.__name__ = "flixel.input.actions.FlxActionInputAnalogMouseMotion";
flixel_input_actions_FlxActionInputAnalogMouseMotion.__super__ = flixel_input_actions_FlxActionInputAnalog;
flixel_input_actions_FlxActionInputAnalogMouseMotion.prototype = $extend(flixel_input_actions_FlxActionInputAnalog.prototype,{
	lastX: null
	,lastY: null
	,pixelsPerUnit: null
	,deadZone: null
	,invertX: null
	,invertY: null
	,update: function() {
		this.updateXYPosition(flixel_FlxG.mouse.x,flixel_FlxG.mouse.y);
	}
	,updateXYPosition: function(X,Y) {
		var xDiff = X - this.lastX;
		var yDiff = Y - this.lastY;
		this.lastX = X;
		this.lastY = Y;
		if(this.invertX) {
			xDiff *= -1;
		}
		if(this.invertY) {
			yDiff *= -1;
		}
		xDiff /= this.pixelsPerUnit;
		yDiff /= this.pixelsPerUnit;
		if(Math.abs(xDiff) < this.deadZone) {
			xDiff = 0;
		}
		if(Math.abs(yDiff) < this.deadZone) {
			yDiff = 0;
		}
		this.updateValues(xDiff,yDiff);
	}
	,__class__: flixel_input_actions_FlxActionInputAnalogMouseMotion
});
var flixel_input_actions_FlxActionInputAnalogClickAndDragMouseMotion = function(ButtonID,Trigger,Axis,PixelsPerUnit,DeadZone,InvertY,InvertX) {
	if(InvertX == null) {
		InvertX = false;
	}
	if(InvertY == null) {
		InvertY = false;
	}
	if(DeadZone == null) {
		DeadZone = 0.1;
	}
	if(PixelsPerUnit == null) {
		PixelsPerUnit = 10;
	}
	if(Axis == null) {
		Axis = 3;
	}
	flixel_input_actions_FlxActionInputAnalogMouseMotion.call(this,Trigger,Axis,PixelsPerUnit,DeadZone,InvertY,InvertX);
	this.button = ButtonID;
};
$hxClasses["flixel.input.actions.FlxActionInputAnalogClickAndDragMouseMotion"] = flixel_input_actions_FlxActionInputAnalogClickAndDragMouseMotion;
flixel_input_actions_FlxActionInputAnalogClickAndDragMouseMotion.__name__ = "flixel.input.actions.FlxActionInputAnalogClickAndDragMouseMotion";
flixel_input_actions_FlxActionInputAnalogClickAndDragMouseMotion.__super__ = flixel_input_actions_FlxActionInputAnalogMouseMotion;
flixel_input_actions_FlxActionInputAnalogClickAndDragMouseMotion.prototype = $extend(flixel_input_actions_FlxActionInputAnalogMouseMotion.prototype,{
	button: null
	,updateValues: function(X,Y) {
		var pass = false;
		switch(this.button) {
		case -3:
			var _this = flixel_FlxG.mouse._rightButton;
			pass = _this.current == 1 || _this.current == 2;
			break;
		case -2:
			var _this = flixel_FlxG.mouse._middleButton;
			pass = _this.current == 1 || _this.current == 2;
			break;
		case -1:
			var _this = flixel_FlxG.mouse._leftButton;
			pass = _this.current == 1 || _this.current == 2;
			break;
		}
		if(!pass) {
			X = 0;
			Y = 0;
		}
		flixel_input_actions_FlxActionInputAnalogMouseMotion.prototype.updateValues.call(this,X,Y);
	}
	,__class__: flixel_input_actions_FlxActionInputAnalogClickAndDragMouseMotion
});
var flixel_input_actions_FlxActionInputAnalogMousePosition = function(Trigger,Axis) {
	if(Axis == null) {
		Axis = 3;
	}
	flixel_input_actions_FlxActionInputAnalog.call(this,flixel_input_actions_FlxInputDevice.MOUSE,-1,Trigger,Axis);
};
$hxClasses["flixel.input.actions.FlxActionInputAnalogMousePosition"] = flixel_input_actions_FlxActionInputAnalogMousePosition;
flixel_input_actions_FlxActionInputAnalogMousePosition.__name__ = "flixel.input.actions.FlxActionInputAnalogMousePosition";
flixel_input_actions_FlxActionInputAnalogMousePosition.__super__ = flixel_input_actions_FlxActionInputAnalog;
flixel_input_actions_FlxActionInputAnalogMousePosition.prototype = $extend(flixel_input_actions_FlxActionInputAnalog.prototype,{
	update: function() {
		this.updateValues(flixel_FlxG.mouse.x,flixel_FlxG.mouse.y);
	}
	,updateValues: function(X,Y) {
		if(X != this.x) {
			this.xMoved.press();
		} else {
			this.xMoved.release();
		}
		if(Y != this.y) {
			this.yMoved.press();
		} else {
			this.yMoved.release();
		}
		this.x = X;
		this.y = Y;
	}
	,__class__: flixel_input_actions_FlxActionInputAnalogMousePosition
});
var flixel_input_actions_FlxActionInputAnalogGamepad = function(InputID,Trigger,Axis,GamepadID) {
	if(GamepadID == null) {
		GamepadID = -2;
	}
	if(Axis == null) {
		Axis = 3;
	}
	flixel_input_actions_FlxActionInputAnalog.call(this,flixel_input_actions_FlxInputDevice.GAMEPAD,InputID,Trigger,Axis,GamepadID);
};
$hxClasses["flixel.input.actions.FlxActionInputAnalogGamepad"] = flixel_input_actions_FlxActionInputAnalogGamepad;
flixel_input_actions_FlxActionInputAnalogGamepad.__name__ = "flixel.input.actions.FlxActionInputAnalogGamepad";
flixel_input_actions_FlxActionInputAnalogGamepad.__super__ = flixel_input_actions_FlxActionInputAnalog;
flixel_input_actions_FlxActionInputAnalogGamepad.prototype = $extend(flixel_input_actions_FlxActionInputAnalog.prototype,{
	update: function() {
		if(this.deviceID == -1) {
			return;
		}
		var gamepad = null;
		if(this.deviceID == -2) {
			gamepad = flixel_FlxG.gamepads.getFirstActiveGamepad();
		} else if(this.deviceID >= 0) {
			gamepad = flixel_FlxG.gamepads._activeGamepads[this.deviceID];
		}
		if(gamepad != null) {
			switch(this.inputID) {
			case 17:
				this.updateValues(gamepad.analog.value.gamepad.getAxis(17),0);
				break;
			case 18:
				this.updateValues(gamepad.analog.value.gamepad.getAxis(18),0);
				break;
			case 19:
				var _this = gamepad.analog.value.gamepad;
				var tmp = _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(19));
				var _this = gamepad.analog.value.gamepad;
				this.updateValues(tmp,_this.getYAxisRaw(_this.mapping.getAnalogStick(19)));
				break;
			case 20:
				var _this = gamepad.analog.value.gamepad;
				var tmp = _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(20));
				var _this = gamepad.analog.value.gamepad;
				this.updateValues(tmp,_this.getYAxisRaw(_this.mapping.getAnalogStick(20)));
				break;
			case 21:
				var tmp;
				var _this = gamepad.pressed;
				var id = 13;
				var _this1 = _this.gamepad;
				var Status = _this.status;
				var tmp1;
				switch(id) {
				case -2:
					tmp1 = _this1.anyButton(Status);
					break;
				case -1:
					tmp1 = !_this1.anyButton(Status);
					break;
				default:
					var RawID = _this1.mapping.getRawID(id);
					var button = _this1.buttons[RawID];
					tmp1 = button != null && button.hasState(Status);
				}
				if(tmp1) {
					tmp = -1.0;
				} else {
					var _this = gamepad.pressed;
					var id = 14;
					var _this1 = _this.gamepad;
					var Status = _this.status;
					var tmp1;
					switch(id) {
					case -2:
						tmp1 = _this1.anyButton(Status);
						break;
					case -1:
						tmp1 = !_this1.anyButton(Status);
						break;
					default:
						var RawID = _this1.mapping.getRawID(id);
						var button = _this1.buttons[RawID];
						tmp1 = button != null && button.hasState(Status);
					}
					tmp = tmp1 ? 1.0 : 0.0;
				}
				var tmp1;
				var _this = gamepad.pressed;
				var id = 11;
				var _this1 = _this.gamepad;
				var Status = _this.status;
				var tmp2;
				switch(id) {
				case -2:
					tmp2 = _this1.anyButton(Status);
					break;
				case -1:
					tmp2 = !_this1.anyButton(Status);
					break;
				default:
					var RawID = _this1.mapping.getRawID(id);
					var button = _this1.buttons[RawID];
					tmp2 = button != null && button.hasState(Status);
				}
				if(tmp2) {
					tmp1 = -1.0;
				} else {
					var _this = gamepad.pressed;
					var id = 12;
					var _this1 = _this.gamepad;
					var Status = _this.status;
					var tmp2;
					switch(id) {
					case -2:
						tmp2 = _this1.anyButton(Status);
						break;
					case -1:
						tmp2 = !_this1.anyButton(Status);
						break;
					default:
						var RawID = _this1.mapping.getRawID(id);
						var button = _this1.buttons[RawID];
						tmp2 = button != null && button.hasState(Status);
					}
					tmp1 = tmp2 ? 1.0 : 0.0;
				}
				this.updateValues(tmp,tmp1);
				break;
			case 28:
				this.updateValues(gamepad.analog.value.gamepad.getAxis(28),0);
				break;
			case 29:
				this.updateValues(gamepad.analog.value.gamepad.getAxis(29),0);
				break;
			}
		} else {
			this.updateValues(0,0);
		}
	}
	,__class__: flixel_input_actions_FlxActionInputAnalogGamepad
});
var flixel_input_actions_FlxActionInputAnalogSteam = function(ActionHandle,Trigger,Axis,DeviceID) {
	if(DeviceID == null) {
		DeviceID = -1;
	}
	if(Axis == null) {
		Axis = 3;
	}
	flixel_input_actions_FlxActionInputAnalog.call(this,flixel_input_actions_FlxInputDevice.STEAM_CONTROLLER,ActionHandle,Trigger,Axis,DeviceID);
};
$hxClasses["flixel.input.actions.FlxActionInputAnalogSteam"] = flixel_input_actions_FlxActionInputAnalogSteam;
flixel_input_actions_FlxActionInputAnalogSteam.__name__ = "flixel.input.actions.FlxActionInputAnalogSteam";
flixel_input_actions_FlxActionInputAnalogSteam.__super__ = flixel_input_actions_FlxActionInputAnalog;
flixel_input_actions_FlxActionInputAnalogSteam.prototype = $extend(flixel_input_actions_FlxActionInputAnalog.prototype,{
	update: function() {
	}
	,__class__: flixel_input_actions_FlxActionInputAnalogSteam
});
var flixel_input_actions_FlxActionInputDigital = function(Device1,InputID,Trigger,DeviceID) {
	if(DeviceID == null) {
		DeviceID = -2;
	}
	flixel_input_actions_FlxActionInput.call(this,flixel_input_actions_FlxInputType.DIGITAL,Device1,InputID,Trigger,DeviceID);
	this.inputID = InputID;
};
$hxClasses["flixel.input.actions.FlxActionInputDigital"] = flixel_input_actions_FlxActionInputDigital;
flixel_input_actions_FlxActionInputDigital.__name__ = "flixel.input.actions.FlxActionInputDigital";
flixel_input_actions_FlxActionInputDigital.__super__ = flixel_input_actions_FlxActionInput;
flixel_input_actions_FlxActionInputDigital.prototype = $extend(flixel_input_actions_FlxActionInput.prototype,{
	__class__: flixel_input_actions_FlxActionInputDigital
});
var flixel_input_actions_FlxActionInputDigitalMouseWheel = function(Positive,Trigger) {
	this.sign = 0;
	flixel_input_actions_FlxActionInputDigital.call(this,flixel_input_actions_FlxInputDevice.MOUSE_WHEEL,0,Trigger);
	this.input = new flixel_input_FlxInput(0);
	this.sign = Positive ? 1 : -1;
};
$hxClasses["flixel.input.actions.FlxActionInputDigitalMouseWheel"] = flixel_input_actions_FlxActionInputDigitalMouseWheel;
flixel_input_actions_FlxActionInputDigitalMouseWheel.__name__ = "flixel.input.actions.FlxActionInputDigitalMouseWheel";
flixel_input_actions_FlxActionInputDigitalMouseWheel.__super__ = flixel_input_actions_FlxActionInputDigital;
flixel_input_actions_FlxActionInputDigitalMouseWheel.prototype = $extend(flixel_input_actions_FlxActionInputDigital.prototype,{
	input: null
	,sign: null
	,check: function(Action1) {
		switch(this.trigger) {
		case -1:
			return this.input.current == -1;
		case 0:
			var _this = this.input;
			if(!(_this.current == 0 || _this.current == -1)) {
				return this.input.current == -1;
			} else {
				return true;
			}
			break;
		case 1:
			var _this = this.input;
			if(!(_this.current == 1 || _this.current == 2)) {
				return this.input.current == 2;
			} else {
				return true;
			}
			break;
		case 2:
			return this.input.current == 2;
		default:
			return false;
		}
	}
	,update: function() {
		flixel_input_actions_FlxActionInputDigital.prototype.update.call(this);
		if(flixel_FlxG.mouse.wheel * this.sign > 0) {
			this.input.press();
		} else {
			this.input.release();
		}
	}
	,__class__: flixel_input_actions_FlxActionInputDigitalMouseWheel
});
var flixel_input_actions_FlxActionInputDigitalGamepad = function(InputID,Trigger,GamepadID) {
	if(GamepadID == null) {
		GamepadID = -2;
	}
	flixel_input_actions_FlxActionInputDigital.call(this,flixel_input_actions_FlxInputDevice.GAMEPAD,InputID,Trigger,GamepadID);
	this.input = new flixel_input_FlxInput(InputID);
};
$hxClasses["flixel.input.actions.FlxActionInputDigitalGamepad"] = flixel_input_actions_FlxActionInputDigitalGamepad;
flixel_input_actions_FlxActionInputDigitalGamepad.__name__ = "flixel.input.actions.FlxActionInputDigitalGamepad";
flixel_input_actions_FlxActionInputDigitalGamepad.__super__ = flixel_input_actions_FlxActionInputDigital;
flixel_input_actions_FlxActionInputDigitalGamepad.prototype = $extend(flixel_input_actions_FlxActionInputDigital.prototype,{
	input: null
	,toString: function() {
		return "FlxActionInputDigitalGamepad{inputID:" + this.inputID + ",trigger:" + this.trigger + ",deviceID:" + this.deviceID + ",device:" + Std.string(this.device) + ",type:" + Std.string(this.type) + "}";
	}
	,update: function() {
		flixel_input_actions_FlxActionInputDigital.prototype.update.call(this);
		if(this.deviceID == -1) {
			if(flixel_FlxG.gamepads.anyHasState(this.inputID,1) || flixel_FlxG.gamepads.anyHasState(this.inputID,2)) {
				this.input.press();
			} else {
				this.input.release();
			}
		} else {
			var gamepad = null;
			if(this.deviceID == -2) {
				gamepad = flixel_FlxG.gamepads.getFirstActiveGamepad();
			} else if(this.deviceID >= 0) {
				gamepad = flixel_FlxG.gamepads._activeGamepads[this.deviceID];
			}
			if(gamepad != null) {
				if(this.inputID == -2 && this.trigger == 0) {
					if(gamepad.released.get_ANY()) {
						this.input.release();
					} else {
						this.input.press();
					}
				} else {
					var tmp;
					var ID = this.inputID;
					var Status = 1;
					var tmp1;
					switch(ID) {
					case -2:
						tmp1 = gamepad.anyButton(Status);
						break;
					case -1:
						tmp1 = !gamepad.anyButton(Status);
						break;
					default:
						var RawID = gamepad.mapping.getRawID(ID);
						var button = gamepad.buttons[RawID];
						tmp1 = button != null && button.hasState(Status);
					}
					if(!tmp1) {
						var ID = this.inputID;
						var Status = 2;
						switch(ID) {
						case -2:
							tmp = gamepad.anyButton(Status);
							break;
						case -1:
							tmp = !gamepad.anyButton(Status);
							break;
						default:
							var RawID = gamepad.mapping.getRawID(ID);
							var button = gamepad.buttons[RawID];
							tmp = button != null && button.hasState(Status);
						}
					} else {
						tmp = true;
					}
					if(tmp) {
						this.input.press();
					} else {
						this.input.release();
					}
				}
			} else if(this.deviceID == -2) {
				this.input.release();
			}
		}
	}
	,check: function(Action1) {
		switch(this.trigger) {
		case -1:
			return this.input.current == -1;
		case 0:
			var _this = this.input;
			if(!(_this.current == 0 || _this.current == -1)) {
				return this.input.current == -1;
			} else {
				return true;
			}
			break;
		case 1:
			var _this = this.input;
			if(!(_this.current == 1 || _this.current == 2)) {
				return this.input.current == 2;
			} else {
				return true;
			}
			break;
		case 2:
			return this.input.current == 2;
		default:
			return false;
		}
	}
	,__class__: flixel_input_actions_FlxActionInputDigitalGamepad
});
var flixel_input_actions_FlxActionInputDigitalKeyboard = function(Key,Trigger) {
	flixel_input_actions_FlxActionInputDigital.call(this,flixel_input_actions_FlxInputDevice.KEYBOARD,Key,Trigger);
};
$hxClasses["flixel.input.actions.FlxActionInputDigitalKeyboard"] = flixel_input_actions_FlxActionInputDigitalKeyboard;
flixel_input_actions_FlxActionInputDigitalKeyboard.__name__ = "flixel.input.actions.FlxActionInputDigitalKeyboard";
flixel_input_actions_FlxActionInputDigitalKeyboard.__super__ = flixel_input_actions_FlxActionInputDigital;
flixel_input_actions_FlxActionInputDigitalKeyboard.prototype = $extend(flixel_input_actions_FlxActionInputDigital.prototype,{
	check: function(Action1) {
		switch(this.trigger) {
		case -1:
			return flixel_FlxG.keys.checkStatus(this.inputID,-1);
		case 0:
			if(!flixel_FlxG.keys.checkStatus(this.inputID,0)) {
				return flixel_FlxG.keys.checkStatus(this.inputID,-1);
			} else {
				return true;
			}
			break;
		case 1:
			if(!flixel_FlxG.keys.checkStatus(this.inputID,1)) {
				return flixel_FlxG.keys.checkStatus(this.inputID,2);
			} else {
				return true;
			}
			break;
		case 2:
			return flixel_FlxG.keys.checkStatus(this.inputID,2);
		default:
			return false;
		}
	}
	,__class__: flixel_input_actions_FlxActionInputDigitalKeyboard
});
var flixel_input_actions_FlxActionInputDigitalMouse = function(ButtonID,Trigger) {
	flixel_input_actions_FlxActionInputDigital.call(this,flixel_input_actions_FlxInputDevice.MOUSE,ButtonID,Trigger);
};
$hxClasses["flixel.input.actions.FlxActionInputDigitalMouse"] = flixel_input_actions_FlxActionInputDigitalMouse;
flixel_input_actions_FlxActionInputDigitalMouse.__name__ = "flixel.input.actions.FlxActionInputDigitalMouse";
flixel_input_actions_FlxActionInputDigitalMouse.__super__ = flixel_input_actions_FlxActionInputDigital;
flixel_input_actions_FlxActionInputDigitalMouse.prototype = $extend(flixel_input_actions_FlxActionInputDigital.prototype,{
	check: function(Action1) {
		switch(this.inputID) {
		case -3:
			switch(this.trigger) {
			case -1:
				return flixel_FlxG.mouse._rightButton.current == -1;
			case 0:
				var _this = flixel_FlxG.mouse._rightButton;
				if(_this.current == 1 || _this.current == 2) {
					return flixel_FlxG.mouse._rightButton.current == -1;
				} else {
					return true;
				}
				break;
			case 1:
				var _this = flixel_FlxG.mouse._rightButton;
				if(!(_this.current == 1 || _this.current == 2)) {
					return flixel_FlxG.mouse._rightButton.current == 2;
				} else {
					return true;
				}
				break;
			case 2:
				return flixel_FlxG.mouse._rightButton.current == 2;
			}
			break;
		case -2:
			switch(this.trigger) {
			case -1:
				return flixel_FlxG.mouse._middleButton.current == -1;
			case 0:
				var _this = flixel_FlxG.mouse._middleButton;
				if(_this.current == 1 || _this.current == 2) {
					return flixel_FlxG.mouse._middleButton.current == -1;
				} else {
					return true;
				}
				break;
			case 1:
				var _this = flixel_FlxG.mouse._middleButton;
				if(!(_this.current == 1 || _this.current == 2)) {
					return flixel_FlxG.mouse._middleButton.current == 2;
				} else {
					return true;
				}
				break;
			case 2:
				return flixel_FlxG.mouse._middleButton.current == 2;
			}
			break;
		case -1:
			switch(this.trigger) {
			case -1:
				return flixel_FlxG.mouse._leftButton.current == -1;
			case 0:
				var _this = flixel_FlxG.mouse._leftButton;
				if(_this.current == 1 || _this.current == 2) {
					return flixel_FlxG.mouse._leftButton.current == -1;
				} else {
					return true;
				}
				break;
			case 1:
				var _this = flixel_FlxG.mouse._leftButton;
				if(!(_this.current == 1 || _this.current == 2)) {
					return flixel_FlxG.mouse._leftButton.current == 2;
				} else {
					return true;
				}
				break;
			case 2:
				return flixel_FlxG.mouse._leftButton.current == 2;
			}
			break;
		default:
			return false;
		}
	}
	,__class__: flixel_input_actions_FlxActionInputDigitalMouse
});
var flixel_input_actions_FlxActionInputDigitalSteam = function(ActionHandle,Trigger,DeviceHandle) {
	if(DeviceHandle == null) {
		DeviceHandle = -2;
	}
	flixel_input_actions_FlxActionInputDigital.call(this,flixel_input_actions_FlxInputDevice.STEAM_CONTROLLER,ActionHandle,Trigger,DeviceHandle);
};
$hxClasses["flixel.input.actions.FlxActionInputDigitalSteam"] = flixel_input_actions_FlxActionInputDigitalSteam;
flixel_input_actions_FlxActionInputDigitalSteam.__name__ = "flixel.input.actions.FlxActionInputDigitalSteam";
flixel_input_actions_FlxActionInputDigitalSteam.__super__ = flixel_input_actions_FlxActionInputDigital;
flixel_input_actions_FlxActionInputDigitalSteam.prototype = $extend(flixel_input_actions_FlxActionInputDigital.prototype,{
	steamInput: null
	,check: function(Action1) {
		switch(this.trigger) {
		case -1:
			return this.steamInput.current == -1;
		case 0:
			var _this = this.steamInput;
			if(_this.current == 0 || _this.current == -1) {
				return this.steamInput.current == -1;
			} else {
				return true;
			}
			break;
		case 1:
			var _this = this.steamInput;
			if(!(_this.current == 1 || _this.current == 2)) {
				return this.steamInput.current == 2;
			} else {
				return true;
			}
			break;
		case 2:
			return this.steamInput.current == 2;
		}
	}
	,update: function() {
		var controllerHandle = this.deviceID;
		if(controllerHandle == -2) {
			controllerHandle = flixel_input_actions_FlxSteamController.getFirstActiveHandle();
		}
		var data = flixel_input_actions_FlxSteamController.getDigitalActionData(controllerHandle,this.inputID);
		if(data.bActive && data.bState) {
			this.steamInput.press();
		} else {
			this.steamInput.release();
		}
	}
	,getSteamControllerData: function(controllerHandle) {
		if(controllerHandle == -2) {
			controllerHandle = flixel_input_actions_FlxSteamController.getFirstActiveHandle();
		}
		var data = flixel_input_actions_FlxSteamController.getDigitalActionData(controllerHandle,this.inputID);
		if(data.bActive) {
			return data.bState;
		} else {
			return false;
		}
	}
	,__class__: flixel_input_actions_FlxActionInputDigitalSteam
});
var flixel_input_actions_FlxActionInputDigitalIFlxInput = function(Input,Trigger) {
	flixel_input_actions_FlxActionInputDigital.call(this,flixel_input_actions_FlxInputDevice.IFLXINPUT_OBJECT,0,Trigger);
	this.input = Input;
};
$hxClasses["flixel.input.actions.FlxActionInputDigitalIFlxInput"] = flixel_input_actions_FlxActionInputDigitalIFlxInput;
flixel_input_actions_FlxActionInputDigitalIFlxInput.__name__ = "flixel.input.actions.FlxActionInputDigitalIFlxInput";
flixel_input_actions_FlxActionInputDigitalIFlxInput.__super__ = flixel_input_actions_FlxActionInputDigital;
flixel_input_actions_FlxActionInputDigitalIFlxInput.prototype = $extend(flixel_input_actions_FlxActionInputDigital.prototype,{
	input: null
	,check: function(action) {
		switch(this.trigger) {
		case -1:
			return this.input.get_justReleased();
		case 0:
			if(this.input.get_pressed()) {
				return this.input.get_justReleased();
			} else {
				return true;
			}
			break;
		case 1:
			if(!this.input.get_pressed()) {
				return this.input.get_justPressed();
			} else {
				return true;
			}
			break;
		case 2:
			return this.input.get_justPressed();
		default:
			return false;
		}
	}
	,destroy: function() {
		flixel_input_actions_FlxActionInputDigital.prototype.destroy.call(this);
		this.input = null;
	}
	,__class__: flixel_input_actions_FlxActionInputDigitalIFlxInput
});
var flixel_input_actions_FlxActionManager = function() {
	this.resetOnStateSwitch = flixel_input_actions_ResetPolicy.DEFAULT_SET_ONLY;
	this.defaultSet = null;
	this.sets = [];
	this.register = new flixel_input_actions__$FlxActionManager_ActionSetRegister();
	this.deviceConnected = new flixel_util__$FlxSignal_FlxSignal3();
	this.deviceDisconnected = new flixel_util__$FlxSignal_FlxSignal3();
	this.inputsChanged = new flixel_util__$FlxSignal_FlxSignal1();
	flixel_FlxG.gamepads.deviceConnected.add($bind(this,this.onDeviceConnected));
	flixel_FlxG.gamepads.deviceDisconnected.add($bind(this,this.onDeviceDisconnected));
	flixel_input_actions_FlxSteamController.onControllerConnect = $bind(this,this.updateSteamControllers);
	flixel_input_actions_FlxSteamController.onOriginUpdate = $bind(this,this.updateSteamOrigins);
	flixel_FlxG.signals.preStateSwitch.add($bind(this,this.onStateSwitched));
};
$hxClasses["flixel.input.actions.FlxActionManager"] = flixel_input_actions_FlxActionManager;
flixel_input_actions_FlxActionManager.__name__ = "flixel.input.actions.FlxActionManager";
flixel_input_actions_FlxActionManager.__interfaces__ = [flixel_util_IFlxDestroyable,flixel_input_IFlxInputManager];
flixel_input_actions_FlxActionManager.prototype = {
	sets: null
	,register: null
	,defaultSet: null
	,deviceDisconnected: null
	,deviceConnected: null
	,inputsChanged: null
	,resetOnStateSwitch: null
	,activateSet: function(ActionSet,Device1,DeviceID) {
		this.register.activate(ActionSet,Device1,DeviceID);
		this.onChange();
	}
	,addActions: function(Actions,ActionSet) {
		if(ActionSet == null) {
			ActionSet = 0;
		}
		var success = true;
		var _g = 0;
		while(_g < Actions.length) {
			var Action1 = Actions[_g];
			++_g;
			var result = this.addAction(Action1);
			if(!result) {
				success = false;
			}
		}
		return success;
	}
	,addAction: function(Action1,ActionSet) {
		if(ActionSet == null) {
			ActionSet = 0;
		}
		var success = false;
		if(this.sets == null) {
			this.sets = [];
		}
		if(this.sets.length == 0) {
			this.defaultSet = new flixel_input_actions_FlxActionSet("default");
			var defaultSetIndex = this.addSet(this.defaultSet);
			this.activateSet(defaultSetIndex,flixel_input_actions_FlxInputDevice.ALL,-1);
		}
		if(ActionSet >= 0 && ActionSet < this.sets.length) {
			success = this.sets[ActionSet].add(Action1);
		}
		this.onChange();
		return success;
	}
	,addSet: function(set) {
		if(this.sets.indexOf(set) != -1) {
			return -1;
		}
		this.sets.push(set);
		this.onChange();
		return this.sets.length - 1;
	}
	,deactivateSet: function(ActionSet,DeviceID) {
		if(DeviceID == null) {
			DeviceID = -1;
		}
		this.register.activate(ActionSet,flixel_input_actions_FlxInputDevice.NONE,DeviceID);
		this.onChange();
	}
	,destroy: function() {
		this.sets = flixel_util_FlxDestroyUtil.destroyArray(this.sets);
		this.register = flixel_util_FlxDestroyUtil.destroy(this.register);
	}
	,getSetIndex: function(Name) {
		var _g = 0;
		var _g1 = this.sets.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.sets[i].name == Name) {
				return i;
			}
		}
		return -1;
	}
	,getSetName: function(Index) {
		if(Index >= 0 && Index < this.sets.length) {
			return this.sets[Index].name;
		}
		return "";
	}
	,getSet: function(Index) {
		if(Index >= 0 && Index < this.sets.length) {
			return this.sets[Index];
		}
		return null;
	}
	,getSetActivatedForDevice: function(device,deviceID) {
		if(deviceID == null) {
			deviceID = -1;
		}
		var id = -1;
		var index = -1;
		switch(device._hx_index) {
		case 1:
			index = this.register.mouseSet;
			break;
		case 3:
			index = this.register.keyboardSet;
			break;
		case 4:
			switch(deviceID) {
			case -3:
				index = -1;
				break;
			case -2:
				id = flixel_FlxG.gamepads.getFirstActiveGamepadID();
				break;
			case -1:
				index = this.register.gamepadAllSet;
				break;
			default:
				if(this.register.gamepadAllSet != -1) {
					index = this.register.gamepadAllSet;
				} else {
					id = deviceID;
				}
			}
			if(id >= 0 && id < this.register.gamepadSets.length) {
				index = this.register.gamepadSets[id];
			}
			break;
		case 5:
			switch(deviceID) {
			case -3:
				index = -1;
				break;
			case -1:
				index = this.register.steamControllerAllSet;
				break;
			default:
				if(this.register.steamControllerAllSet != -1) {
					index = this.register.steamControllerAllSet;
				} else {
					id = deviceID;
				}
			}
			if(id >= 0 && id < this.register.steamControllerSets.length) {
				index = this.register.steamControllerSets[id];
			}
			break;
		case 9:
			if(deviceID == -1) {
				index = this.register.gamepadAllSet;
			}
			break;
		default:
			index = -1;
		}
		if(index >= 0 && index < this.sets.length) {
			return this.sets[index];
		}
		return null;
	}
	,initFromJson: function(data,CallbackDigital,CallbackAnalog) {
		if(data == null) {
			return 0;
		}
		var i = 0;
		var actionSets = data.actionSets;
		if(actionSets == null) {
			return 0;
		}
		var _g = 0;
		while(_g < actionSets.length) {
			var set = actionSets[_g];
			++_g;
			if(this.addSet(flixel_input_actions_FlxActionSet.fromJson(set,CallbackDigital,CallbackAnalog)) != -1) {
				++i;
			}
		}
		this.onChange();
		return i;
	}
	,exportToJson: function() {
		var space = "\t";
		return JSON.stringify({ "actionSets" : this.sets},function(key,value) {
			if(((value) instanceof flixel_input_actions_FlxAction)) {
				var fa = value;
				return fa.name;
			}
			if(((value) instanceof flixel_input_actions_FlxActionSet)) {
				var fas = value;
				return { "name" : fas.name, "digitalActions" : fas.digitalActions, "analogActions" : fas.analogActions};
			}
			return value;
		},space);
	}
	,removeSet: function(Set,Destroy) {
		if(Destroy == null) {
			Destroy = true;
		}
		var success = HxOverrides.remove(this.sets,Set);
		if(success) {
			if(Destroy) {
				flixel_util_FlxDestroyUtil.destroy(Set);
			}
			this.onChange();
		}
		return success;
	}
	,removeAction: function(Action1,ActionSet) {
		var success = false;
		if(ActionSet >= 0 && ActionSet < this.sets.length) {
			success = this.sets[ActionSet].remove(Action1);
		}
		this.onChange();
		return success;
	}
	,reset: function() {
	}
	,get_numSets: function() {
		return this.sets.length;
	}
	,onChange: function() {
		this.register.markActiveSets(this.sets);
	}
	,onDeviceConnected: function(gamepad) {
		this.deviceConnected.dispatch(flixel_input_actions_FlxInputDevice.GAMEPAD,gamepad.id,Std.string(gamepad.model).toLowerCase());
	}
	,onDeviceDisconnected: function(gamepad) {
		if(gamepad != null) {
			var actionSet = this.getSetActivatedForDevice(flixel_input_actions_FlxInputDevice.GAMEPAD,gamepad.id);
			if(actionSet != null && actionSet.active) {
				var id = gamepad.id;
				var model = gamepad.model != null ? Std.string(gamepad.model).toLowerCase() : "";
				this.deviceDisconnected.dispatch(flixel_input_actions_FlxInputDevice.GAMEPAD,id,model);
			}
		}
	}
	,onFocus: function() {
	}
	,onFocusLost: function() {
	}
	,onStateSwitched: function() {
		switch(this.resetOnStateSwitch._hx_index) {
		case 1:
			while(this.sets.length > 0) this.removeSet(this.getSet(0),true);
			this.defaultSet = null;
			break;
		case 2:
			if(this.defaultSet != null) {
				this.removeSet(this.defaultSet,true);
			}
			this.defaultSet = null;
			break;
		default:
		}
	}
	,onSteamConnected: function(handle) {
		var allSetIndex = this.register.steamControllerAllSet;
		if(allSetIndex != -1) {
			this.activateSet(allSetIndex,flixel_input_actions_FlxInputDevice.STEAM_CONTROLLER,-1);
		} else {
			var actionSet = this.getSetActivatedForDevice(flixel_input_actions_FlxInputDevice.STEAM_CONTROLLER,handle);
			if(actionSet != null && actionSet.active) {
				this.activateSet(this.getSetIndex(actionSet.name),flixel_input_actions_FlxInputDevice.STEAM_CONTROLLER,handle);
			}
		}
		this.deviceConnected.dispatch(flixel_input_actions_FlxInputDevice.STEAM_CONTROLLER,handle,"");
	}
	,onSteamDisconnected: function(handle) {
		if(handle >= 0) {
			var actionSet = this.getSetActivatedForDevice(flixel_input_actions_FlxInputDevice.STEAM_CONTROLLER,handle);
			if(actionSet != null && actionSet.active) {
				this.deviceDisconnected.dispatch(flixel_input_actions_FlxInputDevice.STEAM_CONTROLLER,handle,"");
			}
		}
	}
	,updateSteamControllers: function() {
	}
	,updateSteamOrigins: function() {
	}
	,update: function() {
		this.register.update(this.sets);
	}
	,__class__: flixel_input_actions_FlxActionManager
	,__properties__: {get_numSets:"get_numSets"}
};
var flixel_input_actions__$FlxActionManager_ActionSetRegister = function() {
	this.steamControllerAllSet = -1;
	this.gamepadAllSet = -1;
	this.keyboardSet = -1;
	this.mouseSet = -1;
	flixel_input_actions_FlxSteamController.init();
	this.gamepadSets = [];
	this.steamControllerSets = [];
};
$hxClasses["flixel.input.actions._FlxActionManager.ActionSetRegister"] = flixel_input_actions__$FlxActionManager_ActionSetRegister;
flixel_input_actions__$FlxActionManager_ActionSetRegister.__name__ = "flixel.input.actions._FlxActionManager.ActionSetRegister";
flixel_input_actions__$FlxActionManager_ActionSetRegister.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_input_actions__$FlxActionManager_ActionSetRegister.prototype = {
	mouseSet: null
	,keyboardSet: null
	,gamepadAllSet: null
	,steamControllerAllSet: null
	,gamepadSets: null
	,steamControllerSets: null
	,destroy: function() {
		this.gamepadSets = null;
		this.steamControllerSets = null;
	}
	,activate: function(ActionSet,Device1,DeviceID) {
		if(DeviceID == null) {
			DeviceID = -2;
		}
		this.setActivate(ActionSet,Device1,DeviceID);
	}
	,markActiveSets: function(sets) {
		var _g = 0;
		var _g1 = sets.length;
		while(_g < _g1) {
			var i = _g++;
			sets[i].active = false;
		}
		this.syncDevice(flixel_input_actions_FlxInputDevice.MOUSE,sets);
		this.syncDevice(flixel_input_actions_FlxInputDevice.KEYBOARD,sets);
		this.syncDevice(flixel_input_actions_FlxInputDevice.GAMEPAD,sets);
		this.syncDevice(flixel_input_actions_FlxInputDevice.STEAM_CONTROLLER,sets);
	}
	,update: function(sets) {
		var _g = 0;
		var _g1 = sets.length;
		while(_g < _g1) {
			var i = _g++;
			sets[i].update();
		}
	}
	,updateSteam: function(sets) {
	}
	,setActivate: function(ActionSet,Device1,DeviceID,DoActivate) {
		if(DoActivate == null) {
			DoActivate = true;
		}
		if(DeviceID == null) {
			DeviceID = -2;
		}
		switch(Device1._hx_index) {
		case 1:
			this.mouseSet = DoActivate ? ActionSet : -1;
			break;
		case 3:
			this.keyboardSet = DoActivate ? ActionSet : -1;
			break;
		case 4:
			switch(DeviceID) {
			case -3:
				this.clearSetFromArray(ActionSet,this.gamepadSets);
				break;
			case -2:
				this.gamepadSets[flixel_FlxG.gamepads.getFirstActiveGamepadID()] = DoActivate ? ActionSet : -1;
				break;
			case -1:
				this.clearSetFromArray(-1,this.gamepadSets);
				this.gamepadAllSet = DoActivate ? ActionSet : -1;
				break;
			default:
				this.gamepadSets[DeviceID] = DoActivate ? ActionSet : -1;
			}
			break;
		case 5:
			switch(DeviceID) {
			case -3:
				this.clearSetFromArray(ActionSet,this.steamControllerSets);
				break;
			case -2:
				this.steamControllerSets[flixel_input_actions_FlxSteamController.getFirstActiveHandle()] = DoActivate ? ActionSet : -1;
				break;
			case -1:
				this.steamControllerAllSet = DoActivate ? ActionSet : -1;
				this.clearSetFromArray(-1,this.steamControllerSets);
				break;
			default:
				this.steamControllerSets[DeviceID] = DoActivate ? ActionSet : -1;
			}
			break;
		case 9:
			this.setActivate(ActionSet,flixel_input_actions_FlxInputDevice.MOUSE,DeviceID,DoActivate);
			this.setActivate(ActionSet,flixel_input_actions_FlxInputDevice.KEYBOARD,DeviceID,DoActivate);
			this.setActivate(ActionSet,flixel_input_actions_FlxInputDevice.GAMEPAD,DeviceID,DoActivate);
			break;
		case 10:
			this.setActivate(ActionSet,flixel_input_actions_FlxInputDevice.ALL,DeviceID,false);
			break;
		default:
		}
	}
	,updateSteamOrigins: function(sets) {
		return [];
	}
	,updateDigitalActionOrigins: function(action,deviceID,setHandle) {
	}
	,updateAnalogActionOrigins: function(action,deviceID,setHandle) {
	}
	,cheapChecksum: function(arr) {
		var sum1 = 0;
		var sum2 = 0;
		if(arr != null) {
			var _g = 0;
			while(_g < arr.length) {
				var n = arr[_g];
				++_g;
				sum1 = (sum1 + n) % 255;
				sum2 = (sum2 + sum1) % 255;
			}
		}
		return sum2 << 8 | sum1;
	}
	,updateSteamInputs: function(sets) {
	}
	,changeSteamControllerActionSet: function(controllerHandle,newSet,sets) {
		var lastSet = flixel_input_actions_FlxSteamController.getCurrentActionSet(controllerHandle);
		if(lastSet == newSet) {
			return;
		}
		if(sets == null) {
			return;
		}
		if(lastSet != -1) {
			if(lastSet < sets.length) {
				sets[lastSet].attachSteamController(controllerHandle,false);
			}
		}
		sets[newSet].attachSteamController(controllerHandle);
	}
	,syncDevice: function(device,sets) {
		switch(device._hx_index) {
		case 1:
			if(this.mouseSet >= 0 && this.mouseSet < sets.length) {
				sets[this.mouseSet].active = true;
			}
			break;
		case 3:
			if(this.keyboardSet >= 0 && this.keyboardSet < sets.length) {
				sets[this.keyboardSet].active = true;
			}
			break;
		case 4:
			if(this.gamepadAllSet >= 0 && this.gamepadAllSet < sets.length) {
				sets[this.gamepadAllSet].active = true;
			} else {
				var _g = 0;
				var _g1 = this.gamepadSets.length;
				while(_g < _g1) {
					var i = _g++;
					var gset = this.gamepadSets[i];
					if(gset >= 0 && gset < sets.length) {
						sets[gset].active = true;
					}
				}
			}
			break;
		case 5:
			this.updateSteamInputs(sets);
			if(this.steamControllerAllSet >= 0 && this.steamControllerAllSet < sets.length) {
				sets[this.steamControllerAllSet].active = true;
			} else {
				var _g = 0;
				var _g1 = this.steamControllerSets.length;
				while(_g < _g1) {
					var i = _g++;
					var sset = this.steamControllerSets[i];
					if(sset >= 0 && sset < sets.length) {
						sets[sset].active = true;
					}
				}
			}
			break;
		default:
		}
	}
	,clearSetFromArray: function(ActionSet,array) {
		if(ActionSet == null) {
			ActionSet = -1;
		}
		var _g = 0;
		var _g1 = array.length;
		while(_g < _g1) {
			var i = _g++;
			if(ActionSet == -1 || array[i] == ActionSet) {
				array[i] = -1;
			}
		}
	}
	,__class__: flixel_input_actions__$FlxActionManager_ActionSetRegister
};
var flixel_input_actions_ResetPolicy = $hxEnums["flixel.input.actions.ResetPolicy"] = { __ename__ : "flixel.input.actions.ResetPolicy", __constructs__ : ["NONE","ALL_SETS","DEFAULT_SET_ONLY"]
	,NONE: {_hx_index:0,__enum__:"flixel.input.actions.ResetPolicy",toString:$estr}
	,ALL_SETS: {_hx_index:1,__enum__:"flixel.input.actions.ResetPolicy",toString:$estr}
	,DEFAULT_SET_ONLY: {_hx_index:2,__enum__:"flixel.input.actions.ResetPolicy",toString:$estr}
};
flixel_input_actions_ResetPolicy.__empty_constructs__ = [flixel_input_actions_ResetPolicy.NONE,flixel_input_actions_ResetPolicy.ALL_SETS,flixel_input_actions_ResetPolicy.DEFAULT_SET_ONLY];
var flixel_input_actions_FlxSteamController = function() { };
$hxClasses["flixel.input.actions.FlxSteamController"] = flixel_input_actions_FlxSteamController;
flixel_input_actions_FlxSteamController.__name__ = "flixel.input.actions.FlxSteamController";
flixel_input_actions_FlxSteamController.__properties__ = {get_MAX_ORIGINS:"get_MAX_ORIGINS",get_MAX_CONTROLLERS:"get_MAX_CONTROLLERS"};
flixel_input_actions_FlxSteamController.controllers = null;
flixel_input_actions_FlxSteamController.get_MAX_CONTROLLERS = function() {
	return 0;
};
flixel_input_actions_FlxSteamController.get_MAX_ORIGINS = function() {
	return 0;
};
flixel_input_actions_FlxSteamController.clear = function() {
};
flixel_input_actions_FlxSteamController.init = function() {
	flixel_input_actions_FlxSteamController.controllers = [];
};
flixel_input_actions_FlxSteamController.getActionSetHandle = function(name) {
	return -1;
};
flixel_input_actions_FlxSteamController.getCurrentActionSet = function(SteamControllerHandle) {
	return -1;
};
flixel_input_actions_FlxSteamController.activateActionSet = function(SteamControllerHandle,ActionSetHandle) {
};
flixel_input_actions_FlxSteamController.getFirstActiveHandle = function() {
	return -1;
};
flixel_input_actions_FlxSteamController.getConnectedControllers = function() {
	return [];
};
flixel_input_actions_FlxSteamController.getAnalogActionData = function(controller,action,data) {
	return null;
};
flixel_input_actions_FlxSteamController.getDigitalActionData = function(controller,action) {
	return new flixel_input_actions__$FlxSteamController_DigitalActionData(false,false);
};
flixel_input_actions_FlxSteamController.getAnalogActionHandle = function(name) {
	return -1;
};
flixel_input_actions_FlxSteamController.getDigitalActionHandle = function(name) {
	return -1;
};
var flixel_input_actions__$FlxSteamController_DigitalActionData = function(bActive,bState) {
	this.bActive = bActive;
	this.bState = bState;
};
$hxClasses["flixel.input.actions._FlxSteamController.DigitalActionData"] = flixel_input_actions__$FlxSteamController_DigitalActionData;
flixel_input_actions__$FlxSteamController_DigitalActionData.__name__ = "flixel.input.actions._FlxSteamController.DigitalActionData";
flixel_input_actions__$FlxSteamController_DigitalActionData.prototype = {
	bActive: null
	,bState: null
	,__class__: flixel_input_actions__$FlxSteamController_DigitalActionData
};
var flixel_input_actions__$FlxSteamController_FlxSteamControllerMetadata = function() {
	this.connected = new flixel_input_FlxInput(0);
	this.active = false;
	this.actionSet = -1;
	this.handle = -1;
};
$hxClasses["flixel.input.actions._FlxSteamController.FlxSteamControllerMetadata"] = flixel_input_actions__$FlxSteamController_FlxSteamControllerMetadata;
flixel_input_actions__$FlxSteamController_FlxSteamControllerMetadata.__name__ = "flixel.input.actions._FlxSteamController.FlxSteamControllerMetadata";
flixel_input_actions__$FlxSteamController_FlxSteamControllerMetadata.prototype = {
	handle: null
	,actionSet: null
	,active: null
	,connected: null
	,__class__: flixel_input_actions__$FlxSteamController_FlxSteamControllerMetadata
};
var flixel_input_actions__$FlxSteamController_FlxSteamUpdater = function() {
	this.originTime = 0.0;
	this.controllerTime = 0.0;
};
$hxClasses["flixel.input.actions._FlxSteamController.FlxSteamUpdater"] = flixel_input_actions__$FlxSteamController_FlxSteamUpdater;
flixel_input_actions__$FlxSteamController_FlxSteamUpdater.__name__ = "flixel.input.actions._FlxSteamController.FlxSteamUpdater";
flixel_input_actions__$FlxSteamController_FlxSteamUpdater.__interfaces__ = [flixel_input_IFlxInputManager];
flixel_input_actions__$FlxSteamController_FlxSteamUpdater.prototype = {
	controllerTime: null
	,originTime: null
	,destroy: function() {
	}
	,reset: function() {
	}
	,update: function() {
	}
	,onFocus: function() {
	}
	,onFocusLost: function() {
	}
	,__class__: flixel_input_actions__$FlxSteamController_FlxSteamUpdater
};
var flixel_input_gamepad_FlxGamepad = function(ID,Manager,Model,Attachment) {
	this.buttons = [];
	this._deadZone = 0.15;
	this.axisActive = false;
	var _g = [];
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	this.axis = _g;
	this.deadZoneMode = flixel_input_gamepad_FlxGamepadDeadZoneMode.INDEPENDENT_AXES;
	this.connected = true;
	this.id = ID;
	this.manager = Manager;
	this.pressed = new flixel_input_gamepad_lists_FlxGamepadButtonList(1,this);
	this.released = new flixel_input_gamepad_lists_FlxGamepadButtonList(0,this);
	this.justPressed = new flixel_input_gamepad_lists_FlxGamepadButtonList(2,this);
	this.justReleased = new flixel_input_gamepad_lists_FlxGamepadButtonList(-1,this);
	this.analog = new flixel_input_gamepad_lists_FlxGamepadAnalogList(this);
	this.motion = new flixel_input_gamepad_lists_FlxGamepadMotionValueList(this);
	this.pointer = new flixel_input_gamepad_lists_FlxGamepadPointerValueList(this);
	if(Model == null) {
		Model = flixel_input_gamepad_FlxGamepadModel.XINPUT;
	}
	if(Attachment == null) {
		Attachment = flixel_input_gamepad_FlxGamepadAttachment.NONE;
	}
	this.set_model(Model);
	this.detectedModel = Model;
};
$hxClasses["flixel.input.gamepad.FlxGamepad"] = flixel_input_gamepad_FlxGamepad;
flixel_input_gamepad_FlxGamepad.__name__ = "flixel.input.gamepad.FlxGamepad";
flixel_input_gamepad_FlxGamepad.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_input_gamepad_FlxGamepad.prototype = {
	id: null
	,model: null
	,detectedModel: null
	,mapping: null
	,connected: null
	,attachment: null
	,deadZoneMode: null
	,pressed: null
	,released: null
	,justPressed: null
	,justReleased: null
	,analog: null
	,motion: null
	,pointer: null
	,axis: null
	,axisActive: null
	,manager: null
	,_deadZone: null
	,_device: null
	,buttons: null
	,getButton: function(RawID) {
		if(RawID == -1) {
			return null;
		}
		var gamepadButton = this.buttons[RawID];
		if(gamepadButton == null) {
			gamepadButton = new flixel_input_gamepad_FlxGamepadButton(RawID);
			this.buttons[RawID] = gamepadButton;
		}
		return gamepadButton;
	}
	,applyAxisFlip: function(axisValue,axisID) {
		if(this.mapping.isAxisFlipped(axisID)) {
			axisValue *= -1;
		}
		return axisValue;
	}
	,update: function() {
		var control;
		var button;
		if(this._device == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._device.get_numControls();
		while(_g < _g1) {
			var i = _g++;
			control = this._device.getControlAt(i);
			button = this.getButton(i);
			if(this.isAxisForAnalogStick(i)) {
				this.handleAxisMove(i,control.value,button.value);
			}
			button.value = control.value;
			var value = Math.abs(control.value);
			if(value < this.get_deadZone()) {
				button.release();
			} else if(value > this.get_deadZone()) {
				button.press();
			}
		}
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button != null) {
				button.update();
			}
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button != null) {
				button.reset();
			}
		}
		var numAxis = this.axis.length;
		var _g = 0;
		var _g1 = numAxis;
		while(_g < _g1) {
			var i = _g++;
			this.axis[i] = 0;
		}
	}
	,destroy: function() {
		this.connected = false;
		this.buttons = null;
		this.axis = null;
		this.manager = null;
	}
	,checkStatus: function(ID,Status) {
		switch(ID) {
		case -2:
			return this.anyButton(Status);
		case -1:
			return !this.anyButton(Status);
		default:
			var RawID = this.mapping.getRawID(ID);
			var button = this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,checkStatusRaw: function(RawID,Status) {
		var button = this.buttons[RawID];
		if(button != null) {
			return button.hasState(Status);
		} else {
			return false;
		}
	}
	,checkButtonArrayState: function(IDArray,Status) {
		if(IDArray == null) {
			return false;
		}
		var _g = 0;
		while(_g < IDArray.length) {
			var code = IDArray[_g];
			++_g;
			var tmp;
			switch(code) {
			case -2:
				tmp = this.anyButton(Status);
				break;
			case -1:
				tmp = !this.anyButton(Status);
				break;
			default:
				var RawID = this.mapping.getRawID(code);
				var button = this.buttons[RawID];
				tmp = button != null && button.hasState(Status);
			}
			if(tmp) {
				return true;
			}
		}
		return false;
	}
	,checkButtonArrayStateRaw: function(IDArray,Status) {
		if(IDArray == null) {
			return false;
		}
		var _g = 0;
		while(_g < IDArray.length) {
			var code = IDArray[_g];
			++_g;
			var button = this.buttons[code];
			if(button != null && button.hasState(Status)) {
				return true;
			}
		}
		return false;
	}
	,anyPressed: function(IDArray) {
		return this.checkButtonArrayState(IDArray,1);
	}
	,anyPressedRaw: function(RawIDArray) {
		return this.checkButtonArrayStateRaw(RawIDArray,1);
	}
	,anyJustPressed: function(IDArray) {
		return this.checkButtonArrayState(IDArray,2);
	}
	,anyJustPressedRaw: function(RawIDArray) {
		return this.checkButtonArrayStateRaw(RawIDArray,2);
	}
	,anyJustReleased: function(IDArray) {
		return this.checkButtonArrayState(IDArray,-1);
	}
	,anyJustReleasedRaw: function(RawIDArray) {
		return this.checkButtonArrayStateRaw(RawIDArray,-1);
	}
	,firstPressedID: function() {
		return this.mapping.getID(this.firstPressedRawID());
	}
	,firstPressedRawID: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button != null && (button.current == 0 || button.current == -1)) {
				return button.ID;
			}
		}
		return -1;
	}
	,firstJustPressedID: function() {
		return this.mapping.getID(this.firstJustPressedRawID());
	}
	,firstJustPressedRawID: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button != null && button.current == 2) {
				return button.ID;
			}
		}
		return -1;
	}
	,firstJustReleasedID: function() {
		return this.mapping.getID(this.firstJustReleasedRawID());
	}
	,firstJustReleasedRawID: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button != null && button.current == -1) {
				return button.ID;
			}
		}
		return -1;
	}
	,getAxis: function(AxisButtonID) {
		var axisValue = this.getAxisValue(this.mapping.getRawID(AxisButtonID));
		if(Math.abs(axisValue) > this.get_deadZone()) {
			return axisValue;
		} else {
			return 0;
		}
	}
	,getAxisRaw: function(RawAxisID) {
		var axisValue = this.getAxisValue(RawAxisID);
		if(Math.abs(axisValue) > this.get_deadZone()) {
			return axisValue;
		}
		return 0;
	}
	,isAxisForAnalogStick: function(AxisIndex) {
		var leftStick = this.mapping.leftStick;
		var rightStick = this.mapping.rightStick;
		if(leftStick != null) {
			if(AxisIndex == leftStick.x || AxisIndex == leftStick.y) {
				return true;
			}
		}
		if(rightStick != null) {
			if(AxisIndex == rightStick.x || AxisIndex == rightStick.y) {
				return true;
			}
		}
		return false;
	}
	,getAnalogStickByAxis: function(AxisIndex) {
		var leftStick = this.mapping.leftStick;
		var rightStick = this.mapping.rightStick;
		if(leftStick != null && AxisIndex == leftStick.x || AxisIndex == leftStick.y) {
			return leftStick;
		}
		if(rightStick != null && AxisIndex == rightStick.x || AxisIndex == rightStick.y) {
			return rightStick;
		}
		return null;
	}
	,getXAxis: function(AxesButtonID) {
		return this.getAnalogXAxisValue(this.mapping.getAnalogStick(AxesButtonID));
	}
	,getXAxisRaw: function(Stick) {
		return this.getAnalogXAxisValue(Stick);
	}
	,getYAxis: function(AxesButtonID) {
		return this.getYAxisRaw(this.mapping.getAnalogStick(AxesButtonID));
	}
	,getYAxisRaw: function(Stick) {
		return this.getAnalogYAxisValue(Stick);
	}
	,getAnalogAxes: function(AxesButtonID) {
		var x = this.getAnalogXAxisValue(this.mapping.getAnalogStick(AxesButtonID));
		var y = this.getYAxisRaw(this.mapping.getAnalogStick(AxesButtonID));
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var X = x;
		var Y = y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		return point;
	}
	,anyButton: function(state) {
		if(state == null) {
			state = 1;
		}
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button != null && button.hasState(state)) {
				return true;
			}
		}
		return false;
	}
	,anyInput: function() {
		if(this.anyButton()) {
			return true;
		}
		var numAxis = this.axis.length;
		var _g = 0;
		var _g1 = numAxis;
		while(_g < _g1) {
			var i = _g++;
			if(this.axis[0] != 0) {
				return true;
			}
		}
		return false;
	}
	,getAxisValue: function(AxisID) {
		var axisValue = 0;
		if(AxisID == -1) {
			return 0;
		}
		var tmp;
		if(this._device != null && this._device.enabled) {
			var Max = this._device.get_numControls() - 1;
			tmp = AxisID >= 0 && (Max == null || AxisID <= Max);
		} else {
			tmp = false;
		}
		if(tmp) {
			axisValue = this._device.getControlAt(AxisID).value;
		}
		if(this.isAxisForAnalogStick(AxisID)) {
			var axisValue1 = axisValue;
			if(this.mapping.isAxisFlipped(AxisID)) {
				axisValue1 *= -1;
			}
			axisValue = axisValue1;
		}
		return axisValue;
	}
	,getAnalogXAxisValue: function(stick) {
		if(stick == null) {
			return 0;
		}
		if(this.deadZoneMode == flixel_input_gamepad_FlxGamepadDeadZoneMode.CIRCULAR) {
			return this.getAnalogAxisValueCircular(stick,stick.x);
		} else {
			return this.getAnalogAxisValueIndependent(stick.x);
		}
	}
	,getAnalogYAxisValue: function(stick) {
		if(stick == null) {
			return 0;
		}
		if(this.deadZoneMode == flixel_input_gamepad_FlxGamepadDeadZoneMode.CIRCULAR) {
			return this.getAnalogAxisValueCircular(stick,stick.y);
		} else {
			return this.getAnalogAxisValueIndependent(stick.y);
		}
	}
	,getAnalogAxisValueCircular: function(stick,axisID) {
		if(stick == null) {
			return 0;
		}
		var xAxis = this.getAxisValue(stick.x);
		var yAxis = this.getAxisValue(stick.y);
		var x = xAxis;
		var y = yAxis;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var X = x;
		var Y = y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		var vector = point;
		var length = Math.sqrt(vector.x * vector.x + vector.y * vector.y);
		vector.put();
		if(length > this.get_deadZone()) {
			return this.getAxisValue(axisID);
		}
		return 0;
	}
	,getAnalogAxisValueIndependent: function(axisID) {
		var axisValue = this.getAxisValue(axisID);
		if(Math.abs(axisValue) > this.get_deadZone()) {
			return axisValue;
		}
		return 0;
	}
	,handleAxisMove: function(axis,newValue,oldValue) {
		var axisValue = newValue;
		if(this.mapping.isAxisFlipped(axis)) {
			axisValue *= -1;
		}
		newValue = axisValue;
		var axisValue = oldValue;
		if(this.mapping.isAxisFlipped(axis)) {
			axisValue *= -1;
		}
		oldValue = axisValue;
		var leftStick = this.mapping.leftStick;
		var rightStick = this.mapping.rightStick;
		var stick = leftStick != null && axis == leftStick.x || axis == leftStick.y ? leftStick : rightStick != null && axis == rightStick.x || axis == rightStick.y ? rightStick : null;
		if(stick.mode == flixel_input_gamepad_FlxAnalogToDigitalMode.ONLY_DIGITAL || stick.mode == flixel_input_gamepad_FlxAnalogToDigitalMode.BOTH) {
			this.handleAxisMoveSub(stick,axis,newValue,oldValue,1.0);
			this.handleAxisMoveSub(stick,axis,newValue,oldValue,-1.0);
			var tmp = stick.mode == flixel_input_gamepad_FlxAnalogToDigitalMode.ONLY_DIGITAL;
		}
	}
	,handleAxisMoveSub: function(stick,axis,value,oldValue,sign) {
		if(sign == null) {
			sign = 1.0;
		}
		var digitalButton = -1;
		if(axis == stick.x) {
			digitalButton = sign < 0 ? stick.rawLeft : stick.rawRight;
		} else if(axis == stick.y) {
			digitalButton = sign < 0 ? stick.rawUp : stick.rawDown;
		}
		var threshold = stick.digitalThreshold;
		var valueSign = value * sign;
		var oldValueSign = oldValue * sign;
		if(valueSign > threshold && oldValueSign <= threshold) {
			var btn = this.getButton(digitalButton);
			if(btn != null) {
				btn.press();
			}
		} else if(valueSign <= threshold && oldValueSign > threshold) {
			var btn = this.getButton(digitalButton);
			if(btn != null) {
				btn.release();
			}
		}
	}
	,createMappingForModel: function(model) {
		switch(model._hx_index) {
		case 0:
			return new flixel_input_gamepad_mappings_LogitechMapping(this.attachment);
		case 1:
			return new flixel_input_gamepad_mappings_OUYAMapping(this.attachment);
		case 2:
			return new flixel_input_gamepad_mappings_PS4Mapping(this.attachment);
		case 3:
			return new flixel_input_gamepad_mappings_PSVitaMapping(this.attachment);
		case 4:
			return new flixel_input_gamepad_mappings_XInputMapping(this.attachment);
		case 5:
			return new flixel_input_gamepad_mappings_MayflashWiiRemoteMapping(this.attachment);
		case 6:
			return new flixel_input_gamepad_mappings_WiiRemoteMapping(this.attachment);
		case 7:
			return new flixel_input_gamepad_mappings_MFiMapping(this.attachment);
		case 8:
			return new flixel_input_gamepad_mappings_SwitchProMapping(this.attachment);
		case 9:
			return new flixel_input_gamepad_mappings_SwitchJoyconLeftMapping(this.attachment);
		case 10:
			return new flixel_input_gamepad_mappings_SwitchJoyconRightMapping(this.attachment);
		default:
			return new flixel_input_gamepad_mappings_XInputMapping(this.attachment);
		}
	}
	,get_name: function() {
		if(this._device == null) {
			return null;
		}
		return this._device.name;
	}
	,set_model: function(Model) {
		this.model = Model;
		this.mapping = this.createMappingForModel(this.model);
		return this.model;
	}
	,set_attachment: function(Attachment) {
		this.attachment = Attachment;
		this.mapping.set_attachment(Attachment);
		return this.attachment;
	}
	,get_deadZone: function() {
		if(this.manager == null || this.manager.globalDeadZone == null) {
			return this._deadZone;
		} else {
			return this.manager.globalDeadZone;
		}
	}
	,set_deadZone: function(deadZone) {
		return this._deadZone = deadZone;
	}
	,getInputLabel: function(id) {
		return this.mapping.getInputLabel(id);
	}
	,toString: function() {
		var value = this.id;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "id";
		_this.value = value;
		var value = this.model;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "model";
		_this1.value = value;
		var value = this.get_deadZone();
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "deadZone";
		_this2.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2]);
	}
	,__class__: flixel_input_gamepad_FlxGamepad
	,__properties__: {set_deadZone:"set_deadZone",get_deadZone:"get_deadZone",set_attachment:"set_attachment",set_model:"set_model",get_name:"get_name"}
};
var flixel_input_gamepad_FlxGamepadDeadZoneMode = $hxEnums["flixel.input.gamepad.FlxGamepadDeadZoneMode"] = { __ename__ : "flixel.input.gamepad.FlxGamepadDeadZoneMode", __constructs__ : ["INDEPENDENT_AXES","CIRCULAR"]
	,INDEPENDENT_AXES: {_hx_index:0,__enum__:"flixel.input.gamepad.FlxGamepadDeadZoneMode",toString:$estr}
	,CIRCULAR: {_hx_index:1,__enum__:"flixel.input.gamepad.FlxGamepadDeadZoneMode",toString:$estr}
};
flixel_input_gamepad_FlxGamepadDeadZoneMode.__empty_constructs__ = [flixel_input_gamepad_FlxGamepadDeadZoneMode.INDEPENDENT_AXES,flixel_input_gamepad_FlxGamepadDeadZoneMode.CIRCULAR];
var flixel_input_gamepad_FlxGamepadModel = $hxEnums["flixel.input.gamepad.FlxGamepadModel"] = { __ename__ : "flixel.input.gamepad.FlxGamepadModel", __constructs__ : ["LOGITECH","OUYA","PS4","PSVITA","XINPUT","MAYFLASH_WII_REMOTE","WII_REMOTE","MFI","SWITCH_PRO","SWITCH_JOYCON_LEFT","SWITCH_JOYCON_RIGHT","UNKNOWN"]
	,LOGITECH: {_hx_index:0,__enum__:"flixel.input.gamepad.FlxGamepadModel",toString:$estr}
	,OUYA: {_hx_index:1,__enum__:"flixel.input.gamepad.FlxGamepadModel",toString:$estr}
	,PS4: {_hx_index:2,__enum__:"flixel.input.gamepad.FlxGamepadModel",toString:$estr}
	,PSVITA: {_hx_index:3,__enum__:"flixel.input.gamepad.FlxGamepadModel",toString:$estr}
	,XINPUT: {_hx_index:4,__enum__:"flixel.input.gamepad.FlxGamepadModel",toString:$estr}
	,MAYFLASH_WII_REMOTE: {_hx_index:5,__enum__:"flixel.input.gamepad.FlxGamepadModel",toString:$estr}
	,WII_REMOTE: {_hx_index:6,__enum__:"flixel.input.gamepad.FlxGamepadModel",toString:$estr}
	,MFI: {_hx_index:7,__enum__:"flixel.input.gamepad.FlxGamepadModel",toString:$estr}
	,SWITCH_PRO: {_hx_index:8,__enum__:"flixel.input.gamepad.FlxGamepadModel",toString:$estr}
	,SWITCH_JOYCON_LEFT: {_hx_index:9,__enum__:"flixel.input.gamepad.FlxGamepadModel",toString:$estr}
	,SWITCH_JOYCON_RIGHT: {_hx_index:10,__enum__:"flixel.input.gamepad.FlxGamepadModel",toString:$estr}
	,UNKNOWN: {_hx_index:11,__enum__:"flixel.input.gamepad.FlxGamepadModel",toString:$estr}
};
flixel_input_gamepad_FlxGamepadModel.__empty_constructs__ = [flixel_input_gamepad_FlxGamepadModel.LOGITECH,flixel_input_gamepad_FlxGamepadModel.OUYA,flixel_input_gamepad_FlxGamepadModel.PS4,flixel_input_gamepad_FlxGamepadModel.PSVITA,flixel_input_gamepad_FlxGamepadModel.XINPUT,flixel_input_gamepad_FlxGamepadModel.MAYFLASH_WII_REMOTE,flixel_input_gamepad_FlxGamepadModel.WII_REMOTE,flixel_input_gamepad_FlxGamepadModel.MFI,flixel_input_gamepad_FlxGamepadModel.SWITCH_PRO,flixel_input_gamepad_FlxGamepadModel.SWITCH_JOYCON_LEFT,flixel_input_gamepad_FlxGamepadModel.SWITCH_JOYCON_RIGHT,flixel_input_gamepad_FlxGamepadModel.UNKNOWN];
var flixel_input_gamepad_FlxGamepadAttachment = $hxEnums["flixel.input.gamepad.FlxGamepadAttachment"] = { __ename__ : "flixel.input.gamepad.FlxGamepadAttachment", __constructs__ : ["WII_NUNCHUCK","WII_CLASSIC_CONTROLLER","NONE"]
	,WII_NUNCHUCK: {_hx_index:0,__enum__:"flixel.input.gamepad.FlxGamepadAttachment",toString:$estr}
	,WII_CLASSIC_CONTROLLER: {_hx_index:1,__enum__:"flixel.input.gamepad.FlxGamepadAttachment",toString:$estr}
	,NONE: {_hx_index:2,__enum__:"flixel.input.gamepad.FlxGamepadAttachment",toString:$estr}
};
flixel_input_gamepad_FlxGamepadAttachment.__empty_constructs__ = [flixel_input_gamepad_FlxGamepadAttachment.WII_NUNCHUCK,flixel_input_gamepad_FlxGamepadAttachment.WII_CLASSIC_CONTROLLER,flixel_input_gamepad_FlxGamepadAttachment.NONE];
var flixel_input_gamepad_FlxGamepadAnalogStick = function(x,y,settings) {
	this.mode = flixel_input_gamepad_FlxAnalogToDigitalMode.BOTH;
	this.digitalThreshold = 0.5;
	this.rawRight = -1;
	this.rawLeft = -1;
	this.rawDown = -1;
	this.rawUp = -1;
	this.x = x;
	this.y = y;
	if(settings == null) {
		return;
	}
	this.mode = settings.mode != null ? settings.mode : flixel_input_gamepad_FlxAnalogToDigitalMode.BOTH;
	this.rawUp = settings.up != null ? settings.up : -1;
	this.rawDown = settings.down != null ? settings.down : -1;
	this.rawLeft = settings.left != null ? settings.left : -1;
	this.rawRight = settings.right != null ? settings.right : -1;
	this.digitalThreshold = settings.threshold != null ? settings.threshold : 0.5;
};
$hxClasses["flixel.input.gamepad.FlxGamepadAnalogStick"] = flixel_input_gamepad_FlxGamepadAnalogStick;
flixel_input_gamepad_FlxGamepadAnalogStick.__name__ = "flixel.input.gamepad.FlxGamepadAnalogStick";
flixel_input_gamepad_FlxGamepadAnalogStick.prototype = {
	x: null
	,y: null
	,rawUp: null
	,rawDown: null
	,rawLeft: null
	,rawRight: null
	,digitalThreshold: null
	,mode: null
	,toString: function() {
		var value = this.x;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "x";
		_this.value = value;
		var value = this.y;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "y";
		_this1.value = value;
		var value = this.rawUp;
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "rawUp";
		_this2.value = value;
		var value = this.rawDown;
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "rawDown";
		_this3.value = value;
		var value = this.rawLeft;
		var _this4 = flixel_util_LabelValuePair._pool.get();
		_this4.label = "rawLeft";
		_this4.value = value;
		var value = this.rawRight;
		var _this5 = flixel_util_LabelValuePair._pool.get();
		_this5.label = "rawRight";
		_this5.value = value;
		var value = this.digitalThreshold;
		var _this6 = flixel_util_LabelValuePair._pool.get();
		_this6.label = "digitalThreshold";
		_this6.value = value;
		var value = this.mode;
		var _this7 = flixel_util_LabelValuePair._pool.get();
		_this7.label = "mode";
		_this7.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3,_this4,_this5,_this6,_this7]);
	}
	,__class__: flixel_input_gamepad_FlxGamepadAnalogStick
};
var flixel_input_gamepad_FlxAnalogToDigitalMode = $hxEnums["flixel.input.gamepad.FlxAnalogToDigitalMode"] = { __ename__ : "flixel.input.gamepad.FlxAnalogToDigitalMode", __constructs__ : ["BOTH","ONLY_DIGITAL","ONLY_ANALOG"]
	,BOTH: {_hx_index:0,__enum__:"flixel.input.gamepad.FlxAnalogToDigitalMode",toString:$estr}
	,ONLY_DIGITAL: {_hx_index:1,__enum__:"flixel.input.gamepad.FlxAnalogToDigitalMode",toString:$estr}
	,ONLY_ANALOG: {_hx_index:2,__enum__:"flixel.input.gamepad.FlxAnalogToDigitalMode",toString:$estr}
};
flixel_input_gamepad_FlxAnalogToDigitalMode.__empty_constructs__ = [flixel_input_gamepad_FlxAnalogToDigitalMode.BOTH,flixel_input_gamepad_FlxAnalogToDigitalMode.ONLY_DIGITAL,flixel_input_gamepad_FlxAnalogToDigitalMode.ONLY_ANALOG];
var flixel_input_gamepad_FlxGamepadButton = function(ID) {
	this.value = 0;
	flixel_input_FlxInput.call(this,ID);
};
$hxClasses["flixel.input.gamepad.FlxGamepadButton"] = flixel_input_gamepad_FlxGamepadButton;
flixel_input_gamepad_FlxGamepadButton.__name__ = "flixel.input.gamepad.FlxGamepadButton";
flixel_input_gamepad_FlxGamepadButton.__super__ = flixel_input_FlxInput;
flixel_input_gamepad_FlxGamepadButton.prototype = $extend(flixel_input_FlxInput.prototype,{
	value: null
	,__class__: flixel_input_gamepad_FlxGamepadButton
});
var flixel_input_gamepad_FlxGamepadInputID = {};
flixel_input_gamepad_FlxGamepadInputID.fromString = function(s) {
	s = s.toUpperCase();
	if(Object.prototype.hasOwnProperty.call(flixel_input_gamepad_FlxGamepadInputID.fromStringMap.h,s)) {
		return flixel_input_gamepad_FlxGamepadInputID.fromStringMap.h[s];
	} else {
		return -1;
	}
};
flixel_input_gamepad_FlxGamepadInputID.toString = function(this1) {
	return flixel_input_gamepad_FlxGamepadInputID.toStringMap.h[this1];
};
var openfl_ui_GameInput = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = "openfl.ui.GameInput";
openfl_ui_GameInput.getDeviceAt = function(index) {
	if(index >= 0 && index < openfl_ui_GameInput.__deviceList.length) {
		return openfl_ui_GameInput.__deviceList[index];
	}
	return null;
};
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) {
		return null;
	}
	if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] == null) {
		var devices = lime_ui_Joystick.__getDeviceData();
		var device = devices[gamepad.id].id;
		var devices = lime_ui_Joystick.__getDeviceData();
		var device1 = new openfl_ui_GameInputDevice(device,devices[gamepad.id].id);
		openfl_ui_GameInput.__deviceList.push(device1);
		openfl_ui_GameInput.__devices.set(gamepad,device1);
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
	}
	return openfl_ui_GameInput.__devices.h[gamepad.__id__];
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var control;
			if(axis == null) {
				control = "null";
			} else {
				switch(axis) {
				case 0:
					control = "LEFT_X";
					break;
				case 1:
					control = "LEFT_Y";
					break;
				case 2:
					control = "RIGHT_X";
					break;
				case 3:
					control = "RIGHT_Y";
					break;
				case 4:
					control = "TRIGGER_LEFT";
					break;
				case 5:
					control = "TRIGGER_RIGHT";
					break;
				default:
					control = "UNKNOWN (" + axis + ")";
				}
			}
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + control,-1,1);
			device.__axis.h[axis] = control1;
			device.__controls.push(control1);
		}
		var control = device.__axis.h[axis];
		control.value = value;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			if(button == null) {
				control = "null";
			} else {
				switch(button) {
				case 0:
					control = "A";
					break;
				case 1:
					control = "B";
					break;
				case 2:
					control = "X";
					break;
				case 3:
					control = "Y";
					break;
				case 4:
					control = "BACK";
					break;
				case 5:
					control = "GUIDE";
					break;
				case 6:
					control = "START";
					break;
				case 7:
					control = "LEFT_STICK";
					break;
				case 8:
					control = "RIGHT_STICK";
					break;
				case 9:
					control = "LEFT_SHOULDER";
					break;
				case 10:
					control = "RIGHT_SHOULDER";
					break;
				case 11:
					control = "DPAD_UP";
					break;
				case 12:
					control = "DPAD_DOWN";
					break;
				case 13:
					control = "DPAD_LEFT";
					break;
				case 14:
					control = "DPAD_RIGHT";
					break;
				default:
					control = "UNKNOWN (" + button + ")";
				}
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 1;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			if(button == null) {
				control = "null";
			} else {
				switch(button) {
				case 0:
					control = "A";
					break;
				case 1:
					control = "B";
					break;
				case 2:
					control = "X";
					break;
				case 3:
					control = "Y";
					break;
				case 4:
					control = "BACK";
					break;
				case 5:
					control = "GUIDE";
					break;
				case 6:
					control = "START";
					break;
				case 7:
					control = "LEFT_STICK";
					break;
				case 8:
					control = "RIGHT_STICK";
					break;
				case 9:
					control = "LEFT_SHOULDER";
					break;
				case 10:
					control = "RIGHT_SHOULDER";
					break;
				case 11:
					control = "DPAD_UP";
					break;
				case 12:
					control = "DPAD_DOWN";
					break;
				case 13:
					control = "DPAD_LEFT";
					break;
				case 14:
					control = "DPAD_RIGHT";
					break;
				default:
					control = "UNKNOWN (" + button + ")";
				}
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 0;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",true,false,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null) {
			HxOverrides.remove(openfl_ui_GameInput.__deviceList,openfl_ui_GameInput.__devices.h[gamepad.__id__]);
			openfl_ui_GameInput.__devices.remove(gamepad);
		}
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent("deviceRemoved",true,false,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		if(type == "deviceAdded") {
			var _g = 0;
			var _g1 = openfl_ui_GameInput.__deviceList;
			while(_g < _g1.length) {
				var device = _g1[_g];
				++_g;
				this.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",true,false,device));
			}
		}
	}
	,__class__: openfl_ui_GameInput
});
var flixel_input_gamepad_FlxGamepadManager = function() {
	this._activeGamepads = [];
	this._gamepads = [];
	this.deviceConnected = new flixel_util__$FlxSignal_FlxSignal1();
	this.deviceDisconnected = new flixel_util__$FlxSignal_FlxSignal1();
	flixel_input_gamepad_FlxGamepadManager._gameInput.addEventListener("deviceAdded",$bind(this,this.onDeviceAdded));
	flixel_input_gamepad_FlxGamepadManager._gameInput.addEventListener("deviceRemoved",$bind(this,this.onDeviceRemoved));
	var _g = 0;
	var _g1 = openfl_ui_GameInput.numDevices;
	while(_g < _g1) {
		var i = _g++;
		this.addGamepad(openfl_ui_GameInput.getDeviceAt(i));
	}
};
$hxClasses["flixel.input.gamepad.FlxGamepadManager"] = flixel_input_gamepad_FlxGamepadManager;
flixel_input_gamepad_FlxGamepadManager.__name__ = "flixel.input.gamepad.FlxGamepadManager";
flixel_input_gamepad_FlxGamepadManager.__interfaces__ = [flixel_input_IFlxInputManager];
flixel_input_gamepad_FlxGamepadManager.prototype = {
	firstActive: null
	,lastActive: null
	,globalDeadZone: null
	,deviceConnected: null
	,deviceDisconnected: null
	,_gamepads: null
	,_activeGamepads: null
	,getByID: function(GamepadID) {
		return this._activeGamepads[GamepadID];
	}
	,removeByID: function(GamepadID) {
		var gamepad = this._gamepads[GamepadID];
		if(gamepad != null) {
			this._gamepads[GamepadID] = null;
			var i = this._activeGamepads.indexOf(gamepad);
			if(i != -1) {
				this._activeGamepads[i] = null;
				this.deviceDisconnected.dispatch(gamepad);
			}
			flixel_util_FlxDestroyUtil.destroy(gamepad);
		}
		if(this.lastActive == gamepad) {
			this.lastActive = null;
		}
		if(this.firstActive == gamepad) {
			this.firstActive = null;
		}
	}
	,createByID: function(GamepadID,Model) {
		var gamepad = this._gamepads[GamepadID];
		if(gamepad == null) {
			gamepad = new flixel_input_gamepad_FlxGamepad(GamepadID,this,Model);
			this._gamepads[GamepadID] = gamepad;
			var nullFound = false;
			var _g = 0;
			var _g1 = this._activeGamepads.length;
			while(_g < _g1) {
				var i = _g++;
				if(this._activeGamepads[i] == null) {
					this._activeGamepads[i] = gamepad;
					nullFound = true;
					break;
				}
			}
			if(!nullFound) {
				this._activeGamepads.push(gamepad);
			}
		}
		this.lastActive = gamepad;
		if(this.firstActive == null) {
			this.firstActive = gamepad;
		}
		return gamepad;
	}
	,getActiveGamepadIDs: function(IDsArray) {
		if(IDsArray == null) {
			IDsArray = [];
		}
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.anyInput()) {
				IDsArray.push(gamepad.id);
			}
		}
		return IDsArray;
	}
	,getActiveGamepads: function(GamepadArray) {
		if(GamepadArray == null) {
			GamepadArray = [];
		}
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.anyInput()) {
				GamepadArray.push(gamepad);
			}
		}
		return GamepadArray;
	}
	,getFirstActiveGamepadID: function() {
		var firstActive = this.getFirstActiveGamepad();
		if(firstActive == null) {
			return -1;
		} else {
			return firstActive.id;
		}
	}
	,getFirstActiveGamepad: function() {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.anyInput()) {
				return gamepad;
			}
		}
		return null;
	}
	,anyButton: function(state) {
		if(state == null) {
			state = 1;
		}
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.anyButton(state)) {
				return true;
			}
		}
		return false;
	}
	,anyInput: function() {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.anyInput()) {
				return true;
			}
		}
		return false;
	}
	,anyPressed: function(buttonID) {
		return this.anyHasState(buttonID,1);
	}
	,anyJustPressed: function(buttonID) {
		return this.anyHasState(buttonID,2);
	}
	,anyJustReleased: function(buttonID) {
		return this.anyHasState(buttonID,-1);
	}
	,anyHasState: function(buttonID,state) {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			var tmp;
			if(gamepad != null) {
				switch(buttonID) {
				case -2:
					tmp = gamepad.anyButton(state);
					break;
				case -1:
					tmp = !gamepad.anyButton(state);
					break;
				default:
					var RawID = gamepad.mapping.getRawID(buttonID);
					var button = gamepad.buttons[RawID];
					tmp = button != null && button.hasState(state);
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				return true;
			}
		}
		return false;
	}
	,anyMovedXAxis: function(RawAxisID) {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad == null) {
				continue;
			}
			var value = gamepad.getAnalogXAxisValue(RawAxisID);
			if(value != 0) {
				return value;
			}
		}
		return 0;
	}
	,anyMovedYAxis: function(RawAxisID) {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad == null) {
				continue;
			}
			var value = gamepad.getYAxisRaw(RawAxisID);
			if(value != 0) {
				return value;
			}
		}
		return 0;
	}
	,destroy: function() {
		this._gamepads = flixel_util_FlxDestroyUtil.destroyArray(this._gamepads);
		this.firstActive = null;
		this.lastActive = null;
		this._gamepads = null;
		flixel_input_gamepad_FlxGamepadManager._gameInput.removeEventListener("deviceAdded",$bind(this,this.onDeviceAdded));
		flixel_input_gamepad_FlxGamepadManager._gameInput.removeEventListener("deviceRemoved",$bind(this,this.onDeviceRemoved));
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null) {
				gamepad.reset();
			}
		}
	}
	,onDeviceAdded: function(Event1) {
		this.addGamepad(Event1.device);
	}
	,onDeviceRemoved: function(Event1) {
		this.removeGamepad(Event1.device);
	}
	,findGamepadIndex: function(Device1) {
		if(Device1 == null) {
			return -1;
		}
		var _g = 0;
		var _g1 = openfl_ui_GameInput.numDevices;
		while(_g < _g1) {
			var i = _g++;
			if(openfl_ui_GameInput.getDeviceAt(i) == Device1) {
				return i;
			}
		}
		return -1;
	}
	,addGamepad: function(Device1) {
		if(Device1 == null) {
			return;
		}
		Device1.enabled = true;
		var id = this.findGamepadIndex(Device1);
		if(id < 0) {
			return;
		}
		var gamepad = this.createByID(id,this.getModelFromDeviceName(Device1.name));
		gamepad._device = Device1;
		this.deviceConnected.dispatch(gamepad);
	}
	,getModelFromDeviceName: function(name) {
		if(name == null) {
			return flixel_input_gamepad_FlxGamepadModel.UNKNOWN;
		}
		name = StringTools.replace(StringTools.replace(name.toLowerCase(),"-",""),"_","");
		if(name.indexOf("ouya") != -1) {
			return flixel_input_gamepad_FlxGamepadModel.OUYA;
		} else if(name.indexOf("wireless controller") != -1 || name.indexOf("ps4") != -1) {
			return flixel_input_gamepad_FlxGamepadModel.PS4;
		} else if(name.indexOf("logitech") != -1) {
			return flixel_input_gamepad_FlxGamepadModel.LOGITECH;
		} else if(name.indexOf("xbox") != -1 && name.indexOf("360") != -1 || name.indexOf("xinput") != -1) {
			return flixel_input_gamepad_FlxGamepadModel.XINPUT;
		} else if(name.indexOf("nintendo rvlcnt01tr") != -1) {
			return flixel_input_gamepad_FlxGamepadModel.WII_REMOTE;
		} else if(name.indexOf("nintendo rvlcnt01") != -1) {
			return flixel_input_gamepad_FlxGamepadModel.WII_REMOTE;
		} else if(name.indexOf("mayflash wiimote pc adapter") != -1) {
			return flixel_input_gamepad_FlxGamepadModel.MAYFLASH_WII_REMOTE;
		} else if(name.indexOf("pro controller") != -1 || name.indexOf("joycon l+r") != -1) {
			return flixel_input_gamepad_FlxGamepadModel.SWITCH_PRO;
		} else if(name.indexOf("joycon (l)") != -1) {
			return flixel_input_gamepad_FlxGamepadModel.SWITCH_JOYCON_LEFT;
		} else if(name.indexOf("joycon (r)") != -1) {
			return flixel_input_gamepad_FlxGamepadModel.SWITCH_JOYCON_RIGHT;
		} else if(name.indexOf("mfi") != -1) {
			return flixel_input_gamepad_FlxGamepadModel.MFI;
		} else {
			return flixel_input_gamepad_FlxGamepadModel.UNKNOWN;
		}
	}
	,removeGamepad: function(Device1) {
		if(Device1 == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._gamepads.length;
		while(_g < _g1) {
			var i = _g++;
			var gamepad = this._gamepads[i];
			if(gamepad != null && gamepad._device == Device1) {
				this.removeByID(i);
			}
		}
	}
	,update: function() {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null) {
				gamepad.update();
			}
		}
	}
	,onFocus: function() {
	}
	,onFocusLost: function() {
		this.reset();
	}
	,get_numActiveGamepads: function() {
		var count = 0;
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null) {
				++count;
			}
		}
		return count;
	}
	,__class__: flixel_input_gamepad_FlxGamepadManager
	,__properties__: {get_numActiveGamepads:"get_numActiveGamepads"}
};
var flixel_input_gamepad_id_LogitechID = function() { };
$hxClasses["flixel.input.gamepad.id.LogitechID"] = flixel_input_gamepad_id_LogitechID;
flixel_input_gamepad_id_LogitechID.__name__ = "flixel.input.gamepad.id.LogitechID";
var flixel_input_gamepad_id_MFiID = function() { };
$hxClasses["flixel.input.gamepad.id.MFiID"] = flixel_input_gamepad_id_MFiID;
flixel_input_gamepad_id_MFiID.__name__ = "flixel.input.gamepad.id.MFiID";
var flixel_input_gamepad_id_MayflashWiiRemoteID = function() { };
$hxClasses["flixel.input.gamepad.id.MayflashWiiRemoteID"] = flixel_input_gamepad_id_MayflashWiiRemoteID;
flixel_input_gamepad_id_MayflashWiiRemoteID.__name__ = "flixel.input.gamepad.id.MayflashWiiRemoteID";
var flixel_input_gamepad_id_OUYAID = function() { };
$hxClasses["flixel.input.gamepad.id.OUYAID"] = flixel_input_gamepad_id_OUYAID;
flixel_input_gamepad_id_OUYAID.__name__ = "flixel.input.gamepad.id.OUYAID";
var flixel_input_gamepad_id_PS4ID = function() { };
$hxClasses["flixel.input.gamepad.id.PS4ID"] = flixel_input_gamepad_id_PS4ID;
flixel_input_gamepad_id_PS4ID.__name__ = "flixel.input.gamepad.id.PS4ID";
var flixel_input_gamepad_id_PSVitaID = function() { };
$hxClasses["flixel.input.gamepad.id.PSVitaID"] = flixel_input_gamepad_id_PSVitaID;
flixel_input_gamepad_id_PSVitaID.__name__ = "flixel.input.gamepad.id.PSVitaID";
var flixel_input_gamepad_id_SwitchJoyconLeftID = function() { };
$hxClasses["flixel.input.gamepad.id.SwitchJoyconLeftID"] = flixel_input_gamepad_id_SwitchJoyconLeftID;
flixel_input_gamepad_id_SwitchJoyconLeftID.__name__ = "flixel.input.gamepad.id.SwitchJoyconLeftID";
var flixel_input_gamepad_id_SwitchJoyconRightID = function() { };
$hxClasses["flixel.input.gamepad.id.SwitchJoyconRightID"] = flixel_input_gamepad_id_SwitchJoyconRightID;
flixel_input_gamepad_id_SwitchJoyconRightID.__name__ = "flixel.input.gamepad.id.SwitchJoyconRightID";
var flixel_input_gamepad_id_SwitchProID = function() { };
$hxClasses["flixel.input.gamepad.id.SwitchProID"] = flixel_input_gamepad_id_SwitchProID;
flixel_input_gamepad_id_SwitchProID.__name__ = "flixel.input.gamepad.id.SwitchProID";
var flixel_input_gamepad_id_WiiRemoteID = function() { };
$hxClasses["flixel.input.gamepad.id.WiiRemoteID"] = flixel_input_gamepad_id_WiiRemoteID;
flixel_input_gamepad_id_WiiRemoteID.__name__ = "flixel.input.gamepad.id.WiiRemoteID";
var flixel_input_gamepad_id_XInputID = function() { };
$hxClasses["flixel.input.gamepad.id.XInputID"] = flixel_input_gamepad_id_XInputID;
flixel_input_gamepad_id_XInputID.__name__ = "flixel.input.gamepad.id.XInputID";
var flixel_input_gamepad_lists_FlxBaseGamepadList = function(status,gamepad) {
	this.status = status;
	this.gamepad = gamepad;
};
$hxClasses["flixel.input.gamepad.lists.FlxBaseGamepadList"] = flixel_input_gamepad_lists_FlxBaseGamepadList;
flixel_input_gamepad_lists_FlxBaseGamepadList.__name__ = "flixel.input.gamepad.lists.FlxBaseGamepadList";
flixel_input_gamepad_lists_FlxBaseGamepadList.prototype = {
	status: null
	,gamepad: null
	,check: function(id) {
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,checkRaw: function(id) {
		var button = this.gamepad.buttons[id];
		if(button != null) {
			return button.hasState(this.status);
		} else {
			return false;
		}
	}
	,get_ANY: function() {
		var _g = 0;
		var _g1 = this.gamepad.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			var tmp;
			if(button != null) {
				var button1 = this.gamepad.buttons[button.ID];
				tmp = button1 != null && button1.hasState(this.status);
			} else {
				tmp = false;
			}
			if(tmp) {
				return true;
			}
		}
		return false;
	}
	,get_ALL: function() {
		var _g = 0;
		var _g1 = this.gamepad.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			var tmp;
			if(button != null) {
				var button1 = this.gamepad.buttons[button.ID];
				tmp = !(button1 != null && button1.hasState(this.status));
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
		}
		return true;
	}
	,get_NONE: function() {
		var _g = 0;
		var _g1 = this.gamepad.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			var tmp;
			if(button != null) {
				var button1 = this.gamepad.buttons[button.ID];
				tmp = button1 != null && button1.hasState(this.status);
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
		}
		return true;
	}
	,__class__: flixel_input_gamepad_lists_FlxBaseGamepadList
	,__properties__: {get_NONE:"get_NONE",get_ALL:"get_ALL",get_ANY:"get_ANY"}
};
var flixel_input_gamepad_lists_FlxGamepadAnalogList = function(gamepad) {
	this.value = new flixel_input_gamepad_lists_FlxGamepadAnalogValueList(gamepad);
	this.justMoved = new flixel_input_gamepad_lists_FlxGamepadAnalogStateList(2,gamepad);
	this.justReleased = new flixel_input_gamepad_lists_FlxGamepadAnalogStateList(-1,gamepad);
};
$hxClasses["flixel.input.gamepad.lists.FlxGamepadAnalogList"] = flixel_input_gamepad_lists_FlxGamepadAnalogList;
flixel_input_gamepad_lists_FlxGamepadAnalogList.__name__ = "flixel.input.gamepad.lists.FlxGamepadAnalogList";
flixel_input_gamepad_lists_FlxGamepadAnalogList.prototype = {
	value: null
	,justMoved: null
	,justReleased: null
	,__class__: flixel_input_gamepad_lists_FlxGamepadAnalogList
};
var flixel_input_gamepad_lists_FlxGamepadAnalogStateList = function(status,gamepad) {
	this.status = status;
	this.gamepad = gamepad;
};
$hxClasses["flixel.input.gamepad.lists.FlxGamepadAnalogStateList"] = flixel_input_gamepad_lists_FlxGamepadAnalogStateList;
flixel_input_gamepad_lists_FlxGamepadAnalogStateList.__name__ = "flixel.input.gamepad.lists.FlxGamepadAnalogStateList";
flixel_input_gamepad_lists_FlxGamepadAnalogStateList.prototype = {
	gamepad: null
	,status: null
	,get_LEFT_STICK: function() {
		return this.checkXY(19);
	}
	,get_LEFT_STICK_X: function() {
		var stick = this.gamepad.mapping.getAnalogStick(19);
		if(stick == null) {
			return false;
		} else {
			var button = this.gamepad.buttons[stick.x];
			if(button != null) {
				return button.hasState(this.status);
			} else {
				return false;
			}
		}
	}
	,get_LEFT_STICK_Y: function() {
		var stick = this.gamepad.mapping.getAnalogStick(19);
		if(stick == null) {
			return false;
		} else {
			var button = this.gamepad.buttons[stick.y];
			if(button != null) {
				return button.hasState(this.status);
			} else {
				return false;
			}
		}
	}
	,get_RIGHT_STICK: function() {
		return this.checkXY(20);
	}
	,get_RIGHT_STICK_X: function() {
		var stick = this.gamepad.mapping.getAnalogStick(20);
		if(stick == null) {
			return false;
		} else {
			var button = this.gamepad.buttons[stick.x];
			if(button != null) {
				return button.hasState(this.status);
			} else {
				return false;
			}
		}
	}
	,get_RIGHT_STICK_Y: function() {
		var stick = this.gamepad.mapping.getAnalogStick(20);
		if(stick == null) {
			return false;
		} else {
			var button = this.gamepad.buttons[stick.y];
			if(button != null) {
				return button.hasState(this.status);
			} else {
				return false;
			}
		}
	}
	,checkXY: function(id) {
		var stick = this.gamepad.mapping.getAnalogStick(id);
		if(stick == null) {
			return false;
		}
		var button = this.gamepad.buttons[stick.x];
		var xVal = button != null && button.hasState(this.status);
		var button = this.gamepad.buttons[stick.y];
		var yVal = button != null && button.hasState(this.status);
		if(xVal && yVal) {
			return true;
		}
		if(xVal) {
			var button = this.gamepad.buttons[stick.y];
			var yReleased = button != null && button.hasState(0);
			var button = this.gamepad.buttons[stick.y];
			var yJustReleased = button != null && button.hasState(-1);
			if(yReleased || yJustReleased) {
				return true;
			}
		}
		if(yVal) {
			var button = this.gamepad.buttons[stick.x];
			var xReleased = button != null && button.hasState(0);
			var button = this.gamepad.buttons[stick.x];
			var xJustReleased = button != null && button.hasState(-1);
			if(xReleased || xJustReleased) {
				return true;
			}
		}
		return false;
	}
	,checkX: function(id) {
		var stick = this.gamepad.mapping.getAnalogStick(id);
		if(stick == null) {
			return false;
		}
		var button = this.gamepad.buttons[stick.x];
		if(button != null) {
			return button.hasState(this.status);
		} else {
			return false;
		}
	}
	,checkY: function(id) {
		var stick = this.gamepad.mapping.getAnalogStick(id);
		if(stick == null) {
			return false;
		}
		var button = this.gamepad.buttons[stick.y];
		if(button != null) {
			return button.hasState(this.status);
		} else {
			return false;
		}
	}
	,checkRaw: function(RawID,Status) {
		var button = this.gamepad.buttons[RawID];
		if(button != null) {
			return button.hasState(Status);
		} else {
			return false;
		}
	}
	,__class__: flixel_input_gamepad_lists_FlxGamepadAnalogStateList
	,__properties__: {get_RIGHT_STICK_Y:"get_RIGHT_STICK_Y",get_RIGHT_STICK_X:"get_RIGHT_STICK_X",get_RIGHT_STICK:"get_RIGHT_STICK",get_LEFT_STICK_Y:"get_LEFT_STICK_Y",get_LEFT_STICK_X:"get_LEFT_STICK_X",get_LEFT_STICK:"get_LEFT_STICK"}
};
var flixel_input_gamepad_lists_FlxGamepadAnalogValueList = function(gamepad) {
	this.gamepad = gamepad;
};
$hxClasses["flixel.input.gamepad.lists.FlxGamepadAnalogValueList"] = flixel_input_gamepad_lists_FlxGamepadAnalogValueList;
flixel_input_gamepad_lists_FlxGamepadAnalogValueList.__name__ = "flixel.input.gamepad.lists.FlxGamepadAnalogValueList";
flixel_input_gamepad_lists_FlxGamepadAnalogValueList.prototype = {
	gamepad: null
	,get_LEFT_STICK_X: function() {
		var _this = this.gamepad;
		return _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(19));
	}
	,get_LEFT_STICK_Y: function() {
		var _this = this.gamepad;
		return _this.getYAxisRaw(_this.mapping.getAnalogStick(19));
	}
	,get_RIGHT_STICK_X: function() {
		var _this = this.gamepad;
		return _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(20));
	}
	,get_RIGHT_STICK_Y: function() {
		var _this = this.gamepad;
		return _this.getYAxisRaw(_this.mapping.getAnalogStick(20));
	}
	,get_LEFT_TRIGGER: function() {
		return this.gamepad.getAxis(17);
	}
	,get_RIGHT_TRIGGER: function() {
		return this.gamepad.getAxis(18);
	}
	,get_POINTER_X: function() {
		return this.gamepad.getAxis(28);
	}
	,get_POINTER_Y: function() {
		return this.gamepad.getAxis(29);
	}
	,getAxis: function(id) {
		return this.gamepad.getAxis(id);
	}
	,getXAxis: function(id) {
		var _this = this.gamepad;
		return _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(id));
	}
	,getYAxis: function(id) {
		var _this = this.gamepad;
		return _this.getYAxisRaw(_this.mapping.getAnalogStick(id));
	}
	,__class__: flixel_input_gamepad_lists_FlxGamepadAnalogValueList
	,__properties__: {get_POINTER_Y:"get_POINTER_Y",get_POINTER_X:"get_POINTER_X",get_RIGHT_TRIGGER:"get_RIGHT_TRIGGER",get_LEFT_TRIGGER:"get_LEFT_TRIGGER",get_RIGHT_STICK_Y:"get_RIGHT_STICK_Y",get_RIGHT_STICK_X:"get_RIGHT_STICK_X",get_LEFT_STICK_Y:"get_LEFT_STICK_Y",get_LEFT_STICK_X:"get_LEFT_STICK_X"}
};
var flixel_input_gamepad_lists_FlxGamepadButtonList = function(status,gamepad) {
	flixel_input_gamepad_lists_FlxBaseGamepadList.call(this,status,gamepad);
};
$hxClasses["flixel.input.gamepad.lists.FlxGamepadButtonList"] = flixel_input_gamepad_lists_FlxGamepadButtonList;
flixel_input_gamepad_lists_FlxGamepadButtonList.__name__ = "flixel.input.gamepad.lists.FlxGamepadButtonList";
flixel_input_gamepad_lists_FlxGamepadButtonList.__super__ = flixel_input_gamepad_lists_FlxBaseGamepadList;
flixel_input_gamepad_lists_FlxGamepadButtonList.prototype = $extend(flixel_input_gamepad_lists_FlxBaseGamepadList.prototype,{
	get_A: function() {
		var id = 0;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_B: function() {
		var id = 1;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_X: function() {
		var id = 2;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_Y: function() {
		var id = 3;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_LEFT_SHOULDER: function() {
		var id = 4;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_RIGHT_SHOULDER: function() {
		var id = 5;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_BACK: function() {
		var id = 6;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_START: function() {
		var id = 7;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_LEFT_STICK_CLICK: function() {
		var id = 8;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_RIGHT_STICK_CLICK: function() {
		var id = 9;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_GUIDE: function() {
		var id = 10;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_DPAD_UP: function() {
		var id = 11;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_DPAD_DOWN: function() {
		var id = 12;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_DPAD_LEFT: function() {
		var id = 13;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_DPAD_RIGHT: function() {
		var id = 14;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_LEFT_TRIGGER_BUTTON: function() {
		var id = 15;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_RIGHT_TRIGGER_BUTTON: function() {
		var id = 16;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_LEFT_TRIGGER: function() {
		var id = 17;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_RIGHT_TRIGGER: function() {
		var id = 18;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_LEFT_ANALOG_STICK: function() {
		var id = 19;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_RIGHT_ANALOG_STICK: function() {
		var id = 20;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_DPAD: function() {
		var id = 21;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_TILT_PITCH: function() {
		var id = 26;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_TILT_ROLL: function() {
		var id = 27;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_POINTER_X: function() {
		var id = 28;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_POINTER_Y: function() {
		var id = 29;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_EXTRA_0: function() {
		var id = 30;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_EXTRA_1: function() {
		var id = 31;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_EXTRA_2: function() {
		var id = 32;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_EXTRA_3: function() {
		var id = 33;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_LEFT_STICK_DIGITAL_UP: function() {
		var id = 34;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_LEFT_STICK_DIGITAL_RIGHT: function() {
		var id = 35;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_LEFT_STICK_DIGITAL_DOWN: function() {
		var id = 36;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_LEFT_STICK_DIGITAL_LEFT: function() {
		var id = 37;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_RIGHT_STICK_DIGITAL_UP: function() {
		var id = 38;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_RIGHT_STICK_DIGITAL_RIGHT: function() {
		var id = 39;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_RIGHT_STICK_DIGITAL_DOWN: function() {
		var id = 40;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,get_RIGHT_STICK_DIGITAL_LEFT: function() {
		var id = 41;
		var _this = this.gamepad;
		var Status = this.status;
		switch(id) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(id);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,__class__: flixel_input_gamepad_lists_FlxGamepadButtonList
	,__properties__: $extend(flixel_input_gamepad_lists_FlxBaseGamepadList.prototype.__properties__,{get_RIGHT_STICK_DIGITAL_LEFT:"get_RIGHT_STICK_DIGITAL_LEFT",get_RIGHT_STICK_DIGITAL_DOWN:"get_RIGHT_STICK_DIGITAL_DOWN",get_RIGHT_STICK_DIGITAL_RIGHT:"get_RIGHT_STICK_DIGITAL_RIGHT",get_RIGHT_STICK_DIGITAL_UP:"get_RIGHT_STICK_DIGITAL_UP",get_LEFT_STICK_DIGITAL_LEFT:"get_LEFT_STICK_DIGITAL_LEFT",get_LEFT_STICK_DIGITAL_DOWN:"get_LEFT_STICK_DIGITAL_DOWN",get_LEFT_STICK_DIGITAL_RIGHT:"get_LEFT_STICK_DIGITAL_RIGHT",get_LEFT_STICK_DIGITAL_UP:"get_LEFT_STICK_DIGITAL_UP",get_EXTRA_3:"get_EXTRA_3",get_EXTRA_2:"get_EXTRA_2",get_EXTRA_1:"get_EXTRA_1",get_EXTRA_0:"get_EXTRA_0",get_POINTER_Y:"get_POINTER_Y",get_POINTER_X:"get_POINTER_X",get_TILT_ROLL:"get_TILT_ROLL",get_TILT_PITCH:"get_TILT_PITCH",get_DPAD:"get_DPAD",get_RIGHT_ANALOG_STICK:"get_RIGHT_ANALOG_STICK",get_LEFT_ANALOG_STICK:"get_LEFT_ANALOG_STICK",get_RIGHT_TRIGGER:"get_RIGHT_TRIGGER",get_LEFT_TRIGGER:"get_LEFT_TRIGGER",get_RIGHT_TRIGGER_BUTTON:"get_RIGHT_TRIGGER_BUTTON",get_LEFT_TRIGGER_BUTTON:"get_LEFT_TRIGGER_BUTTON",get_DPAD_RIGHT:"get_DPAD_RIGHT",get_DPAD_LEFT:"get_DPAD_LEFT",get_DPAD_DOWN:"get_DPAD_DOWN",get_DPAD_UP:"get_DPAD_UP",get_GUIDE:"get_GUIDE",get_RIGHT_STICK_CLICK:"get_RIGHT_STICK_CLICK",get_LEFT_STICK_CLICK:"get_LEFT_STICK_CLICK",get_START:"get_START",get_BACK:"get_BACK",get_RIGHT_SHOULDER:"get_RIGHT_SHOULDER",get_LEFT_SHOULDER:"get_LEFT_SHOULDER",get_Y:"get_Y",get_X:"get_X",get_B:"get_B",get_A:"get_A"})
});
var flixel_input_gamepad_lists_FlxGamepadMotionValueList = function(gamepad) {
	this.gamepad = gamepad;
};
$hxClasses["flixel.input.gamepad.lists.FlxGamepadMotionValueList"] = flixel_input_gamepad_lists_FlxGamepadMotionValueList;
flixel_input_gamepad_lists_FlxGamepadMotionValueList.__name__ = "flixel.input.gamepad.lists.FlxGamepadMotionValueList";
flixel_input_gamepad_lists_FlxGamepadMotionValueList.prototype = {
	gamepad: null
	,get_TILT_PITCH: function() {
		if(!this.gamepad.mapping.supportsMotion) {
			return 0;
		} else {
			return this.gamepad.getAxis(26);
		}
	}
	,get_TILT_ROLL: function() {
		if(!this.gamepad.mapping.supportsMotion) {
			return 0;
		} else {
			return this.gamepad.getAxis(27);
		}
	}
	,getAxis: function(id) {
		if(!this.gamepad.mapping.supportsMotion) {
			return 0;
		}
		return this.gamepad.getAxis(id);
	}
	,get_isSupported: function() {
		return this.gamepad.mapping.supportsMotion;
	}
	,__class__: flixel_input_gamepad_lists_FlxGamepadMotionValueList
	,__properties__: {get_TILT_ROLL:"get_TILT_ROLL",get_TILT_PITCH:"get_TILT_PITCH",get_isSupported:"get_isSupported"}
};
var flixel_input_gamepad_lists_FlxGamepadPointerValueList = function(gamepad) {
	this.gamepad = gamepad;
};
$hxClasses["flixel.input.gamepad.lists.FlxGamepadPointerValueList"] = flixel_input_gamepad_lists_FlxGamepadPointerValueList;
flixel_input_gamepad_lists_FlxGamepadPointerValueList.__name__ = "flixel.input.gamepad.lists.FlxGamepadPointerValueList";
flixel_input_gamepad_lists_FlxGamepadPointerValueList.prototype = {
	gamepad: null
	,get_X: function() {
		if(!this.gamepad.mapping.supportsPointer) {
			return 0;
		} else {
			return this.gamepad.getAxis(28);
		}
	}
	,get_Y: function() {
		if(!this.gamepad.mapping.supportsPointer) {
			return 0;
		} else {
			return this.gamepad.getAxis(29);
		}
	}
	,getAxis: function(id) {
		if(!this.gamepad.mapping.supportsPointer) {
			return 0;
		}
		return this.gamepad.getAxis(id);
	}
	,get_isSupported: function() {
		return this.gamepad.mapping.supportsPointer;
	}
	,__class__: flixel_input_gamepad_lists_FlxGamepadPointerValueList
	,__properties__: {get_Y:"get_Y",get_X:"get_X",get_isSupported:"get_isSupported"}
};
var flixel_input_gamepad_mappings_FlxGamepadMapping = function(attachment) {
	this.attachment = flixel_input_gamepad_FlxGamepadAttachment.NONE;
	this.supportsPointer = false;
	this.supportsMotion = false;
	if(attachment != null) {
		this.set_attachment(attachment);
	}
	this.initValues();
};
$hxClasses["flixel.input.gamepad.mappings.FlxGamepadMapping"] = flixel_input_gamepad_mappings_FlxGamepadMapping;
flixel_input_gamepad_mappings_FlxGamepadMapping.__name__ = "flixel.input.gamepad.mappings.FlxGamepadMapping";
flixel_input_gamepad_mappings_FlxGamepadMapping.prototype = {
	supportsMotion: null
	,supportsPointer: null
	,leftStick: null
	,rightStick: null
	,attachment: null
	,manufacturer: null
	,initValues: function() {
	}
	,getAnalogStick: function(ID) {
		switch(ID) {
		case 19:
			return this.leftStick;
		case 20:
			return this.rightStick;
		default:
			return null;
		}
	}
	,getID: function(rawID) {
		return -1;
	}
	,getRawID: function(ID) {
		return -1;
	}
	,isAxisFlipped: function(axisID) {
		return false;
	}
	,isAxisForMotion: function(ID) {
		return false;
	}
	,set_attachment: function(attachment) {
		return this.attachment = attachment;
	}
	,getInputLabel: function(id) {
		if(this.getRawID(id) == -1) {
			return null;
		}
		switch(id) {
		case 0:
			return "a";
		case 1:
			return "b";
		case 2:
			return "x";
		case 3:
			return "y";
		case 4:
			return "lb";
		case 5:
			return "rb";
		case 6:
			return "back";
		case 7:
			return "start";
		case 8:
			return "ls-click";
		case 9:
			return "rs-click";
		case 10:
			return "guide";
		case 11:
			return "up";
		case 12:
			return "down";
		case 13:
			return "left";
		case 14:
			return "right";
		case 15:
			return "l2-click";
		case 16:
			return "r2-click";
		case 17:
			return "lt";
		case 18:
			return "rt";
		case 19:
			return "ls";
		case 20:
			return "rs";
		case 21:
			return "dpad";
		case 34:
			return "ls-up";
		case 35:
			return "ls-right";
		case 36:
			return "ls-down";
		case 37:
			return "ls-left";
		case 38:
			return "rs-up";
		case 39:
			return "rs-right";
		case 40:
			return "rs-down";
		case 41:
			return "rs-left";
		default:
			return null;
		}
	}
	,__class__: flixel_input_gamepad_mappings_FlxGamepadMapping
	,__properties__: {set_attachment:"set_attachment"}
};
var flixel_input_gamepad_mappings_Manufacturer = $hxEnums["flixel.input.gamepad.mappings.Manufacturer"] = { __ename__ : "flixel.input.gamepad.mappings.Manufacturer", __constructs__ : ["GooglePepper","AdobeWindows","Unknown"]
	,GooglePepper: {_hx_index:0,__enum__:"flixel.input.gamepad.mappings.Manufacturer",toString:$estr}
	,AdobeWindows: {_hx_index:1,__enum__:"flixel.input.gamepad.mappings.Manufacturer",toString:$estr}
	,Unknown: {_hx_index:2,__enum__:"flixel.input.gamepad.mappings.Manufacturer",toString:$estr}
};
flixel_input_gamepad_mappings_Manufacturer.__empty_constructs__ = [flixel_input_gamepad_mappings_Manufacturer.GooglePepper,flixel_input_gamepad_mappings_Manufacturer.AdobeWindows,flixel_input_gamepad_mappings_Manufacturer.Unknown];
flixel_input_gamepad_mappings_Manufacturer.__meta__ = { obj : { SuppressWarnings : ["checkstyle:MemberName"]}};
var flixel_input_gamepad_mappings_LogitechMapping = function(attachment) {
	flixel_input_gamepad_mappings_FlxGamepadMapping.call(this,attachment);
};
$hxClasses["flixel.input.gamepad.mappings.LogitechMapping"] = flixel_input_gamepad_mappings_LogitechMapping;
flixel_input_gamepad_mappings_LogitechMapping.__name__ = "flixel.input.gamepad.mappings.LogitechMapping";
flixel_input_gamepad_mappings_LogitechMapping.__super__ = flixel_input_gamepad_mappings_FlxGamepadMapping;
flixel_input_gamepad_mappings_LogitechMapping.prototype = $extend(flixel_input_gamepad_mappings_FlxGamepadMapping.prototype,{
	initValues: function() {
		this.leftStick = flixel_input_gamepad_id_LogitechID.LEFT_ANALOG_STICK;
		this.rightStick = flixel_input_gamepad_id_LogitechID.RIGHT_ANALOG_STICK;
	}
	,getID: function(rawID) {
		switch(rawID) {
		case -5:
			return 10;
		case 0:
			return 2;
		case 1:
			return 0;
		case 2:
			return 1;
		case 3:
			return 3;
		case 4:
			return 4;
		case 5:
			return 5;
		case 6:
			return 17;
		case 7:
			return 18;
		case 8:
			return 6;
		case 9:
			return 7;
		case 10:
			return 8;
		case 11:
			return 9;
		case 16:
			return 11;
		case 17:
			return 12;
		case 18:
			return 13;
		case 19:
			return 14;
		default:
			var id = rawID;
			if(id == this.leftStick.rawUp) {
				return 34;
			} else {
				var id = rawID;
				if(id == this.leftStick.rawDown) {
					return 36;
				} else {
					var id = rawID;
					if(id == this.leftStick.rawLeft) {
						return 37;
					} else {
						var id = rawID;
						if(id == this.leftStick.rawRight) {
							return 35;
						} else {
							var id = rawID;
							if(id == this.rightStick.rawUp) {
								return 38;
							} else {
								var id = rawID;
								if(id == this.rightStick.rawDown) {
									return 40;
								} else {
									var id = rawID;
									if(id == this.rightStick.rawLeft) {
										return 41;
									} else {
										var id = rawID;
										if(id == this.rightStick.rawRight) {
											return 39;
										} else {
											return -1;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	,getRawID: function(ID) {
		switch(ID) {
		case 0:
			return 1;
		case 1:
			return 2;
		case 2:
			return 0;
		case 3:
			return 3;
		case 4:
			return 4;
		case 5:
			return 5;
		case 6:
			return 8;
		case 7:
			return 9;
		case 8:
			return 10;
		case 9:
			return 11;
		case 10:
			return -5;
		case 11:
			return 16;
		case 12:
			return 17;
		case 13:
			return 18;
		case 14:
			return 19;
		case 17:
			return 6;
		case 18:
			return 7;
		case 34:
			return flixel_input_gamepad_id_LogitechID.LEFT_ANALOG_STICK.rawUp;
		case 35:
			return flixel_input_gamepad_id_LogitechID.LEFT_ANALOG_STICK.rawRight;
		case 36:
			return flixel_input_gamepad_id_LogitechID.LEFT_ANALOG_STICK.rawDown;
		case 37:
			return flixel_input_gamepad_id_LogitechID.LEFT_ANALOG_STICK.rawLeft;
		case 38:
			return flixel_input_gamepad_id_LogitechID.RIGHT_ANALOG_STICK.rawUp;
		case 39:
			return flixel_input_gamepad_id_LogitechID.RIGHT_ANALOG_STICK.rawRight;
		case 40:
			return flixel_input_gamepad_id_LogitechID.RIGHT_ANALOG_STICK.rawDown;
		case 41:
			return flixel_input_gamepad_id_LogitechID.RIGHT_ANALOG_STICK.rawLeft;
		default:
			return -1;
		}
	}
	,getInputLabel: function(id) {
		switch(id) {
		case 0:
			return "2";
		case 1:
			return "3";
		case 2:
			return "1";
		case 3:
			return "4";
		case 4:
			return "5";
		case 5:
			return "6";
		case 6:
			return "9";
		case 7:
			return "10";
		case 10:
			return "logitech";
		case 17:
			return "7";
		case 18:
			return "8";
		default:
			return flixel_input_gamepad_mappings_FlxGamepadMapping.prototype.getInputLabel.call(this,id);
		}
	}
	,__class__: flixel_input_gamepad_mappings_LogitechMapping
});
var flixel_input_gamepad_mappings_MFiMapping = function(attachment) {
	flixel_input_gamepad_mappings_FlxGamepadMapping.call(this,attachment);
};
$hxClasses["flixel.input.gamepad.mappings.MFiMapping"] = flixel_input_gamepad_mappings_MFiMapping;
flixel_input_gamepad_mappings_MFiMapping.__name__ = "flixel.input.gamepad.mappings.MFiMapping";
flixel_input_gamepad_mappings_MFiMapping.__super__ = flixel_input_gamepad_mappings_FlxGamepadMapping;
flixel_input_gamepad_mappings_MFiMapping.prototype = $extend(flixel_input_gamepad_mappings_FlxGamepadMapping.prototype,{
	initValues: function() {
		this.leftStick = flixel_input_gamepad_id_MFiID.LEFT_ANALOG_STICK;
		this.rightStick = flixel_input_gamepad_id_MFiID.RIGHT_ANALOG_STICK;
	}
	,getID: function(rawID) {
		switch(rawID) {
		case 6:
			return 0;
		case 7:
			return 1;
		case 8:
			return 2;
		case 9:
			return 3;
		case 10:
			return 6;
		case 11:
			return 10;
		case 12:
			return 7;
		case 13:
			return 8;
		case 14:
			return 9;
		case 15:
			return 4;
		case 16:
			return 5;
		case 17:
			return 11;
		case 18:
			return 12;
		case 19:
			return 13;
		case 20:
			return 14;
		default:
			var id = rawID;
			if(id == this.leftStick.rawUp) {
				return 34;
			} else {
				var id = rawID;
				if(id == this.leftStick.rawDown) {
					return 36;
				} else {
					var id = rawID;
					if(id == this.leftStick.rawLeft) {
						return 37;
					} else {
						var id = rawID;
						if(id == this.leftStick.rawRight) {
							return 35;
						} else {
							var id = rawID;
							if(id == this.rightStick.rawUp) {
								return 38;
							} else {
								var id = rawID;
								if(id == this.rightStick.rawDown) {
									return 40;
								} else {
									var id = rawID;
									if(id == this.rightStick.rawLeft) {
										return 41;
									} else {
										var id = rawID;
										if(id == this.rightStick.rawRight) {
											return 39;
										} else {
											return -1;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	,getRawID: function(ID) {
		switch(ID) {
		case 0:
			return 6;
		case 1:
			return 7;
		case 2:
			return 8;
		case 3:
			return 9;
		case 4:
			return 15;
		case 5:
			return 16;
		case 6:
			return 10;
		case 7:
			return 12;
		case 8:
			return 13;
		case 9:
			return 14;
		case 10:
			return 11;
		case 11:
			return 17;
		case 12:
			return 18;
		case 13:
			return 19;
		case 14:
			return 20;
		case 17:
			return 4;
		case 18:
			return 5;
		case 34:
			return flixel_input_gamepad_id_MFiID.LEFT_ANALOG_STICK.rawUp;
		case 35:
			return flixel_input_gamepad_id_MFiID.LEFT_ANALOG_STICK.rawRight;
		case 36:
			return flixel_input_gamepad_id_MFiID.LEFT_ANALOG_STICK.rawDown;
		case 37:
			return flixel_input_gamepad_id_MFiID.LEFT_ANALOG_STICK.rawLeft;
		case 38:
			return flixel_input_gamepad_id_MFiID.RIGHT_ANALOG_STICK.rawUp;
		case 39:
			return flixel_input_gamepad_id_MFiID.RIGHT_ANALOG_STICK.rawRight;
		case 40:
			return flixel_input_gamepad_id_MFiID.RIGHT_ANALOG_STICK.rawDown;
		case 41:
			return flixel_input_gamepad_id_MFiID.RIGHT_ANALOG_STICK.rawLeft;
		default:
			return -1;
		}
	}
	,__class__: flixel_input_gamepad_mappings_MFiMapping
});
var flixel_input_gamepad_mappings_MayflashWiiRemoteMapping = function(attachment) {
	flixel_input_gamepad_mappings_FlxGamepadMapping.call(this,attachment);
};
$hxClasses["flixel.input.gamepad.mappings.MayflashWiiRemoteMapping"] = flixel_input_gamepad_mappings_MayflashWiiRemoteMapping;
flixel_input_gamepad_mappings_MayflashWiiRemoteMapping.__name__ = "flixel.input.gamepad.mappings.MayflashWiiRemoteMapping";
flixel_input_gamepad_mappings_MayflashWiiRemoteMapping.__super__ = flixel_input_gamepad_mappings_FlxGamepadMapping;
flixel_input_gamepad_mappings_MayflashWiiRemoteMapping.prototype = $extend(flixel_input_gamepad_mappings_FlxGamepadMapping.prototype,{
	initValues: function() {
		this.supportsPointer = true;
	}
	,getID: function(rawID) {
		switch(this.attachment._hx_index) {
		case 0:
			return this.getIDNunchuk(rawID);
		case 1:
			return this.getIDClassicController(rawID);
		case 2:
			return this.getIDDefault(rawID);
		}
	}
	,getIDClassicController: function(rawID) {
		switch(rawID) {
		case 4:
			return 11;
		case 5:
			return 12;
		case 6:
			return 13;
		case 7:
			return 14;
		case 8:
			return 2;
		case 9:
			return 3;
		case 10:
			return 0;
		case 11:
			return 1;
		case 12:
			return 17;
		case 13:
			return 18;
		case 14:
			return 4;
		case 15:
			return 5;
		case 16:
			return 6;
		case 17:
			return 7;
		case 19:
			return 10;
		default:
			var id = rawID;
			if(id == this.leftStick.rawUp) {
				return 34;
			} else {
				var id = rawID;
				if(id == this.leftStick.rawDown) {
					return 36;
				} else {
					var id = rawID;
					if(id == this.leftStick.rawLeft) {
						return 37;
					} else {
						var id = rawID;
						if(id == this.leftStick.rawRight) {
							return 35;
						} else {
							var id = rawID;
							if(id == this.rightStick.rawUp) {
								return 38;
							} else {
								var id = rawID;
								if(id == this.rightStick.rawDown) {
									return 40;
								} else {
									var id = rawID;
									if(id == this.rightStick.rawLeft) {
										return 41;
									} else {
										var id = rawID;
										if(id == this.rightStick.rawRight) {
											return 39;
										} else {
											return -1;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	,getIDNunchuk: function(rawID) {
		switch(rawID) {
		case 4:
			return 11;
		case 5:
			return 12;
		case 6:
			return 13;
		case 7:
			return 14;
		case 8:
			return 2;
		case 9:
			return 3;
		case 10:
			return 0;
		case 11:
			return 1;
		case 12:
			return 6;
		case 13:
			return 7;
		case 14:
			return 17;
		case 15:
			return 4;
		case 19:
			return 10;
		default:
			var tmp = rawID == flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_ANALOG_STICK.rawUp;
			var tmp = rawID == flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_ANALOG_STICK.rawDown;
			var tmp = rawID == flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_ANALOG_STICK.rawLeft;
			var tmp = rawID == flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_ANALOG_STICK.rawRight;
			return -1;
		}
	}
	,getIDDefault: function(rawID) {
		switch(rawID) {
		case 8:
			return 2;
		case 9:
			return 3;
		case 10:
			return 0;
		case 11:
			return 1;
		case 12:
			return 6;
		case 13:
			return 7;
		case 19:
			return 10;
		case 22:
			return 11;
		case 23:
			return 12;
		case 24:
			return 13;
		case 25:
			return 14;
		default:
			return -1;
		}
	}
	,getRawID: function(ID) {
		switch(this.attachment._hx_index) {
		case 0:
			return this.getRawNunchuk(ID);
		case 1:
			return this.getRawClassicController(ID);
		case 2:
			return this.getRawDefault(ID);
		}
	}
	,getRawClassicController: function(ID) {
		switch(ID) {
		case 0:
			return 10;
		case 1:
			return 11;
		case 2:
			return 8;
		case 3:
			return 9;
		case 4:
			return 14;
		case 5:
			return 15;
		case 6:
			return 16;
		case 7:
			return 17;
		case 10:
			return 19;
		case 11:
			return 4;
		case 12:
			return 5;
		case 13:
			return 6;
		case 14:
			return 7;
		case 17:
			return 12;
		case 18:
			return 13;
		case 30:
			return -1;
		case 31:
			return -1;
		case 34:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_ANALOG_STICK.rawUp;
		case 35:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_ANALOG_STICK.rawRight;
		case 36:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_ANALOG_STICK.rawDown;
		case 37:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_ANALOG_STICK.rawLeft;
		case 38:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.RIGHT_ANALOG_STICK.rawUp;
		case 39:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.RIGHT_ANALOG_STICK.rawRight;
		case 40:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.RIGHT_ANALOG_STICK.rawDown;
		case 41:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.RIGHT_ANALOG_STICK.rawLeft;
		default:
			return this.getRawDefault(ID);
		}
	}
	,getRawNunchuk: function(ID) {
		switch(ID) {
		case 0:
			return 10;
		case 1:
			return 11;
		case 2:
			return 8;
		case 3:
			return 9;
		case 4:
			return 15;
		case 6:
			return 12;
		case 7:
			return 13;
		case 10:
			return 19;
		case 11:
			return 4;
		case 12:
			return 5;
		case 13:
			return 6;
		case 14:
			return 7;
		case 17:
			return 14;
		case 28:
			return 2;
		case 29:
			return 3;
		case 34:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_ANALOG_STICK.rawUp;
		case 35:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_ANALOG_STICK.rawRight;
		case 36:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_ANALOG_STICK.rawDown;
		case 37:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_ANALOG_STICK.rawLeft;
		default:
			return -1;
		}
	}
	,getRawDefault: function(ID) {
		switch(ID) {
		case 0:
			return 10;
		case 1:
			return 11;
		case 2:
			return 8;
		case 3:
			return 9;
		case 6:
			return 12;
		case 7:
			return 13;
		case 10:
			return 19;
		case 11:
			return 22;
		case 12:
			return 23;
		case 13:
			return 24;
		case 14:
			return 25;
		default:
			return -1;
		}
	}
	,set_attachment: function(attachment) {
		var tmp;
		switch(attachment._hx_index) {
		case 0:case 1:
			tmp = flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_ANALOG_STICK;
			break;
		case 2:
			tmp = flixel_input_gamepad_id_MayflashWiiRemoteID.REMOTE_DPAD;
			break;
		}
		this.leftStick = tmp;
		this.rightStick = attachment._hx_index == 1 ? flixel_input_gamepad_id_MayflashWiiRemoteID.RIGHT_ANALOG_STICK : null;
		return flixel_input_gamepad_mappings_FlxGamepadMapping.prototype.set_attachment.call(this,attachment);
	}
	,getInputLabel: function(id) {
		var label = flixel_input_gamepad_mappings_WiiRemoteMapping.getWiiInputLabel(id,this.attachment);
		if(label == null) {
			return flixel_input_gamepad_mappings_FlxGamepadMapping.prototype.getInputLabel.call(this,id);
		}
		return label;
	}
	,__class__: flixel_input_gamepad_mappings_MayflashWiiRemoteMapping
});
var flixel_input_gamepad_mappings_OUYAMapping = function(attachment) {
	flixel_input_gamepad_mappings_FlxGamepadMapping.call(this,attachment);
};
$hxClasses["flixel.input.gamepad.mappings.OUYAMapping"] = flixel_input_gamepad_mappings_OUYAMapping;
flixel_input_gamepad_mappings_OUYAMapping.__name__ = "flixel.input.gamepad.mappings.OUYAMapping";
flixel_input_gamepad_mappings_OUYAMapping.__super__ = flixel_input_gamepad_mappings_FlxGamepadMapping;
flixel_input_gamepad_mappings_OUYAMapping.prototype = $extend(flixel_input_gamepad_mappings_FlxGamepadMapping.prototype,{
	initValues: function() {
		this.leftStick = flixel_input_gamepad_id_OUYAID.LEFT_ANALOG_STICK;
		this.rightStick = flixel_input_gamepad_id_OUYAID.RIGHT_ANALOG_STICK;
	}
	,getID: function(rawID) {
		switch(rawID) {
		case 4:
			return 17;
		case 5:
			return 18;
		case 6:
			return 0;
		case 7:
			return 1;
		case 8:
			return 2;
		case 9:
			return 3;
		case 13:
			return 8;
		case 14:
			return 9;
		case 15:
			return 4;
		case 16:
			return 5;
		case 17:
			return 11;
		case 18:
			return 12;
		case 19:
			return 13;
		case 20:
			return 14;
		case 16777234:
			return 10;
		default:
			var id = rawID;
			if(id == this.leftStick.rawUp) {
				return 34;
			} else {
				var id = rawID;
				if(id == this.leftStick.rawDown) {
					return 36;
				} else {
					var id = rawID;
					if(id == this.leftStick.rawLeft) {
						return 37;
					} else {
						var id = rawID;
						if(id == this.leftStick.rawRight) {
							return 35;
						} else {
							var id = rawID;
							if(id == this.rightStick.rawUp) {
								return 38;
							} else {
								var id = rawID;
								if(id == this.rightStick.rawDown) {
									return 40;
								} else {
									var id = rawID;
									if(id == this.rightStick.rawLeft) {
										return 41;
									} else {
										var id = rawID;
										if(id == this.rightStick.rawRight) {
											return 39;
										} else {
											return -1;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	,getRawID: function(ID) {
		switch(ID) {
		case 0:
			return 6;
		case 1:
			return 7;
		case 2:
			return 8;
		case 3:
			return 9;
		case 4:
			return 15;
		case 5:
			return 16;
		case 8:
			return 13;
		case 9:
			return 14;
		case 10:
			return 16777234;
		case 11:
			return 17;
		case 12:
			return 18;
		case 13:
			return 19;
		case 14:
			return 20;
		case 17:
			return 4;
		case 18:
			return 5;
		case 34:
			return flixel_input_gamepad_id_OUYAID.LEFT_ANALOG_STICK.rawUp;
		case 35:
			return flixel_input_gamepad_id_OUYAID.LEFT_ANALOG_STICK.rawRight;
		case 36:
			return flixel_input_gamepad_id_OUYAID.LEFT_ANALOG_STICK.rawDown;
		case 37:
			return flixel_input_gamepad_id_OUYAID.LEFT_ANALOG_STICK.rawLeft;
		case 38:
			return flixel_input_gamepad_id_OUYAID.RIGHT_ANALOG_STICK.rawUp;
		case 39:
			return flixel_input_gamepad_id_OUYAID.RIGHT_ANALOG_STICK.rawRight;
		case 40:
			return flixel_input_gamepad_id_OUYAID.RIGHT_ANALOG_STICK.rawDown;
		case 41:
			return flixel_input_gamepad_id_OUYAID.RIGHT_ANALOG_STICK.rawLeft;
		default:
			return -1;
		}
	}
	,getInputLabel: function(id) {
		switch(id) {
		case 0:
			return "o";
		case 1:
			return "a";
		case 2:
			return "u";
		case 3:
			return "y";
		case 10:
			return "home";
		default:
			return flixel_input_gamepad_mappings_FlxGamepadMapping.prototype.getInputLabel.call(this,id);
		}
	}
	,__class__: flixel_input_gamepad_mappings_OUYAMapping
});
var flixel_input_gamepad_mappings_PS4Mapping = function(attachment) {
	flixel_input_gamepad_mappings_FlxGamepadMapping.call(this,attachment);
};
$hxClasses["flixel.input.gamepad.mappings.PS4Mapping"] = flixel_input_gamepad_mappings_PS4Mapping;
flixel_input_gamepad_mappings_PS4Mapping.__name__ = "flixel.input.gamepad.mappings.PS4Mapping";
flixel_input_gamepad_mappings_PS4Mapping.__super__ = flixel_input_gamepad_mappings_FlxGamepadMapping;
flixel_input_gamepad_mappings_PS4Mapping.prototype = $extend(flixel_input_gamepad_mappings_FlxGamepadMapping.prototype,{
	initValues: function() {
		this.leftStick = flixel_input_gamepad_id_PS4ID.LEFT_ANALOG_STICK;
		this.rightStick = flixel_input_gamepad_id_PS4ID.RIGHT_ANALOG_STICK;
		this.supportsMotion = true;
		this.supportsPointer = true;
	}
	,getID: function(rawID) {
		switch(rawID) {
		case 6:
			return 0;
		case 7:
			return 1;
		case 8:
			return 2;
		case 9:
			return 3;
		case 10:
			return 6;
		case 11:
			return 10;
		case 12:
			return 7;
		case 13:
			return 8;
		case 14:
			return 9;
		case 15:
			return 4;
		case 16:
			return 5;
		case 17:
			return 11;
		case 18:
			return 12;
		case 19:
			return 13;
		case 20:
			return 14;
		default:
			var id = rawID;
			if(id == this.leftStick.rawUp) {
				return 34;
			} else {
				var id = rawID;
				if(id == this.leftStick.rawDown) {
					return 36;
				} else {
					var id = rawID;
					if(id == this.leftStick.rawLeft) {
						return 37;
					} else {
						var id = rawID;
						if(id == this.leftStick.rawRight) {
							return 35;
						} else {
							var id = rawID;
							if(id == this.rightStick.rawUp) {
								return 38;
							} else {
								var id = rawID;
								if(id == this.rightStick.rawDown) {
									return 40;
								} else {
									var id = rawID;
									if(id == this.rightStick.rawLeft) {
										return 41;
									} else {
										var id = rawID;
										if(id == this.rightStick.rawRight) {
											return 39;
										} else {
											return -1;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	,getRawID: function(ID) {
		switch(ID) {
		case 0:
			return 6;
		case 1:
			return 7;
		case 2:
			return 8;
		case 3:
			return 9;
		case 4:
			return 15;
		case 5:
			return 16;
		case 6:
			return 10;
		case 7:
			return 12;
		case 8:
			return 13;
		case 9:
			return 14;
		case 10:
			return 11;
		case 11:
			return 17;
		case 12:
			return 18;
		case 13:
			return 19;
		case 14:
			return 20;
		case 17:
			return 4;
		case 18:
			return 5;
		case 34:
			return flixel_input_gamepad_id_PS4ID.LEFT_ANALOG_STICK.rawUp;
		case 35:
			return flixel_input_gamepad_id_PS4ID.LEFT_ANALOG_STICK.rawRight;
		case 36:
			return flixel_input_gamepad_id_PS4ID.LEFT_ANALOG_STICK.rawDown;
		case 37:
			return flixel_input_gamepad_id_PS4ID.LEFT_ANALOG_STICK.rawLeft;
		case 38:
			return flixel_input_gamepad_id_PS4ID.RIGHT_ANALOG_STICK.rawUp;
		case 39:
			return flixel_input_gamepad_id_PS4ID.RIGHT_ANALOG_STICK.rawRight;
		case 40:
			return flixel_input_gamepad_id_PS4ID.RIGHT_ANALOG_STICK.rawDown;
		case 41:
			return flixel_input_gamepad_id_PS4ID.RIGHT_ANALOG_STICK.rawLeft;
		default:
			return -1;
		}
	}
	,getInputLabel: function(id) {
		switch(id) {
		case 0:
			return "x";
		case 1:
			return "circle";
		case 2:
			return "square";
		case 3:
			return "triangle";
		case 4:
			return "l1";
		case 5:
			return "r1";
		case 6:
			return "share";
		case 7:
			return "options";
		case 10:
			return "ps";
		case 17:
			return "l2";
		case 18:
			return "r2";
		default:
			return flixel_input_gamepad_mappings_FlxGamepadMapping.prototype.getInputLabel.call(this,id);
		}
	}
	,__class__: flixel_input_gamepad_mappings_PS4Mapping
});
var flixel_input_gamepad_mappings_PSVitaMapping = function(attachment) {
	flixel_input_gamepad_mappings_FlxGamepadMapping.call(this,attachment);
};
$hxClasses["flixel.input.gamepad.mappings.PSVitaMapping"] = flixel_input_gamepad_mappings_PSVitaMapping;
flixel_input_gamepad_mappings_PSVitaMapping.__name__ = "flixel.input.gamepad.mappings.PSVitaMapping";
flixel_input_gamepad_mappings_PSVitaMapping.__super__ = flixel_input_gamepad_mappings_FlxGamepadMapping;
flixel_input_gamepad_mappings_PSVitaMapping.prototype = $extend(flixel_input_gamepad_mappings_FlxGamepadMapping.prototype,{
	initValues: function() {
		this.leftStick = flixel_input_gamepad_id_PSVitaID.LEFT_ANALOG_STICK;
		this.rightStick = flixel_input_gamepad_id_PSVitaID.RIGHT_ANALOG_STICK;
	}
	,getID: function(rawID) {
		switch(rawID) {
		case 6:
			return 0;
		case 7:
			return 1;
		case 8:
			return 2;
		case 9:
			return 3;
		case 10:
			return 6;
		case 12:
			return 7;
		case 15:
			return 4;
		case 16:
			return 5;
		case 17:
			return 11;
		case 18:
			return 12;
		case 19:
			return 13;
		case 20:
			return 14;
		default:
			var id = rawID;
			if(id == this.leftStick.rawUp) {
				return 34;
			} else {
				var id = rawID;
				if(id == this.leftStick.rawDown) {
					return 34;
				} else {
					var id = rawID;
					if(id == this.leftStick.rawLeft) {
						return 37;
					} else {
						var id = rawID;
						if(id == this.leftStick.rawRight) {
							return 35;
						} else {
							var id = rawID;
							if(id == this.rightStick.rawUp) {
								return 38;
							} else {
								var id = rawID;
								if(id == this.rightStick.rawDown) {
									return 40;
								} else {
									var id = rawID;
									if(id == this.rightStick.rawLeft) {
										return 41;
									} else {
										var id = rawID;
										if(id == this.rightStick.rawRight) {
											return 39;
										} else {
											return -1;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	,getRawID: function(ID) {
		switch(ID) {
		case 0:
			return 6;
		case 1:
			return 7;
		case 2:
			return 8;
		case 3:
			return 9;
		case 4:
			return 15;
		case 5:
			return 16;
		case 6:
			return 10;
		case 7:
			return 12;
		case 11:
			return 17;
		case 12:
			return 18;
		case 13:
			return 19;
		case 14:
			return 20;
		case 34:
			return flixel_input_gamepad_id_PSVitaID.LEFT_ANALOG_STICK.rawUp;
		case 35:
			return flixel_input_gamepad_id_PSVitaID.LEFT_ANALOG_STICK.rawRight;
		case 36:
			return flixel_input_gamepad_id_PSVitaID.LEFT_ANALOG_STICK.rawDown;
		case 37:
			return flixel_input_gamepad_id_PSVitaID.LEFT_ANALOG_STICK.rawLeft;
		case 38:
			return flixel_input_gamepad_id_PSVitaID.RIGHT_ANALOG_STICK.rawUp;
		case 39:
			return flixel_input_gamepad_id_PSVitaID.RIGHT_ANALOG_STICK.rawRight;
		case 40:
			return flixel_input_gamepad_id_PSVitaID.RIGHT_ANALOG_STICK.rawDown;
		case 41:
			return flixel_input_gamepad_id_PSVitaID.RIGHT_ANALOG_STICK.rawLeft;
		default:
			return -1;
		}
	}
	,getInputLabel: function(id) {
		switch(id) {
		case 0:
			return "x";
		case 1:
			return "circle";
		case 2:
			return "square";
		case 3:
			return "triangle";
		case 4:
			return "l1";
		case 5:
			return "r1";
		case 6:
			return "select";
		case 17:
			return "l2";
		case 18:
			return "r2";
		default:
			return flixel_input_gamepad_mappings_FlxGamepadMapping.prototype.getInputLabel.call(this,id);
		}
	}
	,isAxisFlipped: function(axisID) {
		if(axisID != flixel_input_gamepad_id_PSVitaID.LEFT_ANALOG_STICK.y) {
			return axisID == flixel_input_gamepad_id_PSVitaID.RIGHT_ANALOG_STICK.y;
		} else {
			return true;
		}
	}
	,__class__: flixel_input_gamepad_mappings_PSVitaMapping
});
var flixel_input_gamepad_mappings_SwitchJoyconLeftMapping = function(attachment) {
	flixel_input_gamepad_mappings_FlxGamepadMapping.call(this,attachment);
};
$hxClasses["flixel.input.gamepad.mappings.SwitchJoyconLeftMapping"] = flixel_input_gamepad_mappings_SwitchJoyconLeftMapping;
flixel_input_gamepad_mappings_SwitchJoyconLeftMapping.__name__ = "flixel.input.gamepad.mappings.SwitchJoyconLeftMapping";
flixel_input_gamepad_mappings_SwitchJoyconLeftMapping.__super__ = flixel_input_gamepad_mappings_FlxGamepadMapping;
flixel_input_gamepad_mappings_SwitchJoyconLeftMapping.prototype = $extend(flixel_input_gamepad_mappings_FlxGamepadMapping.prototype,{
	initValues: function() {
		this.leftStick = flixel_input_gamepad_id_SwitchJoyconLeftID.LEFT_ANALOG_STICK;
		this.supportsMotion = true;
		this.supportsPointer = false;
	}
	,getID: function(rawID) {
		switch(rawID) {
		case 4:
			return 17;
		case 6:
			return 0;
		case 7:
			return 1;
		case 8:
			return 2;
		case 9:
			return 3;
		case 10:
			return 30;
		case 12:
			return 7;
		case 13:
			return 8;
		case 15:
			return 4;
		case 16:
			return 5;
		default:
			var id = rawID;
			if(id == this.leftStick.rawUp) {
				return 34;
			} else {
				var id = rawID;
				if(id == this.leftStick.rawDown) {
					return 36;
				} else {
					var id = rawID;
					if(id == this.leftStick.rawLeft) {
						return 37;
					} else {
						var id = rawID;
						if(id == this.leftStick.rawRight) {
							return 35;
						} else {
							return -1;
						}
					}
				}
			}
		}
	}
	,getRawID: function(id) {
		switch(id) {
		case 0:
			return 6;
		case 1:
			return 7;
		case 2:
			return 8;
		case 3:
			return 9;
		case 4:
			return 15;
		case 5:
			return 16;
		case 7:
			return 12;
		case 8:
			return 13;
		case 17:
			return 4;
		case 30:
			return 10;
		case 34:
			return flixel_input_gamepad_id_SwitchJoyconLeftID.LEFT_ANALOG_STICK.rawUp;
		case 35:
			return flixel_input_gamepad_id_SwitchJoyconLeftID.LEFT_ANALOG_STICK.rawRight;
		case 36:
			return flixel_input_gamepad_id_SwitchJoyconLeftID.LEFT_ANALOG_STICK.rawDown;
		case 37:
			return flixel_input_gamepad_id_SwitchJoyconLeftID.LEFT_ANALOG_STICK.rawLeft;
		default:
			return -1;
		}
	}
	,getInputLabel: function(id) {
		switch(id) {
		case 0:
			return "down";
		case 1:
			return "right";
		case 2:
			return "left";
		case 3:
			return "up";
		case 4:
			return "sl";
		case 5:
			return "sr";
		case 7:
			return "minus";
		case 17:
			return "zl";
		case 30:
			return "l";
		default:
			return flixel_input_gamepad_mappings_FlxGamepadMapping.prototype.getInputLabel.call(this,id);
		}
	}
	,__class__: flixel_input_gamepad_mappings_SwitchJoyconLeftMapping
});
var flixel_input_gamepad_mappings_SwitchJoyconRightMapping = function(attachment) {
	flixel_input_gamepad_mappings_FlxGamepadMapping.call(this,attachment);
};
$hxClasses["flixel.input.gamepad.mappings.SwitchJoyconRightMapping"] = flixel_input_gamepad_mappings_SwitchJoyconRightMapping;
flixel_input_gamepad_mappings_SwitchJoyconRightMapping.__name__ = "flixel.input.gamepad.mappings.SwitchJoyconRightMapping";
flixel_input_gamepad_mappings_SwitchJoyconRightMapping.__super__ = flixel_input_gamepad_mappings_FlxGamepadMapping;
flixel_input_gamepad_mappings_SwitchJoyconRightMapping.prototype = $extend(flixel_input_gamepad_mappings_FlxGamepadMapping.prototype,{
	initValues: function() {
		this.leftStick = flixel_input_gamepad_id_SwitchJoyconRightID.LEFT_ANALOG_STICK;
		this.supportsMotion = true;
		this.supportsPointer = false;
	}
	,getID: function(rawID) {
		switch(rawID) {
		case 5:
			return 18;
		case 6:
			return 0;
		case 7:
			return 1;
		case 8:
			return 2;
		case 9:
			return 3;
		case 10:
			return 30;
		case 11:
			return 10;
		case 12:
			return 7;
		case 13:
			return 8;
		case 15:
			return 4;
		case 16:
			return 5;
		default:
			var id = rawID;
			if(id == this.leftStick.rawUp) {
				return 34;
			} else {
				var id = rawID;
				if(id == this.leftStick.rawDown) {
					return 36;
				} else {
					var id = rawID;
					if(id == this.leftStick.rawLeft) {
						return 37;
					} else {
						var id = rawID;
						if(id == this.leftStick.rawRight) {
							return 35;
						} else {
							return -1;
						}
					}
				}
			}
		}
	}
	,getRawID: function(ID) {
		switch(ID) {
		case 0:
			return 6;
		case 1:
			return 7;
		case 2:
			return 8;
		case 3:
			return 9;
		case 4:
			return 15;
		case 5:
			return 16;
		case 7:
			return 12;
		case 8:
			return 13;
		case 10:
			return 11;
		case 18:
			return 5;
		case 30:
			return 10;
		case 34:
			return flixel_input_gamepad_id_SwitchJoyconRightID.LEFT_ANALOG_STICK.rawUp;
		case 35:
			return flixel_input_gamepad_id_SwitchJoyconRightID.LEFT_ANALOG_STICK.rawRight;
		case 36:
			return flixel_input_gamepad_id_SwitchJoyconRightID.LEFT_ANALOG_STICK.rawDown;
		case 37:
			return flixel_input_gamepad_id_SwitchJoyconRightID.LEFT_ANALOG_STICK.rawLeft;
		default:
			return -1;
		}
	}
	,getInputLabel: function(id) {
		switch(id) {
		case 0:
			return "a";
		case 1:
			return "x";
		case 2:
			return "b";
		case 3:
			return "y";
		case 4:
			return "sl";
		case 5:
			return "sr";
		case 7:
			return "plus";
		case 10:
			return "home";
		case 18:
			return "zr";
		case 30:
			return "r";
		default:
			return flixel_input_gamepad_mappings_FlxGamepadMapping.prototype.getInputLabel.call(this,id);
		}
	}
	,__class__: flixel_input_gamepad_mappings_SwitchJoyconRightMapping
});
var flixel_input_gamepad_mappings_SwitchProMapping = function(attachment) {
	flixel_input_gamepad_mappings_FlxGamepadMapping.call(this,attachment);
};
$hxClasses["flixel.input.gamepad.mappings.SwitchProMapping"] = flixel_input_gamepad_mappings_SwitchProMapping;
flixel_input_gamepad_mappings_SwitchProMapping.__name__ = "flixel.input.gamepad.mappings.SwitchProMapping";
flixel_input_gamepad_mappings_SwitchProMapping.__super__ = flixel_input_gamepad_mappings_FlxGamepadMapping;
flixel_input_gamepad_mappings_SwitchProMapping.prototype = $extend(flixel_input_gamepad_mappings_FlxGamepadMapping.prototype,{
	initValues: function() {
		this.leftStick = flixel_input_gamepad_id_SwitchProID.LEFT_ANALOG_STICK;
		this.rightStick = flixel_input_gamepad_id_SwitchProID.RIGHT_ANALOG_STICK;
		this.supportsMotion = true;
		this.supportsPointer = false;
	}
	,getID: function(rawID) {
		switch(rawID) {
		case 4:
			return 17;
		case 5:
			return 18;
		case 6:
			return 0;
		case 7:
			return 1;
		case 8:
			return 2;
		case 9:
			return 3;
		case 10:
			return 6;
		case 11:
			return 10;
		case 12:
			return 7;
		case 13:
			return 8;
		case 14:
			return 9;
		case 15:
			return 4;
		case 16:
			return 5;
		case 17:
			return 11;
		case 18:
			return 12;
		case 19:
			return 13;
		case 20:
			return 14;
		case 21:
			return 30;
		default:
			var id = rawID;
			if(id == this.leftStick.rawUp) {
				return 34;
			} else {
				var id = rawID;
				if(id == this.leftStick.rawDown) {
					return 36;
				} else {
					var id = rawID;
					if(id == this.leftStick.rawLeft) {
						return 37;
					} else {
						var id = rawID;
						if(id == this.leftStick.rawRight) {
							return 35;
						} else {
							var id = rawID;
							if(id == this.rightStick.rawUp) {
								return 38;
							} else {
								var id = rawID;
								if(id == this.rightStick.rawDown) {
									return 40;
								} else {
									var id = rawID;
									if(id == this.rightStick.rawLeft) {
										return 41;
									} else {
										var id = rawID;
										if(id == this.rightStick.rawRight) {
											return 39;
										} else {
											return -1;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	,getRawID: function(ID) {
		switch(ID) {
		case 0:
			return 6;
		case 1:
			return 7;
		case 2:
			return 8;
		case 3:
			return 9;
		case 4:
			return 15;
		case 5:
			return 16;
		case 6:
			return 10;
		case 7:
			return 12;
		case 8:
			return 13;
		case 9:
			return 14;
		case 10:
			return 11;
		case 11:
			return 17;
		case 12:
			return 18;
		case 13:
			return 19;
		case 14:
			return 20;
		case 17:
			return 4;
		case 18:
			return 5;
		case 30:
			return 21;
		case 34:
			return flixel_input_gamepad_id_SwitchProID.LEFT_ANALOG_STICK.rawUp;
		case 35:
			return flixel_input_gamepad_id_SwitchProID.LEFT_ANALOG_STICK.rawRight;
		case 36:
			return flixel_input_gamepad_id_SwitchProID.LEFT_ANALOG_STICK.rawDown;
		case 37:
			return flixel_input_gamepad_id_SwitchProID.LEFT_ANALOG_STICK.rawLeft;
		case 38:
			return flixel_input_gamepad_id_SwitchProID.RIGHT_ANALOG_STICK.rawUp;
		case 39:
			return flixel_input_gamepad_id_SwitchProID.RIGHT_ANALOG_STICK.rawRight;
		case 40:
			return flixel_input_gamepad_id_SwitchProID.RIGHT_ANALOG_STICK.rawDown;
		case 41:
			return flixel_input_gamepad_id_SwitchProID.RIGHT_ANALOG_STICK.rawLeft;
		default:
			return -1;
		}
	}
	,getInputLabel: function(id) {
		switch(id) {
		case 0:
			return "b";
		case 1:
			return "a";
		case 2:
			return "y";
		case 3:
			return "x";
		case 4:
			return "l";
		case 5:
			return "r";
		case 6:
			return "minus";
		case 7:
			return "plus";
		case 10:
			return "home";
		case 17:
			return "zl";
		case 18:
			return "zr";
		case 30:
			return "capture";
		default:
			return flixel_input_gamepad_mappings_FlxGamepadMapping.prototype.getInputLabel.call(this,id);
		}
	}
	,__class__: flixel_input_gamepad_mappings_SwitchProMapping
});
var flixel_input_gamepad_mappings_WiiRemoteMapping = function(attachment) {
	flixel_input_gamepad_mappings_FlxGamepadMapping.call(this,attachment);
};
$hxClasses["flixel.input.gamepad.mappings.WiiRemoteMapping"] = flixel_input_gamepad_mappings_WiiRemoteMapping;
flixel_input_gamepad_mappings_WiiRemoteMapping.__name__ = "flixel.input.gamepad.mappings.WiiRemoteMapping";
flixel_input_gamepad_mappings_WiiRemoteMapping.getWiiInputLabel = function(id,attachment) {
	switch(id) {
	case 6:
		return "minus";
	case 7:
		return "plus";
	case 10:
		return "home";
	default:
	}
	switch(attachment._hx_index) {
	case 0:
		switch(id) {
		case 2:
			return "1";
		case 3:
			return "2";
		case 4:
			return "c";
		case 17:
			return "z";
		default:
			return null;
		}
		break;
	case 1:
		switch(id) {
		case 0:
			return "b";
		case 1:
			return "a";
		case 2:
			return "y";
		case 3:
			return "x";
		case 4:
			return "zl";
		case 5:
			return "zr";
		case 17:
			return "l";
		case 18:
			return "r";
		case 30:
			return "1";
		case 31:
			return "2";
		default:
			return null;
		}
		break;
	case 2:
		switch(id) {
		case 2:
			return "1";
		case 3:
			return "2";
		case 6:
			return "minus";
		case 7:
			return "plus";
		case 10:
			return "home";
		default:
			return null;
		}
		break;
	}
};
flixel_input_gamepad_mappings_WiiRemoteMapping.getLabelClassicController = function(ID) {
	switch(ID) {
	case 0:
		return "b";
	case 1:
		return "a";
	case 2:
		return "y";
	case 3:
		return "x";
	case 4:
		return "zl";
	case 5:
		return "zr";
	case 17:
		return "l";
	case 18:
		return "r";
	case 30:
		return "1";
	case 31:
		return "2";
	default:
		return null;
	}
};
flixel_input_gamepad_mappings_WiiRemoteMapping.getLabelNunchuk = function(ID) {
	switch(ID) {
	case 2:
		return "1";
	case 3:
		return "2";
	case 4:
		return "c";
	case 17:
		return "z";
	default:
		return null;
	}
};
flixel_input_gamepad_mappings_WiiRemoteMapping.getLabelDefault = function(ID) {
	switch(ID) {
	case 2:
		return "1";
	case 3:
		return "2";
	case 6:
		return "minus";
	case 7:
		return "plus";
	case 10:
		return "home";
	default:
		return null;
	}
};
flixel_input_gamepad_mappings_WiiRemoteMapping.__super__ = flixel_input_gamepad_mappings_FlxGamepadMapping;
flixel_input_gamepad_mappings_WiiRemoteMapping.prototype = $extend(flixel_input_gamepad_mappings_FlxGamepadMapping.prototype,{
	initValues: function() {
		this.supportsMotion = true;
		this.supportsPointer = false;
	}
	,getID: function(rawID) {
		switch(this.attachment._hx_index) {
		case 0:
			return this.getIDNunchuk(rawID);
		case 1:
			return this.getIDClassicController(rawID);
		case 2:
			return this.getIDDefault(rawID);
		}
	}
	,getIDClassicController: function(rawID) {
		switch(rawID) {
		case 5:
			return 11;
		case 6:
			return 12;
		case 7:
			return 13;
		case 8:
			return 14;
		case 9:
			return 1;
		case 10:
			return 0;
		case 11:
			return 2;
		case 12:
			return 3;
		case 13:
			return 17;
		case 14:
			return 18;
		case 15:
			return 4;
		case 16:
			return 5;
		case 17:
			return 7;
		case 18:
			return 6;
		case 19:
			return 10;
		case 20:
			return 30;
		case 21:
			return 31;
		default:
			var id = rawID;
			if(id == this.leftStick.rawUp) {
				return 34;
			} else {
				var id = rawID;
				if(id == this.leftStick.rawDown) {
					return 36;
				} else {
					var id = rawID;
					if(id == this.leftStick.rawLeft) {
						return 37;
					} else {
						var id = rawID;
						if(id == this.leftStick.rawRight) {
							return 35;
						} else {
							var id = rawID;
							if(id == this.rightStick.rawUp) {
								return 38;
							} else {
								var id = rawID;
								if(id == this.rightStick.rawDown) {
									return 40;
								} else {
									var id = rawID;
									if(id == this.rightStick.rawLeft) {
										return 41;
									} else {
										var id = rawID;
										if(id == this.rightStick.rawRight) {
											return 39;
										} else {
											return -1;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	,getIDNunchuk: function(rawID) {
		switch(rawID) {
		case 5:
			return 11;
		case 6:
			return 12;
		case 7:
			return 13;
		case 8:
			return 14;
		case 9:
			return 0;
		case 10:
			return 1;
		case 11:
			return 4;
		case 12:
			return 17;
		case 13:
			return 2;
		case 14:
			return 3;
		case 15:
			return 7;
		case 16:
			return 6;
		case 17:
			return 10;
		default:
			var tmp = rawID == flixel_input_gamepad_id_WiiRemoteID.LEFT_ANALOG_STICK.rawUp;
			var tmp = rawID == flixel_input_gamepad_id_WiiRemoteID.LEFT_ANALOG_STICK.rawDown;
			var tmp = rawID == flixel_input_gamepad_id_WiiRemoteID.LEFT_ANALOG_STICK.rawLeft;
			var tmp = rawID == flixel_input_gamepad_id_WiiRemoteID.LEFT_ANALOG_STICK.rawRight;
			return -1;
		}
	}
	,getIDDefault: function(rawID) {
		switch(rawID) {
		case 9:
			return 2;
		case 10:
			return 3;
		case 11:
			return 0;
		case 12:
			return 1;
		case 13:
			return 7;
		case 14:
			return 6;
		case 15:
			return 10;
		case 22:
			return 11;
		case 23:
			return 12;
		case 24:
			return 13;
		case 25:
			return 14;
		default:
			return -1;
		}
	}
	,getRawID: function(ID) {
		switch(this.attachment._hx_index) {
		case 0:
			return this.getRawNunchuk(ID);
		case 1:
			return this.getRawClassicController(ID);
		case 2:
			return this.getRawDefault(ID);
		}
	}
	,getRawClassicController: function(ID) {
		switch(ID) {
		case 0:
			return 10;
		case 1:
			return 9;
		case 2:
			return 11;
		case 3:
			return 12;
		case 4:
			return 15;
		case 5:
			return 16;
		case 6:
			return 18;
		case 7:
			return 17;
		case 10:
			return 19;
		case 11:
			return 5;
		case 12:
			return 6;
		case 13:
			return 7;
		case 14:
			return 8;
		case 17:
			return 13;
		case 18:
			return 14;
		case 30:
			return 20;
		case 31:
			return 21;
		case 34:
			return flixel_input_gamepad_id_WiiRemoteID.LEFT_ANALOG_STICK.rawUp;
		case 35:
			return flixel_input_gamepad_id_WiiRemoteID.LEFT_ANALOG_STICK.rawRight;
		case 36:
			return flixel_input_gamepad_id_WiiRemoteID.LEFT_ANALOG_STICK.rawDown;
		case 37:
			return flixel_input_gamepad_id_WiiRemoteID.LEFT_ANALOG_STICK.rawLeft;
		case 38:
			return flixel_input_gamepad_id_WiiRemoteID.RIGHT_ANALOG_STICK.rawUp;
		case 39:
			return flixel_input_gamepad_id_WiiRemoteID.RIGHT_ANALOG_STICK.rawRight;
		case 40:
			return flixel_input_gamepad_id_WiiRemoteID.RIGHT_ANALOG_STICK.rawDown;
		case 41:
			return flixel_input_gamepad_id_WiiRemoteID.RIGHT_ANALOG_STICK.rawLeft;
		default:
			return -1;
		}
	}
	,getRawNunchuk: function(ID) {
		switch(ID) {
		case 0:
			return 9;
		case 1:
			return 10;
		case 2:
			return 13;
		case 3:
			return 14;
		case 4:
			return 11;
		case 6:
			return 16;
		case 7:
			return 15;
		case 10:
			return 17;
		case 11:
			return 5;
		case 12:
			return 6;
		case 13:
			return 7;
		case 14:
			return 8;
		case 17:
			return 12;
		case 26:
			return 3;
		case 27:
			return 2;
		case 34:
			return flixel_input_gamepad_id_WiiRemoteID.LEFT_ANALOG_STICK.rawUp;
		case 35:
			return flixel_input_gamepad_id_WiiRemoteID.LEFT_ANALOG_STICK.rawRight;
		case 36:
			return flixel_input_gamepad_id_WiiRemoteID.LEFT_ANALOG_STICK.rawDown;
		case 37:
			return flixel_input_gamepad_id_WiiRemoteID.LEFT_ANALOG_STICK.rawLeft;
		default:
			return -1;
		}
	}
	,getRawDefault: function(ID) {
		switch(ID) {
		case 0:
			return 11;
		case 1:
			return 12;
		case 2:
			return 9;
		case 3:
			return 10;
		case 6:
			return 14;
		case 7:
			return 13;
		case 10:
			return 15;
		case 11:
			return 22;
		case 12:
			return 23;
		case 13:
			return 24;
		case 14:
			return 25;
		case 26:
			return 2;
		case 27:
			return 3;
		default:
			return -1;
		}
	}
	,isAxisForMotion: function(ID) {
		if(this.attachment == flixel_input_gamepad_FlxGamepadAttachment.NONE) {
			if(ID == 2 || ID == 3) {
				return true;
			}
		} else if(this.attachment == flixel_input_gamepad_FlxGamepadAttachment.WII_NUNCHUCK) {
			if(ID == 3 || ID == 2) {
				return true;
			}
		}
		return false;
	}
	,isAxisFlipped: function(axisID) {
		return axisID == 4;
	}
	,set_attachment: function(attachment) {
		var tmp;
		switch(attachment._hx_index) {
		case 0:case 1:
			tmp = flixel_input_gamepad_id_WiiRemoteID.LEFT_ANALOG_STICK;
			break;
		case 2:
			tmp = flixel_input_gamepad_id_WiiRemoteID.REMOTE_DPAD;
			break;
		}
		this.leftStick = tmp;
		this.rightStick = attachment._hx_index == 1 ? flixel_input_gamepad_id_WiiRemoteID.RIGHT_ANALOG_STICK : null;
		return flixel_input_gamepad_mappings_FlxGamepadMapping.prototype.set_attachment.call(this,attachment);
	}
	,getInputLabel: function(id) {
		var label = flixel_input_gamepad_mappings_WiiRemoteMapping.getWiiInputLabel(id,this.attachment);
		if(label == null) {
			return flixel_input_gamepad_mappings_FlxGamepadMapping.prototype.getInputLabel.call(this,id);
		}
		return label;
	}
	,__class__: flixel_input_gamepad_mappings_WiiRemoteMapping
});
var flixel_input_gamepad_mappings_XInputMapping = function(attachment) {
	flixel_input_gamepad_mappings_FlxGamepadMapping.call(this,attachment);
};
$hxClasses["flixel.input.gamepad.mappings.XInputMapping"] = flixel_input_gamepad_mappings_XInputMapping;
flixel_input_gamepad_mappings_XInputMapping.__name__ = "flixel.input.gamepad.mappings.XInputMapping";
flixel_input_gamepad_mappings_XInputMapping.__super__ = flixel_input_gamepad_mappings_FlxGamepadMapping;
flixel_input_gamepad_mappings_XInputMapping.prototype = $extend(flixel_input_gamepad_mappings_FlxGamepadMapping.prototype,{
	initValues: function() {
		this.leftStick = flixel_input_gamepad_id_XInputID.LEFT_ANALOG_STICK;
		this.rightStick = flixel_input_gamepad_id_XInputID.RIGHT_ANALOG_STICK;
	}
	,getID: function(rawID) {
		switch(rawID) {
		case -1:
			return 10;
		case 4:
			return 17;
		case 5:
			return 18;
		case 6:
			return 0;
		case 7:
			return 1;
		case 8:
			return 2;
		case 9:
			return 3;
		case 10:
			return 6;
		case 12:
			return 7;
		case 13:
			return 8;
		case 14:
			return 9;
		case 15:
			return 4;
		case 16:
			return 5;
		case 17:
			return 11;
		case 18:
			return 12;
		case 19:
			return 13;
		case 20:
			return 14;
		default:
			var id = rawID;
			if(id == this.leftStick.rawUp) {
				return 34;
			} else {
				var id = rawID;
				if(id == this.leftStick.rawDown) {
					return 36;
				} else {
					var id = rawID;
					if(id == this.leftStick.rawLeft) {
						return 37;
					} else {
						var id = rawID;
						if(id == this.leftStick.rawRight) {
							return 35;
						} else {
							var id = rawID;
							if(id == this.rightStick.rawUp) {
								return 38;
							} else {
								var id = rawID;
								if(id == this.rightStick.rawDown) {
									return 40;
								} else {
									var id = rawID;
									if(id == this.rightStick.rawLeft) {
										return 41;
									} else {
										var id = rawID;
										if(id == this.rightStick.rawRight) {
											return 39;
										} else {
											return -1;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	,getRawID: function(ID) {
		switch(ID) {
		case 0:
			return 6;
		case 1:
			return 7;
		case 2:
			return 8;
		case 3:
			return 9;
		case 4:
			return 15;
		case 5:
			return 16;
		case 6:
			return 10;
		case 7:
			return 12;
		case 8:
			return 13;
		case 9:
			return 14;
		case 10:
			return -1;
		case 11:
			return 17;
		case 12:
			return 18;
		case 13:
			return 19;
		case 14:
			return 20;
		case 17:
			return 4;
		case 18:
			return 5;
		case 34:
			return flixel_input_gamepad_id_XInputID.LEFT_ANALOG_STICK.rawUp;
		case 35:
			return flixel_input_gamepad_id_XInputID.LEFT_ANALOG_STICK.rawRight;
		case 36:
			return flixel_input_gamepad_id_XInputID.LEFT_ANALOG_STICK.rawDown;
		case 37:
			return flixel_input_gamepad_id_XInputID.LEFT_ANALOG_STICK.rawLeft;
		case 38:
			return flixel_input_gamepad_id_XInputID.RIGHT_ANALOG_STICK.rawUp;
		case 39:
			return flixel_input_gamepad_id_XInputID.RIGHT_ANALOG_STICK.rawRight;
		case 40:
			return flixel_input_gamepad_id_XInputID.RIGHT_ANALOG_STICK.rawDown;
		case 41:
			return flixel_input_gamepad_id_XInputID.RIGHT_ANALOG_STICK.rawLeft;
		default:
			return -1;
		}
	}
	,__class__: flixel_input_gamepad_mappings_XInputMapping
});
var flixel_input_keyboard_FlxKey = {};
flixel_input_keyboard_FlxKey.fromString = function(s) {
	s = s.toUpperCase();
	if(Object.prototype.hasOwnProperty.call(flixel_input_keyboard_FlxKey.fromStringMap.h,s)) {
		return flixel_input_keyboard_FlxKey.fromStringMap.h[s];
	} else {
		return -1;
	}
};
flixel_input_keyboard_FlxKey.toString = function(this1) {
	return flixel_input_keyboard_FlxKey.toStringMap.h[this1];
};
var flixel_input_keyboard_FlxKeyList = function(status,keyManager) {
	flixel_input_FlxBaseKeyList.call(this,status,keyManager);
};
$hxClasses["flixel.input.keyboard.FlxKeyList"] = flixel_input_keyboard_FlxKeyList;
flixel_input_keyboard_FlxKeyList.__name__ = "flixel.input.keyboard.FlxKeyList";
flixel_input_keyboard_FlxKeyList.__super__ = flixel_input_FlxBaseKeyList;
flixel_input_keyboard_FlxKeyList.prototype = $extend(flixel_input_FlxBaseKeyList.prototype,{
	get_A: function() {
		return this.keyManager.checkStatus(65,this.status);
	}
	,get_B: function() {
		return this.keyManager.checkStatus(66,this.status);
	}
	,get_C: function() {
		return this.keyManager.checkStatus(67,this.status);
	}
	,get_D: function() {
		return this.keyManager.checkStatus(68,this.status);
	}
	,get_E: function() {
		return this.keyManager.checkStatus(69,this.status);
	}
	,get_F: function() {
		return this.keyManager.checkStatus(70,this.status);
	}
	,get_G: function() {
		return this.keyManager.checkStatus(71,this.status);
	}
	,get_H: function() {
		return this.keyManager.checkStatus(72,this.status);
	}
	,get_I: function() {
		return this.keyManager.checkStatus(73,this.status);
	}
	,get_J: function() {
		return this.keyManager.checkStatus(74,this.status);
	}
	,get_K: function() {
		return this.keyManager.checkStatus(75,this.status);
	}
	,get_L: function() {
		return this.keyManager.checkStatus(76,this.status);
	}
	,get_M: function() {
		return this.keyManager.checkStatus(77,this.status);
	}
	,get_N: function() {
		return this.keyManager.checkStatus(78,this.status);
	}
	,get_O: function() {
		return this.keyManager.checkStatus(79,this.status);
	}
	,get_P: function() {
		return this.keyManager.checkStatus(80,this.status);
	}
	,get_Q: function() {
		return this.keyManager.checkStatus(81,this.status);
	}
	,get_R: function() {
		return this.keyManager.checkStatus(82,this.status);
	}
	,get_S: function() {
		return this.keyManager.checkStatus(83,this.status);
	}
	,get_T: function() {
		return this.keyManager.checkStatus(84,this.status);
	}
	,get_U: function() {
		return this.keyManager.checkStatus(85,this.status);
	}
	,get_V: function() {
		return this.keyManager.checkStatus(86,this.status);
	}
	,get_W: function() {
		return this.keyManager.checkStatus(87,this.status);
	}
	,get_X: function() {
		return this.keyManager.checkStatus(88,this.status);
	}
	,get_Y: function() {
		return this.keyManager.checkStatus(89,this.status);
	}
	,get_Z: function() {
		return this.keyManager.checkStatus(90,this.status);
	}
	,get_ZERO: function() {
		return this.keyManager.checkStatus(48,this.status);
	}
	,get_ONE: function() {
		return this.keyManager.checkStatus(49,this.status);
	}
	,get_TWO: function() {
		return this.keyManager.checkStatus(50,this.status);
	}
	,get_THREE: function() {
		return this.keyManager.checkStatus(51,this.status);
	}
	,get_FOUR: function() {
		return this.keyManager.checkStatus(52,this.status);
	}
	,get_FIVE: function() {
		return this.keyManager.checkStatus(53,this.status);
	}
	,get_SIX: function() {
		return this.keyManager.checkStatus(54,this.status);
	}
	,get_SEVEN: function() {
		return this.keyManager.checkStatus(55,this.status);
	}
	,get_EIGHT: function() {
		return this.keyManager.checkStatus(56,this.status);
	}
	,get_NINE: function() {
		return this.keyManager.checkStatus(57,this.status);
	}
	,get_PAGEUP: function() {
		return this.keyManager.checkStatus(33,this.status);
	}
	,get_PAGEDOWN: function() {
		return this.keyManager.checkStatus(34,this.status);
	}
	,get_HOME: function() {
		return this.keyManager.checkStatus(36,this.status);
	}
	,get_END: function() {
		return this.keyManager.checkStatus(35,this.status);
	}
	,get_INSERT: function() {
		return this.keyManager.checkStatus(45,this.status);
	}
	,get_ESCAPE: function() {
		return this.keyManager.checkStatus(27,this.status);
	}
	,get_MINUS: function() {
		return this.keyManager.checkStatus(189,this.status);
	}
	,get_PLUS: function() {
		return this.keyManager.checkStatus(187,this.status);
	}
	,get_DELETE: function() {
		return this.keyManager.checkStatus(46,this.status);
	}
	,get_BACKSPACE: function() {
		return this.keyManager.checkStatus(8,this.status);
	}
	,get_LBRACKET: function() {
		return this.keyManager.checkStatus(219,this.status);
	}
	,get_RBRACKET: function() {
		return this.keyManager.checkStatus(221,this.status);
	}
	,get_BACKSLASH: function() {
		return this.keyManager.checkStatus(220,this.status);
	}
	,get_CAPSLOCK: function() {
		return this.keyManager.checkStatus(20,this.status);
	}
	,get_SEMICOLON: function() {
		return this.keyManager.checkStatus(186,this.status);
	}
	,get_QUOTE: function() {
		return this.keyManager.checkStatus(222,this.status);
	}
	,get_ENTER: function() {
		return this.keyManager.checkStatus(13,this.status);
	}
	,get_SHIFT: function() {
		return this.keyManager.checkStatus(16,this.status);
	}
	,get_COMMA: function() {
		return this.keyManager.checkStatus(188,this.status);
	}
	,get_PERIOD: function() {
		return this.keyManager.checkStatus(190,this.status);
	}
	,get_SLASH: function() {
		return this.keyManager.checkStatus(191,this.status);
	}
	,get_GRAVEACCENT: function() {
		return this.keyManager.checkStatus(192,this.status);
	}
	,get_CONTROL: function() {
		return this.keyManager.checkStatus(17,this.status);
	}
	,get_ALT: function() {
		return this.keyManager.checkStatus(18,this.status);
	}
	,get_SPACE: function() {
		return this.keyManager.checkStatus(32,this.status);
	}
	,get_UP: function() {
		return this.keyManager.checkStatus(38,this.status);
	}
	,get_DOWN: function() {
		return this.keyManager.checkStatus(40,this.status);
	}
	,get_LEFT: function() {
		return this.keyManager.checkStatus(37,this.status);
	}
	,get_RIGHT: function() {
		return this.keyManager.checkStatus(39,this.status);
	}
	,get_TAB: function() {
		return this.keyManager.checkStatus(9,this.status);
	}
	,get_PRINTSCREEN: function() {
		return this.keyManager.checkStatus(301,this.status);
	}
	,get_F1: function() {
		return this.keyManager.checkStatus(112,this.status);
	}
	,get_F2: function() {
		return this.keyManager.checkStatus(113,this.status);
	}
	,get_F3: function() {
		return this.keyManager.checkStatus(114,this.status);
	}
	,get_F4: function() {
		return this.keyManager.checkStatus(115,this.status);
	}
	,get_F5: function() {
		return this.keyManager.checkStatus(116,this.status);
	}
	,get_F6: function() {
		return this.keyManager.checkStatus(117,this.status);
	}
	,get_F7: function() {
		return this.keyManager.checkStatus(118,this.status);
	}
	,get_F8: function() {
		return this.keyManager.checkStatus(119,this.status);
	}
	,get_F9: function() {
		return this.keyManager.checkStatus(120,this.status);
	}
	,get_F10: function() {
		return this.keyManager.checkStatus(121,this.status);
	}
	,get_F11: function() {
		return this.keyManager.checkStatus(122,this.status);
	}
	,get_F12: function() {
		return this.keyManager.checkStatus(123,this.status);
	}
	,get_NUMPADONE: function() {
		return this.keyManager.checkStatus(97,this.status);
	}
	,get_NUMPADTWO: function() {
		return this.keyManager.checkStatus(98,this.status);
	}
	,get_NUMPADTHREE: function() {
		return this.keyManager.checkStatus(99,this.status);
	}
	,get_NUMPADFOUR: function() {
		return this.keyManager.checkStatus(100,this.status);
	}
	,get_NUMPADFIVE: function() {
		return this.keyManager.checkStatus(101,this.status);
	}
	,get_NUMPADSIX: function() {
		return this.keyManager.checkStatus(102,this.status);
	}
	,get_NUMPADSEVEN: function() {
		return this.keyManager.checkStatus(103,this.status);
	}
	,get_NUMPADEIGHT: function() {
		return this.keyManager.checkStatus(104,this.status);
	}
	,get_NUMPADNINE: function() {
		return this.keyManager.checkStatus(105,this.status);
	}
	,get_NUMPADZERO: function() {
		return this.keyManager.checkStatus(96,this.status);
	}
	,get_NUMPADMINUS: function() {
		return this.keyManager.checkStatus(109,this.status);
	}
	,get_NUMPADPLUS: function() {
		return this.keyManager.checkStatus(107,this.status);
	}
	,get_NUMPADPERIOD: function() {
		return this.keyManager.checkStatus(110,this.status);
	}
	,get_NUMPADMULTIPLY: function() {
		return this.keyManager.checkStatus(106,this.status);
	}
	,__class__: flixel_input_keyboard_FlxKeyList
	,__properties__: $extend(flixel_input_FlxBaseKeyList.prototype.__properties__,{get_NUMPADMULTIPLY:"get_NUMPADMULTIPLY",get_NUMPADPERIOD:"get_NUMPADPERIOD",get_NUMPADPLUS:"get_NUMPADPLUS",get_NUMPADMINUS:"get_NUMPADMINUS",get_NUMPADZERO:"get_NUMPADZERO",get_NUMPADNINE:"get_NUMPADNINE",get_NUMPADEIGHT:"get_NUMPADEIGHT",get_NUMPADSEVEN:"get_NUMPADSEVEN",get_NUMPADSIX:"get_NUMPADSIX",get_NUMPADFIVE:"get_NUMPADFIVE",get_NUMPADFOUR:"get_NUMPADFOUR",get_NUMPADTHREE:"get_NUMPADTHREE",get_NUMPADTWO:"get_NUMPADTWO",get_NUMPADONE:"get_NUMPADONE",get_F12:"get_F12",get_F11:"get_F11",get_F10:"get_F10",get_F9:"get_F9",get_F8:"get_F8",get_F7:"get_F7",get_F6:"get_F6",get_F5:"get_F5",get_F4:"get_F4",get_F3:"get_F3",get_F2:"get_F2",get_F1:"get_F1",get_PRINTSCREEN:"get_PRINTSCREEN",get_TAB:"get_TAB",get_RIGHT:"get_RIGHT",get_LEFT:"get_LEFT",get_DOWN:"get_DOWN",get_UP:"get_UP",get_SPACE:"get_SPACE",get_ALT:"get_ALT",get_CONTROL:"get_CONTROL",get_GRAVEACCENT:"get_GRAVEACCENT",get_SLASH:"get_SLASH",get_PERIOD:"get_PERIOD",get_COMMA:"get_COMMA",get_SHIFT:"get_SHIFT",get_ENTER:"get_ENTER",get_QUOTE:"get_QUOTE",get_SEMICOLON:"get_SEMICOLON",get_CAPSLOCK:"get_CAPSLOCK",get_BACKSLASH:"get_BACKSLASH",get_RBRACKET:"get_RBRACKET",get_LBRACKET:"get_LBRACKET",get_BACKSPACE:"get_BACKSPACE",get_DELETE:"get_DELETE",get_PLUS:"get_PLUS",get_MINUS:"get_MINUS",get_ESCAPE:"get_ESCAPE",get_INSERT:"get_INSERT",get_END:"get_END",get_HOME:"get_HOME",get_PAGEDOWN:"get_PAGEDOWN",get_PAGEUP:"get_PAGEUP",get_NINE:"get_NINE",get_EIGHT:"get_EIGHT",get_SEVEN:"get_SEVEN",get_SIX:"get_SIX",get_FIVE:"get_FIVE",get_FOUR:"get_FOUR",get_THREE:"get_THREE",get_TWO:"get_TWO",get_ONE:"get_ONE",get_ZERO:"get_ZERO",get_Z:"get_Z",get_Y:"get_Y",get_X:"get_X",get_W:"get_W",get_V:"get_V",get_U:"get_U",get_T:"get_T",get_S:"get_S",get_R:"get_R",get_Q:"get_Q",get_P:"get_P",get_O:"get_O",get_N:"get_N",get_M:"get_M",get_L:"get_L",get_K:"get_K",get_J:"get_J",get_I:"get_I",get_H:"get_H",get_G:"get_G",get_F:"get_F",get_E:"get_E",get_D:"get_D",get_C:"get_C",get_B:"get_B",get_A:"get_A"})
});
var flixel_input_keyboard_FlxKeyboard = function() {
	flixel_input_FlxKeyManager.call(this,function(status,keyManager) {
		return new flixel_input_keyboard_FlxKeyList(status,keyManager);
	});
	this.preventDefaultKeys = [38,40,37,39,32,9];
	var code = haxe_ds_StringMap.valueIterator(flixel_input_keyboard_FlxKey.fromStringMap.h);
	while(code.hasNext()) {
		var code1 = code.next();
		if(code1 != -2 && code1 != -1) {
			var input = new flixel_input_FlxInput(code1);
			this._keyListArray.push(input);
			this._keyListMap.h[code1] = input;
		}
	}
};
$hxClasses["flixel.input.keyboard.FlxKeyboard"] = flixel_input_keyboard_FlxKeyboard;
flixel_input_keyboard_FlxKeyboard.__name__ = "flixel.input.keyboard.FlxKeyboard";
flixel_input_keyboard_FlxKeyboard.__super__ = flixel_input_FlxKeyManager;
flixel_input_keyboard_FlxKeyboard.prototype = $extend(flixel_input_FlxKeyManager.prototype,{
	onKeyUp: function(event) {
		flixel_input_FlxKeyManager.prototype.onKeyUp.call(this,event);
	}
	,onKeyDown: function(event) {
		flixel_input_FlxKeyManager.prototype.onKeyDown.call(this,event);
	}
	,resolveKeyCode: function(e) {
		return e.keyCode;
	}
	,record: function() {
		var data = null;
		var _g = 0;
		var _g1 = this._keyListArray;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key == null || (key.current == 0 || key.current == -1)) {
				continue;
			}
			if(data == null) {
				data = [];
			}
			data.push(new flixel_system_replay_CodeValuePair(key.ID,key.current));
		}
		return data;
	}
	,playback: function(Record) {
		var i = 0;
		var l = Record.length;
		while(i < l) {
			var o = Record[i++];
			var o2 = this._keyListMap.h[o.code];
			o2.current = o.value;
		}
	}
	,__class__: flixel_input_keyboard_FlxKeyboard
});
var flixel_input_mouse__$FlxMouse_GraphicCursor = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_input_mouse__$FlxMouse_GraphicCursor.preload != null) {
		this.__fromImage(flixel_input_mouse__$FlxMouse_GraphicCursor.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_input_mouse__$FlxMouse_GraphicCursor.resourceName),flixel_input_mouse__$FlxMouse_GraphicCursor.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_input_mouse__$FlxMouse_GraphicCursor.preload == null) {
				flixel_input_mouse__$FlxMouse_GraphicCursor.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.input.mouse._FlxMouse.GraphicCursor"] = flixel_input_mouse__$FlxMouse_GraphicCursor;
flixel_input_mouse__$FlxMouse_GraphicCursor.__name__ = "flixel.input.mouse._FlxMouse.GraphicCursor";
flixel_input_mouse__$FlxMouse_GraphicCursor.preload = null;
flixel_input_mouse__$FlxMouse_GraphicCursor.__super__ = openfl_display_BitmapData;
flixel_input_mouse__$FlxMouse_GraphicCursor.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_input_mouse__$FlxMouse_GraphicCursor
});
var flixel_input_mouse_FlxMouseButton = function(ID) {
	this.justPressedTimeInTicks = -1;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.justPressedPosition = point;
	flixel_input_FlxInput.call(this,ID);
};
$hxClasses["flixel.input.mouse.FlxMouseButton"] = flixel_input_mouse_FlxMouseButton;
flixel_input_mouse_FlxMouseButton.__name__ = "flixel.input.mouse.FlxMouseButton";
flixel_input_mouse_FlxMouseButton.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_input_mouse_FlxMouseButton.getByID = function(id) {
	switch(id) {
	case -3:
		return flixel_FlxG.mouse._rightButton;
	case -2:
		return flixel_FlxG.mouse._middleButton;
	case -1:
		return flixel_FlxG.mouse._leftButton;
	}
};
flixel_input_mouse_FlxMouseButton.__super__ = flixel_input_FlxInput;
flixel_input_mouse_FlxMouseButton.prototype = $extend(flixel_input_FlxInput.prototype,{
	justPressedPosition: null
	,justPressedTimeInTicks: null
	,update: function() {
		flixel_input_FlxInput.prototype.update.call(this);
		if(this.current == 2) {
			this.justPressedPosition.set(flixel_FlxG.mouse.screenX,flixel_FlxG.mouse.screenY);
			this.justPressedTimeInTicks = flixel_FlxG.game.ticks;
		} else if(this.current == -1) {
			flixel_FlxG.swipes.push(new flixel_input_FlxSwipe(this.ID,this.justPressedPosition,flixel_FlxG.mouse.getScreenPosition(),this.justPressedTimeInTicks));
		}
	}
	,destroy: function() {
		this.justPressedPosition = flixel_util_FlxDestroyUtil.put(this.justPressedPosition);
	}
	,onDown: function(_) {
		if(flixel_FlxG.mouse.enabled) {
			this.press();
		}
	}
	,onUp: function(_) {
		if(flixel_FlxG.mouse.enabled) {
			this.release();
		}
	}
	,__class__: flixel_input_mouse_FlxMouseButton
});
var flixel_input_touch_FlxTouch = function(x,y,pointID) {
	if(pointID == null) {
		pointID = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.justPressedTimeInTicks = -1;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.justPressedPosition = point;
	this.flashPoint = new openfl_geom_Point();
	flixel_input_FlxPointer.call(this);
	this.input = new flixel_input_FlxInput(pointID);
	this.setXY(x,y);
};
$hxClasses["flixel.input.touch.FlxTouch"] = flixel_input_touch_FlxTouch;
flixel_input_touch_FlxTouch.__name__ = "flixel.input.touch.FlxTouch";
flixel_input_touch_FlxTouch.__interfaces__ = [flixel_input_IFlxInput,flixel_util_IFlxDestroyable];
flixel_input_touch_FlxTouch.__super__ = flixel_input_FlxPointer;
flixel_input_touch_FlxTouch.prototype = $extend(flixel_input_FlxPointer.prototype,{
	input: null
	,flashPoint: null
	,justPressedPosition: null
	,justPressedTimeInTicks: null
	,destroy: function() {
		this.input = null;
		this.justPressedPosition = flixel_util_FlxDestroyUtil.put(this.justPressedPosition);
		this.flashPoint = null;
	}
	,recycle: function(x,y,pointID) {
		this.setXY(x,y);
		this.input.ID = pointID;
		this.input.reset();
	}
	,update: function() {
		this.input.update();
		if(this.input.current == 2) {
			this.justPressedPosition.set(this.screenX,this.screenY);
			this.justPressedTimeInTicks = flixel_FlxG.game.ticks;
		} else if(this.input.current == -1) {
			flixel_FlxG.swipes.push(new flixel_input_FlxSwipe(this.input.ID,this.justPressedPosition,this.getScreenPosition(),this.justPressedTimeInTicks));
		}
	}
	,setXY: function(X,Y) {
		this.flashPoint.setTo(X,Y);
		this.flashPoint = flixel_FlxG.game.globalToLocal(this.flashPoint);
		this._globalScreenX = this.flashPoint.x / flixel_FlxG.scaleMode.scale.x | 0;
		this._globalScreenY = this.flashPoint.y / flixel_FlxG.scaleMode.scale.y | 0;
		this.updatePositions();
	}
	,get_touchPointID: function() {
		return this.input.ID;
	}
	,get_justReleased: function() {
		return this.input.current == -1;
	}
	,get_released: function() {
		var _this = this.input;
		if(_this.current != 0) {
			return _this.current == -1;
		} else {
			return true;
		}
	}
	,get_pressed: function() {
		var _this = this.input;
		if(_this.current != 1) {
			return _this.current == 2;
		} else {
			return true;
		}
	}
	,get_justPressed: function() {
		return this.input.current == 2;
	}
	,__class__: flixel_input_touch_FlxTouch
	,__properties__: {get_justPressed:"get_justPressed",get_pressed:"get_pressed",get_released:"get_released",get_justReleased:"get_justReleased",get_touchPointID:"get_touchPointID"}
});
var flixel_input_touch_FlxTouchManager = function() {
	this.list = [];
	this._inactiveTouches = [];
	this._touchesCache = new haxe_ds_IntMap();
	flixel_input_touch_FlxTouchManager.maxTouchPoints = openfl_ui_Multitouch.maxTouchPoints;
	openfl_ui_Multitouch.inputMode = 2;
	openfl_Lib.get_current().stage.addEventListener("touchBegin",$bind(this,this.handleTouchBegin));
	openfl_Lib.get_current().stage.addEventListener("touchEnd",$bind(this,this.handleTouchEnd));
	openfl_Lib.get_current().stage.addEventListener("touchMove",$bind(this,this.handleTouchMove));
};
$hxClasses["flixel.input.touch.FlxTouchManager"] = flixel_input_touch_FlxTouchManager;
flixel_input_touch_FlxTouchManager.__name__ = "flixel.input.touch.FlxTouchManager";
flixel_input_touch_FlxTouchManager.__interfaces__ = [flixel_input_IFlxInputManager];
flixel_input_touch_FlxTouchManager.prototype = {
	list: null
	,_inactiveTouches: null
	,_touchesCache: null
	,getByID: function(TouchPointID) {
		return this._touchesCache.h[TouchPointID];
	}
	,getFirst: function() {
		if(this.list[0] != null) {
			return this.list[0];
		} else {
			return null;
		}
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			touch.destroy();
		}
		this.list = null;
		var _g = 0;
		var _g1 = this._inactiveTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			touch.destroy();
		}
		this._inactiveTouches = null;
		this._touchesCache = null;
	}
	,justStarted: function(TouchArray) {
		if(TouchArray == null) {
			TouchArray = [];
		}
		var touchLen = TouchArray.length;
		if(touchLen > 0) {
			TouchArray.splice(0,touchLen);
		}
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			if(touch.input.current == 2) {
				TouchArray.push(touch);
			}
		}
		return TouchArray;
	}
	,justReleased: function(TouchArray) {
		if(TouchArray == null) {
			TouchArray = [];
		}
		var touchLen = TouchArray.length;
		if(touchLen > 0) {
			TouchArray.splice(0,touchLen);
		}
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			if(touch.input.current == -1) {
				TouchArray.push(touch);
			}
		}
		return TouchArray;
	}
	,reset: function() {
		var key = this._touchesCache.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			this._touchesCache.remove(key1);
		}
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			touch.input.reset();
			this._inactiveTouches.push(touch);
		}
		this.list.splice(0,this.list.length);
	}
	,handleTouchBegin: function(FlashEvent) {
		var touch = this._touchesCache.h[FlashEvent.touchPointID];
		if(touch != null) {
			touch.setXY(FlashEvent.stageX | 0,FlashEvent.stageY | 0);
		} else {
			touch = this.recycle(FlashEvent.stageX | 0,FlashEvent.stageY | 0,FlashEvent.touchPointID);
		}
		touch.input.press();
	}
	,handleTouchEnd: function(FlashEvent) {
		var touch = this._touchesCache.h[FlashEvent.touchPointID];
		if(touch != null) {
			touch.input.release();
		}
	}
	,handleTouchMove: function(FlashEvent) {
		var touch = this._touchesCache.h[FlashEvent.touchPointID];
		if(touch != null) {
			touch.setXY(FlashEvent.stageX | 0,FlashEvent.stageY | 0);
		}
	}
	,add: function(Touch1) {
		this.list.push(Touch1);
		this._touchesCache.h[Touch1.input.ID] = Touch1;
		return Touch1;
	}
	,recycle: function(X,Y,PointID) {
		if(this._inactiveTouches.length > 0) {
			var touch = this._inactiveTouches.pop();
			touch.recycle(X,Y,PointID);
			return this.add(touch);
		}
		return this.add(new flixel_input_touch_FlxTouch(X,Y,PointID));
	}
	,update: function() {
		var i = this.list.length - 1;
		var touch;
		while(i >= 0) {
			touch = this.list[i];
			var _this = touch.input;
			if((_this.current == 0 || _this.current == -1) && touch.input.current != -1) {
				touch.input.reset();
				this._touchesCache.remove(touch.input.ID);
				this.list.splice(i,1);
				this._inactiveTouches.push(touch);
			} else {
				touch.update();
			}
			--i;
		}
	}
	,onFocus: function() {
	}
	,onFocusLost: function() {
		this.reset();
	}
	,__class__: flixel_input_touch_FlxTouchManager
};
var flixel_math_FlxAngle = function() { };
$hxClasses["flixel.math.FlxAngle"] = flixel_math_FlxAngle;
flixel_math_FlxAngle.__name__ = "flixel.math.FlxAngle";
flixel_math_FlxAngle.__properties__ = {get_TO_RAD:"get_TO_RAD",get_TO_DEG:"get_TO_DEG"};
flixel_math_FlxAngle.wrapAngle = function(angle) {
	if(angle > 180) {
		angle = flixel_math_FlxAngle.wrapAngle(angle - 360);
	} else if(angle < -180) {
		angle = flixel_math_FlxAngle.wrapAngle(angle + 360);
	}
	return angle;
};
flixel_math_FlxAngle.asDegrees = function(radians) {
	return radians * (180 / Math.PI);
};
flixel_math_FlxAngle.asRadians = function(degrees) {
	return degrees * (Math.PI / 180);
};
flixel_math_FlxAngle.angleBetween = function(SpriteA,SpriteB,AsDegrees) {
	if(AsDegrees == null) {
		AsDegrees = false;
	}
	var dx = SpriteB.x + SpriteB.origin.x - (SpriteA.x + SpriteA.origin.x);
	var dy = SpriteB.y + SpriteB.origin.y - (SpriteA.y + SpriteA.origin.y);
	if(AsDegrees) {
		return Math.atan2(dy,dx) * (180 / Math.PI);
	} else {
		return Math.atan2(dy,dx);
	}
};
flixel_math_FlxAngle.angleBetweenPoint = function(Sprite,Target,AsDegrees) {
	if(AsDegrees == null) {
		AsDegrees = false;
	}
	var dx = Target.x - (Sprite.x + Sprite.origin.x);
	var dy = Target.y - (Sprite.y + Sprite.origin.y);
	if(Target._weak) {
		Target.put();
	}
	if(AsDegrees) {
		return Math.atan2(dy,dx) * (180 / Math.PI);
	} else {
		return Math.atan2(dy,dx);
	}
};
flixel_math_FlxAngle.angleBetweenMouse = function(Object1,AsDegrees) {
	if(AsDegrees == null) {
		AsDegrees = false;
	}
	if(Object1 == null) {
		return 0;
	}
	var p = Object1.getScreenPosition();
	var dx = flixel_FlxG.mouse.screenX - p.x;
	var dy = flixel_FlxG.mouse.screenY - p.y;
	p.put();
	if(AsDegrees) {
		return Math.atan2(dy,dx) * (180 / Math.PI);
	} else {
		return Math.atan2(dy,dx);
	}
};
flixel_math_FlxAngle.angleBetweenTouch = function(Object1,Touch1,AsDegrees) {
	if(AsDegrees == null) {
		AsDegrees = false;
	}
	var p = Object1.getScreenPosition();
	var dx = Touch1.screenX - p.x;
	var dy = Touch1.screenY - p.y;
	p.put();
	if(AsDegrees) {
		return Math.atan2(dy,dx) * (180 / Math.PI);
	} else {
		return Math.atan2(dy,dx);
	}
};
flixel_math_FlxAngle.angleFromFacing = function(FacingBitmask,AsDegrees) {
	if(AsDegrees == null) {
		AsDegrees = false;
	}
	var degrees;
	switch(FacingBitmask) {
	case 1:
		degrees = 180;
		break;
	case 16:
		degrees = 0;
		break;
	case 256:
		degrees = -90;
		break;
	case 4096:
		degrees = 90;
		break;
	default:
		var f = FacingBitmask;
		if(f == (256 | 1)) {
			degrees = -135;
		} else {
			var f = FacingBitmask;
			if(f == (256 | 16)) {
				degrees = -45;
			} else {
				var f = FacingBitmask;
				if(f == (4096 | 1)) {
					degrees = 135;
				} else {
					var f = FacingBitmask;
					degrees = f == (4096 | 16) ? 45 : 0;
				}
			}
		}
	}
	if(AsDegrees) {
		return degrees;
	} else {
		return degrees * (Math.PI / 180);
	}
};
flixel_math_FlxAngle.getCartesianCoords = function(Radius,Angle,point) {
	var p = point;
	if(p == null) {
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		p = point;
	}
	p.set_x(Radius * Math.cos(Angle * (Math.PI / 180)));
	p.set_y(Radius * Math.sin(Angle * (Math.PI / 180)));
	return p;
};
flixel_math_FlxAngle.getPolarCoords = function(X,Y,point) {
	var p = point;
	if(p == null) {
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		p = point;
	}
	p.set_x(Math.sqrt(X * X + Y * Y));
	p.set_y(Math.atan2(Y,X) * (180 / Math.PI));
	return p;
};
flixel_math_FlxAngle.get_TO_DEG = function() {
	return 180 / Math.PI;
};
flixel_math_FlxAngle.get_TO_RAD = function() {
	return Math.PI / 180;
};
var flixel_math_FlxMath = function() { };
$hxClasses["flixel.math.FlxMath"] = flixel_math_FlxMath;
flixel_math_FlxMath.__name__ = "flixel.math.FlxMath";
flixel_math_FlxMath.roundDecimal = function(Value,Precision) {
	var mult = 1;
	var _g = 0;
	var _g1 = Precision;
	while(_g < _g1) {
		var i = _g++;
		mult *= 10;
	}
	return Math.round(Value * mult) / mult;
};
flixel_math_FlxMath.bound = function(Value,Min,Max) {
	var lowerBound = Min != null && Value < Min ? Min : Value;
	if(Max != null && lowerBound > Max) {
		return Max;
	} else {
		return lowerBound;
	}
};
flixel_math_FlxMath.lerp = function(a,b,ratio) {
	return a + ratio * (b - a);
};
flixel_math_FlxMath.inBounds = function(Value,Min,Max) {
	if(Min == null || Value >= Min) {
		if(Max != null) {
			return Value <= Max;
		} else {
			return true;
		}
	} else {
		return false;
	}
};
flixel_math_FlxMath.isOdd = function(n) {
	return ((n | 0) & 1) != 0;
};
flixel_math_FlxMath.isEven = function(n) {
	return ((n | 0) & 1) == 0;
};
flixel_math_FlxMath.numericComparison = function(a,b) {
	if(b > a) {
		return -1;
	} else if(a > b) {
		return 1;
	}
	return 0;
};
flixel_math_FlxMath.pointInCoordinates = function(pointX,pointY,rectX,rectY,rectWidth,rectHeight) {
	if(pointX >= rectX && pointX <= rectX + rectWidth) {
		if(pointY >= rectY && pointY <= rectY + rectHeight) {
			return true;
		}
	}
	return false;
};
flixel_math_FlxMath.pointInFlxRect = function(pointX,pointY,rect) {
	if(pointX >= rect.x && pointX <= rect.x + rect.width && pointY >= rect.y) {
		return pointY <= rect.y + rect.height;
	} else {
		return false;
	}
};
flixel_math_FlxMath.mouseInFlxRect = function(useWorldCoords,rect) {
	if(rect == null) {
		return true;
	}
	if(useWorldCoords) {
		return flixel_math_FlxMath.pointInFlxRect(Math.floor(flixel_FlxG.mouse.x),Math.floor(flixel_FlxG.mouse.y),rect);
	} else {
		return flixel_math_FlxMath.pointInFlxRect(flixel_FlxG.mouse.screenX,flixel_FlxG.mouse.screenY,rect);
	}
};
flixel_math_FlxMath.pointInRectangle = function(pointX,pointY,rect) {
	if(pointX >= rect.x && pointX <= rect.get_right() && pointY >= rect.y) {
		return pointY <= rect.get_bottom();
	} else {
		return false;
	}
};
flixel_math_FlxMath.maxAdd = function(value,amount,max,min) {
	if(min == null) {
		min = 0;
	}
	value += amount;
	if(value > max) {
		value = max;
	} else if(value <= min) {
		value = min;
	}
	return value;
};
flixel_math_FlxMath.wrap = function(value,min,max) {
	var range = max - min + 1;
	if(value < min) {
		value += range * ((min - value) / range + 1 | 0);
	}
	return min + (value - min) % range;
};
flixel_math_FlxMath.remapToRange = function(value,start1,stop1,start2,stop2) {
	return start2 + (value - start1) * ((stop2 - start2) / (stop1 - start1));
};
flixel_math_FlxMath.dotProduct = function(ax,ay,bx,by) {
	return ax * bx + ay * by;
};
flixel_math_FlxMath.vectorLength = function(dx,dy) {
	return Math.sqrt(dx * dx + dy * dy);
};
flixel_math_FlxMath.distanceBetween = function(SpriteA,SpriteB) {
	var dx = SpriteA.x + SpriteA.origin.x - (SpriteB.x + SpriteB.origin.x);
	var dy = SpriteA.y + SpriteA.origin.y - (SpriteB.y + SpriteB.origin.y);
	return Math.sqrt(dx * dx + dy * dy) | 0;
};
flixel_math_FlxMath.isDistanceWithin = function(SpriteA,SpriteB,Distance,IncludeEqual) {
	if(IncludeEqual == null) {
		IncludeEqual = false;
	}
	var dx = SpriteA.x + SpriteA.origin.x - (SpriteB.x + SpriteB.origin.x);
	var dy = SpriteA.y + SpriteA.origin.y - (SpriteB.y + SpriteB.origin.y);
	if(IncludeEqual) {
		return dx * dx + dy * dy <= Distance * Distance;
	} else {
		return dx * dx + dy * dy < Distance * Distance;
	}
};
flixel_math_FlxMath.distanceToPoint = function(Sprite,Target) {
	var dx = Sprite.x + Sprite.origin.x - Target.x;
	var dy = Sprite.y + Sprite.origin.y - Target.y;
	if(Target._weak) {
		Target.put();
	}
	return Math.sqrt(dx * dx + dy * dy) | 0;
};
flixel_math_FlxMath.isDistanceToPointWithin = function(Sprite,Target,Distance,IncludeEqual) {
	if(IncludeEqual == null) {
		IncludeEqual = false;
	}
	var dx = Sprite.x + Sprite.origin.x - Target.x;
	var dy = Sprite.y + Sprite.origin.y - Target.y;
	if(Target._weak) {
		Target.put();
	}
	if(IncludeEqual) {
		return dx * dx + dy * dy <= Distance * Distance;
	} else {
		return dx * dx + dy * dy < Distance * Distance;
	}
};
flixel_math_FlxMath.distanceToMouse = function(Sprite) {
	var dx = Sprite.x + Sprite.origin.x - flixel_FlxG.mouse.screenX;
	var dy = Sprite.y + Sprite.origin.y - flixel_FlxG.mouse.screenY;
	return Math.sqrt(dx * dx + dy * dy) | 0;
};
flixel_math_FlxMath.isDistanceToMouseWithin = function(Sprite,Distance,IncludeEqual) {
	if(IncludeEqual == null) {
		IncludeEqual = false;
	}
	var dx = Sprite.x + Sprite.origin.x - flixel_FlxG.mouse.screenX;
	var dy = Sprite.y + Sprite.origin.y - flixel_FlxG.mouse.screenY;
	if(IncludeEqual) {
		return dx * dx + dy * dy <= Distance * Distance;
	} else {
		return dx * dx + dy * dy < Distance * Distance;
	}
};
flixel_math_FlxMath.distanceToTouch = function(Sprite,Touch1) {
	var dx = Sprite.x + Sprite.origin.x - Touch1.screenX;
	var dy = Sprite.y + Sprite.origin.y - Touch1.screenY;
	return Math.sqrt(dx * dx + dy * dy) | 0;
};
flixel_math_FlxMath.isDistanceToTouchWithin = function(Sprite,Touch1,Distance,IncludeEqual) {
	if(IncludeEqual == null) {
		IncludeEqual = false;
	}
	var dx = Sprite.x + Sprite.origin.x - Touch1.screenX;
	var dy = Sprite.y + Sprite.origin.y - Touch1.screenY;
	if(IncludeEqual) {
		return dx * dx + dy * dy <= Distance * Distance;
	} else {
		return dx * dx + dy * dy < Distance * Distance;
	}
};
flixel_math_FlxMath.getDecimals = function(n) {
	var helperArray = (n == null ? "null" : "" + n).split(".");
	var decimals = 0;
	if(helperArray.length > 1) {
		decimals = helperArray[1].length;
	}
	return decimals;
};
flixel_math_FlxMath.equal = function(aValueA,aValueB,aDiff) {
	if(aDiff == null) {
		aDiff = 0.0000001;
	}
	return Math.abs(aValueA - aValueB) <= aDiff;
};
flixel_math_FlxMath.signOf = function(n) {
	if(n < 0) {
		return -1;
	} else {
		return 1;
	}
};
flixel_math_FlxMath.sameSign = function(a,b) {
	return (a < 0 ? -1 : 1) == (b < 0 ? -1 : 1);
};
flixel_math_FlxMath.fastSin = function(n) {
	n *= 0.3183098862;
	if(n > 1) {
		n -= Math.ceil(n) >> 1 << 1;
	} else if(n < -1) {
		n += Math.ceil(-n) >> 1 << 1;
	}
	if(n > 0) {
		return n * (3.1 + n * (0.5 + n * (-7.2 + n * 3.6)));
	} else {
		return n * (3.1 - n * (0.5 + n * (7.2 + n * 3.6)));
	}
};
flixel_math_FlxMath.fastCos = function(n) {
	var n1 = n + 1.570796327;
	n1 *= 0.3183098862;
	if(n1 > 1) {
		n1 -= Math.ceil(n1) >> 1 << 1;
	} else if(n1 < -1) {
		n1 += Math.ceil(-n1) >> 1 << 1;
	}
	if(n1 > 0) {
		return n1 * (3.1 + n1 * (0.5 + n1 * (-7.2 + n1 * 3.6)));
	} else {
		return n1 * (3.1 - n1 * (0.5 + n1 * (7.2 + n1 * 3.6)));
	}
};
flixel_math_FlxMath.sinh = function(n) {
	return (Math.exp(n) - Math.exp(-n)) / 2;
};
flixel_math_FlxMath.maxInt = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
flixel_math_FlxMath.minInt = function(a,b) {
	if(a > b) {
		return b;
	} else {
		return a;
	}
};
flixel_math_FlxMath.absInt = function(n) {
	if(n > 0) {
		return n;
	} else {
		return -n;
	}
};
var flixel_math_FlxMatrix = function(a,b,c,d,tx,ty) {
	openfl_geom_Matrix.call(this,a,b,c,d,tx,ty);
};
$hxClasses["flixel.math.FlxMatrix"] = flixel_math_FlxMatrix;
flixel_math_FlxMatrix.__name__ = "flixel.math.FlxMatrix";
flixel_math_FlxMatrix.__super__ = openfl_geom_Matrix;
flixel_math_FlxMatrix.prototype = $extend(openfl_geom_Matrix.prototype,{
	rotateWithTrig: function(cos,sin) {
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
		return this;
	}
	,rotateBy180: function() {
		this.setTo(-this.a,-this.b,-this.c,-this.d,-this.tx,-this.ty);
		return this;
	}
	,rotateByPositive90: function() {
		this.setTo(-this.b,this.a,-this.d,this.c,-this.ty,this.tx);
		return this;
	}
	,rotateByNegative90: function() {
		this.setTo(this.b,-this.a,this.d,-this.c,this.ty,-this.tx);
		return this;
	}
	,transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__class__: flixel_math_FlxMatrix
});
var flixel_math_FlxCallbackPoint = function(setXCallback,setYCallback,setXYCallback) {
	flixel_math_FlxPoint.call(this);
	this._setXCallback = setXCallback;
	this._setYCallback = setXYCallback;
	this._setXYCallback = setXYCallback;
	if(this._setXCallback != null) {
		if(this._setYCallback == null) {
			this._setYCallback = setXCallback;
		}
		if(this._setXYCallback == null) {
			this._setXYCallback = setXCallback;
		}
	}
};
$hxClasses["flixel.math.FlxCallbackPoint"] = flixel_math_FlxCallbackPoint;
flixel_math_FlxCallbackPoint.__name__ = "flixel.math.FlxCallbackPoint";
flixel_math_FlxCallbackPoint.__super__ = flixel_math_FlxPoint;
flixel_math_FlxCallbackPoint.prototype = $extend(flixel_math_FlxPoint.prototype,{
	_setXCallback: null
	,_setYCallback: null
	,_setXYCallback: null
	,set: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		flixel_math_FlxPoint.prototype.set.call(this,X,Y);
		if(this._setXYCallback != null) {
			this._setXYCallback(this);
		}
		return this;
	}
	,set_x: function(Value) {
		flixel_math_FlxPoint.prototype.set_x.call(this,Value);
		if(this._setXCallback != null) {
			this._setXCallback(this);
		}
		return Value;
	}
	,set_y: function(Value) {
		flixel_math_FlxPoint.prototype.set_y.call(this,Value);
		if(this._setYCallback != null) {
			this._setYCallback(this);
		}
		return Value;
	}
	,destroy: function() {
		flixel_math_FlxPoint.prototype.destroy.call(this);
		this._setXCallback = null;
		this._setYCallback = null;
		this._setXYCallback = null;
	}
	,put: function() {
	}
	,__class__: flixel_math_FlxCallbackPoint
});
var flixel_math_FlxVector = {};
flixel_math_FlxVector.__properties__ = {get_ly:"get_ly",get_lx:"get_lx",get_ry:"get_ry",get_rx:"get_rx",set_radians:"set_radians",get_radians:"get_radians",set_degrees:"set_degrees",get_degrees:"get_degrees",get_lengthSquared:"get_lengthSquared",set_length:"set_length",get_length:"get_length",get_dy:"get_dy",get_dx:"get_dx",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",get_pool:"get_pool"};
flixel_math_FlxVector.get = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var X = x;
	var Y = y;
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	return point;
};
flixel_math_FlxVector.weak = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var X = x;
	var Y = y;
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var X1 = X;
	var Y1 = Y;
	if(Y1 == null) {
		Y1 = 0;
	}
	if(X1 == null) {
		X1 = 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(X1,Y1);
	point._inPool = false;
	var point1 = point;
	point1._weak = true;
	return point1;
};
flixel_math_FlxVector._new = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new flixel_math_FlxPoint(x,y);
	return this1;
};
flixel_math_FlxVector.set = function(this1,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	return this1.set(x,y);
};
flixel_math_FlxVector.add = function(this1,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var X = x;
	var Y = y;
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var _g = this1;
	_g.set_x(_g.x + X);
	var _g = this1;
	_g.set_y(_g.y + Y);
	return this1;
};
flixel_math_FlxVector.addPoint = function(this1,point) {
	return this1.addPoint(point);
};
flixel_math_FlxVector.subtract = function(this1,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var X = x;
	var Y = y;
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var _g = this1;
	_g.set_x(_g.x - X);
	var _g = this1;
	_g.set_y(_g.y - Y);
	return this1;
};
flixel_math_FlxVector.subtractPoint = function(this1,point) {
	return this1.subtractPoint(point);
};
flixel_math_FlxVector.scale = function(this1,k) {
	return this1.scale(k);
};
flixel_math_FlxVector.scaleNew = function(this1,k) {
	return flixel_math_FlxVector.clone(this1).scale(k);
};
flixel_math_FlxVector.addNew = function(this1,v) {
	return flixel_math_FlxVector.clone(this1).addPoint(v);
};
flixel_math_FlxVector.subtractNew = function(this1,v) {
	return flixel_math_FlxVector.clone(this1).subtractPoint(v);
};
flixel_math_FlxVector.copyFrom = function(this1,point) {
	this1.set_x(point.x);
	this1.set_y(point.y);
	if(point._weak) {
		point.put();
	}
	return this1;
};
flixel_math_FlxVector.copyFromFlash = function(this1,flashPoint) {
	this1.set_x(flashPoint.x);
	this1.set_y(flashPoint.y);
	return this1;
};
flixel_math_FlxVector.floor = function(this1) {
	this1.set_x(Math.floor(this1.x));
	this1.set_y(Math.floor(this1.y));
	return this1;
};
flixel_math_FlxVector.ceil = function(this1) {
	this1.set_x(Math.ceil(this1.x));
	this1.set_y(Math.ceil(this1.y));
	return this1;
};
flixel_math_FlxVector.round = function(this1) {
	this1.set_x(Math.round(this1.x));
	this1.set_y(Math.round(this1.y));
	return this1;
};
flixel_math_FlxVector.rotate = function(this1,pivot,angle) {
	return this1.rotate(pivot,angle);
};
flixel_math_FlxVector.transform = function(this1,matrix) {
	var x1 = this1.x * matrix.a + this1.y * matrix.c + matrix.tx;
	var y1 = this1.x * matrix.b + this1.y * matrix.d + matrix.ty;
	return this1.set(x1,y1);
};
flixel_math_FlxVector.dotProduct = function(this1,v) {
	var dp = this1.x * v.x + this1.y * v.y;
	if(v._weak) {
		v.put();
	}
	return dp;
};
flixel_math_FlxVector.dotProductWeak = function(this1,v) {
	return this1.x * v.x + this1.y * v.y;
};
flixel_math_FlxVector.dotProdWithNormalizing = function(this1,v) {
	var normalized = flixel_math_FlxVector.normalize(flixel_math_FlxVector.clone(v,flixel_math_FlxVector._vector1));
	if(v._weak) {
		v.put();
	}
	return this1.x * normalized.x + this1.y * normalized.y;
};
flixel_math_FlxVector.isPerpendicular = function(this1,v) {
	var dp = this1.x * v.x + this1.y * v.y;
	if(v._weak) {
		v.put();
	}
	return Math.abs(dp) < 9.9999999999999984e-015;
};
flixel_math_FlxVector.crossProductLength = function(this1,v) {
	var cp = this1.x * v.y - this1.y * v.x;
	if(v._weak) {
		v.put();
	}
	return cp;
};
flixel_math_FlxVector.crossProductLengthWeak = function(this1,v) {
	return this1.x * v.y - this1.y * v.x;
};
flixel_math_FlxVector.isParallel = function(this1,v) {
	var p = Math.abs(this1.x * v.y - this1.y * v.x) < 9.9999999999999984e-015;
	if(v._weak) {
		v.put();
	}
	return p;
};
flixel_math_FlxVector.isParallelWeak = function(this1,v) {
	return Math.abs(this1.x * v.y - this1.y * v.x) < 9.9999999999999984e-015;
};
flixel_math_FlxVector.isZero = function(this1) {
	if(Math.abs(this1.x) < 0.0000001) {
		return Math.abs(this1.y) < 0.0000001;
	} else {
		return false;
	}
};
flixel_math_FlxVector.zero = function(this1) {
	this1.set_x(this1.set_y(0));
	return this1;
};
flixel_math_FlxVector.normalize = function(this1) {
	if(Math.abs(this1.x) < 0.0000001 && Math.abs(this1.y) < 0.0000001) {
		return this1;
	}
	return this1.scale(1 / Math.sqrt(this1.x * this1.x + this1.y * this1.y));
};
flixel_math_FlxVector.isNormalized = function(this1) {
	return Math.abs(this1.x * this1.x + this1.y * this1.y - 1) < 9.9999999999999984e-015;
};
flixel_math_FlxVector.rotateByRadians = function(this1,rads) {
	var s = Math.sin(rads);
	var c = Math.cos(rads);
	var tempX = this1.x;
	this1.set_x(tempX * c - this1.y * s);
	this1.set_y(tempX * s + this1.y * c);
	return this1;
};
flixel_math_FlxVector.rotateByDegrees = function(this1,degs) {
	var rads = degs * (Math.PI / 180);
	var s = Math.sin(rads);
	var c = Math.cos(rads);
	var tempX = this1.x;
	this1.set_x(tempX * c - this1.y * s);
	this1.set_y(tempX * s + this1.y * c);
	return this1;
};
flixel_math_FlxVector.rotateWithTrig = function(this1,sin,cos) {
	var tempX = this1.x;
	this1.set_x(tempX * cos - this1.y * sin);
	this1.set_y(tempX * sin + this1.y * cos);
	return this1;
};
flixel_math_FlxVector.setPolarRadians = function(this1,length,radians) {
	this1.set_x(length * Math.cos(radians));
	this1.set_y(length * Math.sin(radians));
	return this1;
};
flixel_math_FlxVector.setPolarDegrees = function(this1,length,degrees) {
	return flixel_math_FlxVector.setPolarRadians(this1,length,degrees * (Math.PI / 180));
};
flixel_math_FlxVector.rightNormal = function(this1,vec) {
	if(vec == null) {
		var X = 0;
		var Y = 0;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		vec = point;
	}
	var x = -this1.y;
	var y = this1.x;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	vec.set(x,y);
	return vec;
};
flixel_math_FlxVector.leftNormal = function(this1,vec) {
	if(vec == null) {
		var X = 0;
		var Y = 0;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		vec = point;
	}
	var x = this1.y;
	var y = -this1.x;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	vec.set(x,y);
	return vec;
};
flixel_math_FlxVector.negate = function(this1) {
	var _g = this1;
	_g.set_x(_g.x * -1);
	var _g = this1;
	_g.set_y(_g.y * -1);
	return this1;
};
flixel_math_FlxVector.negateNew = function(this1) {
	var this2 = flixel_math_FlxVector.clone(this1);
	var _g = this2;
	_g.set_x(_g.x * -1);
	var _g = this2;
	_g.set_y(_g.y * -1);
	return this2;
};
flixel_math_FlxVector.projectTo = function(this1,v,proj) {
	var dp = this1.x * v.x + this1.y * v.y;
	var lenSq = v.x * v.x + v.y * v.y;
	if(proj == null) {
		var X = 0;
		var Y = 0;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		proj = point;
	}
	var x = dp * v.x / lenSq;
	var y = dp * v.y / lenSq;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	proj.set(x,y);
	if(v._weak) {
		v.put();
	}
	return proj;
};
flixel_math_FlxVector.projectToNormalized = function(this1,v,proj) {
	var proj1 = proj;
	var dp = this1.x * v.x + this1.y * v.y;
	if(proj1 == null) {
		var X = 0;
		var Y = 0;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		proj1 = point;
	}
	var x = dp * v.x;
	var y = dp * v.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	proj = proj1.set(x,y);
	if(v._weak) {
		v.put();
	}
	return proj;
};
flixel_math_FlxVector.projectToNormalizedWeak = function(this1,v,proj) {
	var dp = this1.x * v.x + this1.y * v.y;
	if(proj == null) {
		var X = 0;
		var Y = 0;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		proj = point;
	}
	var x = dp * v.x;
	var y = dp * v.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	return proj.set(x,y);
};
flixel_math_FlxVector.perpProduct = function(this1,v) {
	var pp = this1.y * v.x + -this1.x * v.y;
	if(v._weak) {
		v.put();
	}
	return pp;
};
flixel_math_FlxVector.perpProductWeak = function(this1,v) {
	return this1.y * v.x + -this1.x * v.y;
};
flixel_math_FlxVector.ratio = function(this1,a,b,v) {
	var r;
	if(Math.abs(this1.x * v.y - this1.y * v.x) < 9.9999999999999984e-015) {
		r = NaN;
	} else if(this1.x * this1.x + this1.y * this1.y < 9.9999999999999984e-015 || v.x * v.x + v.y * v.y < 9.9999999999999984e-015) {
		r = NaN;
	} else {
		flixel_math_FlxVector._vector1 = flixel_math_FlxVector.clone(b,flixel_math_FlxVector._vector1);
		var _this = flixel_math_FlxVector._vector1;
		var _g = _this;
		_g.set_x(_g.x - a.x);
		var _g = _this;
		_g.set_y(_g.y - a.y);
		var this2 = flixel_math_FlxVector._vector1;
		r = (this2.y * v.x + -this2.x * v.y) / (this1.y * v.x + -this1.x * v.y);
	}
	if(a._weak) {
		a.put();
	}
	if(b._weak) {
		b.put();
	}
	if(v._weak) {
		v.put();
	}
	return r;
};
flixel_math_FlxVector.ratioWeak = function(this1,a,b,v) {
	if(Math.abs(this1.x * v.y - this1.y * v.x) < 9.9999999999999984e-015) {
		return NaN;
	}
	if(this1.x * this1.x + this1.y * this1.y < 9.9999999999999984e-015 || v.x * v.x + v.y * v.y < 9.9999999999999984e-015) {
		return NaN;
	}
	flixel_math_FlxVector._vector1 = flixel_math_FlxVector.clone(b,flixel_math_FlxVector._vector1);
	var _this = flixel_math_FlxVector._vector1;
	var _g = _this;
	_g.set_x(_g.x - a.x);
	var _g = _this;
	_g.set_y(_g.y - a.y);
	var this2 = flixel_math_FlxVector._vector1;
	return (this2.y * v.x + -this2.x * v.y) / (this1.y * v.x + -this1.x * v.y);
};
flixel_math_FlxVector.findIntersection = function(this1,a,b,v,intersection) {
	var t;
	if(Math.abs(this1.x * v.y - this1.y * v.x) < 9.9999999999999984e-015) {
		t = NaN;
	} else if(this1.x * this1.x + this1.y * this1.y < 9.9999999999999984e-015 || v.x * v.x + v.y * v.y < 9.9999999999999984e-015) {
		t = NaN;
	} else {
		flixel_math_FlxVector._vector1 = flixel_math_FlxVector.clone(b,flixel_math_FlxVector._vector1);
		var _this = flixel_math_FlxVector._vector1;
		var _g = _this;
		_g.set_x(_g.x - a.x);
		var _g = _this;
		_g.set_y(_g.y - a.y);
		var this2 = flixel_math_FlxVector._vector1;
		t = (this2.y * v.x + -this2.x * v.y) / (this1.y * v.x + -this1.x * v.y);
	}
	if(intersection == null) {
		var X = 0;
		var Y = 0;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		intersection = point;
	}
	if(isNaN(t)) {
		var x = NaN;
		var y = NaN;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		intersection.set(x,y);
	} else {
		var x = a.x + t * this1.x;
		var y = a.y + t * this1.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		intersection.set(x,y);
	}
	if(a._weak) {
		a.put();
	}
	if(b._weak) {
		b.put();
	}
	if(v._weak) {
		v.put();
	}
	return intersection;
};
flixel_math_FlxVector.findIntersectionInBounds = function(this1,a,b,v,intersection) {
	if(intersection == null) {
		var X = 0;
		var Y = 0;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		intersection = point;
	}
	var t1;
	if(Math.abs(this1.x * v.y - this1.y * v.x) < 9.9999999999999984e-015) {
		t1 = NaN;
	} else if(this1.x * this1.x + this1.y * this1.y < 9.9999999999999984e-015 || v.x * v.x + v.y * v.y < 9.9999999999999984e-015) {
		t1 = NaN;
	} else {
		flixel_math_FlxVector._vector1 = flixel_math_FlxVector.clone(b,flixel_math_FlxVector._vector1);
		var _this = flixel_math_FlxVector._vector1;
		var _g = _this;
		_g.set_x(_g.x - a.x);
		var _g = _this;
		_g.set_y(_g.y - a.y);
		var this2 = flixel_math_FlxVector._vector1;
		t1 = (this2.y * v.x + -this2.x * v.y) / (this1.y * v.x + -this1.x * v.y);
	}
	var t2;
	if(Math.abs(v.x * this1.y - v.y * this1.x) < 9.9999999999999984e-015) {
		t2 = NaN;
	} else if(v.x * v.x + v.y * v.y < 9.9999999999999984e-015 || this1.x * this1.x + this1.y * this1.y < 9.9999999999999984e-015) {
		t2 = NaN;
	} else {
		flixel_math_FlxVector._vector1 = flixel_math_FlxVector.clone(a,flixel_math_FlxVector._vector1);
		var _this = flixel_math_FlxVector._vector1;
		var _g = _this;
		_g.set_x(_g.x - b.x);
		var _g = _this;
		_g.set_y(_g.y - b.y);
		var this2 = flixel_math_FlxVector._vector1;
		t2 = (this2.y * this1.x + -this2.x * this1.y) / (v.y * this1.x + -v.x * this1.y);
	}
	if(!isNaN(t1) && !isNaN(t2) && t1 > 0 && t1 <= 1 && t2 > 0 && t2 <= 1) {
		var x = a.x + t1 * this1.x;
		var y = a.y + t1 * this1.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		intersection.set(x,y);
	} else {
		var x = NaN;
		var y = NaN;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		intersection.set(x,y);
	}
	if(a._weak) {
		a.put();
	}
	if(b._weak) {
		b.put();
	}
	if(v._weak) {
		v.put();
	}
	return intersection;
};
flixel_math_FlxVector.truncate = function(this1,max) {
	var l = Math.min(max,Math.sqrt(this1.x * this1.x + this1.y * this1.y));
	if(!(Math.abs(this1.x) < 0.0000001 && Math.abs(this1.y) < 0.0000001)) {
		var a = flixel_math_FlxVector.get_radians(this1);
		this1.set_x(l * Math.cos(a));
		this1.set_y(l * Math.sin(a));
	}
	return this1;
};
flixel_math_FlxVector.radiansBetween = function(this1,v) {
	var rads = Math.acos((this1.x * v.x + this1.y * v.y) / (Math.sqrt(this1.x * this1.x + this1.y * this1.y) * Math.sqrt(v.x * v.x + v.y * v.y)));
	if(v._weak) {
		v.put();
	}
	return rads;
};
flixel_math_FlxVector.degreesBetween = function(this1,v) {
	var rads = Math.acos((this1.x * v.x + this1.y * v.y) / (Math.sqrt(this1.x * this1.x + this1.y * this1.y) * Math.sqrt(v.x * v.x + v.y * v.y)));
	if(v._weak) {
		v.put();
	}
	return rads * (180 / Math.PI);
};
flixel_math_FlxVector.sign = function(this1,a,b) {
	var signFl = (a.x - this1.x) * (b.y - this1.y) - (a.y - this1.y) * (b.x - this1.x);
	if(a._weak) {
		a.put();
	}
	if(b._weak) {
		b.put();
	}
	if(signFl == 0) {
		return 0;
	}
	return Math.round(signFl / Math.abs(signFl));
};
flixel_math_FlxVector.dist = function(this1,v) {
	var dx = v.x - this1.x;
	var dy = v.y - this1.y;
	if(v._weak) {
		v.put();
	}
	return Math.sqrt(dx * dx + dy * dy);
};
flixel_math_FlxVector.distSquared = function(this1,v) {
	var dx = v.x - this1.x;
	var dy = v.y - this1.y;
	if(v._weak) {
		v.put();
	}
	return dx * dx + dy * dy;
};
flixel_math_FlxVector.bounce = function(this1,normal,bounceCoeff) {
	if(bounceCoeff == null) {
		bounceCoeff = 1;
	}
	var d = (1 + bounceCoeff) * (this1.x * normal.x + this1.y * normal.y);
	var _g = this1;
	_g.set_x(_g.x - d * normal.x);
	var _g = this1;
	_g.set_y(_g.y - d * normal.y);
	if(normal._weak) {
		normal.put();
	}
	return this1;
};
flixel_math_FlxVector.bounceWithFriction = function(this1,normal,bounceCoeff,friction) {
	if(friction == null) {
		friction = 0;
	}
	if(bounceCoeff == null) {
		bounceCoeff = 1;
	}
	var v = flixel_math_FlxVector.rightNormal(normal,flixel_math_FlxVector._vector3);
	var proj = flixel_math_FlxVector._vector1;
	var dp = this1.x * v.x + this1.y * v.y;
	if(proj == null) {
		var X = 0;
		var Y = 0;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		proj = point;
	}
	var x = dp * v.x;
	var y = dp * v.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p1 = proj.set(x,y);
	var proj = flixel_math_FlxVector._vector2;
	var dp = this1.x * normal.x + this1.y * normal.y;
	if(proj == null) {
		var X = 0;
		var Y = 0;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		proj = point;
	}
	var x = dp * normal.x;
	var y = dp * normal.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p2 = proj.set(x,y);
	var bounceX = -p2.x;
	var bounceY = -p2.y;
	var frictionX = p1.x;
	var frictionY = p1.y;
	this1.set_x(bounceX * bounceCoeff + frictionX * friction);
	this1.set_y(bounceY * bounceCoeff + frictionY * friction);
	if(normal._weak) {
		normal.put();
	}
	return this1;
};
flixel_math_FlxVector.isValid = function(this1) {
	var tmp;
	var tmp1;
	var f = this1.x;
	if(!isNaN(f)) {
		var f = this1.y;
		tmp1 = !isNaN(f);
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		var f = this1.x;
		tmp = isFinite(f);
	} else {
		tmp = false;
	}
	if(tmp) {
		var f = this1.y;
		return isFinite(f);
	} else {
		return false;
	}
};
flixel_math_FlxVector.clone = function(this1,vec) {
	if(vec == null) {
		var X = 0;
		var Y = 0;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		vec = point;
	}
	vec.set_x(this1.x);
	vec.set_y(this1.y);
	return vec;
};
flixel_math_FlxVector.get_x = function(this1) {
	return this1.x;
};
flixel_math_FlxVector.set_x = function(this1,x) {
	return this1.set_x(x);
};
flixel_math_FlxVector.get_y = function(this1) {
	return this1.y;
};
flixel_math_FlxVector.set_y = function(this1,y) {
	return this1.set_y(y);
};
flixel_math_FlxVector.get_dx = function(this1) {
	if(Math.abs(this1.x) < 0.0000001 && Math.abs(this1.y) < 0.0000001) {
		return 0;
	}
	return this1.x / Math.sqrt(this1.x * this1.x + this1.y * this1.y);
};
flixel_math_FlxVector.get_dy = function(this1) {
	if(Math.abs(this1.x) < 0.0000001 && Math.abs(this1.y) < 0.0000001) {
		return 0;
	}
	return this1.y / Math.sqrt(this1.x * this1.x + this1.y * this1.y);
};
flixel_math_FlxVector.get_length = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y);
};
flixel_math_FlxVector.set_length = function(this1,l) {
	if(!(Math.abs(this1.x) < 0.0000001 && Math.abs(this1.y) < 0.0000001)) {
		var a = flixel_math_FlxVector.get_radians(this1);
		this1.set_x(l * Math.cos(a));
		this1.set_y(l * Math.sin(a));
	}
	return l;
};
flixel_math_FlxVector.get_lengthSquared = function(this1) {
	return this1.x * this1.x + this1.y * this1.y;
};
flixel_math_FlxVector.get_degrees = function(this1) {
	return flixel_math_FlxVector.get_radians(this1) * (180 / Math.PI);
};
flixel_math_FlxVector.set_degrees = function(this1,degs) {
	var rads = degs * (Math.PI / 180);
	var len = Math.sqrt(this1.x * this1.x + this1.y * this1.y);
	this1.set_x(len * Math.cos(rads));
	this1.set_y(len * Math.sin(rads));
	return degs;
};
flixel_math_FlxVector.get_radians = function(this1) {
	if(Math.abs(this1.x) < 0.0000001 && Math.abs(this1.y) < 0.0000001) {
		return 0;
	}
	return Math.atan2(this1.y,this1.x);
};
flixel_math_FlxVector.set_radians = function(this1,rads) {
	var len = Math.sqrt(this1.x * this1.x + this1.y * this1.y);
	this1.set_x(len * Math.cos(rads));
	this1.set_y(len * Math.sin(rads));
	return rads;
};
flixel_math_FlxVector.get_rx = function(this1) {
	return -this1.y;
};
flixel_math_FlxVector.get_ry = function(this1) {
	return this1.x;
};
flixel_math_FlxVector.get_lx = function(this1) {
	return this1.y;
};
flixel_math_FlxVector.get_ly = function(this1) {
	return -this1.x;
};
flixel_math_FlxVector.get_pool = function() {
	return flixel_math_FlxPoint.get_pool();
};
var flixel_math_FlxVelocity = function() { };
$hxClasses["flixel.math.FlxVelocity"] = flixel_math_FlxVelocity;
flixel_math_FlxVelocity.__name__ = "flixel.math.FlxVelocity";
flixel_math_FlxVelocity.moveTowardsObject = function(Source,Dest,Speed,MaxTime) {
	if(MaxTime == null) {
		MaxTime = 0;
	}
	if(Speed == null) {
		Speed = 60;
	}
	var a = flixel_math_FlxAngle.angleBetween(Source,Dest);
	if(MaxTime > 0) {
		var dx = Source.x + Source.origin.x - (Dest.x + Dest.origin.x);
		var dy = Source.y + Source.origin.y - (Dest.y + Dest.origin.y);
		var d = Math.sqrt(dx * dx + dy * dy) | 0;
		Speed = d / (MaxTime / 1000) | 0;
	}
	Source.velocity.set_x(Math.cos(a) * Speed);
	Source.velocity.set_y(Math.sin(a) * Speed);
};
flixel_math_FlxVelocity.accelerateTowardsObject = function(Source,Dest,Acceleration,MaxSpeed) {
	var a = flixel_math_FlxAngle.angleBetween(Source,Dest);
	var sinA = Math.sin(a);
	var cosA = Math.cos(a);
	Source.velocity.set(0,0);
	Source.acceleration.set(cosA * Acceleration,sinA * Acceleration);
	Source.maxVelocity.set(Math.abs(cosA * MaxSpeed),Math.abs(sinA * MaxSpeed));
};
flixel_math_FlxVelocity.moveTowardsMouse = function(Source,Speed,MaxTime) {
	if(MaxTime == null) {
		MaxTime = 0;
	}
	if(Speed == null) {
		Speed = 60;
	}
	var a = flixel_math_FlxAngle.angleBetweenMouse(Source);
	if(MaxTime > 0) {
		var dx = Source.x + Source.origin.x - flixel_FlxG.mouse.screenX;
		var dy = Source.y + Source.origin.y - flixel_FlxG.mouse.screenY;
		var d = Math.sqrt(dx * dx + dy * dy) | 0;
		Speed = d / (MaxTime / 1000) | 0;
	}
	Source.velocity.set_x(Math.cos(a) * Speed);
	Source.velocity.set_y(Math.sin(a) * Speed);
};
flixel_math_FlxVelocity.moveTowardsTouch = function(Source,Touch1,Speed,MaxTime) {
	if(MaxTime == null) {
		MaxTime = 0;
	}
	if(Speed == null) {
		Speed = 60;
	}
	var a = flixel_math_FlxAngle.angleBetweenTouch(Source,Touch1);
	if(MaxTime > 0) {
		var dx = Source.x + Source.origin.x - Touch1.screenX;
		var dy = Source.y + Source.origin.y - Touch1.screenY;
		var d = Math.sqrt(dx * dx + dy * dy) | 0;
		Speed = d / (MaxTime / 1000) | 0;
	}
	Source.velocity.set_x(Math.cos(a) * Speed);
	Source.velocity.set_y(Math.sin(a) * Speed);
};
flixel_math_FlxVelocity.accelerateTowardsMouse = function(Source,Acceleration,MaxSpeed) {
	var a = flixel_math_FlxAngle.angleBetweenMouse(Source);
	var sinA = Math.sin(a);
	var cosA = Math.cos(a);
	Source.velocity.set(0,0);
	Source.acceleration.set(cosA * Acceleration,sinA * Acceleration);
	Source.maxVelocity.set(Math.abs(cosA * MaxSpeed),Math.abs(sinA * MaxSpeed));
};
flixel_math_FlxVelocity.accelerateTowardsTouch = function(Source,Touch1,Acceleration,MaxSpeed) {
	var a = flixel_math_FlxAngle.angleBetweenTouch(Source,Touch1);
	var sinA = Math.sin(a);
	var cosA = Math.cos(a);
	Source.velocity.set(0,0);
	Source.acceleration.set(cosA * Acceleration,sinA * Acceleration);
	Source.maxVelocity.set(Math.abs(cosA * MaxSpeed),Math.abs(sinA * MaxSpeed));
};
flixel_math_FlxVelocity.moveTowardsPoint = function(Source,Target,Speed,MaxTime) {
	if(MaxTime == null) {
		MaxTime = 0;
	}
	if(Speed == null) {
		Speed = 60;
	}
	var a = flixel_math_FlxAngle.angleBetweenPoint(Source,Target);
	if(MaxTime > 0) {
		var dx = Source.x + Source.origin.x - Target.x;
		var dy = Source.y + Source.origin.y - Target.y;
		if(Target._weak) {
			Target.put();
		}
		var d = Math.sqrt(dx * dx + dy * dy) | 0;
		Speed = d / (MaxTime / 1000) | 0;
	}
	Source.velocity.set_x(Math.cos(a) * Speed);
	Source.velocity.set_y(Math.sin(a) * Speed);
	if(Target._weak) {
		Target.put();
	}
};
flixel_math_FlxVelocity.accelerateTowardsPoint = function(Source,Target,Acceleration,MaxSpeed) {
	var a = flixel_math_FlxAngle.angleBetweenPoint(Source,Target);
	var sinA = Math.sin(a);
	var cosA = Math.cos(a);
	Source.velocity.set(0,0);
	Source.acceleration.set(cosA * Acceleration,sinA * Acceleration);
	Source.maxVelocity.set(Math.abs(cosA * MaxSpeed),Math.abs(sinA * MaxSpeed));
	if(Target._weak) {
		Target.put();
	}
};
flixel_math_FlxVelocity.velocityFromAngle = function(Angle,Speed) {
	var a = Angle * (Math.PI / 180);
	var X = Math.cos(a) * Speed;
	var Y = Math.sin(a) * Speed;
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	return point;
};
flixel_math_FlxVelocity.velocityFromFacing = function(Parent,Speed) {
	var a = flixel_math_FlxAngle.angleFromFacing(Parent.facing);
	var X = Math.cos(a) * Speed;
	var Y = Math.sin(a) * Speed;
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	return point;
};
flixel_math_FlxVelocity.computeVelocity = function(Velocity,Acceleration,Drag,Max,Elapsed) {
	if(Acceleration != 0) {
		Velocity += Acceleration * Elapsed;
	} else if(Drag != 0) {
		var drag = Drag * Elapsed;
		if(Velocity - drag > 0) {
			Velocity -= drag;
		} else if(Velocity + drag < 0) {
			Velocity += drag;
		} else {
			Velocity = 0;
		}
	}
	if(Velocity != 0 && Max != 0) {
		if(Velocity > Max) {
			Velocity = Max;
		} else if(Velocity < -Max) {
			Velocity = -Max;
		}
	}
	return Velocity;
};
flixel_math_FlxVelocity.accelerateFromAngle = function(source,radians,acceleration,maxSpeed,resetVelocity) {
	if(resetVelocity == null) {
		resetVelocity = true;
	}
	var sinA = Math.sin(radians);
	var cosA = Math.cos(radians);
	if(resetVelocity) {
		source.velocity.set(0,0);
	}
	source.acceleration.set(cosA * acceleration,sinA * acceleration);
	source.maxVelocity.set(Math.abs(cosA * maxSpeed),Math.abs(sinA * maxSpeed));
};
var flixel_system_GraphicLogo = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_GraphicLogo.preload != null) {
		this.__fromImage(flixel_system_GraphicLogo.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_GraphicLogo.resourceName),flixel_system_GraphicLogo.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_GraphicLogo.preload == null) {
				flixel_system_GraphicLogo.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.GraphicLogo"] = flixel_system_GraphicLogo;
flixel_system_GraphicLogo.__name__ = "flixel.system.GraphicLogo";
flixel_system_GraphicLogo.preload = null;
flixel_system_GraphicLogo.__super__ = openfl_display_BitmapData;
flixel_system_GraphicLogo.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_GraphicLogo
});
var flixel_system_GraphicVirtualInput = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_GraphicVirtualInput.preload != null) {
		this.__fromImage(flixel_system_GraphicVirtualInput.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_GraphicVirtualInput.resourceName),flixel_system_GraphicVirtualInput.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_GraphicVirtualInput.preload == null) {
				flixel_system_GraphicVirtualInput.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.GraphicVirtualInput"] = flixel_system_GraphicVirtualInput;
flixel_system_GraphicVirtualInput.__name__ = "flixel.system.GraphicVirtualInput";
flixel_system_GraphicVirtualInput.preload = null;
flixel_system_GraphicVirtualInput.__super__ = openfl_display_BitmapData;
flixel_system_GraphicVirtualInput.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_GraphicVirtualInput
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s,encoding) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.ofHex = function(s) {
	if((s.length & 1) != 0) {
		throw haxe_Exception.thrown("Not a hex string (odd number of digits)");
	}
	var a = [];
	var i = 0;
	var len = s.length >> 1;
	while(i < len) {
		var high = s.charCodeAt(i * 2);
		var low = s.charCodeAt(i * 2 + 1);
		high = (high & 15) + ((high & 64) >> 6) * 9;
		low = (low & 15) + ((low & 64) >> 6) * 9;
		a.push((high << 4 | low) & 255);
		++i;
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value & 255;
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,compare: function(other) {
		var b1 = this.b;
		var b2 = other.b;
		var len = this.length < other.length ? this.length : other.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			if(b1[i] != b2[i]) {
				return b1[i] - b2[i];
			}
		}
		return this.length - other.length;
	}
	,initData: function() {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getInt64: function(pos) {
		var this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
		return this1;
	}
	,setInt64: function(pos,v) {
		this.setInt32(pos,v.low);
		this.setInt32(pos + 4,v.high);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = _$String_String_$Impl_$.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,readString: function(pos,len) {
		return this.getString(pos,len);
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g = 0;
		var _g1 = this.length;
		while(_g < _g1) {
			var i = _g++;
			var c = this.b[i];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	,getData: function() {
		return this.b.bufferValue;
	}
	,__class__: haxe_io_Bytes
};
var openfl_utils_IDataOutput = function() { };
$hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
openfl_utils_IDataOutput.__name__ = "openfl.utils.IDataOutput";
openfl_utils_IDataOutput.__isInterface__ = true;
openfl_utils_IDataOutput.prototype = {
	get_endian: null
	,set_endian: null
	,objectEncoding: null
	,writeBoolean: null
	,writeByte: null
	,writeBytes: null
	,writeDouble: null
	,writeFloat: null
	,writeInt: null
	,writeMultiByte: null
	,writeObject: null
	,writeShort: null
	,writeUnsignedInt: null
	,writeUTF: null
	,writeUTFBytes: null
	,__class__: openfl_utils_IDataOutput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian"}
};
var openfl_utils_IDataInput = function() { };
$hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
openfl_utils_IDataInput.__name__ = "openfl.utils.IDataInput";
openfl_utils_IDataInput.__isInterface__ = true;
openfl_utils_IDataInput.prototype = {
	get_bytesAvailable: null
	,get_endian: null
	,set_endian: null
	,objectEncoding: null
	,readBoolean: null
	,readByte: null
	,readBytes: null
	,readDouble: null
	,readFloat: null
	,readInt: null
	,readMultiByte: null
	,readObject: null
	,readShort: null
	,readUnsignedByte: null
	,readUnsignedInt: null
	,readUnsignedShort: null
	,readUTF: null
	,readUTFBytes: null
	,__class__: openfl_utils_IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var openfl_utils_ByteArrayData = function(length) {
	if(length == null) {
		length = 0;
	}
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	haxe_io_Bytes.call(this,bytes.b.buffer);
	this.__length = length;
	if(openfl_utils_ByteArrayData.__defaultEndian == null) {
		if(lime_system_System.get_endianness() == lime_system_Endian.LITTLE_ENDIAN) {
			openfl_utils_ByteArrayData.__defaultEndian = 1;
		} else {
			openfl_utils_ByteArrayData.__defaultEndian = 0;
		}
	}
	this.__endian = openfl_utils_ByteArrayData.__defaultEndian;
	this.objectEncoding = openfl_utils_ByteArrayData.defaultObjectEncoding;
	this.position = 0;
};
$hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
openfl_utils_ByteArrayData.__name__ = "openfl.utils.ByteArrayData";
openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_utils_ByteArrayData.__properties__ = {set_defaultEndian:"set_defaultEndian",get_defaultEndian:"get_defaultEndian"};
openfl_utils_ByteArrayData.fromBytes = function(bytes) {
	var result = new openfl_utils_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
openfl_utils_ByteArrayData.get_defaultEndian = function() {
	if(openfl_utils_ByteArrayData.__defaultEndian == null) {
		if(lime_system_System.get_endianness() == lime_system_Endian.LITTLE_ENDIAN) {
			openfl_utils_ByteArrayData.__defaultEndian = 1;
		} else {
			openfl_utils_ByteArrayData.__defaultEndian = 0;
		}
	}
	return openfl_utils_ByteArrayData.__defaultEndian;
};
openfl_utils_ByteArrayData.set_defaultEndian = function(value) {
	return openfl_utils_ByteArrayData.__defaultEndian = value;
};
openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype,{
	objectEncoding: null
	,position: null
	,__endian: null
	,__length: null
	,clear: function() {
		this.length = 0;
		this.position = 0;
	}
	,compress: function(algorithm) {
		if(algorithm == null) {
			algorithm = 2;
		}
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__length = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var limeBytes = this;
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = lime_utils_Bytes.compress(limeBytes,lime_utils_CompressionAlgorithm.DEFLATE);
			break;
		case 1:
			bytes = lime_utils_Bytes.compress(limeBytes,lime_utils_CompressionAlgorithm.LZMA);
			break;
		default:
			bytes = lime_utils_Bytes.compress(limeBytes,lime_utils_CompressionAlgorithm.ZLIB);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
			this.length = this.__length;
			this.position = this.length;
		}
	}
	,deflate: function() {
		this.compress(0);
	}
	,inflate: function() {
		this.uncompress(0);
	}
	,readBoolean: function() {
		if(this.position < this.length) {
			return this.b[this.position++] != 0;
		} else {
			throw new openfl_errors_EOFError();
		}
	}
	,readByte: function() {
		var value = this.readUnsignedByte();
		if((value & 128) != 0) {
			return value - 256;
		} else {
			return value;
		}
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(length == 0) {
			length = this.length - this.position;
		}
		if(this.position + length > this.length) {
			throw new openfl_errors_EOFError();
		}
		if(bytes.length < offset + length) {
			bytes.__resize(offset + length);
		}
		bytes.blit(offset,this,this.position,length);
		this.position += length;
	}
	,readDouble: function() {
		if(this.__endian == 1) {
			if(this.position + 8 > this.length) {
				throw new openfl_errors_EOFError();
			}
			this.position += 8;
			return this.getDouble(this.position - 8);
		} else {
			var ch1 = this.readInt();
			var ch2 = this.readInt();
			return haxe_io_FPHelper.i64ToDouble(ch2,ch1);
		}
	}
	,readFloat: function() {
		if(this.__endian == 1) {
			if(this.position + 4 > this.length) {
				throw new openfl_errors_EOFError();
			}
			this.position += 4;
			return this.getFloat(this.position - 4);
		} else {
			return haxe_io_FPHelper.i32ToFloat(this.readInt());
		}
	}
	,readInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readObject: function() {
		switch(this.objectEncoding) {
		case 10:
			var data = this.readUTF();
			return haxe_Unserializer.run(data);
		case 12:
			var data = this.readUTF();
			return JSON.parse(data);
		default:
			return null;
		}
	}
	,readShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var value;
		if(this.__endian == 1) {
			value = ch2 << 8 | ch1;
		} else {
			value = ch1 << 8 | ch2;
		}
		if((value & 32768) != 0) {
			return value - 65536;
		} else {
			return value;
		}
	}
	,readUnsignedByte: function() {
		if(this.position < this.length) {
			return this.b[this.position++];
		} else {
			throw new openfl_errors_EOFError();
		}
	}
	,readUnsignedInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readUnsignedShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return (ch2 << 8) + ch1;
		} else {
			return ch1 << 8 | ch2;
		}
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(length) {
		if(this.position + length > this.length) {
			throw new openfl_errors_EOFError();
		}
		this.position += length;
		return this.getString(this.position - length,length);
	}
	,uncompress: function(algorithm) {
		if(algorithm == null) {
			algorithm = 2;
		}
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__length = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var limeBytes = this;
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = lime_utils_Bytes.decompress(limeBytes,lime_utils_CompressionAlgorithm.DEFLATE);
			break;
		case 1:
			bytes = lime_utils_Bytes.decompress(limeBytes,lime_utils_CompressionAlgorithm.LZMA);
			break;
		default:
			bytes = lime_utils_Bytes.decompress(limeBytes,lime_utils_CompressionAlgorithm.ZLIB);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
			this.length = this.__length;
		}
		this.position = 0;
	}
	,writeBoolean: function(value) {
		this.writeByte(value ? 1 : 0);
	}
	,writeByte: function(value) {
		this.__resize(this.position + 1);
		this.b[this.position++] = value & 255 & 255;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(openfl_utils_ByteArray.get_length(bytes) == 0) {
			return;
		}
		if(length == 0) {
			length = openfl_utils_ByteArray.get_length(bytes) - offset;
		}
		this.__resize(this.position + length);
		this.blit(this.position,bytes,offset,length);
		this.position = this.position + length;
	}
	,writeDouble: function(value) {
		var int64 = haxe_io_FPHelper.doubleToI64(value);
		if(this.__endian == 1) {
			this.writeInt(int64.low);
			this.writeInt(int64.high);
		} else {
			this.writeInt(int64.high);
			this.writeInt(int64.low);
		}
	}
	,writeFloat: function(value) {
		if(this.__endian == 1) {
			this.__resize(this.position + 4);
			this.setFloat(this.position,value);
			this.position += 4;
		} else {
			var int = haxe_io_FPHelper.floatToI32(value);
			this.writeInt(int);
		}
	}
	,writeInt: function(value) {
		this.__resize(this.position + 4);
		if(this.__endian == 1) {
			this.b[this.position++] = value & 255 & 255;
			this.b[this.position++] = value >> 8 & 255 & 255;
			this.b[this.position++] = value >> 16 & 255 & 255;
			this.b[this.position++] = value >> 24 & 255 & 255;
		} else {
			this.b[this.position++] = value >> 24 & 255 & 255;
			this.b[this.position++] = value >> 16 & 255 & 255;
			this.b[this.position++] = value >> 8 & 255 & 255;
			this.b[this.position++] = value & 255 & 255;
		}
	}
	,writeMultiByte: function(value,charSet) {
		this.writeUTFBytes(value);
	}
	,writeObject: function(object) {
		switch(this.objectEncoding) {
		case 10:
			var value = haxe_Serializer.run(object);
			this.writeUTF(value);
			break;
		case 12:
			var value = JSON.stringify(object);
			this.writeUTF(value);
			break;
		default:
			return;
		}
	}
	,writeShort: function(value) {
		this.__resize(this.position + 2);
		if(this.__endian == 1) {
			this.b[this.position++] = value & 255;
			this.b[this.position++] = value >> 8 & 255;
		} else {
			this.b[this.position++] = value >> 8 & 255;
			this.b[this.position++] = value & 255;
		}
	}
	,writeUnsignedInt: function(value) {
		this.writeInt(value);
	}
	,writeUTF: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeShort(bytes.length);
		this.writeBytes(openfl_utils_ByteArray.fromBytes(bytes));
	}
	,writeUTFBytes: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeBytes(openfl_utils_ByteArray.fromBytes(bytes));
	}
	,__fromBytes: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
		this.length = bytes.length;
	}
	,__resize: function(size) {
		if(size > this.__length) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer((size + 1) * 3 >> 1));
			if(this.__length > 0) {
				var cacheLength = this.length;
				this.length = this.__length;
				bytes.blit(0,this,0,this.__length);
				this.length = cacheLength;
			}
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
		}
		if(this.length < size) {
			this.length = size;
		}
	}
	,__setData: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		return this.__endian;
	}
	,set_endian: function(value) {
		return this.__endian = value;
	}
	,__class__: openfl_utils_ByteArrayData
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
});
var flixel_system_VirtualInputData = function(length) {
	if(length == null) {
		length = 0;
	}
	openfl_utils_ByteArrayData.call(this);
	var bytes = haxe_Resource.getBytes(flixel_system_VirtualInputData.resourceName);
	this.__fromBytes(bytes);
};
$hxClasses["flixel.system.VirtualInputData"] = flixel_system_VirtualInputData;
flixel_system_VirtualInputData.__name__ = "flixel.system.VirtualInputData";
flixel_system_VirtualInputData.__super__ = openfl_utils_ByteArrayData;
flixel_system_VirtualInputData.prototype = $extend(openfl_utils_ByteArrayData.prototype,{
	__class__: flixel_system_VirtualInputData
});
var flixel_system_FlxAssets = function() { };
$hxClasses["flixel.system.FlxAssets"] = flixel_system_FlxAssets;
flixel_system_FlxAssets.__name__ = "flixel.system.FlxAssets";
flixel_system_FlxAssets.drawLogo = function(graph) {
	graph.beginFill(47394);
	graph.moveTo(50,13);
	graph.lineTo(51,13);
	graph.lineTo(87,50);
	graph.lineTo(87,51);
	graph.lineTo(51,87);
	graph.lineTo(50,87);
	graph.lineTo(13,51);
	graph.lineTo(13,50);
	graph.lineTo(50,13);
	graph.endFill();
	graph.beginFill(16761138);
	graph.moveTo(0,0);
	graph.lineTo(25,0);
	graph.lineTo(50,13);
	graph.lineTo(13,50);
	graph.lineTo(0,25);
	graph.lineTo(0,0);
	graph.endFill();
	graph.beginFill(16066382);
	graph.moveTo(100,0);
	graph.lineTo(75,0);
	graph.lineTo(51,13);
	graph.lineTo(87,50);
	graph.lineTo(100,25);
	graph.lineTo(100,0);
	graph.endFill();
	graph.beginFill(3555839);
	graph.moveTo(0,100);
	graph.lineTo(25,100);
	graph.lineTo(50,87);
	graph.lineTo(13,51);
	graph.lineTo(0,75);
	graph.lineTo(0,100);
	graph.endFill();
	graph.beginFill(314875);
	graph.moveTo(100,100);
	graph.lineTo(75,100);
	graph.lineTo(51,87);
	graph.lineTo(87,51);
	graph.lineTo(100,75);
	graph.lineTo(100,100);
	graph.endFill();
};
flixel_system_FlxAssets.getBitmapData = function(id) {
	if(openfl_utils_Assets.exists(id)) {
		return openfl_utils_Assets.getBitmapData(id,false);
	}
	return null;
};
flixel_system_FlxAssets.getBitmapFromClass = function(source) {
	return Type.createInstance(source,[]);
};
flixel_system_FlxAssets.resolveBitmapData = function(Graphic) {
	if(((Graphic) instanceof openfl_display_BitmapData)) {
		return Graphic;
	} else if(js_Boot.__instanceof(Graphic,Class)) {
		return Type.createInstance(Graphic,[]);
	} else if(typeof(Graphic) == "string") {
		if(openfl_utils_Assets.exists(Graphic)) {
			return openfl_utils_Assets.getBitmapData(Graphic,false);
		} else {
			return null;
		}
	}
	return null;
};
flixel_system_FlxAssets.resolveKey = function(Graphic,Key) {
	if(Key != null) {
		return Key;
	}
	if(((Graphic) instanceof openfl_display_BitmapData)) {
		return Key;
	} else if(js_Boot.__instanceof(Graphic,Class)) {
		var _this = flixel_FlxG.bitmap;
		return Graphic.__name__;
	} else if(typeof(Graphic) == "string") {
		return Graphic;
	}
	return null;
};
flixel_system_FlxAssets.getSound = function(id) {
	var extension = "";
	extension = ".ogg";
	return openfl_utils_Assets.getSound(id + extension);
};
flixel_system_FlxAssets.getVirtualInputFrames = function() {
	var bitmapData = new flixel_system_GraphicVirtualInput(0,0);
	Reflect.setProperty(bitmapData,"width",399);
	Reflect.setProperty(bitmapData,"height",183);
	var graphic = flixel_graphics_FlxGraphic.fromBitmapData(bitmapData);
	return flixel_graphics_frames_FlxAtlasFrames.fromSpriteSheetPacker(graphic,Std.string(new flixel_system_VirtualInputData()));
};
var flixel_system_FlxBGSprite = function() {
	flixel_FlxSprite.call(this);
	this.makeGraphic(1,1,-1,true,flixel_FlxG.bitmap.getUniqueKey("bg_graphic_"));
	this.scrollFactor.set();
};
$hxClasses["flixel.system.FlxBGSprite"] = flixel_system_FlxBGSprite;
flixel_system_FlxBGSprite.__name__ = "flixel.system.FlxBGSprite";
flixel_system_FlxBGSprite.__super__ = flixel_FlxSprite;
flixel_system_FlxBGSprite.prototype = $extend(flixel_FlxSprite.prototype,{
	draw: function() {
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(!camera.visible || !camera.exists) {
				continue;
			}
			this._matrix.identity();
			this._matrix.scale(camera.viewWidth,camera.viewHeight);
			camera.drawPixels(this.frame,null,this._matrix,this.colorTransform);
		}
	}
	,__class__: flixel_system_FlxBGSprite
});
var flixel_system__$FlxBasePreloader_DefaultPreloader = function() {
	openfl_display_Sprite.call(this);
	this.addEventListener("addedToStage",$bind(this,this.onAddedToStage));
};
$hxClasses["flixel.system._FlxBasePreloader.DefaultPreloader"] = flixel_system__$FlxBasePreloader_DefaultPreloader;
flixel_system__$FlxBasePreloader_DefaultPreloader.__name__ = "flixel.system._FlxBasePreloader.DefaultPreloader";
flixel_system__$FlxBasePreloader_DefaultPreloader.__super__ = openfl_display_Sprite;
flixel_system__$FlxBasePreloader_DefaultPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	onAddedToStage: function(_) {
		this.removeEventListener("addedToStage",$bind(this,this.onAddedToStage));
		this.onInit();
		this.onUpdate(this.get_loaderInfo().bytesLoaded,this.get_loaderInfo().bytesTotal);
		this.addEventListener("progress",$bind(this,this.onProgress));
		this.addEventListener("complete",$bind(this,this.onComplete));
	}
	,onComplete: function(event) {
		event.preventDefault();
		this.removeEventListener("progress",$bind(this,this.onProgress));
		this.removeEventListener("complete",$bind(this,this.onComplete));
		this.onLoaded();
	}
	,onProgress: function(event) {
		this.onUpdate(event.bytesLoaded | 0,event.bytesTotal | 0);
	}
	,onInit: function() {
	}
	,onLoaded: function() {
		this.dispatchEvent(new openfl_events_Event("unload"));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = 0.0;
		if(bytesTotal > 0) {
			percentLoaded = bytesLoaded / bytesTotal;
			if(percentLoaded > 1) {
				percentLoaded = 1;
			}
		}
	}
	,__class__: flixel_system__$FlxBasePreloader_DefaultPreloader
});
var flixel_system_FlxBasePreloader = function(MinDisplayTime,AllowedURLs) {
	if(MinDisplayTime == null) {
		MinDisplayTime = 0;
	}
	this._destroyed = false;
	this._urlChecked = false;
	this._loaded = false;
	this._percent = 0;
	this.siteLockBodyText = "It appears the website you are using is hosting an unauthorized copy of this game. " + "Storage or redistribution of this content, without the express permission of the " + "developer or other copyright holder, is prohibited under copyright law.\n\n" + "Thank you for your interest in this game! Please support the developer by " + "visiting the following website to play the game:";
	this.siteLockTitleText = "Sorry.";
	this.siteLockURLIndex = 0;
	this.minDisplayTime = 0;
	flixel_system__$FlxBasePreloader_DefaultPreloader.call(this);
	this.minDisplayTime = MinDisplayTime;
	if(AllowedURLs != null) {
		this.allowedURLs = AllowedURLs;
	} else {
		this.allowedURLs = [];
	}
	this._startTime = new Date().getTime();
};
$hxClasses["flixel.system.FlxBasePreloader"] = flixel_system_FlxBasePreloader;
flixel_system_FlxBasePreloader.__name__ = "flixel.system.FlxBasePreloader";
flixel_system_FlxBasePreloader.__super__ = flixel_system__$FlxBasePreloader_DefaultPreloader;
flixel_system_FlxBasePreloader.prototype = $extend(flixel_system__$FlxBasePreloader_DefaultPreloader.prototype,{
	minDisplayTime: null
	,allowedURLs: null
	,siteLockURLIndex: null
	,siteLockTitleText: null
	,siteLockBodyText: null
	,_percent: null
	,_width: null
	,_height: null
	,_loaded: null
	,_urlChecked: null
	,_destroyed: null
	,_startTime: null
	,create: function() {
	}
	,onInit: function() {
		flixel_system__$FlxBasePreloader_DefaultPreloader.prototype.onInit.call(this);
		openfl_Lib.get_current().stage.set_scaleMode(2);
		openfl_Lib.get_current().stage.align = 6;
		this.create();
		this.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
		this.checkSiteLock();
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		this._percent = bytesTotal != 0 ? bytesLoaded / bytesTotal : 0;
	}
	,onEnterFrame: function(E) {
		var time = new Date().getTime() - this._startTime;
		var min = this.minDisplayTime * 1000;
		var percent = this._percent;
		if(min > 0 && this._percent > time / min) {
			percent = time / min;
		}
		if(!this._destroyed) {
			this.update(percent);
		}
		if(this._loaded && (min <= 0 || time / min >= 1)) {
			this.removeEventListener("enterFrame",$bind(this,this.onEnterFrame));
			flixel_system__$FlxBasePreloader_DefaultPreloader.prototype.onLoaded.call(this);
			this.destroy();
			this._destroyed = true;
		}
	}
	,destroy: function() {
	}
	,update: function(Percent) {
	}
	,onLoaded: function() {
		this._loaded = true;
		this._percent = 1;
	}
	,createBitmap: function(bitmapDataClass,onLoad) {
		var bmp = new openfl_display_Bitmap();
		bmp.set_bitmapData(Type.createInstance(bitmapDataClass,[0,0,true,-1,function(_) {
			onLoad(bmp);
		}]));
		return bmp;
	}
	,loadBitmapData: function(bitmapDataClass,onLoad) {
		return Type.createInstance(bitmapDataClass,[0,0,true,-1,onLoad]);
	}
	,checkSiteLock: function() {
		if(this._urlChecked) {
			return;
		}
		if(!this.isHostUrlAllowed()) {
			this.removeChildren();
			this.removeEventListener("enterFrame",$bind(this,this.onEnterFrame));
			this.createSiteLockFailureScreen();
		} else {
			this._urlChecked = true;
		}
	}
	,createSiteLockFailureScreen: function() {
		this.addChild(this.createSiteLockFailureBackground(16777215,15066597));
		this.addChild(this.createSiteLockFailureIcon(15066597,0.9));
		this.addChild(this.createSiteLockFailureText(30));
	}
	,createSiteLockFailureBackground: function(innerColor,outerColor) {
		var shape = new openfl_display_Shape();
		var graphics = shape.get_graphics();
		graphics.clear();
		var fillMatrix = new openfl_geom_Matrix();
		fillMatrix.createGradientBox(1,1,0,-0.5,-0.5);
		var scaling = Math.max(this.stage.stageWidth,this.stage.stageHeight);
		fillMatrix.scale(scaling,scaling);
		fillMatrix.translate(0.5 * this.stage.stageWidth,0.5 * this.stage.stageHeight);
		graphics.beginGradientFill(1,[innerColor,outerColor],[1,1],[0,255],fillMatrix);
		graphics.drawRect(0,0,this.stage.stageWidth,this.stage.stageHeight);
		graphics.endFill();
		return shape;
	}
	,createSiteLockFailureIcon: function(color,scale) {
		var shape = new openfl_display_Shape();
		var graphics = shape.get_graphics();
		graphics.clear();
		graphics.beginFill(color);
		var array = [1,6,2,2,2,6,6,2,2,2,6,1,6,2,6,2,6,2,6,1,6,6,2,2,2,6,6];
		var vector = openfl_Vector.toIntVector(null);
		var _g = 0;
		var _g1 = array.length;
		while(_g < _g1) {
			var i = _g++;
			vector.set(i,array[i]);
		}
		var tmp = vector;
		var array = [120.0,0,164,0,200,35,200,79,200,130,160,130,160,79,160,57,142,40,120,40,97,40,79,57,79,79,80,130,40,130,40,79,40,35,75,0,120,0,220,140,231,140,240,148,240,160,240,300,240,311,231,320,220,320,20,320,8,320,0,311,0,300,0,160,0,148,8,140,20,140,120,190,108,190,100,198,100,210,100,217,104,223,110,227,110,270,130,270,130,227,135,223,140,217,140,210,140,198,131,190,120,190];
		var vector = openfl_Vector.toFloatVector(null);
		var _g = 0;
		var _g1 = array.length;
		while(_g < _g1) {
			var i = _g++;
			vector.set(i,array[i]);
		}
		graphics.drawPath(tmp,vector,1);
		graphics.endFill();
		var transformMatrix = new openfl_geom_Matrix();
		transformMatrix.translate(-0.5 * shape.get_width(),-0.5 * shape.get_height());
		var scaling = scale * Math.min(this.stage.stageWidth / shape.get_width(),this.stage.stageHeight / shape.get_height());
		transformMatrix.scale(scaling,scaling);
		transformMatrix.translate(0.5 * this.stage.stageWidth,0.5 * this.stage.stageHeight);
		shape.get_transform().set_matrix(transformMatrix);
		return shape;
	}
	,createSiteLockFailureText: function(margin) {
		var sprite = new openfl_display_Sprite();
		var bounds = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight);
		bounds.inflate(-margin,-margin);
		var titleText = new openfl_text_TextField();
		var titleTextFormat = new openfl_text_TextFormat("_sans",33,3355443,true);
		titleTextFormat.align = 3;
		titleText.set_defaultTextFormat(titleTextFormat);
		titleText.set_selectable(false);
		titleText.set_width(bounds.width);
		titleText.set_text(this.siteLockTitleText);
		var bodyText = new openfl_text_TextField();
		var bodyTextFormat = new openfl_text_TextFormat("_sans",22,3355443);
		bodyTextFormat.align = 2;
		bodyText.set_defaultTextFormat(bodyTextFormat);
		bodyText.set_multiline(true);
		bodyText.set_wordWrap(true);
		bodyText.set_selectable(false);
		bodyText.set_width(bounds.width);
		bodyText.set_text(this.siteLockBodyText);
		var hyperlinkText = new openfl_text_TextField();
		var hyperlinkTextFormat = new openfl_text_TextFormat("_sans",22,7247820,true,false,true);
		hyperlinkTextFormat.align = 0;
		hyperlinkTextFormat.url = this.allowedURLs[this.siteLockURLIndex];
		hyperlinkText.set_defaultTextFormat(hyperlinkTextFormat);
		hyperlinkText.set_selectable(true);
		hyperlinkText.set_width(bounds.width);
		hyperlinkText.set_text(this.allowedURLs[this.siteLockURLIndex]);
		this.adjustSiteLockTextFields(titleText,bodyText,hyperlinkText);
		var gutterSize = 4;
		titleText.set_height(titleText.get_textHeight() + gutterSize);
		bodyText.set_height(bodyText.get_textHeight() + gutterSize);
		hyperlinkText.set_height(hyperlinkText.get_textHeight() + gutterSize);
		titleText.set_x(bodyText.set_x(hyperlinkText.set_x(bounds.get_left())));
		titleText.set_y(bounds.get_top());
		bodyText.set_y(titleText.get_y() + 2.0 * titleText.get_height());
		hyperlinkText.set_y(bodyText.get_y() + bodyText.get_height() + hyperlinkText.get_height());
		sprite.addChild(titleText);
		sprite.addChild(bodyText);
		sprite.addChild(hyperlinkText);
		return sprite;
	}
	,adjustSiteLockTextFields: function(titleText,bodyText,hyperlinkText) {
	}
	,goToMyURL: function(e) {
		if(this.allowedURLs[this.siteLockURLIndex] != "localhost") {
			var URL1 = this.allowedURLs[this.siteLockURLIndex];
			var prefix = "";
			if(!new EReg("^https?://","").match(URL1)) {
				prefix = "http://";
			}
			openfl_Lib.getURL(new openfl_net_URLRequest(prefix + URL1),"_blank");
		} else {
			openfl_Lib.getURL(new openfl_net_URLRequest(this.allowedURLs[this.siteLockURLIndex]));
		}
	}
	,isHostUrlAllowed: function() {
		if(this.allowedURLs.length == 0) {
			return true;
		}
		var homeURL = $global.location.href;
		var homeDomain = flixel_util_FlxStringUtil.getDomain(homeURL);
		var _g = 0;
		var _g1 = this.allowedURLs;
		while(_g < _g1.length) {
			var allowedURL = _g1[_g];
			++_g;
			var allowedDomain = flixel_util_FlxStringUtil.getDomain(allowedURL);
			if(allowedDomain == homeDomain) {
				return true;
			}
		}
		return false;
	}
	,__class__: flixel_system_FlxBasePreloader
});
var flixel_system_FlxLinkedList = function() {
	this.exists = true;
};
$hxClasses["flixel.system.FlxLinkedList"] = flixel_system_FlxLinkedList;
flixel_system_FlxLinkedList.__name__ = "flixel.system.FlxLinkedList";
flixel_system_FlxLinkedList.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_system_FlxLinkedList._cachedListsHead = null;
flixel_system_FlxLinkedList.recycle = function() {
	if(flixel_system_FlxLinkedList._cachedListsHead != null) {
		var cachedList = flixel_system_FlxLinkedList._cachedListsHead;
		flixel_system_FlxLinkedList._cachedListsHead = flixel_system_FlxLinkedList._cachedListsHead.next;
		flixel_system_FlxLinkedList._NUM_CACHED_FLX_LIST--;
		cachedList.exists = true;
		cachedList.next = null;
		return cachedList;
	} else {
		return new flixel_system_FlxLinkedList();
	}
};
flixel_system_FlxLinkedList.clearCache = function() {
	while(flixel_system_FlxLinkedList._cachedListsHead != null) {
		var node = flixel_system_FlxLinkedList._cachedListsHead;
		flixel_system_FlxLinkedList._cachedListsHead = flixel_system_FlxLinkedList._cachedListsHead.next;
		node.object = null;
		node.next = null;
	}
	flixel_system_FlxLinkedList._NUM_CACHED_FLX_LIST = 0;
};
flixel_system_FlxLinkedList.prototype = {
	object: null
	,next: null
	,exists: null
	,destroy: function() {
		if(!this.exists) {
			return;
		}
		this.object = null;
		if(this.next != null) {
			this.next.destroy();
		}
		this.exists = false;
		this.next = flixel_system_FlxLinkedList._cachedListsHead;
		flixel_system_FlxLinkedList._cachedListsHead = this;
		flixel_system_FlxLinkedList._NUM_CACHED_FLX_LIST++;
	}
	,__class__: flixel_system_FlxLinkedList
};
var flixel_system__$FlxPreloader_GraphicLogoLight = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system__$FlxPreloader_GraphicLogoLight.preload != null) {
		this.__fromImage(flixel_system__$FlxPreloader_GraphicLogoLight.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system__$FlxPreloader_GraphicLogoLight.resourceName),flixel_system__$FlxPreloader_GraphicLogoLight.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system__$FlxPreloader_GraphicLogoLight.preload == null) {
				flixel_system__$FlxPreloader_GraphicLogoLight.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system._FlxPreloader.GraphicLogoLight"] = flixel_system__$FlxPreloader_GraphicLogoLight;
flixel_system__$FlxPreloader_GraphicLogoLight.__name__ = "flixel.system._FlxPreloader.GraphicLogoLight";
flixel_system__$FlxPreloader_GraphicLogoLight.preload = null;
flixel_system__$FlxPreloader_GraphicLogoLight.__super__ = openfl_display_BitmapData;
flixel_system__$FlxPreloader_GraphicLogoLight.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system__$FlxPreloader_GraphicLogoLight
});
var flixel_system__$FlxPreloader_GraphicLogoCorners = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system__$FlxPreloader_GraphicLogoCorners.preload != null) {
		this.__fromImage(flixel_system__$FlxPreloader_GraphicLogoCorners.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system__$FlxPreloader_GraphicLogoCorners.resourceName),flixel_system__$FlxPreloader_GraphicLogoCorners.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system__$FlxPreloader_GraphicLogoCorners.preload == null) {
				flixel_system__$FlxPreloader_GraphicLogoCorners.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system._FlxPreloader.GraphicLogoCorners"] = flixel_system__$FlxPreloader_GraphicLogoCorners;
flixel_system__$FlxPreloader_GraphicLogoCorners.__name__ = "flixel.system._FlxPreloader.GraphicLogoCorners";
flixel_system__$FlxPreloader_GraphicLogoCorners.preload = null;
flixel_system__$FlxPreloader_GraphicLogoCorners.__super__ = openfl_display_BitmapData;
flixel_system__$FlxPreloader_GraphicLogoCorners.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system__$FlxPreloader_GraphicLogoCorners
});
var flixel_system_FlxPreloader = function(MinDisplayTime,AllowedURLs) {
	if(MinDisplayTime == null) {
		MinDisplayTime = 0;
	}
	flixel_system_FlxBasePreloader.call(this,MinDisplayTime,AllowedURLs);
};
$hxClasses["flixel.system.FlxPreloader"] = flixel_system_FlxPreloader;
flixel_system_FlxPreloader.__name__ = "flixel.system.FlxPreloader";
flixel_system_FlxPreloader.__super__ = flixel_system_FlxBasePreloader;
flixel_system_FlxPreloader.prototype = $extend(flixel_system_FlxBasePreloader.prototype,{
	_buffer: null
	,_bmpBar: null
	,_text: null
	,_logo: null
	,_logoGlow: null
	,create: function() {
		var _gthis = this;
		this._buffer = new openfl_display_Sprite();
		this._buffer.set_scaleX(this._buffer.set_scaleY(2));
		this.addChild(this._buffer);
		this._width = openfl_Lib.get_current().stage.stageWidth / this._buffer.get_scaleX() | 0;
		this._height = openfl_Lib.get_current().stage.stageHeight / this._buffer.get_scaleY() | 0;
		this._buffer.addChild(new openfl_display_Bitmap(new openfl_display_BitmapData(this._width,this._height,false,13406)));
		var logoLight = this.createBitmap(flixel_system__$FlxPreloader_GraphicLogoLight,function(logoLight) {
			logoLight.set_width(logoLight.set_height(_gthis._height));
			logoLight.set_x((_gthis._width - logoLight.get_width()) / 2);
		});
		logoLight.smoothing = true;
		this._buffer.addChild(logoLight);
		this._bmpBar = new openfl_display_Bitmap(new openfl_display_BitmapData(1,7,false,6253311));
		this._bmpBar.set_x(4);
		this._bmpBar.set_y(this._height - 11);
		this._buffer.addChild(this._bmpBar);
		this._text = new openfl_text_TextField();
		this._text.set_defaultTextFormat(new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEFAULT,8,6253311));
		this._text.set_embedFonts(true);
		this._text.set_selectable(false);
		this._text.set_multiline(false);
		this._text.set_x(2);
		this._text.set_y(this._bmpBar.get_y() - 11);
		this._text.set_width(200);
		this._buffer.addChild(this._text);
		this._logo = new openfl_display_Sprite();
		flixel_system_FlxAssets.drawLogo(this._logo.get_graphics());
		this._logo.set_scaleX(this._logo.set_scaleY(this._height / 8 * 0.04));
		this._logo.set_x((this._width - this._logo.get_width()) / 2);
		this._logo.set_y((this._height - this._logo.get_height()) / 2);
		this._buffer.addChild(this._logo);
		this._logoGlow = new openfl_display_Sprite();
		flixel_system_FlxAssets.drawLogo(this._logoGlow.get_graphics());
		this._logoGlow.set_blendMode(12);
		this._logoGlow.set_scaleX(this._logoGlow.set_scaleY(this._height / 8 * 0.04));
		this._logoGlow.set_x((this._width - this._logoGlow.get_width()) / 2);
		this._logoGlow.set_y((this._height - this._logoGlow.get_height()) / 2);
		this._buffer.addChild(this._logoGlow);
		var corners = this.createBitmap(flixel_system__$FlxPreloader_GraphicLogoCorners,function(corners) {
			corners.set_width(_gthis._width);
			corners.set_height(_gthis.get_height());
		});
		corners.smoothing = true;
		this._buffer.addChild(corners);
		var bitmap = new openfl_display_Bitmap(new openfl_display_BitmapData(this._width,this._height,false,16777215));
		var i = 0;
		var j = 0;
		while(i < this._height) {
			j = 0;
			while(j < this._width) bitmap.get_bitmapData().setPixel(j++,i,0);
			i += 2;
		}
		bitmap.set_blendMode(11);
		bitmap.set_alpha(0.25);
		this._buffer.addChild(bitmap);
		flixel_system_FlxBasePreloader.prototype.create.call(this);
	}
	,destroy: function() {
		if(this._buffer != null) {
			this.removeChild(this._buffer);
		}
		this._buffer = null;
		this._bmpBar = null;
		this._text = null;
		this._logo = null;
		this._logoGlow = null;
		flixel_system_FlxBasePreloader.prototype.destroy.call(this);
	}
	,update: function(Percent) {
		this._bmpBar.set_scaleX(Percent * (this._width - 8));
		this._text.set_text(Std.string(flixel_FlxG.VERSION) + " " + (Percent * 100 | 0) + "%");
		if(Percent < 0.1) {
			this._logoGlow.set_alpha(0);
			this._logo.set_alpha(0);
		} else if(Percent < 0.15) {
			this._logoGlow.set_alpha(Math.random());
			this._logo.set_alpha(0);
		} else if(Percent < 0.2) {
			this._logoGlow.set_alpha(0);
			this._logo.set_alpha(0);
		} else if(Percent < 0.25) {
			this._logoGlow.set_alpha(0);
			this._logo.set_alpha(Math.random());
		} else if(Percent < 0.7) {
			this._logoGlow.set_alpha((Percent - 0.45) / 0.45);
			this._logo.set_alpha(1);
		} else if(Percent > 0.8 && Percent < 0.9) {
			this._logoGlow.set_alpha(1 - (Percent - 0.8) / 0.1);
			this._logo.set_alpha(0);
		} else if(Percent > 0.9) {
			this._buffer.set_alpha(1 - (Percent - 0.9) / 0.1);
		}
	}
	,__class__: flixel_system_FlxPreloader
});
var flixel_system_FlxQuadTree = function(X,Y,Width,Height,Parent) {
	flixel_math_FlxRect.call(this);
	var X1 = X;
	var Y1 = Y;
	var Width1 = Width;
	var Height1 = Height;
	if(Height1 == null) {
		Height1 = 0;
	}
	if(Width1 == null) {
		Width1 = 0;
	}
	if(Y1 == null) {
		Y1 = 0;
	}
	if(X1 == null) {
		X1 = 0;
	}
	this.x = X1;
	this.y = Y1;
	this.width = Width1;
	this.height = Height1;
	this.reset(X,Y,Width,Height,Parent);
};
$hxClasses["flixel.system.FlxQuadTree"] = flixel_system_FlxQuadTree;
flixel_system_FlxQuadTree.__name__ = "flixel.system.FlxQuadTree";
flixel_system_FlxQuadTree.divisions = null;
flixel_system_FlxQuadTree._min = null;
flixel_system_FlxQuadTree._object = null;
flixel_system_FlxQuadTree._objectLeftEdge = null;
flixel_system_FlxQuadTree._objectTopEdge = null;
flixel_system_FlxQuadTree._objectRightEdge = null;
flixel_system_FlxQuadTree._objectBottomEdge = null;
flixel_system_FlxQuadTree._list = null;
flixel_system_FlxQuadTree._useBothLists = null;
flixel_system_FlxQuadTree._processingCallback = null;
flixel_system_FlxQuadTree._notifyCallback = null;
flixel_system_FlxQuadTree._iterator = null;
flixel_system_FlxQuadTree._objectHullX = null;
flixel_system_FlxQuadTree._objectHullY = null;
flixel_system_FlxQuadTree._objectHullWidth = null;
flixel_system_FlxQuadTree._objectHullHeight = null;
flixel_system_FlxQuadTree._checkObjectHullX = null;
flixel_system_FlxQuadTree._checkObjectHullY = null;
flixel_system_FlxQuadTree._checkObjectHullWidth = null;
flixel_system_FlxQuadTree._checkObjectHullHeight = null;
flixel_system_FlxQuadTree._cachedTreesHead = null;
flixel_system_FlxQuadTree.recycle = function(X,Y,Width,Height,Parent) {
	if(flixel_system_FlxQuadTree._cachedTreesHead != null) {
		var cachedTree = flixel_system_FlxQuadTree._cachedTreesHead;
		flixel_system_FlxQuadTree._cachedTreesHead = flixel_system_FlxQuadTree._cachedTreesHead.next;
		flixel_system_FlxQuadTree._NUM_CACHED_QUAD_TREES--;
		cachedTree.reset(X,Y,Width,Height,Parent);
		return cachedTree;
	} else {
		return new flixel_system_FlxQuadTree(X,Y,Width,Height,Parent);
	}
};
flixel_system_FlxQuadTree.clearCache = function() {
	while(flixel_system_FlxQuadTree._cachedTreesHead != null) {
		var node = flixel_system_FlxQuadTree._cachedTreesHead;
		flixel_system_FlxQuadTree._cachedTreesHead = flixel_system_FlxQuadTree._cachedTreesHead.next;
		node.next = null;
	}
	flixel_system_FlxQuadTree._NUM_CACHED_QUAD_TREES = 0;
};
flixel_system_FlxQuadTree.__super__ = flixel_math_FlxRect;
flixel_system_FlxQuadTree.prototype = $extend(flixel_math_FlxRect.prototype,{
	exists: null
	,_canSubdivide: null
	,_headA: null
	,_tailA: null
	,_headB: null
	,_tailB: null
	,_northWestTree: null
	,_northEastTree: null
	,_southEastTree: null
	,_southWestTree: null
	,_leftEdge: null
	,_rightEdge: null
	,_topEdge: null
	,_bottomEdge: null
	,_halfWidth: null
	,_halfHeight: null
	,_midpointX: null
	,_midpointY: null
	,next: null
	,reset: function(X,Y,Width,Height,Parent) {
		this.exists = true;
		var X1 = X;
		var Y1 = Y;
		var Width1 = Width;
		var Height1 = Height;
		if(Height1 == null) {
			Height1 = 0;
		}
		if(Width1 == null) {
			Width1 = 0;
		}
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		this.x = X1;
		this.y = Y1;
		this.width = Width1;
		this.height = Height1;
		this._headA = this._tailA = flixel_system_FlxLinkedList.recycle();
		this._headB = this._tailB = flixel_system_FlxLinkedList.recycle();
		if(Parent != null) {
			var iterator;
			var ot;
			if(Parent._headA.object != null) {
				iterator = Parent._headA;
				while(iterator != null) {
					if(this._tailA.object != null) {
						ot = this._tailA;
						this._tailA = flixel_system_FlxLinkedList.recycle();
						ot.next = this._tailA;
					}
					this._tailA.object = iterator.object;
					iterator = iterator.next;
				}
			}
			if(Parent._headB.object != null) {
				iterator = Parent._headB;
				while(iterator != null) {
					if(this._tailB.object != null) {
						ot = this._tailB;
						this._tailB = flixel_system_FlxLinkedList.recycle();
						ot.next = this._tailB;
					}
					this._tailB.object = iterator.object;
					iterator = iterator.next;
				}
			}
		} else {
			flixel_system_FlxQuadTree._min = Math.floor((this.width + this.height) / (2 * flixel_system_FlxQuadTree.divisions));
		}
		this._canSubdivide = this.width > flixel_system_FlxQuadTree._min || this.height > flixel_system_FlxQuadTree._min;
		this._northWestTree = null;
		this._northEastTree = null;
		this._southEastTree = null;
		this._southWestTree = null;
		this._leftEdge = this.x;
		this._rightEdge = this.x + this.width;
		this._halfWidth = this.width / 2;
		this._midpointX = this._leftEdge + this._halfWidth;
		this._topEdge = this.y;
		this._bottomEdge = this.y + this.height;
		this._halfHeight = this.height / 2;
		this._midpointY = this._topEdge + this._halfHeight;
	}
	,destroy: function() {
		this._headA = flixel_util_FlxDestroyUtil.destroy(this._headA);
		this._headB = flixel_util_FlxDestroyUtil.destroy(this._headB);
		this._tailA = flixel_util_FlxDestroyUtil.destroy(this._tailA);
		this._tailB = flixel_util_FlxDestroyUtil.destroy(this._tailB);
		this._northWestTree = flixel_util_FlxDestroyUtil.destroy(this._northWestTree);
		this._northEastTree = flixel_util_FlxDestroyUtil.destroy(this._northEastTree);
		this._southWestTree = flixel_util_FlxDestroyUtil.destroy(this._southWestTree);
		this._southEastTree = flixel_util_FlxDestroyUtil.destroy(this._southEastTree);
		flixel_system_FlxQuadTree._object = null;
		flixel_system_FlxQuadTree._processingCallback = null;
		flixel_system_FlxQuadTree._notifyCallback = null;
		this.exists = false;
		this.next = flixel_system_FlxQuadTree._cachedTreesHead;
		flixel_system_FlxQuadTree._cachedTreesHead = this;
		flixel_system_FlxQuadTree._NUM_CACHED_QUAD_TREES++;
		flixel_math_FlxRect.prototype.destroy.call(this);
	}
	,load: function(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,ProcessCallback) {
		this.add(ObjectOrGroup1,0);
		if(ObjectOrGroup2 != null) {
			this.add(ObjectOrGroup2,1);
			flixel_system_FlxQuadTree._useBothLists = true;
		} else {
			flixel_system_FlxQuadTree._useBothLists = false;
		}
		flixel_system_FlxQuadTree._notifyCallback = NotifyCallback;
		flixel_system_FlxQuadTree._processingCallback = ProcessCallback;
	}
	,add: function(ObjectOrGroup,list) {
		flixel_system_FlxQuadTree._list = list;
		var group = flixel_group_FlxTypedGroup.resolveGroup(ObjectOrGroup);
		if(group != null) {
			var i = 0;
			var basic;
			var members = group.members;
			var l = group.length;
			while(i < l) {
				basic = members[i++];
				if(basic != null && basic.exists) {
					group = flixel_group_FlxTypedGroup.resolveGroup(basic);
					if(group != null) {
						this.add(group,list);
					} else {
						flixel_system_FlxQuadTree._object = basic;
						if(flixel_system_FlxQuadTree._object.exists && flixel_system_FlxQuadTree._object.allowCollisions != 0) {
							flixel_system_FlxQuadTree._objectLeftEdge = flixel_system_FlxQuadTree._object.x;
							flixel_system_FlxQuadTree._objectTopEdge = flixel_system_FlxQuadTree._object.y;
							flixel_system_FlxQuadTree._objectRightEdge = flixel_system_FlxQuadTree._object.x + flixel_system_FlxQuadTree._object.get_width();
							flixel_system_FlxQuadTree._objectBottomEdge = flixel_system_FlxQuadTree._object.y + flixel_system_FlxQuadTree._object.get_height();
							this.addObject();
						}
					}
				}
			}
		} else {
			flixel_system_FlxQuadTree._object = ObjectOrGroup;
			if(flixel_system_FlxQuadTree._object.exists && flixel_system_FlxQuadTree._object.allowCollisions != 0) {
				flixel_system_FlxQuadTree._objectLeftEdge = flixel_system_FlxQuadTree._object.x;
				flixel_system_FlxQuadTree._objectTopEdge = flixel_system_FlxQuadTree._object.y;
				flixel_system_FlxQuadTree._objectRightEdge = flixel_system_FlxQuadTree._object.x + flixel_system_FlxQuadTree._object.get_width();
				flixel_system_FlxQuadTree._objectBottomEdge = flixel_system_FlxQuadTree._object.y + flixel_system_FlxQuadTree._object.get_height();
				this.addObject();
			}
		}
	}
	,addObject: function() {
		if(!this._canSubdivide || this._leftEdge >= flixel_system_FlxQuadTree._objectLeftEdge && this._rightEdge <= flixel_system_FlxQuadTree._objectRightEdge && this._topEdge >= flixel_system_FlxQuadTree._objectTopEdge && this._bottomEdge <= flixel_system_FlxQuadTree._objectBottomEdge) {
			this.addToList();
			return;
		}
		if(flixel_system_FlxQuadTree._objectLeftEdge > this._leftEdge && flixel_system_FlxQuadTree._objectRightEdge < this._midpointX) {
			if(flixel_system_FlxQuadTree._objectTopEdge > this._topEdge && flixel_system_FlxQuadTree._objectBottomEdge < this._midpointY) {
				if(this._northWestTree == null) {
					this._northWestTree = flixel_system_FlxQuadTree.recycle(this._leftEdge,this._topEdge,this._halfWidth,this._halfHeight,this);
				}
				this._northWestTree.addObject();
				return;
			}
			if(flixel_system_FlxQuadTree._objectTopEdge > this._midpointY && flixel_system_FlxQuadTree._objectBottomEdge < this._bottomEdge) {
				if(this._southWestTree == null) {
					this._southWestTree = flixel_system_FlxQuadTree.recycle(this._leftEdge,this._midpointY,this._halfWidth,this._halfHeight,this);
				}
				this._southWestTree.addObject();
				return;
			}
		}
		if(flixel_system_FlxQuadTree._objectLeftEdge > this._midpointX && flixel_system_FlxQuadTree._objectRightEdge < this._rightEdge) {
			if(flixel_system_FlxQuadTree._objectTopEdge > this._topEdge && flixel_system_FlxQuadTree._objectBottomEdge < this._midpointY) {
				if(this._northEastTree == null) {
					this._northEastTree = flixel_system_FlxQuadTree.recycle(this._midpointX,this._topEdge,this._halfWidth,this._halfHeight,this);
				}
				this._northEastTree.addObject();
				return;
			}
			if(flixel_system_FlxQuadTree._objectTopEdge > this._midpointY && flixel_system_FlxQuadTree._objectBottomEdge < this._bottomEdge) {
				if(this._southEastTree == null) {
					this._southEastTree = flixel_system_FlxQuadTree.recycle(this._midpointX,this._midpointY,this._halfWidth,this._halfHeight,this);
				}
				this._southEastTree.addObject();
				return;
			}
		}
		if(flixel_system_FlxQuadTree._objectRightEdge > this._leftEdge && flixel_system_FlxQuadTree._objectLeftEdge < this._midpointX && flixel_system_FlxQuadTree._objectBottomEdge > this._topEdge && flixel_system_FlxQuadTree._objectTopEdge < this._midpointY) {
			if(this._northWestTree == null) {
				this._northWestTree = flixel_system_FlxQuadTree.recycle(this._leftEdge,this._topEdge,this._halfWidth,this._halfHeight,this);
			}
			this._northWestTree.addObject();
		}
		if(flixel_system_FlxQuadTree._objectRightEdge > this._midpointX && flixel_system_FlxQuadTree._objectLeftEdge < this._rightEdge && flixel_system_FlxQuadTree._objectBottomEdge > this._topEdge && flixel_system_FlxQuadTree._objectTopEdge < this._midpointY) {
			if(this._northEastTree == null) {
				this._northEastTree = flixel_system_FlxQuadTree.recycle(this._midpointX,this._topEdge,this._halfWidth,this._halfHeight,this);
			}
			this._northEastTree.addObject();
		}
		if(flixel_system_FlxQuadTree._objectRightEdge > this._midpointX && flixel_system_FlxQuadTree._objectLeftEdge < this._rightEdge && flixel_system_FlxQuadTree._objectBottomEdge > this._midpointY && flixel_system_FlxQuadTree._objectTopEdge < this._bottomEdge) {
			if(this._southEastTree == null) {
				this._southEastTree = flixel_system_FlxQuadTree.recycle(this._midpointX,this._midpointY,this._halfWidth,this._halfHeight,this);
			}
			this._southEastTree.addObject();
		}
		if(flixel_system_FlxQuadTree._objectRightEdge > this._leftEdge && flixel_system_FlxQuadTree._objectLeftEdge < this._midpointX && flixel_system_FlxQuadTree._objectBottomEdge > this._midpointY && flixel_system_FlxQuadTree._objectTopEdge < this._bottomEdge) {
			if(this._southWestTree == null) {
				this._southWestTree = flixel_system_FlxQuadTree.recycle(this._leftEdge,this._midpointY,this._halfWidth,this._halfHeight,this);
			}
			this._southWestTree.addObject();
		}
	}
	,addToList: function() {
		var ot;
		if(flixel_system_FlxQuadTree._list == 0) {
			if(this._tailA.object != null) {
				ot = this._tailA;
				this._tailA = flixel_system_FlxLinkedList.recycle();
				ot.next = this._tailA;
			}
			this._tailA.object = flixel_system_FlxQuadTree._object;
		} else {
			if(this._tailB.object != null) {
				ot = this._tailB;
				this._tailB = flixel_system_FlxLinkedList.recycle();
				ot.next = this._tailB;
			}
			this._tailB.object = flixel_system_FlxQuadTree._object;
		}
		if(!this._canSubdivide) {
			return;
		}
		if(this._northWestTree != null) {
			this._northWestTree.addToList();
		}
		if(this._northEastTree != null) {
			this._northEastTree.addToList();
		}
		if(this._southEastTree != null) {
			this._southEastTree.addToList();
		}
		if(this._southWestTree != null) {
			this._southWestTree.addToList();
		}
	}
	,execute: function() {
		var overlapProcessed = false;
		if(this._headA.object != null) {
			var iterator = this._headA;
			while(iterator != null) {
				flixel_system_FlxQuadTree._object = iterator.object;
				if(flixel_system_FlxQuadTree._useBothLists) {
					flixel_system_FlxQuadTree._iterator = this._headB;
				} else {
					flixel_system_FlxQuadTree._iterator = iterator.next;
				}
				if(flixel_system_FlxQuadTree._object != null && flixel_system_FlxQuadTree._object.exists && flixel_system_FlxQuadTree._object.allowCollisions > 0 && flixel_system_FlxQuadTree._iterator != null && flixel_system_FlxQuadTree._iterator.object != null && this.overlapNode()) {
					overlapProcessed = true;
				}
				iterator = iterator.next;
			}
		}
		if(this._northWestTree != null && this._northWestTree.execute()) {
			overlapProcessed = true;
		}
		if(this._northEastTree != null && this._northEastTree.execute()) {
			overlapProcessed = true;
		}
		if(this._southEastTree != null && this._southEastTree.execute()) {
			overlapProcessed = true;
		}
		if(this._southWestTree != null && this._southWestTree.execute()) {
			overlapProcessed = true;
		}
		return overlapProcessed;
	}
	,overlapNode: function() {
		flixel_system_FlxQuadTree._objectHullX = flixel_system_FlxQuadTree._object.x < flixel_system_FlxQuadTree._object.last.x ? flixel_system_FlxQuadTree._object.x : flixel_system_FlxQuadTree._object.last.x;
		flixel_system_FlxQuadTree._objectHullY = flixel_system_FlxQuadTree._object.y < flixel_system_FlxQuadTree._object.last.y ? flixel_system_FlxQuadTree._object.y : flixel_system_FlxQuadTree._object.last.y;
		flixel_system_FlxQuadTree._objectHullWidth = flixel_system_FlxQuadTree._object.x - flixel_system_FlxQuadTree._object.last.x;
		flixel_system_FlxQuadTree._objectHullWidth = flixel_system_FlxQuadTree._object.get_width() + (flixel_system_FlxQuadTree._objectHullWidth > 0 ? flixel_system_FlxQuadTree._objectHullWidth : -flixel_system_FlxQuadTree._objectHullWidth);
		flixel_system_FlxQuadTree._objectHullHeight = flixel_system_FlxQuadTree._object.y - flixel_system_FlxQuadTree._object.last.y;
		flixel_system_FlxQuadTree._objectHullHeight = flixel_system_FlxQuadTree._object.get_height() + (flixel_system_FlxQuadTree._objectHullHeight > 0 ? flixel_system_FlxQuadTree._objectHullHeight : -flixel_system_FlxQuadTree._objectHullHeight);
		var overlapProcessed = false;
		var checkObject;
		while(flixel_system_FlxQuadTree._iterator != null) {
			checkObject = flixel_system_FlxQuadTree._iterator.object;
			if(flixel_system_FlxQuadTree._object == checkObject || !checkObject.exists || checkObject.allowCollisions <= 0) {
				flixel_system_FlxQuadTree._iterator = flixel_system_FlxQuadTree._iterator.next;
				continue;
			}
			flixel_system_FlxQuadTree._checkObjectHullX = checkObject.x < checkObject.last.x ? checkObject.x : checkObject.last.x;
			flixel_system_FlxQuadTree._checkObjectHullY = checkObject.y < checkObject.last.y ? checkObject.y : checkObject.last.y;
			flixel_system_FlxQuadTree._checkObjectHullWidth = checkObject.x - checkObject.last.x;
			flixel_system_FlxQuadTree._checkObjectHullWidth = checkObject.get_width() + (flixel_system_FlxQuadTree._checkObjectHullWidth > 0 ? flixel_system_FlxQuadTree._checkObjectHullWidth : -flixel_system_FlxQuadTree._checkObjectHullWidth);
			flixel_system_FlxQuadTree._checkObjectHullHeight = checkObject.y - checkObject.last.y;
			flixel_system_FlxQuadTree._checkObjectHullHeight = checkObject.get_height() + (flixel_system_FlxQuadTree._checkObjectHullHeight > 0 ? flixel_system_FlxQuadTree._checkObjectHullHeight : -flixel_system_FlxQuadTree._checkObjectHullHeight);
			if(flixel_system_FlxQuadTree._objectHullX + flixel_system_FlxQuadTree._objectHullWidth > flixel_system_FlxQuadTree._checkObjectHullX && flixel_system_FlxQuadTree._objectHullX < flixel_system_FlxQuadTree._checkObjectHullX + flixel_system_FlxQuadTree._checkObjectHullWidth && flixel_system_FlxQuadTree._objectHullY + flixel_system_FlxQuadTree._objectHullHeight > flixel_system_FlxQuadTree._checkObjectHullY && flixel_system_FlxQuadTree._objectHullY < flixel_system_FlxQuadTree._checkObjectHullY + flixel_system_FlxQuadTree._checkObjectHullHeight) {
				if(flixel_system_FlxQuadTree._processingCallback == null || flixel_system_FlxQuadTree._processingCallback(flixel_system_FlxQuadTree._object,checkObject)) {
					overlapProcessed = true;
					if(flixel_system_FlxQuadTree._notifyCallback != null) {
						flixel_system_FlxQuadTree._notifyCallback(flixel_system_FlxQuadTree._object,checkObject);
					}
				}
			}
			if(flixel_system_FlxQuadTree._iterator != null) {
				flixel_system_FlxQuadTree._iterator = flixel_system_FlxQuadTree._iterator.next;
			}
		}
		return overlapProcessed;
	}
	,__class__: flixel_system_FlxQuadTree
});
var flixel_system_FlxSound = function() {
	this._alreadyPaused = false;
	this._volumeAdjust = 1.0;
	this._length = 0;
	this._time = 0;
	this.loopTime = 0;
	flixel_FlxBasic.call(this);
	this.reset();
};
$hxClasses["flixel.system.FlxSound"] = flixel_system_FlxSound;
flixel_system_FlxSound.__name__ = "flixel.system.FlxSound";
flixel_system_FlxSound.__super__ = flixel_FlxBasic;
flixel_system_FlxSound.prototype = $extend(flixel_FlxBasic.prototype,{
	x: null
	,y: null
	,persist: null
	,name: null
	,artist: null
	,amplitude: null
	,amplitudeLeft: null
	,amplitudeRight: null
	,autoDestroy: null
	,onComplete: null
	,group: null
	,looped: null
	,loopTime: null
	,endTime: null
	,fadeTween: null
	,_sound: null
	,_channel: null
	,_transform: null
	,_paused: null
	,_volume: null
	,_time: null
	,_length: null
	,_volumeAdjust: null
	,_target: null
	,_radius: null
	,_proximityPan: null
	,_alreadyPaused: null
	,reset: function() {
		this.destroy();
		this.x = 0;
		this.y = 0;
		this._time = 0;
		this._paused = false;
		this._volume = 1.0;
		this._volumeAdjust = 1.0;
		this.looped = false;
		this.loopTime = 0.0;
		this.endTime = 0.0;
		this._target = null;
		this._radius = 0;
		this._proximityPan = false;
		this.set_visible(false);
		this.amplitude = 0;
		this.amplitudeLeft = 0;
		this.amplitudeRight = 0;
		this.autoDestroy = false;
		if(this._transform == null) {
			this._transform = new openfl_media_SoundTransform();
		}
		this._transform.pan = 0;
	}
	,destroy: function() {
		this._transform = null;
		this.set_exists(false);
		this.set_active(false);
		this._target = null;
		this.name = null;
		this.artist = null;
		if(this._channel != null) {
			this._channel.removeEventListener("soundComplete",$bind(this,this.stopped));
			this._channel.stop();
			this._channel = null;
		}
		if(this._sound != null) {
			this._sound.removeEventListener("id3",$bind(this,this.gotID3));
			this._sound = null;
		}
		this.onComplete = null;
		flixel_FlxBasic.prototype.destroy.call(this);
	}
	,update: function(elapsed) {
		if(this._channel == null) {
			return;
		}
		this._time = this._channel.get_position();
		var radialMultiplier = 1.0;
		if(this._target != null) {
			var targetPosition = this._target.getPosition();
			var X = this.x;
			var Y = this.y;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var X1 = X;
			var Y1 = Y;
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X1,Y1);
			point._inPool = false;
			var point1 = point;
			point1._weak = true;
			radialMultiplier = targetPosition.distanceTo(point1) / this._radius;
			targetPosition.put();
			var lowerBound = radialMultiplier < 0 ? 0 : radialMultiplier;
			radialMultiplier = 1 - (lowerBound > 1 ? 1 : lowerBound);
			if(this._proximityPan) {
				var d = (this.x - this._target.x) / this._radius;
				var lowerBound = d < -1 ? -1 : d;
				this._transform.pan = lowerBound > 1 ? 1 : lowerBound;
			}
		}
		this._volumeAdjust = radialMultiplier;
		this.updateTransform();
		if(this._transform.volume > 0) {
			this.amplitudeLeft = this._channel.leftPeak / this._transform.volume;
			this.amplitudeRight = this._channel.rightPeak / this._transform.volume;
			this.amplitude = (this.amplitudeLeft + this.amplitudeRight) * 0.5;
		} else {
			this.amplitudeLeft = 0;
			this.amplitudeRight = 0;
			this.amplitude = 0;
		}
		if(this.endTime != null && this._time >= this.endTime) {
			this.stopped();
		}
	}
	,kill: function() {
		flixel_FlxBasic.prototype.kill.call(this);
		this.cleanup(false);
	}
	,loadEmbedded: function(EmbeddedSound,Looped,AutoDestroy,OnComplete) {
		if(AutoDestroy == null) {
			AutoDestroy = false;
		}
		if(Looped == null) {
			Looped = false;
		}
		if(EmbeddedSound == null) {
			return this;
		}
		this.cleanup(true);
		if(((EmbeddedSound) instanceof openfl_media_Sound)) {
			this._sound = EmbeddedSound;
		} else if(js_Boot.__instanceof(EmbeddedSound,Class)) {
			this._sound = Type.createInstance(EmbeddedSound,[]);
		} else if(typeof(EmbeddedSound) == "string") {
			if(openfl_utils_Assets.exists(EmbeddedSound,"SOUND") || openfl_utils_Assets.exists(EmbeddedSound,"MUSIC")) {
				this._sound = openfl_utils_Assets.getSound(EmbeddedSound);
			}
		}
		return this.init(Looped,AutoDestroy,OnComplete);
	}
	,loadStream: function(SoundURL,Looped,AutoDestroy,OnComplete,OnLoad) {
		if(AutoDestroy == null) {
			AutoDestroy = false;
		}
		if(Looped == null) {
			Looped = false;
		}
		var _gthis = this;
		this.cleanup(true);
		this._sound = new openfl_media_Sound();
		this._sound.addEventListener("id3",$bind(this,this.gotID3));
		var loadCallback = null;
		loadCallback = function(e) {
			e.target.removeEventListener(e.type,loadCallback);
			if(openfl_utils_Object.__eq(_gthis._sound,e.target)) {
				_gthis._length = _gthis._sound.get_length();
				if(OnLoad != null) {
					OnLoad();
				}
			}
		};
		this._sound.addEventListener("complete",loadCallback,false,0,true);
		this._sound.load(new openfl_net_URLRequest(SoundURL));
		return this.init(Looped,AutoDestroy,OnComplete);
	}
	,init: function(Looped,AutoDestroy,OnComplete) {
		if(AutoDestroy == null) {
			AutoDestroy = false;
		}
		if(Looped == null) {
			Looped = false;
		}
		this.looped = Looped;
		this.autoDestroy = AutoDestroy;
		this.updateTransform();
		this.set_exists(true);
		this.onComplete = OnComplete;
		this._length = this._sound == null ? 0 : this._sound.get_length();
		this.endTime = this._length;
		return this;
	}
	,proximity: function(X,Y,TargetObject,Radius,Pan) {
		if(Pan == null) {
			Pan = true;
		}
		this.x = X;
		this.y = Y;
		this._target = TargetObject;
		this._radius = Radius;
		this._proximityPan = Pan;
		return this;
	}
	,play: function(ForceRestart,StartTime,EndTime) {
		if(StartTime == null) {
			StartTime = 0.0;
		}
		if(ForceRestart == null) {
			ForceRestart = false;
		}
		if(!this.exists) {
			return this;
		}
		if(ForceRestart) {
			this.cleanup(false,true);
		} else if(this._channel != null) {
			return this;
		}
		if(this._paused) {
			this.resume();
		} else {
			this.startSound(StartTime);
		}
		this.endTime = EndTime;
		return this;
	}
	,resume: function() {
		if(this._paused) {
			this.startSound(this._time);
		}
		return this;
	}
	,pause: function() {
		if(this._channel == null) {
			return this;
		}
		this._time = this._channel.get_position();
		this._paused = true;
		this.cleanup(false,false);
		return this;
	}
	,stop: function() {
		this.cleanup(this.autoDestroy,true);
		return this;
	}
	,fadeOut: function(Duration,To,onComplete) {
		if(To == null) {
			To = 0;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(this.fadeTween != null) {
			this.fadeTween.cancel();
		}
		this.fadeTween = flixel_tweens_FlxTween.num(this._volume,To,Duration,{ onComplete : onComplete},$bind(this,this.volumeTween));
		return this;
	}
	,fadeIn: function(Duration,From,To,onComplete) {
		if(To == null) {
			To = 1;
		}
		if(From == null) {
			From = 0;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(this._channel == null) {
			this.play();
		}
		if(this.fadeTween != null) {
			this.fadeTween.cancel();
		}
		this.fadeTween = flixel_tweens_FlxTween.num(From,To,Duration,{ onComplete : onComplete},$bind(this,this.volumeTween));
		return this;
	}
	,volumeTween: function(f) {
		this.set_volume(f);
	}
	,getActualVolume: function() {
		return this._volume * this._volumeAdjust;
	}
	,setPosition: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.x = X;
		this.y = Y;
	}
	,updateTransform: function() {
		this._transform.volume = (flixel_FlxG.sound.muted ? 0 : 1) * flixel_FlxG.sound.volume * (this.group != null ? this.group.volume : 1) * this._volume * this._volumeAdjust;
		if(this._channel != null) {
			this._channel.set_soundTransform(this._transform);
		}
	}
	,startSound: function(StartTime) {
		if(this._sound == null) {
			return;
		}
		this._time = StartTime;
		this._paused = false;
		this._channel = this._sound.play(this._time,0,this._transform);
		if(this._channel != null) {
			this._channel.addEventListener("soundComplete",$bind(this,this.stopped));
			this.set_active(true);
		} else {
			this.set_exists(false);
			this.set_active(false);
		}
	}
	,stopped: function(_) {
		if(this.onComplete != null) {
			this.onComplete();
		}
		if(this.looped) {
			this.cleanup(false);
			this.play(false,this.loopTime,this.endTime);
		} else {
			this.cleanup(this.autoDestroy);
		}
	}
	,cleanup: function(destroySound,resetPosition) {
		if(resetPosition == null) {
			resetPosition = true;
		}
		if(destroySound) {
			this.reset();
			return;
		}
		if(this._channel != null) {
			this._channel.removeEventListener("soundComplete",$bind(this,this.stopped));
			this._channel.stop();
			this._channel = null;
		}
		this.set_active(false);
		if(resetPosition) {
			this._time = 0;
			this._paused = false;
		}
	}
	,gotID3: function(_) {
		this.name = this._sound.get_id3().songName;
		this.artist = this._sound.get_id3().artist;
		this._sound.removeEventListener("id3",$bind(this,this.gotID3));
	}
	,onFocus: function() {
		if(!this._alreadyPaused) {
			this.resume();
		}
	}
	,onFocusLost: function() {
		this._alreadyPaused = this._paused;
		this.pause();
	}
	,set_group: function(group) {
		if(this.group != group) {
			var oldGroup = this.group;
			this.group = group;
			if(oldGroup != null) {
				oldGroup.remove(this);
			}
			if(group != null) {
				group.add(this);
			}
			this.updateTransform();
		}
		return group;
	}
	,get_playing: function() {
		return this._channel != null;
	}
	,get_volume: function() {
		return this._volume;
	}
	,set_volume: function(Volume) {
		var lowerBound = Volume < 0 ? 0 : Volume;
		this._volume = lowerBound > 1 ? 1 : lowerBound;
		this.updateTransform();
		return Volume;
	}
	,get_pan: function() {
		return this._transform.pan;
	}
	,set_pan: function(pan) {
		return this._transform.pan = pan;
	}
	,get_time: function() {
		return this._time;
	}
	,set_time: function(time) {
		if(this._channel != null) {
			this.cleanup(false,true);
			this.startSound(time);
		}
		return this._time = time;
	}
	,get_length: function() {
		return this._length;
	}
	,toString: function() {
		var value = this._channel != null;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "playing";
		_this.value = value;
		var value = this._time;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "time";
		_this1.value = value;
		var value = this._length;
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "length";
		_this2.value = value;
		var value = this._volume;
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "volume";
		_this3.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3]);
	}
	,__class__: flixel_system_FlxSound
	,__properties__: $extend(flixel_FlxBasic.prototype.__properties__,{set_group:"set_group",get_length:"get_length",set_time:"set_time",get_time:"get_time",set_volume:"set_volume",get_volume:"get_volume",get_playing:"get_playing",set_pan:"set_pan",get_pan:"get_pan"})
});
var flixel_system_FlxSoundGroup = function(volume) {
	if(volume == null) {
		volume = 1;
	}
	this.sounds = [];
	this.set_volume(volume);
};
$hxClasses["flixel.system.FlxSoundGroup"] = flixel_system_FlxSoundGroup;
flixel_system_FlxSoundGroup.__name__ = "flixel.system.FlxSoundGroup";
flixel_system_FlxSoundGroup.prototype = {
	sounds: null
	,volume: null
	,add: function(sound) {
		if(this.sounds.indexOf(sound) < 0) {
			this.sounds.push(sound);
			sound.set_group(this);
			return true;
		}
		return false;
	}
	,remove: function(sound) {
		if(this.sounds.indexOf(sound) >= 0) {
			sound.set_group(null);
			return HxOverrides.remove(this.sounds,sound);
		}
		return false;
	}
	,pause: function() {
		var _g = 0;
		var _g1 = this.sounds;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			sound.pause();
		}
	}
	,resume: function() {
		var _g = 0;
		var _g1 = this.sounds;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			sound.resume();
		}
	}
	,set_volume: function(volume) {
		this.volume = volume;
		var _g = 0;
		var _g1 = this.sounds;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			sound.updateTransform();
		}
		return volume;
	}
	,__class__: flixel_system_FlxSoundGroup
	,__properties__: {set_volume:"set_volume"}
};
var flixel_system_FlxSplash = function(MaxSize) {
	this._curPart = 0;
	flixel_FlxState.call(this,MaxSize);
};
$hxClasses["flixel.system.FlxSplash"] = flixel_system_FlxSplash;
flixel_system_FlxSplash.__name__ = "flixel.system.FlxSplash";
flixel_system_FlxSplash.nextState = null;
flixel_system_FlxSplash.__super__ = flixel_FlxState;
flixel_system_FlxSplash.prototype = $extend(flixel_FlxState.prototype,{
	_sprite: null
	,_gfx: null
	,_text: null
	,_times: null
	,_colors: null
	,_functions: null
	,_curPart: null
	,_cachedBgColor: null
	,_cachedTimestep: null
	,_cachedAutoPause: null
	,create: function() {
		this._cachedBgColor = flixel_FlxG.cameras.get_bgColor();
		flixel_FlxG.cameras.set_bgColor(-16777216);
		this._cachedTimestep = flixel_FlxG.fixedTimestep;
		flixel_FlxG.fixedTimestep = false;
		this._cachedAutoPause = flixel_FlxG.autoPause;
		flixel_FlxG.autoPause = false;
		flixel_FlxG.keys.enabled = false;
		this._times = [0.041,0.184,0.334,0.495,0.636];
		this._colors = [47394,16761138,16066382,3555839,314875];
		this._functions = [$bind(this,this.drawGreen),$bind(this,this.drawYellow),$bind(this,this.drawRed),$bind(this,this.drawBlue),$bind(this,this.drawLightBlue)];
		var _g = 0;
		var _g1 = this._times;
		while(_g < _g1.length) {
			var time = _g1[_g];
			++_g;
			new flixel_util_FlxTimer().start(time,$bind(this,this.timerCallback));
		}
		var stageWidth = openfl_Lib.get_current().stage.stageWidth;
		var stageHeight = openfl_Lib.get_current().stage.stageHeight;
		this._sprite = new openfl_display_Sprite();
		openfl_Lib.get_current().stage.addChild(this._sprite);
		this._gfx = this._sprite.get_graphics();
		this._text = new openfl_text_TextField();
		this._text.set_selectable(false);
		this._text.set_embedFonts(true);
		var dtf = new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEFAULT,16,16777215);
		dtf.align = 0;
		this._text.set_defaultTextFormat(dtf);
		this._text.set_text("HaxeFlixel");
		openfl_Lib.get_current().stage.addChild(this._text);
		this.onResize(stageWidth,stageHeight);
		if(!flixel_system_FlxSplash.muted) {
			var extension = "";
			extension = ".ogg";
			flixel_FlxG.sound.load(openfl_utils_Assets.getSound("flixel/sounds/flixel" + extension)).play();
		}
	}
	,destroy: function() {
		this._sprite = null;
		this._gfx = null;
		this._text = null;
		this._times = null;
		this._colors = null;
		this._functions = null;
		flixel_FlxState.prototype.destroy.call(this);
	}
	,onResize: function(Width,Height) {
		flixel_FlxState.prototype.onResize.call(this,Width,Height);
		this._sprite.set_x(Width / 2);
		this._sprite.set_y(Height / 2 - 20 * flixel_FlxG.game.get_scaleY());
		this._text.set_width(Width / flixel_FlxG.game.get_scaleX());
		this._text.set_x(0);
		this._text.set_y(this._sprite.get_y() + 80 * flixel_FlxG.game.get_scaleY());
		this._sprite.set_scaleX(this._text.set_scaleX(flixel_FlxG.game.get_scaleX()));
		this._sprite.set_scaleY(this._text.set_scaleY(flixel_FlxG.game.get_scaleY()));
	}
	,timerCallback: function(Timer) {
		this._functions[this._curPart]();
		this._text.set_textColor(this._colors[this._curPart]);
		this._text.set_text("HaxeFlixel");
		this._curPart++;
		if(this._curPart == 5) {
			flixel_tweens_FlxTween.tween(this._sprite,{ alpha : 0},3.0,{ ease : flixel_tweens_FlxEase.quadOut, onComplete : $bind(this,this.onComplete)});
			flixel_tweens_FlxTween.tween(this._text,{ alpha : 0},3.0,{ ease : flixel_tweens_FlxEase.quadOut});
		}
	}
	,drawGreen: function() {
		this._gfx.beginFill(47394);
		this._gfx.moveTo(0,-37);
		this._gfx.lineTo(1,-37);
		this._gfx.lineTo(37,0);
		this._gfx.lineTo(37,1);
		this._gfx.lineTo(1,37);
		this._gfx.lineTo(0,37);
		this._gfx.lineTo(-37,1);
		this._gfx.lineTo(-37,0);
		this._gfx.lineTo(0,-37);
		this._gfx.endFill();
	}
	,drawYellow: function() {
		this._gfx.beginFill(16761138);
		this._gfx.moveTo(-50,-50);
		this._gfx.lineTo(-25,-50);
		this._gfx.lineTo(0,-37);
		this._gfx.lineTo(-37,0);
		this._gfx.lineTo(-50,-25);
		this._gfx.lineTo(-50,-50);
		this._gfx.endFill();
	}
	,drawRed: function() {
		this._gfx.beginFill(16066382);
		this._gfx.moveTo(50,-50);
		this._gfx.lineTo(25,-50);
		this._gfx.lineTo(1,-37);
		this._gfx.lineTo(37,0);
		this._gfx.lineTo(50,-25);
		this._gfx.lineTo(50,-50);
		this._gfx.endFill();
	}
	,drawBlue: function() {
		this._gfx.beginFill(3555839);
		this._gfx.moveTo(-50,50);
		this._gfx.lineTo(-25,50);
		this._gfx.lineTo(0,37);
		this._gfx.lineTo(-37,1);
		this._gfx.lineTo(-50,25);
		this._gfx.lineTo(-50,50);
		this._gfx.endFill();
	}
	,drawLightBlue: function() {
		this._gfx.beginFill(314875);
		this._gfx.moveTo(50,50);
		this._gfx.lineTo(25,50);
		this._gfx.lineTo(1,37);
		this._gfx.lineTo(37,1);
		this._gfx.lineTo(50,25);
		this._gfx.lineTo(50,50);
		this._gfx.endFill();
	}
	,onComplete: function(Tween) {
		flixel_FlxG.cameras.set_bgColor(this._cachedBgColor);
		flixel_FlxG.fixedTimestep = this._cachedTimestep;
		flixel_FlxG.autoPause = this._cachedAutoPause;
		flixel_FlxG.keys.enabled = true;
		openfl_Lib.get_current().stage.removeChild(this._sprite);
		openfl_Lib.get_current().stage.removeChild(this._text);
		var nextState = Type.createInstance(flixel_system_FlxSplash.nextState,[]);
		if(flixel_FlxG.game._state.switchTo(nextState)) {
			flixel_FlxG.game._requestedState = nextState;
		}
		flixel_FlxG.game._gameJustStarted = true;
	}
	,__class__: flixel_system_FlxSplash
});
var flixel_system_debug_DebuggerUtil = function() { };
$hxClasses["flixel.system.debug.DebuggerUtil"] = flixel_system_debug_DebuggerUtil;
flixel_system_debug_DebuggerUtil.__name__ = "flixel.system.debug.DebuggerUtil";
flixel_system_debug_DebuggerUtil.createTextField = function(X,Y,Color,Size) {
	if(Size == null) {
		Size = 12;
	}
	if(Color == null) {
		Color = -1;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	return flixel_system_debug_DebuggerUtil.initTextField(new openfl_text_TextField(),X,Y,Color,Size);
};
flixel_system_debug_DebuggerUtil.initTextField = function(tf,X,Y,Color,Size) {
	if(Size == null) {
		Size = 12;
	}
	if(Color == null) {
		Color = -1;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	tf.set_x(X);
	tf.set_y(Y);
	tf.set_multiline(false);
	tf.set_wordWrap(false);
	tf.set_embedFonts(true);
	tf.set_selectable(false);
	tf.set_defaultTextFormat(new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEBUGGER,Size,Color & 16777215));
	tf.set_alpha((Color >> 24 & 255) / 255);
	tf.set_autoSize(1);
	return tf;
};
flixel_system_debug_DebuggerUtil.fixSize = function(bitmapData) {
	Reflect.setProperty(bitmapData,"width",11);
	Reflect.setProperty(bitmapData,"height",11);
	return bitmapData;
};
var flixel_system_debug__$FlxDebugger_GraphicFlixel = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$FlxDebugger_GraphicFlixel.preload != null) {
		this.__fromImage(flixel_system_debug__$FlxDebugger_GraphicFlixel.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug__$FlxDebugger_GraphicFlixel.resourceName),flixel_system_debug__$FlxDebugger_GraphicFlixel.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_debug__$FlxDebugger_GraphicFlixel.preload == null) {
				flixel_system_debug__$FlxDebugger_GraphicFlixel.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.debug._FlxDebugger.GraphicFlixel"] = flixel_system_debug__$FlxDebugger_GraphicFlixel;
flixel_system_debug__$FlxDebugger_GraphicFlixel.__name__ = "flixel.system.debug._FlxDebugger.GraphicFlixel";
flixel_system_debug__$FlxDebugger_GraphicFlixel.preload = null;
flixel_system_debug__$FlxDebugger_GraphicFlixel.__super__ = openfl_display_BitmapData;
flixel_system_debug__$FlxDebugger_GraphicFlixel.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$FlxDebugger_GraphicFlixel
});
var flixel_system_debug__$FlxDebugger_GraphicDrawDebug = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$FlxDebugger_GraphicDrawDebug.preload != null) {
		this.__fromImage(flixel_system_debug__$FlxDebugger_GraphicDrawDebug.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug__$FlxDebugger_GraphicDrawDebug.resourceName),flixel_system_debug__$FlxDebugger_GraphicDrawDebug.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_debug__$FlxDebugger_GraphicDrawDebug.preload == null) {
				flixel_system_debug__$FlxDebugger_GraphicDrawDebug.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.debug._FlxDebugger.GraphicDrawDebug"] = flixel_system_debug__$FlxDebugger_GraphicDrawDebug;
flixel_system_debug__$FlxDebugger_GraphicDrawDebug.__name__ = "flixel.system.debug._FlxDebugger.GraphicDrawDebug";
flixel_system_debug__$FlxDebugger_GraphicDrawDebug.preload = null;
flixel_system_debug__$FlxDebugger_GraphicDrawDebug.__super__ = openfl_display_BitmapData;
flixel_system_debug__$FlxDebugger_GraphicDrawDebug.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$FlxDebugger_GraphicDrawDebug
});
var flixel_system_debug_GraphicLog = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicLog.preload != null) {
		this.__fromImage(flixel_system_debug_GraphicLog.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_GraphicLog.resourceName),flixel_system_debug_GraphicLog.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_debug_GraphicLog.preload == null) {
				flixel_system_debug_GraphicLog.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.debug.GraphicLog"] = flixel_system_debug_GraphicLog;
flixel_system_debug_GraphicLog.__name__ = "flixel.system.debug.GraphicLog";
flixel_system_debug_GraphicLog.preload = null;
flixel_system_debug_GraphicLog.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicLog.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicLog
});
var flixel_system_debug_GraphicStats = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicStats.preload != null) {
		this.__fromImage(flixel_system_debug_GraphicStats.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_GraphicStats.resourceName),flixel_system_debug_GraphicStats.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_debug_GraphicStats.preload == null) {
				flixel_system_debug_GraphicStats.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.debug.GraphicStats"] = flixel_system_debug_GraphicStats;
flixel_system_debug_GraphicStats.__name__ = "flixel.system.debug.GraphicStats";
flixel_system_debug_GraphicStats.preload = null;
flixel_system_debug_GraphicStats.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicStats.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicStats
});
var flixel_system_debug_GraphicWatch = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicWatch.preload != null) {
		this.__fromImage(flixel_system_debug_GraphicWatch.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_GraphicWatch.resourceName),flixel_system_debug_GraphicWatch.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_debug_GraphicWatch.preload == null) {
				flixel_system_debug_GraphicWatch.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.debug.GraphicWatch"] = flixel_system_debug_GraphicWatch;
flixel_system_debug_GraphicWatch.__name__ = "flixel.system.debug.GraphicWatch";
flixel_system_debug_GraphicWatch.preload = null;
flixel_system_debug_GraphicWatch.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicWatch.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicWatch
});
var flixel_system_debug_GraphicBitmapLog = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicBitmapLog.preload != null) {
		this.__fromImage(flixel_system_debug_GraphicBitmapLog.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_GraphicBitmapLog.resourceName),flixel_system_debug_GraphicBitmapLog.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_debug_GraphicBitmapLog.preload == null) {
				flixel_system_debug_GraphicBitmapLog.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.debug.GraphicBitmapLog"] = flixel_system_debug_GraphicBitmapLog;
flixel_system_debug_GraphicBitmapLog.__name__ = "flixel.system.debug.GraphicBitmapLog";
flixel_system_debug_GraphicBitmapLog.preload = null;
flixel_system_debug_GraphicBitmapLog.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicBitmapLog.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicBitmapLog
});
var flixel_system_debug_GraphicConsole = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicConsole.preload != null) {
		this.__fromImage(flixel_system_debug_GraphicConsole.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_GraphicConsole.resourceName),flixel_system_debug_GraphicConsole.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_debug_GraphicConsole.preload == null) {
				flixel_system_debug_GraphicConsole.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.debug.GraphicConsole"] = flixel_system_debug_GraphicConsole;
flixel_system_debug_GraphicConsole.__name__ = "flixel.system.debug.GraphicConsole";
flixel_system_debug_GraphicConsole.preload = null;
flixel_system_debug_GraphicConsole.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicConsole.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicConsole
});
var flixel_system_debug_GraphicArrowLeft = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicArrowLeft.preload != null) {
		this.__fromImage(flixel_system_debug_GraphicArrowLeft.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_GraphicArrowLeft.resourceName),flixel_system_debug_GraphicArrowLeft.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_debug_GraphicArrowLeft.preload == null) {
				flixel_system_debug_GraphicArrowLeft.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.debug.GraphicArrowLeft"] = flixel_system_debug_GraphicArrowLeft;
flixel_system_debug_GraphicArrowLeft.__name__ = "flixel.system.debug.GraphicArrowLeft";
flixel_system_debug_GraphicArrowLeft.preload = null;
flixel_system_debug_GraphicArrowLeft.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicArrowLeft.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicArrowLeft
});
var flixel_system_debug_GraphicArrowRight = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicArrowRight.preload != null) {
		this.__fromImage(flixel_system_debug_GraphicArrowRight.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_GraphicArrowRight.resourceName),flixel_system_debug_GraphicArrowRight.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_debug_GraphicArrowRight.preload == null) {
				flixel_system_debug_GraphicArrowRight.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.debug.GraphicArrowRight"] = flixel_system_debug_GraphicArrowRight;
flixel_system_debug_GraphicArrowRight.__name__ = "flixel.system.debug.GraphicArrowRight";
flixel_system_debug_GraphicArrowRight.preload = null;
flixel_system_debug_GraphicArrowRight.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicArrowRight.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicArrowRight
});
var flixel_system_debug_GraphicCloseButton = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicCloseButton.preload != null) {
		this.__fromImage(flixel_system_debug_GraphicCloseButton.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_GraphicCloseButton.resourceName),flixel_system_debug_GraphicCloseButton.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_debug_GraphicCloseButton.preload == null) {
				flixel_system_debug_GraphicCloseButton.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.debug.GraphicCloseButton"] = flixel_system_debug_GraphicCloseButton;
flixel_system_debug_GraphicCloseButton.__name__ = "flixel.system.debug.GraphicCloseButton";
flixel_system_debug_GraphicCloseButton.preload = null;
flixel_system_debug_GraphicCloseButton.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicCloseButton.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicCloseButton
});
var flixel_system_debug_GraphicInteractive = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicInteractive.preload != null) {
		this.__fromImage(flixel_system_debug_GraphicInteractive.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_GraphicInteractive.resourceName),flixel_system_debug_GraphicInteractive.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_debug_GraphicInteractive.preload == null) {
				flixel_system_debug_GraphicInteractive.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.debug.GraphicInteractive"] = flixel_system_debug_GraphicInteractive;
flixel_system_debug_GraphicInteractive.__name__ = "flixel.system.debug.GraphicInteractive";
flixel_system_debug_GraphicInteractive.preload = null;
flixel_system_debug_GraphicInteractive.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicInteractive.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicInteractive
});
var flixel_system_debug_FlxDebugger = function() {
	openfl_display_Sprite.call(this);
};
$hxClasses["flixel.system.debug.FlxDebugger"] = flixel_system_debug_FlxDebugger;
flixel_system_debug_FlxDebugger.__name__ = "flixel.system.debug.FlxDebugger";
flixel_system_debug_FlxDebugger.__super__ = openfl_display_Sprite;
flixel_system_debug_FlxDebugger.prototype = $extend(openfl_display_Sprite.prototype,{
	__class__: flixel_system_debug_FlxDebugger
});
var flixel_system_debug_FlxDebuggerLayout = $hxEnums["flixel.system.debug.FlxDebuggerLayout"] = { __ename__ : "flixel.system.debug.FlxDebuggerLayout", __constructs__ : ["STANDARD","MICRO","BIG","TOP","LEFT","RIGHT"]
	,STANDARD: {_hx_index:0,__enum__:"flixel.system.debug.FlxDebuggerLayout",toString:$estr}
	,MICRO: {_hx_index:1,__enum__:"flixel.system.debug.FlxDebuggerLayout",toString:$estr}
	,BIG: {_hx_index:2,__enum__:"flixel.system.debug.FlxDebuggerLayout",toString:$estr}
	,TOP: {_hx_index:3,__enum__:"flixel.system.debug.FlxDebuggerLayout",toString:$estr}
	,LEFT: {_hx_index:4,__enum__:"flixel.system.debug.FlxDebuggerLayout",toString:$estr}
	,RIGHT: {_hx_index:5,__enum__:"flixel.system.debug.FlxDebuggerLayout",toString:$estr}
};
flixel_system_debug_FlxDebuggerLayout.__empty_constructs__ = [flixel_system_debug_FlxDebuggerLayout.STANDARD,flixel_system_debug_FlxDebuggerLayout.MICRO,flixel_system_debug_FlxDebuggerLayout.BIG,flixel_system_debug_FlxDebuggerLayout.TOP,flixel_system_debug_FlxDebuggerLayout.LEFT,flixel_system_debug_FlxDebuggerLayout.RIGHT];
var flixel_system_debug_Tooltip = function() { };
$hxClasses["flixel.system.debug.Tooltip"] = flixel_system_debug_Tooltip;
flixel_system_debug_Tooltip.__name__ = "flixel.system.debug.Tooltip";
flixel_system_debug_Tooltip._container = null;
flixel_system_debug_Tooltip.init = function(container) {
	flixel_system_debug_Tooltip._container = container;
};
flixel_system_debug_Tooltip.add = function(element,text) {
	var tooltip = new flixel_system_debug_TooltipOverlay(element,text);
	flixel_system_debug_Tooltip._container.addChild(tooltip);
	flixel_system_debug_Tooltip._tooltips.push(tooltip);
	return tooltip;
};
flixel_system_debug_Tooltip.remove = function(element) {
	var removed = false;
	var _g = 0;
	var _g1 = flixel_system_debug_Tooltip._tooltips.length;
	while(_g < _g1) {
		var i = _g++;
		if(flixel_system_debug_Tooltip._tooltips[i] != null && flixel_system_debug_Tooltip._tooltips[i].owner == element) {
			var tooltip = flixel_system_debug_Tooltip._tooltips.splice(i,1)[0];
			tooltip.destroy();
			removed = true;
			break;
		}
	}
	return removed;
};
var flixel_system_debug_TooltipOverlay = function(target,text,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	openfl_display_Sprite.call(this);
	this.owner = target;
	this.maxSize = new openfl_geom_Point(width,height);
	this._shadow = new openfl_display_Bitmap(new openfl_display_BitmapData(1,2,true,-16777216));
	this._background = new openfl_display_Bitmap(new openfl_display_BitmapData(1,1,true,-12961222));
	this.textField = flixel_system_debug_DebuggerUtil.createTextField(2,1);
	this.textField.set_alpha(0.8);
	this.textField.set_text(text);
	this.textField.set_wordWrap(true);
	this.addChild(this._shadow);
	this.addChild(this._background);
	this.addChild(this.textField);
	this.updateSize();
	this.setVisible(false);
	if(this.owner != null) {
		this.owner.addEventListener("mouseOver",$bind(this,this.handleMouseEvents));
		this.owner.addEventListener("mouseOut",$bind(this,this.handleMouseEvents));
	}
};
$hxClasses["flixel.system.debug.TooltipOverlay"] = flixel_system_debug_TooltipOverlay;
flixel_system_debug_TooltipOverlay.__name__ = "flixel.system.debug.TooltipOverlay";
flixel_system_debug_TooltipOverlay.__super__ = openfl_display_Sprite;
flixel_system_debug_TooltipOverlay.prototype = $extend(openfl_display_Sprite.prototype,{
	_width: null
	,_height: null
	,_background: null
	,_shadow: null
	,textField: null
	,owner: null
	,maxSize: null
	,destroy: function() {
		this._shadow = flixel_util_FlxDestroyUtil.removeChild(this,this._shadow);
		this._background = flixel_util_FlxDestroyUtil.removeChild(this,this._background);
		this.textField = flixel_util_FlxDestroyUtil.removeChild(this,this.textField);
		this.maxSize = null;
		if(this.owner != null) {
			this.owner.removeEventListener("mouseOver",$bind(this,this.handleMouseEvents));
			this.owner.removeEventListener("mouseOut",$bind(this,this.handleMouseEvents));
		}
		this.owner = null;
	}
	,resize: function(Width,Height) {
		this.maxSize.x = Math.abs(Width) | 0;
		this.maxSize.y = Math.abs(Height) | 0;
		this.updateSize();
	}
	,reposition: function(X,Y) {
		this.set_x(X);
		this.set_y(Y);
		this.ensureOnScreen();
	}
	,setVisible: function(Value) {
		this.set_visible(Value);
		if(this.get_visible()) {
			this.parent.addChild(this);
			this.ensureOnScreen();
		}
	}
	,setText: function(Text1) {
		this.textField.set_text(Text1);
		this.updateSize();
		this.ensureOnScreen();
	}
	,toggleVisible: function() {
		this.setVisible(!this.get_visible());
	}
	,putOnTop: function() {
		this.parent.addChild(this);
	}
	,update: function() {
	}
	,updateSize: function() {
		this._width = ((this.maxSize.x <= 0 ? this.textField.get_textWidth() : Math.abs(this.maxSize.x)) | 0) + 8;
		this._height = ((this.maxSize.y <= 0 ? this.textField.get_textHeight() : Math.abs(this.maxSize.y)) | 0) + 8;
		this._background.set_scaleX(this._width);
		this._background.set_scaleY(this._height);
		this._shadow.set_scaleX(this._width);
		this._shadow.set_y(this._height);
		this.textField.set_width(this._width);
	}
	,ensureOnScreen: function() {
		this.set_x(this.get_x() < 0 ? 0 : this.get_x());
		this.set_y(this.get_y() < 0 ? 0 : this.get_y());
		var offsetX = this.get_x() + this.get_width() >= openfl_Lib.get_current().stage.stageWidth ? openfl_Lib.get_current().stage.stageWidth - (this.get_x() + this.get_width()) : 0;
		var offsetY = this.get_y() + this.get_height() >= openfl_Lib.get_current().stage.stageHeight ? openfl_Lib.get_current().stage.stageHeight - (this.get_y() + this.get_height()) : 0;
		var _g = this;
		_g.set_x(_g.get_x() + offsetX);
		var _g = this;
		_g.set_y(_g.get_y() + offsetY);
	}
	,handleMouseEvents: function(event) {
		if(event.type == "mouseOver" && !this.get_visible()) {
			this.set_x(event.stageX + 10);
			this.set_y(event.stageY + 10);
			this.setVisible(true);
		} else if(event.type == "mouseOut") {
			this.setVisible(false);
		}
	}
	,__class__: flixel_system_debug_TooltipOverlay
});
var flixel_system_debug__$Window_GraphicWindowHandle = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$Window_GraphicWindowHandle.preload != null) {
		this.__fromImage(flixel_system_debug__$Window_GraphicWindowHandle.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug__$Window_GraphicWindowHandle.resourceName),flixel_system_debug__$Window_GraphicWindowHandle.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_debug__$Window_GraphicWindowHandle.preload == null) {
				flixel_system_debug__$Window_GraphicWindowHandle.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.debug._Window.GraphicWindowHandle"] = flixel_system_debug__$Window_GraphicWindowHandle;
flixel_system_debug__$Window_GraphicWindowHandle.__name__ = "flixel.system.debug._Window.GraphicWindowHandle";
flixel_system_debug__$Window_GraphicWindowHandle.preload = null;
flixel_system_debug__$Window_GraphicWindowHandle.__super__ = openfl_display_BitmapData;
flixel_system_debug__$Window_GraphicWindowHandle.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$Window_GraphicWindowHandle
});
var flixel_system_debug_Window = function(Title,Icon,Width,Height,Resizable,Bounds,Closable,AlwaysOnTop) {
	if(AlwaysOnTop == null) {
		AlwaysOnTop = true;
	}
	if(Closable == null) {
		Closable = false;
	}
	if(Resizable == null) {
		Resizable = true;
	}
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	openfl_display_Sprite.call(this);
	this.minSize = new openfl_geom_Point(50,30);
	this._width = Math.abs(Width) | 0;
	this._height = Math.abs(Height) | 0;
	this.updateBounds(Bounds);
	this._drag = new openfl_geom_Point();
	this._resizable = Resizable;
	this._closable = Closable;
	this._alwaysOnTop = AlwaysOnTop;
	this._shadow = new openfl_display_Bitmap(new openfl_display_BitmapData(1,2,true,-16777216));
	this._background = new openfl_display_Bitmap(new openfl_display_BitmapData(1,1,true,-580952225));
	this._header = new openfl_display_Bitmap(new openfl_display_BitmapData(1,15,true,-1157627904));
	this._background.set_y(this._header.get_height());
	this._title = flixel_system_debug_DebuggerUtil.createTextField(2,-1);
	this._title.set_alpha(0.8);
	this._title.set_text(Title);
	this.addChild(this._shadow);
	this.addChild(this._background);
	this.addChild(this._header);
	this.addChild(this._title);
	if(Icon != null) {
		flixel_system_debug_DebuggerUtil.fixSize(Icon);
		this._icon = new openfl_display_Bitmap(Icon);
		this._icon.set_x(5);
		this._icon.set_y(2);
		this._icon.set_alpha(0.8);
		this._title.set_x(this._icon.get_x() + this._icon.get_width() + 2);
		this.addChild(this._icon);
	}
	if(this._resizable) {
		this._handle = new openfl_display_Bitmap(flixel_system_debug_DebuggerUtil.fixSize(new flixel_system_debug__$Window_GraphicWindowHandle(0,0)));
		this.addChild(this._handle);
	}
	if(this._closable) {
		this._closeButton = new flixel_system_ui_FlxSystemButton(new flixel_system_debug_GraphicCloseButton(0,0),$bind(this,this.close));
		this._closeButton.set_alpha(0.8);
		this.addChild(this._closeButton);
	} else {
		this._id = flixel_system_debug_Window.windowAmount;
		this.loadSaveData();
		flixel_system_debug_Window.windowAmount++;
	}
	if(this._width != 0 || this._height != 0) {
		this.updateSize();
	}
	this.bound();
	this.addEventListener("enterFrame",$bind(this,this.init));
};
$hxClasses["flixel.system.debug.Window"] = flixel_system_debug_Window;
flixel_system_debug_Window.__name__ = "flixel.system.debug.Window";
flixel_system_debug_Window.__super__ = openfl_display_Sprite;
flixel_system_debug_Window.prototype = $extend(openfl_display_Sprite.prototype,{
	minSize: null
	,maxSize: null
	,toggleButton: null
	,_width: null
	,_height: null
	,_bounds: null
	,_background: null
	,_header: null
	,_shadow: null
	,_title: null
	,_handle: null
	,_icon: null
	,_closeButton: null
	,_overHeader: null
	,_overHandle: null
	,_drag: null
	,_dragging: null
	,_resizing: null
	,_resizable: null
	,_closable: null
	,_alwaysOnTop: null
	,_id: null
	,destroy: function() {
		this.minSize = null;
		this.maxSize = null;
		this._bounds = null;
		if(this._shadow != null) {
			this.removeChild(this._shadow);
		}
		this._shadow = null;
		if(this._background != null) {
			this.removeChild(this._background);
		}
		this._background = null;
		if(this._header != null) {
			this.removeChild(this._header);
		}
		this._header = null;
		if(this._title != null) {
			this.removeChild(this._title);
		}
		this._title = null;
		if(this._handle != null) {
			this.removeChild(this._handle);
		}
		this._handle = null;
		this._drag = null;
		this._closeButton = flixel_util_FlxDestroyUtil.destroy(this._closeButton);
		var stage = openfl_Lib.get_current().stage;
		if(stage.hasEventListener("mouseMove")) {
			stage.removeEventListener("mouseMove",$bind(this,this.onMouseMove));
		}
		if(this.hasEventListener("mouseDown")) {
			this.removeEventListener("mouseDown",$bind(this,this.onMouseDown));
		}
		if(stage.hasEventListener("mouseUp")) {
			stage.removeEventListener("mouseUp",$bind(this,this.onMouseUp));
		}
	}
	,resize: function(Width,Height) {
		this._width = Math.abs(Width) | 0;
		this._height = Math.abs(Height) | 0;
		this.updateSize();
	}
	,reposition: function(X,Y) {
		this.set_x(X);
		this.set_y(Y);
		this.bound();
	}
	,updateBounds: function(Bounds) {
		this._bounds = Bounds;
		if(this._bounds != null) {
			this.maxSize = new openfl_geom_Point(this._bounds.width,this._bounds.height);
		} else {
			this.maxSize = new openfl_geom_Point(1.79e+308,1.79e+308);
		}
	}
	,setVisible: function(Value) {
		this.set_visible(Value);
		if(!this._closable) {
			flixel_FlxG.save.data.windowSettings[this._id] = this.get_visible();
			flixel_FlxG.save.flush();
		}
		if(this.toggleButton != null) {
			this.toggleButton.set_toggled(!this.get_visible());
		}
		if(this.get_visible() && this._alwaysOnTop) {
			this.parent.addChild(this);
		}
	}
	,toggleVisible: function() {
		this.setVisible(!this.get_visible());
	}
	,putOnTop: function() {
		this.parent.addChild(this);
	}
	,loadSaveData: function() {
		if(flixel_FlxG.save.data.windowSettings == null) {
			var maxWindows = 10;
			var _g = [];
			var _g1 = 0;
			var _g2 = maxWindows;
			while(_g1 < _g2) {
				var _ = _g1++;
				_g.push(true);
			}
			flixel_FlxG.save.data.windowSettings = _g;
			flixel_FlxG.save.flush();
		}
		this.set_visible(flixel_FlxG.save.data.windowSettings[this._id]);
	}
	,update: function() {
	}
	,init: function(_) {
		if(this.stage == null) {
			return;
		}
		this.removeEventListener("enterFrame",$bind(this,this.init));
		this.stage.addEventListener("mouseMove",$bind(this,this.onMouseMove));
		this.stage.addEventListener("mouseUp",$bind(this,this.onMouseUp));
		this.addEventListener("mouseDown",$bind(this,this.onMouseDown));
	}
	,onMouseMove: function(_) {
		var mouseX = this.get_mouseX() < 0 ? 0 : this.get_mouseX();
		var mouseY = this.get_mouseY() < 0 ? 0 : this.get_mouseY();
		if(!this.parent.get_visible()) {
			this._overHandle = this._overHeader = false;
			return;
		}
		if(this._dragging) {
			this._overHeader = true;
			this.reposition(this.parent.get_mouseX() - this._drag.x,this.parent.get_mouseY() - this._drag.y);
		} else if(this._resizing) {
			this._overHandle = true;
			this.resize(mouseX - this._drag.x,mouseY - this._drag.y);
		} else if(mouseX >= 0 && mouseX <= this._width && mouseY >= 0 && mouseY <= this._height) {
			this._overHeader = mouseX <= this._header.get_width() && mouseY <= this._header.get_height();
			if(this._resizable) {
				this._overHandle = mouseX >= this._width - this._handle.get_width() && mouseY >= this._height - this._handle.get_height();
			}
		} else {
			this._overHandle = this._overHeader = false;
		}
	}
	,onMouseDown: function(_) {
		if(this._overHeader) {
			if(this._alwaysOnTop) {
				this.parent.addChild(this);
			}
			this._dragging = true;
			this._drag.x = this.get_mouseX();
			this._drag.y = this.get_mouseY();
		} else if(this._overHandle) {
			if(this._alwaysOnTop) {
				this.parent.addChild(this);
			}
			this._resizing = true;
			var tmp = this._width;
			var tmp1 = this.get_mouseX();
			this._drag.x = tmp - tmp1;
			var tmp = this._height;
			var tmp1 = this.get_mouseY();
			this._drag.y = tmp - tmp1;
		}
	}
	,onMouseUp: function(_) {
		this._dragging = false;
		this._resizing = false;
	}
	,bound: function() {
		if(this._bounds != null) {
			var Value = this.get_x();
			var Min = this._bounds.get_left();
			var Max = this._bounds.get_right() - this._width;
			var lowerBound = Min != null && Value < Min ? Min : Value;
			this.set_x(Max != null && lowerBound > Max ? Max : lowerBound);
			var Value = this.get_y();
			var Min = this._bounds.get_top();
			var Max = this._bounds.get_bottom() - this._height;
			var lowerBound = Min != null && Value < Min ? Min : Value;
			this.set_y(Max != null && lowerBound > Max ? Max : lowerBound);
		}
	}
	,updateSize: function() {
		var Value = this._width;
		var Min = this.minSize.x;
		var Max = this.maxSize.x;
		var lowerBound = Min != null && Value < Min ? Min : Value;
		this._width = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
		var Value = this._height;
		var Min = this.minSize.y;
		var Max = this.maxSize.y;
		var lowerBound = Min != null && Value < Min ? Min : Value;
		this._height = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
		this._header.set_scaleX(this._width);
		this._background.set_scaleX(this._width);
		this._background.set_scaleY(this._height - this._header.get_height());
		this._shadow.set_scaleX(this._width);
		this._shadow.set_y(this._height);
		this._title.set_width(this._width - 4);
		if(this._resizable) {
			this._handle.set_x(this._width - this._handle.get_width());
			this._handle.set_y(this._height - this._handle.get_height());
		}
		if(this._closeButton != null) {
			this._closeButton.set_x(this._width - this._closeButton.get_width() - 3);
			this._closeButton.set_y(3);
		}
	}
	,close: function() {
		this.destroy();
	}
	,__class__: flixel_system_debug_Window
});
var flixel_system_debug_completion_CompletionList = function(capacity) {
	this.upperVisibleIndex = 0;
	this.lowerVisibleIndex = 0;
	this.selectedIndex = 0;
	this.entries = [];
	openfl_display_Sprite.call(this);
	this.set_visible(false);
	this.upperVisibleIndex = capacity - 1;
	this.actualHeight = capacity * 20;
	this.createPopupEntries(capacity);
	this.createScrollBar();
	this.updateSelectedItem();
	openfl_Lib.get_current().stage.addEventListener("keyDown",$bind(this,this.onKeyDown));
};
$hxClasses["flixel.system.debug.completion.CompletionList"] = flixel_system_debug_completion_CompletionList;
flixel_system_debug_completion_CompletionList.__name__ = "flixel.system.debug.completion.CompletionList";
flixel_system_debug_completion_CompletionList.__super__ = openfl_display_Sprite;
flixel_system_debug_completion_CompletionList.prototype = $extend(openfl_display_Sprite.prototype,{
	completed: null
	,selectionChanged: null
	,closed: null
	,filter: null
	,items: null
	,entries: null
	,originalItems: null
	,selectedIndex: null
	,lowerVisibleIndex: null
	,upperVisibleIndex: null
	,scrollBar: null
	,actualHeight: null
	,show: function(x,items) {
		this.set_visible(true);
		this.set_x(x);
		this.originalItems = items;
		this.set_filter("");
		this.updateEntries();
	}
	,setY: function(y) {
		this.set_y(y - this.actualHeight);
	}
	,close: function() {
		this.set_visible(false);
		this.set_filter(null);
		if(this.closed != null) {
			this.closed();
		}
	}
	,createPopupEntries: function(amount) {
		var _g = 0;
		var _g1 = amount;
		while(_g < _g1) {
			var i = _g++;
			var entry = new flixel_system_debug_completion_CompletionListEntry();
			this.entries.push(entry);
			this.addChild(entry);
			entry.set_y(20 * i);
		}
	}
	,createScrollBar: function() {
		this.scrollBar = new flixel_system_debug_completion_CompletionListScrollBar(150,0,5,this.actualHeight);
		this.addChild(this.scrollBar);
	}
	,onKeyDown: function(e) {
		if(!this.get_visible()) {
			return;
		}
		switch(e.keyCode) {
		case 13:
			if(this.completed != null) {
				this.completed(this.items[this.selectedIndex]);
			}
			this.close();
			return;
		case 27:
			this.close();
			return;
		case 38:
			this.updateIndices(-1);
			break;
		case 40:
			this.updateIndices(1);
			break;
		}
		this.updateEntries();
	}
	,updateIndices: function(modifier) {
		this.selectedIndex = this.bound(this.selectedIndex + modifier);
		var Value = this.selectedIndex;
		var Min = this.lowerVisibleIndex;
		var Max = this.upperVisibleIndex;
		if((Min == null || Value >= Min) && (Max == null || Value <= Max)) {
			return;
		}
		this.lowerVisibleIndex = this.bound(this.lowerVisibleIndex + modifier);
		this.upperVisibleIndex = this.bound(this.upperVisibleIndex + modifier);
		var range = this.upperVisibleIndex - this.lowerVisibleIndex;
		if(range == this.items.length) {
			return;
		}
		if(this.lowerVisibleIndex == 0) {
			this.upperVisibleIndex = this.entries.length - 1;
		} else if(this.upperVisibleIndex == this.items.length - 1) {
			this.lowerVisibleIndex = this.items.length - this.entries.length;
		}
	}
	,bound: function(index) {
		var Max = this.items.length - 1;
		var lowerBound = index < 0 ? 0 : index;
		return (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
	}
	,updateEntries: function() {
		this.updateLabels();
		this.updateSelectedItem();
		this.scrollBar.updateHandle(this.lowerVisibleIndex,this.items.length,this.entries.length);
	}
	,updateLabels: function() {
		var _g = 0;
		var _g1 = this.entries.length;
		while(_g < _g1) {
			var i = _g++;
			var selectedItem = this.items[this.lowerVisibleIndex + i];
			if(selectedItem == null) {
				selectedItem = "";
			}
			this.entries[i].setItem(selectedItem);
		}
	}
	,updateSelectedItem: function() {
		var _g = 0;
		var _g1 = this.entries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			entry.set_selected(false);
		}
		this.entries[this.selectedIndex - this.lowerVisibleIndex].set_selected(true);
		if(this.selectionChanged != null) {
			this.selectionChanged(this.items[this.selectedIndex]);
		}
	}
	,setItems: function(items) {
		if(items == null) {
			return;
		}
		if(items.length == 0) {
			this.close();
		}
		this.items = items;
		this.selectedIndex = 0;
		this.lowerVisibleIndex = 0;
		this.upperVisibleIndex = this.entries.length - 1;
		this.updateEntries();
	}
	,filterItems: function(filter) {
		if(filter == null) {
			filter = "";
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.originalItems;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(v.toLowerCase().indexOf(filter.toLowerCase()) != -1) {
				_g.push(v);
			}
		}
		return this.sortItems(filter,_g);
	}
	,sortItems: function(filter,items) {
		var _gthis = this;
		if(filter == "") {
			return items;
		}
		items.sort(function(a,b) {
			var valueA = _gthis.startsWithExt(a,filter);
			var valueB = _gthis.startsWithExt(b,filter);
			if(valueA > valueB) {
				return -valueA;
			}
			if(valueB > valueA) {
				return valueB;
			}
			if(valueA == valueB) {
				return a.length - b.length | 0;
			}
			return 0;
		});
		return items;
	}
	,startsWithExt: function(s,start) {
		if(StringTools.startsWith(s,start)) {
			return 2;
		}
		var _this_r = new RegExp("^[_]+","".split("u").join(""));
		if(StringTools.startsWith(s.replace(_this_r,""),start)) {
			return 1;
		}
		return 0;
	}
	,set_filter: function(filter) {
		if(filter == this.filter) {
			return filter;
		}
		this.setItems(this.filterItems(filter));
		return this.filter = filter;
	}
	,__class__: flixel_system_debug_completion_CompletionList
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_filter:"set_filter"})
});
var flixel_system_debug_completion_CompletionListEntry = function() {
	this.selected = false;
	openfl_display_Sprite.call(this);
	this.initBitmapDatas();
	this.addChild(this.background = new openfl_display_Bitmap());
	this.background.set_bitmapData(flixel_system_debug_completion_CompletionListEntry.normalBitmapData);
	this.label = flixel_system_debug_DebuggerUtil.createTextField();
	this.label.set_x(4);
	this.addChild(this.label);
};
$hxClasses["flixel.system.debug.completion.CompletionListEntry"] = flixel_system_debug_completion_CompletionListEntry;
flixel_system_debug_completion_CompletionListEntry.__name__ = "flixel.system.debug.completion.CompletionListEntry";
flixel_system_debug_completion_CompletionListEntry.normalBitmapData = null;
flixel_system_debug_completion_CompletionListEntry.highlightBitmapData = null;
flixel_system_debug_completion_CompletionListEntry.__super__ = openfl_display_Sprite;
flixel_system_debug_completion_CompletionListEntry.prototype = $extend(openfl_display_Sprite.prototype,{
	selected: null
	,background: null
	,label: null
	,initBitmapDatas: function() {
		if(flixel_system_debug_completion_CompletionListEntry.normalBitmapData == null) {
			flixel_system_debug_completion_CompletionListEntry.normalBitmapData = new openfl_display_BitmapData(150,20,true,-10526881);
		}
		if(flixel_system_debug_completion_CompletionListEntry.highlightBitmapData == null) {
			flixel_system_debug_completion_CompletionListEntry.highlightBitmapData = new openfl_display_BitmapData(150,20,true,-9605779);
		}
	}
	,setItem: function(item) {
		this.label.set_text(item);
		if(this.label.get_width() > 150) {
			this.label.set_width(150);
			this.label.set_autoSize(2);
		}
	}
	,set_selected: function(selected) {
		if(selected == this.selected) {
			return selected;
		}
		this.background.set_bitmapData(selected ? flixel_system_debug_completion_CompletionListEntry.highlightBitmapData : flixel_system_debug_completion_CompletionListEntry.normalBitmapData);
		return this.selected = selected;
	}
	,__class__: flixel_system_debug_completion_CompletionListEntry
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_selected:"set_selected"})
});
var flixel_system_debug_completion_CompletionListScrollBar = function(x,y,width,height) {
	openfl_display_Sprite.call(this);
	this.set_x(x);
	this.set_y(y);
	this.addChild(new openfl_display_Bitmap(new openfl_display_BitmapData(width,height,true,-12303292)));
	this.handle = new openfl_display_Bitmap(new openfl_display_BitmapData(width,1,true,-14540254));
	this.addChild(this.handle);
};
$hxClasses["flixel.system.debug.completion.CompletionListScrollBar"] = flixel_system_debug_completion_CompletionListScrollBar;
flixel_system_debug_completion_CompletionListScrollBar.__name__ = "flixel.system.debug.completion.CompletionListScrollBar";
flixel_system_debug_completion_CompletionListScrollBar.__super__ = openfl_display_Sprite;
flixel_system_debug_completion_CompletionListScrollBar.prototype = $extend(openfl_display_Sprite.prototype,{
	handle: null
	,updateHandle: function(lower,items,entries) {
		this.handle.set_scaleY(Math.min(this.get_height() / items * entries,this.get_height()));
		this.handle.set_y(this.get_height() / items * lower);
		var tmp = this.handle;
		var Value = this.handle.get_y();
		var Max = this.get_height() - this.handle.get_scaleY();
		var lowerBound = Value < 0 ? 0 : Value;
		tmp.set_y(Max != null && lowerBound > Max ? Max : lowerBound);
	}
	,__class__: flixel_system_debug_completion_CompletionListScrollBar
});
var flixel_system_debug_console_ConsoleUtil = function() { };
$hxClasses["flixel.system.debug.console.ConsoleUtil"] = flixel_system_debug_console_ConsoleUtil;
flixel_system_debug_console_ConsoleUtil.__name__ = "flixel.system.debug.console.ConsoleUtil";
flixel_system_debug_console_ConsoleUtil.parser = null;
flixel_system_debug_console_ConsoleUtil.interp = null;
flixel_system_debug_console_ConsoleUtil.init = function() {
	flixel_system_debug_console_ConsoleUtil.parser = new hscript_Parser();
	flixel_system_debug_console_ConsoleUtil.parser.allowJSON = true;
	flixel_system_debug_console_ConsoleUtil.parser.allowTypes = true;
	flixel_system_debug_console_ConsoleUtil.interp = new flixel_system_debug_console__$ConsoleUtil_Interp();
};
flixel_system_debug_console_ConsoleUtil.parseCommand = function(Input) {
	if(StringTools.endsWith(Input,";")) {
		Input = HxOverrides.substr(Input,0,-1);
	}
	return flixel_system_debug_console_ConsoleUtil.parser.parseString(Input);
};
flixel_system_debug_console_ConsoleUtil.runCommand = function(Input) {
	return flixel_system_debug_console_ConsoleUtil.interp.expr(flixel_system_debug_console_ConsoleUtil.parseCommand(Input));
};
flixel_system_debug_console_ConsoleUtil.runExpr = function(expr) {
	return flixel_system_debug_console_ConsoleUtil.interp.expr(expr);
};
flixel_system_debug_console_ConsoleUtil.registerObject = function(ObjectAlias,AnyObject) {
	if(AnyObject == null || Reflect.isObject(AnyObject)) {
		flixel_system_debug_console_ConsoleUtil.interp.variables.h[ObjectAlias] = AnyObject;
	}
};
flixel_system_debug_console_ConsoleUtil.registerFunction = function(FunctionAlias,Function1) {
	if(Reflect.isFunction(Function1)) {
		flixel_system_debug_console_ConsoleUtil.interp.variables.h[FunctionAlias] = Function1;
	}
};
flixel_system_debug_console_ConsoleUtil.getFields = function(Object1) {
	var fields = [];
	if(js_Boot.__instanceof(Object1,Class)) {
		fields = Type.getClassFields(Object1);
	} else if(js_Boot.__instanceof(Object1,Enum)) {
		fields = Object1.__constructs__.slice();
	} else if(Reflect.isObject(Object1)) {
		fields = Type.getInstanceFields(js_Boot.getClass(Object1));
	}
	HxOverrides.remove(fields,"__constructs__");
	var filteredFields = [];
	var _g = 0;
	while(_g < fields.length) {
		var field = fields[_g];
		++_g;
		if(StringTools.startsWith(field,"get_") || StringTools.startsWith(field,"set_")) {
			var name = HxOverrides.substr(field,4,null);
			if(fields.indexOf(name) == -1 && filteredFields.indexOf(name) == -1) {
				filteredFields.push(name);
			}
		} else {
			filteredFields.push(field);
		}
	}
	return flixel_system_debug_console_ConsoleUtil.sortFields(filteredFields);
};
flixel_system_debug_console_ConsoleUtil.sortFields = function(fields) {
	var underscoreList = [];
	var _g = [];
	var _g1 = 0;
	var _g2 = fields;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		var fields1;
		if(StringTools.startsWith(v,"_")) {
			underscoreList.push(v);
			fields1 = false;
		} else {
			fields1 = true;
		}
		if(fields1) {
			_g.push(v);
		}
	}
	fields = _g;
	flixel_util_FlxStringUtil.sortAlphabetically(fields);
	flixel_util_FlxStringUtil.sortAlphabetically(underscoreList);
	return fields.concat(underscoreList);
};
flixel_system_debug_console_ConsoleUtil.log = function(Text1) {
	flixel_FlxG.log.advanced([Text1],flixel_system_debug_log_LogStyle.CONSOLE);
};
var hscript_Interp = function() {
	this.locals = new haxe_ds_StringMap();
	this.declared = [];
	this.resetVariables();
	this.initOps();
};
$hxClasses["hscript.Interp"] = hscript_Interp;
hscript_Interp.__name__ = "hscript.Interp";
hscript_Interp.prototype = {
	variables: null
	,locals: null
	,binops: null
	,depth: null
	,inTry: null
	,declared: null
	,returnValue: null
	,resetVariables: function() {
		var _gthis = this;
		this.variables = new haxe_ds_StringMap();
		this.variables.h["null"] = null;
		this.variables.h["true"] = true;
		this.variables.h["false"] = false;
		var this1 = this.variables;
		var value = Reflect.makeVarArgs(function(el) {
			var inf = _gthis.posInfos();
			var v = el.shift();
			if(el.length > 0) {
				inf.customParams = el;
			}
			haxe_Log.trace(Std.string(v),inf);
		});
		this1.h["trace"] = value;
	}
	,posInfos: function() {
		return { fileName : "hscript", lineNumber : 0};
	}
	,initOps: function() {
		var me = this;
		this.binops = new haxe_ds_StringMap();
		this.binops.h["+"] = function(e1,e2) {
			return me.expr(e1) + me.expr(e2);
		};
		this.binops.h["-"] = function(e1,e2) {
			return me.expr(e1) - me.expr(e2);
		};
		this.binops.h["*"] = function(e1,e2) {
			return me.expr(e1) * me.expr(e2);
		};
		this.binops.h["/"] = function(e1,e2) {
			return me.expr(e1) / me.expr(e2);
		};
		this.binops.h["%"] = function(e1,e2) {
			return me.expr(e1) % me.expr(e2);
		};
		this.binops.h["&"] = function(e1,e2) {
			return me.expr(e1) & me.expr(e2);
		};
		this.binops.h["|"] = function(e1,e2) {
			return me.expr(e1) | me.expr(e2);
		};
		this.binops.h["^"] = function(e1,e2) {
			return me.expr(e1) ^ me.expr(e2);
		};
		this.binops.h["<<"] = function(e1,e2) {
			return me.expr(e1) << me.expr(e2);
		};
		this.binops.h[">>"] = function(e1,e2) {
			return me.expr(e1) >> me.expr(e2);
		};
		this.binops.h[">>>"] = function(e1,e2) {
			return me.expr(e1) >>> me.expr(e2);
		};
		this.binops.h["=="] = function(e1,e2) {
			return me.expr(e1) == me.expr(e2);
		};
		this.binops.h["!="] = function(e1,e2) {
			return me.expr(e1) != me.expr(e2);
		};
		this.binops.h[">="] = function(e1,e2) {
			return me.expr(e1) >= me.expr(e2);
		};
		this.binops.h["<="] = function(e1,e2) {
			return me.expr(e1) <= me.expr(e2);
		};
		this.binops.h[">"] = function(e1,e2) {
			return me.expr(e1) > me.expr(e2);
		};
		this.binops.h["<"] = function(e1,e2) {
			return me.expr(e1) < me.expr(e2);
		};
		this.binops.h["||"] = function(e1,e2) {
			if(me.expr(e1) != true) {
				return me.expr(e2) == true;
			} else {
				return true;
			}
		};
		this.binops.h["&&"] = function(e1,e2) {
			if(me.expr(e1) == true) {
				return me.expr(e2) == true;
			} else {
				return false;
			}
		};
		this.binops.h["="] = $bind(this,this.assign);
		this.binops.h["..."] = function(e1,e2) {
			return new IntIterator(me.expr(e1),me.expr(e2));
		};
		this.assignOp("+=",function(v1,v2) {
			return v1 + v2;
		});
		this.assignOp("-=",function(v1,v2) {
			return v1 - v2;
		});
		this.assignOp("*=",function(v1,v2) {
			return v1 * v2;
		});
		this.assignOp("/=",function(v1,v2) {
			return v1 / v2;
		});
		this.assignOp("%=",function(v1,v2) {
			return v1 % v2;
		});
		this.assignOp("&=",function(v1,v2) {
			return v1 & v2;
		});
		this.assignOp("|=",function(v1,v2) {
			return v1 | v2;
		});
		this.assignOp("^=",function(v1,v2) {
			return v1 ^ v2;
		});
		this.assignOp("<<=",function(v1,v2) {
			return v1 << v2;
		});
		this.assignOp(">>=",function(v1,v2) {
			return v1 >> v2;
		});
		this.assignOp(">>>=",function(v1,v2) {
			return v1 >>> v2;
		});
	}
	,assign: function(e1,e2) {
		var v = this.expr(e2);
		switch(e1._hx_index) {
		case 1:
			var id = e1.v;
			var l = this.locals.h[id];
			if(l == null) {
				this.variables.h[id] = v;
			} else {
				l.r = v;
			}
			break;
		case 5:
			var f = e1.f;
			var e = e1.e;
			v = this.set(this.expr(e),f,v);
			break;
		case 16:
			var index = e1.index;
			var e = e1.e;
			var arr = this.expr(e);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				(js_Boot.__cast(arr , haxe_IMap)).set(index1,v);
			} else {
				arr[index1] = v;
			}
			break;
		default:
			var e = hscript_Error.EInvalidOp("=");
			throw haxe_Exception.thrown(e);
		}
		return v;
	}
	,assignOp: function(op,fop) {
		var me = this;
		this.binops.h[op] = function(e1,e2) {
			return me.evalAssignOp(op,fop,e1,e2);
		};
	}
	,evalAssignOp: function(op,fop,e1,e2) {
		var v;
		switch(e1._hx_index) {
		case 1:
			var id = e1.v;
			var l = this.locals.h[id];
			v = fop(this.expr(e1),this.expr(e2));
			if(l == null) {
				this.variables.h[id] = v;
			} else {
				l.r = v;
			}
			break;
		case 5:
			var f = e1.f;
			var e = e1.e;
			var obj = this.expr(e);
			v = fop(this.get(obj,f),this.expr(e2));
			v = this.set(obj,f,v);
			break;
		case 16:
			var index = e1.index;
			var e = e1.e;
			var arr = this.expr(e);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				v = fop((js_Boot.__cast(arr , haxe_IMap)).get(index1),this.expr(e2));
				(js_Boot.__cast(arr , haxe_IMap)).set(index1,v);
			} else {
				v = fop(arr[index1],this.expr(e2));
				arr[index1] = v;
			}
			break;
		default:
			var e = hscript_Error.EInvalidOp(op);
			throw haxe_Exception.thrown(e);
		}
		return v;
	}
	,increment: function(e,prefix,delta) {
		switch(e._hx_index) {
		case 1:
			var id = e.v;
			var l = this.locals.h[id];
			var v = l == null ? this.variables.h[id] : l.r;
			if(prefix) {
				v += delta;
				if(l == null) {
					this.variables.h[id] = v;
				} else {
					l.r = v;
				}
			} else if(l == null) {
				this.variables.h[id] = v + delta;
			} else {
				l.r = v + delta;
			}
			return v;
		case 5:
			var f = e.f;
			var e1 = e.e;
			var obj = this.expr(e1);
			var v = this.get(obj,f);
			if(prefix) {
				v += delta;
				this.set(obj,f,v);
			} else {
				this.set(obj,f,v + delta);
			}
			return v;
		case 16:
			var index = e.index;
			var e1 = e.e;
			var arr = this.expr(e1);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				var v = (js_Boot.__cast(arr , haxe_IMap)).get(index1);
				if(prefix) {
					v += delta;
					(js_Boot.__cast(arr , haxe_IMap)).set(index1,v);
				} else {
					(js_Boot.__cast(arr , haxe_IMap)).set(index1,v + delta);
				}
				return v;
			} else {
				var v = arr[index1];
				if(prefix) {
					v += delta;
					arr[index1] = v;
				} else {
					arr[index1] = v + delta;
				}
				return v;
			}
			break;
		default:
			var e = hscript_Error.EInvalidOp(delta > 0 ? "++" : "--");
			throw haxe_Exception.thrown(e);
		}
	}
	,execute: function(expr) {
		this.depth = 0;
		this.locals = new haxe_ds_StringMap();
		this.declared = [];
		return this.exprReturn(expr);
	}
	,exprReturn: function(e) {
		try {
			return this.expr(e);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
				var e = _g1;
				switch(e._hx_index) {
				case 0:
					throw haxe_Exception.thrown("Invalid break");
				case 1:
					throw haxe_Exception.thrown("Invalid continue");
				case 2:
					var v = this.returnValue;
					this.returnValue = null;
					return v;
				}
			} else {
				throw _g;
			}
		}
	}
	,duplicate: function(h) {
		var h2 = new haxe_ds_StringMap();
		var k = haxe_ds_StringMap.keysIterator(h.h);
		while(k.hasNext()) {
			var k1 = k.next();
			h2.h[k1] = h.h[k1];
		}
		return h2;
	}
	,restore: function(old) {
		while(this.declared.length > old) {
			var d = this.declared.pop();
			this.locals.h[d.n] = d.old;
		}
	}
	,error: function(e,rethrow) {
		if(rethrow == null) {
			rethrow = false;
		}
		if(rethrow) {
			throw haxe_Exception.thrown(e);
		} else {
			throw haxe_Exception.thrown(e);
		}
	}
	,rethrow: function(e) {
		throw haxe_Exception.thrown(e);
	}
	,resolve: function(id) {
		var l = this.locals.h[id];
		if(l != null) {
			return l.r;
		}
		var v = this.variables.h[id];
		if(v == null && !Object.prototype.hasOwnProperty.call(this.variables.h,id)) {
			var e = hscript_Error.EUnknownVariable(id);
			throw haxe_Exception.thrown(e);
		}
		return v;
	}
	,expr: function(e) {
		var _gthis = this;
		switch(e._hx_index) {
		case 0:
			var c = e.c;
			switch(c._hx_index) {
			case 0:
				var v = c.v;
				return v;
			case 1:
				var f = c.f;
				return f;
			case 2:
				var s = c.s;
				return s;
			}
			break;
		case 1:
			var id = e.v;
			return this.resolve(id);
		case 2:
			var _g = e.t;
			var e1 = e.e;
			var n = e.n;
			this.declared.push({ n : n, old : this.locals.h[n]});
			var this1 = this.locals;
			var value = e1 == null ? null : this.expr(e1);
			this1.h[n] = { r : value};
			return null;
		case 3:
			var e1 = e.e;
			return this.expr(e1);
		case 4:
			var exprs = e.e;
			var old = this.declared.length;
			var v = null;
			var _g = 0;
			while(_g < exprs.length) {
				var e1 = exprs[_g];
				++_g;
				v = this.expr(e1);
			}
			this.restore(old);
			return v;
		case 5:
			var f = e.f;
			var e1 = e.e;
			return this.get(this.expr(e1),f);
		case 6:
			var e2 = e.e2;
			var e1 = e.e1;
			var op = e.op;
			var fop = this.binops.h[op];
			if(fop == null) {
				var e3 = hscript_Error.EInvalidOp(op);
				throw haxe_Exception.thrown(e3);
			}
			return fop(e1,e2);
		case 7:
			var e1 = e.e;
			var prefix = e.prefix;
			var op = e.op;
			switch(op) {
			case "!":
				return this.expr(e1) != true;
			case "++":
				return this.increment(e1,prefix,1);
			case "-":
				return -this.expr(e1);
			case "--":
				return this.increment(e1,prefix,-1);
			case "~":
				return ~this.expr(e1);
			default:
				var e1 = hscript_Error.EInvalidOp(op);
				throw haxe_Exception.thrown(e1);
			}
			break;
		case 8:
			var params = e.params;
			var e1 = e.e;
			var args = [];
			var _g = 0;
			while(_g < params.length) {
				var p = params[_g];
				++_g;
				args.push(this.expr(p));
			}
			if(e1._hx_index == 5) {
				var f = e1.f;
				var e2 = e1.e;
				var obj = this.expr(e2);
				if(obj == null) {
					var e2 = hscript_Error.EInvalidAccess(f);
					throw haxe_Exception.thrown(e2);
				}
				return this.fcall(obj,f,args);
			} else {
				return this.call(null,this.expr(e1),args);
			}
			break;
		case 9:
			var e2 = e.e2;
			var e1 = e.e1;
			var econd = e.cond;
			if(this.expr(econd) == true) {
				return this.expr(e1);
			} else if(e2 == null) {
				return null;
			} else {
				return this.expr(e2);
			}
			break;
		case 10:
			var e1 = e.e;
			var econd = e.cond;
			this.whileLoop(econd,e1);
			return null;
		case 11:
			var e1 = e.e;
			var it = e.it;
			var v = e.v;
			this.forLoop(v,it,e1);
			return null;
		case 12:
			throw haxe_Exception.thrown(hscript__$Interp_Stop.SBreak);
		case 13:
			throw haxe_Exception.thrown(hscript__$Interp_Stop.SContinue);
		case 14:
			var _g = e.ret;
			var name = e.name;
			var fexpr = e.e;
			var params = e.args;
			var capturedLocals = this.duplicate(this.locals);
			var me = this;
			var hasOpt = false;
			var minParams = 0;
			var _g = 0;
			while(_g < params.length) {
				var p = params[_g];
				++_g;
				if(p.opt) {
					hasOpt = true;
				} else {
					minParams += 1;
				}
			}
			var f = function(args) {
				if((args == null ? 0 : args.length) != params.length) {
					if(args.length < minParams) {
						var str = "Invalid number of parameters. Got " + args.length + ", required " + minParams;
						if(name != null) {
							str += " for function '" + name + "'";
						}
						var e = hscript_Error.ECustom(str);
						throw haxe_Exception.thrown(e);
					}
					var args2 = [];
					var extraParams = args.length - minParams;
					var pos = 0;
					var _g = 0;
					while(_g < params.length) {
						var p = params[_g];
						++_g;
						if(p.opt) {
							if(extraParams > 0) {
								args2.push(args[pos++]);
								--extraParams;
							} else {
								args2.push(null);
							}
						} else {
							args2.push(args[pos++]);
						}
					}
					args = args2;
				}
				var old = me.locals;
				var depth = me.depth;
				me.depth++;
				me.locals = me.duplicate(capturedLocals);
				var _g = 0;
				var _g1 = params.length;
				while(_g < _g1) {
					var i = _g++;
					me.locals.h[params[i].name] = { r : args[i]};
				}
				var r = null;
				if(_gthis.inTry) {
					try {
						r = me.exprReturn(fexpr);
					} catch( _g ) {
						haxe_NativeStackTrace.lastError = _g;
						var e = haxe_Exception.caught(_g).unwrap();
						me.locals = old;
						me.depth = depth;
						throw haxe_Exception.thrown(e);
					}
				} else {
					r = me.exprReturn(fexpr);
				}
				me.locals = old;
				me.depth = depth;
				return r;
			};
			var f1 = Reflect.makeVarArgs(f);
			if(name != null) {
				if(this.depth == 0) {
					this.variables.h[name] = f1;
				} else {
					this.declared.push({ n : name, old : this.locals.h[name]});
					var ref = { r : f1};
					this.locals.h[name] = ref;
					capturedLocals.h[name] = ref;
				}
			}
			return f1;
		case 15:
			var e1 = e.e;
			this.returnValue = e1 == null ? null : this.expr(e1);
			throw haxe_Exception.thrown(hscript__$Interp_Stop.SReturn);
		case 16:
			var index = e.index;
			var e1 = e.e;
			var arr = this.expr(e1);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				return (js_Boot.__cast(arr , haxe_IMap)).get(index1);
			} else {
				return arr[index1];
			}
			break;
		case 17:
			var arr = e.e;
			var tmp;
			if(arr.length > 0) {
				var _g = arr[0];
				if(_g._hx_index == 6) {
					var _g1 = _g.e2;
					var _g1 = _g.e1;
					tmp = _g.op == "=>";
				} else {
					tmp = false;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				var isAllString = true;
				var isAllInt = true;
				var isAllObject = true;
				var isAllEnum = true;
				var keys = [];
				var values = [];
				var _g = 0;
				while(_g < arr.length) {
					var e1 = arr[_g];
					++_g;
					if(e1._hx_index == 6) {
						if(e1.op == "=>") {
							var eValue = e1.e2;
							var eKey = e1.e1;
							var key = this.expr(eKey);
							var value = this.expr(eValue);
							isAllString = isAllString && typeof(key) == "string";
							isAllInt = isAllInt && (typeof(key) == "number" && ((key | 0) === key));
							isAllObject = isAllObject && Reflect.isObject(key);
							isAllEnum = isAllEnum && Reflect.isEnumValue(key);
							keys.push(key);
							values.push(value);
						} else {
							throw haxe_Exception.thrown("=> expected");
						}
					} else {
						throw haxe_Exception.thrown("=> expected");
					}
				}
				var map;
				if(isAllInt) {
					map = new haxe_ds_IntMap();
				} else if(isAllString) {
					map = new haxe_ds_StringMap();
				} else if(isAllEnum) {
					map = new haxe_ds_EnumValueMap();
				} else if(isAllObject) {
					map = new haxe_ds_ObjectMap();
				} else {
					throw haxe_Exception.thrown("Inconsistent key types");
				}
				var _g = 0;
				var _g1 = keys.length;
				while(_g < _g1) {
					var n = _g++;
					(js_Boot.__cast(map , haxe_IMap)).set(keys[n],values[n]);
				}
				return map;
			} else {
				var a = [];
				var _g = 0;
				while(_g < arr.length) {
					var e1 = arr[_g];
					++_g;
					a.push(this.expr(e1));
				}
				return a;
			}
			break;
		case 18:
			var params1 = e.params;
			var cl = e.cl;
			var a = [];
			var _g = 0;
			while(_g < params1.length) {
				var e1 = params1[_g];
				++_g;
				a.push(this.expr(e1));
			}
			return this.cnew(cl,a);
		case 19:
			var e1 = e.e;
			throw haxe_Exception.thrown(this.expr(e1));
		case 20:
			var _g = e.t;
			var ecatch = e.ecatch;
			var n = e.v;
			var e1 = e.e;
			var old = this.declared.length;
			var oldTry = this.inTry;
			try {
				this.inTry = true;
				var v = this.expr(e1);
				this.restore(old);
				this.inTry = oldTry;
				return v;
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
					var err = _g1;
					this.inTry = oldTry;
					throw haxe_Exception.thrown(err);
				} else {
					var err = _g1;
					this.restore(old);
					this.inTry = oldTry;
					this.declared.push({ n : n, old : this.locals.h[n]});
					this.locals.h[n] = { r : err};
					var v = this.expr(ecatch);
					this.restore(old);
					return v;
				}
			}
			break;
		case 21:
			var fl = e.fl;
			var o = { };
			var _g = 0;
			while(_g < fl.length) {
				var f = fl[_g];
				++_g;
				this.set(o,f.name,this.expr(f.e));
			}
			return o;
		case 22:
			var e2 = e.e2;
			var e1 = e.e1;
			var econd = e.cond;
			if(this.expr(econd) == true) {
				return this.expr(e1);
			} else {
				return this.expr(e2);
			}
			break;
		case 23:
			var def = e.defaultExpr;
			var cases = e.cases;
			var e1 = e.e;
			var val = this.expr(e1);
			var match = false;
			var _g = 0;
			while(_g < cases.length) {
				var c = cases[_g];
				++_g;
				var _g1 = 0;
				var _g2 = c.values;
				while(_g1 < _g2.length) {
					var v = _g2[_g1];
					++_g1;
					if(this.expr(v) == val) {
						match = true;
						break;
					}
				}
				if(match) {
					val = this.expr(c.expr);
					break;
				}
			}
			if(!match) {
				val = def == null ? null : this.expr(def);
			}
			return val;
		case 24:
			var e1 = e.e;
			var econd = e.cond;
			this.doWhileLoop(econd,e1);
			return null;
		case 25:
			var _g = e.args;
			var _g = e.name;
			var e1 = e.e;
			return this.expr(e1);
		case 26:
			var _g = e.t;
			var e1 = e.e;
			return this.expr(e1);
		}
	}
	,doWhileLoop: function(econd,e) {
		var old = this.declared.length;
		_hx_loop1: while(true) {
			try {
				this.expr(e);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
					var err = _g1;
					switch(err._hx_index) {
					case 0:
						break _hx_loop1;
					case 1:
						break;
					case 2:
						throw haxe_Exception.thrown(err);
					}
				} else {
					throw _g;
				}
			}
			if(!(this.expr(econd) == true)) {
				break;
			}
		}
		this.restore(old);
	}
	,whileLoop: function(econd,e) {
		var old = this.declared.length;
		_hx_loop1: while(this.expr(econd) == true) try {
			this.expr(e);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
				var err = _g1;
				switch(err._hx_index) {
				case 0:
					break _hx_loop1;
				case 1:
					break;
				case 2:
					throw haxe_Exception.thrown(err);
				}
			} else {
				throw _g;
			}
		}
		this.restore(old);
	}
	,makeIterator: function(v) {
		try {
			v = $getIterator(v);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
		if(v.hasNext == null || v.next == null) {
			var e = hscript_Error.EInvalidIterator(v);
			throw haxe_Exception.thrown(e);
		}
		return v;
	}
	,forLoop: function(n,it,e) {
		var old = this.declared.length;
		this.declared.push({ n : n, old : this.locals.h[n]});
		var it1 = this.makeIterator(this.expr(it));
		_hx_loop1: while(it1.hasNext()) {
			var this1 = this.locals;
			var value = { r : it1.next()};
			this1.h[n] = value;
			try {
				this.expr(e);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
					var err = _g1;
					switch(err._hx_index) {
					case 0:
						break _hx_loop1;
					case 1:
						break;
					case 2:
						throw haxe_Exception.thrown(err);
					}
				} else {
					throw _g;
				}
			}
		}
		this.restore(old);
	}
	,isMap: function(o) {
		return js_Boot.__implements(o,haxe_IMap);
	}
	,getMapValue: function(map,key) {
		return (js_Boot.__cast(map , haxe_IMap)).get(key);
	}
	,setMapValue: function(map,key,value) {
		(js_Boot.__cast(map , haxe_IMap)).set(key,value);
	}
	,get: function(o,f) {
		if(o == null) {
			var e = hscript_Error.EInvalidAccess(f);
			throw haxe_Exception.thrown(e);
		}
		return Reflect.getProperty(o,f);
	}
	,set: function(o,f,v) {
		if(o == null) {
			var e = hscript_Error.EInvalidAccess(f);
			throw haxe_Exception.thrown(e);
		}
		Reflect.setProperty(o,f,v);
		return v;
	}
	,fcall: function(o,f,args) {
		return this.call(o,this.get(o,f),args);
	}
	,call: function(o,f,args) {
		return f.apply(o,args);
	}
	,cnew: function(cl,args) {
		var c = $hxClasses[cl];
		if(c == null) {
			c = this.resolve(cl);
		}
		return Type.createInstance(c,args);
	}
	,__class__: hscript_Interp
};
var flixel_system_debug_console__$ConsoleUtil_Interp = function() {
	hscript_Interp.call(this);
};
$hxClasses["flixel.system.debug.console._ConsoleUtil.Interp"] = flixel_system_debug_console__$ConsoleUtil_Interp;
flixel_system_debug_console__$ConsoleUtil_Interp.__name__ = "flixel.system.debug.console._ConsoleUtil.Interp";
flixel_system_debug_console__$ConsoleUtil_Interp.__super__ = hscript_Interp;
flixel_system_debug_console__$ConsoleUtil_Interp.prototype = $extend(hscript_Interp.prototype,{
	getGlobals: function() {
		return this.toArray(haxe_ds_StringMap.keysIterator(this.locals.h)).concat(this.toArray(haxe_ds_StringMap.keysIterator(this.variables.h)));
	}
	,toArray: function(iterator) {
		var array = [];
		var element = iterator;
		while(element.hasNext()) {
			var element1 = element.next();
			array.push(element1);
		}
		return array;
	}
	,get: function(o,f) {
		if(o == null) {
			var e = hscript_Error.EInvalidAccess(f);
			throw haxe_Exception.thrown(e);
		}
		return Reflect.getProperty(o,f);
	}
	,set: function(o,f,v) {
		if(o == null) {
			var e = hscript_Error.EInvalidAccess(f);
			throw haxe_Exception.thrown(e);
		}
		Reflect.setProperty(o,f,v);
		return v;
	}
	,__class__: flixel_system_debug_console__$ConsoleUtil_Interp
});
var flixel_system_debug_interaction_Interaction = function(container) {
	this._flixelPointer = new flixel_input_FlxPointer();
	this._debuggerInteraction = false;
	this._keysUp = new haxe_ds_IntMap();
	this._keysDown = new haxe_ds_IntMap();
	this._turn = 2;
	this._tools = [];
	this.shouldDrawItemsSelection = true;
	this.pointerPressed = false;
	this.pointerJustReleased = false;
	this.pointerJustPressed = false;
	this.flixelPointer = new flixel_math_FlxPoint();
	this.selectedItems = new flixel_group_FlxTypedGroup();
	flixel_system_debug_Window.call(this,"Tools",new flixel_system_debug_GraphicInteractive(0,0),40,25,false);
	this.reposition(2,100);
	this._container = container;
	this._customCursor = new openfl_display_Sprite();
	this._customCursor.mouseEnabled = false;
	this._container.addChild(this._customCursor);
	this.addTool(new flixel_system_debug_interaction_tools_Pointer());
	this.addTool(new flixel_system_debug_interaction_tools_Mover());
	this.addTool(new flixel_system_debug_interaction_tools_Eraser());
	this.addTool(new flixel_system_debug_interaction_tools_Transform());
	flixel_FlxG.signals.postDraw.add($bind(this,this.postDraw));
	flixel_FlxG.debugger.visibilityChanged.add($bind(this,this.handleDebuggerVisibilityChanged));
	openfl_Lib.get_current().stage.addEventListener("mouseMove",$bind(this,this.updateMouse));
	openfl_Lib.get_current().stage.addEventListener("mouseDown",$bind(this,this.handleMouseClick));
	openfl_Lib.get_current().stage.addEventListener("mouseUp",$bind(this,this.handleMouseClick));
	openfl_Lib.get_current().stage.addEventListener("keyDown",$bind(this,this.handleKeyEvent));
	openfl_Lib.get_current().stage.addEventListener("keyUp",$bind(this,this.handleKeyEvent));
	this._container.addEventListener("mouseOver",$bind(this,this.handleMouseInDebugger));
	this._container.addEventListener("mouseOut",$bind(this,this.handleMouseInDebugger));
};
$hxClasses["flixel.system.debug.interaction.Interaction"] = flixel_system_debug_interaction_Interaction;
flixel_system_debug_interaction_Interaction.__name__ = "flixel.system.debug.interaction.Interaction";
flixel_system_debug_interaction_Interaction.__super__ = flixel_system_debug_Window;
flixel_system_debug_interaction_Interaction.prototype = $extend(flixel_system_debug_Window.prototype,{
	activeTool: null
	,selectedItems: null
	,flixelPointer: null
	,pointerJustPressed: null
	,pointerJustReleased: null
	,pointerPressed: null
	,shouldDrawItemsSelection: null
	,_container: null
	,_customCursor: null
	,_tools: null
	,_turn: null
	,_keysDown: null
	,_keysUp: null
	,_wasMouseVisible: null
	,_wasUsingSystemCursor: null
	,_debuggerInteraction: null
	,_flixelPointer: null
	,handleDebuggerVisibilityChanged: function() {
		if(flixel_FlxG.debugger.visible) {
			this.saveSystemCursorInfo();
		} else {
			this.restoreSystemCursor();
		}
	}
	,updateMouse: function(event) {
		if(event.stageX == null || event.stageY == null) {
			return;
		}
		var offsetX = 0.0;
		var offsetY = 0.0;
		if(this.activeTool != null) {
			var cursorIcon = this.activeTool.cursor;
			if(cursorIcon != null) {
				offsetX = cursorIcon.width / flixel_FlxG.scaleMode.scale.x / 2;
				offsetY = cursorIcon.height / flixel_FlxG.scaleMode.scale.y / 2;
			}
		}
		this._customCursor.set_x(event.stageX + offsetX);
		this._customCursor.set_y(event.stageY + offsetY);
		var _this = this._flixelPointer;
		_this._globalScreenX = event.stageX / flixel_FlxG.scaleMode.scale.x | 0;
		_this._globalScreenY = event.stageY / flixel_FlxG.scaleMode.scale.y | 0;
		_this.updatePositions();
		this.flixelPointer.set_x(this._flixelPointer.x + offsetX);
		this.flixelPointer.set_y(this._flixelPointer.y + offsetY);
	}
	,handleMouseClick: function(event) {
		if(event.type == "mouseDown" && this.belongsToDebugger(event.target)) {
			return;
		}
		this.pointerJustPressed = event.type == "mouseDown";
		this.pointerJustReleased = event.type == "mouseUp";
		if(this.pointerJustPressed) {
			this.pointerPressed = true;
		} else if(this.pointerJustReleased) {
			this.pointerPressed = false;
		}
	}
	,belongsToDebugger: function(object) {
		if(object == null) {
			return false;
		} else if(((object) instanceof flixel_system_debug_FlxDebugger)) {
			return true;
		}
		return this.belongsToDebugger(object.parent);
	}
	,handleMouseInDebugger: function(event) {
		if(!this.isActive()) {
			return;
		}
		if(event.type == "mouseOver") {
			this._debuggerInteraction = true;
		} else if(event.type == "mouseOut") {
			this._debuggerInteraction = false;
		}
		event.stopPropagation();
	}
	,handleKeyEvent: function(event) {
		if(event.type == "keyDown") {
			this._keysDown.h[event.keyCode] = true;
		} else if(event.type == "keyUp") {
			this._keysDown.h[event.keyCode] = false;
			this._keysUp.h[event.keyCode] = this._turn;
		}
	}
	,countToolsWithUIButton: function() {
		var count = 0;
		var _g = 0;
		var _g1 = this._tools;
		while(_g < _g1.length) {
			var tool = _g1[_g];
			++_g;
			if(tool.button != null) {
				++count;
			}
		}
		return count;
	}
	,addTool: function(tool) {
		tool.init(this);
		this._tools.push(tool);
		var button = tool.button;
		if(button == null) {
			return;
		}
		var buttonsPerLine = 2;
		var buttons = this.countToolsWithUIButton();
		var lines = Math.ceil(buttons / buttonsPerLine) | 0;
		var slot = buttons / lines | 0;
		button.set_x(-15 + slot * 25);
		button.set_y(20 * lines);
		this.addChild(button);
		this.resize(25 * Math.min(buttons,buttonsPerLine) + 10,25 * lines + 10);
	}
	,destroy: function() {
		flixel_FlxG.signals.postDraw.remove($bind(this,this.postDraw));
		flixel_FlxG.debugger.visibilityChanged.remove($bind(this,this.handleDebuggerVisibilityChanged));
		openfl_Lib.get_current().stage.removeEventListener("mouseMove",$bind(this,this.updateMouse));
		openfl_Lib.get_current().stage.removeEventListener("mouseDown",$bind(this,this.handleMouseClick));
		openfl_Lib.get_current().stage.removeEventListener("mouseUp",$bind(this,this.handleMouseClick));
		openfl_Lib.get_current().stage.removeEventListener("keyDown",$bind(this,this.handleKeyEvent));
		openfl_Lib.get_current().stage.removeEventListener("keyUp",$bind(this,this.handleKeyEvent));
		if(this._container != null) {
			this._container.removeEventListener("mouseOver",$bind(this,this.handleMouseInDebugger));
			this._container.removeEventListener("mouseOut",$bind(this,this.handleMouseInDebugger));
		}
		if(this._customCursor != null) {
			this._customCursor.parent.removeChild(this._customCursor);
			this._customCursor = null;
		}
		this._tools = flixel_util_FlxDestroyUtil.destroyArray(this._tools);
		this.selectedItems = flixel_util_FlxDestroyUtil.destroy(this.selectedItems);
		this.flixelPointer = flixel_util_FlxDestroyUtil.destroy(this.flixelPointer);
		this._keysDown = null;
		this._keysUp = null;
	}
	,isActive: function() {
		if(flixel_FlxG.debugger.visible) {
			return this.get_visible();
		} else {
			return false;
		}
	}
	,update: function() {
		if(!this.isActive()) {
			return;
		}
		this.updateCustomCursors();
		var _g = 0;
		var _g1 = this._tools;
		while(_g < _g1.length) {
			var tool = _g1[_g];
			++_g;
			tool.update();
		}
		this.pointerJustPressed = false;
		this.pointerJustReleased = false;
		this._turn++;
	}
	,postDraw: function() {
		if(!this.isActive()) {
			return;
		}
		var _g = 0;
		var _g1 = this._tools;
		while(_g < _g1.length) {
			var tool = _g1[_g];
			++_g;
			tool.draw();
		}
		if(this.shouldDrawItemsSelection) {
			this.drawItemsSelection();
		}
	}
	,getDebugGraphics: function() {
		if(flixel_FlxG.renderBlit) {
			flixel_util_FlxSpriteUtil.flashGfx.clear();
			return flixel_util_FlxSpriteUtil.flashGfx;
		}
		return null;
	}
	,drawItemsSelection: function() {
		var gfx = this.getDebugGraphics();
		if(gfx == null) {
			return;
		}
		var member = new flixel_group_FlxTypedGroupIterator(this.selectedItems.members,null);
		while(member.hasNext()) {
			var member1 = member.next();
			if(member1 != null && member1.scrollFactor != null && member1.isOnScreen()) {
				gfx.lineStyle(0.9,16711680);
				gfx.drawRect(member1.x - flixel_FlxG.camera.scroll.x,member1.y - flixel_FlxG.camera.scroll.y,member1.get_width(),member1.get_height());
			}
		}
		if(flixel_FlxG.renderBlit) {
			flixel_FlxG.camera.buffer.draw(flixel_util_FlxSpriteUtil.flashGfxSprite);
		}
	}
	,getTool: function(className) {
		var _g = 0;
		var _g1 = this._tools;
		while(_g < _g1.length) {
			var tool = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(tool,className)) {
				return tool;
			}
		}
		return null;
	}
	,toggleVisible: function() {
		flixel_system_debug_Window.prototype.toggleVisible.call(this);
		if(!this.get_visible()) {
			this.setActiveTool(null);
			this.restoreSystemCursor();
		}
	}
	,registerCustomCursor: function(name,icon) {
		if(icon == null) {
			return;
		}
		var sprite = new openfl_display_Sprite();
		sprite.set_visible(false);
		sprite.set_name(name);
		sprite.addChild(new openfl_display_Bitmap(icon));
		this._customCursor.addChild(sprite);
	}
	,updateCustomCursors: function() {
		if(this.activeTool != null && !this._debuggerInteraction) {
			if(this.activeTool.cursor != null) {
				var cursorInUse = this.activeTool.cursorInUse == "" ? this.activeTool.getName() : this.activeTool.cursorInUse;
				var _g = 0;
				var _g1 = this._customCursor.get_numChildren();
				while(_g < _g1) {
					var i = _g++;
					var sprite = this._customCursor.getChildAt(i);
					sprite.set_visible(sprite.get_name() == cursorInUse);
				}
				if(flixel_FlxG.mouse.visible) {
					flixel_FlxG.mouse.set_visible(false);
				}
			} else {
				flixel_FlxG.mouse.set_useSystemCursor(true);
			}
		} else {
			flixel_FlxG.mouse.set_useSystemCursor(true);
		}
	}
	,saveSystemCursorInfo: function() {
		this._wasMouseVisible = flixel_FlxG.mouse.visible;
		this._wasUsingSystemCursor = flixel_FlxG.mouse.useSystemCursor;
	}
	,restoreSystemCursor: function() {
		flixel_FlxG.mouse.set_useSystemCursor(this._wasUsingSystemCursor);
		flixel_FlxG.mouse.set_visible(this._wasMouseVisible);
		this._customCursor.set_visible(false);
	}
	,setActiveTool: function(value) {
		if(this.activeTool != null) {
			this.activeTool.deactivate();
			this.activeTool.button.set_toggled(true);
		}
		if(this.activeTool == value) {
			value = null;
		}
		this.activeTool = value;
		if(this.activeTool != null) {
			this.setToolsCursorVisibility(true);
			this.activeTool.button.set_toggled(false);
			this.activeTool.activate();
			this.updateCustomCursors();
		} else {
			this.setSystemCursorVisibility(true);
		}
		flixel_FlxG.mouse.enabled = !this.isInUse();
	}
	,setSystemCursorVisibility: function(status) {
		flixel_FlxG.mouse.set_useSystemCursor(status);
		this._customCursor.set_visible(!status);
	}
	,setToolsCursorVisibility: function(status) {
		flixel_FlxG.mouse.set_useSystemCursor(false);
		this._customCursor.set_visible(status);
		if(status) {
			return;
		}
		var _g = 0;
		var _g1 = this._customCursor.get_numChildren();
		while(_g < _g1) {
			var i = _g++;
			this._customCursor.getChildAt(i).set_visible(false);
		}
	}
	,clearSelection: function() {
		this.selectedItems.clear();
	}
	,keyPressed: function(key) {
		return this._keysDown.h[key];
	}
	,keyJustPressed: function(key) {
		var value = this._keysUp.h[key] == null ? 0 : this._keysUp.h[key];
		return this._turn - value == 1;
	}
	,isInUse: function() {
		if(flixel_FlxG.debugger.visible && this.get_visible()) {
			return this.activeTool != null;
		} else {
			return false;
		}
	}
	,findItemsWithinState: function(items,state,area) {
		this.findItemsWithinArea(items,state.members,area);
		if(state.subState != null) {
			this.findItemsWithinState(items,state.subState,area);
		}
	}
	,findItemsWithinArea: function(items,members,area) {
		var i = members.length;
		while(i-- > 0) {
			var member = members[i];
			if(member == null || !member.visible || !member.exists) {
				continue;
			}
			var group = flixel_group_FlxTypedGroup.resolveGroup(member);
			if(group != null) {
				this.findItemsWithinArea(items,group.members,area);
			} else {
				var tmp;
				if(((member) instanceof flixel_FlxSprite)) {
					var Rect = (js_Boot.__cast(member , flixel_FlxSprite)).getHitbox();
					var result = Rect.x + Rect.width > area.x && Rect.x < area.x + area.width && Rect.y + Rect.height > area.y && Rect.y < area.y + area.height;
					if(Rect._weak) {
						if(!Rect._inPool) {
							Rect._inPool = true;
							Rect._weak = false;
							flixel_math_FlxRect._pool.putUnsafe(Rect);
						}
					}
					tmp = result;
				} else {
					tmp = false;
				}
				if(tmp) {
					items.push(member);
				}
			}
		}
	}
	,__class__: flixel_system_debug_interaction_Interaction
});
var flixel_system_debug_interaction_tools__$Eraser_GraphicEraserTool = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_interaction_tools__$Eraser_GraphicEraserTool.preload != null) {
		this.__fromImage(flixel_system_debug_interaction_tools__$Eraser_GraphicEraserTool.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_interaction_tools__$Eraser_GraphicEraserTool.resourceName),flixel_system_debug_interaction_tools__$Eraser_GraphicEraserTool.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_debug_interaction_tools__$Eraser_GraphicEraserTool.preload == null) {
				flixel_system_debug_interaction_tools__$Eraser_GraphicEraserTool.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.debug.interaction.tools._Eraser.GraphicEraserTool"] = flixel_system_debug_interaction_tools__$Eraser_GraphicEraserTool;
flixel_system_debug_interaction_tools__$Eraser_GraphicEraserTool.__name__ = "flixel.system.debug.interaction.tools._Eraser.GraphicEraserTool";
flixel_system_debug_interaction_tools__$Eraser_GraphicEraserTool.preload = null;
flixel_system_debug_interaction_tools__$Eraser_GraphicEraserTool.__super__ = openfl_display_BitmapData;
flixel_system_debug_interaction_tools__$Eraser_GraphicEraserTool.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_interaction_tools__$Eraser_GraphicEraserTool
});
var flixel_system_debug_interaction_tools_Tool = function() {
	this._name = "(Unknown tool)";
	this.cursorInUse = "";
	openfl_display_Sprite.call(this);
};
$hxClasses["flixel.system.debug.interaction.tools.Tool"] = flixel_system_debug_interaction_tools_Tool;
flixel_system_debug_interaction_tools_Tool.__name__ = "flixel.system.debug.interaction.tools.Tool";
flixel_system_debug_interaction_tools_Tool.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_system_debug_interaction_tools_Tool.__super__ = openfl_display_Sprite;
flixel_system_debug_interaction_tools_Tool.prototype = $extend(openfl_display_Sprite.prototype,{
	button: null
	,cursor: null
	,cursorInUse: null
	,_name: null
	,_shortcut: null
	,_brain: null
	,init: function(brain) {
		this._brain = brain;
		return this;
	}
	,update: function() {
	}
	,draw: function() {
	}
	,activate: function() {
	}
	,deactivate: function() {
	}
	,destroy: function() {
	}
	,isActive: function() {
		if(this._brain.activeTool == this) {
			return this._brain.get_visible();
		} else {
			return false;
		}
	}
	,setButton: function(Icon) {
		this.button = new flixel_system_ui_FlxSystemButton(Type.createInstance(Icon,[0,0]),$bind(this,this.onButtonClicked),true);
		this.button.set_toggled(true);
		var tooltip = this._name;
		if(this._shortcut != null) {
			tooltip += " (" + this._shortcut + ")";
		}
		flixel_system_debug_Tooltip.add(this.button,tooltip);
	}
	,setCursor: function(Icon) {
		this.cursor = Icon;
		this._brain.registerCustomCursor(this._name,this.cursor);
	}
	,setCursorInUse: function(customCursorName) {
		this.cursorInUse = customCursorName;
	}
	,useDefaultCursor: function() {
		if(this.cursorInUse != "") {
			this.cursorInUse = "";
		}
	}
	,onButtonClicked: function() {
		this._brain.setActiveTool(this);
	}
	,getName: function() {
		return this._name;
	}
	,__class__: flixel_system_debug_interaction_tools_Tool
});
var flixel_system_debug_interaction_tools_Eraser = function() {
	flixel_system_debug_interaction_tools_Tool.call(this);
};
$hxClasses["flixel.system.debug.interaction.tools.Eraser"] = flixel_system_debug_interaction_tools_Eraser;
flixel_system_debug_interaction_tools_Eraser.__name__ = "flixel.system.debug.interaction.tools.Eraser";
flixel_system_debug_interaction_tools_Eraser.__super__ = flixel_system_debug_interaction_tools_Tool;
flixel_system_debug_interaction_tools_Eraser.prototype = $extend(flixel_system_debug_interaction_tools_Tool.prototype,{
	init: function(Brain) {
		flixel_system_debug_interaction_tools_Tool.prototype.init.call(this,Brain);
		this._name = "Eraser";
		return this;
	}
	,update: function() {
		if(this._brain.keyJustPressed(46)) {
			this.doDeletion(this._brain.keyPressed(16));
		}
	}
	,activate: function() {
		this.doDeletion(this._brain.keyPressed(16));
		this._brain.setActiveTool(null);
	}
	,doDeletion: function(remove) {
		var selectedItems = this._brain.selectedItems;
		if(selectedItems != null) {
			this.findAndDelete(selectedItems,remove);
			selectedItems.clear();
		}
	}
	,findAndDelete: function(items,remove) {
		if(remove == null) {
			remove = false;
		}
		var member = new flixel_group_FlxTypedGroupIterator(items.members,null);
		while(member.hasNext()) {
			var member1 = member.next();
			if(member1 == null) {
				continue;
			}
			if(!((member1) instanceof flixel_group_FlxTypedGroup)) {
				member1.kill();
				if(remove) {
					this.removeFromMemory(member1,flixel_FlxG.game._state);
				}
			}
		}
	}
	,removeFromMemory: function(item,parentGroup) {
		var _g = 0;
		var _g1 = parentGroup.members;
		while(_g < _g1.length) {
			var member = _g1[_g];
			++_g;
			if(member == null) {
				continue;
			}
			if(((member) instanceof flixel_group_FlxTypedGroup)) {
				this.removeFromMemory(item,member);
			} else if(member == item) {
				parentGroup.remove(member);
			}
		}
	}
	,__class__: flixel_system_debug_interaction_tools_Eraser
});
var flixel_system_debug_interaction_tools__$Mover_GraphicMoverTool = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_interaction_tools__$Mover_GraphicMoverTool.preload != null) {
		this.__fromImage(flixel_system_debug_interaction_tools__$Mover_GraphicMoverTool.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_interaction_tools__$Mover_GraphicMoverTool.resourceName),flixel_system_debug_interaction_tools__$Mover_GraphicMoverTool.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_debug_interaction_tools__$Mover_GraphicMoverTool.preload == null) {
				flixel_system_debug_interaction_tools__$Mover_GraphicMoverTool.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.debug.interaction.tools._Mover.GraphicMoverTool"] = flixel_system_debug_interaction_tools__$Mover_GraphicMoverTool;
flixel_system_debug_interaction_tools__$Mover_GraphicMoverTool.__name__ = "flixel.system.debug.interaction.tools._Mover.GraphicMoverTool";
flixel_system_debug_interaction_tools__$Mover_GraphicMoverTool.preload = null;
flixel_system_debug_interaction_tools__$Mover_GraphicMoverTool.__super__ = openfl_display_BitmapData;
flixel_system_debug_interaction_tools__$Mover_GraphicMoverTool.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_interaction_tools__$Mover_GraphicMoverTool
});
var flixel_system_debug_interaction_tools_Mover = function() {
	this._dragging = false;
	flixel_system_debug_interaction_tools_Tool.call(this);
};
$hxClasses["flixel.system.debug.interaction.tools.Mover"] = flixel_system_debug_interaction_tools_Mover;
flixel_system_debug_interaction_tools_Mover.__name__ = "flixel.system.debug.interaction.tools.Mover";
flixel_system_debug_interaction_tools_Mover.__super__ = flixel_system_debug_interaction_tools_Tool;
flixel_system_debug_interaction_tools_Mover.prototype = $extend(flixel_system_debug_interaction_tools_Tool.prototype,{
	_dragging: null
	,_lastCursorPosition: null
	,init: function(brain) {
		flixel_system_debug_interaction_tools_Tool.prototype.init.call(this,brain);
		this._lastCursorPosition = new flixel_math_FlxPoint(brain.flixelPointer.x,brain.flixelPointer.x);
		this._name = "Mover";
		this._shortcut = "Shift";
		this.setButton(flixel_system_debug_interaction_tools__$Mover_GraphicMoverTool);
		this.setCursor(new flixel_system_debug_interaction_tools__$Mover_GraphicMoverTool(0,0));
		return this;
	}
	,update: function() {
		if(!this.isActive() && !this._brain.keyPressed(16)) {
			return;
		}
		if(this._brain.pointerPressed && !this._dragging) {
			this.startDragging();
		} else if(this._brain.pointerPressed && this._dragging) {
			this.doDragging();
		} else if(this._brain.pointerJustReleased) {
			this.stopDragging();
		}
		this._lastCursorPosition.set_x(this._brain.flixelPointer.x);
		this._lastCursorPosition.set_y(this._brain.flixelPointer.y);
	}
	,stopDragging: function() {
		this._dragging = false;
	}
	,startDragging: function() {
		if(this._dragging) {
			return;
		}
		this._dragging = true;
		if(!this.isActive() && ((this._brain.activeTool) instanceof flixel_system_debug_interaction_tools_Pointer)) {
			this._brain.activeTool.cancelSelection();
		}
	}
	,doDragging: function() {
		var dx = this._brain.flixelPointer.x - this._lastCursorPosition.x;
		var dy = this._brain.flixelPointer.y - this._lastCursorPosition.y;
		var _g = 0;
		var _g1 = this._brain.selectedItems.members;
		while(_g < _g1.length) {
			var member = _g1[_g];
			++_g;
			if(!((member) instanceof flixel_FlxObject)) {
				continue;
			}
			var object = member;
			if(object != null) {
				var _g2 = object;
				_g2.set_x(_g2.x + dx);
				var _g3 = object;
				_g3.set_y(_g3.y + dy);
			}
		}
	}
	,__class__: flixel_system_debug_interaction_tools_Mover
});
var flixel_system_debug_interaction_tools_GraphicCursorCross = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_interaction_tools_GraphicCursorCross.preload != null) {
		this.__fromImage(flixel_system_debug_interaction_tools_GraphicCursorCross.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_interaction_tools_GraphicCursorCross.resourceName),flixel_system_debug_interaction_tools_GraphicCursorCross.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_debug_interaction_tools_GraphicCursorCross.preload == null) {
				flixel_system_debug_interaction_tools_GraphicCursorCross.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.debug.interaction.tools.GraphicCursorCross"] = flixel_system_debug_interaction_tools_GraphicCursorCross;
flixel_system_debug_interaction_tools_GraphicCursorCross.__name__ = "flixel.system.debug.interaction.tools.GraphicCursorCross";
flixel_system_debug_interaction_tools_GraphicCursorCross.preload = null;
flixel_system_debug_interaction_tools_GraphicCursorCross.__super__ = openfl_display_BitmapData;
flixel_system_debug_interaction_tools_GraphicCursorCross.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_interaction_tools_GraphicCursorCross
});
var flixel_system_debug_interaction_tools_Pointer = function() {
	this._itemsInSelectionArea = [];
	this._selectionArea = new flixel_math_FlxRect();
	this._selectionCancelled = false;
	this._selectionHappening = false;
	this._selectionEndPoint = new flixel_math_FlxPoint();
	this._selectionStartPoint = new flixel_math_FlxPoint();
	flixel_system_debug_interaction_tools_Tool.call(this);
};
$hxClasses["flixel.system.debug.interaction.tools.Pointer"] = flixel_system_debug_interaction_tools_Pointer;
flixel_system_debug_interaction_tools_Pointer.__name__ = "flixel.system.debug.interaction.tools.Pointer";
flixel_system_debug_interaction_tools_Pointer.__super__ = flixel_system_debug_interaction_tools_Tool;
flixel_system_debug_interaction_tools_Pointer.prototype = $extend(flixel_system_debug_interaction_tools_Tool.prototype,{
	_selectionStartPoint: null
	,_selectionEndPoint: null
	,_selectionHappening: null
	,_selectionCancelled: null
	,_selectionArea: null
	,_itemsInSelectionArea: null
	,init: function(brain) {
		flixel_system_debug_interaction_tools_Tool.prototype.init.call(this,brain);
		this._name = "Pointer";
		this.setButton(flixel_system_debug_interaction_tools_GraphicCursorCross);
		this.setCursor(new flixel_system_debug_interaction_tools_GraphicCursorCross(0,0));
		return this;
	}
	,update: function() {
		if(!this.isActive()) {
			return;
		}
		if(this._brain.pointerJustPressed && !this._selectionHappening) {
			this.startSelection();
		}
		if(this._selectionHappening) {
			this._selectionEndPoint.set(this._brain.flixelPointer.x,this._brain.flixelPointer.y);
			this.calculateSelectionArea();
		}
		if(!this._brain.pointerJustReleased) {
			return;
		}
		if(this._selectionHappening) {
			this.stopSelection();
		}
		if(this._itemsInSelectionArea.length > 0) {
			this.handleItemAddition(this._itemsInSelectionArea);
		} else if(!this._brain.keyPressed(17) && !this._selectionCancelled) {
			this._brain.clearSelection();
		}
	}
	,calculateSelectionArea: function() {
		this._selectionArea.x = this._selectionStartPoint.x;
		this._selectionArea.y = this._selectionStartPoint.y;
		this._selectionArea.width = this._selectionEndPoint.x - this._selectionArea.x;
		this._selectionArea.height = this._selectionEndPoint.y - this._selectionArea.y;
		if(this._selectionArea.width < 0) {
			this._selectionArea.width *= -1;
			this._selectionArea.x -= this._selectionArea.width;
		}
		if(this._selectionArea.height < 0) {
			this._selectionArea.height *= -1;
			this._selectionArea.y -= this._selectionArea.height;
		}
	}
	,startSelection: function() {
		this._selectionHappening = true;
		this._selectionCancelled = false;
		this._selectionStartPoint.set(this._brain.flixelPointer.x,this._brain.flixelPointer.y);
		flixel_util_FlxArrayUtil.clearArray(this._itemsInSelectionArea);
		this.updateConsoleSelection();
	}
	,cancelSelection: function() {
		if(!this._selectionHappening) {
			return;
		}
		this._selectionCancelled = true;
		this.stopSelection(false);
	}
	,stopSelection: function(findItems) {
		if(findItems == null) {
			findItems = true;
		}
		if(!this._selectionHappening) {
			return;
		}
		this._selectionEndPoint.set(this._brain.flixelPointer.x,this._brain.flixelPointer.y);
		this.calculateSelectionArea();
		if(findItems) {
			this._brain.findItemsWithinState(this._itemsInSelectionArea,flixel_FlxG.game._state,this._selectionArea);
			this.updateConsoleSelection();
		}
		this._selectionHappening = false;
		var _this = this._selectionArea;
		var X = 0;
		var Y = 0;
		var Width = 0;
		var Height = 0;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
	}
	,updateConsoleSelection: function() {
	}
	,handleItemAddition: function(itemsInSelectionArea) {
		var adding = this._brain.keyPressed(17);
		var selectedItems = this._brain.selectedItems;
		if(itemsInSelectionArea.length == 0) {
			return;
		}
		if(!adding) {
			this._brain.clearSelection();
		}
		var _g = 0;
		while(_g < itemsInSelectionArea.length) {
			var item = itemsInSelectionArea[_g];
			++_g;
			if(selectedItems.members.indexOf(item) != -1 && adding) {
				selectedItems.remove(item);
			} else {
				selectedItems.add(item);
			}
		}
	}
	,draw: function() {
		var gfx = this._brain.getDebugGraphics();
		if(gfx == null) {
			return;
		}
		if(this._selectionHappening) {
			gfx.lineStyle(0.9,12255232);
			gfx.drawRect(this._selectionArea.x - flixel_FlxG.camera.scroll.x,this._selectionArea.y - flixel_FlxG.camera.scroll.y,this._selectionArea.width,this._selectionArea.height);
		}
		if(flixel_FlxG.renderBlit) {
			flixel_FlxG.camera.buffer.draw(flixel_util_FlxSpriteUtil.flashGfxSprite);
		}
	}
	,__class__: flixel_system_debug_interaction_tools_Pointer
});
var flixel_system_debug_interaction_tools__$Transform_GraphicTransformTool = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_interaction_tools__$Transform_GraphicTransformTool.preload != null) {
		this.__fromImage(flixel_system_debug_interaction_tools__$Transform_GraphicTransformTool.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_interaction_tools__$Transform_GraphicTransformTool.resourceName),flixel_system_debug_interaction_tools__$Transform_GraphicTransformTool.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_debug_interaction_tools__$Transform_GraphicTransformTool.preload == null) {
				flixel_system_debug_interaction_tools__$Transform_GraphicTransformTool.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.debug.interaction.tools._Transform.GraphicTransformTool"] = flixel_system_debug_interaction_tools__$Transform_GraphicTransformTool;
flixel_system_debug_interaction_tools__$Transform_GraphicTransformTool.__name__ = "flixel.system.debug.interaction.tools._Transform.GraphicTransformTool";
flixel_system_debug_interaction_tools__$Transform_GraphicTransformTool.preload = null;
flixel_system_debug_interaction_tools__$Transform_GraphicTransformTool.__super__ = openfl_display_BitmapData;
flixel_system_debug_interaction_tools__$Transform_GraphicTransformTool.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_interaction_tools__$Transform_GraphicTransformTool
});
var flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorDefault = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorDefault.preload != null) {
		this.__fromImage(flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorDefault.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorDefault.resourceName),flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorDefault.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorDefault.preload == null) {
				flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorDefault.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.debug.interaction.tools._Transform.GraphicTransformCursorDefault"] = flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorDefault;
flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorDefault.__name__ = "flixel.system.debug.interaction.tools._Transform.GraphicTransformCursorDefault";
flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorDefault.preload = null;
flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorDefault.__super__ = openfl_display_BitmapData;
flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorDefault.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorDefault
});
var flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleY = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleY.preload != null) {
		this.__fromImage(flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleY.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleY.resourceName),flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleY.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleY.preload == null) {
				flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleY.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.debug.interaction.tools._Transform.GraphicTransformCursorScaleY"] = flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleY;
flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleY.__name__ = "flixel.system.debug.interaction.tools._Transform.GraphicTransformCursorScaleY";
flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleY.preload = null;
flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleY.__super__ = openfl_display_BitmapData;
flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleY.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleY
});
var flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleX = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleX.preload != null) {
		this.__fromImage(flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleX.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleX.resourceName),flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleX.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleX.preload == null) {
				flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleX.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.debug.interaction.tools._Transform.GraphicTransformCursorScaleX"] = flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleX;
flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleX.__name__ = "flixel.system.debug.interaction.tools._Transform.GraphicTransformCursorScaleX";
flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleX.preload = null;
flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleX.__super__ = openfl_display_BitmapData;
flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleX.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleX
});
var flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleXY = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleXY.preload != null) {
		this.__fromImage(flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleXY.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleXY.resourceName),flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleXY.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleXY.preload == null) {
				flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleXY.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.debug.interaction.tools._Transform.GraphicTransformCursorScaleXY"] = flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleXY;
flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleXY.__name__ = "flixel.system.debug.interaction.tools._Transform.GraphicTransformCursorScaleXY";
flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleXY.preload = null;
flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleXY.__super__ = openfl_display_BitmapData;
flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleXY.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleXY
});
var flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorRotate = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorRotate.preload != null) {
		this.__fromImage(flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorRotate.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorRotate.resourceName),flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorRotate.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorRotate.preload == null) {
				flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorRotate.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.debug.interaction.tools._Transform.GraphicTransformCursorRotate"] = flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorRotate;
flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorRotate.__name__ = "flixel.system.debug.interaction.tools._Transform.GraphicTransformCursorRotate";
flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorRotate.preload = null;
flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorRotate.__super__ = openfl_display_BitmapData;
flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorRotate.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorRotate
});
var flixel_system_debug_interaction_tools_Transform = function() {
	this._mouseCursor = new flixel_math_FlxPoint();
	this._targetArea = new flixel_math_FlxRect();
	this._markers = [];
	this._actionScaleDirection = new flixel_math_FlxPoint();
	this._actionStartPoint = new flixel_math_FlxPoint();
	this._actionTargetStartScale = new flixel_math_FlxPoint();
	flixel_system_debug_interaction_tools_Tool.call(this);
};
$hxClasses["flixel.system.debug.interaction.tools.Transform"] = flixel_system_debug_interaction_tools_Transform;
flixel_system_debug_interaction_tools_Transform.__name__ = "flixel.system.debug.interaction.tools.Transform";
flixel_system_debug_interaction_tools_Transform.__super__ = flixel_system_debug_interaction_tools_Tool;
flixel_system_debug_interaction_tools_Transform.prototype = $extend(flixel_system_debug_interaction_tools_Tool.prototype,{
	_actionTargetStartScale: null
	,_actionTargetStartAngle: null
	,_actionStartPoint: null
	,_actionHappening: null
	,_actionMarker: null
	,_actionScaleDirection: null
	,_tooltip: null
	,_markers: null
	,_target: null
	,_targetArea: null
	,_mouseCursor: null
	,init: function(brain) {
		var _gthis = this;
		flixel_system_debug_interaction_tools_Tool.prototype.init.call(this,brain);
		this._name = "Transform";
		this.setButton(flixel_system_debug_interaction_tools__$Transform_GraphicTransformTool);
		this.setCursor(new flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorDefault(0,0));
		brain.registerCustomCursor("transformRotate",new flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorRotate(0,0));
		brain.registerCustomCursor("transformScaleX",new flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleX(0,0));
		brain.registerCustomCursor("transformScaleY",new flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleY(0,0));
		brain.registerCustomCursor("transformScaleXY",new flixel_system_debug_interaction_tools__$Transform_GraphicTransformCursorScaleXY(0,0));
		this._tooltip = flixel_system_debug_Tooltip.add(null,"");
		this._tooltip.textField.set_wordWrap(false);
		this._markers.push(new flixel_math_FlxPoint());
		this._markers.push(new flixel_math_FlxPoint());
		this._markers.push(new flixel_math_FlxPoint());
		this._markers.push(new flixel_math_FlxPoint());
		this.stopAction();
		flixel_FlxG.signals.preStateSwitch.add(function() {
			_gthis._target = null;
		});
		return this;
	}
	,updateTargetArea: function() {
		if(this._target == null) {
			var _this = this._targetArea;
			_this.x = 0;
			_this.y = 0;
			var _this = this._targetArea;
			_this.width = 0;
			_this.height = 0;
		} else {
			var _this = this._targetArea;
			_this.x = this._target.x - flixel_FlxG.camera.scroll.x;
			_this.y = this._target.y - flixel_FlxG.camera.scroll.y;
			var _this = this._targetArea;
			var Width = this._target.get_width();
			var Height = this._target.get_height();
			_this.width = Width;
			_this.height = Height;
		}
	}
	,startAction: function(whichMarker) {
		if(this._actionHappening) {
			return;
		}
		this._actionHappening = true;
		this._actionMarker = whichMarker;
		this._actionStartPoint.set(this._brain.flixelPointer.x - flixel_FlxG.camera.scroll.x,this._brain.flixelPointer.y - flixel_FlxG.camera.scroll.y);
		this._actionTargetStartAngle = flixel_math_FlxAngle.angleBetweenPoint(this._target,this._markers[0],true);
		this._actionTargetStartScale.set(this._target.scale.x,this._target.scale.y);
	}
	,stopAction: function() {
		this._actionHappening = false;
		this._actionMarker = -1;
		this._tooltip.setVisible(false);
	}
	,getCursorNameByMarker: function(marker) {
		switch(marker) {
		case 0:
			return "transformRotate";
		case 1:
			return "transformScaleX";
		case 2:
			return "transformScaleXY";
		case 3:
			return "transformScaleY";
		default:
			return "";
		}
	}
	,handleInteractionsWithMarkersUI: function() {
		if(this._actionHappening) {
			return;
		}
		var cursorName = "";
		var _g = 0;
		var _g1 = this._markers.length;
		while(_g < _g1) {
			var i = _g++;
			if(this._mouseCursor.distanceTo(this._markers[i]) <= 5.0) {
				cursorName = this.getCursorNameByMarker(i);
				if(this._brain.pointerJustPressed) {
					this.startAction(i);
					break;
				}
			}
		}
		if(cursorName != "") {
			this.setCursorInUse(cursorName);
		} else {
			this.useDefaultCursor();
		}
	}
	,formatFloat: function(number) {
		var value = flixel_math_FlxMath.roundDecimal(number,flixel_FlxG.debugger.precision);
		if(value == null) {
			return "null";
		} else {
			return "" + value;
		}
	}
	,showTooltip: function(text) {
		if(!this._tooltip.get_visible()) {
			this._tooltip.setVisible(true);
		}
		this._tooltip.set_x(this._target.x - flixel_FlxG.camera.scroll.x);
		this._tooltip.set_y(this._target.y - flixel_FlxG.camera.scroll.y);
		this._tooltip.setText(text);
	}
	,updateScaleActionDirection: function() {
		var deltaX = this._mouseCursor.x - this._actionStartPoint.x;
		var deltaY = this._mouseCursor.y - this._actionStartPoint.y;
		this._actionScaleDirection.set_x(deltaX >= 0 ? 1 : -1);
		this._actionScaleDirection.set_y(deltaY >= 0 ? 1 : -1);
	}
	,updateScaleAction: function() {
		this.updateScaleActionDirection();
		var deltaX = this._actionScaleDirection.x * Math.abs(this._mouseCursor.x - this._actionStartPoint.x) / 10.0;
		var deltaY = this._actionScaleDirection.y * Math.abs(this._mouseCursor.y - this._actionStartPoint.y) / 10.0;
		if(this._actionMarker == 1 || this._actionMarker == 2) {
			this._target.scale.set_x(this._actionTargetStartScale.x + deltaX);
		}
		if(this._actionMarker == 2 || this._actionMarker == 3) {
			this._target.scale.set_y(this._actionTargetStartScale.y + deltaY);
		}
		this._target.updateHitbox();
		var _this = this._target;
		_this.origin.set(_this.frameWidth * 0.5,_this.frameHeight * 0.5);
		this.showTooltip("w: " + this.formatFloat(this._target.get_width()) + "\nh: " + this.formatFloat(this._target.get_height()));
	}
	,updateRotateAction: function() {
		this._target.set_angle(flixel_math_FlxAngle.angleBetweenPoint(this._target,this._brain.flixelPointer,true) - this._actionTargetStartAngle);
		this.showTooltip("deg: " + this.formatFloat(this._target.angle) + "\nrad: " + this.formatFloat(this._target.angle * (Math.PI / 180)));
	}
	,updateAction: function() {
		if(!this._actionHappening || this._actionMarker < 0) {
			return;
		}
		if(this._actionMarker == 0) {
			this.updateRotateAction();
		} else {
			this.updateScaleAction();
		}
	}
	,updateMarkersPosition: function() {
		var topLeftX = this._targetArea.x - 5.0;
		var topLeftY = this._targetArea.y - 5.0;
		var width = this._targetArea.width + 10.;
		var height = this._targetArea.height + 10.;
		this._markers[0].set(topLeftX,topLeftY);
		this._markers[1].set(topLeftX + width,topLeftY);
		this._markers[2].set(topLeftX + width,topLeftY + height);
		this._markers[3].set(topLeftX,topLeftY + height);
		if(this._target.angle != 0) {
			this.updateMarkersRotation(width,height);
		}
	}
	,updateMarkersRotation: function(outlineWidth,outlineHeight) {
		var rotationAngleRad = this._target.angle * (Math.PI / 180);
		var originX = this._markers[0].x + outlineWidth / 2;
		var originY = this._markers[0].y + outlineHeight / 2;
		var n = rotationAngleRad + 1.570796327;
		n *= 0.3183098862;
		if(n > 1) {
			n -= Math.ceil(n) >> 1 << 1;
		} else if(n < -1) {
			n += Math.ceil(-n) >> 1 << 1;
		}
		var cos = n > 0 ? n * (3.1 + n * (0.5 + n * (-7.2 + n * 3.6))) : n * (3.1 - n * (0.5 + n * (7.2 + n * 3.6)));
		var n = rotationAngleRad;
		n *= 0.3183098862;
		if(n > 1) {
			n -= Math.ceil(n) >> 1 << 1;
		} else if(n < -1) {
			n += Math.ceil(-n) >> 1 << 1;
		}
		var sin = n > 0 ? n * (3.1 + n * (0.5 + n * (-7.2 + n * 3.6))) : n * (3.1 - n * (0.5 + n * (7.2 + n * 3.6)));
		var _g = 0;
		var _g1 = this._markers;
		while(_g < _g1.length) {
			var marker = _g1[_g];
			++_g;
			var rotatedX = (marker.x - originX) * cos - (marker.y - originY) * sin;
			var rotatedY = (marker.x - originX) * sin + (marker.y - originY) * cos;
			marker.set(rotatedX + originX,rotatedY + originY);
		}
	}
	,update: function() {
		if(!this.isActive() || this._target == null) {
			return;
		}
		this._mouseCursor.set_x(this._brain.flixelPointer.x - flixel_FlxG.camera.scroll.x);
		this._mouseCursor.set_y(this._brain.flixelPointer.y - flixel_FlxG.camera.scroll.y);
		this.updateTargetArea();
		this.updateMarkersPosition();
		this.handleInteractionsWithMarkersUI();
		if(this._actionHappening) {
			this.updateAction();
			if(this._brain.pointerJustReleased) {
				this.stopAction();
			}
		}
	}
	,drawTargetAreaOutline: function(gfx) {
		gfx.lineStyle(0.9,-65281,1.0,false,2,2);
		gfx.moveTo(this._markers[0].x,this._markers[0].y);
		var _g = 0;
		var _g1 = this._markers.length;
		while(_g < _g1) {
			var i = _g++;
			gfx.lineTo(this._markers[i].x,this._markers[i].y);
		}
		gfx.lineTo(this._markers[0].x,this._markers[0].y);
	}
	,drawMarkers: function(gfx) {
		gfx.lineStyle(0.9,-65281,1.0,false,2,2);
		gfx.beginFill(-65281);
		var _g = 0;
		var _g1 = this._markers.length;
		while(_g < _g1) {
			var i = _g++;
			if(i == 0) {
				gfx.drawCircle(this._markers[i].x,this._markers[i].y,2.7);
			} else {
				gfx.drawRect(this._markers[i].x - 1.5,this._markers[i].y - 1.5,3.0,3.0);
			}
		}
		gfx.endFill();
	}
	,draw: function() {
		var gfx = this._brain.getDebugGraphics();
		if(gfx == null || this._target == null || !this.isActive()) {
			return;
		}
		this.drawTargetAreaOutline(gfx);
		this.drawMarkers(gfx);
		if(flixel_FlxG.renderBlit) {
			flixel_FlxG.camera.buffer.draw(flixel_util_FlxSpriteUtil.flashGfxSprite);
		}
	}
	,activate: function() {
		this._target = null;
		if(this._brain.selectedItems.length == 0) {
			return;
		}
		var member = new flixel_group_FlxTypedGroupIterator(this._brain.selectedItems.members,null);
		while(member.hasNext()) {
			var member1 = member.next();
			if(member1 != null && member1.scrollFactor != null && member1.isOnScreen()) {
				this._target = member1;
				break;
			}
		}
		this._brain.shouldDrawItemsSelection = false;
	}
	,deactivate: function() {
		this._brain.shouldDrawItemsSelection = true;
	}
	,__class__: flixel_system_debug_interaction_tools_Transform
});
var flixel_system_debug_log_LogStyle = function(Prefix,Color,Size,Bold,Italic,Underlined,ErrorSound,OpenConsole,CallbackFunction) {
	if(OpenConsole == null) {
		OpenConsole = false;
	}
	if(Underlined == null) {
		Underlined = false;
	}
	if(Italic == null) {
		Italic = false;
	}
	if(Bold == null) {
		Bold = false;
	}
	if(Size == null) {
		Size = 12;
	}
	if(Color == null) {
		Color = "FFFFFF";
	}
	if(Prefix == null) {
		Prefix = "";
	}
	this.prefix = Prefix;
	this.color = Color;
	this.size = Size;
	this.bold = Bold;
	this.italic = Italic;
	this.underlined = Underlined;
	this.errorSound = ErrorSound;
	this.openConsole = OpenConsole;
	this.callbackFunction = CallbackFunction;
};
$hxClasses["flixel.system.debug.log.LogStyle"] = flixel_system_debug_log_LogStyle;
flixel_system_debug_log_LogStyle.__name__ = "flixel.system.debug.log.LogStyle";
flixel_system_debug_log_LogStyle.prototype = {
	prefix: null
	,color: null
	,size: null
	,bold: null
	,italic: null
	,underlined: null
	,errorSound: null
	,openConsole: null
	,callbackFunction: null
	,__class__: flixel_system_debug_log_LogStyle
};
var flixel_system_debug_stats__$Stats_GraphicMinimizeButton = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_stats__$Stats_GraphicMinimizeButton.preload != null) {
		this.__fromImage(flixel_system_debug_stats__$Stats_GraphicMinimizeButton.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_stats__$Stats_GraphicMinimizeButton.resourceName),flixel_system_debug_stats__$Stats_GraphicMinimizeButton.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_debug_stats__$Stats_GraphicMinimizeButton.preload == null) {
				flixel_system_debug_stats__$Stats_GraphicMinimizeButton.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.debug.stats._Stats.GraphicMinimizeButton"] = flixel_system_debug_stats__$Stats_GraphicMinimizeButton;
flixel_system_debug_stats__$Stats_GraphicMinimizeButton.__name__ = "flixel.system.debug.stats._Stats.GraphicMinimizeButton";
flixel_system_debug_stats__$Stats_GraphicMinimizeButton.preload = null;
flixel_system_debug_stats__$Stats_GraphicMinimizeButton.__super__ = openfl_display_BitmapData;
flixel_system_debug_stats__$Stats_GraphicMinimizeButton.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_stats__$Stats_GraphicMinimizeButton
});
var flixel_system_debug_stats__$Stats_GraphicMaximizeButton = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_stats__$Stats_GraphicMaximizeButton.preload != null) {
		this.__fromImage(flixel_system_debug_stats__$Stats_GraphicMaximizeButton.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_system_debug_stats__$Stats_GraphicMaximizeButton.resourceName),flixel_system_debug_stats__$Stats_GraphicMaximizeButton.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_system_debug_stats__$Stats_GraphicMaximizeButton.preload == null) {
				flixel_system_debug_stats__$Stats_GraphicMaximizeButton.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.system.debug.stats._Stats.GraphicMaximizeButton"] = flixel_system_debug_stats__$Stats_GraphicMaximizeButton;
flixel_system_debug_stats__$Stats_GraphicMaximizeButton.__name__ = "flixel.system.debug.stats._Stats.GraphicMaximizeButton";
flixel_system_debug_stats__$Stats_GraphicMaximizeButton.preload = null;
flixel_system_debug_stats__$Stats_GraphicMaximizeButton.__super__ = openfl_display_BitmapData;
flixel_system_debug_stats__$Stats_GraphicMaximizeButton.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_stats__$Stats_GraphicMaximizeButton
});
var flixel_system_debug_watch_Watch = function(Title,Icon,Width,Height,Resizable,Bounds,Closable,AlwaysOnTop) {
	flixel_system_debug_Window.call(this,Title,Icon,Width,Height,Resizable,Bounds,Closable,AlwaysOnTop);
};
$hxClasses["flixel.system.debug.watch.Watch"] = flixel_system_debug_watch_Watch;
flixel_system_debug_watch_Watch.__name__ = "flixel.system.debug.watch.Watch";
flixel_system_debug_watch_Watch.__super__ = flixel_system_debug_Window;
flixel_system_debug_watch_Watch.prototype = $extend(flixel_system_debug_Window.prototype,{
	__class__: flixel_system_debug_watch_Watch
});
var flixel_system_debug_watch_Tracker = function(Title,Icon,Width,Height,Resizable,Bounds,Closable,AlwaysOnTop) {
	flixel_system_debug_watch_Watch.call(this,Title,Icon,Width,Height,Resizable,Bounds,Closable,AlwaysOnTop);
};
$hxClasses["flixel.system.debug.watch.Tracker"] = flixel_system_debug_watch_Tracker;
flixel_system_debug_watch_Tracker.__name__ = "flixel.system.debug.watch.Tracker";
flixel_system_debug_watch_Tracker.__super__ = flixel_system_debug_watch_Watch;
flixel_system_debug_watch_Tracker.prototype = $extend(flixel_system_debug_watch_Watch.prototype,{
	__class__: flixel_system_debug_watch_Tracker
});
var flixel_system_debug_watch_TrackerProfile = function(ObjectClass,Variables,Extensions) {
	this.objectClass = ObjectClass;
	this.variables = Variables;
	this.extensions = Extensions;
};
$hxClasses["flixel.system.debug.watch.TrackerProfile"] = flixel_system_debug_watch_TrackerProfile;
flixel_system_debug_watch_TrackerProfile.__name__ = "flixel.system.debug.watch.TrackerProfile";
flixel_system_debug_watch_TrackerProfile.prototype = {
	objectClass: null
	,variables: null
	,extensions: null
	,toString: function() {
		var value = this.variables;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "variables";
		_this.value = value;
		var value = this.extensions;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "extensions";
		_this1.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1]);
	}
	,__class__: flixel_system_debug_watch_TrackerProfile
};
var flixel_system_frontEnds_FlxBrowser = $hxEnums["flixel.system.frontEnds.FlxBrowser"] = { __ename__ : "flixel.system.frontEnds.FlxBrowser", __constructs__ : ["INTERNET_EXPLORER","CHROME","FIREFOX","SAFARI","OPERA","UNKNOWN"]
	,INTERNET_EXPLORER: {_hx_index:0,__enum__:"flixel.system.frontEnds.FlxBrowser",toString:$estr}
	,CHROME: {_hx_index:1,__enum__:"flixel.system.frontEnds.FlxBrowser",toString:$estr}
	,FIREFOX: {_hx_index:2,__enum__:"flixel.system.frontEnds.FlxBrowser",toString:$estr}
	,SAFARI: {_hx_index:3,__enum__:"flixel.system.frontEnds.FlxBrowser",toString:$estr}
	,OPERA: {_hx_index:4,__enum__:"flixel.system.frontEnds.FlxBrowser",toString:$estr}
	,UNKNOWN: {_hx_index:5,__enum__:"flixel.system.frontEnds.FlxBrowser",toString:$estr}
};
flixel_system_frontEnds_FlxBrowser.__empty_constructs__ = [flixel_system_frontEnds_FlxBrowser.INTERNET_EXPLORER,flixel_system_frontEnds_FlxBrowser.CHROME,flixel_system_frontEnds_FlxBrowser.FIREFOX,flixel_system_frontEnds_FlxBrowser.SAFARI,flixel_system_frontEnds_FlxBrowser.OPERA,flixel_system_frontEnds_FlxBrowser.UNKNOWN];
var flixel_system_frontEnds_FlxPlatform = $hxEnums["flixel.system.frontEnds.FlxPlatform"] = { __ename__ : "flixel.system.frontEnds.FlxPlatform", __constructs__ : ["WINDOWS","LINUX","MAC","ANDROID","BLACKBERRY","WINDOWS_PHONE","IOS","UNKNOWN"]
	,WINDOWS: {_hx_index:0,__enum__:"flixel.system.frontEnds.FlxPlatform",toString:$estr}
	,LINUX: {_hx_index:1,__enum__:"flixel.system.frontEnds.FlxPlatform",toString:$estr}
	,MAC: {_hx_index:2,__enum__:"flixel.system.frontEnds.FlxPlatform",toString:$estr}
	,ANDROID: {_hx_index:3,__enum__:"flixel.system.frontEnds.FlxPlatform",toString:$estr}
	,BLACKBERRY: {_hx_index:4,__enum__:"flixel.system.frontEnds.FlxPlatform",toString:$estr}
	,WINDOWS_PHONE: {_hx_index:5,__enum__:"flixel.system.frontEnds.FlxPlatform",toString:$estr}
	,IOS: ($_=function(device) { return {_hx_index:6,device:device,__enum__:"flixel.system.frontEnds.FlxPlatform",toString:$estr}; },$_.__params__ = ["device"],$_)
	,UNKNOWN: {_hx_index:7,__enum__:"flixel.system.frontEnds.FlxPlatform",toString:$estr}
};
flixel_system_frontEnds_FlxPlatform.__empty_constructs__ = [flixel_system_frontEnds_FlxPlatform.WINDOWS,flixel_system_frontEnds_FlxPlatform.LINUX,flixel_system_frontEnds_FlxPlatform.MAC,flixel_system_frontEnds_FlxPlatform.ANDROID,flixel_system_frontEnds_FlxPlatform.BLACKBERRY,flixel_system_frontEnds_FlxPlatform.WINDOWS_PHONE,flixel_system_frontEnds_FlxPlatform.UNKNOWN];
var flixel_system_frontEnds_FlxIOSDevice = $hxEnums["flixel.system.frontEnds.FlxIOSDevice"] = { __ename__ : "flixel.system.frontEnds.FlxIOSDevice", __constructs__ : ["IPHONE","IPAD","IPOD"]
	,IPHONE: {_hx_index:0,__enum__:"flixel.system.frontEnds.FlxIOSDevice",toString:$estr}
	,IPAD: {_hx_index:1,__enum__:"flixel.system.frontEnds.FlxIOSDevice",toString:$estr}
	,IPOD: {_hx_index:2,__enum__:"flixel.system.frontEnds.FlxIOSDevice",toString:$estr}
};
flixel_system_frontEnds_FlxIOSDevice.__empty_constructs__ = [flixel_system_frontEnds_FlxIOSDevice.IPHONE,flixel_system_frontEnds_FlxIOSDevice.IPAD,flixel_system_frontEnds_FlxIOSDevice.IPOD];
var flixel_system_frontEnds_PluginFrontEnd = function() {
	this.list = [];
	this.add_flixel_util_FlxTimerManager(flixel_util_FlxTimer.globalManager = new flixel_util_FlxTimerManager());
	this.add_flixel_tweens_FlxTweenManager(flixel_tweens_FlxTween.globalManager = new flixel_tweens_FlxTweenManager());
};
$hxClasses["flixel.system.frontEnds.PluginFrontEnd"] = flixel_system_frontEnds_PluginFrontEnd;
flixel_system_frontEnds_PluginFrontEnd.__name__ = "flixel.system.frontEnds.PluginFrontEnd";
flixel_system_frontEnds_PluginFrontEnd.prototype = {
	add_flixel_tweens_FlxTweenManager: function(Plugin1) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.getClassName(Plugin1,true) == flixel_util_FlxStringUtil.getClassName(plugin,true)) {
				return Plugin1;
			}
		}
		this.list.push(Plugin1);
		return Plugin1;
	}
	,add_flixel_util_FlxTimerManager: function(Plugin1) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.getClassName(Plugin1,true) == flixel_util_FlxStringUtil.getClassName(plugin,true)) {
				return Plugin1;
			}
		}
		this.list.push(Plugin1);
		return Plugin1;
	}
	,list: null
	,get: function(ClassType) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(plugin,ClassType)) {
				return plugin;
			}
		}
		return null;
	}
	,remove: function(Plugin1) {
		var i = this.list.length - 1;
		while(i >= 0) {
			if(this.list[i] == Plugin1) {
				this.list.splice(i,1);
				return Plugin1;
			}
			--i;
		}
		return Plugin1;
	}
	,removeType: function(ClassType) {
		var results = false;
		var i = this.list.length - 1;
		while(i >= 0) {
			if(js_Boot.__instanceof(this.list[i],ClassType)) {
				this.list.splice(i,1);
				results = true;
			}
			--i;
		}
		return results;
	}
	,update: function(elapsed) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(plugin.exists && plugin.active) {
				plugin.update(elapsed);
			}
		}
	}
	,draw: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(plugin.exists && plugin.visible) {
				plugin.draw();
			}
		}
	}
	,__class__: flixel_system_frontEnds_PluginFrontEnd
};
var flixel_system_frontEnds_SoundFrontEnd = function() {
	this.volume = 1;
	this.list = new flixel_group_FlxTypedGroup();
	this.defaultSoundGroup = new flixel_system_FlxSoundGroup();
	this.defaultMusicGroup = new flixel_system_FlxSoundGroup();
	this.soundTrayEnabled = true;
	this.muteKeys = [48,96];
	this.volumeDownKeys = [189,109];
	this.volumeUpKeys = [187,107];
	this.muted = false;
	this.loadSavedPrefs();
};
$hxClasses["flixel.system.frontEnds.SoundFrontEnd"] = flixel_system_frontEnds_SoundFrontEnd;
flixel_system_frontEnds_SoundFrontEnd.__name__ = "flixel.system.frontEnds.SoundFrontEnd";
flixel_system_frontEnds_SoundFrontEnd.prototype = {
	music: null
	,muted: null
	,volumeHandler: null
	,volumeUpKeys: null
	,volumeDownKeys: null
	,muteKeys: null
	,soundTrayEnabled: null
	,defaultMusicGroup: null
	,defaultSoundGroup: null
	,list: null
	,volume: null
	,playMusic: function(Music,Volume,Looped,Group) {
		if(Looped == null) {
			Looped = true;
		}
		if(Volume == null) {
			Volume = 1;
		}
		if(this.music == null) {
			this.music = new flixel_system_FlxSound();
		} else if(this.music.active) {
			var _this = this.music;
			_this.cleanup(_this.autoDestroy,true);
		}
		this.music.loadEmbedded(Music,Looped);
		this.music.set_volume(Volume);
		this.music.persist = true;
		this.music.set_group(Group == null ? this.defaultMusicGroup : Group);
		this.music.play();
	}
	,load: function(EmbeddedSound,Volume,Looped,Group,AutoDestroy,AutoPlay,URL1,OnComplete,OnLoad) {
		if(AutoPlay == null) {
			AutoPlay = false;
		}
		if(AutoDestroy == null) {
			AutoDestroy = false;
		}
		if(Looped == null) {
			Looped = false;
		}
		if(Volume == null) {
			Volume = 1;
		}
		if(EmbeddedSound == null && URL1 == null) {
			return null;
		}
		var sound = this.list.recycle(flixel_system_FlxSound);
		if(EmbeddedSound != null) {
			sound.loadEmbedded(EmbeddedSound,Looped,AutoDestroy,OnComplete);
			this.loadHelper(sound,Volume,Group,AutoPlay);
			if(OnLoad != null && sound._sound != null) {
				OnLoad();
			}
		} else {
			var loadCallback = OnLoad;
			if(AutoPlay) {
				loadCallback = function() {
					sound.play();
					if(OnLoad != null) {
						OnLoad();
					}
				};
			}
			sound.loadStream(URL1,Looped,AutoDestroy,OnComplete,loadCallback);
			this.loadHelper(sound,Volume,Group);
		}
		return sound;
	}
	,loadHelper: function(sound,Volume,Group,AutoPlay) {
		if(AutoPlay == null) {
			AutoPlay = false;
		}
		sound.set_volume(Volume);
		if(AutoPlay) {
			sound.play();
		}
		sound.set_group(Group == null ? this.defaultSoundGroup : Group);
		return sound;
	}
	,cache: function(EmbeddedSound) {
		if(openfl_utils_Assets.exists(EmbeddedSound,"SOUND") || openfl_utils_Assets.exists(EmbeddedSound,"MUSIC")) {
			return openfl_utils_Assets.getSound(EmbeddedSound,true);
		}
		return null;
	}
	,cacheAll: function() {
		var _g = 0;
		var _g1 = openfl_utils_Assets.list("SOUND");
		while(_g < _g1.length) {
			var id = _g1[_g];
			++_g;
			if(openfl_utils_Assets.exists(id,"SOUND") || openfl_utils_Assets.exists(id,"MUSIC")) {
				openfl_utils_Assets.getSound(id,true);
			}
		}
	}
	,play: function(EmbeddedSound,Volume,Looped,Group,AutoDestroy,OnComplete) {
		if(AutoDestroy == null) {
			AutoDestroy = true;
		}
		if(Looped == null) {
			Looped = false;
		}
		if(Volume == null) {
			Volume = 1;
		}
		if(typeof(EmbeddedSound) == "string") {
			EmbeddedSound = openfl_utils_Assets.exists(EmbeddedSound,"SOUND") || openfl_utils_Assets.exists(EmbeddedSound,"MUSIC") ? openfl_utils_Assets.getSound(EmbeddedSound,true) : null;
		}
		var sound = this.list.recycle(flixel_system_FlxSound).loadEmbedded(EmbeddedSound,Looped,AutoDestroy,OnComplete);
		return this.loadHelper(sound,Volume,Group,true);
	}
	,stream: function(URL1,Volume,Looped,Group,AutoDestroy,OnComplete,OnLoad) {
		if(AutoDestroy == null) {
			AutoDestroy = true;
		}
		if(Looped == null) {
			Looped = false;
		}
		if(Volume == null) {
			Volume = 1;
		}
		return this.load(null,Volume,Looped,Group,AutoDestroy,true,URL1,OnComplete,OnLoad);
	}
	,pause: function() {
		if(this.music != null && this.music.exists && this.music.active) {
			this.music.pause();
		}
		var _g = 0;
		var _g1 = this.list.members;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null && sound.exists && sound.active) {
				sound.pause();
			}
		}
	}
	,resume: function() {
		if(this.music != null && this.music.exists) {
			this.music.resume();
		}
		var _g = 0;
		var _g1 = this.list.members;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null && sound.exists) {
				sound.resume();
			}
		}
	}
	,destroy: function(ForceDestroy) {
		if(ForceDestroy == null) {
			ForceDestroy = false;
		}
		if(this.music != null && (ForceDestroy || !this.music.persist)) {
			this.destroySound(this.music);
			this.music = null;
		}
		var _g = 0;
		var _g1 = this.list.members;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null && (ForceDestroy || !sound.persist)) {
				this.destroySound(sound);
			}
		}
	}
	,destroySound: function(sound) {
		this.defaultMusicGroup.remove(sound);
		this.defaultSoundGroup.remove(sound);
		sound.destroy();
	}
	,toggleMuted: function() {
		this.muted = !this.muted;
		if(this.volumeHandler != null) {
			this.volumeHandler(this.muted ? 0 : this.volume);
		}
		this.showSoundTray();
	}
	,changeVolume: function(Amount) {
		this.muted = false;
		var _g = this;
		_g.set_volume(_g.volume + Amount);
		this.showSoundTray();
	}
	,showSoundTray: function() {
		if(flixel_FlxG.game.soundTray != null && this.soundTrayEnabled) {
			flixel_FlxG.game.soundTray.show();
		}
	}
	,update: function(elapsed) {
		if(this.music != null && this.music.active) {
			this.music.update(elapsed);
		}
		if(this.list != null && this.list.active) {
			this.list.update(elapsed);
		}
		if(flixel_FlxG.keys.checkKeyArrayState(this.muteKeys,-1)) {
			this.toggleMuted();
		} else if(flixel_FlxG.keys.checkKeyArrayState(this.volumeUpKeys,-1)) {
			this.changeVolume(0.1);
		} else if(flixel_FlxG.keys.checkKeyArrayState(this.volumeDownKeys,-1)) {
			this.changeVolume(-0.1);
		}
	}
	,onFocusLost: function() {
		if(this.music != null) {
			this.music.onFocusLost();
		}
		var _g = 0;
		var _g1 = this.list.members;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null) {
				sound.onFocusLost();
			}
		}
	}
	,onFocus: function() {
		if(this.music != null) {
			this.music.onFocus();
		}
		var _g = 0;
		var _g1 = this.list.members;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null) {
				sound.onFocus();
			}
		}
	}
	,loadSavedPrefs: function() {
		if(flixel_FlxG.save.data.volume != null) {
			this.set_volume(flixel_FlxG.save.data.volume);
		}
		if(flixel_FlxG.save.data.mute != null) {
			this.muted = flixel_FlxG.save.data.mute;
		}
	}
	,set_volume: function(Volume) {
		var lowerBound = Volume < 0 ? 0 : Volume;
		Volume = lowerBound > 1 ? 1 : lowerBound;
		if(this.volumeHandler != null) {
			var param = this.muted ? 0 : Volume;
			this.volumeHandler(param);
		}
		return this.volume = Volume;
	}
	,__class__: flixel_system_frontEnds_SoundFrontEnd
	,__properties__: {set_volume:"set_volume"}
};
var flixel_system_frontEnds_VCRFrontEnd = function() {
	this.stepRequested = false;
	this.paused = false;
};
$hxClasses["flixel.system.frontEnds.VCRFrontEnd"] = flixel_system_frontEnds_VCRFrontEnd;
flixel_system_frontEnds_VCRFrontEnd.__name__ = "flixel.system.frontEnds.VCRFrontEnd";
flixel_system_frontEnds_VCRFrontEnd.prototype = {
	paused: null
	,stepRequested: null
	,pause: function() {
		if(!this.paused) {
			if(!flixel_FlxG.mouse.useSystemCursor) {
				openfl_ui_Mouse.show();
			}
			this.paused = true;
		}
	}
	,resume: function() {
		if(this.paused) {
			if(!flixel_FlxG.mouse.useSystemCursor) {
				openfl_ui_Mouse.hide();
			}
			this.paused = false;
		}
	}
	,__class__: flixel_system_frontEnds_VCRFrontEnd
};
var flixel_system_macros_FlxMacroUtil = function() { };
$hxClasses["flixel.system.macros.FlxMacroUtil"] = flixel_system_macros_FlxMacroUtil;
flixel_system_macros_FlxMacroUtil.__name__ = "flixel.system.macros.FlxMacroUtil";
var flixel_system_replay_CodeValuePair = function(code,value) {
	this.code = code;
	this.value = value;
};
$hxClasses["flixel.system.replay.CodeValuePair"] = flixel_system_replay_CodeValuePair;
flixel_system_replay_CodeValuePair.__name__ = "flixel.system.replay.CodeValuePair";
flixel_system_replay_CodeValuePair.prototype = {
	code: null
	,value: null
	,__class__: flixel_system_replay_CodeValuePair
};
var flixel_system_replay_MouseRecord = function(x,y,button,wheel) {
	this.x = x;
	this.y = y;
	this.button = button;
	this.wheel = wheel;
};
$hxClasses["flixel.system.replay.MouseRecord"] = flixel_system_replay_MouseRecord;
flixel_system_replay_MouseRecord.__name__ = "flixel.system.replay.MouseRecord";
flixel_system_replay_MouseRecord.prototype = {
	x: null
	,y: null
	,button: null
	,wheel: null
	,__class__: flixel_system_replay_MouseRecord
};
var flixel_system_ui_FlxSoundTray = function() {
	this._defaultScale = 2.0;
	this._width = 80;
	openfl_display_Sprite.call(this);
	this.set_visible(false);
	this.set_scaleX(this._defaultScale);
	this.set_scaleY(this._defaultScale);
	var tmp = new openfl_display_Bitmap(new openfl_display_BitmapData(this._width,30,true,2130706432));
	this.screenCenter();
	this.addChild(tmp);
	var text = new openfl_text_TextField();
	text.set_width(tmp.get_width());
	text.set_height(tmp.get_height());
	text.set_multiline(true);
	text.set_wordWrap(true);
	text.set_selectable(false);
	var dtf = new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEFAULT,10,16777215);
	dtf.align = 0;
	text.set_defaultTextFormat(dtf);
	this.addChild(text);
	text.set_text("VOLUME");
	text.set_y(16);
	var bx = 10;
	var by = 14;
	this._bars = [];
	var _g = 0;
	while(_g < 10) {
		var i = _g++;
		tmp = new openfl_display_Bitmap(new openfl_display_BitmapData(4,i + 1,false,-1));
		tmp.set_x(bx);
		tmp.set_y(by);
		this.addChild(tmp);
		this._bars.push(tmp);
		bx += 6;
		--by;
	}
	this.set_y(-this.get_height());
	this.set_visible(false);
};
$hxClasses["flixel.system.ui.FlxSoundTray"] = flixel_system_ui_FlxSoundTray;
flixel_system_ui_FlxSoundTray.__name__ = "flixel.system.ui.FlxSoundTray";
flixel_system_ui_FlxSoundTray.__super__ = openfl_display_Sprite;
flixel_system_ui_FlxSoundTray.prototype = $extend(openfl_display_Sprite.prototype,{
	active: null
	,_timer: null
	,_bars: null
	,_width: null
	,_defaultScale: null
	,update: function(MS) {
		if(this._timer > 0) {
			this._timer -= MS / 1000;
		} else if(this.get_y() > -this.get_height()) {
			var _g = this;
			_g.set_y(_g.get_y() - MS / 1000 * flixel_FlxG.height * 2);
			if(this.get_y() <= -this.get_height()) {
				this.set_visible(false);
				this.active = false;
				flixel_FlxG.save.data.mute = flixel_FlxG.sound.muted;
				flixel_FlxG.save.data.volume = flixel_FlxG.sound.volume;
				flixel_FlxG.save.flush();
			}
		}
	}
	,show: function(Silent) {
		if(Silent == null) {
			Silent = false;
		}
		if(!Silent) {
			var extension = "";
			extension = ".ogg";
			var sound = openfl_utils_Assets.getSound("flixel/sounds/beep" + extension);
			if(sound != null) {
				flixel_FlxG.sound.load(sound).play();
			}
		}
		this._timer = 1;
		this.set_y(0);
		this.set_visible(true);
		this.active = true;
		var globalVolume = Math.round(flixel_FlxG.sound.volume * 10);
		if(flixel_FlxG.sound.muted) {
			globalVolume = 0;
		}
		var _g = 0;
		var _g1 = this._bars.length;
		while(_g < _g1) {
			var i = _g++;
			if(i < globalVolume) {
				this._bars[i].set_alpha(1);
			} else {
				this._bars[i].set_alpha(0.5);
			}
		}
	}
	,screenCenter: function() {
		this.set_scaleX(this._defaultScale);
		this.set_scaleY(this._defaultScale);
		this.set_x(0.5 * (openfl_Lib.get_current().stage.stageWidth - this._width * this._defaultScale) - flixel_FlxG.game.get_x());
	}
	,__class__: flixel_system_ui_FlxSoundTray
});
var flixel_system_ui_FlxSystemButton = function(Icon,UpHandler,ToggleMode) {
	if(ToggleMode == null) {
		ToggleMode = false;
	}
	this._mouseDown = false;
	this.toggled = false;
	this.toggleMode = false;
	this.enabled = true;
	openfl_display_Sprite.call(this);
	if(Icon != null) {
		this.changeIcon(Icon);
	}
	this.upHandler = UpHandler;
	this.toggleMode = ToggleMode;
	this.addEventListener("mouseUp",$bind(this,this.onMouseUp));
	this.addEventListener("mouseDown",$bind(this,this.onMouseDown));
	this.addEventListener("mouseOut",$bind(this,this.onMouseOut));
	this.addEventListener("mouseOver",$bind(this,this.onMouseOver));
};
$hxClasses["flixel.system.ui.FlxSystemButton"] = flixel_system_ui_FlxSystemButton;
flixel_system_ui_FlxSystemButton.__name__ = "flixel.system.ui.FlxSystemButton";
flixel_system_ui_FlxSystemButton.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_system_ui_FlxSystemButton.__super__ = openfl_display_Sprite;
flixel_system_ui_FlxSystemButton.prototype = $extend(openfl_display_Sprite.prototype,{
	upHandler: null
	,enabled: null
	,toggleMode: null
	,toggled: null
	,_icon: null
	,_mouseDown: null
	,changeIcon: function(Icon) {
		if(this._icon != null) {
			this.removeChild(this._icon);
		}
		flixel_system_debug_DebuggerUtil.fixSize(Icon);
		this._icon = new openfl_display_Bitmap(Icon);
		this.addChild(this._icon);
	}
	,destroy: function() {
		this.removeEventListener("mouseUp",$bind(this,this.onMouseUp));
		this.removeEventListener("mouseDown",$bind(this,this.onMouseDown));
		this.removeEventListener("mouseOut",$bind(this,this.onMouseOut));
		this.removeEventListener("mouseOver",$bind(this,this.onMouseOver));
		this._icon = null;
		this.upHandler = null;
	}
	,onMouseUp: function(_) {
		if(this.enabled && this._mouseDown) {
			this.set_toggled(!this.toggled);
			this._mouseDown = false;
			if(this.upHandler != null) {
				this.upHandler();
			}
		}
	}
	,onMouseDown: function(_) {
		this._mouseDown = true;
	}
	,onMouseOver: function(_) {
		if(this.enabled) {
			var _g = this;
			_g.set_alpha(_g.get_alpha() - 0.2);
		}
	}
	,onMouseOut: function(_) {
		if(this.enabled) {
			var _g = this;
			_g.set_alpha(_g.get_alpha() + 0.2);
		}
	}
	,set_toggled: function(Value) {
		if(this.toggleMode) {
			this.set_alpha(Value ? 0.3 : 1);
		}
		return this.toggled = Value;
	}
	,__class__: flixel_system_ui_FlxSystemButton
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_toggled:"set_toggled"})
});
var flixel_text_FlxTextFormat = function(FontColor,Bold,Italic,BorderColor) {
	this.format = new openfl_text_TextFormat(null,null,FontColor,Bold,Italic);
	this.borderColor = BorderColor == null ? 0 : BorderColor;
};
$hxClasses["flixel.text.FlxTextFormat"] = flixel_text_FlxTextFormat;
flixel_text_FlxTextFormat.__name__ = "flixel.text.FlxTextFormat";
flixel_text_FlxTextFormat.prototype = {
	leading: null
	,borderColor: null
	,format: null
	,set_leading: function(value) {
		this.format.leading = value;
		return value;
	}
	,__class__: flixel_text_FlxTextFormat
	,__properties__: {set_leading:"set_leading"}
};
var flixel_text__$FlxText_FlxTextFormatRange = function(format,start,end) {
	this.range = new flixel_util_helpers_FlxRange(start,end);
	this.format = format;
};
$hxClasses["flixel.text._FlxText.FlxTextFormatRange"] = flixel_text__$FlxText_FlxTextFormatRange;
flixel_text__$FlxText_FlxTextFormatRange.__name__ = "flixel.text._FlxText.FlxTextFormatRange";
flixel_text__$FlxText_FlxTextFormatRange.prototype = {
	range: null
	,format: null
	,__class__: flixel_text__$FlxText_FlxTextFormatRange
};
var flixel_text_FlxTextFormatMarkerPair = function(format,marker) {
	this.format = format;
	this.marker = marker;
};
$hxClasses["flixel.text.FlxTextFormatMarkerPair"] = flixel_text_FlxTextFormatMarkerPair;
flixel_text_FlxTextFormatMarkerPair.__name__ = "flixel.text.FlxTextFormatMarkerPair";
flixel_text_FlxTextFormatMarkerPair.prototype = {
	format: null
	,marker: null
	,__class__: flixel_text_FlxTextFormatMarkerPair
};
var flixel_text_FlxTextBorderStyle = $hxEnums["flixel.text.FlxTextBorderStyle"] = { __ename__ : "flixel.text.FlxTextBorderStyle", __constructs__ : ["NONE","SHADOW","OUTLINE","OUTLINE_FAST"]
	,NONE: {_hx_index:0,__enum__:"flixel.text.FlxTextBorderStyle",toString:$estr}
	,SHADOW: {_hx_index:1,__enum__:"flixel.text.FlxTextBorderStyle",toString:$estr}
	,OUTLINE: {_hx_index:2,__enum__:"flixel.text.FlxTextBorderStyle",toString:$estr}
	,OUTLINE_FAST: {_hx_index:3,__enum__:"flixel.text.FlxTextBorderStyle",toString:$estr}
};
flixel_text_FlxTextBorderStyle.__empty_constructs__ = [flixel_text_FlxTextBorderStyle.NONE,flixel_text_FlxTextBorderStyle.SHADOW,flixel_text_FlxTextBorderStyle.OUTLINE,flixel_text_FlxTextBorderStyle.OUTLINE_FAST];
var flixel_text_FlxTextAlign = {};
flixel_text_FlxTextAlign.fromOpenFL = function(align) {
	switch(align) {
	case 0:
		return "center";
	case 2:
		return "justify";
	case 3:
		return "left";
	case 4:
		return "right";
	default:
		return "left";
	}
};
flixel_text_FlxTextAlign.toOpenFL = function(align) {
	switch(align) {
	case "center":
		return 0;
	case "justify":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	default:
		return 3;
	}
};
var flixel_tile_FlxBaseTilemap = function() {
	this._collideIndex = 0;
	this._drawIndex = 0;
	this._startingIndex = 0;
	this._tileObjects = [];
	this.totalTiles = 0;
	this.heightInTiles = 0;
	this.widthInTiles = 0;
	this.auto = flixel_tile_FlxTilemapAutoTiling.OFF;
	flixel_FlxObject.call(this);
	this.flixelType = 3;
	this.set_immovable(true);
	this.set_moves(false);
};
$hxClasses["flixel.tile.FlxBaseTilemap"] = flixel_tile_FlxBaseTilemap;
flixel_tile_FlxBaseTilemap.__name__ = "flixel.tile.FlxBaseTilemap";
flixel_tile_FlxBaseTilemap.__super__ = flixel_FlxObject;
flixel_tile_FlxBaseTilemap.prototype = $extend(flixel_FlxObject.prototype,{
	auto: null
	,widthInTiles: null
	,heightInTiles: null
	,totalTiles: null
	,customTileRemap: null
	,_randomIndices: null
	,_randomChoices: null
	,_randomLambda: null
	,_tileObjects: null
	,_startingIndex: null
	,_data: null
	,_drawIndex: null
	,_collideIndex: null
	,updateTile: function(Index) {
		throw haxe_Exception.thrown("updateTile must be implemented");
	}
	,cacheGraphics: function(TileWidth,TileHeight,TileGraphic) {
		throw haxe_Exception.thrown("cacheGraphics must be implemented");
	}
	,initTileObjects: function() {
		throw haxe_Exception.thrown("initTileObjects must be implemented");
	}
	,updateMap: function() {
		throw haxe_Exception.thrown("updateMap must be implemented");
	}
	,computeDimensions: function() {
		throw haxe_Exception.thrown("computeDimensions must be implemented");
	}
	,getTileIndexByCoords: function(Coord) {
		throw haxe_Exception.thrown("getTileIndexByCoords must be implemented");
	}
	,getTileCoordsByIndex: function(Index,Midpoint) {
		if(Midpoint == null) {
			Midpoint = true;
		}
		throw haxe_Exception.thrown("getTileCoordsByIndex must be implemented");
	}
	,ray: function(Start,End,Result,Resolution) {
		if(Resolution == null) {
			Resolution = 1;
		}
		throw haxe_Exception.thrown("ray must be implemented");
	}
	,overlapsWithCallback: function(Object1,Callback,FlipCallbackParams,Position) {
		if(FlipCallbackParams == null) {
			FlipCallbackParams = false;
		}
		throw haxe_Exception.thrown("overlapsWithCallback must be implemented");
	}
	,setDirty: function(Dirty) {
		if(Dirty == null) {
			Dirty = true;
		}
		throw haxe_Exception.thrown("setDirty must be implemented");
	}
	,destroy: function() {
		this._data = null;
		flixel_FlxObject.prototype.destroy.call(this);
	}
	,loadMapFromCSV: function(MapData,TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex) {
		if(CollideIndex == null) {
			CollideIndex = 1;
		}
		if(DrawIndex == null) {
			DrawIndex = 1;
		}
		if(StartingIndex == null) {
			StartingIndex = 0;
		}
		if(TileHeight == null) {
			TileHeight = 0;
		}
		if(TileWidth == null) {
			TileWidth = 0;
		}
		if(openfl_utils_Assets.exists(MapData)) {
			MapData = openfl_utils_Assets.getText(MapData);
		}
		this._data = [];
		var columns;
		var regex = new EReg("[ \t]*((\r\n)|\r|\n)[ \t]*","g");
		var lines = regex.split(MapData);
		var _g = [];
		var _g1 = 0;
		var _g2 = lines;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(v != "") {
				_g.push(v);
			}
		}
		var rows = _g;
		this.heightInTiles = rows.length;
		this.widthInTiles = 0;
		var row = 0;
		while(row < this.heightInTiles) {
			var rowString = rows[row];
			if(StringTools.endsWith(rowString,",")) {
				rowString = HxOverrides.substr(rowString,0,rowString.length - 1);
			}
			columns = rowString.split(",");
			if(columns.length == 0) {
				this.heightInTiles--;
				continue;
			}
			if(this.widthInTiles == 0) {
				this.widthInTiles = columns.length;
			}
			var column = 0;
			while(column < this.widthInTiles) {
				var columnString = columns[column];
				var curTile = Std.parseInt(columnString);
				if(curTile == null) {
					throw haxe_Exception.thrown("String in row " + row + ", column " + column + " is not a valid integer: \"" + columnString + "\"");
				}
				this._data.push(curTile);
				++column;
			}
			++row;
		}
		this.loadMapHelper(TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex);
		return this;
	}
	,loadMapFromArray: function(MapData,WidthInTiles,HeightInTiles,TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex) {
		if(CollideIndex == null) {
			CollideIndex = 1;
		}
		if(DrawIndex == null) {
			DrawIndex = 1;
		}
		if(StartingIndex == null) {
			StartingIndex = 0;
		}
		if(TileHeight == null) {
			TileHeight = 0;
		}
		if(TileWidth == null) {
			TileWidth = 0;
		}
		this.widthInTiles = WidthInTiles;
		this.heightInTiles = HeightInTiles;
		this._data = MapData.slice();
		this.loadMapHelper(TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex);
		return this;
	}
	,loadMapFrom2DArray: function(MapData,TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex) {
		if(CollideIndex == null) {
			CollideIndex = 1;
		}
		if(DrawIndex == null) {
			DrawIndex = 1;
		}
		if(StartingIndex == null) {
			StartingIndex = 0;
		}
		if(TileHeight == null) {
			TileHeight = 0;
		}
		if(TileWidth == null) {
			TileWidth = 0;
		}
		this.widthInTiles = MapData[0].length;
		this.heightInTiles = MapData.length;
		this._data = flixel_util_FlxArrayUtil.flatten2DArray_Int(MapData);
		this.loadMapHelper(TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex);
		return this;
	}
	,loadMapFromGraphic: function(MapGraphic,Invert,Scale,ColorMap,TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex) {
		if(CollideIndex == null) {
			CollideIndex = 1;
		}
		if(DrawIndex == null) {
			DrawIndex = 1;
		}
		if(StartingIndex == null) {
			StartingIndex = 0;
		}
		if(TileHeight == null) {
			TileHeight = 0;
		}
		if(TileWidth == null) {
			TileWidth = 0;
		}
		if(Scale == null) {
			Scale = 1;
		}
		if(Invert == null) {
			Invert = false;
		}
		var mapBitmap = flixel_system_FlxAssets.resolveBitmapData(MapGraphic);
		var mapData = flixel_util_FlxStringUtil.bitmapToCSV(mapBitmap,Invert,Scale,ColorMap);
		return this.loadMapFromCSV(mapData,TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex);
	}
	,loadMapHelper: function(TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex) {
		if(CollideIndex == null) {
			CollideIndex = 1;
		}
		if(DrawIndex == null) {
			DrawIndex = 1;
		}
		if(StartingIndex == null) {
			StartingIndex = 0;
		}
		if(TileHeight == null) {
			TileHeight = 0;
		}
		if(TileWidth == null) {
			TileWidth = 0;
		}
		var _g = 0;
		var _g1 = this._data.length;
		while(_g < _g1) {
			var i = _g++;
			if(this._data[i] < 0) {
				this._data[i] = 0;
			}
		}
		this.totalTiles = this._data.length;
		this.auto = AutoTile == null ? flixel_tile_FlxTilemapAutoTiling.OFF : AutoTile;
		this._startingIndex = StartingIndex <= 0 ? 0 : StartingIndex;
		if(this.auto != flixel_tile_FlxTilemapAutoTiling.OFF) {
			this._startingIndex = 1;
			DrawIndex = 1;
			CollideIndex = 1;
		}
		this._drawIndex = DrawIndex;
		this._collideIndex = CollideIndex;
		this.applyAutoTile();
		this.applyCustomRemap();
		this.randomizeIndices();
		this.cacheGraphics(TileWidth,TileHeight,TileGraphic);
		this.postGraphicLoad();
	}
	,postGraphicLoad: function() {
		this.initTileObjects();
		this.computeDimensions();
		this.updateMap();
	}
	,applyAutoTile: function() {
		if(this.auto != flixel_tile_FlxTilemapAutoTiling.OFF) {
			var i = 0;
			while(i < this.totalTiles) this.autoTile(i++);
		}
	}
	,applyCustomRemap: function() {
		var i = 0;
		if(this.customTileRemap != null) {
			while(i < this.totalTiles) {
				var oldIndex = this._data[i];
				var newIndex = oldIndex;
				if(oldIndex < this.customTileRemap.length) {
					newIndex = this.customTileRemap[oldIndex];
				}
				this._data[i] = newIndex;
				++i;
			}
		}
	}
	,randomizeIndices: function() {
		var i = 0;
		if(this._randomIndices != null) {
			var randLambda = this._randomLambda != null ? this._randomLambda : function() {
				return flixel_FlxG.random.float();
			};
			while(i < this.totalTiles) {
				var oldIndex = this._data[i];
				var j = 0;
				var newIndex = oldIndex;
				var _g = 0;
				var _g1 = this._randomIndices;
				while(_g < _g1.length) {
					var rand = _g1[_g];
					++_g;
					if(oldIndex == rand) {
						var k = randLambda() * this._randomChoices[j].length | 0;
						newIndex = this._randomChoices[j][k];
					}
					++j;
				}
				this._data[i] = newIndex;
				++i;
			}
		}
	}
	,autoTile: function(Index) {
		if(this._data[Index] == 0) {
			return;
		}
		if(this.auto == flixel_tile_FlxTilemapAutoTiling.FULL) {
			this.autoTileFull(Index);
			return;
		}
		this._data[Index] = 0;
		if(Index - this.widthInTiles < 0 || this._data[Index - this.widthInTiles] > 0) {
			this._data[Index] += 1;
		}
		if(Index % this.widthInTiles >= this.widthInTiles - 1 || this._data[Index + 1] > 0) {
			this._data[Index] += 2;
		}
		if((Index + this.widthInTiles | 0) >= this.totalTiles || this._data[Index + this.widthInTiles] > 0) {
			this._data[Index] += 4;
		}
		if(Index % this.widthInTiles <= 0 || this._data[Index - 1] > 0) {
			this._data[Index] += 8;
		}
		if(this.auto == flixel_tile_FlxTilemapAutoTiling.ALT && this._data[Index] == 15) {
			if(Index % this.widthInTiles > 0 && (Index + this.widthInTiles | 0) < this.totalTiles && this._data[Index + this.widthInTiles - 1] <= 0) {
				this._data[Index] = 1;
			}
			if(Index % this.widthInTiles > 0 && Index - this.widthInTiles >= 0 && this._data[Index - this.widthInTiles - 1] <= 0) {
				this._data[Index] = 2;
			}
			if(Index % this.widthInTiles < this.widthInTiles - 1 && Index - this.widthInTiles >= 0 && this._data[Index - this.widthInTiles + 1] <= 0) {
				this._data[Index] = 4;
			}
			if(Index % this.widthInTiles < this.widthInTiles - 1 && (Index + this.widthInTiles | 0) < this.totalTiles && this._data[Index + this.widthInTiles + 1] <= 0) {
				this._data[Index] = 8;
			}
		}
		this._data[Index] += 1;
	}
	,autoTileFull: function(Index) {
		this._data[Index] = 0;
		var wallUp = Index - this.widthInTiles < 0;
		var wallRight = Index % this.widthInTiles >= this.widthInTiles - 1;
		var wallDown = (Index + this.widthInTiles | 0) >= this.totalTiles;
		var wallLeft = Index % this.widthInTiles <= 0;
		var up = wallUp || this._data[Index - this.widthInTiles] > 0;
		var upRight = wallUp || wallRight || this._data[Index - this.widthInTiles + 1] > 0;
		var right = wallRight || this._data[Index + 1] > 0;
		var rightDown = wallRight || wallDown || this._data[Index + this.widthInTiles + 1] > 0;
		var down = wallDown || this._data[Index + this.widthInTiles] > 0;
		var downLeft = wallDown || wallLeft || this._data[Index + this.widthInTiles - 1] > 0;
		var left = wallLeft || this._data[Index - 1] > 0;
		var leftUp = wallLeft || wallUp || this._data[Index - this.widthInTiles - 1] > 0;
		if(up) {
			this._data[Index] += 1;
		}
		if(upRight && up && right) {
			this._data[Index] += 2;
		}
		if(right) {
			this._data[Index] += 4;
		}
		if(rightDown && right && down) {
			this._data[Index] += 8;
		}
		if(down) {
			this._data[Index] += 16;
		}
		if(downLeft && down && left) {
			this._data[Index] += 32;
		}
		if(left) {
			this._data[Index] += 64;
		}
		if(leftUp && left && up) {
			this._data[Index] += 128;
		}
		this._data[Index] -= flixel_tile_FlxBaseTilemap.offsetAutoTile[this._data[Index]] - 1;
	}
	,setCustomTileMappings: function(mappings,randomIndices,randomChoices,randomLambda) {
		this.customTileRemap = mappings;
		this._randomIndices = randomIndices;
		this._randomChoices = randomChoices;
		this._randomLambda = randomLambda;
		if(this._randomIndices != null && (this._randomChoices == null || this._randomChoices.length == 0)) {
			throw haxe_Exception.thrown("You must provide valid 'randomChoices' if you wish to randomize tilemap indices, please read documentation of 'setCustomTileMappings' function.");
		}
	}
	,getTile: function(X,Y) {
		return this._data[Y * this.widthInTiles + X];
	}
	,getTileByIndex: function(Index) {
		return this._data[Index];
	}
	,getTileCollisions: function(Index) {
		return this._tileObjects[Index].allowCollisions;
	}
	,getTileInstances: function(Index) {
		var array = null;
		var i = 0;
		var l = this.widthInTiles * this.heightInTiles;
		while(i < l) {
			if(this._data[i] == Index) {
				if(array == null) {
					array = [];
				}
				array.push(i);
			}
			++i;
		}
		return array;
	}
	,setTile: function(X,Y,Tile,UpdateGraphics) {
		if(UpdateGraphics == null) {
			UpdateGraphics = true;
		}
		if(X >= this.widthInTiles || Y >= this.heightInTiles) {
			return false;
		}
		return this.setTileByIndex(Y * this.widthInTiles + X,Tile,UpdateGraphics);
	}
	,setTileByIndex: function(Index,Tile,UpdateGraphics) {
		if(UpdateGraphics == null) {
			UpdateGraphics = true;
		}
		if(Index >= this._data.length) {
			return false;
		}
		var ok = true;
		this._data[Index] = Tile;
		if(!UpdateGraphics) {
			return ok;
		}
		this.setDirty();
		if(this.auto == flixel_tile_FlxTilemapAutoTiling.OFF) {
			this.updateTile(this._data[Index]);
			return ok;
		}
		var i;
		var row = (Index / this.widthInTiles | 0) - 1;
		var rowLength = row + 3;
		var column = Index % this.widthInTiles - 1;
		var columnHeight = column + 3;
		while(row < rowLength) {
			column = columnHeight - 3;
			while(column < columnHeight) {
				if(row >= 0 && row < this.heightInTiles && column >= 0 && column < this.widthInTiles) {
					i = row * this.widthInTiles + column;
					this.autoTile(i);
					this.updateTile(this._data[i]);
				}
				++column;
			}
			++row;
		}
		return ok;
	}
	,setTileProperties: function(Tile,AllowCollisions,Callback,CallbackFilter,Range1) {
		if(Range1 == null) {
			Range1 = 1;
		}
		if(AllowCollisions == null) {
			AllowCollisions = 4369;
		}
		if(Range1 <= 0) {
			Range1 = 1;
		}
		var tile;
		var i = Tile;
		var l = Tile + Range1;
		var maxIndex = this._tileObjects.length;
		if(l > maxIndex) {
			throw haxe_Exception.thrown("Index " + l + " exceeds the maximum tile index of " + maxIndex + ". Please verify the Tile (" + Tile + ") and Range (" + Range1 + ") parameters.");
		}
		while(i < l) {
			tile = this._tileObjects[i++];
			tile.set_allowCollisions(AllowCollisions);
			tile.callbackFunction = Callback;
			tile.filter = CallbackFilter;
		}
	}
	,getData: function(Simple) {
		if(Simple == null) {
			Simple = false;
		}
		if(!Simple) {
			return this._data;
		}
		var i = 0;
		var l = this._data.length;
		var data = [];
		flixel_util_FlxArrayUtil.setLength_Int(data,l);
		while(i < l) {
			data[i] = this._tileObjects[this._data[i]].allowCollisions > 0 ? 1 : 0;
			++i;
		}
		return data;
	}
	,findPath: function(Start,End,Simplify,RaySimplify,DiagonalPolicy) {
		if(DiagonalPolicy == null) {
			DiagonalPolicy = 2;
		}
		if(RaySimplify == null) {
			RaySimplify = false;
		}
		if(Simplify == null) {
			Simplify = true;
		}
		var startIndex = this.getTileIndexByCoords(Start);
		var endIndex = this.getTileIndexByCoords(End);
		if(startIndex < 0 || endIndex < 0) {
			return null;
		}
		if(this._tileObjects[this._data[startIndex]].allowCollisions > 0 || this._tileObjects[this._data[endIndex]].allowCollisions > 0) {
			return null;
		}
		var distances = this.computePathDistance(startIndex,endIndex,DiagonalPolicy);
		if(distances == null) {
			return null;
		}
		var points = [];
		this.walkPath(distances,endIndex,points);
		var node = points[points.length - 1];
		node.set_x(Start.x);
		node.set_y(Start.y);
		if(Start._weak) {
			Start.put();
		}
		node = points[0];
		node.set_x(End.x);
		node.set_y(End.y);
		if(End._weak) {
			End.put();
		}
		if(Simplify) {
			this.simplifyPath(points);
		}
		if(RaySimplify) {
			this.raySimplifyPath(points);
		}
		var path = [];
		var i = points.length - 1;
		while(i >= 0) {
			node = points[i--];
			if(node != null) {
				path.push(node);
			}
		}
		return path;
	}
	,computePathDistance: function(StartIndex,EndIndex,DiagonalPolicy,StopOnEnd) {
		if(StopOnEnd == null) {
			StopOnEnd = true;
		}
		var mapSize = this.widthInTiles * this.heightInTiles;
		var distances = [];
		flixel_util_FlxArrayUtil.setLength_Int(distances,mapSize);
		var i = 0;
		while(i < mapSize) {
			if(this._tileObjects[this._data[i]].allowCollisions != 0) {
				distances[i] = -2;
			} else {
				distances[i] = -1;
			}
			++i;
		}
		distances[StartIndex] = 0;
		var distance = 1;
		var neighbors = [StartIndex];
		var current;
		var currentIndex;
		var left;
		var right;
		var up;
		var down;
		var currentLength;
		var foundEnd = false;
		while(neighbors.length > 0) {
			current = neighbors;
			neighbors = [];
			i = 0;
			currentLength = current.length;
			while(i < currentLength) {
				currentIndex = current[i++];
				if(currentIndex == (EndIndex | 0)) {
					foundEnd = true;
					if(StopOnEnd) {
						neighbors = [];
						break;
					}
				}
				left = currentIndex % this.widthInTiles > 0;
				right = currentIndex % this.widthInTiles < this.widthInTiles - 1;
				up = currentIndex / this.widthInTiles > 0;
				down = currentIndex / this.widthInTiles < this.heightInTiles - 1;
				var index;
				if(up) {
					index = currentIndex - this.widthInTiles;
					if(distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(right) {
					index = currentIndex + 1;
					if(distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(down) {
					index = currentIndex + this.widthInTiles;
					if(distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(left) {
					index = currentIndex - 1;
					if(distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(DiagonalPolicy != 0) {
					var wideDiagonal = DiagonalPolicy == 2;
					if(up && right) {
						index = currentIndex - this.widthInTiles + 1;
						if(wideDiagonal && distances[index] == -1 && distances[currentIndex - this.widthInTiles] >= -1 && distances[currentIndex + 1] >= -1) {
							distances[index] = distance;
							neighbors.push(index);
						} else if(!wideDiagonal && distances[index] == -1) {
							distances[index] = distance;
							neighbors.push(index);
						}
					}
					if(right && down) {
						index = currentIndex + this.widthInTiles + 1;
						if(wideDiagonal && distances[index] == -1 && distances[currentIndex + this.widthInTiles] >= -1 && distances[currentIndex + 1] >= -1) {
							distances[index] = distance;
							neighbors.push(index);
						} else if(!wideDiagonal && distances[index] == -1) {
							distances[index] = distance;
							neighbors.push(index);
						}
					}
					if(left && down) {
						index = currentIndex + this.widthInTiles - 1;
						if(wideDiagonal && distances[index] == -1 && distances[currentIndex + this.widthInTiles] >= -1 && distances[currentIndex - 1] >= -1) {
							distances[index] = distance;
							neighbors.push(index);
						} else if(!wideDiagonal && distances[index] == -1) {
							distances[index] = distance;
							neighbors.push(index);
						}
					}
					if(up && left) {
						index = currentIndex - this.widthInTiles - 1;
						if(wideDiagonal && distances[index] == -1 && distances[currentIndex - this.widthInTiles] >= -1 && distances[currentIndex - 1] >= -1) {
							distances[index] = distance;
							neighbors.push(index);
						} else if(!wideDiagonal && distances[index] == -1) {
							distances[index] = distance;
							neighbors.push(index);
						}
					}
				}
			}
			++distance;
		}
		if(!foundEnd) {
			distances = null;
		}
		return distances;
	}
	,walkPath: function(Data,Start,Points) {
		Points.push(this.getTileCoordsByIndex(Start));
		if(Data[Start] == 0) {
			return;
		}
		var left = Start % this.widthInTiles > 0;
		var right = Start % this.widthInTiles < this.widthInTiles - 1;
		var up = Start / this.widthInTiles > 0;
		var down = Start / this.widthInTiles < this.heightInTiles - 1;
		var current = Data[Start];
		var i;
		if(up) {
			i = Start - this.widthInTiles;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) {
				this.walkPath(Data,i,Points);
				return;
			}
		}
		if(right) {
			i = Start + 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) {
				this.walkPath(Data,i,Points);
				return;
			}
		}
		if(down) {
			i = Start + this.widthInTiles;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) {
				this.walkPath(Data,i,Points);
				return;
			}
		}
		if(left) {
			i = Start - 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) {
				this.walkPath(Data,i,Points);
				return;
			}
		}
		if(up && right) {
			i = Start - this.widthInTiles + 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) {
				this.walkPath(Data,i,Points);
				return;
			}
		}
		if(right && down) {
			i = Start + this.widthInTiles + 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) {
				this.walkPath(Data,i,Points);
				return;
			}
		}
		if(left && down) {
			i = Start + this.widthInTiles - 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) {
				this.walkPath(Data,i,Points);
				return;
			}
		}
		if(up && left) {
			i = Start - this.widthInTiles - 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) {
				this.walkPath(Data,i,Points);
				return;
			}
		}
	}
	,simplifyPath: function(Points) {
		var deltaPrevious;
		var deltaNext;
		var last = Points[0];
		var node;
		var i = 1;
		var l = Points.length - 1;
		while(i < l) {
			node = Points[i];
			deltaPrevious = (node.x - last.x) / (node.y - last.y);
			deltaNext = (node.x - Points[i + 1].x) / (node.y - Points[i + 1].y);
			if(last.x == Points[i + 1].x || last.y == Points[i + 1].y || deltaPrevious == deltaNext) {
				Points[i] = null;
			} else {
				last = node;
			}
			++i;
		}
	}
	,raySimplifyPath: function(Points) {
		var source = Points[0];
		var lastIndex = -1;
		var node;
		var i = 1;
		var l = Points.length;
		while(i < l) {
			node = Points[i++];
			if(node == null) {
				continue;
			}
			if(this.ray(source,node,this._point)) {
				if(lastIndex >= 0) {
					Points[lastIndex] = null;
				}
			} else {
				source = Points[lastIndex];
			}
			lastIndex = i - 1;
		}
	}
	,overlaps: function(ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		var group = flixel_group_FlxTypedGroup.resolveGroup(ObjectOrGroup);
		if(group != null) {
			return flixel_group_FlxTypedGroup.overlaps($bind(this,this.tilemapOverlapsCallback),group,0,0,InScreenSpace,Camera);
		} else if(ObjectOrGroup.flixelType == 1 || ObjectOrGroup.flixelType == 3 ? this.overlapsWithCallback(ObjectOrGroup) : this.overlaps(ObjectOrGroup,false,null)) {
			return true;
		}
		return false;
	}
	,tilemapOverlapsCallback: function(ObjectOrGroup,X,Y,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		if(ObjectOrGroup.flixelType == 1 || ObjectOrGroup.flixelType == 3) {
			return this.overlapsWithCallback(ObjectOrGroup);
		} else {
			return this.overlaps(ObjectOrGroup,InScreenSpace,Camera);
		}
	}
	,overlapsAt: function(X,Y,ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		var group = flixel_group_FlxTypedGroup.resolveGroup(ObjectOrGroup);
		if(group != null) {
			return flixel_group_FlxTypedGroup.overlaps($bind(this,this.tilemapOverlapsAtCallback),group,X,Y,InScreenSpace,Camera);
		} else if(ObjectOrGroup.flixelType == 1 || ObjectOrGroup.flixelType == 3 ? this.overlapsWithCallback(ObjectOrGroup,null,false,this._point.set(X,Y)) : this.overlapsAt(X,Y,ObjectOrGroup,InScreenSpace,Camera)) {
			return true;
		}
		return false;
	}
	,tilemapOverlapsAtCallback: function(ObjectOrGroup,X,Y,InScreenSpace,Camera) {
		if(ObjectOrGroup.flixelType == 1 || ObjectOrGroup.flixelType == 3) {
			return this.overlapsWithCallback(ObjectOrGroup,null,false,this._point.set(X,Y));
		} else {
			return this.overlapsAt(X,Y,ObjectOrGroup,InScreenSpace,Camera);
		}
	}
	,overlapsPoint: function(WorldPoint,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		if(InScreenSpace) {
			if(Camera == null) {
				Camera = flixel_FlxG.camera;
			}
			WorldPoint.subtractPoint(Camera.scroll);
			if(WorldPoint._weak) {
				WorldPoint.put();
			}
		}
		return this.tileAtPointAllowsCollisions(WorldPoint);
	}
	,tileAtPointAllowsCollisions: function(point) {
		var tileIndex = this.getTileIndexByCoords(point);
		if(tileIndex < 0 || tileIndex >= this._data.length) {
			return false;
		}
		return this._tileObjects[this._data[tileIndex]].allowCollisions > 0;
	}
	,getBounds: function(Bounds) {
		if(Bounds == null) {
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect = _this;
			rect._inPool = false;
			Bounds = rect;
		}
		var X = this.x;
		var Y = this.y;
		var Width = this.get_width();
		var Height = this.get_height();
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		Bounds.x = X;
		Bounds.y = Y;
		Bounds.width = Width;
		Bounds.height = Height;
		return Bounds;
	}
	,__class__: flixel_tile_FlxBaseTilemap
});
var flixel_tile_FlxTilemapAutoTiling = $hxEnums["flixel.tile.FlxTilemapAutoTiling"] = { __ename__ : "flixel.tile.FlxTilemapAutoTiling", __constructs__ : ["OFF","AUTO","ALT","FULL"]
	,OFF: {_hx_index:0,__enum__:"flixel.tile.FlxTilemapAutoTiling",toString:$estr}
	,AUTO: {_hx_index:1,__enum__:"flixel.tile.FlxTilemapAutoTiling",toString:$estr}
	,ALT: {_hx_index:2,__enum__:"flixel.tile.FlxTilemapAutoTiling",toString:$estr}
	,FULL: {_hx_index:3,__enum__:"flixel.tile.FlxTilemapAutoTiling",toString:$estr}
};
flixel_tile_FlxTilemapAutoTiling.__empty_constructs__ = [flixel_tile_FlxTilemapAutoTiling.OFF,flixel_tile_FlxTilemapAutoTiling.AUTO,flixel_tile_FlxTilemapAutoTiling.ALT,flixel_tile_FlxTilemapAutoTiling.FULL];
var flixel_tile_FlxTileblock = function(X,Y,Width,Height) {
	flixel_FlxSprite.call(this,X,Y);
	this.makeGraphic(Width,Height,0,true);
	this.set_active(false);
	this.set_immovable(true);
	this.set_moves(false);
};
$hxClasses["flixel.tile.FlxTileblock"] = flixel_tile_FlxTileblock;
flixel_tile_FlxTileblock.__name__ = "flixel.tile.FlxTileblock";
flixel_tile_FlxTileblock.__super__ = flixel_FlxSprite;
flixel_tile_FlxTileblock.prototype = $extend(flixel_FlxSprite.prototype,{
	tileSprite: null
	,destroy: function() {
		this.tileSprite = flixel_util_FlxDestroyUtil.destroy(this.tileSprite);
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,loadFrames: function(tileFrames,empties) {
		if(empties == null) {
			empties = 0;
		}
		if(tileFrames == null) {
			return this;
		}
		this.tileSprite = this.tileSprite == null ? new flixel_FlxSprite() : this.tileSprite;
		this.tileSprite.set_frames(tileFrames);
		var spriteWidth = this.tileSprite.get_width() | 0;
		var spriteHeight = this.tileSprite.get_height() | 0;
		var total = this.tileSprite.numFrames + empties;
		var regen = false;
		if(this.get_width() % this.tileSprite.get_width() != 0) {
			this.set_width((this.get_width() / spriteWidth + 1 | 0) * spriteWidth);
			regen = true;
		}
		if(this.get_height() % this.tileSprite.get_height() != 0) {
			this.set_height((this.get_height() / spriteHeight + 1 | 0) * spriteHeight);
			regen = true;
		}
		if(regen) {
			this.makeGraphic(this.get_width() | 0,this.get_height() | 0,0,true);
		} else {
			flixel_util_FlxSpriteUtil.fill(this,0);
		}
		var row = 0;
		var column;
		var destinationX;
		var destinationY = 0;
		var widthInTiles = this.get_width() / spriteWidth | 0;
		var heightInTiles = this.get_height() / spriteHeight | 0;
		while(row < heightInTiles) {
			destinationX = 0;
			column = 0;
			while(column < widthInTiles) {
				if(flixel_FlxG.random.float() * total > empties) {
					this.tileSprite.animation.randomFrame();
					this.tileSprite.drawFrame();
					this.stamp(this.tileSprite,destinationX,destinationY);
				}
				destinationX += spriteWidth;
				++column;
			}
			destinationY += spriteHeight;
			++row;
		}
		this.dirty = true;
		return this;
	}
	,loadTiles: function(TileGraphic,TileWidth,TileHeight,Empties) {
		if(Empties == null) {
			Empties = 0;
		}
		if(TileHeight == null) {
			TileHeight = 0;
		}
		if(TileWidth == null) {
			TileWidth = 0;
		}
		if(TileGraphic == null) {
			return this;
		}
		var graph = flixel_FlxG.bitmap.add(TileGraphic);
		if(graph == null) {
			return this;
		}
		if(TileWidth == 0) {
			TileWidth = graph.height;
			if(TileWidth > graph.width) {
				TileWidth = graph.width;
			}
		}
		if(TileHeight == 0) {
			TileHeight = TileWidth;
			if(TileHeight > graph.height) {
				TileHeight = graph.height;
			}
		}
		var X = TileWidth;
		var Y = TileHeight;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		var tileFrames = flixel_graphics_frames_FlxTileFrames.fromGraphic(graph,point);
		return this.loadFrames(tileFrames,Empties);
	}
	,setTile: function(x,y,index) {
		this.tileSprite.animation.set_frameIndex(index);
		this.stamp(this.tileSprite,x * (this.tileSprite.get_width() | 0),y * (this.tileSprite.get_height() | 0));
		this.dirty = true;
	}
	,__class__: flixel_tile_FlxTileblock
});
var flixel_tweens_FlxEase = function() { };
$hxClasses["flixel.tweens.FlxEase"] = flixel_tweens_FlxEase;
flixel_tweens_FlxEase.__name__ = "flixel.tweens.FlxEase";
flixel_tweens_FlxEase.linear = function(t) {
	return t;
};
flixel_tweens_FlxEase.quadIn = function(t) {
	return t * t;
};
flixel_tweens_FlxEase.quadOut = function(t) {
	return -t * (t - 2);
};
flixel_tweens_FlxEase.quadInOut = function(t) {
	if(t <= .5) {
		return t * t * 2;
	} else {
		return 1 - --t * t * 2;
	}
};
flixel_tweens_FlxEase.cubeIn = function(t) {
	return t * t * t;
};
flixel_tweens_FlxEase.cubeOut = function(t) {
	return 1 + --t * t * t;
};
flixel_tweens_FlxEase.cubeInOut = function(t) {
	if(t <= .5) {
		return t * t * t * 4;
	} else {
		return 1 + --t * t * t * 4;
	}
};
flixel_tweens_FlxEase.quartIn = function(t) {
	return t * t * t * t;
};
flixel_tweens_FlxEase.quartOut = function(t) {
	return 1 - --t * t * t * t;
};
flixel_tweens_FlxEase.quartInOut = function(t) {
	if(t <= .5) {
		return t * t * t * t * 8;
	} else {
		t = t * 2 - 2;
		return (1 - t * t * t * t) / 2 + .5;
	}
};
flixel_tweens_FlxEase.quintIn = function(t) {
	return t * t * t * t * t;
};
flixel_tweens_FlxEase.quintOut = function(t) {
	return --t * t * t * t * t + 1;
};
flixel_tweens_FlxEase.quintInOut = function(t) {
	if((t *= 2) < 1) {
		return t * t * t * t * t / 2;
	} else {
		return ((t -= 2) * t * t * t * t + 2) / 2;
	}
};
flixel_tweens_FlxEase.smoothStepIn = function(t) {
	var t1 = t / 2;
	return 2 * (t1 * t1 * (t1 * -2 + 3));
};
flixel_tweens_FlxEase.smoothStepOut = function(t) {
	var t1 = t / 2 + 0.5;
	return 2 * (t1 * t1 * (t1 * -2 + 3)) - 1;
};
flixel_tweens_FlxEase.smoothStepInOut = function(t) {
	return t * t * (t * -2 + 3);
};
flixel_tweens_FlxEase.smootherStepIn = function(t) {
	var t1 = t / 2;
	return 2 * (t1 * t1 * t1 * (t1 * (t1 * 6 - 15) + 10));
};
flixel_tweens_FlxEase.smootherStepOut = function(t) {
	var t1 = t / 2 + 0.5;
	return 2 * (t1 * t1 * t1 * (t1 * (t1 * 6 - 15) + 10)) - 1;
};
flixel_tweens_FlxEase.smootherStepInOut = function(t) {
	return t * t * t * (t * (t * 6 - 15) + 10);
};
flixel_tweens_FlxEase.sineIn = function(t) {
	return -Math.cos(flixel_tweens_FlxEase.PI2 * t) + 1;
};
flixel_tweens_FlxEase.sineOut = function(t) {
	return Math.sin(flixel_tweens_FlxEase.PI2 * t);
};
flixel_tweens_FlxEase.sineInOut = function(t) {
	return -Math.cos(Math.PI * t) / 2 + .5;
};
flixel_tweens_FlxEase.bounceIn = function(t) {
	t = 1 - t;
	if(t < flixel_tweens_FlxEase.B1) {
		return 1 - 7.5625 * t * t;
	}
	if(t < flixel_tweens_FlxEase.B2) {
		return 1 - (7.5625 * (t - flixel_tweens_FlxEase.B3) * (t - flixel_tweens_FlxEase.B3) + .75);
	}
	if(t < flixel_tweens_FlxEase.B4) {
		return 1 - (7.5625 * (t - flixel_tweens_FlxEase.B5) * (t - flixel_tweens_FlxEase.B5) + .9375);
	}
	return 1 - (7.5625 * (t - flixel_tweens_FlxEase.B6) * (t - flixel_tweens_FlxEase.B6) + .984375);
};
flixel_tweens_FlxEase.bounceOut = function(t) {
	if(t < flixel_tweens_FlxEase.B1) {
		return 7.5625 * t * t;
	}
	if(t < flixel_tweens_FlxEase.B2) {
		return 7.5625 * (t - flixel_tweens_FlxEase.B3) * (t - flixel_tweens_FlxEase.B3) + .75;
	}
	if(t < flixel_tweens_FlxEase.B4) {
		return 7.5625 * (t - flixel_tweens_FlxEase.B5) * (t - flixel_tweens_FlxEase.B5) + .9375;
	}
	return 7.5625 * (t - flixel_tweens_FlxEase.B6) * (t - flixel_tweens_FlxEase.B6) + .984375;
};
flixel_tweens_FlxEase.bounceInOut = function(t) {
	if(t < .5) {
		t = 1 - t * 2;
		if(t < flixel_tweens_FlxEase.B1) {
			return (1 - 7.5625 * t * t) / 2;
		}
		if(t < flixel_tweens_FlxEase.B2) {
			return (1 - (7.5625 * (t - flixel_tweens_FlxEase.B3) * (t - flixel_tweens_FlxEase.B3) + .75)) / 2;
		}
		if(t < flixel_tweens_FlxEase.B4) {
			return (1 - (7.5625 * (t - flixel_tweens_FlxEase.B5) * (t - flixel_tweens_FlxEase.B5) + .9375)) / 2;
		}
		return (1 - (7.5625 * (t - flixel_tweens_FlxEase.B6) * (t - flixel_tweens_FlxEase.B6) + .984375)) / 2;
	}
	t = t * 2 - 1;
	if(t < flixel_tweens_FlxEase.B1) {
		return 7.5625 * t * t / 2 + .5;
	}
	if(t < flixel_tweens_FlxEase.B2) {
		return (7.5625 * (t - flixel_tweens_FlxEase.B3) * (t - flixel_tweens_FlxEase.B3) + .75) / 2 + .5;
	}
	if(t < flixel_tweens_FlxEase.B4) {
		return (7.5625 * (t - flixel_tweens_FlxEase.B5) * (t - flixel_tweens_FlxEase.B5) + .9375) / 2 + .5;
	}
	return (7.5625 * (t - flixel_tweens_FlxEase.B6) * (t - flixel_tweens_FlxEase.B6) + .984375) / 2 + .5;
};
flixel_tweens_FlxEase.circIn = function(t) {
	return -(Math.sqrt(1 - t * t) - 1);
};
flixel_tweens_FlxEase.circOut = function(t) {
	return Math.sqrt(1 - (t - 1) * (t - 1));
};
flixel_tweens_FlxEase.circInOut = function(t) {
	if(t <= .5) {
		return (Math.sqrt(1 - t * t * 4) - 1) / -2;
	} else {
		return (Math.sqrt(1 - (t * 2 - 2) * (t * 2 - 2)) + 1) / 2;
	}
};
flixel_tweens_FlxEase.expoIn = function(t) {
	return Math.pow(2,10 * (t - 1));
};
flixel_tweens_FlxEase.expoOut = function(t) {
	return -Math.pow(2,-10 * t) + 1;
};
flixel_tweens_FlxEase.expoInOut = function(t) {
	if(t < .5) {
		return Math.pow(2,10 * (t * 2 - 1)) / 2;
	} else {
		return (-Math.pow(2,-10 * (t * 2 - 1)) + 2) / 2;
	}
};
flixel_tweens_FlxEase.backIn = function(t) {
	return t * t * (2.70158 * t - 1.70158);
};
flixel_tweens_FlxEase.backOut = function(t) {
	return 1 - --t * t * (-2.70158 * t - 1.70158);
};
flixel_tweens_FlxEase.backInOut = function(t) {
	t *= 2;
	if(t < 1) {
		return t * t * (2.70158 * t - 1.70158) / 2;
	}
	--t;
	return (1 - --t * t * (-2.70158 * t - 1.70158)) / 2 + .5;
};
flixel_tweens_FlxEase.elasticIn = function(t) {
	return -(flixel_tweens_FlxEase.ELASTIC_AMPLITUDE * Math.pow(2,10 * --t) * Math.sin((t - flixel_tweens_FlxEase.ELASTIC_PERIOD / (2 * Math.PI) * Math.asin(1 / flixel_tweens_FlxEase.ELASTIC_AMPLITUDE)) * (2 * Math.PI) / flixel_tweens_FlxEase.ELASTIC_PERIOD));
};
flixel_tweens_FlxEase.elasticOut = function(t) {
	return flixel_tweens_FlxEase.ELASTIC_AMPLITUDE * Math.pow(2,-10 * t) * Math.sin((t - flixel_tweens_FlxEase.ELASTIC_PERIOD / (2 * Math.PI) * Math.asin(1 / flixel_tweens_FlxEase.ELASTIC_AMPLITUDE)) * (2 * Math.PI) / flixel_tweens_FlxEase.ELASTIC_PERIOD) + 1;
};
flixel_tweens_FlxEase.elasticInOut = function(t) {
	if(t < 0.5) {
		return -0.5 * (Math.pow(2,10 * (t -= 0.5)) * Math.sin((t - flixel_tweens_FlxEase.ELASTIC_PERIOD / 4) * (2 * Math.PI) / flixel_tweens_FlxEase.ELASTIC_PERIOD));
	}
	return Math.pow(2,-10 * (t -= 0.5)) * Math.sin((t - flixel_tweens_FlxEase.ELASTIC_PERIOD / 4) * (2 * Math.PI) / flixel_tweens_FlxEase.ELASTIC_PERIOD) * 0.5 + 1;
};
var flixel_tweens_FlxTween = function(Options,manager) {
	this._waitingForRestart = false;
	this._running = false;
	this._delayToUse = 0;
	this._secondsSinceStart = 0;
	this.loopDelay = 0;
	this.startDelay = 0;
	this.executions = 0;
	this.scale = 0;
	this.duration = 0;
	this.active = false;
	Options = this.resolveTweenOptions(Options);
	this.set_type(Options.type);
	this.onStart = Options.onStart;
	this.onUpdate = Options.onUpdate;
	this.onComplete = Options.onComplete;
	this.ease = Options.ease;
	this.setDelays(Options.startDelay,Options.loopDelay);
	this.manager = manager != null ? manager : flixel_tweens_FlxTween.globalManager;
};
$hxClasses["flixel.tweens.FlxTween"] = flixel_tweens_FlxTween;
flixel_tweens_FlxTween.__name__ = "flixel.tweens.FlxTween";
flixel_tweens_FlxTween.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_tweens_FlxTween.globalManager = null;
flixel_tweens_FlxTween.tween = function(Object1,Values,Duration,Options) {
	if(Duration == null) {
		Duration = 1;
	}
	return flixel_tweens_FlxTween.globalManager.tween(Object1,Values,Duration,Options);
};
flixel_tweens_FlxTween.num = function(FromValue,ToValue,Duration,Options,TweenFunction) {
	if(Duration == null) {
		Duration = 1;
	}
	return flixel_tweens_FlxTween.globalManager.num(FromValue,ToValue,Duration,Options,TweenFunction);
};
flixel_tweens_FlxTween.angle = function(Sprite,FromAngle,ToAngle,Duration,Options) {
	if(Duration == null) {
		Duration = 1;
	}
	return flixel_tweens_FlxTween.globalManager.angle(Sprite,FromAngle,ToAngle,Duration,Options);
};
flixel_tweens_FlxTween.color = function(Sprite,Duration,FromColor,ToColor,Options) {
	if(Duration == null) {
		Duration = 1;
	}
	return flixel_tweens_FlxTween.globalManager.color(Sprite,Duration,FromColor,ToColor,Options);
};
flixel_tweens_FlxTween.linearMotion = function(Object1,FromX,FromY,ToX,ToY,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) {
		UseDuration = true;
	}
	if(DurationOrSpeed == null) {
		DurationOrSpeed = 1;
	}
	return flixel_tweens_FlxTween.globalManager.linearMotion(Object1,FromX,FromY,ToX,ToY,DurationOrSpeed,UseDuration,Options);
};
flixel_tweens_FlxTween.quadMotion = function(Object1,FromX,FromY,ControlX,ControlY,ToX,ToY,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) {
		UseDuration = true;
	}
	if(DurationOrSpeed == null) {
		DurationOrSpeed = 1;
	}
	return flixel_tweens_FlxTween.globalManager.quadMotion(Object1,FromX,FromY,ControlX,ControlY,ToX,ToY,DurationOrSpeed,UseDuration,Options);
};
flixel_tweens_FlxTween.cubicMotion = function(Object1,FromX,FromY,aX,aY,bX,bY,ToX,ToY,Duration,Options) {
	if(Duration == null) {
		Duration = 1;
	}
	return flixel_tweens_FlxTween.globalManager.cubicMotion(Object1,FromX,FromY,aX,aY,bX,bY,ToX,ToY,Duration,Options);
};
flixel_tweens_FlxTween.circularMotion = function(Object1,CenterX,CenterY,Radius,Angle,Clockwise,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) {
		UseDuration = true;
	}
	if(DurationOrSpeed == null) {
		DurationOrSpeed = 1;
	}
	return flixel_tweens_FlxTween.globalManager.circularMotion(Object1,CenterX,CenterY,Radius,Angle,Clockwise,DurationOrSpeed,UseDuration,Options);
};
flixel_tweens_FlxTween.linearPath = function(Object1,Points,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) {
		UseDuration = true;
	}
	if(DurationOrSpeed == null) {
		DurationOrSpeed = 1;
	}
	return flixel_tweens_FlxTween.globalManager.linearPath(Object1,Points,DurationOrSpeed,UseDuration,Options);
};
flixel_tweens_FlxTween.quadPath = function(Object1,Points,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) {
		UseDuration = true;
	}
	if(DurationOrSpeed == null) {
		DurationOrSpeed = 1;
	}
	return flixel_tweens_FlxTween.globalManager.quadPath(Object1,Points,DurationOrSpeed,UseDuration,Options);
};
flixel_tweens_FlxTween.cancelTweensOf = function(Object1,FieldPaths) {
	flixel_tweens_FlxTween.globalManager.cancelTweensOf(Object1,FieldPaths);
};
flixel_tweens_FlxTween.completeTweensOf = function(Object1,FieldPaths) {
	flixel_tweens_FlxTween.globalManager.completeTweensOf(Object1,FieldPaths);
};
flixel_tweens_FlxTween.prototype = {
	manager: null
	,active: null
	,duration: null
	,ease: null
	,onStart: null
	,onUpdate: null
	,onComplete: null
	,type: null
	,finished: null
	,scale: null
	,backward: null
	,executions: null
	,startDelay: null
	,loopDelay: null
	,_secondsSinceStart: null
	,_delayToUse: null
	,_running: null
	,_waitingForRestart: null
	,_chainedTweens: null
	,_nextTweenInChain: null
	,resolveTweenOptions: function(Options) {
		if(Options == null) {
			Options = { type : 8};
		}
		if(Options.type == null) {
			Options.type = 8;
		}
		return Options;
	}
	,destroy: function() {
		this.onStart = null;
		this.onUpdate = null;
		this.onComplete = null;
		this.ease = null;
		this.manager = null;
		this._chainedTweens = null;
		this._nextTweenInChain = null;
	}
	,then: function(tween) {
		return this.addChainedTween(tween);
	}
	,wait: function(delay) {
		return this.addChainedTween(flixel_tweens_FlxTween.num(0,0,delay));
	}
	,addChainedTween: function(tween) {
		tween.setVarsOnEnd();
		tween.manager.remove(tween,false);
		if(this._chainedTweens == null) {
			this._chainedTweens = [];
		}
		this._chainedTweens.push(tween);
		return this;
	}
	,update: function(elapsed) {
		this._secondsSinceStart += elapsed;
		var delay = this.executions > 0 ? this.loopDelay : this.startDelay;
		if(this._secondsSinceStart < delay) {
			return;
		}
		this.scale = Math.max(this._secondsSinceStart - delay,0) / this.duration;
		if(this.ease != null) {
			this.scale = this.ease(this.scale);
		}
		if(this.backward) {
			this.scale = 1 - this.scale;
		}
		if(this._secondsSinceStart > delay && !this._running) {
			this._running = true;
			if(this.onStart != null) {
				this.onStart(this);
			}
		}
		if(this._secondsSinceStart >= this.duration + delay) {
			this.scale = this.backward ? 0 : 1;
			this.finished = true;
		} else if(this.onUpdate != null) {
			this.onUpdate(this);
		}
	}
	,start: function() {
		this._waitingForRestart = false;
		this._secondsSinceStart = 0;
		this._delayToUse = this.executions > 0 ? this.loopDelay : this.startDelay;
		if(this.duration == 0) {
			this.set_active(false);
			return this;
		}
		this.set_active(true);
		this._running = false;
		this.finished = false;
		return this;
	}
	,cancel: function() {
		this.onEnd();
		if(this.manager != null) {
			this.manager.remove(this);
		}
	}
	,cancelChain: function() {
		if(this._nextTweenInChain != null) {
			this._nextTweenInChain.cancelChain();
		}
		if(this._chainedTweens != null) {
			this._chainedTweens = null;
		}
		this.cancel();
	}
	,finish: function() {
		this.executions++;
		if(this.onComplete != null) {
			this.onComplete(this);
		}
		var type = this.type & ~16;
		if(type == 1 || type == 8) {
			this.onEnd();
			this._secondsSinceStart = this.duration + this.startDelay;
			if(type == 8 && this.manager != null) {
				this.manager.remove(this);
			}
		}
		if(type == 2 || type == 4) {
			this._secondsSinceStart = (this._secondsSinceStart - this._delayToUse) % this.duration + this._delayToUse;
			this.scale = Math.max(this._secondsSinceStart - this._delayToUse,0) / this.duration;
			if(this.ease != null && this.scale > 0 && this.scale < 1) {
				this.scale = this.ease(this.scale);
			}
			if(type == 4) {
				this.backward = !this.backward;
				if(this.backward) {
					this.scale = 1 - this.scale;
				}
			}
			this.restart();
		}
	}
	,onEnd: function() {
		this.setVarsOnEnd();
		this.processTweenChain();
	}
	,setVarsOnEnd: function() {
		this.set_active(false);
		this._running = false;
		this.finished = true;
	}
	,processTweenChain: function() {
		if(this._chainedTweens == null || this._chainedTweens.length <= 0) {
			return;
		}
		this._nextTweenInChain = this._chainedTweens.shift();
		this.doNextTween(this._nextTweenInChain);
		this._chainedTweens = null;
	}
	,doNextTween: function(tween) {
		if(!tween.active) {
			tween.start();
			this.manager.add_flixel_tweens_FlxTween(tween);
		}
		tween.setChain(this._chainedTweens);
	}
	,setChain: function(previousChain) {
		if(previousChain == null) {
			return;
		}
		if(this._chainedTweens == null) {
			this._chainedTweens = previousChain;
		} else {
			this._chainedTweens = this._chainedTweens.concat(previousChain);
		}
	}
	,restart: function() {
		if(this.active) {
			this.start();
		} else {
			this._waitingForRestart = true;
		}
	}
	,isTweenOf: function(Object1,Field) {
		return false;
	}
	,setDelays: function(StartDelay,LoopDelay) {
		this.set_startDelay(StartDelay != null ? StartDelay : 0);
		this.set_loopDelay(LoopDelay != null ? LoopDelay : 0);
		return this;
	}
	,set_startDelay: function(value) {
		var dly = Math.abs(value);
		if(this.executions == 0) {
			this._delayToUse = dly;
		}
		return this.startDelay = dly;
	}
	,set_loopDelay: function(value) {
		var dly = Math.abs(value);
		if(this.executions > 0) {
			this._secondsSinceStart = this.duration * (Math.max(this._secondsSinceStart - this._delayToUse,0) / this.duration) + Math.max(dly - this.loopDelay,0);
			this._delayToUse = dly;
		}
		return this.loopDelay = dly;
	}
	,get_percent: function() {
		return Math.max(this._secondsSinceStart - this._delayToUse,0) / this.duration;
	}
	,set_percent: function(value) {
		return this._secondsSinceStart = this.duration * value + this._delayToUse;
	}
	,set_type: function(value) {
		if(value == 0) {
			value = 8;
		} else if(value == 16) {
			value = 1 | 16;
		}
		this.backward = (value & 16) > 0;
		return this.type = value;
	}
	,set_active: function(active) {
		this.active = active;
		if(this._waitingForRestart) {
			this.restart();
		}
		return active;
	}
	,__class__: flixel_tweens_FlxTween
	,__properties__: {set_loopDelay:"set_loopDelay",set_startDelay:"set_startDelay",set_percent:"set_percent",get_percent:"get_percent",set_type:"set_type",set_active:"set_active"}
};
var flixel_tweens_FlxTweenManager = function() {
	this._tweens = [];
	flixel_FlxBasic.call(this);
	this.set_visible(false);
	flixel_FlxG.signals.preStateSwitch.add($bind(this,this.clear));
};
$hxClasses["flixel.tweens.FlxTweenManager"] = flixel_tweens_FlxTweenManager;
flixel_tweens_FlxTweenManager.__name__ = "flixel.tweens.FlxTweenManager";
flixel_tweens_FlxTweenManager.__super__ = flixel_FlxBasic;
flixel_tweens_FlxTweenManager.prototype = $extend(flixel_FlxBasic.prototype,{
	add_flixel_tweens_motion_QuadPath: function(Tween,Start) {
		if(Start == null) {
			Start = false;
		}
		if(Tween == null) {
			return null;
		}
		this._tweens.push(Tween);
		if(Start) {
			Tween.start();
		}
		return Tween;
	}
	,add_flixel_tweens_motion_LinearPath: function(Tween,Start) {
		if(Start == null) {
			Start = false;
		}
		if(Tween == null) {
			return null;
		}
		this._tweens.push(Tween);
		if(Start) {
			Tween.start();
		}
		return Tween;
	}
	,add_flixel_tweens_motion_CircularMotion: function(Tween,Start) {
		if(Start == null) {
			Start = false;
		}
		if(Tween == null) {
			return null;
		}
		this._tweens.push(Tween);
		if(Start) {
			Tween.start();
		}
		return Tween;
	}
	,add_flixel_tweens_motion_CubicMotion: function(Tween,Start) {
		if(Start == null) {
			Start = false;
		}
		if(Tween == null) {
			return null;
		}
		this._tweens.push(Tween);
		if(Start) {
			Tween.start();
		}
		return Tween;
	}
	,add_flixel_tweens_motion_QuadMotion: function(Tween,Start) {
		if(Start == null) {
			Start = false;
		}
		if(Tween == null) {
			return null;
		}
		this._tweens.push(Tween);
		if(Start) {
			Tween.start();
		}
		return Tween;
	}
	,add_flixel_tweens_motion_LinearMotion: function(Tween,Start) {
		if(Start == null) {
			Start = false;
		}
		if(Tween == null) {
			return null;
		}
		this._tweens.push(Tween);
		if(Start) {
			Tween.start();
		}
		return Tween;
	}
	,add_flixel_tweens_misc_ColorTween: function(Tween,Start) {
		if(Start == null) {
			Start = false;
		}
		if(Tween == null) {
			return null;
		}
		this._tweens.push(Tween);
		if(Start) {
			Tween.start();
		}
		return Tween;
	}
	,add_flixel_tweens_misc_AngleTween: function(Tween,Start) {
		if(Start == null) {
			Start = false;
		}
		if(Tween == null) {
			return null;
		}
		this._tweens.push(Tween);
		if(Start) {
			Tween.start();
		}
		return Tween;
	}
	,add_flixel_tweens_misc_VarTween: function(Tween,Start) {
		if(Start == null) {
			Start = false;
		}
		if(Tween == null) {
			return null;
		}
		this._tweens.push(Tween);
		if(Start) {
			Tween.start();
		}
		return Tween;
	}
	,add_flixel_tweens_misc_NumTween: function(Tween,Start) {
		if(Start == null) {
			Start = false;
		}
		if(Tween == null) {
			return null;
		}
		this._tweens.push(Tween);
		if(Start) {
			Tween.start();
		}
		return Tween;
	}
	,add_flixel_tweens_FlxTween: function(Tween,Start) {
		if(Start == null) {
			Start = false;
		}
		if(Tween == null) {
			return null;
		}
		this._tweens.push(Tween);
		if(Start) {
			Tween.start();
		}
		return Tween;
	}
	,_tweens: null
	,tween: function(Object1,Values,Duration,Options) {
		if(Duration == null) {
			Duration = 1;
		}
		var tween = new flixel_tweens_misc_VarTween(Options,this);
		tween.tween(Object1,Values,Duration);
		return this.add_flixel_tweens_misc_VarTween(tween);
	}
	,num: function(FromValue,ToValue,Duration,Options,TweenFunction) {
		if(Duration == null) {
			Duration = 1;
		}
		var tween = new flixel_tweens_misc_NumTween(Options,this);
		tween.tween(FromValue,ToValue,Duration,TweenFunction);
		return this.add_flixel_tweens_misc_NumTween(tween);
	}
	,angle: function(Sprite,FromAngle,ToAngle,Duration,Options) {
		if(Duration == null) {
			Duration = 1;
		}
		var tween = new flixel_tweens_misc_AngleTween(Options,this);
		tween.tween(FromAngle,ToAngle,Duration,Sprite);
		return this.add_flixel_tweens_misc_AngleTween(tween);
	}
	,color: function(Sprite,Duration,FromColor,ToColor,Options) {
		if(Duration == null) {
			Duration = 1;
		}
		var tween = new flixel_tweens_misc_ColorTween(Options,this);
		tween.tween(Duration,FromColor,ToColor,Sprite);
		return this.add_flixel_tweens_misc_ColorTween(tween);
	}
	,linearMotion: function(Object1,FromX,FromY,ToX,ToY,DurationOrSpeed,UseDuration,Options) {
		if(UseDuration == null) {
			UseDuration = true;
		}
		if(DurationOrSpeed == null) {
			DurationOrSpeed = 1;
		}
		var tween = new flixel_tweens_motion_LinearMotion(Options,this);
		tween.setObject(Object1);
		tween.setMotion(FromX,FromY,ToX,ToY,DurationOrSpeed,UseDuration);
		return this.add_flixel_tweens_motion_LinearMotion(tween);
	}
	,quadMotion: function(Object1,FromX,FromY,ControlX,ControlY,ToX,ToY,DurationOrSpeed,UseDuration,Options) {
		if(UseDuration == null) {
			UseDuration = true;
		}
		if(DurationOrSpeed == null) {
			DurationOrSpeed = 1;
		}
		var tween = new flixel_tweens_motion_QuadMotion(Options,this);
		tween.setObject(Object1);
		tween.setMotion(FromX,FromY,ControlX,ControlY,ToX,ToY,DurationOrSpeed,UseDuration);
		return this.add_flixel_tweens_motion_QuadMotion(tween);
	}
	,cubicMotion: function(Object1,FromX,FromY,aX,aY,bX,bY,ToX,ToY,Duration,Options) {
		if(Duration == null) {
			Duration = 1;
		}
		var tween = new flixel_tweens_motion_CubicMotion(Options,this);
		tween.setObject(Object1);
		tween.setMotion(FromX,FromY,aX,aY,bX,bY,ToX,ToY,Duration);
		return this.add_flixel_tweens_motion_CubicMotion(tween);
	}
	,circularMotion: function(Object1,CenterX,CenterY,Radius,Angle,Clockwise,DurationOrSpeed,UseDuration,Options) {
		if(UseDuration == null) {
			UseDuration = true;
		}
		if(DurationOrSpeed == null) {
			DurationOrSpeed = 1;
		}
		var tween = new flixel_tweens_motion_CircularMotion(Options,this);
		tween.setObject(Object1);
		tween.setMotion(CenterX,CenterY,Radius,Angle,Clockwise,DurationOrSpeed,UseDuration);
		return this.add_flixel_tweens_motion_CircularMotion(tween);
	}
	,linearPath: function(Object1,Points,DurationOrSpeed,UseDuration,Options) {
		if(UseDuration == null) {
			UseDuration = true;
		}
		if(DurationOrSpeed == null) {
			DurationOrSpeed = 1;
		}
		var tween = new flixel_tweens_motion_LinearPath(Options,this);
		if(Points != null) {
			var _g = 0;
			while(_g < Points.length) {
				var point = Points[_g];
				++_g;
				tween.addPoint(point.x,point.y);
			}
		}
		tween.setObject(Object1);
		tween.setMotion(DurationOrSpeed,UseDuration);
		return this.add_flixel_tweens_motion_LinearPath(tween);
	}
	,quadPath: function(Object1,Points,DurationOrSpeed,UseDuration,Options) {
		if(UseDuration == null) {
			UseDuration = true;
		}
		if(DurationOrSpeed == null) {
			DurationOrSpeed = 1;
		}
		var tween = new flixel_tweens_motion_QuadPath(Options,this);
		if(Points != null) {
			var _g = 0;
			while(_g < Points.length) {
				var point = Points[_g];
				++_g;
				tween.addPoint(point.x,point.y);
			}
		}
		tween.setObject(Object1);
		tween.setMotion(DurationOrSpeed,UseDuration);
		return this.add_flixel_tweens_motion_QuadPath(tween);
	}
	,destroy: function() {
		flixel_FlxBasic.prototype.destroy.call(this);
		flixel_FlxG.signals.preStateSwitch.remove($bind(this,this.clear));
	}
	,update: function(elapsed) {
		var finishedTweens = null;
		var _g = 0;
		var _g1 = this._tweens;
		while(_g < _g1.length) {
			var tween = _g1[_g];
			++_g;
			if(!tween.active) {
				continue;
			}
			tween.update(elapsed);
			if(tween.finished) {
				if(finishedTweens == null) {
					finishedTweens = [];
				}
				finishedTweens.push(tween);
			}
		}
		if(finishedTweens != null) {
			while(finishedTweens.length > 0) finishedTweens.shift().finish();
		}
	}
	,remove: function(Tween,Destroy) {
		if(Destroy == null) {
			Destroy = true;
		}
		if(Tween == null) {
			return null;
		}
		Tween.set_active(false);
		if(Destroy) {
			Tween.destroy();
		}
		var array = this._tweens;
		var index = array.indexOf(Tween);
		if(index != -1) {
			array[index] = array[array.length - 1];
			array.pop();
		}
		return Tween;
	}
	,clear: function() {
		var _g = 0;
		var _g1 = this._tweens;
		while(_g < _g1.length) {
			var tween = _g1[_g];
			++_g;
			if(tween != null) {
				tween.set_active(false);
				tween.destroy();
			}
		}
		this._tweens.splice(0,this._tweens.length);
	}
	,cancelTweensOf: function(Object1,FieldPaths) {
		this.forEachTweensOf(Object1,FieldPaths,function(tween) {
			tween.cancel();
		});
	}
	,completeTweensOf: function(Object1,FieldPaths) {
		this.forEachTweensOf(Object1,FieldPaths,function(tween) {
			if((tween.type & 2) == 0 && (tween.type & 4) == 0 && tween.active) {
				tween.update(1.79e+308);
			}
		});
	}
	,forEachTweensOf: function(Object1,FieldPaths,Function1) {
		if(Object1 == null) {
			throw haxe_Exception.thrown("Cannot cancel tween variables of an object that is null.");
		}
		if(FieldPaths == null || FieldPaths.length == 0) {
			var i = this._tweens.length;
			while(i-- > 0) {
				var tween = this._tweens[i];
				if(tween.isTweenOf(Object1)) {
					Function1(tween);
				}
			}
		} else {
			var propertyInfos = [];
			var _g = 0;
			while(_g < FieldPaths.length) {
				var fieldPath = FieldPaths[_g];
				++_g;
				var target = Object1;
				var path = fieldPath.split(".");
				var field = path.pop();
				var _g1 = 0;
				while(_g1 < path.length) {
					var component = path[_g1];
					++_g1;
					target = Reflect.getProperty(target,component);
					if(!Reflect.isObject(target)) {
						break;
					}
				}
				if(Reflect.isObject(target)) {
					propertyInfos.push({ object : target, field : field});
				}
			}
			var i = this._tweens.length;
			while(i-- > 0) {
				var tween = this._tweens[i];
				var _g = 0;
				while(_g < propertyInfos.length) {
					var info = propertyInfos[_g];
					++_g;
					if(tween.isTweenOf(info.object,info.field)) {
						Function1(tween);
						break;
					}
				}
			}
		}
	}
	,completeAll: function() {
		var _g = 0;
		var _g1 = this._tweens;
		while(_g < _g1.length) {
			var tween = _g1[_g];
			++_g;
			if((tween.type & 2) == 0 && (tween.type & 4) == 0 && tween.active) {
				tween.update(1.79e+308);
			}
		}
	}
	,forEach: function(Function1) {
		var _g = 0;
		var _g1 = this._tweens;
		while(_g < _g1.length) {
			var tween = _g1[_g];
			++_g;
			Function1(tween);
		}
	}
	,__class__: flixel_tweens_FlxTweenManager
});
var flixel_tweens_misc_AngleTween = function(Options,manager) {
	flixel_tweens_FlxTween.call(this,Options,manager);
};
$hxClasses["flixel.tweens.misc.AngleTween"] = flixel_tweens_misc_AngleTween;
flixel_tweens_misc_AngleTween.__name__ = "flixel.tweens.misc.AngleTween";
flixel_tweens_misc_AngleTween.__super__ = flixel_tweens_FlxTween;
flixel_tweens_misc_AngleTween.prototype = $extend(flixel_tweens_FlxTween.prototype,{
	angle: null
	,sprite: null
	,_start: null
	,_range: null
	,destroy: function() {
		flixel_tweens_FlxTween.prototype.destroy.call(this);
		this.sprite = null;
	}
	,tween: function(FromAngle,ToAngle,Duration,Sprite) {
		this._start = this.angle = FromAngle;
		this._range = ToAngle - this.angle;
		this.duration = Duration;
		this.sprite = Sprite;
		if(this.sprite != null) {
			this.sprite.set_angle(this.angle % 360);
		}
		this.start();
		return this;
	}
	,update: function(elapsed) {
		flixel_tweens_FlxTween.prototype.update.call(this,elapsed);
		this.angle = this._start + this._range * this.scale;
		if(this.sprite != null) {
			var spriteAngle = this.angle % 360;
			this.sprite.set_angle(spriteAngle);
		}
	}
	,isTweenOf: function(object,field) {
		if(this.sprite == object) {
			if(field != null) {
				return field == "angle";
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,__class__: flixel_tweens_misc_AngleTween
});
var flixel_tweens_misc_ColorTween = function(Options,manager) {
	flixel_tweens_FlxTween.call(this,Options,manager);
};
$hxClasses["flixel.tweens.misc.ColorTween"] = flixel_tweens_misc_ColorTween;
flixel_tweens_misc_ColorTween.__name__ = "flixel.tweens.misc.ColorTween";
flixel_tweens_misc_ColorTween.__super__ = flixel_tweens_FlxTween;
flixel_tweens_misc_ColorTween.prototype = $extend(flixel_tweens_FlxTween.prototype,{
	color: null
	,startColor: null
	,endColor: null
	,sprite: null
	,destroy: function() {
		flixel_tweens_FlxTween.prototype.destroy.call(this);
		this.sprite = null;
	}
	,tween: function(Duration,FromColor,ToColor,Sprite) {
		this.color = this.startColor = FromColor;
		this.endColor = ToColor;
		this.duration = Duration;
		this.sprite = Sprite;
		this.start();
		return this;
	}
	,update: function(elapsed) {
		flixel_tweens_FlxTween.prototype.update.call(this,elapsed);
		var Color1 = this.startColor;
		var Color2 = this.endColor;
		var Factor = this.scale;
		if(Factor == null) {
			Factor = 0.5;
		}
		var r = ((Color2 >> 16 & 255) - (Color1 >> 16 & 255)) * Factor + (Color1 >> 16 & 255) | 0;
		var g = ((Color2 >> 8 & 255) - (Color1 >> 8 & 255)) * Factor + (Color1 >> 8 & 255) | 0;
		var b = ((Color2 & 255) - (Color1 & 255)) * Factor + (Color1 & 255) | 0;
		var a = ((Color2 >> 24 & 255) - (Color1 >> 24 & 255)) * Factor + (Color1 >> 24 & 255) | 0;
		var Alpha = a;
		if(Alpha == null) {
			Alpha = 255;
		}
		var color = flixel_util_FlxColor._new();
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 255;
		}
		color &= -16711681;
		color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
		color &= -65281;
		color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
		color &= -256;
		color |= b > 255 ? 255 : b < 0 ? 0 : b;
		color &= 16777215;
		color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
		this.color = color;
		if(this.sprite != null) {
			this.sprite.set_color(this.color);
			this.sprite.set_alpha((this.color >> 24 & 255) / 255);
		}
	}
	,isTweenOf: function(object,field) {
		if(this.sprite == object) {
			if(field != null) {
				return field == "color";
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,__class__: flixel_tweens_misc_ColorTween
});
var flixel_tweens_misc_NumTween = function(Options,manager) {
	flixel_tweens_FlxTween.call(this,Options,manager);
};
$hxClasses["flixel.tweens.misc.NumTween"] = flixel_tweens_misc_NumTween;
flixel_tweens_misc_NumTween.__name__ = "flixel.tweens.misc.NumTween";
flixel_tweens_misc_NumTween.__super__ = flixel_tweens_FlxTween;
flixel_tweens_misc_NumTween.prototype = $extend(flixel_tweens_FlxTween.prototype,{
	value: null
	,_tweenFunction: null
	,_start: null
	,_range: null
	,destroy: function() {
		flixel_tweens_FlxTween.prototype.destroy.call(this);
		this._tweenFunction = null;
	}
	,tween: function(fromValue,toValue,duration,tweenFunction) {
		this._tweenFunction = tweenFunction;
		this._start = this.value = fromValue;
		this._range = toValue - this.value;
		this.duration = duration;
		this.start();
		return this;
	}
	,update: function(elapsed) {
		flixel_tweens_FlxTween.prototype.update.call(this,elapsed);
		this.value = this._start + this._range * this.scale;
		if(this._tweenFunction != null) {
			this._tweenFunction(this.value);
		}
	}
	,__class__: flixel_tweens_misc_NumTween
});
var flixel_tweens_misc_VarTween = function(options,manager) {
	flixel_tweens_FlxTween.call(this,options,manager);
};
$hxClasses["flixel.tweens.misc.VarTween"] = flixel_tweens_misc_VarTween;
flixel_tweens_misc_VarTween.__name__ = "flixel.tweens.misc.VarTween";
flixel_tweens_misc_VarTween.__super__ = flixel_tweens_FlxTween;
flixel_tweens_misc_VarTween.prototype = $extend(flixel_tweens_FlxTween.prototype,{
	_object: null
	,_properties: null
	,_propertyInfos: null
	,tween: function(object,properties,duration) {
		this._object = object;
		this._properties = properties;
		this._propertyInfos = [];
		this.duration = duration;
		this.start();
		this.initializeVars();
		return this;
	}
	,update: function(elapsed) {
		var delay = this.executions > 0 ? this.loopDelay : this.startDelay;
		if(this._secondsSinceStart < delay) {
			flixel_tweens_FlxTween.prototype.update.call(this,elapsed);
		} else {
			var f = this._propertyInfos[0].startValue;
			if(isNaN(f)) {
				this.setStartValues();
			}
			flixel_tweens_FlxTween.prototype.update.call(this,elapsed);
			if(this.active) {
				var _g = 0;
				var _g1 = this._propertyInfos;
				while(_g < _g1.length) {
					var info = _g1[_g];
					++_g;
					Reflect.setProperty(info.object,info.field,info.startValue + info.range * this.scale);
				}
			}
		}
	}
	,initializeVars: function() {
		var fieldPaths;
		if(Reflect.isObject(this._properties)) {
			fieldPaths = Reflect.fields(this._properties);
		} else {
			throw haxe_Exception.thrown("Unsupported properties container - use an object containing key/value pairs.");
		}
		var _g = 0;
		while(_g < fieldPaths.length) {
			var fieldPath = fieldPaths[_g];
			++_g;
			var target = this._object;
			var path = fieldPath.split(".");
			var field = path.pop();
			var _g1 = 0;
			while(_g1 < path.length) {
				var component = path[_g1];
				++_g1;
				target = Reflect.getProperty(target,component);
				if(!Reflect.isObject(target)) {
					throw haxe_Exception.thrown("The object does not have the property \"" + component + "\" in \"" + fieldPath + "\"");
				}
			}
			this._propertyInfos.push({ object : target, field : field, startValue : NaN, range : Reflect.getProperty(this._properties,fieldPath)});
		}
	}
	,setStartValues: function() {
		var _g = 0;
		var _g1 = this._propertyInfos;
		while(_g < _g1.length) {
			var info = _g1[_g];
			++_g;
			if(Reflect.getProperty(info.object,info.field) == null) {
				throw haxe_Exception.thrown("The object does not have the property \"" + info.field + "\"");
			}
			var value = Reflect.getProperty(info.object,info.field);
			if(isNaN(value)) {
				throw haxe_Exception.thrown("The property \"" + info.field + "\" is not numeric.");
			}
			info.startValue = value;
			info.range -= value;
		}
	}
	,destroy: function() {
		flixel_tweens_FlxTween.prototype.destroy.call(this);
		this._object = null;
		this._properties = null;
		this._propertyInfos = null;
	}
	,isTweenOf: function(object,field) {
		if(object == this._object && field == null) {
			return true;
		}
		var _g = 0;
		var _g1 = this._propertyInfos;
		while(_g < _g1.length) {
			var property = _g1[_g];
			++_g;
			if(object == property.object && (field == property.field || field == null)) {
				return true;
			}
		}
		return false;
	}
	,__class__: flixel_tweens_misc_VarTween
});
var flixel_tweens_motion_Motion = function(Options,manager) {
	this.y = 0;
	this.x = 0;
	flixel_tweens_FlxTween.call(this,Options,manager);
};
$hxClasses["flixel.tweens.motion.Motion"] = flixel_tweens_motion_Motion;
flixel_tweens_motion_Motion.__name__ = "flixel.tweens.motion.Motion";
flixel_tweens_motion_Motion.__super__ = flixel_tweens_FlxTween;
flixel_tweens_motion_Motion.prototype = $extend(flixel_tweens_FlxTween.prototype,{
	x: null
	,y: null
	,_object: null
	,_wasObjectImmovable: null
	,destroy: function() {
		flixel_tweens_FlxTween.prototype.destroy.call(this);
		this._object = null;
	}
	,setObject: function(object) {
		this._object = object;
		this._wasObjectImmovable = this._object.immovable;
		this._object.set_immovable(true);
		return this;
	}
	,update: function(elapsed) {
		flixel_tweens_FlxTween.prototype.update.call(this,elapsed);
		this.postUpdate();
	}
	,onEnd: function() {
		this._object.set_immovable(this._wasObjectImmovable);
		flixel_tweens_FlxTween.prototype.onEnd.call(this);
	}
	,postUpdate: function() {
		if(this._object != null) {
			this._object.setPosition(this.x,this.y);
		}
	}
	,isTweenOf: function(object,field) {
		if(this._object == object) {
			if(!(field == null || field == "x")) {
				return field == "y";
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,__class__: flixel_tweens_motion_Motion
});
var flixel_tweens_motion_CircularMotion = function(Options,manager) {
	this._angleFinish = 0;
	this._angleStart = 0;
	this._radius = 0;
	this._centerY = 0;
	this._centerX = 0;
	this.angle = 0;
	flixel_tweens_motion_Motion.call(this,Options,manager);
};
$hxClasses["flixel.tweens.motion.CircularMotion"] = flixel_tweens_motion_CircularMotion;
flixel_tweens_motion_CircularMotion.__name__ = "flixel.tweens.motion.CircularMotion";
flixel_tweens_motion_CircularMotion.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_CircularMotion.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	angle: null
	,_centerX: null
	,_centerY: null
	,_radius: null
	,_angleStart: null
	,_angleFinish: null
	,setMotion: function(CenterX,CenterY,Radius,Angle,Clockwise,DurationOrSpeed,UseDuration) {
		if(UseDuration == null) {
			UseDuration = true;
		}
		this._centerX = CenterX;
		this._centerY = CenterY;
		this._radius = Radius;
		this.angle = this._angleStart = Angle * Math.PI / -180;
		this._angleFinish = Math.PI * 2 * (Clockwise ? 1 : -1);
		if(UseDuration) {
			this.duration = DurationOrSpeed;
		} else {
			this.duration = this._radius * (Math.PI * 2) / DurationOrSpeed;
		}
		this.start();
		return this;
	}
	,update: function(elapsed) {
		flixel_tweens_motion_Motion.prototype.update.call(this,elapsed);
		this.angle = this._angleStart + this._angleFinish * this.scale;
		this.x = this._centerX + Math.cos(this.angle) * this._radius;
		this.y = this._centerY + Math.sin(this.angle) * this._radius;
		if(this.finished) {
			this.postUpdate();
		}
	}
	,get_circumference: function() {
		return this._radius * (Math.PI * 2);
	}
	,__class__: flixel_tweens_motion_CircularMotion
	,__properties__: $extend(flixel_tweens_motion_Motion.prototype.__properties__,{get_circumference:"get_circumference"})
});
var flixel_tweens_motion_CubicMotion = function(Options,manager) {
	this._tt = 0;
	this._ttt = 0;
	this._bY = 0;
	this._bX = 0;
	this._aY = 0;
	this._aX = 0;
	this._toY = 0;
	this._toX = 0;
	this._fromY = 0;
	this._fromX = 0;
	flixel_tweens_motion_Motion.call(this,Options,manager);
};
$hxClasses["flixel.tweens.motion.CubicMotion"] = flixel_tweens_motion_CubicMotion;
flixel_tweens_motion_CubicMotion.__name__ = "flixel.tweens.motion.CubicMotion";
flixel_tweens_motion_CubicMotion.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_CubicMotion.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	_fromX: null
	,_fromY: null
	,_toX: null
	,_toY: null
	,_aX: null
	,_aY: null
	,_bX: null
	,_bY: null
	,_ttt: null
	,_tt: null
	,setMotion: function(fromX,fromY,aX,aY,bX,bY,toX,toY,duration) {
		this.x = this._fromX = fromX;
		this.y = this._fromY = fromY;
		this._aX = aX;
		this._aY = aY;
		this._bX = bX;
		this._bY = bY;
		this._toX = toX;
		this._toY = toY;
		this.duration = duration;
		this.start();
		return this;
	}
	,update: function(elapsed) {
		flixel_tweens_motion_Motion.prototype.update.call(this,elapsed);
		this.x = this.scale * this.scale * this.scale * (this._toX + 3 * (this._aX - this._bX) - this._fromX) + 3 * this.scale * this.scale * (this._fromX - 2 * this._aX + this._bX) + 3 * this.scale * (this._aX - this._fromX) + this._fromX;
		this.y = this.scale * this.scale * this.scale * (this._toY + 3 * (this._aY - this._bY) - this._fromY) + 3 * this.scale * this.scale * (this._fromY - 2 * this._aY + this._bY) + 3 * this.scale * (this._aY - this._fromY) + this._fromY;
		if(this.finished) {
			this.postUpdate();
		}
	}
	,__class__: flixel_tweens_motion_CubicMotion
});
var flixel_tweens_motion_LinearMotion = function(Options,manager) {
	this._distance = -1;
	this._moveY = 0;
	this._moveX = 0;
	this._fromY = 0;
	this._fromX = 0;
	flixel_tweens_motion_Motion.call(this,Options,manager);
};
$hxClasses["flixel.tweens.motion.LinearMotion"] = flixel_tweens_motion_LinearMotion;
flixel_tweens_motion_LinearMotion.__name__ = "flixel.tweens.motion.LinearMotion";
flixel_tweens_motion_LinearMotion.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_LinearMotion.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	_fromX: null
	,_fromY: null
	,_moveX: null
	,_moveY: null
	,_distance: null
	,setMotion: function(FromX,FromY,ToX,ToY,DurationOrSpeed,UseDuration) {
		if(UseDuration == null) {
			UseDuration = true;
		}
		this._distance = -1;
		this.x = this._fromX = FromX;
		this.y = this._fromY = FromY;
		this._moveX = ToX - FromX;
		this._moveY = ToY - FromY;
		if(UseDuration) {
			this.duration = DurationOrSpeed;
		} else {
			this.duration = this.get_distance() / DurationOrSpeed;
		}
		this.start();
		return this;
	}
	,update: function(elapsed) {
		flixel_tweens_motion_Motion.prototype.update.call(this,elapsed);
		this.x = this._fromX + this._moveX * this.scale;
		this.y = this._fromY + this._moveY * this.scale;
		if(this.x == this._fromX + this._moveX && this.y == this._fromY + this._moveY && this.active && this._secondsSinceStart >= this.duration) {
			this.finished = true;
		}
		if(this.finished) {
			this.postUpdate();
		}
	}
	,get_distance: function() {
		if(this._distance >= 0) {
			return this._distance;
		}
		return this._distance = Math.sqrt(this._moveX * this._moveX + this._moveY * this._moveY);
	}
	,__class__: flixel_tweens_motion_LinearMotion
	,__properties__: $extend(flixel_tweens_motion_Motion.prototype.__properties__,{get_distance:"get_distance"})
});
var flixel_tweens_motion_LinearPath = function(Options,manager) {
	this._index = 0;
	this._speed = 0;
	this.distance = 0;
	flixel_tweens_motion_Motion.call(this,Options,manager);
	this.points = [];
	this._pointD = [0];
	this._pointT = [0];
};
$hxClasses["flixel.tweens.motion.LinearPath"] = flixel_tweens_motion_LinearPath;
flixel_tweens_motion_LinearPath.__name__ = "flixel.tweens.motion.LinearPath";
flixel_tweens_motion_LinearPath.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_LinearPath.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	distance: null
	,points: null
	,_pointD: null
	,_pointT: null
	,_speed: null
	,_index: null
	,_last: null
	,_prevPoint: null
	,_nextPoint: null
	,destroy: function() {
		flixel_tweens_motion_Motion.prototype.destroy.call(this);
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var point = _g1[_g];
			++_g;
			point = flixel_util_FlxDestroyUtil.put(point);
		}
		this._last = flixel_util_FlxDestroyUtil.put(this._last);
		this._prevPoint = flixel_util_FlxDestroyUtil.put(this._prevPoint);
		this._nextPoint = flixel_util_FlxDestroyUtil.put(this._nextPoint);
	}
	,setMotion: function(DurationOrSpeed,UseDuration) {
		if(UseDuration == null) {
			UseDuration = true;
		}
		this.updatePath();
		if(UseDuration) {
			this.duration = DurationOrSpeed;
			this._speed = this.distance / DurationOrSpeed;
		} else {
			this.duration = this.distance / DurationOrSpeed;
			this._speed = DurationOrSpeed;
		}
		this.start();
		return this;
	}
	,addPoint: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(this._last != null) {
			this.distance += Math.sqrt((x - this._last.x) * (x - this._last.x) + (y - this._last.y) * (y - this._last.y));
			this._pointD[this.points.length] = this.distance;
		}
		var tmp = this.points;
		var tmp1 = this.points.length;
		var X = x;
		var Y = y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		tmp[tmp1] = this._last = point;
		return this;
	}
	,getPoint: function(index) {
		if(index == null) {
			index = 0;
		}
		if(this.points.length == 0) {
			throw haxe_Exception.thrown("No points have been added to the path yet.");
		}
		return this.points[index % this.points.length];
	}
	,start: function() {
		this._index = this.backward ? this.points.length - 1 : 0;
		flixel_tweens_motion_Motion.prototype.start.call(this);
		return this;
	}
	,update: function(elapsed) {
		flixel_tweens_motion_Motion.prototype.update.call(this,elapsed);
		var td;
		var tt;
		if(this.points == null) {
			return;
		}
		if(!this.backward) {
			if(this._index < this.points.length - 1) {
				while(this.scale > this._pointT[this._index + 1]) {
					this._index++;
					if(this._index == this.points.length - 1) {
						this._index -= 1;
						break;
					}
				}
			}
			td = this._pointT[this._index];
			tt = this._pointT[this._index + 1] - td;
			td = (this.scale - td) / tt;
			this._prevPoint = this.points[this._index];
			this._nextPoint = this.points[this._index + 1];
			this.x = this._prevPoint.x + (this._nextPoint.x - this._prevPoint.x) * td;
			this.y = this._prevPoint.y + (this._nextPoint.y - this._prevPoint.y) * td;
		} else {
			if(this._index > 0) {
				while(this.scale < this._pointT[this._index - 1]) {
					this._index -= 1;
					if(this._index == 0) {
						this._index += 1;
						break;
					}
				}
			}
			td = this._pointT[this._index];
			tt = this._pointT[this._index - 1] - td;
			td = (this.scale - td) / tt;
			this._prevPoint = this.points[this._index];
			this._nextPoint = this.points[this._index - 1];
			this.x = this._prevPoint.x + (this._nextPoint.x - this._prevPoint.x) * td;
			this.y = this._prevPoint.y + (this._nextPoint.y - this._prevPoint.y) * td;
		}
		flixel_tweens_motion_Motion.prototype.postUpdate.call(this);
	}
	,updatePath: function() {
		if(this.points.length < 2) {
			throw haxe_Exception.thrown("A LinearPath must have at least 2 points to operate.");
		}
		if(this._pointD.length == this._pointT.length) {
			return;
		}
		var i = 0;
		while(i < this.points.length) this._pointT[i] = this._pointD[i++] / this.distance;
	}
	,__class__: flixel_tweens_motion_LinearPath
});
var flixel_tweens_motion_QuadMotion = function(Options,manager) {
	this._controlY = 0;
	this._controlX = 0;
	this._toY = 0;
	this._toX = 0;
	this._fromY = 0;
	this._fromX = 0;
	this._distance = -1;
	flixel_tweens_motion_Motion.call(this,Options,manager);
};
$hxClasses["flixel.tweens.motion.QuadMotion"] = flixel_tweens_motion_QuadMotion;
flixel_tweens_motion_QuadMotion.__name__ = "flixel.tweens.motion.QuadMotion";
flixel_tweens_motion_QuadMotion.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_QuadMotion.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	_distance: null
	,_fromX: null
	,_fromY: null
	,_toX: null
	,_toY: null
	,_controlX: null
	,_controlY: null
	,setMotion: function(FromX,FromY,ControlX,ControlY,ToX,ToY,DurationOrSpeed,UseDuration) {
		if(UseDuration == null) {
			UseDuration = true;
		}
		this._distance = -1;
		this.x = this._fromX = FromX;
		this.y = this._fromY = FromY;
		this._controlX = ControlX;
		this._controlY = ControlY;
		this._toX = ToX;
		this._toY = ToY;
		if(UseDuration) {
			this.duration = DurationOrSpeed;
		} else {
			this.duration = this.get_distance() / DurationOrSpeed;
		}
		this.start();
		return this;
	}
	,update: function(elapsed) {
		flixel_tweens_motion_Motion.prototype.update.call(this,elapsed);
		this.x = this._fromX * (1 - this.scale) * (1 - this.scale) + this._controlX * 2 * (1 - this.scale) * this.scale + this._toX * this.scale * this.scale;
		this.y = this._fromY * (1 - this.scale) * (1 - this.scale) + this._controlY * 2 * (1 - this.scale) * this.scale + this._toY * this.scale * this.scale;
		if(this.finished) {
			this.postUpdate();
		}
	}
	,get_distance: function() {
		if(this._distance >= 0) {
			return this._distance;
		}
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		var p1 = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		var p2 = point;
		p1.set_x(this.x - 2 * this._controlX + this._toX);
		p1.set_y(this.y - 2 * this._controlY + this._toY);
		p2.set_x(2 * this._controlX - 2 * this.x);
		p2.set_y(2 * this._controlY - 2 * this.y);
		var a = 4 * (p1.x * p1.x + p1.y * p1.y);
		var b = 4 * (p1.x * p2.x + p1.y * p2.y);
		var c = p2.x * p2.x + p2.y * p2.y;
		var abc = 2 * Math.sqrt(a + b + c);
		var a2 = Math.sqrt(a);
		var a32 = 2 * a * a2;
		var c2 = 2 * Math.sqrt(c);
		var ba = b / a2;
		p1.put();
		p2.put();
		return (a32 * abc + a2 * b * (abc - c2) + (4 * c * a - b * b) * Math.log((2 * a2 + ba + abc) / (ba + c2))) / (4 * a32);
	}
	,__class__: flixel_tweens_motion_QuadMotion
	,__properties__: $extend(flixel_tweens_motion_Motion.prototype.__properties__,{get_distance:"get_distance"})
});
var flixel_tweens_motion_QuadPath = function(Options,manager) {
	this._updateCurve = true;
	this._numSegs = 0;
	this._index = 0;
	this._speed = 0;
	this._distance = 0;
	flixel_tweens_motion_Motion.call(this,Options,manager);
	this._points = [];
	this._curveT = [];
	this._curveD = [];
};
$hxClasses["flixel.tweens.motion.QuadPath"] = flixel_tweens_motion_QuadPath;
flixel_tweens_motion_QuadPath.__name__ = "flixel.tweens.motion.QuadPath";
flixel_tweens_motion_QuadPath.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_QuadPath.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	_points: null
	,_distance: null
	,_speed: null
	,_index: null
	,_numSegs: null
	,_updateCurve: null
	,_curveT: null
	,_curveD: null
	,_a: null
	,_b: null
	,_c: null
	,destroy: function() {
		flixel_tweens_motion_Motion.prototype.destroy.call(this);
		var _g = 0;
		var _g1 = this._points;
		while(_g < _g1.length) {
			var point = _g1[_g];
			++_g;
			point = flixel_util_FlxDestroyUtil.put(point);
		}
		this._a = flixel_util_FlxDestroyUtil.put(this._a);
		this._b = flixel_util_FlxDestroyUtil.put(this._b);
		this._c = flixel_util_FlxDestroyUtil.put(this._c);
	}
	,setMotion: function(DurationOrSpeed,UseDuration) {
		if(UseDuration == null) {
			UseDuration = true;
		}
		this.updatePath();
		if(UseDuration) {
			this.duration = DurationOrSpeed;
			this._speed = this._distance / DurationOrSpeed;
		} else {
			this.duration = this._distance / DurationOrSpeed;
			this._speed = DurationOrSpeed;
		}
		this.start();
		return this;
	}
	,addPoint: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this._updateCurve = true;
		var tmp = this._points;
		var X = x;
		var Y = y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		tmp.push(point);
		return this;
	}
	,getPoint: function(index) {
		if(index == null) {
			index = 0;
		}
		if(this._points.length == 0) {
			throw haxe_Exception.thrown("No points have been added to the path yet.");
		}
		return this._points[index % this._points.length];
	}
	,start: function() {
		this._index = this.backward ? this._numSegs - 1 : 0;
		flixel_tweens_motion_Motion.prototype.start.call(this);
		return this;
	}
	,update: function(elapsed) {
		flixel_tweens_motion_Motion.prototype.update.call(this,elapsed);
		var td;
		var tt;
		if(!this.backward && this._points != null) {
			if(this._index < this._numSegs - 1) {
				while(this.scale > this._curveT[this._index + 1]) {
					this._index++;
					if(this._index == this._numSegs - 1) {
						break;
					}
				}
			}
			td = this._curveT[this._index];
			tt = this._curveT[this._index + 1] - td;
			td = (this.scale - td) / tt;
			this._a = this._points[this._index * 2];
			this._b = this._points[this._index * 2 + 1];
			this._c = this._points[this._index * 2 + 2];
			this.x = this._a.x * (1 - td) * (1 - td) + this._b.x * 2 * (1 - td) * td + this._c.x * td * td;
			this.y = this._a.y * (1 - td) * (1 - td) + this._b.y * 2 * (1 - td) * td + this._c.y * td * td;
		} else if(this._points != null) {
			if(this._index > 0) {
				while(this.scale < this._curveT[this._index]) {
					this._index--;
					if(this._index == 0) {
						break;
					}
				}
			}
			td = this._curveT[this._index + 1];
			tt = this._curveT[this._index] - td;
			td = (this.scale - td) / tt;
			this._a = this._points[this._index * 2 + 2];
			this._b = this._points[this._index * 2 + 1];
			this._c = this._points[this._index * 2];
			this.x = this._a.x * (1 - td) * (1 - td) + this._b.x * 2 * (1 - td) * td + this._c.x * td * td;
			this.y = this._a.y * (1 - td) * (1 - td) + this._b.y * 2 * (1 - td) * td + this._c.y * td * td;
		}
		flixel_tweens_motion_Motion.prototype.postUpdate.call(this);
	}
	,updatePath: function() {
		if((this._points.length - 1) % 2 != 0 || this._points.length < 3) {
			throw haxe_Exception.thrown("A QuadPath must have at least 3 points to operate and number of points must be a odd.");
		}
		if(!this._updateCurve) {
			return;
		}
		this._updateCurve = false;
		var i = 0;
		var j = 0;
		this._distance = 0;
		this._numSegs = (this._points.length - 1) / 2 | 0;
		while(i < this._numSegs) {
			j = i * 2;
			this._curveD[i] = this.getCurveLength(this._points[j],this._points[j + 1],this._points[j + 2]);
			this._distance += this._curveD[i++];
		}
		i = 0;
		var d = 0;
		while(i < this._numSegs) {
			d += this._curveD[i];
			this._curveT[i++] = d / this._distance;
		}
		this._curveT[this._numSegs - 1] = 1;
		this._curveT.unshift(0);
	}
	,getCurveLength: function(start,control,finish) {
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		var p1 = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		var p2 = point;
		p1.set_x(start.x - 2 * control.x + finish.x);
		p1.set_y(start.y - 2 * control.y + finish.y);
		p2.set_x(2 * control.x - 2 * start.x);
		p2.set_y(2 * control.y - 2 * start.y);
		var a = 4 * (p1.x * p1.x + p1.y * p1.y);
		var b = 4 * (p1.x * p2.x + p1.y * p2.y);
		var c = p2.x * p2.x + p2.y * p2.y;
		var abc = 2 * Math.sqrt(a + b + c);
		var a2 = Math.sqrt(a);
		var a32 = 2 * a * a2;
		var c2 = 2 * Math.sqrt(c);
		var ba = b / a2;
		p1.put();
		p2.put();
		return (a32 * abc + a2 * b * (abc - c2) + (4 * c * a - b * b) * Math.log((2 * a2 + ba + abc) / (ba + c2))) / (4 * a32);
	}
	,__class__: flixel_tweens_motion_QuadPath
});
var flixel_ui_FlxBarFillDirection = $hxEnums["flixel.ui.FlxBarFillDirection"] = { __ename__ : "flixel.ui.FlxBarFillDirection", __constructs__ : ["LEFT_TO_RIGHT","RIGHT_TO_LEFT","TOP_TO_BOTTOM","BOTTOM_TO_TOP","HORIZONTAL_INSIDE_OUT","HORIZONTAL_OUTSIDE_IN","VERTICAL_INSIDE_OUT","VERTICAL_OUTSIDE_IN"]
	,LEFT_TO_RIGHT: {_hx_index:0,__enum__:"flixel.ui.FlxBarFillDirection",toString:$estr}
	,RIGHT_TO_LEFT: {_hx_index:1,__enum__:"flixel.ui.FlxBarFillDirection",toString:$estr}
	,TOP_TO_BOTTOM: {_hx_index:2,__enum__:"flixel.ui.FlxBarFillDirection",toString:$estr}
	,BOTTOM_TO_TOP: {_hx_index:3,__enum__:"flixel.ui.FlxBarFillDirection",toString:$estr}
	,HORIZONTAL_INSIDE_OUT: {_hx_index:4,__enum__:"flixel.ui.FlxBarFillDirection",toString:$estr}
	,HORIZONTAL_OUTSIDE_IN: {_hx_index:5,__enum__:"flixel.ui.FlxBarFillDirection",toString:$estr}
	,VERTICAL_INSIDE_OUT: {_hx_index:6,__enum__:"flixel.ui.FlxBarFillDirection",toString:$estr}
	,VERTICAL_OUTSIDE_IN: {_hx_index:7,__enum__:"flixel.ui.FlxBarFillDirection",toString:$estr}
};
flixel_ui_FlxBarFillDirection.__empty_constructs__ = [flixel_ui_FlxBarFillDirection.LEFT_TO_RIGHT,flixel_ui_FlxBarFillDirection.RIGHT_TO_LEFT,flixel_ui_FlxBarFillDirection.TOP_TO_BOTTOM,flixel_ui_FlxBarFillDirection.BOTTOM_TO_TOP,flixel_ui_FlxBarFillDirection.HORIZONTAL_INSIDE_OUT,flixel_ui_FlxBarFillDirection.HORIZONTAL_OUTSIDE_IN,flixel_ui_FlxBarFillDirection.VERTICAL_INSIDE_OUT,flixel_ui_FlxBarFillDirection.VERTICAL_OUTSIDE_IN];
var flixel_ui_FlxTypedButton_$flixel_$text_$FlxText = function(X,Y,OnClick) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this.lastStatus = -1;
	this.maxInputMovement = Infinity;
	this.mouseButtons = [-1];
	this.allowSwiping = true;
	this.statusAnimations = ["normal","highlight","pressed"];
	this.labelAlphas = [0.8,1.0,0.5];
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
	point1._inPool = false;
	var point2 = flixel_math_FlxPoint._pool.get().set(0,1);
	point2._inPool = false;
	this.labelOffsets = [point,point1,point2];
	flixel_FlxSprite.call(this,X,Y);
	this.loadDefaultGraphic();
	this.onUp = new flixel_ui__$FlxButton_FlxButtonEvent(OnClick);
	this.onDown = new flixel_ui__$FlxButton_FlxButtonEvent();
	this.onOver = new flixel_ui__$FlxButton_FlxButtonEvent();
	this.onOut = new flixel_ui__$FlxButton_FlxButtonEvent();
	this.set_status(0);
	this.scrollFactor.set();
	openfl_Lib.get_current().stage.addEventListener("mouseUp",$bind(this,this.onUpEventListener));
	this.input = new flixel_input_FlxInput(0);
};
$hxClasses["flixel.ui.FlxTypedButton_flixel_text_FlxText"] = flixel_ui_FlxTypedButton_$flixel_$text_$FlxText;
flixel_ui_FlxTypedButton_$flixel_$text_$FlxText.__name__ = "flixel.ui.FlxTypedButton_flixel_text_FlxText";
flixel_ui_FlxTypedButton_$flixel_$text_$FlxText.__interfaces__ = [flixel_input_IFlxInput];
flixel_ui_FlxTypedButton_$flixel_$text_$FlxText.__super__ = flixel_FlxSprite;
flixel_ui_FlxTypedButton_$flixel_$text_$FlxText.prototype = $extend(flixel_FlxSprite.prototype,{
	label: null
	,labelOffsets: null
	,labelAlphas: null
	,statusAnimations: null
	,allowSwiping: null
	,mouseButtons: null
	,maxInputMovement: null
	,status: null
	,onUp: null
	,onDown: null
	,onOver: null
	,onOut: null
	,_spriteLabel: null
	,input: null
	,currentInput: null
	,lastStatus: null
	,graphicLoaded: function() {
		flixel_FlxSprite.prototype.graphicLoaded.call(this);
		this.setupAnimation("normal",0);
		this.setupAnimation("highlight",1);
		this.setupAnimation("pressed",2);
	}
	,loadDefaultGraphic: function() {
		this.loadGraphic("flixel/images/ui/button.png",true,80,20);
	}
	,setupAnimation: function(animationName,frameIndex) {
		frameIndex = Math.min(frameIndex,this.animation._sprite.numFrames - 1) | 0;
		this.animation.add(animationName,[frameIndex]);
	}
	,destroy: function() {
		this.set_label(flixel_util_FlxDestroyUtil.destroy(this.label));
		this._spriteLabel = null;
		this.onUp = flixel_util_FlxDestroyUtil.destroy(this.onUp);
		this.onDown = flixel_util_FlxDestroyUtil.destroy(this.onDown);
		this.onOver = flixel_util_FlxDestroyUtil.destroy(this.onOver);
		this.onOut = flixel_util_FlxDestroyUtil.destroy(this.onOut);
		this.labelOffsets = flixel_util_FlxDestroyUtil.putArray(this.labelOffsets);
		this.labelAlphas = null;
		this.currentInput = null;
		this.input = null;
		openfl_Lib.get_current().stage.removeEventListener("mouseUp",$bind(this,this.onUpEventListener));
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,update: function(elapsed) {
		flixel_FlxSprite.prototype.update.call(this,elapsed);
		if(this.visible) {
			this.updateButton();
			if(this.lastStatus != this.status) {
				this.updateStatusAnimation();
				this.lastStatus = this.status;
			}
		}
		this.input.update();
	}
	,updateStatusAnimation: function() {
		this.animation.play(this.statusAnimations[this.status]);
	}
	,draw: function() {
		flixel_FlxSprite.prototype.draw.call(this);
		if(this._spriteLabel != null && this._spriteLabel.visible) {
			this._spriteLabel.set_cameras(this.get_cameras());
			this._spriteLabel.draw();
		}
	}
	,stampOnAtlas: function(atlas) {
		var buttonNode = atlas.addNode(this.graphic.bitmap,this.graphic.key);
		var result = buttonNode != null;
		if(buttonNode != null) {
			var buttonFrames = this.frames;
			var X = buttonFrames.tileSize.x;
			var Y = buttonFrames.tileSize.y;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			var tileSize = point;
			var tileFrames = buttonNode.getTileFrames(tileSize);
			this.set_frames(tileFrames);
		}
		if(result && this.label != null) {
			var labelNode = atlas.addNode(this.label.graphic.bitmap,this.label.graphic.key);
			result = result && labelNode != null;
			if(labelNode != null) {
				this.label.set_frames(labelNode.getImageFrame());
			}
		}
		return result;
	}
	,updateButton: function() {
		var overlapFound = this.checkMouseOverlap();
		if(!overlapFound) {
			overlapFound = this.checkTouchOverlap();
		}
		if(this.currentInput != null && this.currentInput.get_justReleased() && overlapFound) {
			this.onUpHandler();
		}
		if(this.status != 0 && (!overlapFound || this.currentInput != null && this.currentInput.get_justReleased())) {
			this.onOutHandler();
		}
	}
	,checkMouseOverlap: function() {
		var overlap = false;
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = this.mouseButtons;
			while(_g2 < _g3.length) {
				var buttonID = _g3[_g2];
				++_g2;
				var button = flixel_input_mouse_FlxMouseButton.getByID(buttonID);
				if(button != null && this.checkInput(flixel_FlxG.mouse,button,button.justPressedPosition,camera)) {
					overlap = true;
				}
			}
		}
		return overlap;
	}
	,checkTouchOverlap: function() {
		var overlap = false;
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = flixel_FlxG.touches.list;
			while(_g2 < _g3.length) {
				var touch = _g3[_g2];
				++_g2;
				if(this.checkInput(touch,touch,touch.justPressedPosition,camera)) {
					overlap = true;
				}
			}
		}
		return overlap;
	}
	,checkInput: function(pointer,input,justPressedPosition,camera) {
		var tmp;
		if(this.maxInputMovement != Infinity) {
			var X = 0;
			var Y = 0;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			var point1 = point;
			point1._weak = true;
			tmp = justPressedPosition.distanceTo(pointer.getScreenPosition(null,point1)) > this.maxInputMovement;
		} else {
			tmp = false;
		}
		if(tmp && input == this.currentInput) {
			this.currentInput = null;
		} else if(this.overlapsPoint(pointer.getWorldPosition(camera,this._point),true,camera)) {
			this.updateStatus(input);
			return true;
		}
		return false;
	}
	,updateStatus: function(input) {
		if(input.get_justPressed()) {
			this.currentInput = input;
			this.onDownHandler();
		} else if(this.status == 0) {
			if(this.allowSwiping && input.get_pressed()) {
				this.onDownHandler();
			} else {
				this.onOverHandler();
			}
		}
	}
	,updateLabelPosition: function() {
		if(this._spriteLabel != null) {
			this._spriteLabel.set_x((this.pixelPerfectPosition ? Math.floor(this.x) : this.x) + this.labelOffsets[this.status].x);
			this._spriteLabel.set_y((this.pixelPerfectPosition ? Math.floor(this.y) : this.y) + this.labelOffsets[this.status].y);
		}
	}
	,updateLabelAlpha: function() {
		if(this._spriteLabel != null && this.labelAlphas.length > this.status) {
			this._spriteLabel.set_alpha(this.alpha * this.labelAlphas[this.status]);
		}
	}
	,onUpEventListener: function(_) {
		if(this.visible && this.exists && this.active && this.status == 2) {
			this.onUpHandler();
		}
	}
	,onUpHandler: function() {
		this.set_status(0);
		this.input.release();
		this.currentInput = null;
		var _this = this.onUp;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,onDownHandler: function() {
		this.set_status(2);
		this.input.press();
		var _this = this.onDown;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,onOverHandler: function() {
		if(!flixel_FlxG.mouse.enabled) {
			this.set_status(0);
			return;
		}
		this.set_status(1);
		var _this = this.onOver;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,onOutHandler: function() {
		this.set_status(0);
		this.input.release();
		var _this = this.onOut;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,set_label: function(Value) {
		if(Value != null) {
			Value.scrollFactor.put();
			Value.scrollFactor = this.scrollFactor;
		}
		this.label = Value;
		this._spriteLabel = this.label;
		this.updateLabelPosition();
		return Value;
	}
	,set_status: function(Value) {
		this.status = Value;
		this.updateLabelAlpha();
		return this.status;
	}
	,set_alpha: function(Value) {
		flixel_FlxSprite.prototype.set_alpha.call(this,Value);
		this.updateLabelAlpha();
		return this.alpha;
	}
	,set_x: function(Value) {
		flixel_FlxSprite.prototype.set_x.call(this,Value);
		this.updateLabelPosition();
		return this.x;
	}
	,set_y: function(Value) {
		flixel_FlxSprite.prototype.set_y.call(this,Value);
		this.updateLabelPosition();
		return this.y;
	}
	,get_justReleased: function() {
		return this.input.current == -1;
	}
	,get_released: function() {
		var _this = this.input;
		if(_this.current != 0) {
			return _this.current == -1;
		} else {
			return true;
		}
	}
	,get_pressed: function() {
		var _this = this.input;
		if(_this.current != 1) {
			return _this.current == 2;
		} else {
			return true;
		}
	}
	,get_justPressed: function() {
		return this.input.current == 2;
	}
	,__class__: flixel_ui_FlxTypedButton_$flixel_$text_$FlxText
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{get_justPressed:"get_justPressed",get_pressed:"get_pressed",get_released:"get_released",get_justReleased:"get_justReleased",set_status:"set_status",set_label:"set_label"})
});
var flixel_ui_FlxButton = function(X,Y,Text1,OnClick) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	flixel_ui_FlxTypedButton_$flixel_$text_$FlxText.call(this,X,Y,OnClick);
	var _g = 0;
	var _g1 = this.labelOffsets;
	while(_g < _g1.length) {
		var point = _g1[_g];
		++_g;
		point.set(point.x - 1,point.y + 3);
	}
	if(Text1 != null) {
		this.set_label(new flixel_text_FlxText(this.x + this.labelOffsets[0].x,this.y + this.labelOffsets[0].y,80,Text1));
		this.label.setFormat(null,8,3355443,"center");
		this.label.set_alpha(this.labelAlphas[this.status]);
		this.label.drawFrame(true);
	}
};
$hxClasses["flixel.ui.FlxButton"] = flixel_ui_FlxButton;
flixel_ui_FlxButton.__name__ = "flixel.ui.FlxButton";
flixel_ui_FlxButton.__super__ = flixel_ui_FlxTypedButton_$flixel_$text_$FlxText;
flixel_ui_FlxButton.prototype = $extend(flixel_ui_FlxTypedButton_$flixel_$text_$FlxText.prototype,{
	resetHelpers: function() {
		flixel_ui_FlxTypedButton_$flixel_$text_$FlxText.prototype.resetHelpers.call(this);
		if(this.label != null) {
			var tmp = this.label;
			var tmp1 = this.get_width() | 0;
			tmp.set_fieldWidth(this.label.frameWidth = tmp1);
			this.label.set_size(this.label._defaultFormat.size | 0);
		}
	}
	,initLabel: function(Text1) {
		if(Text1 != null) {
			this.set_label(new flixel_text_FlxText(this.x + this.labelOffsets[0].x,this.y + this.labelOffsets[0].y,80,Text1));
			this.label.setFormat(null,8,3355443,"center");
			this.label.set_alpha(this.labelAlphas[this.status]);
			this.label.drawFrame(true);
		}
	}
	,get_text: function() {
		if(this.label != null) {
			return this.label.text;
		} else {
			return null;
		}
	}
	,set_text: function(Text1) {
		if(this.label == null) {
			if(Text1 != null) {
				this.set_label(new flixel_text_FlxText(this.x + this.labelOffsets[0].x,this.y + this.labelOffsets[0].y,80,Text1));
				this.label.setFormat(null,8,3355443,"center");
				this.label.set_alpha(this.labelAlphas[this.status]);
				this.label.drawFrame(true);
			}
		} else {
			this.label.set_text(Text1);
		}
		return Text1;
	}
	,__class__: flixel_ui_FlxButton
	,__properties__: $extend(flixel_ui_FlxTypedButton_$flixel_$text_$FlxText.prototype.__properties__,{set_text:"set_text",get_text:"get_text"})
});
var flixel_ui__$FlxButton_FlxButtonEvent = function(Callback,sound) {
	this.callback = Callback;
	this.sound = sound;
};
$hxClasses["flixel.ui._FlxButton.FlxButtonEvent"] = flixel_ui__$FlxButton_FlxButtonEvent;
flixel_ui__$FlxButton_FlxButtonEvent.__name__ = "flixel.ui._FlxButton.FlxButtonEvent";
flixel_ui__$FlxButton_FlxButtonEvent.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_ui__$FlxButton_FlxButtonEvent.prototype = {
	callback: null
	,sound: null
	,destroy: function() {
		this.callback = null;
		this.sound = flixel_util_FlxDestroyUtil.destroy(this.sound);
	}
	,fire: function() {
		if(this.callback != null) {
			this.callback();
		}
		if(this.sound != null) {
			this.sound.play(true);
		}
	}
	,__class__: flixel_ui__$FlxButton_FlxButtonEvent
};
var flixel_ui_FlxTypedButton_$flixel_$FlxSprite = function(X,Y,OnClick) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this.lastStatus = -1;
	this.maxInputMovement = Infinity;
	this.mouseButtons = [-1];
	this.allowSwiping = true;
	this.statusAnimations = ["normal","highlight","pressed"];
	this.labelAlphas = [0.8,1.0,0.5];
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
	point1._inPool = false;
	var point2 = flixel_math_FlxPoint._pool.get().set(0,1);
	point2._inPool = false;
	this.labelOffsets = [point,point1,point2];
	flixel_FlxSprite.call(this,X,Y);
	this.loadDefaultGraphic();
	this.onUp = new flixel_ui__$FlxButton_FlxButtonEvent(OnClick);
	this.onDown = new flixel_ui__$FlxButton_FlxButtonEvent();
	this.onOver = new flixel_ui__$FlxButton_FlxButtonEvent();
	this.onOut = new flixel_ui__$FlxButton_FlxButtonEvent();
	this.set_status(0);
	this.scrollFactor.set();
	openfl_Lib.get_current().stage.addEventListener("mouseUp",$bind(this,this.onUpEventListener));
	this.input = new flixel_input_FlxInput(0);
};
$hxClasses["flixel.ui.FlxTypedButton_flixel_FlxSprite"] = flixel_ui_FlxTypedButton_$flixel_$FlxSprite;
flixel_ui_FlxTypedButton_$flixel_$FlxSprite.__name__ = "flixel.ui.FlxTypedButton_flixel_FlxSprite";
flixel_ui_FlxTypedButton_$flixel_$FlxSprite.__interfaces__ = [flixel_input_IFlxInput];
flixel_ui_FlxTypedButton_$flixel_$FlxSprite.__super__ = flixel_FlxSprite;
flixel_ui_FlxTypedButton_$flixel_$FlxSprite.prototype = $extend(flixel_FlxSprite.prototype,{
	label: null
	,labelOffsets: null
	,labelAlphas: null
	,statusAnimations: null
	,allowSwiping: null
	,mouseButtons: null
	,maxInputMovement: null
	,status: null
	,onUp: null
	,onDown: null
	,onOver: null
	,onOut: null
	,_spriteLabel: null
	,input: null
	,currentInput: null
	,lastStatus: null
	,graphicLoaded: function() {
		flixel_FlxSprite.prototype.graphicLoaded.call(this);
		this.setupAnimation("normal",0);
		this.setupAnimation("highlight",1);
		this.setupAnimation("pressed",2);
	}
	,loadDefaultGraphic: function() {
		this.loadGraphic("flixel/images/ui/button.png",true,80,20);
	}
	,setupAnimation: function(animationName,frameIndex) {
		frameIndex = Math.min(frameIndex,this.animation._sprite.numFrames - 1) | 0;
		this.animation.add(animationName,[frameIndex]);
	}
	,destroy: function() {
		this.set_label(flixel_util_FlxDestroyUtil.destroy(this.label));
		this._spriteLabel = null;
		this.onUp = flixel_util_FlxDestroyUtil.destroy(this.onUp);
		this.onDown = flixel_util_FlxDestroyUtil.destroy(this.onDown);
		this.onOver = flixel_util_FlxDestroyUtil.destroy(this.onOver);
		this.onOut = flixel_util_FlxDestroyUtil.destroy(this.onOut);
		this.labelOffsets = flixel_util_FlxDestroyUtil.putArray(this.labelOffsets);
		this.labelAlphas = null;
		this.currentInput = null;
		this.input = null;
		openfl_Lib.get_current().stage.removeEventListener("mouseUp",$bind(this,this.onUpEventListener));
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,update: function(elapsed) {
		flixel_FlxSprite.prototype.update.call(this,elapsed);
		if(this.visible) {
			this.updateButton();
			if(this.lastStatus != this.status) {
				this.updateStatusAnimation();
				this.lastStatus = this.status;
			}
		}
		this.input.update();
	}
	,updateStatusAnimation: function() {
		this.animation.play(this.statusAnimations[this.status]);
	}
	,draw: function() {
		flixel_FlxSprite.prototype.draw.call(this);
		if(this._spriteLabel != null && this._spriteLabel.visible) {
			this._spriteLabel.set_cameras(this.get_cameras());
			this._spriteLabel.draw();
		}
	}
	,stampOnAtlas: function(atlas) {
		var buttonNode = atlas.addNode(this.graphic.bitmap,this.graphic.key);
		var result = buttonNode != null;
		if(buttonNode != null) {
			var buttonFrames = this.frames;
			var X = buttonFrames.tileSize.x;
			var Y = buttonFrames.tileSize.y;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			var tileSize = point;
			var tileFrames = buttonNode.getTileFrames(tileSize);
			this.set_frames(tileFrames);
		}
		if(result && this.label != null) {
			var labelNode = atlas.addNode(this.label.graphic.bitmap,this.label.graphic.key);
			result = result && labelNode != null;
			if(labelNode != null) {
				this.label.set_frames(labelNode.getImageFrame());
			}
		}
		return result;
	}
	,updateButton: function() {
		var overlapFound = this.checkMouseOverlap();
		if(!overlapFound) {
			overlapFound = this.checkTouchOverlap();
		}
		if(this.currentInput != null && this.currentInput.get_justReleased() && overlapFound) {
			this.onUpHandler();
		}
		if(this.status != 0 && (!overlapFound || this.currentInput != null && this.currentInput.get_justReleased())) {
			this.onOutHandler();
		}
	}
	,checkMouseOverlap: function() {
		var overlap = false;
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = this.mouseButtons;
			while(_g2 < _g3.length) {
				var buttonID = _g3[_g2];
				++_g2;
				var button = flixel_input_mouse_FlxMouseButton.getByID(buttonID);
				if(button != null && this.checkInput(flixel_FlxG.mouse,button,button.justPressedPosition,camera)) {
					overlap = true;
				}
			}
		}
		return overlap;
	}
	,checkTouchOverlap: function() {
		var overlap = false;
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = flixel_FlxG.touches.list;
			while(_g2 < _g3.length) {
				var touch = _g3[_g2];
				++_g2;
				if(this.checkInput(touch,touch,touch.justPressedPosition,camera)) {
					overlap = true;
				}
			}
		}
		return overlap;
	}
	,checkInput: function(pointer,input,justPressedPosition,camera) {
		var tmp;
		if(this.maxInputMovement != Infinity) {
			var X = 0;
			var Y = 0;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			var point1 = point;
			point1._weak = true;
			tmp = justPressedPosition.distanceTo(pointer.getScreenPosition(null,point1)) > this.maxInputMovement;
		} else {
			tmp = false;
		}
		if(tmp && input == this.currentInput) {
			this.currentInput = null;
		} else if(this.overlapsPoint(pointer.getWorldPosition(camera,this._point),true,camera)) {
			this.updateStatus(input);
			return true;
		}
		return false;
	}
	,updateStatus: function(input) {
		if(input.get_justPressed()) {
			this.currentInput = input;
			this.onDownHandler();
		} else if(this.status == 0) {
			if(this.allowSwiping && input.get_pressed()) {
				this.onDownHandler();
			} else {
				this.onOverHandler();
			}
		}
	}
	,updateLabelPosition: function() {
		if(this._spriteLabel != null) {
			this._spriteLabel.set_x((this.pixelPerfectPosition ? Math.floor(this.x) : this.x) + this.labelOffsets[this.status].x);
			this._spriteLabel.set_y((this.pixelPerfectPosition ? Math.floor(this.y) : this.y) + this.labelOffsets[this.status].y);
		}
	}
	,updateLabelAlpha: function() {
		if(this._spriteLabel != null && this.labelAlphas.length > this.status) {
			this._spriteLabel.set_alpha(this.alpha * this.labelAlphas[this.status]);
		}
	}
	,onUpEventListener: function(_) {
		if(this.visible && this.exists && this.active && this.status == 2) {
			this.onUpHandler();
		}
	}
	,onUpHandler: function() {
		this.set_status(0);
		this.input.release();
		this.currentInput = null;
		var _this = this.onUp;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,onDownHandler: function() {
		this.set_status(2);
		this.input.press();
		var _this = this.onDown;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,onOverHandler: function() {
		if(!flixel_FlxG.mouse.enabled) {
			this.set_status(0);
			return;
		}
		this.set_status(1);
		var _this = this.onOver;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,onOutHandler: function() {
		this.set_status(0);
		this.input.release();
		var _this = this.onOut;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,set_label: function(Value) {
		if(Value != null) {
			Value.scrollFactor.put();
			Value.scrollFactor = this.scrollFactor;
		}
		this.label = Value;
		this._spriteLabel = this.label;
		this.updateLabelPosition();
		return Value;
	}
	,set_status: function(Value) {
		this.status = Value;
		this.updateLabelAlpha();
		return this.status;
	}
	,set_alpha: function(Value) {
		flixel_FlxSprite.prototype.set_alpha.call(this,Value);
		this.updateLabelAlpha();
		return this.alpha;
	}
	,set_x: function(Value) {
		flixel_FlxSprite.prototype.set_x.call(this,Value);
		this.updateLabelPosition();
		return this.x;
	}
	,set_y: function(Value) {
		flixel_FlxSprite.prototype.set_y.call(this,Value);
		this.updateLabelPosition();
		return this.y;
	}
	,get_justReleased: function() {
		return this.input.current == -1;
	}
	,get_released: function() {
		var _this = this.input;
		if(_this.current != 0) {
			return _this.current == -1;
		} else {
			return true;
		}
	}
	,get_pressed: function() {
		var _this = this.input;
		if(_this.current != 1) {
			return _this.current == 2;
		} else {
			return true;
		}
	}
	,get_justPressed: function() {
		return this.input.current == 2;
	}
	,__class__: flixel_ui_FlxTypedButton_$flixel_$FlxSprite
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{get_justPressed:"get_justPressed",get_pressed:"get_pressed",get_released:"get_released",get_justReleased:"get_justReleased",set_status:"set_status",set_label:"set_label"})
});
var flixel_ui_FlxSpriteButton = function(X,Y,Label,OnClick) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	flixel_ui_FlxTypedButton_$flixel_$FlxSprite.call(this,X,Y,OnClick);
	var _g = 0;
	var _g1 = this.labelOffsets;
	while(_g < _g1.length) {
		var point = _g1[_g];
		++_g;
		point.set(point.x - 1,point.y + 4);
	}
	this.set_label(Label);
};
$hxClasses["flixel.ui.FlxSpriteButton"] = flixel_ui_FlxSpriteButton;
flixel_ui_FlxSpriteButton.__name__ = "flixel.ui.FlxSpriteButton";
flixel_ui_FlxSpriteButton.__interfaces__ = [flixel_input_IFlxInput];
flixel_ui_FlxSpriteButton.__super__ = flixel_ui_FlxTypedButton_$flixel_$FlxSprite;
flixel_ui_FlxSpriteButton.prototype = $extend(flixel_ui_FlxTypedButton_$flixel_$FlxSprite.prototype,{
	createTextLabel: function(Text1,font,size,color,align) {
		if(align == null) {
			align = "center";
		}
		if(color == null) {
			color = 3355443;
		}
		if(size == null) {
			size = 8;
		}
		if(Text1 != null) {
			var text = new flixel_text_FlxText(0,0,this.frameWidth,Text1);
			text.setFormat(font,size,color,align);
			text.set_alpha(this.labelAlphas[this.status]);
			text.drawFrame(true);
			var labelBitmap = text.graphic.bitmap.clone();
			var labelKey = text.graphic.key;
			text.destroy();
			if(this.label == null) {
				this.set_label(new flixel_FlxSprite());
			}
			var labelGraphic = flixel_FlxG.bitmap.add(labelBitmap,false,labelKey);
			this.label.set_frames(flixel_graphics_frames_FlxImageFrame.fromGraphic(labelGraphic));
		}
		return this;
	}
	,__class__: flixel_ui_FlxSpriteButton
});
var flixel_util_FlxArrayUtil = function() { };
$hxClasses["flixel.util.FlxArrayUtil"] = flixel_util_FlxArrayUtil;
flixel_util_FlxArrayUtil.__name__ = "flixel.util.FlxArrayUtil";
flixel_util_FlxArrayUtil.setLength_Int = function(array,newLength) {
	if(newLength < 0) {
		return array;
	}
	var oldLength = array.length;
	var diff = newLength - oldLength;
	if(diff >= 0) {
		return array;
	}
	diff = -diff;
	var _g = 0;
	var _g1 = diff;
	while(_g < _g1) {
		var i = _g++;
		array.pop();
	}
	return array;
};
flixel_util_FlxArrayUtil.flatten2DArray_Int = function(array) {
	var result = [];
	var _g = 0;
	while(_g < array.length) {
		var innerArray = array[_g];
		++_g;
		var _g1 = 0;
		while(_g1 < innerArray.length) {
			var element = innerArray[_g1];
			++_g1;
			result.push(element);
		}
	}
	return result;
};
flixel_util_FlxArrayUtil.fastSplice_flixel_tweens_FlxTween = function(array,element) {
	var index = array.indexOf(element);
	if(index != -1) {
		array[index] = array[array.length - 1];
		array.pop();
		return array;
	}
	return array;
};
flixel_util_FlxArrayUtil.setLength_cacheValue_T = function(array,newLength) {
	if(newLength < 0) {
		return array;
	}
	var oldLength = array.length;
	var diff = newLength - oldLength;
	if(diff >= 0) {
		return array;
	}
	diff = -diff;
	var _g = 0;
	var _g1 = diff;
	while(_g < _g1) {
		var i = _g++;
		array.pop();
	}
	return array;
};
flixel_util_FlxArrayUtil.fastSplice_flixel_util_FlxTimer = function(array,element) {
	var index = array.indexOf(element);
	if(index != -1) {
		array[index] = array[array.length - 1];
		array.pop();
		return array;
	}
	return array;
};
flixel_util_FlxArrayUtil.swapAndPop_fastSplice_T = function(array,index) {
	array[index] = array[array.length - 1];
	array.pop();
	return array;
};
flixel_util_FlxArrayUtil.setLength_flixel_group_FlxTypedGroup_T = function(array,newLength) {
	if(newLength < 0) {
		return array;
	}
	var oldLength = array.length;
	var diff = newLength - oldLength;
	if(diff >= 0) {
		return array;
	}
	diff = -diff;
	var _g = 0;
	var _g1 = diff;
	while(_g < _g1) {
		var i = _g++;
		array.pop();
	}
	return array;
};
flixel_util_FlxArrayUtil.clearArray = function(array,recursive) {
	if(recursive == null) {
		recursive = false;
	}
	if(array == null) {
		return array;
	}
	if(recursive) {
		while(array.length > 0) {
			var thing = array.pop();
			if(((thing) instanceof Array)) {
				flixel_util_FlxArrayUtil.clearArray(array,recursive);
			}
		}
	} else {
		while(array.length > 0) array.pop();
	}
	return array;
};
flixel_util_FlxArrayUtil.equals = function(array1,array2) {
	if(array1 == null && array2 == null) {
		return true;
	}
	if(array1 == null && array2 != null) {
		return false;
	}
	if(array1 != null && array2 == null) {
		return false;
	}
	if(array1.length != array2.length) {
		return false;
	}
	var _g = 0;
	var _g1 = array1.length;
	while(_g < _g1) {
		var i = _g++;
		if(array1[i] != array2[i]) {
			return false;
		}
	}
	return true;
};
flixel_util_FlxArrayUtil.last = function(array) {
	if(array == null || array.length == 0) {
		return null;
	}
	return array[array.length - 1];
};
flixel_util_FlxArrayUtil.safePush = function(array,element) {
	if(array == null) {
		array = [];
	}
	array.push(element);
	return array;
};
flixel_util_FlxArrayUtil.contains = function(array,element) {
	return array.indexOf(element) != -1;
};
var flixel_util_FlxAxes = $hxEnums["flixel.util.FlxAxes"] = { __ename__ : "flixel.util.FlxAxes", __constructs__ : ["X","Y","XY"]
	,X: {_hx_index:0,__enum__:"flixel.util.FlxAxes",toString:$estr}
	,Y: {_hx_index:1,__enum__:"flixel.util.FlxAxes",toString:$estr}
	,XY: {_hx_index:2,__enum__:"flixel.util.FlxAxes",toString:$estr}
};
flixel_util_FlxAxes.__empty_constructs__ = [flixel_util_FlxAxes.X,flixel_util_FlxAxes.Y,flixel_util_FlxAxes.XY];
var flixel_util_FlxBitmapDataPool = function() { };
$hxClasses["flixel.util.FlxBitmapDataPool"] = flixel_util_FlxBitmapDataPool;
flixel_util_FlxBitmapDataPool.__name__ = "flixel.util.FlxBitmapDataPool";
flixel_util_FlxBitmapDataPool.__properties__ = {set_maxLength:"set_maxLength"};
flixel_util_FlxBitmapDataPool.get = function(w,h,transparent,fillColor,exactSize) {
	if(exactSize == null) {
		exactSize = false;
	}
	if(transparent == null) {
		transparent = true;
	}
	var res = null;
	var node = flixel_util_FlxBitmapDataPool._head;
	while(node != null) {
		var bmd = node.bmd;
		if(bmd.transparent == transparent && bmd.width >= w && bmd.height >= h && (!exactSize || exactSize && bmd.width == w && bmd.height == h)) {
			res = bmd;
			if(node.prev != null) {
				node.prev.next = node.next;
			}
			if(node.next != null) {
				node.next.prev = node.prev;
			}
			if(node == flixel_util_FlxBitmapDataPool._head) {
				flixel_util_FlxBitmapDataPool._head = node.next;
			}
			if(node == flixel_util_FlxBitmapDataPool._tail) {
				flixel_util_FlxBitmapDataPool._tail = node.prev;
			}
			node = null;
			flixel_util_FlxBitmapDataPool.$length--;
			break;
		}
		node = node.next;
	}
	if(res != null) {
		if(fillColor != null) {
			flixel_util_FlxBitmapDataPool._rect.x = 0;
			flixel_util_FlxBitmapDataPool._rect.y = 0;
			flixel_util_FlxBitmapDataPool._rect.width = w;
			flixel_util_FlxBitmapDataPool._rect.height = h;
			res.fillRect(flixel_util_FlxBitmapDataPool._rect,fillColor);
		}
	} else {
		res = new openfl_display_BitmapData(w,h,transparent,fillColor != null ? fillColor : -1);
	}
	return res;
};
flixel_util_FlxBitmapDataPool.put = function(bmd) {
	if(flixel_util_FlxBitmapDataPool.$length >= flixel_util_FlxBitmapDataPool.maxLength) {
		var last = flixel_util_FlxBitmapDataPool._tail;
		last.bmd.dispose();
		if(last.prev != null) {
			last.prev.next = null;
			flixel_util_FlxBitmapDataPool._tail = last.prev;
		}
		last = null;
		flixel_util_FlxBitmapDataPool.$length--;
	}
	var node = new flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode(bmd);
	node.next = flixel_util_FlxBitmapDataPool._head;
	if(flixel_util_FlxBitmapDataPool._head == null) {
		flixel_util_FlxBitmapDataPool._head = flixel_util_FlxBitmapDataPool._tail = node;
	} else {
		flixel_util_FlxBitmapDataPool._head = node;
		node.next.prev = node;
	}
	flixel_util_FlxBitmapDataPool.$length++;
};
flixel_util_FlxBitmapDataPool.clear = function() {
	var node = flixel_util_FlxBitmapDataPool._head;
	while(node != null) {
		var bmd = node.bmd;
		bmd.dispose();
		bmd = null;
		node = node.next;
	}
	flixel_util_FlxBitmapDataPool.$length = 0;
	flixel_util_FlxBitmapDataPool._head = flixel_util_FlxBitmapDataPool._tail = null;
};
flixel_util_FlxBitmapDataPool.set_maxLength = function(value) {
	if(flixel_util_FlxBitmapDataPool.maxLength != value) {
		var node = flixel_util_FlxBitmapDataPool._tail;
		while(node != null && flixel_util_FlxBitmapDataPool.$length > value) {
			var bmd = node.bmd;
			bmd.dispose();
			bmd = null;
			node = node.prev;
			flixel_util_FlxBitmapDataPool.$length--;
		}
	}
	return flixel_util_FlxBitmapDataPool.maxLength = value;
};
var flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode = function(bmd,prev,next) {
	this.bmd = bmd;
	this.prev = prev;
	this.next = next;
};
$hxClasses["flixel.util._FlxBitmapDataPool.FlxBitmapDataPoolNode"] = flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode;
flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode.__name__ = "flixel.util._FlxBitmapDataPool.FlxBitmapDataPoolNode";
flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode.prototype = {
	bmd: null
	,prev: null
	,next: null
	,__class__: flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode
};
var flixel_util_FlxBitmapDataUtil = function() { };
$hxClasses["flixel.util.FlxBitmapDataUtil"] = flixel_util_FlxBitmapDataUtil;
flixel_util_FlxBitmapDataUtil.__name__ = "flixel.util.FlxBitmapDataUtil";
flixel_util_FlxBitmapDataUtil.merge = function(sourceBitmapData,sourceRect,destBitmapData,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(destPoint.x >= destBitmapData.width || destPoint.y >= destBitmapData.height || sourceRect.x >= sourceBitmapData.width || sourceRect.y >= sourceBitmapData.height || sourceRect.x + sourceRect.width <= 0 || sourceRect.y + sourceRect.height <= 0) {
		return;
	}
	while(sourceRect.x + sourceRect.width > sourceBitmapData.width || sourceRect.y + sourceRect.height > sourceBitmapData.height || sourceRect.x < 0 || sourceRect.y < 0 || destPoint.x < 0 || destPoint.y < 0) {
		if(sourceRect.x + sourceRect.width > sourceBitmapData.width) {
			sourceRect.width = sourceBitmapData.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceBitmapData.height) {
			sourceRect.height = sourceBitmapData.height - sourceRect.y;
		}
		if(sourceRect.x < 0) {
			destPoint.x -= sourceRect.x;
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			destPoint.y -= sourceRect.y;
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x >= destBitmapData.width || destPoint.y >= destBitmapData.height) {
			return;
		}
		if(destPoint.x < 0) {
			sourceRect.x -= destPoint.x;
			sourceRect.width += destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.y -= destPoint.y;
			sourceRect.height += destPoint.y;
			destPoint.y = 0;
		}
	}
	if(sourceRect.width <= 0 || sourceRect.height <= 0) {
		return;
	}
	var startSourceX = Math.round(sourceRect.x);
	var startSourceY = Math.round(sourceRect.y);
	var width = Math.round(sourceRect.width);
	var height = Math.round(sourceRect.height);
	var sourceX = startSourceX;
	var sourceY = startSourceY;
	var destX = Math.round(destPoint.x);
	var destY = Math.round(destPoint.y);
	var currX = destX;
	var currY = destY;
	var sourceColor;
	var destColor;
	var resultRed;
	var resultGreen;
	var resultBlue;
	var resultAlpha;
	var resultColor = 0;
	destBitmapData.lock();
	var _g = 0;
	var _g1 = width;
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g3 = height;
		while(_g2 < _g3) {
			var j = _g2++;
			sourceX = startSourceX + i;
			sourceY = startSourceY + j;
			currX = destX + i;
			currY = destY + j;
			sourceColor = sourceBitmapData.getPixel32(sourceX,sourceY);
			destColor = destBitmapData.getPixel32(currX,currY);
			resultRed = ((sourceColor >> 16 & 255) * redMultiplier + (destColor >> 16 & 255) * (256 - redMultiplier)) / 256 | 0;
			resultGreen = ((sourceColor >> 8 & 255) * greenMultiplier + (destColor >> 8 & 255) * (256 - greenMultiplier)) / 256 | 0;
			resultBlue = ((sourceColor & 255) * blueMultiplier + (destColor & 255) * (256 - blueMultiplier)) / 256 | 0;
			resultAlpha = ((sourceColor >> 24 & 255) * alphaMultiplier + (destColor >> 24 & 255) * (256 - alphaMultiplier)) / 256 | 0;
			var Alpha = resultAlpha;
			if(Alpha == null) {
				Alpha = 255;
			}
			var color = flixel_util_FlxColor._new();
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 255;
			}
			color &= -16711681;
			color |= (resultRed > 255 ? 255 : resultRed < 0 ? 0 : resultRed) << 16;
			color &= -65281;
			color |= (resultGreen > 255 ? 255 : resultGreen < 0 ? 0 : resultGreen) << 8;
			color &= -256;
			color |= resultBlue > 255 ? 255 : resultBlue < 0 ? 0 : resultBlue;
			color &= 16777215;
			color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
			resultColor = color;
			destBitmapData.setPixel32(currX,currY,resultColor);
		}
	}
	destBitmapData.unlock();
};
flixel_util_FlxBitmapDataUtil.mergeColorComponent = function(source,dest,multiplier) {
	return (source * multiplier + dest * (256 - multiplier)) / 256 | 0;
};
flixel_util_FlxBitmapDataUtil.compare = function(Bitmap1,Bitmap2) {
	if(Bitmap1 == Bitmap2) {
		return 0;
	}
	if(Bitmap1.width != Bitmap2.width) {
		return -3;
	} else if(Bitmap1.height != Bitmap2.height) {
		return -4;
	} else {
		var width = Bitmap1.width;
		var height = Bitmap1.height;
		var result = new openfl_display_BitmapData(width,height,true,0);
		var identical = true;
		var _g = 0;
		var _g1 = width;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g3 = height;
			while(_g2 < _g3) {
				var j = _g2++;
				var pixel1 = Bitmap1.getPixel32(i,j);
				var pixel2 = Bitmap2.getPixel32(i,j);
				if(pixel1 != pixel2) {
					identical = false;
					if((pixel1 & 16777215) != (pixel2 & 16777215)) {
						var diff = (pixel1 >> 16 & 255) - (pixel2 >> 16 & 255);
						var Red = diff >= 0 ? diff : 256 + diff;
						var diff1 = (pixel1 >> 8 & 255) - (pixel2 >> 8 & 255);
						var Green = diff1 >= 0 ? diff1 : 256 + diff1;
						var diff2 = (pixel1 & 255) - (pixel2 & 255);
						var Blue = diff2 >= 0 ? diff2 : 256 + diff2;
						var color = flixel_util_FlxColor._new();
						var Alpha = 255;
						if(Alpha == null) {
							Alpha = 255;
						}
						color &= -16711681;
						color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
						color &= -65281;
						color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
						color &= -256;
						color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
						color &= 16777215;
						color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
						result.setPixel32(i,j,color);
					} else {
						var alpha1 = pixel1 >> 24 & 255;
						var alpha2 = pixel2 >> 24 & 255;
						if(alpha1 != alpha2) {
							var diff3 = alpha1 - alpha2;
							var Alpha1 = diff3 >= 0 ? diff3 : 256 + diff3;
							if(Alpha1 == null) {
								Alpha1 = 255;
							}
							var color1 = flixel_util_FlxColor._new();
							var Alpha2 = Alpha1;
							if(Alpha2 == null) {
								Alpha2 = 255;
							}
							color1 &= -16711681;
							color1 |= 16711680;
							color1 &= -65281;
							color1 |= 65280;
							color1 &= -256;
							color1 |= 255;
							color1 &= 16777215;
							color1 |= (Alpha2 > 255 ? 255 : Alpha2 < 0 ? 0 : Alpha2) << 24;
							result.setPixel32(i,j,color1);
						}
					}
				}
			}
		}
		if(!identical) {
			return result;
		}
	}
	return 0;
};
flixel_util_FlxBitmapDataUtil.getDiff = function(value1,value2) {
	var diff = value1 - value2;
	if(diff >= 0) {
		return diff;
	} else {
		return 256 + diff;
	}
};
flixel_util_FlxBitmapDataUtil.getMemorySize = function(bitmapData) {
	return bitmapData.width * bitmapData.height * 4;
};
flixel_util_FlxBitmapDataUtil.replaceColor = function(bitmapData,color,newColor,fetchPositions,rect) {
	if(fetchPositions == null) {
		fetchPositions = false;
	}
	var positions = null;
	if(fetchPositions) {
		positions = [];
	}
	var startX = 0;
	var startY = 0;
	var columns = bitmapData.width;
	var rows = bitmapData.height;
	if(rect != null) {
		startX = rect.x | 0;
		startY = rect.y | 0;
		columns = rect.width | 0;
		rows = rect.height | 0;
	}
	columns = Math.max(columns,bitmapData.width) | 0;
	rows = Math.max(rows,bitmapData.height) | 0;
	var row = 0;
	var column = 0;
	var x;
	var y;
	var changed = false;
	bitmapData.lock();
	while(row < rows) {
		column = 0;
		while(column < columns) {
			x = startX + column;
			y = startY + row;
			if(bitmapData.getPixel32(x,y) == color) {
				bitmapData.setPixel32(x,y,newColor);
				changed = true;
				if(fetchPositions) {
					var X = x;
					var Y = y;
					if(Y == null) {
						Y = 0;
					}
					if(X == null) {
						X = 0;
					}
					var point = flixel_math_FlxPoint._pool.get().set(X,Y);
					point._inPool = false;
					positions.push(point);
				}
			}
			++column;
		}
		++row;
	}
	bitmapData.unlock();
	if(changed && positions == null) {
		positions = [];
	}
	return positions;
};
flixel_util_FlxBitmapDataUtil.addSpacesAndBorders = function(bitmapData,frameSize,spacing,border,region) {
	if(region == null) {
		var X = 0;
		var Y = 0;
		var Width = bitmapData.width;
		var Height = bitmapData.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _this = flixel_math_FlxRect._pool.get();
		var X1 = X;
		var Y1 = Y;
		var Width1 = Width;
		var Height1 = Height;
		if(Height1 == null) {
			Height1 = 0;
		}
		if(Width1 == null) {
			Width1 = 0;
		}
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		_this.x = X1;
		_this.y = Y1;
		_this.width = Width1;
		_this.height = Height1;
		var rect = _this;
		rect._inPool = false;
		region = rect;
	}
	var frameWidth = region.width | 0;
	var frameHeight = region.height | 0;
	if(frameSize != null) {
		frameWidth = frameSize.x | 0;
		frameHeight = frameSize.y | 0;
	}
	var numHorizontalFrames = region.width / frameWidth | 0;
	var numVerticalFrames = region.height / frameHeight | 0;
	var spaceX = 0;
	var spaceY = 0;
	if(spacing != null) {
		spaceX = spacing.x | 0;
		spaceY = spacing.y | 0;
	}
	var borderX = 0;
	var borderY = 0;
	if(border != null) {
		borderX = border.x | 0;
		borderY = border.y | 0;
	}
	var result = new openfl_display_BitmapData(region.width + (numHorizontalFrames - 1) * spaceX + 2 * numHorizontalFrames * borderX | 0,region.height + (numVerticalFrames - 1) * spaceY + 2 * numVerticalFrames * borderY | 0,true,0);
	result.lock();
	var tempRect = new openfl_geom_Rectangle(0,0,frameWidth,frameHeight);
	var tempPoint = new openfl_geom_Point();
	var _g = 0;
	var _g1 = numHorizontalFrames;
	while(_g < _g1) {
		var i = _g++;
		tempPoint.x = i * (frameWidth + spaceX + 2 * borderX) + borderX;
		tempRect.x = i * frameWidth + region.x;
		var _g2 = 0;
		var _g3 = numVerticalFrames;
		while(_g2 < _g3) {
			var j = _g2++;
			tempPoint.y = j * (frameHeight + spaceY + 2 * borderY) + borderY;
			tempRect.y = j * frameHeight + region.y;
			result.copyPixels(bitmapData,tempRect,tempPoint);
		}
	}
	result.unlock();
	flixel_util_FlxBitmapDataUtil.copyBorderPixels(result,frameWidth,frameHeight,spaceX,spaceY,borderX,borderY,numHorizontalFrames,numVerticalFrames);
	return result;
};
flixel_util_FlxBitmapDataUtil.copyBorderPixels = function(bitmapData,frameWidth,frameHeight,spaceX,spaceY,borderX,borderY,horizontalFrames,verticalFrames) {
	var tempRect = new openfl_geom_Rectangle(0,0,1,bitmapData.height);
	var tempPoint = new openfl_geom_Point();
	bitmapData.lock();
	var _g = 0;
	var _g1 = horizontalFrames;
	while(_g < _g1) {
		var i = _g++;
		tempRect.x = i * (frameWidth + 2 * borderX + spaceX) + borderX;
		var _g2 = 0;
		var _g3 = borderX;
		while(_g2 < _g3) {
			var j = _g2++;
			tempPoint.x = tempRect.x - j - 1;
			bitmapData.copyPixels(bitmapData,tempRect,tempPoint);
		}
		tempRect.x += frameWidth - 1;
		var _g4 = 0;
		var _g5 = borderX;
		while(_g4 < _g5) {
			var j1 = _g4++;
			tempPoint.x = tempRect.x + j1 + 1;
			bitmapData.copyPixels(bitmapData,tempRect,tempPoint);
		}
	}
	tempPoint.setTo(0,0);
	tempRect.setTo(0,0,bitmapData.width,1);
	var _g = 0;
	var _g1 = verticalFrames;
	while(_g < _g1) {
		var i = _g++;
		tempRect.y = i * (frameHeight + 2 * borderY + spaceY) + borderY;
		var _g2 = 0;
		var _g3 = borderY;
		while(_g2 < _g3) {
			var j = _g2++;
			tempPoint.y = tempRect.y - j - 1;
			bitmapData.copyPixels(bitmapData,tempRect,tempPoint);
		}
		tempRect.y += frameHeight - 1;
		var _g4 = 0;
		var _g5 = borderY;
		while(_g4 < _g5) {
			var j1 = _g4++;
			tempPoint.y = tempRect.y + j1 + 1;
			bitmapData.copyPixels(bitmapData,tempRect,tempPoint);
		}
	}
	bitmapData.unlock();
	return bitmapData;
};
flixel_util_FlxBitmapDataUtil.generateRotations = function(brush,rotations,antiAliasing,autoBuffer) {
	if(autoBuffer == null) {
		autoBuffer = false;
	}
	if(antiAliasing == null) {
		antiAliasing = false;
	}
	if(rotations == null) {
		rotations = 16;
	}
	var brushWidth = brush.width;
	var brushHeight = brush.height;
	var max = brushHeight > brushWidth ? brushHeight : brushWidth;
	if(autoBuffer) {
		max = max * 1.5 | 0;
	}
	var rows = Math.sqrt(rotations) | 0;
	var columns = Math.ceil(rotations / rows);
	var bakedRotationAngle = 360 / rotations;
	var width = max * columns;
	var height = max * rows;
	var result = new openfl_display_BitmapData(width,height,true,0);
	var row = 0;
	var column = 0;
	var bakedAngle = 0;
	var halfBrushWidth = brushWidth * 0.5 | 0;
	var halfBrushHeight = brushHeight * 0.5 | 0;
	var midpointX = max * 0.5 | 0;
	var midpointY = max * 0.5 | 0;
	while(row < rows) {
		column = 0;
		while(column < columns) {
			flixel_util_FlxBitmapDataUtil.matrix.identity();
			flixel_util_FlxBitmapDataUtil.matrix.translate(-halfBrushWidth,-halfBrushHeight);
			flixel_util_FlxBitmapDataUtil.matrix.rotate(bakedAngle * (Math.PI / 180));
			flixel_util_FlxBitmapDataUtil.matrix.translate(max * column + midpointX,midpointY);
			bakedAngle += bakedRotationAngle;
			result.draw(brush,flixel_util_FlxBitmapDataUtil.matrix,null,null,null,antiAliasing);
			++column;
		}
		midpointY += max;
		++row;
	}
	return result;
};
var flixel_util_FlxCollision = function() { };
$hxClasses["flixel.util.FlxCollision"] = flixel_util_FlxCollision;
flixel_util_FlxCollision.__name__ = "flixel.util.FlxCollision";
flixel_util_FlxCollision.pixelPerfectCheck = function(Contact,Target,AlphaTolerance,Camera) {
	if(AlphaTolerance == null) {
		AlphaTolerance = 1;
	}
	var considerRotation = Contact.angle != 0 || Target.angle != 0;
	if(Camera == null) {
		Camera = flixel_FlxG.camera;
	}
	flixel_util_FlxCollision.pointA.set_x(Contact.x - (Camera.scroll.x * Contact.scrollFactor.x | 0) - Contact.offset.x);
	flixel_util_FlxCollision.pointA.set_y(Contact.y - (Camera.scroll.y * Contact.scrollFactor.y | 0) - Contact.offset.y);
	flixel_util_FlxCollision.pointB.set_x(Target.x - (Camera.scroll.x * Target.scrollFactor.x | 0) - Target.offset.x);
	flixel_util_FlxCollision.pointB.set_y(Target.y - (Camera.scroll.y * Target.scrollFactor.y | 0) - Target.offset.y);
	if(considerRotation) {
		Contact.origin.copyTo(flixel_util_FlxCollision.centerA);
		Target.origin.copyTo(flixel_util_FlxCollision.centerB);
		var this1 = flixel_util_FlxCollision.centerA;
		var lengthA = Math.sqrt(this1.x * this1.x + this1.y * this1.y);
		flixel_util_FlxCollision.boundsA.x = flixel_util_FlxCollision.pointA.x + flixel_util_FlxCollision.centerA.x - lengthA;
		flixel_util_FlxCollision.boundsA.y = flixel_util_FlxCollision.pointA.y + flixel_util_FlxCollision.centerA.y - lengthA;
		flixel_util_FlxCollision.boundsA.width = lengthA * 2;
		flixel_util_FlxCollision.boundsA.height = flixel_util_FlxCollision.boundsA.width;
		var this1 = flixel_util_FlxCollision.centerB;
		var lengthB = Math.sqrt(this1.x * this1.x + this1.y * this1.y);
		flixel_util_FlxCollision.boundsB.x = flixel_util_FlxCollision.pointB.x + flixel_util_FlxCollision.centerB.x - lengthB;
		flixel_util_FlxCollision.boundsB.y = flixel_util_FlxCollision.pointB.y + flixel_util_FlxCollision.centerB.y - lengthB;
		flixel_util_FlxCollision.boundsB.width = lengthB * 2;
		flixel_util_FlxCollision.boundsB.height = flixel_util_FlxCollision.boundsB.width;
	} else {
		flixel_util_FlxCollision.boundsA.x = flixel_util_FlxCollision.pointA.x;
		flixel_util_FlxCollision.boundsA.y = flixel_util_FlxCollision.pointA.y;
		flixel_util_FlxCollision.boundsA.width = Contact.frameWidth;
		flixel_util_FlxCollision.boundsA.height = Contact.frameHeight;
		flixel_util_FlxCollision.boundsB.x = flixel_util_FlxCollision.pointB.x;
		flixel_util_FlxCollision.boundsB.y = flixel_util_FlxCollision.pointB.y;
		flixel_util_FlxCollision.boundsB.width = Target.frameWidth;
		flixel_util_FlxCollision.boundsB.height = Target.frameHeight;
	}
	var _this = flixel_util_FlxCollision.intersect;
	_this.x = 0;
	_this.y = 0;
	_this.width = 0;
	_this.height = 0;
	flixel_util_FlxCollision.boundsA.intersection(flixel_util_FlxCollision.boundsB,_this);
	var _this = flixel_util_FlxCollision.intersect;
	if(_this.width == 0 || _this.height == 0 || flixel_util_FlxCollision.intersect.width < 1 || flixel_util_FlxCollision.intersect.height < 1) {
		return false;
	}
	flixel_util_FlxCollision.matrixA.identity();
	flixel_util_FlxCollision.matrixA.translate(-(flixel_util_FlxCollision.intersect.x - flixel_util_FlxCollision.boundsA.x),-(flixel_util_FlxCollision.intersect.y - flixel_util_FlxCollision.boundsA.y));
	flixel_util_FlxCollision.matrixB.identity();
	flixel_util_FlxCollision.matrixB.translate(-(flixel_util_FlxCollision.intersect.x - flixel_util_FlxCollision.boundsB.x),-(flixel_util_FlxCollision.intersect.y - flixel_util_FlxCollision.boundsB.y));
	Contact.drawFrame();
	Target.drawFrame();
	var testA = Contact.framePixels;
	var testB = Target.framePixels;
	var overlapWidth = flixel_util_FlxCollision.intersect.width | 0;
	var overlapHeight = flixel_util_FlxCollision.intersect.height | 0;
	if(considerRotation) {
		flixel_util_FlxCollision.testMatrix.identity();
		flixel_util_FlxCollision.testMatrix.translate(-Contact.origin.x,-Contact.origin.y);
		flixel_util_FlxCollision.testMatrix.rotate(Contact.angle * (Math.PI / 180));
		flixel_util_FlxCollision.testMatrix.translate(flixel_util_FlxCollision.boundsA.width / 2,flixel_util_FlxCollision.boundsA.height / 2);
		var testA2 = flixel_util_FlxBitmapDataPool.get(Math.floor(flixel_util_FlxCollision.boundsA.width),Math.floor(flixel_util_FlxCollision.boundsA.height),true,0,false);
		testA2.draw(testA,flixel_util_FlxCollision.testMatrix,null,null,null,false);
		testA = testA2;
		flixel_util_FlxCollision.testMatrix.identity();
		flixel_util_FlxCollision.testMatrix.translate(-Target.origin.x,-Target.origin.y);
		flixel_util_FlxCollision.testMatrix.rotate(Target.angle * (Math.PI / 180));
		flixel_util_FlxCollision.testMatrix.translate(flixel_util_FlxCollision.boundsB.width / 2,flixel_util_FlxCollision.boundsB.height / 2);
		var testB2 = flixel_util_FlxBitmapDataPool.get(Math.floor(flixel_util_FlxCollision.boundsB.width),Math.floor(flixel_util_FlxCollision.boundsB.height),true,0,false);
		testB2.draw(testB,flixel_util_FlxCollision.testMatrix,null,null,null,false);
		testB = testB2;
	}
	flixel_util_FlxCollision.boundsA.x = -flixel_util_FlxCollision.matrixA.tx | 0;
	flixel_util_FlxCollision.boundsA.y = -flixel_util_FlxCollision.matrixA.ty | 0;
	flixel_util_FlxCollision.boundsA.width = overlapWidth;
	flixel_util_FlxCollision.boundsA.height = overlapHeight;
	flixel_util_FlxCollision.boundsB.x = -flixel_util_FlxCollision.matrixB.tx | 0;
	flixel_util_FlxCollision.boundsB.y = -flixel_util_FlxCollision.matrixB.ty | 0;
	flixel_util_FlxCollision.boundsB.width = overlapWidth;
	flixel_util_FlxCollision.boundsB.height = overlapHeight;
	var _this = flixel_util_FlxCollision.boundsA;
	var FlashRect = flixel_util_FlxCollision.flashRect;
	if(FlashRect == null) {
		FlashRect = new openfl_geom_Rectangle();
	}
	FlashRect.x = _this.x;
	FlashRect.y = _this.y;
	FlashRect.width = _this.width;
	FlashRect.height = _this.height;
	var pixelsA = testA.getPixels(flixel_util_FlxCollision.flashRect);
	var _this = flixel_util_FlxCollision.boundsB;
	var FlashRect = flixel_util_FlxCollision.flashRect;
	if(FlashRect == null) {
		FlashRect = new openfl_geom_Rectangle();
	}
	FlashRect.x = _this.x;
	FlashRect.y = _this.y;
	FlashRect.width = _this.width;
	FlashRect.height = _this.height;
	var pixelsB = testB.getPixels(flixel_util_FlxCollision.flashRect);
	var hit = false;
	var alphaA = 0;
	var alphaB = 0;
	var overlapPixels = overlapWidth * overlapHeight;
	var alphaIdx = 0;
	var _g = 0;
	var _g1 = Math.ceil(overlapPixels / 2);
	while(_g < _g1) {
		var i = _g++;
		alphaIdx = i << 3;
		pixelsA.position = pixelsB.position = alphaIdx;
		alphaA = pixelsA.readUnsignedByte();
		alphaB = pixelsB.readUnsignedByte();
		if(alphaA >= AlphaTolerance && alphaB >= AlphaTolerance) {
			hit = true;
			break;
		}
	}
	if(!hit) {
		var _g = 0;
		var _g1 = overlapPixels >> 1;
		while(_g < _g1) {
			var i = _g++;
			alphaIdx = (i << 3) + 4;
			pixelsA.position = pixelsB.position = alphaIdx;
			alphaA = pixelsA.readUnsignedByte();
			alphaB = pixelsB.readUnsignedByte();
			if(alphaA >= AlphaTolerance && alphaB >= AlphaTolerance) {
				hit = true;
				break;
			}
		}
	}
	if(considerRotation) {
		flixel_util_FlxBitmapDataPool.put(testA);
		flixel_util_FlxBitmapDataPool.put(testB);
	}
	return hit;
};
flixel_util_FlxCollision.pixelPerfectPointCheck = function(PointX,PointY,Target,AlphaTolerance) {
	if(AlphaTolerance == null) {
		AlphaTolerance = 1;
	}
	if(!flixel_math_FlxMath.pointInCoordinates(PointX,PointY,Math.floor(Target.x),Math.floor(Target.y),Target.get_width() | 0,Target.get_height() | 0)) {
		return false;
	}
	if(flixel_FlxG.renderTile) {
		Target.drawFrame();
	}
	var test = Target.framePixels;
	var pixelAlpha = flixel_util_FlxColor._new(test.getPixel32(Math.floor(PointX - Target.x),Math.floor(PointY - Target.y))) >> 24 & 255;
	if(flixel_FlxG.renderTile) {
		pixelAlpha = pixelAlpha * Target.alpha | 0;
	}
	return pixelAlpha >= AlphaTolerance;
};
flixel_util_FlxCollision.createCameraWall = function(Camera,PlaceOutside,Thickness,AdjustWorldBounds) {
	if(AdjustWorldBounds == null) {
		AdjustWorldBounds = false;
	}
	if(PlaceOutside == null) {
		PlaceOutside = true;
	}
	var left = null;
	var right = null;
	var top = null;
	var bottom = null;
	if(PlaceOutside) {
		left = new flixel_tile_FlxTileblock(Math.floor(Camera.x - Thickness),Math.floor(Camera.y + Thickness),Thickness,Camera.height - Thickness * 2);
		right = new flixel_tile_FlxTileblock(Math.floor(Camera.x + Camera.width),Math.floor(Camera.y + Thickness),Thickness,Camera.height - Thickness * 2);
		top = new flixel_tile_FlxTileblock(Math.floor(Camera.x - Thickness),Math.floor(Camera.y - Thickness),Camera.width + Thickness * 2,Thickness);
		bottom = new flixel_tile_FlxTileblock(Math.floor(Camera.x - Thickness),Camera.height,Camera.width + Thickness * 2,Thickness);
		if(AdjustWorldBounds) {
			var _this = flixel_FlxG.worldBounds;
			var X = Camera.x - Thickness;
			var Y = Camera.y - Thickness;
			var Width = Camera.width + Thickness * 2;
			var Height = Camera.height + Thickness * 2;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
		}
	} else {
		left = new flixel_tile_FlxTileblock(Math.floor(Camera.x),Math.floor(Camera.y + Thickness),Thickness,Camera.height - Thickness * 2);
		right = new flixel_tile_FlxTileblock(Math.floor(Camera.x + Camera.width - Thickness),Math.floor(Camera.y + Thickness),Thickness,Camera.height - Thickness * 2);
		top = new flixel_tile_FlxTileblock(Math.floor(Camera.x),Math.floor(Camera.y),Camera.width,Thickness);
		bottom = new flixel_tile_FlxTileblock(Math.floor(Camera.x),Camera.height - Thickness,Camera.width,Thickness);
		if(AdjustWorldBounds) {
			var _this = flixel_FlxG.worldBounds;
			var X = Camera.x;
			var Y = Camera.y;
			var Width = Camera.width;
			var Height = Camera.height;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
		}
	}
	var result = new flixel_group_FlxTypedGroup();
	result.add(left);
	result.add(right);
	result.add(top);
	result.add(bottom);
	return result;
};
var flixel_util_FlxColor = {};
flixel_util_FlxColor.__properties__ = {set_lightness:"set_lightness",get_lightness:"get_lightness",set_brightness:"set_brightness",get_brightness:"get_brightness",set_saturation:"set_saturation",get_saturation:"get_saturation",set_hue:"set_hue",get_hue:"get_hue",set_black:"set_black",get_black:"get_black",set_yellow:"set_yellow",get_yellow:"get_yellow",set_magenta:"set_magenta",get_magenta:"get_magenta",set_cyan:"set_cyan",get_cyan:"get_cyan",set_alphaFloat:"set_alphaFloat",get_alphaFloat:"get_alphaFloat",set_greenFloat:"set_greenFloat",get_greenFloat:"get_greenFloat",set_blueFloat:"set_blueFloat",get_blueFloat:"get_blueFloat",set_redFloat:"set_redFloat",get_redFloat:"get_redFloat",set_alpha:"set_alpha",get_alpha:"get_alpha",set_green:"set_green",get_green:"get_green",set_blue:"set_blue",get_blue:"get_blue",set_red:"set_red",get_red:"get_red"};
flixel_util_FlxColor.fromInt = function(Value) {
	return flixel_util_FlxColor._new(Value);
};
flixel_util_FlxColor.fromRGB = function(Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 255;
	}
	var color = flixel_util_FlxColor._new();
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	return color;
};
flixel_util_FlxColor.fromRGBFloat = function(Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var color = flixel_util_FlxColor._new();
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 1;
	}
	var Value = Math.round(Red * 255);
	color &= -16711681;
	color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	var Value = Math.round(Green * 255);
	color &= -65281;
	color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
	var Value = Math.round(Blue * 255);
	color &= -256;
	color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
	var Value = Math.round(Alpha1 * 255);
	color &= 16777215;
	color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
	return color;
};
flixel_util_FlxColor.fromCMYK = function(Cyan,Magenta,Yellow,Black,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var color = flixel_util_FlxColor._new();
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 1;
	}
	var Value = (1 - Cyan) * (1 - Black);
	var Value1 = Math.round(Value * 255);
	color &= -16711681;
	color |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
	var Value = (1 - Magenta) * (1 - Black);
	var Value1 = Math.round(Value * 255);
	color &= -65281;
	color |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
	var Value = (1 - Yellow) * (1 - Black);
	var Value1 = Math.round(Value * 255);
	color &= -256;
	color |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
	var Value = Math.round(Alpha1 * 255);
	color &= 16777215;
	color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
	return color;
};
flixel_util_FlxColor.fromHSB = function(Hue,Saturation,Brightness,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var color = flixel_util_FlxColor._new();
	var chroma = Brightness * Saturation;
	var match = Brightness - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(mid * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(Chroma * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(match * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(Chroma * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(match * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(Chroma * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(mid * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(Chroma * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	}
	return color;
};
flixel_util_FlxColor.fromHSL = function(Hue,Saturation,Lightness,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var color = flixel_util_FlxColor._new();
	var chroma = (1 - Math.abs(2 * Lightness - 1)) * Saturation;
	var match = Lightness - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(mid * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(Chroma * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(match * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(Chroma * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(match * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(Chroma * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(mid * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(Chroma * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	}
	return color;
};
flixel_util_FlxColor.fromString = function(str) {
	var result = null;
	str = StringTools.trim(str);
	if(flixel_util_FlxColor.COLOR_REGEX.match(str)) {
		var hexColor = "0x" + flixel_util_FlxColor.COLOR_REGEX.matched(2);
		result = flixel_util_FlxColor._new(Std.parseInt(hexColor));
		if(hexColor.length == 8) {
			var Value = Math.round(255);
			result &= 16777215;
			result |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		}
	} else {
		str = str.toUpperCase();
		var key = haxe_ds_StringMap.keysIterator(flixel_util_FlxColor.colorLookup.h);
		while(key.hasNext()) {
			var key1 = key.next();
			if(key1.toUpperCase() == str) {
				result = flixel_util_FlxColor._new(flixel_util_FlxColor.colorLookup.h[key1]);
				break;
			}
		}
	}
	return result;
};
flixel_util_FlxColor.getHSBColorWheel = function(Alpha) {
	if(Alpha == null) {
		Alpha = 255;
	}
	var _g = [];
	var _g1 = 0;
	while(_g1 < 360) {
		var c = _g1++;
		_g.push(flixel_util_FlxColor.fromHSB(c,1.0,1.0,Alpha));
	}
	return _g;
};
flixel_util_FlxColor.interpolate = function(Color1,Color2,Factor) {
	if(Factor == null) {
		Factor = 0.5;
	}
	var r = ((Color2 >> 16 & 255) - (Color1 >> 16 & 255)) * Factor + (Color1 >> 16 & 255) | 0;
	var g = ((Color2 >> 8 & 255) - (Color1 >> 8 & 255)) * Factor + (Color1 >> 8 & 255) | 0;
	var b = ((Color2 & 255) - (Color1 & 255)) * Factor + (Color1 & 255) | 0;
	var a = ((Color2 >> 24 & 255) - (Color1 >> 24 & 255)) * Factor + (Color1 >> 24 & 255) | 0;
	var Alpha = a;
	if(Alpha == null) {
		Alpha = 255;
	}
	var color = flixel_util_FlxColor._new();
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
	color &= -65281;
	color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
	color &= -256;
	color |= b > 255 ? 255 : b < 0 ? 0 : b;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	return color;
};
flixel_util_FlxColor.gradient = function(Color1,Color2,Steps,Ease) {
	var output = [];
	if(Ease == null) {
		Ease = function(t) {
			return t;
		};
	}
	var _g = 0;
	var _g1 = Steps;
	while(_g < _g1) {
		var step = _g++;
		var Factor = Ease(step / (Steps - 1));
		if(Factor == null) {
			Factor = 0.5;
		}
		var r = ((Color2 >> 16 & 255) - (Color1 >> 16 & 255)) * Factor + (Color1 >> 16 & 255) | 0;
		var g = ((Color2 >> 8 & 255) - (Color1 >> 8 & 255)) * Factor + (Color1 >> 8 & 255) | 0;
		var b = ((Color2 & 255) - (Color1 & 255)) * Factor + (Color1 & 255) | 0;
		var a = ((Color2 >> 24 & 255) - (Color1 >> 24 & 255)) * Factor + (Color1 >> 24 & 255) | 0;
		var Alpha = a;
		if(Alpha == null) {
			Alpha = 255;
		}
		var color = flixel_util_FlxColor._new();
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 255;
		}
		color &= -16711681;
		color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
		color &= -65281;
		color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
		color &= -256;
		color |= b > 255 ? 255 : b < 0 ? 0 : b;
		color &= 16777215;
		color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
		output[step] = color;
	}
	return output;
};
flixel_util_FlxColor.multiply = function(lhs,rhs) {
	var Red = (lhs >> 16 & 255) / 255 * ((rhs >> 16 & 255) / 255);
	var Green = (lhs >> 8 & 255) / 255 * ((rhs >> 8 & 255) / 255);
	var Blue = (lhs & 255) / 255 * ((rhs & 255) / 255);
	var color = flixel_util_FlxColor._new();
	var Alpha = 1;
	if(Alpha == null) {
		Alpha = 1;
	}
	var Value = Math.round(Red * 255);
	color &= -16711681;
	color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	var Value = Math.round(Green * 255);
	color &= -65281;
	color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
	var Value = Math.round(Blue * 255);
	color &= -256;
	color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
	var Value = Math.round(Alpha * 255);
	color &= 16777215;
	color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
	return color;
};
flixel_util_FlxColor.add = function(lhs,rhs) {
	var Red = (lhs >> 16 & 255) + (rhs >> 16 & 255);
	var Green = (lhs >> 8 & 255) + (rhs >> 8 & 255);
	var Blue = (lhs & 255) + (rhs & 255);
	var color = flixel_util_FlxColor._new();
	var Alpha = 255;
	if(Alpha == null) {
		Alpha = 255;
	}
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
	return color;
};
flixel_util_FlxColor.subtract = function(lhs,rhs) {
	var Red = (lhs >> 16 & 255) - (rhs >> 16 & 255);
	var Green = (lhs >> 8 & 255) - (rhs >> 8 & 255);
	var Blue = (lhs & 255) - (rhs & 255);
	var color = flixel_util_FlxColor._new();
	var Alpha = 255;
	if(Alpha == null) {
		Alpha = 255;
	}
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
	return color;
};
flixel_util_FlxColor.getComplementHarmony = function(this1) {
	return flixel_util_FlxColor.fromHSB(flixel_math_FlxMath.wrap((flixel_util_FlxColor.get_hue(this1) | 0) + 180,0,350),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
};
flixel_util_FlxColor.getAnalogousHarmony = function(this1,Threshold) {
	if(Threshold == null) {
		Threshold = 30;
	}
	var warmer = flixel_util_FlxColor.fromHSB(flixel_math_FlxMath.wrap((flixel_util_FlxColor.get_hue(this1) | 0) - Threshold,0,350),(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	var colder = flixel_util_FlxColor.fromHSB(flixel_math_FlxMath.wrap((flixel_util_FlxColor.get_hue(this1) | 0) + Threshold,0,350),(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	return { original : this1, warmer : warmer, colder : colder};
};
flixel_util_FlxColor.getSplitComplementHarmony = function(this1,Threshold) {
	if(Threshold == null) {
		Threshold = 30;
	}
	var oppositeHue = flixel_math_FlxMath.wrap((flixel_util_FlxColor.get_hue(this1) | 0) + 180,0,350);
	var warmer = flixel_util_FlxColor.fromHSB(flixel_math_FlxMath.wrap(oppositeHue - Threshold,0,350),(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	var colder = flixel_util_FlxColor.fromHSB(flixel_math_FlxMath.wrap(oppositeHue + Threshold,0,350),(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	return { original : this1, warmer : warmer, colder : colder};
};
flixel_util_FlxColor.getTriadicHarmony = function(this1) {
	var triadic1 = flixel_util_FlxColor.fromHSB(flixel_math_FlxMath.wrap((flixel_util_FlxColor.get_hue(this1) | 0) + 120,0,359),(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	var triadic2 = flixel_util_FlxColor.fromHSB(flixel_math_FlxMath.wrap((flixel_util_FlxColor.get_hue(triadic1) | 0) + 120,0,359),(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	return { color1 : this1, color2 : triadic1, color3 : triadic2};
};
flixel_util_FlxColor.to24Bit = function(this1) {
	return this1 & 16777215;
};
flixel_util_FlxColor.toHexString = function(this1,Alpha,Prefix) {
	if(Prefix == null) {
		Prefix = true;
	}
	if(Alpha == null) {
		Alpha = true;
	}
	var tmp = Alpha ? StringTools.hex(this1 >> 24 & 255,2) : "";
	return (Prefix ? "0x" : "") + tmp + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2);
};
flixel_util_FlxColor.toWebString = function(this1) {
	var Alpha = false;
	var Prefix = false;
	if(Prefix == null) {
		Prefix = true;
	}
	if(Alpha == null) {
		Alpha = true;
	}
	var tmp = Alpha ? StringTools.hex(this1 >> 24 & 255,2) : "";
	return "#" + ((Prefix ? "0x" : "") + tmp + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2));
};
flixel_util_FlxColor.getColorInfo = function(this1) {
	var result = "0x" + StringTools.hex(this1 >> 24 & 255,2) + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2) + "\n";
	result += "Alpha: " + (this1 >> 24 & 255) + " Red: " + (this1 >> 16 & 255) + " Green: " + (this1 >> 8 & 255) + " Blue: " + (this1 & 255) + "\n";
	result += "Hue: " + flixel_math_FlxMath.roundDecimal(flixel_util_FlxColor.get_hue(this1),2) + " Saturation: " + flixel_math_FlxMath.roundDecimal((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),2) + " Brightness: " + flixel_math_FlxMath.roundDecimal(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),2) + " Lightness: " + flixel_math_FlxMath.roundDecimal((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) + Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / 2,2);
	return result;
};
flixel_util_FlxColor.getDarkened = function(this1,Factor) {
	if(Factor == null) {
		Factor = 0.2;
	}
	var lowerBound = Factor < 0 ? 0 : Factor;
	Factor = lowerBound > 1 ? 1 : lowerBound;
	var output = this1;
	var Value = (Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) + Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / 2 * (1 - Factor);
	var Hue = flixel_util_FlxColor.get_hue(output);
	var Alpha = (output >> 24 & 255) / 255;
	var chroma = (1 - Math.abs(2 * Value - 1)) * ((Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) - Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)));
	var match = Value - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(Chroma * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(mid * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(Chroma * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(match * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(Chroma * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(match * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(Chroma * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(mid * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(Chroma * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(Chroma * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	}
	return output;
};
flixel_util_FlxColor.getLightened = function(this1,Factor) {
	if(Factor == null) {
		Factor = 0.2;
	}
	var lowerBound = Factor < 0 ? 0 : Factor;
	Factor = lowerBound > 1 ? 1 : lowerBound;
	var output = this1;
	var Value = (Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) + Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / 2 + (1 - (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) + Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / 2) * Factor;
	var Hue = flixel_util_FlxColor.get_hue(output);
	var Alpha = (output >> 24 & 255) / 255;
	var chroma = (1 - Math.abs(2 * Value - 1)) * ((Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) - Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)));
	var match = Value - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(Chroma * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(mid * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(Chroma * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(match * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(Chroma * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(match * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(Chroma * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(mid * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(Chroma * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(Chroma * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	}
	return output;
};
flixel_util_FlxColor.getInverted = function(this1) {
	var oldAlpha = this1 >> 24 & 255;
	var lhs = -1;
	var Red = (lhs >> 16 & 255) - (this1 >> 16 & 255);
	var Green = (lhs >> 8 & 255) - (this1 >> 8 & 255);
	var Blue = (lhs & 255) - (this1 & 255);
	var color = flixel_util_FlxColor._new();
	var Alpha = 255;
	if(Alpha == null) {
		Alpha = 255;
	}
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
	var output = color;
	output &= 16777215;
	output |= (oldAlpha > 255 ? 255 : oldAlpha < 0 ? 0 : oldAlpha) << 24;
	return output;
};
flixel_util_FlxColor.setRGB = function(this1,Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 255;
	}
	this1 &= -16711681;
	this1 |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	this1 &= -65281;
	this1 |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	this1 &= -256;
	this1 |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	this1 &= 16777215;
	this1 |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
	return this1;
};
flixel_util_FlxColor.setRGBFloat = function(this1,Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var Value = Math.round(Red * 255);
	this1 &= -16711681;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	var Value = Math.round(Green * 255);
	this1 &= -65281;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
	var Value = Math.round(Blue * 255);
	this1 &= -256;
	this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
	var Value = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
	return this1;
};
flixel_util_FlxColor.setCMYK = function(this1,Cyan,Magenta,Yellow,Black,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var Value = (1 - Cyan) * (1 - Black);
	var Value1 = Math.round(Value * 255);
	this1 &= -16711681;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
	var Value = (1 - Magenta) * (1 - Black);
	var Value1 = Math.round(Value * 255);
	this1 &= -65281;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
	var Value = (1 - Yellow) * (1 - Black);
	var Value1 = Math.round(Value * 255);
	this1 &= -256;
	this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
	var Value = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
	return this1;
};
flixel_util_FlxColor.setHSB = function(this1,Hue,Saturation,Brightness,Alpha) {
	var chroma = Brightness * Saturation;
	var match = Brightness - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	}
	return this1;
};
flixel_util_FlxColor.setHSL = function(this1,Hue,Saturation,Lightness,Alpha) {
	var chroma = (1 - Math.abs(2 * Lightness - 1)) * Saturation;
	var match = Lightness - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	}
	return this1;
};
flixel_util_FlxColor.setHSChromaMatch = function(this1,Hue,Saturation,Chroma,Match,Alpha) {
	Hue %= 360;
	var hueD = Hue / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + Match;
	Chroma += Match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(Match * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(Match * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(Match * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(Match * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(Match * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(Match * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		break;
	}
	return this1;
};
flixel_util_FlxColor._new = function(Value) {
	if(Value == null) {
		Value = 0;
	}
	var this1 = Value;
	return this1;
};
flixel_util_FlxColor.getThis = function(this1) {
	return this1;
};
flixel_util_FlxColor.validate = function(this1) {
};
flixel_util_FlxColor.get_red = function(this1) {
	return this1 >> 16 & 255;
};
flixel_util_FlxColor.get_green = function(this1) {
	return this1 >> 8 & 255;
};
flixel_util_FlxColor.get_blue = function(this1) {
	return this1 & 255;
};
flixel_util_FlxColor.get_alpha = function(this1) {
	return this1 >> 24 & 255;
};
flixel_util_FlxColor.get_redFloat = function(this1) {
	return (this1 >> 16 & 255) / 255;
};
flixel_util_FlxColor.get_greenFloat = function(this1) {
	return (this1 >> 8 & 255) / 255;
};
flixel_util_FlxColor.get_blueFloat = function(this1) {
	return (this1 & 255) / 255;
};
flixel_util_FlxColor.get_alphaFloat = function(this1) {
	return (this1 >> 24 & 255) / 255;
};
flixel_util_FlxColor.set_red = function(this1,Value) {
	this1 &= -16711681;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	return Value;
};
flixel_util_FlxColor.set_green = function(this1,Value) {
	this1 &= -65281;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
	return Value;
};
flixel_util_FlxColor.set_blue = function(this1,Value) {
	this1 &= -256;
	this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
	return Value;
};
flixel_util_FlxColor.set_alpha = function(this1,Value) {
	this1 &= 16777215;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
	return Value;
};
flixel_util_FlxColor.set_redFloat = function(this1,Value) {
	var Value1 = Math.round(Value * 255);
	this1 &= -16711681;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
	return Value;
};
flixel_util_FlxColor.set_greenFloat = function(this1,Value) {
	var Value1 = Math.round(Value * 255);
	this1 &= -65281;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
	return Value;
};
flixel_util_FlxColor.set_blueFloat = function(this1,Value) {
	var Value1 = Math.round(Value * 255);
	this1 &= -256;
	this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
	return Value;
};
flixel_util_FlxColor.set_alphaFloat = function(this1,Value) {
	var Value1 = Math.round(Value * 255);
	this1 &= 16777215;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
	return Value;
};
flixel_util_FlxColor.get_cyan = function(this1) {
	return (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
flixel_util_FlxColor.get_magenta = function(this1) {
	return (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
flixel_util_FlxColor.get_yellow = function(this1) {
	return (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
flixel_util_FlxColor.get_black = function(this1) {
	return 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
flixel_util_FlxColor.set_cyan = function(this1,Value) {
	var Magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	if(Alpha == null) {
		Alpha = 1;
	}
	var Value1 = (1 - Value) * (1 - Black);
	var Value2 = Math.round(Value1 * 255);
	this1 &= -16711681;
	this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 16;
	var Value1 = (1 - Magenta) * (1 - Black);
	var Value2 = Math.round(Value1 * 255);
	this1 &= -65281;
	this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 8;
	var Value1 = (1 - Yellow) * (1 - Black);
	var Value2 = Math.round(Value1 * 255);
	this1 &= -256;
	this1 |= Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2;
	var Value1 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
	return Value;
};
flixel_util_FlxColor.set_magenta = function(this1,Value) {
	var Yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	if(Alpha == null) {
		Alpha = 1;
	}
	var Value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - Black);
	var Value2 = Math.round(Value1 * 255);
	this1 &= -16711681;
	this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 16;
	var Value1 = (1 - Value) * (1 - Black);
	var Value2 = Math.round(Value1 * 255);
	this1 &= -65281;
	this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 8;
	var Value1 = (1 - Yellow) * (1 - Black);
	var Value2 = Math.round(Value1 * 255);
	this1 &= -256;
	this1 |= Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2;
	var Value1 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
	return Value;
};
flixel_util_FlxColor.set_yellow = function(this1,Value) {
	var Magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	if(Alpha == null) {
		Alpha = 1;
	}
	var Value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - Black);
	var Value2 = Math.round(Value1 * 255);
	this1 &= -16711681;
	this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 16;
	var Value1 = (1 - Magenta) * (1 - Black);
	var Value2 = Math.round(Value1 * 255);
	this1 &= -65281;
	this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 8;
	var Value1 = (1 - Value) * (1 - Black);
	var Value2 = Math.round(Value1 * 255);
	this1 &= -256;
	this1 |= Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2;
	var Value1 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
	return Value;
};
flixel_util_FlxColor.set_black = function(this1,Value) {
	var Magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	if(Alpha == null) {
		Alpha = 1;
	}
	var Value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - Value);
	var Value2 = Math.round(Value1 * 255);
	this1 &= -16711681;
	this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 16;
	var Value1 = (1 - Magenta) * (1 - Value);
	var Value2 = Math.round(Value1 * 255);
	this1 &= -65281;
	this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 8;
	var Value1 = (1 - Yellow) * (1 - Value);
	var Value2 = Math.round(Value1 * 255);
	this1 &= -256;
	this1 |= Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2;
	var Value1 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
	return Value;
};
flixel_util_FlxColor.get_hue = function(this1) {
	var hueRad = Math.atan2(Math.sqrt(3) * ((this1 >> 8 & 255) / 255 - (this1 & 255) / 255),2 * ((this1 >> 16 & 255) / 255) - (this1 >> 8 & 255) / 255 - (this1 & 255) / 255);
	var hue = 0;
	if(hueRad != 0) {
		hue = 180 / Math.PI * Math.atan2(Math.sqrt(3) * ((this1 >> 8 & 255) / 255 - (this1 & 255) / 255),2 * ((this1 >> 16 & 255) / 255) - (this1 >> 8 & 255) / 255 - (this1 & 255) / 255);
	}
	if(hue < 0) {
		return hue + 360;
	} else {
		return hue;
	}
};
flixel_util_FlxColor.get_brightness = function(this1) {
	return Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
flixel_util_FlxColor.get_saturation = function(this1) {
	return (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
flixel_util_FlxColor.get_lightness = function(this1) {
	return (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) + Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / 2;
};
flixel_util_FlxColor.set_hue = function(this1,Value) {
	var Brightness = Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = Brightness * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = Brightness - chroma;
	var Hue = Value;
	var Chroma = chroma;
	Hue %= 360;
	var hueD = Hue / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	}
	return Value;
};
flixel_util_FlxColor.set_saturation = function(this1,Value) {
	var Hue = flixel_util_FlxColor.get_hue(this1);
	var Brightness = Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = Brightness * Value;
	var match = Brightness - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	}
	return Value;
};
flixel_util_FlxColor.set_brightness = function(this1,Value) {
	var Hue = flixel_util_FlxColor.get_hue(this1);
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = Value * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = Value - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	}
	return Value;
};
flixel_util_FlxColor.set_lightness = function(this1,Value) {
	var Hue = flixel_util_FlxColor.get_hue(this1);
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = (1 - Math.abs(2 * Value - 1)) * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = Value - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var Value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
		var Value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
		break;
	}
	return Value;
};
flixel_util_FlxColor.maxColor = function(this1) {
	return Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
flixel_util_FlxColor.minColor = function(this1) {
	return Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
flixel_util_FlxColor.boundChannel = function(this1,Value) {
	if(Value > 255) {
		return 255;
	} else if(Value < 0) {
		return 0;
	} else {
		return Value;
	}
};
var flixel_util_FlxColorTransformUtil = function() { };
$hxClasses["flixel.util.FlxColorTransformUtil"] = flixel_util_FlxColorTransformUtil;
flixel_util_FlxColorTransformUtil.__name__ = "flixel.util.FlxColorTransformUtil";
flixel_util_FlxColorTransformUtil.setMultipliers = function(transform,red,green,blue,alpha) {
	transform.redMultiplier = red;
	transform.greenMultiplier = green;
	transform.blueMultiplier = blue;
	transform.alphaMultiplier = alpha;
	return transform;
};
flixel_util_FlxColorTransformUtil.setOffsets = function(transform,red,green,blue,alpha) {
	transform.redOffset = red;
	transform.greenOffset = green;
	transform.blueOffset = blue;
	transform.alphaOffset = alpha;
	return transform;
};
flixel_util_FlxColorTransformUtil.hasRGBMultipliers = function(transform) {
	if(!(transform.redMultiplier != 1 || transform.greenMultiplier != 1)) {
		return transform.blueMultiplier != 1;
	} else {
		return true;
	}
};
flixel_util_FlxColorTransformUtil.hasRGBAMultipliers = function(transform) {
	if(!flixel_util_FlxColorTransformUtil.hasRGBMultipliers(transform)) {
		return transform.alphaMultiplier != 1;
	} else {
		return true;
	}
};
flixel_util_FlxColorTransformUtil.hasRGBOffsets = function(transform) {
	if(!(transform.redOffset != 0 || transform.greenOffset != 0)) {
		return transform.blueOffset != 0;
	} else {
		return true;
	}
};
flixel_util_FlxColorTransformUtil.hasRGBAOffsets = function(transform) {
	if(!flixel_util_FlxColorTransformUtil.hasRGBOffsets(transform)) {
		return transform.alphaOffset != 0;
	} else {
		return true;
	}
};
var flixel_util_FlxDestroyUtil = function() { };
$hxClasses["flixel.util.FlxDestroyUtil"] = flixel_util_FlxDestroyUtil;
flixel_util_FlxDestroyUtil.__name__ = "flixel.util.FlxDestroyUtil";
flixel_util_FlxDestroyUtil.destroy = function(object) {
	if(object != null) {
		object.destroy();
	}
	return null;
};
flixel_util_FlxDestroyUtil.destroyArray = function(array) {
	if(array != null) {
		var _g = 0;
		while(_g < array.length) {
			var e = array[_g];
			++_g;
			flixel_util_FlxDestroyUtil.destroy(e);
		}
		array.splice(0,array.length);
	}
	return null;
};
flixel_util_FlxDestroyUtil.put = function(object) {
	if(object != null) {
		object.put();
	}
	return null;
};
flixel_util_FlxDestroyUtil.putArray = function(array) {
	if(array != null) {
		var _g = 0;
		while(_g < array.length) {
			var e = array[_g];
			++_g;
			flixel_util_FlxDestroyUtil.put(e);
		}
		array.splice(0,array.length);
	}
	return null;
};
flixel_util_FlxDestroyUtil.dispose = function(bitmapData) {
	if(bitmapData != null) {
		bitmapData.dispose();
	}
	return null;
};
flixel_util_FlxDestroyUtil.disposeIfNotEqual = function(bitmapData,width,height) {
	if(bitmapData != null && (bitmapData.width != width || bitmapData.height != height)) {
		bitmapData.dispose();
		return null;
	} else if(bitmapData != null) {
		return bitmapData;
	}
	return null;
};
flixel_util_FlxDestroyUtil.removeChild = function(parent,child) {
	if(parent != null && child != null && parent.contains(child)) {
		parent.removeChild(child);
	}
	return null;
};
var flixel_util_FlxDirection = {};
flixel_util_FlxDirection.toString = function(this1) {
	switch(this1) {
	case 1:
		return "L";
	case 16:
		return "R";
	case 256:
		return "U";
	case 4096:
		return "D";
	}
};
var flixel_util_FlxDirectionFlags = {};
flixel_util_FlxDirectionFlags.has = function(this1,dir) {
	return (this1 & dir) == dir;
};
flixel_util_FlxDirectionFlags.with = function(this1,dir) {
	return this1 | dir;
};
flixel_util_FlxDirectionFlags.without = function(this1,dir) {
	return this1 & ~dir;
};
flixel_util_FlxDirectionFlags.toString = function(this1) {
	if(this1 == 0) {
		return "NONE";
	}
	var str = "";
	var dir = 1;
	if((this1 & dir) == dir) {
		str += " | L";
	}
	var dir = 16;
	if((this1 & dir) == dir) {
		str += " | R";
	}
	var dir = 256;
	if((this1 & dir) == dir) {
		str += " | U";
	}
	var dir = 4096;
	if((this1 & dir) == dir) {
		str += " | D";
	}
	return HxOverrides.substr(str,3,null);
};
var flixel_util_FlxGradient = function() { };
$hxClasses["flixel.util.FlxGradient"] = flixel_util_FlxGradient;
flixel_util_FlxGradient.__name__ = "flixel.util.FlxGradient";
flixel_util_FlxGradient.createGradientMatrix = function(width,height,colors,chunkSize,rotation) {
	if(rotation == null) {
		rotation = 90;
	}
	if(chunkSize == null) {
		chunkSize = 1;
	}
	var gradientMatrix = new openfl_geom_Matrix();
	var rot = rotation * (Math.PI / 180);
	gradientMatrix.createGradientBox(width,UInt.toFloat(height) / UInt.toFloat(chunkSize),rot,0,0);
	var alpha = [];
	var _g = 0;
	var _g1 = colors.length;
	while(_g < _g1) {
		var ai = _g++;
		alpha.push((colors[ai] >> 24 & 255) / 255);
	}
	var ratio = [];
	if(colors.length == 2) {
		ratio[0] = 0;
		ratio[1] = 255;
	} else {
		var spread = 255 / (colors.length - 1) | 0;
		ratio.push(0);
		var _g = 1;
		var _g1 = colors.length - 1;
		while(_g < _g1) {
			var ri = _g++;
			ratio.push(ri * spread);
		}
		ratio.push(255);
	}
	return { matrix : gradientMatrix, alpha : alpha, ratio : ratio};
};
flixel_util_FlxGradient.createGradientArray = function(width,height,colors,chunkSize,rotation,interpolate) {
	if(interpolate == null) {
		interpolate = true;
	}
	if(rotation == null) {
		rotation = 90;
	}
	if(chunkSize == null) {
		chunkSize = 1;
	}
	var data = flixel_util_FlxGradient.createGradientBitmapData(width,height,colors,chunkSize,rotation,interpolate);
	var result = [];
	var _g = 0;
	var _g1 = data.height;
	while(_g < _g1) {
		var y = _g++;
		result.push(data.getPixel32(0,y));
	}
	return result;
};
flixel_util_FlxGradient.createGradientFlxSprite = function(width,height,colors,chunkSize,rotation,interpolate) {
	if(interpolate == null) {
		interpolate = true;
	}
	if(rotation == null) {
		rotation = 90;
	}
	if(chunkSize == null) {
		chunkSize = 1;
	}
	var data = flixel_util_FlxGradient.createGradientBitmapData(width,height,colors,chunkSize,rotation,interpolate);
	var dest = new flixel_FlxSprite();
	dest.set_pixels(data);
	return dest;
};
flixel_util_FlxGradient.createGradientBitmapData = function(width,height,colors,chunkSize,rotation,interpolate) {
	if(interpolate == null) {
		interpolate = true;
	}
	if(rotation == null) {
		rotation = 90;
	}
	if(chunkSize == null) {
		chunkSize = 1;
	}
	if(UInt.gt(1,width)) {
		width = 1;
	}
	if(UInt.gt(1,height)) {
		height = 1;
	}
	var gradient = flixel_util_FlxGradient.createGradientMatrix(width,height,colors,chunkSize,rotation);
	var shape = new openfl_display_Shape();
	var interpolationMethod = interpolate ? 1 : 0;
	shape.get_graphics().beginGradientFill(0,colors,gradient.alpha,gradient.ratio,gradient.matrix,0,interpolationMethod,0);
	shape.get_graphics().drawRect(0,0,UInt.toFloat(width),UInt.toFloat(height) / UInt.toFloat(chunkSize));
	var data = new openfl_display_BitmapData(width,height,true,0);
	if(chunkSize == 1) {
		data.draw(shape);
	} else {
		var tempBitmap = new openfl_display_Bitmap(new openfl_display_BitmapData(width,UInt.toFloat(height) / UInt.toFloat(chunkSize) | 0,true,0));
		tempBitmap.get_bitmapData().draw(shape);
		tempBitmap.set_scaleY(UInt.toFloat(chunkSize));
		var sM = new openfl_geom_Matrix();
		sM.scale(tempBitmap.get_scaleX(),tempBitmap.get_scaleY());
		data.draw(tempBitmap,sM);
		var remainingRect = tempBitmap.get_height();
		var remainingRect1 = UInt.toFloat(width);
		var b = tempBitmap.get_height();
		var remainingRect2 = new openfl_geom_Rectangle(0,remainingRect,remainingRect1,UInt.toFloat(height) - b);
		data.fillRect(remainingRect2,colors[colors.length - 1]);
	}
	return data;
};
flixel_util_FlxGradient.overlayGradientOnFlxSprite = function(dest,width,height,colors,destX,destY,chunkSize,rotation,interpolate) {
	if(interpolate == null) {
		interpolate = true;
	}
	if(rotation == null) {
		rotation = 90;
	}
	if(chunkSize == null) {
		chunkSize = 1;
	}
	if(destY == null) {
		destY = 0;
	}
	if(destX == null) {
		destX = 0;
	}
	if(width > dest.get_width()) {
		width = dest.get_width() | 0;
	}
	if(height > dest.get_height()) {
		height = dest.get_height() | 0;
	}
	var source = flixel_util_FlxGradient.createGradientFlxSprite(width,height,colors,chunkSize,rotation,interpolate);
	dest.stamp(source,destX,destY);
	source.destroy();
	return dest;
};
flixel_util_FlxGradient.overlayGradientOnBitmapData = function(dest,width,height,colors,destX,destY,chunkSize,rotation,interpolate) {
	if(interpolate == null) {
		interpolate = true;
	}
	if(rotation == null) {
		rotation = 90;
	}
	if(chunkSize == null) {
		chunkSize = 1;
	}
	if(destY == null) {
		destY = 0;
	}
	if(destX == null) {
		destX = 0;
	}
	if(width > dest.width) {
		width = dest.width;
	}
	if(height > dest.height) {
		height = dest.height;
	}
	var source = flixel_util_FlxGradient.createGradientBitmapData(width,height,colors,chunkSize,rotation,interpolate);
	dest.copyPixels(source,new openfl_geom_Rectangle(0,0,source.width,source.height),new openfl_geom_Point(destX,destY),null,null,true);
	source.dispose();
	return dest;
};
var flixel_util_FlxHorizontalAlign = $hxEnums["flixel.util.FlxHorizontalAlign"] = { __ename__ : "flixel.util.FlxHorizontalAlign", __constructs__ : ["LEFT","CENTER","RIGHT"]
	,LEFT: {_hx_index:0,__enum__:"flixel.util.FlxHorizontalAlign",toString:$estr}
	,CENTER: {_hx_index:1,__enum__:"flixel.util.FlxHorizontalAlign",toString:$estr}
	,RIGHT: {_hx_index:2,__enum__:"flixel.util.FlxHorizontalAlign",toString:$estr}
};
flixel_util_FlxHorizontalAlign.__empty_constructs__ = [flixel_util_FlxHorizontalAlign.LEFT,flixel_util_FlxHorizontalAlign.CENTER,flixel_util_FlxHorizontalAlign.RIGHT];
var flixel_util_FlxPath = function(Nodes) {
	this._firstUpdate = false;
	this._wasObjectImmovable = null;
	this._autoRotate = false;
	this._inc = 1;
	this.finished = false;
	this.nodeIndex = 0;
	this.active = false;
	this.autoCenter = true;
	this.angle = 0;
	this.speed = 0;
	if(Nodes != null) {
		this._nodes = Nodes.slice();
	} else {
		this._nodes = [];
	}
};
$hxClasses["flixel.util.FlxPath"] = flixel_util_FlxPath;
flixel_util_FlxPath.__name__ = "flixel.util.FlxPath";
flixel_util_FlxPath.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_util_FlxPath.prototype = {
	_nodes: null
	,speed: null
	,angle: null
	,autoCenter: null
	,active: null
	,onComplete: null
	,nodeIndex: null
	,finished: null
	,_mode: null
	,_inc: null
	,_autoRotate: null
	,_wasObjectImmovable: null
	,_firstUpdate: null
	,object: null
	,reset: function() {
		this.autoCenter = true;
		return this;
	}
	,setProperties: function(Speed,Mode,AutoRotate) {
		if(AutoRotate == null) {
			AutoRotate = false;
		}
		if(Mode == null) {
			Mode = 0;
		}
		if(Speed == null) {
			Speed = 100;
		}
		this.speed = Math.abs(Speed);
		this._mode = Mode;
		this._autoRotate = AutoRotate;
		return this;
	}
	,start: function(Nodes,Speed,Mode,AutoRotate,NodesAsReference) {
		if(NodesAsReference == null) {
			NodesAsReference = false;
		}
		if(AutoRotate == null) {
			AutoRotate = false;
		}
		if(Mode == null) {
			Mode = 0;
		}
		if(Speed == null) {
			Speed = 100;
		}
		if(Nodes != null) {
			if(NodesAsReference) {
				this._nodes = Nodes;
			} else {
				this._nodes = Nodes.slice();
			}
		}
		this.setProperties(Speed,Mode,AutoRotate);
		if(this._nodes.length > 0) {
			this.restart();
		}
		return this;
	}
	,restart: function() {
		this.finished = false;
		this._firstUpdate = true;
		this.active = this._nodes.length > 0;
		if(!this.active) {
			return this;
		}
		if(this._mode == 1 || this._mode == 256) {
			this.nodeIndex = this._nodes.length - 1;
			this._inc = -1;
		} else {
			this.nodeIndex = 0;
			this._inc = 1;
		}
		return this;
	}
	,setNode: function(NodeIndex) {
		if(NodeIndex < 0) {
			NodeIndex = 0;
		} else if(NodeIndex > this._nodes.length - 1) {
			NodeIndex = this._nodes.length - 1;
		}
		this.nodeIndex = NodeIndex;
		this.advancePath();
		return this;
	}
	,update: function(elapsed) {
		if(this.object == null) {
			return;
		}
		if(this._firstUpdate) {
			this._wasObjectImmovable = this.object.immovable;
			this.object.set_immovable(true);
			this._firstUpdate = false;
		}
		flixel_util_FlxPath._point.set_x(this.object.x);
		flixel_util_FlxPath._point.set_y(this.object.y);
		if(this.autoCenter) {
			var _this = flixel_util_FlxPath._point;
			var X = this.object.get_width() * 0.5;
			var Y = this.object.get_height() * 0.5;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _g = _this;
			_g.set_x(_g.x + X);
			var _g = _this;
			_g.set_y(_g.y + Y);
		}
		var node = this._nodes[this.nodeIndex];
		var deltaX = node.x - flixel_util_FlxPath._point.x;
		var deltaY = node.y - flixel_util_FlxPath._point.y;
		var horizontalOnly = (this._mode & 65536) > 0;
		var verticalOnly = (this._mode & 1048576) > 0;
		if(horizontalOnly) {
			if((deltaX > 0 ? deltaX : -deltaX) < this.speed * elapsed) {
				node = this.advancePath();
			}
		} else if(verticalOnly) {
			if((deltaY > 0 ? deltaY : -deltaY) < this.speed * elapsed) {
				node = this.advancePath();
			}
		} else if(Math.sqrt(deltaX * deltaX + deltaY * deltaY) < this.speed * elapsed) {
			node = this.advancePath();
		}
		if(this.object != null && this.speed != 0) {
			flixel_util_FlxPath._point.set_x(this.object.x);
			flixel_util_FlxPath._point.set_y(this.object.y);
			if(this.autoCenter) {
				var _this = flixel_util_FlxPath._point;
				var X = this.object.get_width() * 0.5;
				var Y = this.object.get_height() * 0.5;
				if(Y == null) {
					Y = 0;
				}
				if(X == null) {
					X = 0;
				}
				var _g = _this;
				_g.set_x(_g.x + X);
				var _g = _this;
				_g.set_y(_g.y + Y);
			}
			var _this = flixel_util_FlxPath._point;
			var result = Math.abs(_this.x - node.x) <= 0.0000001 && Math.abs(_this.y - node.y) <= 0.0000001;
			if(node._weak) {
				node.put();
			}
			if(!result) {
				this.calculateVelocity(node,horizontalOnly,verticalOnly);
			} else {
				this.object.velocity.set();
			}
			if(this._autoRotate) {
				this.object.angularVelocity = 0;
				this.object.angularAcceleration = 0;
				this.object.set_angle(this.angle);
			}
			if(this.finished) {
				this.cancel();
			}
		}
	}
	,calculateVelocity: function(node,horizontalOnly,verticalOnly) {
		if(horizontalOnly || flixel_util_FlxPath._point.y == node.y) {
			this.object.velocity.set_x(flixel_util_FlxPath._point.x < node.x ? this.speed : -this.speed);
			this.angle = this.object.velocity.x < 0 ? -90 : 90;
			if(!horizontalOnly) {
				this.object.velocity.set_y(0);
			}
		} else if(verticalOnly || flixel_util_FlxPath._point.x == node.x) {
			this.object.velocity.set_y(flixel_util_FlxPath._point.y < node.y ? this.speed : -this.speed);
			this.angle = this.object.velocity.y < 0 ? 0 : 180;
			if(!verticalOnly) {
				this.object.velocity.set_x(0);
			}
		} else {
			this.object.velocity.set_x(flixel_util_FlxPath._point.x < node.x ? this.speed : -this.speed);
			this.object.velocity.set_y(flixel_util_FlxPath._point.y < node.y ? this.speed : -this.speed);
			this.angle = flixel_util_FlxPath._point.angleBetween(node);
			this.object.velocity.set(0,-this.speed);
			var tmp = this.object.velocity;
			var X = 0;
			var Y = 0;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var X1 = X;
			var Y1 = Y;
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X1,Y1);
			point._inPool = false;
			var point1 = point;
			point1._weak = true;
			tmp.rotate(point1,this.angle);
		}
	}
	,advancePath: function(Snap) {
		if(Snap == null) {
			Snap = true;
		}
		if(Snap) {
			var oldNode = this._nodes[this.nodeIndex];
			if(oldNode != null) {
				if((this._mode & 1048576) == 0) {
					this.object.set_x(oldNode.x);
					if(this.autoCenter) {
						var _g = this.object;
						_g.set_x(_g.x - this.object.get_width() * 0.5);
					}
				}
				if((this._mode & 65536) == 0) {
					this.object.set_y(oldNode.y);
					if(this.autoCenter) {
						var _g = this.object;
						_g.set_y(_g.y - this.object.get_height() * 0.5);
					}
				}
			}
		}
		var callComplete = false;
		this.nodeIndex += this._inc;
		if((this._mode & 1) > 0) {
			if(this.nodeIndex < 0) {
				this.nodeIndex = 0;
				callComplete = true;
				this.onEnd();
			}
		} else if((this._mode & 16) > 0) {
			if(this.nodeIndex >= this._nodes.length) {
				callComplete = true;
				this.nodeIndex = 0;
			}
		} else if((this._mode & 256) > 0) {
			if(this.nodeIndex < 0) {
				this.nodeIndex = this._nodes.length - 1;
				callComplete = true;
				if(this.nodeIndex < 0) {
					this.nodeIndex = 0;
				}
			}
		} else if((this._mode & 4096) > 0) {
			if(this._inc > 0) {
				if(this.nodeIndex >= this._nodes.length) {
					this.nodeIndex = this._nodes.length - 2;
					callComplete = true;
					if(this.nodeIndex < 0) {
						this.nodeIndex = 0;
					}
					this._inc = -this._inc;
				}
			} else if(this.nodeIndex < 0) {
				this.nodeIndex = 1;
				callComplete = true;
				if(this.nodeIndex >= this._nodes.length) {
					this.nodeIndex = this._nodes.length - 1;
				}
				if(this.nodeIndex < 0) {
					this.nodeIndex = 0;
				}
				this._inc = -this._inc;
			}
		} else if(this.nodeIndex >= this._nodes.length) {
			this.nodeIndex = this._nodes.length - 1;
			callComplete = true;
			this.onEnd();
		}
		if(callComplete && this.onComplete != null) {
			this.onComplete(this);
		}
		return this._nodes[this.nodeIndex];
	}
	,cancel: function() {
		this.onEnd();
		if(this.object != null) {
			this.object.velocity.set(0,0);
		}
		return this;
	}
	,onEnd: function() {
		this.finished = true;
		this.active = false;
		if(this._wasObjectImmovable != null) {
			this.object.set_immovable(this._wasObjectImmovable);
		}
		this._wasObjectImmovable = null;
	}
	,destroy: function() {
		flixel_util_FlxDestroyUtil.putArray(this._nodes);
		this._nodes = null;
		this.object = null;
		this.onComplete = null;
	}
	,add: function(X,Y) {
		var tmp = this._nodes;
		var X1 = X;
		var Y1 = Y;
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X1,Y1);
		point._inPool = false;
		tmp.push(point);
		return this;
	}
	,addAt: function(X,Y,Index) {
		if(Index < 0) {
			return this;
		}
		var _this = this._nodes;
		var X1 = X;
		var Y1 = Y;
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X1,Y1);
		point._inPool = false;
		_this.splice(Index,0,point);
		return this;
	}
	,addPoint: function(Node1,AsReference) {
		if(AsReference == null) {
			AsReference = false;
		}
		if(AsReference) {
			this._nodes.push(Node1);
		} else {
			var tmp = this._nodes;
			var X = Node1.x;
			var Y = Node1.y;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			tmp.push(point);
		}
		return this;
	}
	,addPointAt: function(Node1,Index,AsReference) {
		if(AsReference == null) {
			AsReference = false;
		}
		if(Index < 0) {
			return this;
		}
		if(AsReference) {
			this._nodes.splice(Index,0,Node1);
		} else {
			var _this = this._nodes;
			var X = Node1.x;
			var Y = Node1.y;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			_this.splice(Index,0,point);
		}
		return this;
	}
	,remove: function(Node1) {
		var index = this._nodes.indexOf(Node1);
		if(index >= 0) {
			return this._nodes.splice(index,1)[0];
		}
		return null;
	}
	,removeAt: function(Index) {
		if(this._nodes.length <= 0) {
			return null;
		}
		if(Index >= this._nodes.length - 1) {
			this._nodes.pop();
		}
		return this._nodes.splice(Index,1)[0];
	}
	,head: function() {
		if(this._nodes.length > 0) {
			return this._nodes[0];
		}
		return null;
	}
	,tail: function() {
		if(this._nodes.length > 0) {
			return this._nodes[this._nodes.length - 1];
		}
		return null;
	}
	,get_nodes: function() {
		return this._nodes;
	}
	,set_nodes: function(Nodes) {
		if(Nodes != null) {
			this._nodes = Nodes;
		}
		return this._nodes;
	}
	,__class__: flixel_util_FlxPath
	,__properties__: {set_nodes:"set_nodes",get_nodes:"get_nodes"}
};
var flixel_util_FlxPool = function(classObj) {
	this._count = 0;
	this._pool = [];
	this._class = classObj;
};
$hxClasses["flixel.util.FlxPool"] = flixel_util_FlxPool;
flixel_util_FlxPool.__name__ = "flixel.util.FlxPool";
flixel_util_FlxPool.__interfaces__ = [flixel_util_IFlxPool];
flixel_util_FlxPool.prototype = {
	_pool: null
	,_class: null
	,_count: null
	,get: function() {
		if(this._count == 0) {
			return Type.createInstance(this._class,[]);
		}
		return this._pool[--this._count];
	}
	,put: function(obj) {
		if(obj != null) {
			var i = this._pool.indexOf(obj);
			if(i == -1 || i >= this._count) {
				obj.destroy();
				this._pool[this._count++] = obj;
			}
		}
	}
	,putUnsafe: function(obj) {
		if(obj != null) {
			obj.destroy();
			this._pool[this._count++] = obj;
		}
	}
	,preAllocate: function(numObjects) {
		while(numObjects-- > 0) this._pool[this._count++] = Type.createInstance(this._class,[]);
	}
	,clear: function() {
		this._count = 0;
		var oldPool = this._pool;
		this._pool = [];
		return oldPool;
	}
	,get_length: function() {
		return this._count;
	}
	,__class__: flixel_util_FlxPool
	,__properties__: {get_length:"get_length"}
};
var flixel_util_FlxPool_$flixel_$util_$LabelValuePair = function(classObj) {
	this._count = 0;
	this._pool = [];
	this._class = classObj;
};
$hxClasses["flixel.util.FlxPool_flixel_util_LabelValuePair"] = flixel_util_FlxPool_$flixel_$util_$LabelValuePair;
flixel_util_FlxPool_$flixel_$util_$LabelValuePair.__name__ = "flixel.util.FlxPool_flixel_util_LabelValuePair";
flixel_util_FlxPool_$flixel_$util_$LabelValuePair.__interfaces__ = [flixel_util_IFlxPool];
flixel_util_FlxPool_$flixel_$util_$LabelValuePair.prototype = {
	_pool: null
	,_class: null
	,_count: null
	,get: function() {
		if(this._count == 0) {
			return Type.createInstance(this._class,[]);
		}
		return this._pool[--this._count];
	}
	,put: function(obj) {
		if(obj != null) {
			var i = this._pool.indexOf(obj);
			if(i == -1 || i >= this._count) {
				obj.label = null;
				obj.value = null;
				this._pool[this._count++] = obj;
			}
		}
	}
	,putUnsafe: function(obj) {
		if(obj != null) {
			obj.label = null;
			obj.value = null;
			this._pool[this._count++] = obj;
		}
	}
	,preAllocate: function(numObjects) {
		while(numObjects-- > 0) this._pool[this._count++] = Type.createInstance(this._class,[]);
	}
	,clear: function() {
		this._count = 0;
		var oldPool = this._pool;
		this._pool = [];
		return oldPool;
	}
	,get_length: function() {
		return this._count;
	}
	,__class__: flixel_util_FlxPool_$flixel_$util_$LabelValuePair
	,__properties__: {get_length:"get_length"}
};
var flixel_util_FlxSaveStatus = $hxEnums["flixel.util.FlxSaveStatus"] = { __ename__ : "flixel.util.FlxSaveStatus", __constructs__ : ["SUCCESS","PENDING","ERROR"]
	,SUCCESS: {_hx_index:0,__enum__:"flixel.util.FlxSaveStatus",toString:$estr}
	,PENDING: {_hx_index:1,__enum__:"flixel.util.FlxSaveStatus",toString:$estr}
	,ERROR: {_hx_index:2,__enum__:"flixel.util.FlxSaveStatus",toString:$estr}
};
flixel_util_FlxSaveStatus.__empty_constructs__ = [flixel_util_FlxSaveStatus.SUCCESS,flixel_util_FlxSaveStatus.PENDING,flixel_util_FlxSaveStatus.ERROR];
var flixel_util__$FlxSignal_FlxSignalHandler = function(listener,dispatchOnce) {
	this.dispatchOnce = false;
	this.listener = listener;
	this.dispatchOnce = dispatchOnce;
};
$hxClasses["flixel.util._FlxSignal.FlxSignalHandler"] = flixel_util__$FlxSignal_FlxSignalHandler;
flixel_util__$FlxSignal_FlxSignalHandler.__name__ = "flixel.util._FlxSignal.FlxSignalHandler";
flixel_util__$FlxSignal_FlxSignalHandler.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_util__$FlxSignal_FlxSignalHandler.prototype = {
	listener: null
	,dispatchOnce: null
	,destroy: function() {
		this.listener = null;
	}
	,__class__: flixel_util__$FlxSignal_FlxSignalHandler
};
var flixel_util_IFlxSignal = function() { };
$hxClasses["flixel.util.IFlxSignal"] = flixel_util_IFlxSignal;
flixel_util_IFlxSignal.__name__ = "flixel.util.IFlxSignal";
flixel_util_IFlxSignal.__isInterface__ = true;
flixel_util_IFlxSignal.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_util_IFlxSignal.prototype = {
	dispatch: null
	,add: null
	,addOnce: null
	,remove: null
	,removeAll: null
	,has: null
	,__class__: flixel_util_IFlxSignal
};
var flixel_util__$FlxSignal_FlxBaseSignal = function() {
	this.processingListeners = false;
	this.handlers = [];
	this.pendingRemove = [];
};
$hxClasses["flixel.util._FlxSignal.FlxBaseSignal"] = flixel_util__$FlxSignal_FlxBaseSignal;
flixel_util__$FlxSignal_FlxBaseSignal.__name__ = "flixel.util._FlxSignal.FlxBaseSignal";
flixel_util__$FlxSignal_FlxBaseSignal.__interfaces__ = [flixel_util_IFlxSignal];
flixel_util__$FlxSignal_FlxBaseSignal.prototype = {
	dispatch: null
	,handlers: null
	,pendingRemove: null
	,processingListeners: null
	,add: function(listener) {
		if(listener != null) {
			this.registerListener(listener,false);
		}
	}
	,addOnce: function(listener) {
		if(listener != null) {
			this.registerListener(listener,true);
		}
	}
	,remove: function(listener) {
		if(listener != null) {
			var handler = this.getHandler(listener);
			if(handler != null) {
				if(this.processingListeners) {
					this.pendingRemove.push(handler);
				} else {
					HxOverrides.remove(this.handlers,handler);
					handler.destroy();
				}
			}
		}
	}
	,has: function(listener) {
		if(listener == null) {
			return false;
		}
		return this.getHandler(listener) != null;
	}
	,removeAll: function() {
		flixel_util_FlxDestroyUtil.destroyArray(this.handlers);
	}
	,destroy: function() {
		flixel_util_FlxDestroyUtil.destroyArray(this.handlers);
		this.handlers = null;
		this.pendingRemove = null;
	}
	,registerListener: function(listener,dispatchOnce) {
		var handler = this.getHandler(listener);
		if(handler == null) {
			handler = new flixel_util__$FlxSignal_FlxSignalHandler(listener,dispatchOnce);
			this.handlers.push(handler);
			return handler;
		} else if(handler.dispatchOnce != dispatchOnce) {
			throw haxe_Exception.thrown("You cannot addOnce() then add() the same listener without removing the relationship first.");
		} else {
			return handler;
		}
	}
	,getHandler: function(listener) {
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			if(handler.listener == listener) {
				return handler;
			}
		}
		return null;
	}
	,__class__: flixel_util__$FlxSignal_FlxBaseSignal
};
var flixel_util__$FlxSignal_FlxSignal0 = function() {
	flixel_util__$FlxSignal_FlxBaseSignal.call(this);
	this.dispatch = $bind(this,this.dispatch0);
};
$hxClasses["flixel.util._FlxSignal.FlxSignal0"] = flixel_util__$FlxSignal_FlxSignal0;
flixel_util__$FlxSignal_FlxSignal0.__name__ = "flixel.util._FlxSignal.FlxSignal0";
flixel_util__$FlxSignal_FlxSignal0.__super__ = flixel_util__$FlxSignal_FlxBaseSignal;
flixel_util__$FlxSignal_FlxSignal0.prototype = $extend(flixel_util__$FlxSignal_FlxBaseSignal.prototype,{
	dispatch0: function() {
		this.processingListeners = true;
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler.listener();
			if(handler.dispatchOnce) {
				this.remove(handler.listener);
			}
		}
		this.processingListeners = false;
		var _g = 0;
		var _g1 = this.pendingRemove;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			this.remove(handler.listener);
		}
		if(this.pendingRemove.length > 0) {
			this.pendingRemove = [];
		}
	}
	,__class__: flixel_util__$FlxSignal_FlxSignal0
});
var flixel_util__$FlxSignal_FlxSignal1 = function() {
	flixel_util__$FlxSignal_FlxBaseSignal.call(this);
	this.dispatch = $bind(this,this.dispatch1);
};
$hxClasses["flixel.util._FlxSignal.FlxSignal1"] = flixel_util__$FlxSignal_FlxSignal1;
flixel_util__$FlxSignal_FlxSignal1.__name__ = "flixel.util._FlxSignal.FlxSignal1";
flixel_util__$FlxSignal_FlxSignal1.__super__ = flixel_util__$FlxSignal_FlxBaseSignal;
flixel_util__$FlxSignal_FlxSignal1.prototype = $extend(flixel_util__$FlxSignal_FlxBaseSignal.prototype,{
	dispatch1: function(value1) {
		this.processingListeners = true;
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler.listener(value1);
			if(handler.dispatchOnce) {
				this.remove(handler.listener);
			}
		}
		this.processingListeners = false;
		var _g = 0;
		var _g1 = this.pendingRemove;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			this.remove(handler.listener);
		}
		if(this.pendingRemove.length > 0) {
			this.pendingRemove = [];
		}
	}
	,__class__: flixel_util__$FlxSignal_FlxSignal1
});
var flixel_util__$FlxSignal_FlxSignal2 = function() {
	flixel_util__$FlxSignal_FlxBaseSignal.call(this);
	this.dispatch = $bind(this,this.dispatch2);
};
$hxClasses["flixel.util._FlxSignal.FlxSignal2"] = flixel_util__$FlxSignal_FlxSignal2;
flixel_util__$FlxSignal_FlxSignal2.__name__ = "flixel.util._FlxSignal.FlxSignal2";
flixel_util__$FlxSignal_FlxSignal2.__super__ = flixel_util__$FlxSignal_FlxBaseSignal;
flixel_util__$FlxSignal_FlxSignal2.prototype = $extend(flixel_util__$FlxSignal_FlxBaseSignal.prototype,{
	dispatch2: function(value1,value2) {
		this.processingListeners = true;
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler.listener(value1,value2);
			if(handler.dispatchOnce) {
				this.remove(handler.listener);
			}
		}
		this.processingListeners = false;
		var _g = 0;
		var _g1 = this.pendingRemove;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			this.remove(handler.listener);
		}
		if(this.pendingRemove.length > 0) {
			this.pendingRemove = [];
		}
	}
	,__class__: flixel_util__$FlxSignal_FlxSignal2
});
var flixel_util__$FlxSignal_FlxSignal3 = function() {
	flixel_util__$FlxSignal_FlxBaseSignal.call(this);
	this.dispatch = $bind(this,this.dispatch3);
};
$hxClasses["flixel.util._FlxSignal.FlxSignal3"] = flixel_util__$FlxSignal_FlxSignal3;
flixel_util__$FlxSignal_FlxSignal3.__name__ = "flixel.util._FlxSignal.FlxSignal3";
flixel_util__$FlxSignal_FlxSignal3.__super__ = flixel_util__$FlxSignal_FlxBaseSignal;
flixel_util__$FlxSignal_FlxSignal3.prototype = $extend(flixel_util__$FlxSignal_FlxBaseSignal.prototype,{
	dispatch3: function(value1,value2,value3) {
		this.processingListeners = true;
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler.listener(value1,value2,value3);
			if(handler.dispatchOnce) {
				this.remove(handler.listener);
			}
		}
		this.processingListeners = false;
		var _g = 0;
		var _g1 = this.pendingRemove;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			this.remove(handler.listener);
		}
		if(this.pendingRemove.length > 0) {
			this.pendingRemove = [];
		}
	}
	,__class__: flixel_util__$FlxSignal_FlxSignal3
});
var flixel_util__$FlxSignal_FlxSignal4 = function() {
	flixel_util__$FlxSignal_FlxBaseSignal.call(this);
	this.dispatch = $bind(this,this.dispatch4);
};
$hxClasses["flixel.util._FlxSignal.FlxSignal4"] = flixel_util__$FlxSignal_FlxSignal4;
flixel_util__$FlxSignal_FlxSignal4.__name__ = "flixel.util._FlxSignal.FlxSignal4";
flixel_util__$FlxSignal_FlxSignal4.__super__ = flixel_util__$FlxSignal_FlxBaseSignal;
flixel_util__$FlxSignal_FlxSignal4.prototype = $extend(flixel_util__$FlxSignal_FlxBaseSignal.prototype,{
	dispatch4: function(value1,value2,value3,value4) {
		this.processingListeners = true;
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler.listener(value1,value2,value3,value4);
			if(handler.dispatchOnce) {
				this.remove(handler.listener);
			}
		}
		this.processingListeners = false;
		var _g = 0;
		var _g1 = this.pendingRemove;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			this.remove(handler.listener);
		}
		if(this.pendingRemove.length > 0) {
			this.pendingRemove = [];
		}
	}
	,__class__: flixel_util__$FlxSignal_FlxSignal4
});
var flixel_util__$FlxSignal_Macro = function() { };
$hxClasses["flixel.util._FlxSignal.Macro"] = flixel_util__$FlxSignal_Macro;
flixel_util__$FlxSignal_Macro.__name__ = "flixel.util._FlxSignal.Macro";
var flixel_util_FlxSort = function() { };
$hxClasses["flixel.util.FlxSort"] = flixel_util_FlxSort;
flixel_util_FlxSort.__name__ = "flixel.util.FlxSort";
flixel_util_FlxSort.byY = function(Order,Obj1,Obj2) {
	var Value1 = Obj1.y;
	var Value2 = Obj2.y;
	var result = 0;
	if(Value1 < Value2) {
		result = Order;
	} else if(Value1 > Value2) {
		result = -Order;
	}
	return result;
};
flixel_util_FlxSort.byValues = function(Order,Value1,Value2) {
	var result = 0;
	if(Value1 < Value2) {
		result = Order;
	} else if(Value1 > Value2) {
		result = -Order;
	}
	return result;
};
var flixel_util_FlxSpriteUtil = function() { };
$hxClasses["flixel.util.FlxSpriteUtil"] = flixel_util_FlxSpriteUtil;
flixel_util_FlxSpriteUtil.__name__ = "flixel.util.FlxSpriteUtil";
flixel_util_FlxSpriteUtil.alphaMask = function(output,source,mask) {
	var data = flixel_system_FlxAssets.resolveBitmapData(source);
	var maskData = flixel_system_FlxAssets.resolveBitmapData(mask);
	if(data == null || maskData == null) {
		return null;
	}
	data = data.clone();
	data.copyChannel(maskData,new openfl_geom_Rectangle(0,0,data.width,data.height),new openfl_geom_Point(),8,8);
	output.set_pixels(data);
	return output;
};
flixel_util_FlxSpriteUtil.alphaMaskFlxSprite = function(sprite,mask,output) {
	sprite.drawFrame();
	var data = sprite.get_pixels().clone();
	data.copyChannel(mask.get_pixels(),new openfl_geom_Rectangle(0,0,sprite.get_width(),sprite.get_height()),new openfl_geom_Point(),8,8);
	output.set_pixels(data);
	return output;
};
flixel_util_FlxSpriteUtil.screenWrap = function(sprite,Left,Right,Top,Bottom) {
	if(Bottom == null) {
		Bottom = true;
	}
	if(Top == null) {
		Top = true;
	}
	if(Right == null) {
		Right = true;
	}
	if(Left == null) {
		Left = true;
	}
	if(Left && sprite.x + sprite.frameWidth / 2 <= 0) {
		sprite.set_x(flixel_FlxG.width);
	} else if(Right && sprite.x >= flixel_FlxG.width) {
		sprite.set_x(0);
	}
	if(Top && sprite.y + sprite.frameHeight / 2 <= 0) {
		sprite.set_y(flixel_FlxG.height);
	} else if(Bottom && sprite.y >= flixel_FlxG.height) {
		sprite.set_y(0);
	}
	return sprite;
};
flixel_util_FlxSpriteUtil.bound = function(sprite,MinX,MaxX,MinY,MaxY) {
	if(MaxY == null) {
		MaxY = 0;
	}
	if(MinY == null) {
		MinY = 0;
	}
	if(MaxX == null) {
		MaxX = 0;
	}
	if(MinX == null) {
		MinX = 0;
	}
	if(MaxX <= 0) {
		MaxX = flixel_FlxG.width;
	}
	if(MaxY <= 0) {
		MaxY = flixel_FlxG.height;
	}
	MaxX -= sprite.frameWidth;
	MaxY -= sprite.frameHeight;
	var Value = sprite.x;
	var lowerBound = MinX != null && Value < MinX ? MinX : Value;
	sprite.set_x(MaxX != null && lowerBound > MaxX ? MaxX : lowerBound);
	var Value = sprite.y;
	var lowerBound = MinY != null && Value < MinY ? MinY : Value;
	sprite.set_y(MaxY != null && lowerBound > MaxY ? MaxY : lowerBound);
	return sprite;
};
flixel_util_FlxSpriteUtil.space = function(objects,startX,startY,horizontalSpacing,verticalSpacing,spaceFromBounds,position) {
	if(spaceFromBounds == null) {
		spaceFromBounds = false;
	}
	var prevWidth = 0;
	var runningX = 0;
	if(horizontalSpacing != null) {
		if(spaceFromBounds) {
			prevWidth = objects[0].get_width();
		}
		runningX = startX;
	} else {
		runningX = objects[0].x;
	}
	var prevHeight = 0;
	var runningY = 0;
	if(verticalSpacing != null) {
		if(spaceFromBounds) {
			prevHeight = objects[0].get_height();
		}
		runningY = startY;
	} else {
		runningY = objects[0].y;
	}
	if(position != null) {
		position(objects[0],runningX,runningY);
	} else {
		objects[0].set_x(runningX);
		objects[0].set_y(runningY);
	}
	var curX = 0;
	var curY = 0;
	var _g = 1;
	var _g1 = objects.length;
	while(_g < _g1) {
		var i = _g++;
		var object = objects[i];
		if(horizontalSpacing != null) {
			curX = runningX + prevWidth + horizontalSpacing;
			runningX = curX;
		} else {
			curX = object.x;
		}
		if(verticalSpacing != null) {
			curY = runningY + prevHeight + verticalSpacing;
			runningY = curY;
		} else {
			curY = object.y;
		}
		if(position != null) {
			position(object,curX,curY);
		} else {
			object.set_x(curX);
			object.set_y(curY);
		}
		if(spaceFromBounds) {
			prevWidth = object.get_width();
			prevHeight = object.get_height();
		}
	}
};
flixel_util_FlxSpriteUtil.drawLine = function(sprite,StartX,StartY,EndX,EndY,lineStyle,drawStyle) {
	var lineStyle1 = lineStyle;
	if(lineStyle1 == null) {
		lineStyle1 = { thickness : 1, color : -1};
	}
	if(lineStyle1.thickness == null) {
		lineStyle1.thickness = 1;
	}
	if(lineStyle1.color == null) {
		lineStyle1.color = -1;
	}
	lineStyle = lineStyle1;
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	if(lineStyle != null) {
		var color = lineStyle.color == null ? -16777216 : lineStyle.color;
		if(lineStyle.thickness == null) {
			lineStyle.thickness = 1;
		}
		if(lineStyle.pixelHinting == null) {
			lineStyle.pixelHinting = false;
		}
		if(lineStyle.miterLimit == null) {
			lineStyle.miterLimit = 3;
		}
		flixel_util_FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color & 16777215,(color >> 24 & 255) / 255,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
	if(0 != 0) {
		flixel_util_FlxSpriteUtil.flashGfx.beginFill(0,0.);
	}
	flixel_util_FlxSpriteUtil.flashGfx.moveTo(StartX,StartY);
	flixel_util_FlxSpriteUtil.flashGfx.lineTo(EndX,EndY);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	return sprite;
};
flixel_util_FlxSpriteUtil.drawCurve = function(sprite,StartX,StartY,EndX,EndY,ControlX,ControlY,FillColor,lineStyle,drawStyle) {
	if(FillColor == null) {
		FillColor = 0;
	}
	var lineStyle1 = lineStyle;
	if(lineStyle1 == null) {
		lineStyle1 = { thickness : 1, color : -1};
	}
	if(lineStyle1.thickness == null) {
		lineStyle1.thickness = 1;
	}
	if(lineStyle1.color == null) {
		lineStyle1.color = -1;
	}
	lineStyle = lineStyle1;
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	if(lineStyle != null) {
		var color = lineStyle.color == null ? -16777216 : lineStyle.color;
		if(lineStyle.thickness == null) {
			lineStyle.thickness = 1;
		}
		if(lineStyle.pixelHinting == null) {
			lineStyle.pixelHinting = false;
		}
		if(lineStyle.miterLimit == null) {
			lineStyle.miterLimit = 3;
		}
		flixel_util_FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color & 16777215,(color >> 24 & 255) / 255,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
	if(FillColor != 0) {
		flixel_util_FlxSpriteUtil.flashGfx.beginFill(FillColor & 16777215,(FillColor >> 24 & 255) / 255);
	}
	flixel_util_FlxSpriteUtil.flashGfx.moveTo(StartX,StartY);
	flixel_util_FlxSpriteUtil.flashGfx.curveTo(EndX,EndY,ControlX,ControlY);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	return sprite;
};
flixel_util_FlxSpriteUtil.drawRect = function(sprite,X,Y,Width,Height,FillColor,lineStyle,drawStyle) {
	if(FillColor == null) {
		FillColor = -1;
	}
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	if(lineStyle != null) {
		var color = lineStyle.color == null ? -16777216 : lineStyle.color;
		if(lineStyle.thickness == null) {
			lineStyle.thickness = 1;
		}
		if(lineStyle.pixelHinting == null) {
			lineStyle.pixelHinting = false;
		}
		if(lineStyle.miterLimit == null) {
			lineStyle.miterLimit = 3;
		}
		flixel_util_FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color & 16777215,(color >> 24 & 255) / 255,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
	if(FillColor != 0) {
		flixel_util_FlxSpriteUtil.flashGfx.beginFill(FillColor & 16777215,(FillColor >> 24 & 255) / 255);
	}
	flixel_util_FlxSpriteUtil.flashGfx.drawRect(X,Y,Width,Height);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	return sprite;
};
flixel_util_FlxSpriteUtil.drawRoundRect = function(sprite,X,Y,Width,Height,EllipseWidth,EllipseHeight,FillColor,lineStyle,drawStyle) {
	if(FillColor == null) {
		FillColor = -1;
	}
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	if(lineStyle != null) {
		var color = lineStyle.color == null ? -16777216 : lineStyle.color;
		if(lineStyle.thickness == null) {
			lineStyle.thickness = 1;
		}
		if(lineStyle.pixelHinting == null) {
			lineStyle.pixelHinting = false;
		}
		if(lineStyle.miterLimit == null) {
			lineStyle.miterLimit = 3;
		}
		flixel_util_FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color & 16777215,(color >> 24 & 255) / 255,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
	if(FillColor != 0) {
		flixel_util_FlxSpriteUtil.flashGfx.beginFill(FillColor & 16777215,(FillColor >> 24 & 255) / 255);
	}
	flixel_util_FlxSpriteUtil.flashGfx.drawRoundRect(X,Y,Width,Height,EllipseWidth,EllipseHeight);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	return sprite;
};
flixel_util_FlxSpriteUtil.drawRoundRectComplex = function(sprite,X,Y,Width,Height,TopLeftRadius,TopRightRadius,BottomLeftRadius,BottomRightRadius,FillColor,lineStyle,drawStyle) {
	if(FillColor == null) {
		FillColor = -1;
	}
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	if(lineStyle != null) {
		var color = lineStyle.color == null ? -16777216 : lineStyle.color;
		if(lineStyle.thickness == null) {
			lineStyle.thickness = 1;
		}
		if(lineStyle.pixelHinting == null) {
			lineStyle.pixelHinting = false;
		}
		if(lineStyle.miterLimit == null) {
			lineStyle.miterLimit = 3;
		}
		flixel_util_FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color & 16777215,(color >> 24 & 255) / 255,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
	if(FillColor != 0) {
		flixel_util_FlxSpriteUtil.flashGfx.beginFill(FillColor & 16777215,(FillColor >> 24 & 255) / 255);
	}
	flixel_util_FlxSpriteUtil.flashGfx.drawRoundRectComplex(X,Y,Width,Height,TopLeftRadius,TopRightRadius,BottomLeftRadius,BottomRightRadius);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	return sprite;
};
flixel_util_FlxSpriteUtil.drawCircle = function(sprite,X,Y,Radius,FillColor,lineStyle,drawStyle) {
	if(FillColor == null) {
		FillColor = -1;
	}
	if(Radius == null) {
		Radius = -1;
	}
	if(Y == null) {
		Y = -1;
	}
	if(X == null) {
		X = -1;
	}
	if(X == -1 || Y == -1) {
		var midPoint = sprite.getGraphicMidpoint();
		if(X == -1) {
			X = midPoint.x - sprite.x;
		}
		if(Y == -1) {
			Y = midPoint.y - sprite.y;
		}
		midPoint.put();
	}
	if(Radius < 1) {
		var minVal = Math.min(sprite.frameWidth,sprite.frameHeight);
		Radius = minVal / 2;
	}
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	if(lineStyle != null) {
		var color = lineStyle.color == null ? -16777216 : lineStyle.color;
		if(lineStyle.thickness == null) {
			lineStyle.thickness = 1;
		}
		if(lineStyle.pixelHinting == null) {
			lineStyle.pixelHinting = false;
		}
		if(lineStyle.miterLimit == null) {
			lineStyle.miterLimit = 3;
		}
		flixel_util_FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color & 16777215,(color >> 24 & 255) / 255,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
	if(FillColor != 0) {
		flixel_util_FlxSpriteUtil.flashGfx.beginFill(FillColor & 16777215,(FillColor >> 24 & 255) / 255);
	}
	flixel_util_FlxSpriteUtil.flashGfx.drawCircle(X,Y,Radius);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	return sprite;
};
flixel_util_FlxSpriteUtil.drawEllipse = function(sprite,X,Y,Width,Height,FillColor,lineStyle,drawStyle) {
	if(FillColor == null) {
		FillColor = -1;
	}
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	if(lineStyle != null) {
		var color = lineStyle.color == null ? -16777216 : lineStyle.color;
		if(lineStyle.thickness == null) {
			lineStyle.thickness = 1;
		}
		if(lineStyle.pixelHinting == null) {
			lineStyle.pixelHinting = false;
		}
		if(lineStyle.miterLimit == null) {
			lineStyle.miterLimit = 3;
		}
		flixel_util_FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color & 16777215,(color >> 24 & 255) / 255,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
	if(FillColor != 0) {
		flixel_util_FlxSpriteUtil.flashGfx.beginFill(FillColor & 16777215,(FillColor >> 24 & 255) / 255);
	}
	flixel_util_FlxSpriteUtil.flashGfx.drawEllipse(X,Y,Width,Height);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	return sprite;
};
flixel_util_FlxSpriteUtil.drawTriangle = function(sprite,X,Y,Height,FillColor,lineStyle,drawStyle) {
	if(FillColor == null) {
		FillColor = -1;
	}
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	if(lineStyle != null) {
		var color = lineStyle.color == null ? -16777216 : lineStyle.color;
		if(lineStyle.thickness == null) {
			lineStyle.thickness = 1;
		}
		if(lineStyle.pixelHinting == null) {
			lineStyle.pixelHinting = false;
		}
		if(lineStyle.miterLimit == null) {
			lineStyle.miterLimit = 3;
		}
		flixel_util_FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color & 16777215,(color >> 24 & 255) / 255,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
	if(FillColor != 0) {
		flixel_util_FlxSpriteUtil.flashGfx.beginFill(FillColor & 16777215,(FillColor >> 24 & 255) / 255);
	}
	flixel_util_FlxSpriteUtil.flashGfx.moveTo(X + Height / 2,Y);
	flixel_util_FlxSpriteUtil.flashGfx.lineTo(X + Height,Height + Y);
	flixel_util_FlxSpriteUtil.flashGfx.lineTo(X,Height + Y);
	flixel_util_FlxSpriteUtil.flashGfx.lineTo(X + Height / 2,Y);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	return sprite;
};
flixel_util_FlxSpriteUtil.drawPolygon = function(sprite,Vertices,FillColor,lineStyle,drawStyle) {
	if(FillColor == null) {
		FillColor = -1;
	}
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	if(lineStyle != null) {
		var color = lineStyle.color == null ? -16777216 : lineStyle.color;
		if(lineStyle.thickness == null) {
			lineStyle.thickness = 1;
		}
		if(lineStyle.pixelHinting == null) {
			lineStyle.pixelHinting = false;
		}
		if(lineStyle.miterLimit == null) {
			lineStyle.miterLimit = 3;
		}
		flixel_util_FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color & 16777215,(color >> 24 & 255) / 255,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
	if(FillColor != 0) {
		flixel_util_FlxSpriteUtil.flashGfx.beginFill(FillColor & 16777215,(FillColor >> 24 & 255) / 255);
	}
	var p = Vertices.shift();
	flixel_util_FlxSpriteUtil.flashGfx.moveTo(p.x,p.y);
	var _g = 0;
	while(_g < Vertices.length) {
		var p1 = Vertices[_g];
		++_g;
		flixel_util_FlxSpriteUtil.flashGfx.lineTo(p1.x,p1.y);
	}
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	Vertices.unshift(p);
	return sprite;
};
flixel_util_FlxSpriteUtil.beginDraw = function(FillColor,lineStyle) {
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	if(lineStyle != null) {
		var color = lineStyle.color == null ? -16777216 : lineStyle.color;
		if(lineStyle.thickness == null) {
			lineStyle.thickness = 1;
		}
		if(lineStyle.pixelHinting == null) {
			lineStyle.pixelHinting = false;
		}
		if(lineStyle.miterLimit == null) {
			lineStyle.miterLimit = 3;
		}
		flixel_util_FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color & 16777215,(color >> 24 & 255) / 255,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
	if(FillColor != 0) {
		flixel_util_FlxSpriteUtil.flashGfx.beginFill(FillColor & 16777215,(FillColor >> 24 & 255) / 255);
	}
};
flixel_util_FlxSpriteUtil.endDraw = function(sprite,drawStyle) {
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	return sprite;
};
flixel_util_FlxSpriteUtil.updateSpriteGraphic = function(sprite,drawStyle) {
	if(drawStyle == null) {
		drawStyle = { smoothing : false};
	} else if(drawStyle.smoothing == null) {
		drawStyle.smoothing = false;
	}
	sprite.get_pixels().draw(flixel_util_FlxSpriteUtil.flashGfxSprite,drawStyle.matrix,drawStyle.colorTransform,drawStyle.blendMode,drawStyle.clipRect,drawStyle.smoothing);
	sprite.dirty = true;
	return sprite;
};
flixel_util_FlxSpriteUtil.setLineStyle = function(lineStyle) {
	if(lineStyle != null) {
		var color = lineStyle.color == null ? -16777216 : lineStyle.color;
		if(lineStyle.thickness == null) {
			lineStyle.thickness = 1;
		}
		if(lineStyle.pixelHinting == null) {
			lineStyle.pixelHinting = false;
		}
		if(lineStyle.miterLimit == null) {
			lineStyle.miterLimit = 3;
		}
		flixel_util_FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color & 16777215,(color >> 24 & 255) / 255,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
};
flixel_util_FlxSpriteUtil.getDefaultLineStyle = function(lineStyle) {
	if(lineStyle == null) {
		lineStyle = { thickness : 1, color : -1};
	}
	if(lineStyle.thickness == null) {
		lineStyle.thickness = 1;
	}
	if(lineStyle.color == null) {
		lineStyle.color = -1;
	}
	return lineStyle;
};
flixel_util_FlxSpriteUtil.fill = function(sprite,FillColor) {
	sprite.get_pixels().fillRect(sprite.get_pixels().rect,FillColor);
	if(sprite.get_pixels() != sprite.framePixels) {
		sprite.dirty = true;
	}
	return sprite;
};
flixel_util_FlxSpriteUtil.flicker = function(Object1,Duration,Interval,EndVisibility,ForceRestart,CompletionCallback,ProgressCallback) {
	if(ForceRestart == null) {
		ForceRestart = true;
	}
	if(EndVisibility == null) {
		EndVisibility = true;
	}
	if(Interval == null) {
		Interval = 0.04;
	}
	if(Duration == null) {
		Duration = 1;
	}
	return flixel_effects_FlxFlicker.flicker(Object1,Duration,Interval,EndVisibility,ForceRestart,CompletionCallback,ProgressCallback);
};
flixel_util_FlxSpriteUtil.isFlickering = function(Object1) {
	return flixel_effects_FlxFlicker.isFlickering(Object1);
};
flixel_util_FlxSpriteUtil.stopFlickering = function(Object1) {
	flixel_effects_FlxFlicker.stopFlickering(Object1);
	return Object1;
};
flixel_util_FlxSpriteUtil.fadeIn = function(sprite,Duration,ResetAlpha,OnComplete) {
	if(Duration == null) {
		Duration = 1;
	}
	if(ResetAlpha) {
		sprite.set_alpha(0);
	}
	var sprite1 = sprite;
	var tmp = function(f) {
		flixel_util_FlxSpriteUtil.alphaTween(sprite1,f);
	};
	flixel_tweens_FlxTween.num(sprite.alpha,1,Duration,{ onComplete : OnComplete},tmp);
	return sprite;
};
flixel_util_FlxSpriteUtil.fadeOut = function(sprite,Duration,OnComplete) {
	if(Duration == null) {
		Duration = 1;
	}
	var sprite1 = sprite;
	var tmp = function(f) {
		flixel_util_FlxSpriteUtil.alphaTween(sprite1,f);
	};
	flixel_tweens_FlxTween.num(sprite.alpha,0,Duration,{ onComplete : OnComplete},tmp);
	return sprite;
};
flixel_util_FlxSpriteUtil.alphaTween = function(sprite,f) {
	sprite.set_alpha(f);
};
var flixel_util_FlxStringUtil = function() { };
$hxClasses["flixel.util.FlxStringUtil"] = flixel_util_FlxStringUtil;
flixel_util_FlxStringUtil.__name__ = "flixel.util.FlxStringUtil";
flixel_util_FlxStringUtil.formatTicks = function(StartTicks,EndTicks) {
	return Math.abs(EndTicks - StartTicks) / 1000 + "s";
};
flixel_util_FlxStringUtil.formatTime = function(Seconds,ShowMS) {
	if(ShowMS == null) {
		ShowMS = false;
	}
	var timeString = (Seconds / 60 | 0) + ":";
	var timeStringHelper = (Seconds | 0) % 60;
	if(timeStringHelper < 10) {
		timeString += "0";
	}
	timeString += timeStringHelper;
	if(ShowMS) {
		timeString += ".";
		timeStringHelper = (Seconds - (Seconds | 0)) * 100 | 0;
		if(timeStringHelper < 10) {
			timeString += "0";
		}
		timeString += timeStringHelper;
	}
	return timeString;
};
flixel_util_FlxStringUtil.formatArray = function(AnyArray) {
	var string = "";
	if(AnyArray != null && AnyArray.length > 0) {
		string = Std.string(AnyArray[0]);
		var i = 1;
		var l = AnyArray.length;
		while(i < l) string += ", " + Std.string(AnyArray[i++]);
	}
	return string;
};
flixel_util_FlxStringUtil.formatStringMap = function(AnyMap) {
	var string = "";
	var key = haxe_ds_StringMap.keysIterator(AnyMap.h);
	while(key.hasNext()) {
		var key1 = key.next();
		string += key1 == null ? "null" : "" + key1;
		string += ", ";
	}
	return string.substring(0,string.length - 2);
};
flixel_util_FlxStringUtil.formatMoney = function(Amount,ShowDecimal,EnglishStyle) {
	if(EnglishStyle == null) {
		EnglishStyle = true;
	}
	if(ShowDecimal == null) {
		ShowDecimal = true;
	}
	var isNegative = Amount < 0;
	Amount = Math.abs(Amount);
	var string = "";
	var comma = "";
	var amount = Math.floor(Amount);
	while(amount > 0) {
		if(string.length > 0 && comma.length <= 0) {
			comma = EnglishStyle ? "," : ".";
		}
		var zeroes = "";
		var helper = amount - Math.floor(amount / 1000) * 1000;
		amount = Math.floor(amount / 1000);
		if(amount > 0) {
			if(helper < 100) {
				zeroes += "0";
			}
			if(helper < 10) {
				zeroes += "0";
			}
		}
		string = zeroes + helper + comma + string;
	}
	if(string == "") {
		string = "0";
	}
	if(ShowDecimal) {
		amount = Math.floor(Amount * 100) - Math.floor(Amount) * 100;
		string += EnglishStyle ? "." : ",";
		if(amount < 10) {
			string += "0";
		}
		string += amount;
	}
	if(isNegative) {
		string = "-" + string;
	}
	return string;
};
flixel_util_FlxStringUtil.formatBytes = function(Bytes,Precision) {
	if(Precision == null) {
		Precision = 2;
	}
	var units = ["Bytes","kB","MB","GB","TB","PB"];
	var curUnit = 0;
	while(Bytes >= 1024 && curUnit < units.length - 1) {
		Bytes /= 1024;
		++curUnit;
	}
	return flixel_math_FlxMath.roundDecimal(Bytes,Precision) + units[curUnit];
};
flixel_util_FlxStringUtil.filterDigits = function(Input) {
	var output_b = "";
	var _g = 0;
	var _g1 = Input.length;
	while(_g < _g1) {
		var i = _g++;
		var c = HxOverrides.cca(Input,i);
		if(c >= 48 && c <= 57) {
			output_b += String.fromCodePoint(c);
		}
	}
	return output_b;
};
flixel_util_FlxStringUtil.htmlFormat = function(Text1,Size,Color,Bold,Italic,Underlined) {
	if(Underlined == null) {
		Underlined = false;
	}
	if(Italic == null) {
		Italic = false;
	}
	if(Bold == null) {
		Bold = false;
	}
	if(Color == null) {
		Color = "FFFFFF";
	}
	if(Size == null) {
		Size = 12;
	}
	var prefix = "<font size='" + Size + "' color='#" + Color + "'>";
	var suffix = "</font>";
	if(Bold) {
		prefix = "<b>" + prefix;
		suffix += "</b>";
	}
	if(Italic) {
		prefix = "<i>" + prefix;
		suffix += "</i>";
	}
	if(Underlined) {
		prefix = "<u>" + prefix;
		suffix += "</u>";
	}
	return prefix + Text1 + suffix;
};
flixel_util_FlxStringUtil.getClassName = function(objectOrClass,simple) {
	if(simple == null) {
		simple = false;
	}
	var cl;
	if(js_Boot.__instanceof(objectOrClass,Class)) {
		cl = objectOrClass;
	} else {
		cl = js_Boot.getClass(objectOrClass);
	}
	return flixel_util_FlxStringUtil.formatPackage(cl.__name__,simple);
};
flixel_util_FlxStringUtil.getEnumName = function(enumValueOrEnum,simple) {
	if(simple == null) {
		simple = false;
	}
	var e;
	if(js_Boot.__instanceof(enumValueOrEnum,Enum)) {
		e = enumValueOrEnum;
	} else {
		e = Type.getEnum(enumValueOrEnum);
	}
	return flixel_util_FlxStringUtil.formatPackage(e.__ename__,simple);
};
flixel_util_FlxStringUtil.formatPackage = function(s,simple) {
	if(s == null) {
		return null;
	}
	s = StringTools.replace(s,"::",".");
	if(simple) {
		s = HxOverrides.substr(s,s.lastIndexOf(".") + 1,null);
	}
	return s;
};
flixel_util_FlxStringUtil.getHost = function(url) {
	var hostFromURL = new EReg("^(?:[a-z][a-z0-9+\\-.]*://)?(?:[a-z0-9\\-._~%!$&'()*+,;=]+@)?([a-z0-9\\-._~%]{3,}|\\[[a-f0-9:.]+\\])?(?::[0-9]+)?","i");
	if(hostFromURL.match(url)) {
		var host = hostFromURL.matched(1);
		if(host != null) {
			return decodeURIComponent(host.split("+").join(" ")).toLowerCase();
		} else {
			return "";
		}
	}
	return "";
};
flixel_util_FlxStringUtil.getDomain = function(url) {
	var host = flixel_util_FlxStringUtil.getHost(url);
	var isLocalhostOrIpAddress = new EReg("^(localhost|[0-9.]+|\\[[a-f0-9:.]+\\])$","i");
	var domainFromHost = new EReg("^(?:[a-z0-9\\-]+\\.)*([a-z0-9\\-]+\\.[a-z0-9\\-]+)$","i");
	if(!isLocalhostOrIpAddress.match(host) && domainFromHost.match(host)) {
		var domain = domainFromHost.matched(1);
		if(domain != null) {
			return domain.toLowerCase();
		} else {
			return "";
		}
	}
	return "";
};
flixel_util_FlxStringUtil.sameClassName = function(Obj1,Obj2,Simple) {
	if(Simple == null) {
		Simple = true;
	}
	return flixel_util_FlxStringUtil.getClassName(Obj1,Simple) == flixel_util_FlxStringUtil.getClassName(Obj2,Simple);
};
flixel_util_FlxStringUtil.toIntArray = function(Data) {
	if(Data != null && Data != "") {
		var strArray = Data.split(",");
		var iArray = [];
		var _g = 0;
		while(_g < strArray.length) {
			var str = strArray[_g];
			++_g;
			iArray.push(Std.parseInt(str));
		}
		return iArray;
	}
	return null;
};
flixel_util_FlxStringUtil.toFloatArray = function(Data) {
	if(Data != null && Data != "") {
		var strArray = Data.split(",");
		var fArray = [];
		var _g = 0;
		while(_g < strArray.length) {
			var str = strArray[_g];
			++_g;
			fArray.push(parseFloat(str));
		}
		return fArray;
	}
	return null;
};
flixel_util_FlxStringUtil.arrayToCSV = function(Data,Width,Invert) {
	if(Invert == null) {
		Invert = false;
	}
	var row = 0;
	var column;
	var csv = "";
	var height = Data.length / Width | 0;
	var index;
	var offset = 0;
	while(row < height) {
		column = 0;
		while(column < Width) {
			index = Data[offset];
			if(Invert) {
				if(index == 0) {
					index = 1;
				} else if(index == 1) {
					index = 0;
				}
			}
			if(column == 0) {
				if(row == 0) {
					csv += index;
				} else {
					csv += "\n" + index;
				}
			} else {
				csv += ", " + index;
			}
			++column;
			++offset;
		}
		++row;
	}
	return csv;
};
flixel_util_FlxStringUtil.bitmapToCSV = function(Bitmap,Invert,Scale,ColorMap) {
	if(Scale == null) {
		Scale = 1;
	}
	if(Invert == null) {
		Invert = false;
	}
	if(Scale < 1) {
		Scale = 1;
	}
	if(Scale > 1) {
		var bd = Bitmap;
		Bitmap = new openfl_display_BitmapData(Bitmap.width * Scale,Bitmap.height * Scale);
		var bdW = bd.width;
		var bdH = bd.height;
		var pCol = 0;
		var _g = 0;
		var _g1 = bdW;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g3 = bdH;
			while(_g2 < _g3) {
				var j = _g2++;
				pCol = bd.getPixel(i,j);
				var _g4 = 0;
				var _g5 = Scale;
				while(_g4 < _g5) {
					var k = _g4++;
					var _g6 = 0;
					var _g7 = Scale;
					while(_g6 < _g7) {
						var m = _g6++;
						Bitmap.setPixel(i * Scale + k,j * Scale + m,pCol);
					}
				}
			}
		}
	}
	if(ColorMap != null) {
		var _g = 0;
		var _g1 = ColorMap.length;
		while(_g < _g1) {
			var i = _g++;
			ColorMap[i] = ColorMap[i] & 16777215;
		}
	}
	var row = 0;
	var column;
	var pixel;
	var csv = "";
	var bitmapWidth = Bitmap.width;
	var bitmapHeight = Bitmap.height;
	while(row < bitmapHeight) {
		column = 0;
		while(column < bitmapWidth) {
			pixel = Bitmap.getPixel(column,row);
			if(ColorMap != null) {
				pixel = ColorMap.indexOf(pixel);
			} else if(Invert && pixel > 0 || !Invert && pixel == 0) {
				pixel = 1;
			} else {
				pixel = 0;
			}
			if(column == 0) {
				if(row == 0) {
					csv += pixel;
				} else {
					csv += "\n" + pixel;
				}
			} else {
				csv += ", " + pixel;
			}
			++column;
		}
		++row;
	}
	return csv;
};
flixel_util_FlxStringUtil.imageToCSV = function(ImageFile,Invert,Scale,ColorMap) {
	if(Scale == null) {
		Scale = 1;
	}
	if(Invert == null) {
		Invert = false;
	}
	var tempBitmapData;
	if(typeof(ImageFile) == "string") {
		var id = ImageFile;
		tempBitmapData = openfl_utils_Assets.exists(id) ? openfl_utils_Assets.getBitmapData(id,false) : null;
	} else {
		tempBitmapData = Type.createInstance(ImageFile,[]).bitmapData;
	}
	return flixel_util_FlxStringUtil.bitmapToCSV(tempBitmapData,Invert,Scale,ColorMap);
};
flixel_util_FlxStringUtil.getDebugString = function(LabelValuePairs) {
	var output = "(";
	var _g = 0;
	while(_g < LabelValuePairs.length) {
		var pair = LabelValuePairs[_g];
		++_g;
		output += pair.label + ": ";
		var value = pair.value;
		if(typeof(value) == "number") {
			value = flixel_math_FlxMath.roundDecimal(value,flixel_FlxG.debugger.precision);
		}
		output += Std.string(value) + " | ";
		flixel_util_LabelValuePair._pool.put(pair);
	}
	output = StringTools.trim(HxOverrides.substr(output,0,output.length - 2));
	return output + ")";
};
flixel_util_FlxStringUtil.contains = function(s,str) {
	return s.indexOf(str) != -1;
};
flixel_util_FlxStringUtil.remove = function(s,sub) {
	return StringTools.replace(s,sub,"");
};
flixel_util_FlxStringUtil.insert = function(s,pos,insertion) {
	return s.substring(0,pos) + insertion + HxOverrides.substr(s,pos,null);
};
flixel_util_FlxStringUtil.sortAlphabetically = function(list) {
	list.sort(function(a,b) {
		a = a.toLowerCase();
		b = b.toLowerCase();
		if(a < b) {
			return -1;
		}
		if(a > b) {
			return 1;
		}
		return 0;
	});
	return list;
};
flixel_util_FlxStringUtil.isNullOrEmpty = function(s) {
	if(s != null) {
		return s.length == 0;
	} else {
		return true;
	}
};
var flixel_util_LabelValuePair = function() {
};
$hxClasses["flixel.util.LabelValuePair"] = flixel_util_LabelValuePair;
flixel_util_LabelValuePair.__name__ = "flixel.util.LabelValuePair";
flixel_util_LabelValuePair.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_util_LabelValuePair.weak = function(label,value) {
	var _this = flixel_util_LabelValuePair._pool.get();
	_this.label = label;
	_this.value = value;
	return _this;
};
flixel_util_LabelValuePair.prototype = {
	label: null
	,value: null
	,create: function(label,value) {
		this.label = label;
		this.value = value;
		return this;
	}
	,put: function() {
		flixel_util_LabelValuePair._pool.put(this);
	}
	,destroy: function() {
		this.label = null;
		this.value = null;
	}
	,__class__: flixel_util_LabelValuePair
};
var flixel_util_FlxTimer = function(manager) {
	this._inManager = false;
	this._loopsCounter = 0;
	this._timeCounter = 0;
	this.finished = false;
	this.active = false;
	this.loops = 0;
	this.time = 0;
	this.manager = manager != null ? manager : flixel_util_FlxTimer.globalManager;
};
$hxClasses["flixel.util.FlxTimer"] = flixel_util_FlxTimer;
flixel_util_FlxTimer.__name__ = "flixel.util.FlxTimer";
flixel_util_FlxTimer.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_util_FlxTimer.globalManager = null;
flixel_util_FlxTimer.prototype = {
	manager: null
	,time: null
	,loops: null
	,active: null
	,finished: null
	,onComplete: null
	,_timeCounter: null
	,_loopsCounter: null
	,_inManager: null
	,destroy: function() {
		this.onComplete = null;
	}
	,start: function(Time,OnComplete,Loops) {
		if(Loops == null) {
			Loops = 1;
		}
		if(Time == null) {
			Time = 1;
		}
		if(this.manager != null && !this._inManager) {
			this.manager.add(this);
			this._inManager = true;
		}
		this.active = true;
		this.finished = false;
		this.time = Math.abs(Time);
		if(Loops < 0) {
			Loops *= -1;
		}
		this.loops = Loops;
		this.onComplete = OnComplete;
		this._timeCounter = 0;
		this._loopsCounter = 0;
		return this;
	}
	,reset: function(NewTime) {
		if(NewTime == null) {
			NewTime = -1;
		}
		if(NewTime < 0) {
			NewTime = this.time;
		}
		this.start(NewTime,this.onComplete,this.loops);
		return this;
	}
	,cancel: function() {
		this.finished = true;
		this.active = false;
		if(this.manager != null && this._inManager) {
			this.manager.remove(this);
			this._inManager = false;
		}
	}
	,update: function(elapsed) {
		this._timeCounter += elapsed;
		while(this._timeCounter >= this.time && this.active && !this.finished) {
			this._timeCounter -= this.time;
			this._loopsCounter++;
			if(this.loops > 0 && this._loopsCounter >= this.loops) {
				this.finished = true;
			}
		}
	}
	,onLoopFinished: function() {
		if(this.finished) {
			this.cancel();
		}
		if(this.onComplete != null) {
			this.onComplete(this);
		}
	}
	,get_timeLeft: function() {
		return this.time - this._timeCounter;
	}
	,get_elapsedTime: function() {
		return this._timeCounter;
	}
	,get_loopsLeft: function() {
		return this.loops - this._loopsCounter;
	}
	,get_elapsedLoops: function() {
		return this._loopsCounter;
	}
	,get_progress: function() {
		if(this.time > 0) {
			return this._timeCounter / this.time;
		} else {
			return 0;
		}
	}
	,__class__: flixel_util_FlxTimer
	,__properties__: {get_progress:"get_progress",get_elapsedLoops:"get_elapsedLoops",get_loopsLeft:"get_loopsLeft",get_elapsedTime:"get_elapsedTime",get_timeLeft:"get_timeLeft"}
};
var flixel_util_FlxTimerManager = function() {
	this._timers = [];
	flixel_FlxBasic.call(this);
	this.set_visible(false);
	flixel_FlxG.signals.preStateSwitch.add($bind(this,this.clear));
};
$hxClasses["flixel.util.FlxTimerManager"] = flixel_util_FlxTimerManager;
flixel_util_FlxTimerManager.__name__ = "flixel.util.FlxTimerManager";
flixel_util_FlxTimerManager.__super__ = flixel_FlxBasic;
flixel_util_FlxTimerManager.prototype = $extend(flixel_FlxBasic.prototype,{
	_timers: null
	,destroy: function() {
		flixel_util_FlxArrayUtil.clearArray(this._timers);
		this._timers = null;
		flixel_FlxG.signals.preStateSwitch.remove($bind(this,this.clear));
		flixel_FlxBasic.prototype.destroy.call(this);
	}
	,update: function(elapsed) {
		var loopedTimers = null;
		var _g = 0;
		var _g1 = this._timers;
		while(_g < _g1.length) {
			var timer = _g1[_g];
			++_g;
			if(timer.active && !timer.finished && timer.time >= 0) {
				var timerLoops = timer._loopsCounter;
				timer.update(elapsed);
				if(timerLoops != timer._loopsCounter) {
					if(loopedTimers == null) {
						loopedTimers = [];
					}
					loopedTimers.push(timer);
				}
			}
		}
		if(loopedTimers != null) {
			while(loopedTimers.length > 0) loopedTimers.shift().onLoopFinished();
		}
	}
	,add: function(Timer) {
		this._timers.push(Timer);
	}
	,remove: function(Timer) {
		var array = this._timers;
		var index = array.indexOf(Timer);
		if(index != -1) {
			array[index] = array[array.length - 1];
			array.pop();
		}
	}
	,completeAll: function() {
		var timersToFinish = [];
		var _g = 0;
		var _g1 = this._timers;
		while(_g < _g1.length) {
			var timer = _g1[_g];
			++_g;
			if(timer.loops > 0 && timer.active) {
				timersToFinish.push(timer);
			}
		}
		var _g = 0;
		while(_g < timersToFinish.length) {
			var timer = timersToFinish[_g];
			++_g;
			while(!timer.finished) {
				timer.update(timer.time - timer._timeCounter);
				timer.onLoopFinished();
			}
		}
	}
	,clear: function() {
		flixel_util_FlxArrayUtil.clearArray(this._timers);
	}
	,forEach: function(Function1) {
		var _g = 0;
		var _g1 = this._timers;
		while(_g < _g1.length) {
			var timer = _g1[_g];
			++_g;
			Function1(timer);
		}
	}
	,__class__: flixel_util_FlxTimerManager
});
var flixel_util_FlxUnicodeUtil = function() { };
$hxClasses["flixel.util.FlxUnicodeUtil"] = flixel_util_FlxUnicodeUtil;
flixel_util_FlxUnicodeUtil.__name__ = "flixel.util.FlxUnicodeUtil";
flixel_util_FlxUnicodeUtil.uLength = function(s) {
	return UnicodeString.get_length(s);
};
flixel_util_FlxUnicodeUtil.uEquals = function(a,b) {
	return a == b;
};
flixel_util_FlxUnicodeUtil.uSub = function(s,pos,len) {
	return UnicodeString.substr(s,pos,len);
};
flixel_util_FlxUnicodeUtil.uCharCodeAt = function(s,index) {
	return UnicodeString.charCodeAt(s,index);
};
var flixel_util_UnicodeBuffer = {};
flixel_util_UnicodeBuffer._new = function(s) {
	if(s == null) {
		s = "";
	}
	var this1 = s;
	return this1;
};
flixel_util_UnicodeBuffer.addChar = function(this1,c) {
	var s = this1 + String.fromCodePoint(c);
	if(s == null) {
		s = "";
	}
	var this1 = s;
	return this1;
};
flixel_util_UnicodeBuffer.toString = function(this1) {
	return this1;
};
var flixel_util_FlxVerticalAlign = $hxEnums["flixel.util.FlxVerticalAlign"] = { __ename__ : "flixel.util.FlxVerticalAlign", __constructs__ : ["TOP","CENTER","BOTTOM"]
	,TOP: {_hx_index:0,__enum__:"flixel.util.FlxVerticalAlign",toString:$estr}
	,CENTER: {_hx_index:1,__enum__:"flixel.util.FlxVerticalAlign",toString:$estr}
	,BOTTOM: {_hx_index:2,__enum__:"flixel.util.FlxVerticalAlign",toString:$estr}
};
flixel_util_FlxVerticalAlign.__empty_constructs__ = [flixel_util_FlxVerticalAlign.TOP,flixel_util_FlxVerticalAlign.CENTER,flixel_util_FlxVerticalAlign.BOTTOM];
var flixel_util_helpers_FlxRange = function(start,end) {
	this.active = true;
	this.start = start;
	this.end = end == null ? start : end;
};
$hxClasses["flixel.util.helpers.FlxRange"] = flixel_util_helpers_FlxRange;
flixel_util_helpers_FlxRange.__name__ = "flixel.util.helpers.FlxRange";
flixel_util_helpers_FlxRange.prototype = {
	start: null
	,end: null
	,active: null
	,set: function(start,end) {
		this.start = start;
		this.end = end == null ? start : end;
		return this;
	}
	,equals: function(OtherFlxRange) {
		if(this.start == OtherFlxRange.start) {
			return this.end == OtherFlxRange.end;
		} else {
			return false;
		}
	}
	,toString: function() {
		var value = this.start;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "start";
		_this.value = value;
		var value = this.end;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "end";
		_this1.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1]);
	}
	,__class__: flixel_util_helpers_FlxRange
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : "haxe.StackItem", __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
haxe_StackItem.__empty_constructs__ = [haxe_StackItem.CFunction];
var haxe_CallStack = {};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
haxe_CallStack.exceptionStack = function(fullStack) {
	if(fullStack == null) {
		fullStack = false;
	}
	var eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
	return fullStack ? eStack : haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	var _g1 = stack;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.subtract = function(this1,stack) {
	var startIndex = -1;
	var i = -1;
	while(++i < this1.length) {
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var j = _g++;
			if(haxe_CallStack.equalItems(this1[i],stack[j])) {
				if(startIndex < 0) {
					startIndex = i;
				}
				++i;
				if(i >= this1.length) {
					break;
				}
			} else {
				startIndex = -1;
			}
		}
		if(startIndex >= 0) {
			break;
		}
	}
	if(startIndex >= 0) {
		return this1.slice(0,startIndex);
	} else {
		return this1;
	}
};
haxe_CallStack.equalItems = function(item1,item2) {
	if(item1 == null) {
		if(item2 == null) {
			return true;
		} else {
			return false;
		}
	} else {
		switch(item1._hx_index) {
		case 0:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 1) {
				var m1 = item1.m;
				var m2 = item2.m;
				return m1 == m2;
			} else {
				return false;
			}
			break;
		case 2:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 2) {
				var item11 = item1.s;
				var file1 = item1.file;
				var line1 = item1.line;
				var col1 = item1.column;
				var col2 = item2.column;
				var line2 = item2.line;
				var file2 = item2.file;
				var item21 = item2.s;
				if(file1 == file2 && line1 == line2 && col1 == col2) {
					return haxe_CallStack.equalItems(item11,item21);
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 3:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 3) {
				var class1 = item1.classname;
				var method1 = item1.method;
				var method2 = item2.method;
				var class2 = item2.classname;
				if(class1 == class2) {
					return method1 == method2;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 4) {
				var v1 = item1.v;
				var v2 = item2.v;
				return v1 == v2;
			} else {
				return false;
			}
			break;
		}
	}
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var col = s.column;
		var line = s.line;
		var file = s.file;
		var s1 = s.s;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s.method;
		var cname = s.classname;
		b.b += Std.string(cname == null ? "<unknown>" : cname);
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
	this.__skipStack = 0;
	var old = Error.prepareStackTrace;
	Error.prepareStackTrace = function(e) { return e.stack; }
	if(((native) instanceof Error)) {
		this.stack = native.stack;
	} else {
		var e = null;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,haxe_Exception);
			e = this;
		} else {
			e = new Error();
			if(typeof(e.stack) == "undefined") {
				try { throw e; } catch(_) {}
				this.__skipStack++;
			}
		}
		this.stack = e.stack;
	}
	Error.prepareStackTrace = old;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		e.__skipStack++;
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,unwrap: function() {
		return this.__nativeException;
	}
	,__shiftStack: function() {
		this.__skipStack++;
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,get_stack: function() {
		var _g = this.__exceptionStack;
		if(_g == null) {
			var value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			var s = _g;
			return s;
		}
	}
	,setProperty: function(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	,__class__: haxe_Exception
	,__properties__: {get_native:"get_native",get_stack:"get_stack",get_message:"get_message"}
});
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_NativeStackTrace = function() { };
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.lastError = null;
haxe_NativeStackTrace.wrapCallSite = null;
haxe_NativeStackTrace.saveStack = function(e) {
	haxe_NativeStackTrace.lastError = e;
};
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.exceptionStack = function() {
	return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = "haxe.Resource";
haxe_Resource.content = null;
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = "haxe.Serializer";
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var x = this.shash.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		this.shash.h[s] = this.scount++;
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g = 0;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v1 = v;
			if(isNaN(v1)) {
				this.buf.b += "k";
			} else if(!isFinite(v1)) {
				this.buf.b += v1 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v1 == null ? "null" : "" + v1;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = v.__name__;
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(v.__ename__);
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw haxe_Exception.thrown("Cannot serialize function");
		case 6:
			var c = _g.c;
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v1 = v;
				var k = v1.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v1.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_List:
				this.buf.b += "l";
				var v1 = v;
				var _g_head = v1.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i = val;
					this.serialize(i);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v1 = v;
				var k = v1.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					var id = Reflect.field(k1,"__id__");
					Reflect.deleteField(k1,"__id__");
					this.serialize(k1);
					k1["__id__"] = id;
					this.serialize(v1.h[k1.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v1 = v;
				var k = haxe_ds_StringMap.keysIterator(v1.h);
				while(k.hasNext()) {
					var k1 = k.next();
					this.serializeString(k1);
					this.serialize(v1.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v1 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v1.length * 8 / 6));
				this.buf.b += ":";
				var i = 0;
				var max = v1.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var this1 = new Array(haxe_Serializer.BASE64.length);
					b64 = this1;
					var _g1 = 0;
					var _g2 = haxe_Serializer.BASE64.length;
					while(_g1 < _g2) {
						var i1 = _g1++;
						b64[i1] = HxOverrides.cca(haxe_Serializer.BASE64,i1);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i < max) {
					var b1 = v1.b[i++];
					var b2 = v1.b[i++];
					var b3 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCodePoint(b64[b3 & 63]);
				}
				if(i == max) {
					var b1 = v1.b[i++];
					var b2 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[b2 << 2 & 63]);
				} else if(i == max + 1) {
					var b1 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[b1 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g.e;
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(e.__ename__);
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v._hx_index);
			} else {
				var e = v;
				this.serializeString($hxEnums[e.__enum__].__constructs__[e._hx_index]);
			}
			this.buf.b += ":";
			var params = Type.enumParameters(v);
			this.buf.b += Std.string(params.length);
			var _g = 0;
			while(_g < params.length) {
				var p = params[_g];
				++_g;
				this.serialize(p);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw haxe_Exception.thrown("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = new Date().getTime() / 1000;
	var r = f();
	haxe_Log.trace(new Date().getTime() / 1000 - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,setResolver: function(r) {
		if(r == null) {
			if(haxe__$Unserializer_NullResolver.instance == null) {
				haxe__$Unserializer_NullResolver.instance = new haxe__$Unserializer_NullResolver();
			}
			this.resolver = haxe__$Unserializer_NullResolver.instance;
		} else {
			this.resolver = r;
		}
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw haxe_Exception.thrown("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw haxe_Exception.thrown("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw haxe_Exception.thrown("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			return cl;
		case 66:
			var name = this.unserialize();
			var e = this.resolver.resolveEnum(name);
			if(e == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			return e;
		case 67:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw haxe_Exception.thrown("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw haxe_Exception.thrown("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				h.h[s] = value;
			}
			this.pos++;
			return h;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw haxe_Exception.thrown("Unknown enum index " + name + "@" + index);
			}
			var e = this.unserializeEnum(edecl,tag);
			this.cache.push(e);
			return e;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 112:
			return Infinity;
		case 113:
			var h = new haxe_ds_IntMap();
			this.cache.push(h);
			var buf = this.buf;
			var c = this.buf.charCodeAt(this.pos++);
			while(c == 58) {
				var i = this.readDigits();
				var value = this.unserialize();
				h.h[i] = value;
				c = this.buf.charCodeAt(this.pos++);
			}
			if(c != 104) {
				throw haxe_Exception.thrown("Invalid IntMap format");
			}
			return h;
		case 114:
			var n = this.readDigits();
			if(n < 0 || n >= this.cache.length) {
				throw haxe_Exception.thrown("Invalid reference");
			}
			return this.cache[n];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i < max) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c1 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c1 << 2 | c2 >> 4) & 255;
				if(rest == 3) {
					var c3 = codes[buf.charCodeAt(i++)];
					bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 120:
			throw haxe_Exception.thrown(this.unserialize());
		case 121:
			var len = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid string length");
			}
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe__$Unserializer_NullResolver = function() {
};
$hxClasses["haxe._Unserializer.NullResolver"] = haxe__$Unserializer_NullResolver;
haxe__$Unserializer_NullResolver.__name__ = "haxe._Unserializer.NullResolver";
haxe__$Unserializer_NullResolver.instance = null;
haxe__$Unserializer_NullResolver.prototype = {
	resolveClass: function(name) {
		return null;
	}
	,resolveEnum: function(name) {
		return null;
	}
	,__class__: haxe__$Unserializer_NullResolver
};
var haxe_Utf8 = function() { };
$hxClasses["haxe.Utf8"] = haxe_Utf8;
haxe_Utf8.__name__ = "haxe.Utf8";
haxe_Utf8.iter = function(s,chars) {
	var _g = 0;
	var _g1 = s.length;
	while(_g < _g1) {
		var i = _g++;
		chars(HxOverrides.cca(s,i));
	}
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
	this.__skipStack++;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	a1: null
	,a2: null
	,update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.iteratorLoop = function(node,acc) {
	if(node != null) {
		haxe_ds_BalancedTree.iteratorLoop(node.left,acc);
		acc.push(node.value);
		haxe_ds_BalancedTree.iteratorLoop(node.right,acc);
	}
};
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				return false;
			} else {
				throw _g;
			}
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		haxe_ds_BalancedTree.iteratorLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw haxe_Exception.thrown("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw haxe_Exception.thrown("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
$hxClasses["haxe.ds.GenericCell"] = haxe_ds_GenericCell;
haxe_ds_GenericCell.__name__ = "haxe.ds.GenericCell";
haxe_ds_GenericCell.prototype = {
	elt: null
	,next: null
	,__class__: haxe_ds_GenericCell
};
var haxe_ds_GenericStack = function() {
};
$hxClasses["haxe.ds.GenericStack"] = haxe_ds_GenericStack;
haxe_ds_GenericStack.__name__ = "haxe.ds.GenericStack";
haxe_ds_GenericStack.prototype = {
	head: null
	,__class__: haxe_ds_GenericStack
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["haxe.ds._List.ListIterator"] = haxe_ds__$List_ListIterator;
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.valueIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return h[keys[idx - 1]];
	}};
};
haxe_ds_StringMap.kvIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		var k = keys[idx - 1];
		return { key : k, value : h[k]};
	}};
};
haxe_ds_StringMap.stringify = function(h) {
	var s = "{";
	var first = true;
	for (var key in h) {
		if (first) first = false; else s += ',';
		s += key + ' => ' + Std.string(h[key]);
	}
	return s + "}";
};
haxe_ds_StringMap.prototype = {
	h: null
	,exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	,get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,remove: function(key) {
		if(Object.prototype.hasOwnProperty.call(this.h,key)) {
			delete(this.h[key]);
			return true;
		} else {
			return false;
		}
	}
	,keys: function() {
		return haxe_ds_StringMap.keysIterator(this.h);
	}
	,iterator: function() {
		return haxe_ds_StringMap.valueIterator(this.h);
	}
	,keyValueIterator: function() {
		return haxe_ds_StringMap.kvIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	buffer: null
	,view: null
	,u8: null
	,pos: null
	,size: null
	,addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	bigEndian: null
	,readByte: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,readByte: function() {
		if(this.len == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : "haxe.io.Encoding", __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__empty_constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : "haxe.io.Error", __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.i32ToFloat = function(i) {
	haxe_io_FPHelper.helper.setInt32(0,i,true);
	return haxe_io_FPHelper.helper.getFloat32(0,true);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	haxe_io_FPHelper.helper.setFloat32(0,f,true);
	return haxe_io_FPHelper.helper.getInt32(0,true);
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	haxe_io_FPHelper.helper.setFloat64(0,v,true);
	i64.low = haxe_io_FPHelper.helper.getInt32(0,true);
	i64.high = haxe_io_FPHelper.helper.getInt32(4,true);
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.withoutDirectory = function(path) {
	var s = new haxe_io_Path(path);
	s.dir = null;
	return s.toString();
};
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	map: null
	,keys: null
	,hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var haxe_xml__$Access_NodeAccess = {};
haxe_xml__$Access_NodeAccess.resolve = function(this1,name) {
	var x = this1.elementsNamed(name).next();
	if(x == null) {
		var xname;
		if(this1.nodeType == Xml.Document) {
			xname = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			xname = this1.nodeName;
		}
		throw haxe_Exception.thrown(xname + " is missing element " + name);
	}
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
	}
	var this1 = x;
	return this1;
};
var haxe_xml__$Access_AttribAccess = {};
haxe_xml__$Access_AttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	var v = this1.get(name);
	if(v == null) {
		if(this1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
		}
		throw haxe_Exception.thrown(this1.nodeName + " is missing attribute " + name);
	}
	return v;
};
var haxe_xml__$Access_HasAttribAccess = {};
haxe_xml__$Access_HasAttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	return this1.exists(name);
};
var haxe_xml__$Access_HasNodeAccess = {};
haxe_xml__$Access_HasNodeAccess.resolve = function(this1,name) {
	return this1.elementsNamed(name).hasNext();
};
var haxe_xml__$Access_NodeListAccess = {};
haxe_xml__$Access_NodeListAccess.resolve = function(this1,name) {
	var l = [];
	var x = this1.elementsNamed(name);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1.nodeType != Xml.Document && x1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (x1.nodeType == null ? "null" : XmlType.toString(x1.nodeType)));
		}
		var this1 = x1;
		l.push(this1);
	}
	return l;
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	message: null
	,lineNumber: null
	,positionAtLine: null
	,position: null
	,xml: null
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.b += Std.string("&" + s + ";");
				} else {
					buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
			}
			throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len = p - start;
		buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	output: null
	,pretty: null
	,writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _g_current = 0;
			var _g_array = value.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var haxe_zip_ExtraField = $hxEnums["haxe.zip.ExtraField"] = { __ename__ : "haxe.zip.ExtraField", __constructs__ : ["FUnknown","FInfoZipUnicodePath","FUtf8"]
	,FUnknown: ($_=function(tag,bytes) { return {_hx_index:0,tag:tag,bytes:bytes,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_.__params__ = ["tag","bytes"],$_)
	,FInfoZipUnicodePath: ($_=function(name,crc) { return {_hx_index:1,name:name,crc:crc,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_.__params__ = ["name","crc"],$_)
	,FUtf8: {_hx_index:2,__enum__:"haxe.zip.ExtraField",toString:$estr}
};
haxe_zip_ExtraField.__empty_constructs__ = [haxe_zip_ExtraField.FUtf8];
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__ : "haxe.zip.Huffman", __constructs__ : ["Found","NeedBit","NeedBits"]
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["n","table"],$_)
};
haxe_zip_Huffman.__empty_constructs__ = [];
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			var _g = t.i;
			return 0;
		case 1:
			var b = t.right;
			var a = t.left;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			var _g = t.table;
			var _g = t.n;
			throw haxe_Exception.thrown("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var b = t.right;
				var a = t.left;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var b = t.right;
			var a = t.left;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var p = lengths[i + pos];
			if(p >= maxbits) {
				throw haxe_Exception.thrown("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g = 1;
		var _g1 = maxbits - 1;
		while(_g < _g1) {
			var i = _g++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var l = lengths[i + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	buffer: null
	,pos: null
	,crc: null
	,slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__ : "haxe.zip._InflateImpl.State", __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"]
	,Head: {_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
haxe_zip__$InflateImpl_State.__empty_constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.prototype = {
	nbits: null
	,bits: null
	,state: null
	,isFinal: null
	,huffman: null
	,huffdist: null
	,htools: null
	,len: null
	,dist: null
	,needed: null
	,output: null
	,outpos: null
	,input: null
	,lengths: null
	,window: null
	,buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var b = h.right;
			var a = h.left;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h.table;
			var n = h.n;
			return this.applyHuffman(tbl[this.getBits(n)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw haxe_Exception.thrown("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw haxe_Exception.thrown("Invalid data");
			}
			if(fdict) {
				throw haxe_Exception.thrown("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g = hclen;
				var _g1 = 19;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g = 0;
				var _g1 = hlit + hdist;
				while(_g < _g1) {
					var i = _g++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw haxe_Exception.thrown("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen);
				this.len -= rlen;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen);
			this.len -= rlen;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Reader = function(i) {
	this.i = i;
};
$hxClasses["haxe.zip.Reader"] = haxe_zip_Reader;
haxe_zip_Reader.__name__ = "haxe.zip.Reader";
haxe_zip_Reader.readZip = function(i) {
	var r = new haxe_zip_Reader(i);
	return r.read();
};
haxe_zip_Reader.unzip = function(f) {
	if(!f.compressed) {
		return f.data;
	}
	throw haxe_Exception.thrown("No uncompress support");
};
haxe_zip_Reader.prototype = {
	i: null
	,readZipDate: function() {
		var t = this.i.readUInt16();
		var hour = t >> 11 & 31;
		var min = t >> 5 & 63;
		var sec = t & 31;
		var d = this.i.readUInt16();
		var year = d >> 9;
		var month = d >> 5 & 15;
		var day = d & 31;
		return new Date(year + 1980,month - 1,day,hour,min,sec << 1);
	}
	,readExtraFields: function(length) {
		var fields = new haxe_ds_List();
		while(length > 0) {
			if(length < 4) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			var tag = this.i.readUInt16();
			var len = this.i.readUInt16();
			if(length < len) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			if(tag == 28789) {
				var version = this.i.readByte();
				if(version != 1) {
					var data = new haxe_io_BytesBuffer();
					data.addByte(version);
					data.add(this.i.read(len - 1));
					fields.add(haxe_zip_ExtraField.FUnknown(tag,data.getBytes()));
				} else {
					var crc = this.i.readInt32();
					var name = this.i.read(len - 5).toString();
					fields.add(haxe_zip_ExtraField.FInfoZipUnicodePath(name,crc));
				}
			} else {
				fields.add(haxe_zip_ExtraField.FUnknown(tag,this.i.read(len)));
			}
			length -= 4 + len;
		}
		return fields;
	}
	,readEntryHeader: function() {
		var i = this.i;
		var h = i.readInt32();
		if(h == 33639248 || h == 101010256) {
			return null;
		}
		if(h != 67324752) {
			throw haxe_Exception.thrown("Invalid Zip Data");
		}
		var version = i.readUInt16();
		var flags = i.readUInt16();
		var utf8 = (flags & 2048) != 0;
		var compression = i.readUInt16();
		var compressed = compression != 0;
		if(compressed && compression != 8) {
			throw haxe_Exception.thrown("Unsupported compression " + compression);
		}
		var mtime = this.readZipDate();
		var crc32 = i.readInt32();
		var csize = i.readInt32();
		var usize = i.readInt32();
		var fnamelen = i.readInt16();
		var elen = i.readInt16();
		var fname = i.readString(fnamelen);
		var fields = this.readExtraFields(elen);
		if(utf8) {
			fields.push(haxe_zip_ExtraField.FUtf8);
		}
		var data = null;
		if((flags & 8) != 0) {
			csize = -1;
		}
		return { fileName : fname, fileSize : usize, fileTime : mtime, compressed : compressed, dataSize : csize, data : data, crc32 : crc32, extraFields : fields};
	}
	,read: function() {
		var l = new haxe_ds_List();
		var buf = null;
		var tmp = null;
		while(true) {
			var e = this.readEntryHeader();
			if(e == null) {
				break;
			}
			if(e.dataSize < 0) {
				var bufSize = 65536;
				if(tmp == null) {
					tmp = new haxe_io_Bytes(new ArrayBuffer(bufSize));
				}
				var out = new haxe_io_BytesBuffer();
				var z = new haxe_zip_InflateImpl(this.i,false,false);
				while(true) {
					var n = z.readBytes(tmp,0,bufSize);
					out.addBytes(tmp,0,n);
					if(n < bufSize) {
						break;
					}
				}
				e.data = out.getBytes();
				e.crc32 = this.i.readInt32();
				if(e.crc32 == 134695760) {
					e.crc32 = this.i.readInt32();
				}
				e.dataSize = this.i.readInt32();
				e.fileSize = this.i.readInt32();
				e.dataSize = e.fileSize;
				e.compressed = false;
			} else {
				e.data = this.i.read(e.dataSize);
			}
			l.add(e);
		}
		return l;
	}
	,__class__: haxe_zip_Reader
};
var hscript_Const = $hxEnums["hscript.Const"] = { __ename__ : "hscript.Const", __constructs__ : ["CInt","CFloat","CString"]
	,CInt: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hscript.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
	,CFloat: ($_=function(f) { return {_hx_index:1,f:f,__enum__:"hscript.Const",toString:$estr}; },$_.__params__ = ["f"],$_)
	,CString: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"hscript.Const",toString:$estr}; },$_.__params__ = ["s"],$_)
};
hscript_Const.__empty_constructs__ = [];
var hscript_Expr = $hxEnums["hscript.Expr"] = { __ename__ : "hscript.Expr", __constructs__ : ["EConst","EIdent","EVar","EParent","EBlock","EField","EBinop","EUnop","ECall","EIf","EWhile","EFor","EBreak","EContinue","EFunction","EReturn","EArray","EArrayDecl","ENew","EThrow","ETry","EObject","ETernary","ESwitch","EDoWhile","EMeta","ECheckType"]
	,EConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["c"],$_)
	,EIdent: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["v"],$_)
	,EVar: ($_=function(n,t,e) { return {_hx_index:2,n:n,t:t,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["n","t","e"],$_)
	,EParent: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EBlock: ($_=function(e) { return {_hx_index:4,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EField: ($_=function(e,f) { return {_hx_index:5,e:e,f:f,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","f"],$_)
	,EBinop: ($_=function(op,e1,e2) { return {_hx_index:6,op:op,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["op","e1","e2"],$_)
	,EUnop: ($_=function(op,prefix,e) { return {_hx_index:7,op:op,prefix:prefix,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["op","prefix","e"],$_)
	,ECall: ($_=function(e,params) { return {_hx_index:8,e:e,params:params,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","params"],$_)
	,EIf: ($_=function(cond,e1,e2) { return {_hx_index:9,cond:cond,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cond","e1","e2"],$_)
	,EWhile: ($_=function(cond,e) { return {_hx_index:10,cond:cond,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cond","e"],$_)
	,EFor: ($_=function(v,it,e) { return {_hx_index:11,v:v,it:it,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["v","it","e"],$_)
	,EBreak: {_hx_index:12,__enum__:"hscript.Expr",toString:$estr}
	,EContinue: {_hx_index:13,__enum__:"hscript.Expr",toString:$estr}
	,EFunction: ($_=function(args,e,name,ret) { return {_hx_index:14,args:args,e:e,name:name,ret:ret,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["args","e","name","ret"],$_)
	,EReturn: ($_=function(e) { return {_hx_index:15,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EArray: ($_=function(e,index) { return {_hx_index:16,e:e,index:index,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","index"],$_)
	,EArrayDecl: ($_=function(e) { return {_hx_index:17,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,ENew: ($_=function(cl,params) { return {_hx_index:18,cl:cl,params:params,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cl","params"],$_)
	,EThrow: ($_=function(e) { return {_hx_index:19,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,ETry: ($_=function(e,v,t,ecatch) { return {_hx_index:20,e:e,v:v,t:t,ecatch:ecatch,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","v","t","ecatch"],$_)
	,EObject: ($_=function(fl) { return {_hx_index:21,fl:fl,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["fl"],$_)
	,ETernary: ($_=function(cond,e1,e2) { return {_hx_index:22,cond:cond,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cond","e1","e2"],$_)
	,ESwitch: ($_=function(e,cases,defaultExpr) { return {_hx_index:23,e:e,cases:cases,defaultExpr:defaultExpr,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","cases","defaultExpr"],$_)
	,EDoWhile: ($_=function(cond,e) { return {_hx_index:24,cond:cond,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cond","e"],$_)
	,EMeta: ($_=function(name,args,e) { return {_hx_index:25,name:name,args:args,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["name","args","e"],$_)
	,ECheckType: ($_=function(e,t) { return {_hx_index:26,e:e,t:t,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","t"],$_)
};
hscript_Expr.__empty_constructs__ = [hscript_Expr.EBreak,hscript_Expr.EContinue];
var hscript_CType = $hxEnums["hscript.CType"] = { __ename__ : "hscript.CType", __constructs__ : ["CTPath","CTFun","CTAnon","CTParent","CTOpt","CTNamed"]
	,CTPath: ($_=function(path,params) { return {_hx_index:0,path:path,params:params,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["path","params"],$_)
	,CTFun: ($_=function(args,ret) { return {_hx_index:1,args:args,ret:ret,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["args","ret"],$_)
	,CTAnon: ($_=function(fields) { return {_hx_index:2,fields:fields,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["fields"],$_)
	,CTParent: ($_=function(t) { return {_hx_index:3,t:t,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["t"],$_)
	,CTOpt: ($_=function(t) { return {_hx_index:4,t:t,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["t"],$_)
	,CTNamed: ($_=function(n,t) { return {_hx_index:5,n:n,t:t,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["n","t"],$_)
};
hscript_CType.__empty_constructs__ = [];
var hscript_Error = $hxEnums["hscript.Error"] = { __ename__ : "hscript.Error", __constructs__ : ["EInvalidChar","EUnexpected","EUnterminatedString","EUnterminatedComment","EInvalidPreprocessor","EUnknownVariable","EInvalidIterator","EInvalidOp","EInvalidAccess","ECustom"]
	,EInvalidChar: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["c"],$_)
	,EUnexpected: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["s"],$_)
	,EUnterminatedString: {_hx_index:2,__enum__:"hscript.Error",toString:$estr}
	,EUnterminatedComment: {_hx_index:3,__enum__:"hscript.Error",toString:$estr}
	,EInvalidPreprocessor: ($_=function(msg) { return {_hx_index:4,msg:msg,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["msg"],$_)
	,EUnknownVariable: ($_=function(v) { return {_hx_index:5,v:v,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["v"],$_)
	,EInvalidIterator: ($_=function(v) { return {_hx_index:6,v:v,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["v"],$_)
	,EInvalidOp: ($_=function(op) { return {_hx_index:7,op:op,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["op"],$_)
	,EInvalidAccess: ($_=function(f) { return {_hx_index:8,f:f,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["f"],$_)
	,ECustom: ($_=function(msg) { return {_hx_index:9,msg:msg,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["msg"],$_)
};
hscript_Error.__empty_constructs__ = [hscript_Error.EUnterminatedString,hscript_Error.EUnterminatedComment];
var hscript_ModuleDecl = $hxEnums["hscript.ModuleDecl"] = { __ename__ : "hscript.ModuleDecl", __constructs__ : ["DPackage","DImport","DClass","DTypedef"]
	,DPackage: ($_=function(path) { return {_hx_index:0,path:path,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_.__params__ = ["path"],$_)
	,DImport: ($_=function(path,everything) { return {_hx_index:1,path:path,everything:everything,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_.__params__ = ["path","everything"],$_)
	,DClass: ($_=function(c) { return {_hx_index:2,c:c,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_.__params__ = ["c"],$_)
	,DTypedef: ($_=function(c) { return {_hx_index:3,c:c,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_.__params__ = ["c"],$_)
};
hscript_ModuleDecl.__empty_constructs__ = [];
var hscript_FieldAccess = $hxEnums["hscript.FieldAccess"] = { __ename__ : "hscript.FieldAccess", __constructs__ : ["APublic","APrivate","AInline","AOverride","AStatic","AMacro"]
	,APublic: {_hx_index:0,__enum__:"hscript.FieldAccess",toString:$estr}
	,APrivate: {_hx_index:1,__enum__:"hscript.FieldAccess",toString:$estr}
	,AInline: {_hx_index:2,__enum__:"hscript.FieldAccess",toString:$estr}
	,AOverride: {_hx_index:3,__enum__:"hscript.FieldAccess",toString:$estr}
	,AStatic: {_hx_index:4,__enum__:"hscript.FieldAccess",toString:$estr}
	,AMacro: {_hx_index:5,__enum__:"hscript.FieldAccess",toString:$estr}
};
hscript_FieldAccess.__empty_constructs__ = [hscript_FieldAccess.APublic,hscript_FieldAccess.APrivate,hscript_FieldAccess.AInline,hscript_FieldAccess.AOverride,hscript_FieldAccess.AStatic,hscript_FieldAccess.AMacro];
var hscript_FieldKind = $hxEnums["hscript.FieldKind"] = { __ename__ : "hscript.FieldKind", __constructs__ : ["KFunction","KVar"]
	,KFunction: ($_=function(f) { return {_hx_index:0,f:f,__enum__:"hscript.FieldKind",toString:$estr}; },$_.__params__ = ["f"],$_)
	,KVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hscript.FieldKind",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hscript_FieldKind.__empty_constructs__ = [];
var hscript__$Interp_Stop = $hxEnums["hscript._Interp.Stop"] = { __ename__ : "hscript._Interp.Stop", __constructs__ : ["SBreak","SContinue","SReturn"]
	,SBreak: {_hx_index:0,__enum__:"hscript._Interp.Stop",toString:$estr}
	,SContinue: {_hx_index:1,__enum__:"hscript._Interp.Stop",toString:$estr}
	,SReturn: {_hx_index:2,__enum__:"hscript._Interp.Stop",toString:$estr}
};
hscript__$Interp_Stop.__empty_constructs__ = [hscript__$Interp_Stop.SBreak,hscript__$Interp_Stop.SContinue,hscript__$Interp_Stop.SReturn];
var hscript_Token = $hxEnums["hscript.Token"] = { __ename__ : "hscript.Token", __constructs__ : ["TEof","TConst","TId","TOp","TPOpen","TPClose","TBrOpen","TBrClose","TDot","TComma","TSemicolon","TBkOpen","TBkClose","TQuestion","TDoubleDot","TMeta","TPrepro"]
	,TEof: {_hx_index:0,__enum__:"hscript.Token",toString:$estr}
	,TConst: ($_=function(c) { return {_hx_index:1,c:c,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TId: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TOp: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TPOpen: {_hx_index:4,__enum__:"hscript.Token",toString:$estr}
	,TPClose: {_hx_index:5,__enum__:"hscript.Token",toString:$estr}
	,TBrOpen: {_hx_index:6,__enum__:"hscript.Token",toString:$estr}
	,TBrClose: {_hx_index:7,__enum__:"hscript.Token",toString:$estr}
	,TDot: {_hx_index:8,__enum__:"hscript.Token",toString:$estr}
	,TComma: {_hx_index:9,__enum__:"hscript.Token",toString:$estr}
	,TSemicolon: {_hx_index:10,__enum__:"hscript.Token",toString:$estr}
	,TBkOpen: {_hx_index:11,__enum__:"hscript.Token",toString:$estr}
	,TBkClose: {_hx_index:12,__enum__:"hscript.Token",toString:$estr}
	,TQuestion: {_hx_index:13,__enum__:"hscript.Token",toString:$estr}
	,TDoubleDot: {_hx_index:14,__enum__:"hscript.Token",toString:$estr}
	,TMeta: ($_=function(s) { return {_hx_index:15,s:s,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TPrepro: ($_=function(s) { return {_hx_index:16,s:s,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
};
hscript_Token.__empty_constructs__ = [hscript_Token.TEof,hscript_Token.TPOpen,hscript_Token.TPClose,hscript_Token.TBrOpen,hscript_Token.TBrClose,hscript_Token.TDot,hscript_Token.TComma,hscript_Token.TSemicolon,hscript_Token.TBkOpen,hscript_Token.TBkClose,hscript_Token.TQuestion,hscript_Token.TDoubleDot];
var hscript_Parser = function() {
	this.uid = 0;
	this.preprocesorValues = new haxe_ds_StringMap();
	this.line = 1;
	this.opChars = "+*/-=!><&|^%~";
	this.identChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";
	var priorities = [["%"],["*","/"],["+","-"],["<<",">>",">>>"],["|","&","^"],["==","!=",">","<",">=","<="],["..."],["&&"],["||"],["=","+=","-=","*=","/=","%=","<<=",">>=",">>>=","|=","&=","^=","=>"]];
	this.opPriority = new haxe_ds_StringMap();
	this.opRightAssoc = new haxe_ds_StringMap();
	this.unops = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = priorities.length;
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g3 = priorities[i];
		while(_g2 < _g3.length) {
			var x = _g3[_g2];
			++_g2;
			this.opPriority.h[x] = i;
			if(i == 9) {
				this.opRightAssoc.h[x] = true;
			}
		}
	}
	var x = "!";
	this.unops.h[x] = x == "++" || x == "--";
	var x = "++";
	this.unops.h[x] = x == "++" || x == "--";
	var x = "--";
	this.unops.h[x] = x == "++" || x == "--";
	var x = "-";
	this.unops.h[x] = x == "++" || x == "--";
	var x = "~";
	this.unops.h[x] = x == "++" || x == "--";
};
$hxClasses["hscript.Parser"] = hscript_Parser;
hscript_Parser.__name__ = "hscript.Parser";
hscript_Parser.prototype = {
	line: null
	,opChars: null
	,identChars: null
	,opPriority: null
	,opRightAssoc: null
	,unops: null
	,preprocesorValues: null
	,allowJSON: null
	,allowTypes: null
	,allowMetadata: null
	,resumeErrors: null
	,input: null
	,readPos: null
	,char: null
	,ops: null
	,idents: null
	,uid: null
	,tokens: null
	,error: function(err,pmin,pmax) {
		if(!this.resumeErrors) {
			throw haxe_Exception.thrown(err);
		}
	}
	,invalidChar: function(c) {
		if(!this.resumeErrors) {
			throw haxe_Exception.thrown(hscript_Error.EInvalidChar(c));
		}
	}
	,initParser: function(origin) {
		this.preprocStack = [];
		this.tokens = new haxe_ds_GenericStack();
		this.char = -1;
		this.ops = [];
		this.idents = [];
		this.uid = 0;
		var _g = 0;
		var _g1 = this.opChars.length;
		while(_g < _g1) {
			var i = _g++;
			this.ops[HxOverrides.cca(this.opChars,i)] = true;
		}
		var _g = 0;
		var _g1 = this.identChars.length;
		while(_g < _g1) {
			var i = _g++;
			this.idents[HxOverrides.cca(this.identChars,i)] = true;
		}
	}
	,parseString: function(s,origin) {
		if(origin == null) {
			origin = "hscript";
		}
		this.initParser(origin);
		this.input = s;
		this.readPos = 0;
		var a = [];
		while(true) {
			var tk = this.token();
			if(tk == hscript_Token.TEof) {
				break;
			}
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			this.parseFullExpr(a);
		}
		if(a.length == 1) {
			return a[0];
		} else {
			return hscript_Expr.EBlock(a);
		}
	}
	,unexpected: function(tk) {
		var err = hscript_Error.EUnexpected(this.tokenString(tk));
		if(!this.resumeErrors) {
			throw haxe_Exception.thrown(err);
		}
		return null;
	}
	,push: function(tk) {
		var _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(tk,_this.head);
	}
	,ensure: function(tk) {
		var t = this.token();
		if(t != tk) {
			this.unexpected(t);
		}
	}
	,ensureToken: function(tk) {
		var t = this.token();
		if(!Type.enumEq(t,tk)) {
			this.unexpected(t);
		}
	}
	,maybe: function(tk) {
		var t = this.token();
		if(Type.enumEq(t,tk)) {
			return true;
		}
		var _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(t,_this.head);
		return false;
	}
	,getIdent: function() {
		var tk = this.token();
		if(tk == null) {
			this.unexpected(tk);
			return null;
		} else if(tk._hx_index == 2) {
			var id = tk.s;
			return id;
		} else {
			this.unexpected(tk);
			return null;
		}
	}
	,expr: function(e) {
		return e;
	}
	,pmin: function(e) {
		return 0;
	}
	,pmax: function(e) {
		return 0;
	}
	,mk: function(e,pmin,pmax) {
		return e;
	}
	,isBlock: function(e) {
		if(e == null) {
			return false;
		}
		switch(e._hx_index) {
		case 2:
			var _g = e.n;
			var e1 = e.e;
			var t = e.t;
			if(e1 != null) {
				return this.isBlock(e1);
			} else if(t != null) {
				if(t == null) {
					return false;
				} else if(t._hx_index == 2) {
					var _g = t.fields;
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			var _g = e.e;
			return true;
		case 6:
			var _g = e.e1;
			var _g = e.op;
			var e1 = e.e2;
			return this.isBlock(e1);
		case 7:
			var _g = e.op;
			var e1 = e.e;
			var prefix = e.prefix;
			if(!prefix) {
				return this.isBlock(e1);
			} else {
				return false;
			}
			break;
		case 9:
			var _g = e.cond;
			var e2 = e.e2;
			var e1 = e.e1;
			if(e2 != null) {
				return this.isBlock(e2);
			} else {
				return this.isBlock(e1);
			}
			break;
		case 10:
			var _g = e.cond;
			var e1 = e.e;
			return this.isBlock(e1);
		case 11:
			var _g = e.it;
			var _g = e.v;
			var e1 = e.e;
			return this.isBlock(e1);
		case 14:
			var _g = e.ret;
			var _g = e.name;
			var _g = e.args;
			var e1 = e.e;
			return this.isBlock(e1);
		case 15:
			var e1 = e.e;
			if(e1 != null) {
				return this.isBlock(e1);
			} else {
				return false;
			}
			break;
		case 20:
			var _g = e.t;
			var _g = e.v;
			var _g = e.e;
			var e1 = e.ecatch;
			return this.isBlock(e1);
		case 21:
			var _g = e.fl;
			return true;
		case 23:
			var _g = e.defaultExpr;
			var _g = e.cases;
			var _g = e.e;
			return true;
		case 24:
			var _g = e.cond;
			var e1 = e.e;
			return this.isBlock(e1);
		case 25:
			var _g = e.args;
			var _g = e.name;
			var e1 = e.e;
			return this.isBlock(e1);
		default:
			return false;
		}
	}
	,parseFullExpr: function(exprs) {
		var e = this.parseExpr();
		exprs.push(e);
		var tk = this.token();
		while(true) {
			var tmp;
			if(tk == hscript_Token.TComma && e != null) {
				if(e._hx_index == 2) {
					var _g = e.e;
					var _g1 = e.t;
					var _g2 = e.n;
					tmp = true;
				} else {
					tmp = false;
				}
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			e = this.parseStructure("var");
			exprs.push(e);
			tk = this.token();
		}
		if(tk != hscript_Token.TSemicolon && tk != hscript_Token.TEof) {
			if(this.isBlock(e)) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			} else {
				this.unexpected(tk);
			}
		}
	}
	,parseObject: function(p1) {
		var fl = [];
		_hx_loop1: while(true) {
			var tk = this.token();
			var id = null;
			if(tk == null) {
				this.unexpected(tk);
				break;
			} else {
				switch(tk._hx_index) {
				case 1:
					var c = tk.c;
					if(!this.allowJSON) {
						this.unexpected(tk);
					}
					if(c._hx_index == 2) {
						var s = c.s;
						id = s;
					} else {
						this.unexpected(tk);
					}
					break;
				case 2:
					var i = tk.s;
					id = i;
					break;
				case 7:
					break _hx_loop1;
				default:
					this.unexpected(tk);
					break _hx_loop1;
				}
			}
			var t = this.token();
			if(t != hscript_Token.TDoubleDot) {
				this.unexpected(t);
			}
			fl.push({ name : id, e : this.parseExpr()});
			tk = this.token();
			if(tk == null) {
				this.unexpected(tk);
			} else {
				switch(tk._hx_index) {
				case 7:
					break _hx_loop1;
				case 9:
					break;
				default:
					this.unexpected(tk);
				}
			}
		}
		return this.parseExprNext(hscript_Expr.EObject(fl));
	}
	,parseExpr: function() {
		var tk = this.token();
		if(tk == null) {
			return this.unexpected(tk);
		} else {
			switch(tk._hx_index) {
			case 1:
				var c = tk.c;
				return this.parseExprNext(hscript_Expr.EConst(c));
			case 2:
				var id = tk.s;
				var e = this.parseStructure(id);
				if(e == null) {
					e = hscript_Expr.EIdent(id);
				}
				return this.parseExprNext(e);
			case 3:
				var op = tk.s;
				if(Object.prototype.hasOwnProperty.call(this.unops.h,op)) {
					var start = 0;
					var e = this.parseExpr();
					if(op == "-" && e != null) {
						if(e._hx_index == 0) {
							var _g = e.c;
							switch(_g._hx_index) {
							case 0:
								var i = _g.v;
								return hscript_Expr.EConst(hscript_Const.CInt(-i));
							case 1:
								var f = _g.f;
								return hscript_Expr.EConst(hscript_Const.CFloat(-f));
							default:
							}
						}
					}
					return this.makeUnop(op,e);
				}
				return this.unexpected(tk);
			case 4:
				var e = this.parseExpr();
				tk = this.token();
				if(tk != null) {
					switch(tk._hx_index) {
					case 5:
						return this.parseExprNext(hscript_Expr.EParent(e));
					case 9:
						if(e._hx_index == 1) {
							var v = e.v;
							return this.parseLambda([{ name : v}],0);
						}
						break;
					case 14:
						var t = this.parseType();
						tk = this.token();
						if(tk != null) {
							switch(tk._hx_index) {
							case 5:
								return this.parseExprNext(hscript_Expr.ECheckType(e,t));
							case 9:
								if(e._hx_index == 1) {
									var v = e.v;
									return this.parseLambda([{ name : v, t : t}],0);
								}
								break;
							default:
							}
						}
						break;
					default:
					}
				}
				return this.unexpected(tk);
			case 6:
				tk = this.token();
				if(tk == null) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(tk,_this.head);
				} else {
					switch(tk._hx_index) {
					case 1:
						var c = tk.c;
						if(this.allowJSON) {
							if(c._hx_index == 2) {
								var _g = c.s;
								var tk2 = this.token();
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk2,_this.head);
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk,_this.head);
								if(tk2 != null) {
									if(tk2._hx_index == 14) {
										return this.parseExprNext(this.parseObject(0));
									}
								}
							} else {
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk,_this.head);
							}
						} else {
							var _this = this.tokens;
							_this.head = new haxe_ds_GenericCell(tk,_this.head);
						}
						break;
					case 2:
						var _g = tk.s;
						var tk2 = this.token();
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk2,_this.head);
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk,_this.head);
						if(tk2 != null) {
							if(tk2._hx_index == 14) {
								return this.parseExprNext(this.parseObject(0));
							}
						}
						break;
					case 7:
						return this.parseExprNext(hscript_Expr.EObject([]));
					default:
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk,_this.head);
					}
				}
				var a = [];
				while(true) {
					this.parseFullExpr(a);
					tk = this.token();
					if(tk == hscript_Token.TBrClose || this.resumeErrors && tk == hscript_Token.TEof) {
						break;
					}
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(tk,_this.head);
				}
				return hscript_Expr.EBlock(a);
			case 11:
				var a = [];
				tk = this.token();
				while(tk != hscript_Token.TBkClose && (!this.resumeErrors || tk != hscript_Token.TEof)) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(tk,_this.head);
					a.push(this.parseExpr());
					tk = this.token();
					if(tk == hscript_Token.TComma) {
						tk = this.token();
					}
				}
				if(a.length == 1 && a[0] != null) {
					var _g = a[0];
					switch(_g._hx_index) {
					case 10:
						var _g1 = _g.e;
						var _g1 = _g.cond;
						var tmp = "__a_" + this.uid++;
						var e = hscript_Expr.EBlock([hscript_Expr.EVar(tmp,null,hscript_Expr.EArrayDecl([])),this.mapCompr(tmp,a[0]),hscript_Expr.EIdent(tmp)]);
						return this.parseExprNext(e);
					case 11:
						var _g1 = _g.e;
						var _g1 = _g.it;
						var _g1 = _g.v;
						var tmp = "__a_" + this.uid++;
						var e = hscript_Expr.EBlock([hscript_Expr.EVar(tmp,null,hscript_Expr.EArrayDecl([])),this.mapCompr(tmp,a[0]),hscript_Expr.EIdent(tmp)]);
						return this.parseExprNext(e);
					case 24:
						var _g1 = _g.e;
						var _g1 = _g.cond;
						var tmp = "__a_" + this.uid++;
						var e = hscript_Expr.EBlock([hscript_Expr.EVar(tmp,null,hscript_Expr.EArrayDecl([])),this.mapCompr(tmp,a[0]),hscript_Expr.EIdent(tmp)]);
						return this.parseExprNext(e);
					default:
					}
				}
				return this.parseExprNext(hscript_Expr.EArrayDecl(a));
			case 15:
				var id = tk.s;
				if(this.allowMetadata) {
					var args = this.parseMetaArgs();
					return hscript_Expr.EMeta(id,args,this.parseExpr());
				} else {
					return this.unexpected(tk);
				}
				break;
			default:
				return this.unexpected(tk);
			}
		}
	}
	,parseLambda: function(args,pmin) {
		_hx_loop1: while(true) {
			var id = this.getIdent();
			var t = this.maybe(hscript_Token.TDoubleDot) ? this.parseType() : null;
			args.push({ name : id, t : t});
			var tk = this.token();
			if(tk == null) {
				this.unexpected(tk);
				break;
			} else {
				switch(tk._hx_index) {
				case 5:
					break _hx_loop1;
				case 9:
					break;
				default:
					this.unexpected(tk);
					break _hx_loop1;
				}
			}
		}
		var t = this.token();
		if(!Type.enumEq(t,hscript_Token.TOp("->"))) {
			this.unexpected(t);
		}
		var eret = this.parseExpr();
		return hscript_Expr.EFunction(args,hscript_Expr.EReturn(eret));
	}
	,parseMetaArgs: function() {
		var tk = this.token();
		if(tk != hscript_Token.TPOpen) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return null;
		}
		var args = [];
		tk = this.token();
		if(tk != hscript_Token.TPClose) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			_hx_loop1: while(true) {
				args.push(this.parseExpr());
				var _g = this.token();
				if(_g == null) {
					var tk = _g;
					this.unexpected(tk);
				} else {
					switch(_g._hx_index) {
					case 5:
						break _hx_loop1;
					case 9:
						break;
					default:
						var tk1 = _g;
						this.unexpected(tk1);
					}
				}
			}
		}
		return args;
	}
	,mapCompr: function(tmp,e) {
		if(e == null) {
			return null;
		}
		var edef;
		switch(e._hx_index) {
		case 3:
			var e2 = e.e;
			edef = hscript_Expr.EParent(this.mapCompr(tmp,e2));
			break;
		case 4:
			var _g = e.e;
			if(_g.length == 1) {
				var e1 = _g[0];
				edef = hscript_Expr.EBlock([this.mapCompr(tmp,e1)]);
			} else {
				edef = hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
			}
			break;
		case 9:
			var e2 = e.e2;
			var e1 = e.e1;
			var cond = e.cond;
			edef = e2 == null ? hscript_Expr.EIf(cond,this.mapCompr(tmp,e1),null) : hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
			break;
		case 10:
			var e2 = e.e;
			var cond = e.cond;
			edef = hscript_Expr.EWhile(cond,this.mapCompr(tmp,e2));
			break;
		case 11:
			var e2 = e.e;
			var it = e.it;
			var v = e.v;
			edef = hscript_Expr.EFor(v,it,this.mapCompr(tmp,e2));
			break;
		case 24:
			var e2 = e.e;
			var cond = e.cond;
			edef = hscript_Expr.EDoWhile(cond,this.mapCompr(tmp,e2));
			break;
		default:
			edef = hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
		}
		return edef;
	}
	,makeUnop: function(op,e) {
		if(e == null && this.resumeErrors) {
			return null;
		}
		switch(e._hx_index) {
		case 6:
			var e2 = e.e2;
			var e1 = e.e1;
			var bop = e.op;
			return hscript_Expr.EBinop(bop,this.makeUnop(op,e1),e2);
		case 22:
			var e3 = e.e2;
			var e2 = e.e1;
			var e1 = e.cond;
			return hscript_Expr.ETernary(this.makeUnop(op,e1),e2,e3);
		default:
			return hscript_Expr.EUnop(op,true,e);
		}
	}
	,makeBinop: function(op,e1,e) {
		if(e == null && this.resumeErrors) {
			return hscript_Expr.EBinop(op,e1,e);
		}
		switch(e._hx_index) {
		case 6:
			var e3 = e.e2;
			var e2 = e.e1;
			var op2 = e.op;
			if(this.opPriority.h[op] <= this.opPriority.h[op2] && !Object.prototype.hasOwnProperty.call(this.opRightAssoc.h,op)) {
				return hscript_Expr.EBinop(op2,this.makeBinop(op,e1,e2),e3);
			} else {
				return hscript_Expr.EBinop(op,e1,e);
			}
			break;
		case 22:
			var e4 = e.e2;
			var e3 = e.e1;
			var e2 = e.cond;
			if(Object.prototype.hasOwnProperty.call(this.opRightAssoc.h,op)) {
				return hscript_Expr.EBinop(op,e1,e);
			} else {
				return hscript_Expr.ETernary(this.makeBinop(op,e1,e2),e3,e4);
			}
			break;
		default:
			return hscript_Expr.EBinop(op,e1,e);
		}
	}
	,parseStructure: function(id) {
		switch(id) {
		case "break":
			return hscript_Expr.EBreak;
		case "continue":
			return hscript_Expr.EContinue;
		case "do":
			var e = this.parseExpr();
			var tk = this.token();
			if(tk == null) {
				this.unexpected(tk);
			} else if(tk._hx_index == 2) {
				if(tk.s != "while") {
					this.unexpected(tk);
				}
			} else {
				this.unexpected(tk);
			}
			var econd = this.parseExpr();
			return hscript_Expr.EDoWhile(econd,e);
		case "else":
			return this.unexpected(hscript_Token.TId(id));
		case "for":
			var t = this.token();
			if(t != hscript_Token.TPOpen) {
				this.unexpected(t);
			}
			var vname = this.getIdent();
			var t = this.token();
			if(!Type.enumEq(t,hscript_Token.TId("in"))) {
				this.unexpected(t);
			}
			var eiter = this.parseExpr();
			var t = this.token();
			if(t != hscript_Token.TPClose) {
				this.unexpected(t);
			}
			var e = this.parseExpr();
			return hscript_Expr.EFor(vname,eiter,e);
		case "function":
			var tk = this.token();
			var name = null;
			if(tk == null) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			} else if(tk._hx_index == 2) {
				var id = tk.s;
				name = id;
			} else {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			}
			var inf = this.parseFunctionDecl();
			return hscript_Expr.EFunction(inf.args,inf.body,name,inf.ret);
		case "if":
			var t = this.token();
			if(t != hscript_Token.TPOpen) {
				this.unexpected(t);
			}
			var cond = this.parseExpr();
			var t = this.token();
			if(t != hscript_Token.TPClose) {
				this.unexpected(t);
			}
			var e1 = this.parseExpr();
			var e2 = null;
			var semic = false;
			var tk = this.token();
			if(tk == hscript_Token.TSemicolon) {
				semic = true;
				tk = this.token();
			}
			if(Type.enumEq(tk,hscript_Token.TId("else"))) {
				e2 = this.parseExpr();
			} else {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				if(semic) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(hscript_Token.TSemicolon,_this.head);
				}
			}
			return hscript_Expr.EIf(cond,e1,e2);
		case "inline":
			if(!this.maybe(hscript_Token.TId("function"))) {
				this.unexpected(hscript_Token.TId("inline"));
			}
			return this.parseStructure("function");
		case "new":
			var a = [];
			a.push(this.getIdent());
			_hx_loop1: while(true) {
				var tk = this.token();
				if(tk == null) {
					this.unexpected(tk);
					break;
				} else {
					switch(tk._hx_index) {
					case 4:
						break _hx_loop1;
					case 8:
						a.push(this.getIdent());
						break;
					default:
						this.unexpected(tk);
						break _hx_loop1;
					}
				}
			}
			var args = this.parseExprList(hscript_Token.TPClose);
			return hscript_Expr.ENew(a.join("."),args);
		case "return":
			var tk = this.token();
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			var e = tk == hscript_Token.TSemicolon ? null : this.parseExpr();
			return hscript_Expr.EReturn(e);
		case "switch":
			var e = this.parseExpr();
			var def = null;
			var cases = [];
			var t = this.token();
			if(t != hscript_Token.TBrOpen) {
				this.unexpected(t);
			}
			_hx_loop2: while(true) {
				var tk = this.token();
				if(tk == null) {
					this.unexpected(tk);
					break;
				} else {
					switch(tk._hx_index) {
					case 2:
						switch(tk.s) {
						case "case":
							var c = { values : [], expr : null};
							cases.push(c);
							_hx_loop3: while(true) {
								var e1 = this.parseExpr();
								c.values.push(e1);
								tk = this.token();
								if(tk == null) {
									this.unexpected(tk);
									break;
								} else {
									switch(tk._hx_index) {
									case 9:
										break;
									case 14:
										break _hx_loop3;
									default:
										this.unexpected(tk);
										break _hx_loop3;
									}
								}
							}
							var exprs = [];
							_hx_loop4: while(true) {
								tk = this.token();
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk,_this.head);
								if(tk == null) {
									this.parseFullExpr(exprs);
								} else {
									switch(tk._hx_index) {
									case 0:
										if(this.resumeErrors) {
											break _hx_loop4;
										} else {
											this.parseFullExpr(exprs);
										}
										break;
									case 2:
										switch(tk.s) {
										case "case":case "default":
											break _hx_loop4;
										default:
											this.parseFullExpr(exprs);
										}
										break;
									case 7:
										break _hx_loop4;
									default:
										this.parseFullExpr(exprs);
									}
								}
							}
							c.expr = exprs.length == 1 ? exprs[0] : exprs.length == 0 ? hscript_Expr.EBlock([]) : hscript_Expr.EBlock(exprs);
							break;
						case "default":
							if(def != null) {
								this.unexpected(tk);
							}
							var t = this.token();
							if(t != hscript_Token.TDoubleDot) {
								this.unexpected(t);
							}
							var exprs1 = [];
							_hx_loop5: while(true) {
								tk = this.token();
								var _this1 = this.tokens;
								_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
								if(tk == null) {
									this.parseFullExpr(exprs1);
								} else {
									switch(tk._hx_index) {
									case 0:
										if(this.resumeErrors) {
											break _hx_loop5;
										} else {
											this.parseFullExpr(exprs1);
										}
										break;
									case 2:
										switch(tk.s) {
										case "case":case "default":
											break _hx_loop5;
										default:
											this.parseFullExpr(exprs1);
										}
										break;
									case 7:
										break _hx_loop5;
									default:
										this.parseFullExpr(exprs1);
									}
								}
							}
							def = exprs1.length == 1 ? exprs1[0] : exprs1.length == 0 ? hscript_Expr.EBlock([]) : hscript_Expr.EBlock(exprs1);
							break;
						default:
							this.unexpected(tk);
							break _hx_loop2;
						}
						break;
					case 7:
						break _hx_loop2;
					default:
						this.unexpected(tk);
						break _hx_loop2;
					}
				}
			}
			return hscript_Expr.ESwitch(e,cases,def);
		case "throw":
			var e = this.parseExpr();
			return hscript_Expr.EThrow(e);
		case "try":
			var e = this.parseExpr();
			var t = this.token();
			if(!Type.enumEq(t,hscript_Token.TId("catch"))) {
				this.unexpected(t);
			}
			var t = this.token();
			if(t != hscript_Token.TPOpen) {
				this.unexpected(t);
			}
			var vname = this.getIdent();
			var t = this.token();
			if(t != hscript_Token.TDoubleDot) {
				this.unexpected(t);
			}
			var t = null;
			if(this.allowTypes) {
				t = this.parseType();
			} else {
				var t1 = this.token();
				if(!Type.enumEq(t1,hscript_Token.TId("Dynamic"))) {
					this.unexpected(t1);
				}
			}
			var t1 = this.token();
			if(t1 != hscript_Token.TPClose) {
				this.unexpected(t1);
			}
			var ec = this.parseExpr();
			return hscript_Expr.ETry(e,vname,t,ec);
		case "var":
			var ident = this.getIdent();
			var tk = this.token();
			var t = null;
			if(tk == hscript_Token.TDoubleDot && this.allowTypes) {
				t = this.parseType();
				tk = this.token();
			}
			var e = null;
			if(Type.enumEq(tk,hscript_Token.TOp("="))) {
				e = this.parseExpr();
			} else {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			}
			return hscript_Expr.EVar(ident,t,e);
		case "while":
			var econd = this.parseExpr();
			var e = this.parseExpr();
			return hscript_Expr.EWhile(econd,e);
		default:
			return null;
		}
	}
	,parseExprNext: function(e1) {
		var tk = this.token();
		if(tk == null) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return e1;
		} else {
			switch(tk._hx_index) {
			case 3:
				var op = tk.s;
				if(op == "->") {
					switch(e1._hx_index) {
					case 1:
						var i = e1.v;
						var eret = this.parseExpr();
						return hscript_Expr.EFunction([{ name : i}],hscript_Expr.EReturn(eret));
					case 3:
						var _hx_tmp = e1.e;
						if(_hx_tmp._hx_index == 1) {
							var i = _hx_tmp.v;
							var eret = this.parseExpr();
							return hscript_Expr.EFunction([{ name : i}],hscript_Expr.EReturn(eret));
						}
						break;
					case 26:
						var _hx_tmp = e1.e;
						if(_hx_tmp._hx_index == 1) {
							var t = e1.t;
							var i = _hx_tmp.v;
							var eret = this.parseExpr();
							return hscript_Expr.EFunction([{ name : i, t : t}],hscript_Expr.EReturn(eret));
						}
						break;
					default:
					}
					this.unexpected(tk);
				}
				if(this.unops.h[op]) {
					var tmp;
					if(!this.isBlock(e1)) {
						if(e1._hx_index == 3) {
							var _g = e1.e;
							tmp = true;
						} else {
							tmp = false;
						}
					} else {
						tmp = true;
					}
					if(tmp) {
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk,_this.head);
						return e1;
					}
					return this.parseExprNext(hscript_Expr.EUnop(op,false,e1));
				}
				return this.makeBinop(op,e1,this.parseExpr());
			case 4:
				return this.parseExprNext(hscript_Expr.ECall(e1,this.parseExprList(hscript_Token.TPClose)));
			case 8:
				var field = this.getIdent();
				return this.parseExprNext(hscript_Expr.EField(e1,field));
			case 11:
				var e2 = this.parseExpr();
				var t = this.token();
				if(t != hscript_Token.TBkClose) {
					this.unexpected(t);
				}
				return this.parseExprNext(hscript_Expr.EArray(e1,e2));
			case 13:
				var e2 = this.parseExpr();
				var t = this.token();
				if(t != hscript_Token.TDoubleDot) {
					this.unexpected(t);
				}
				var e3 = this.parseExpr();
				return hscript_Expr.ETernary(e1,e2,e3);
			default:
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				return e1;
			}
		}
	}
	,parseFunctionArgs: function() {
		var args = [];
		var tk = this.token();
		if(tk != hscript_Token.TPClose) {
			var done = false;
			while(!done) {
				var name = null;
				var opt = false;
				if(tk != null) {
					if(tk._hx_index == 13) {
						opt = true;
						tk = this.token();
					}
				}
				if(tk == null) {
					this.unexpected(tk);
					break;
				} else if(tk._hx_index == 2) {
					var id = tk.s;
					name = id;
				} else {
					this.unexpected(tk);
					break;
				}
				var arg = { name : name};
				args.push(arg);
				if(opt) {
					arg.opt = true;
				}
				if(this.allowTypes) {
					if(this.maybe(hscript_Token.TDoubleDot)) {
						arg.t = this.parseType();
					}
					if(this.maybe(hscript_Token.TOp("="))) {
						arg.value = this.parseExpr();
					}
				}
				tk = this.token();
				if(tk == null) {
					this.unexpected(tk);
				} else {
					switch(tk._hx_index) {
					case 5:
						done = true;
						break;
					case 9:
						tk = this.token();
						break;
					default:
						this.unexpected(tk);
					}
				}
			}
		}
		return args;
	}
	,parseFunctionDecl: function() {
		var t = this.token();
		if(t != hscript_Token.TPOpen) {
			this.unexpected(t);
		}
		var args = this.parseFunctionArgs();
		var ret = null;
		if(this.allowTypes) {
			var tk = this.token();
			if(tk != hscript_Token.TDoubleDot) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			} else {
				ret = this.parseType();
			}
		}
		return { args : args, ret : ret, body : this.parseExpr()};
	}
	,parsePath: function() {
		var path = [this.getIdent()];
		while(true) {
			var t = this.token();
			if(t != hscript_Token.TDot) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(t,_this.head);
				break;
			}
			path.push(this.getIdent());
		}
		return path;
	}
	,parseType: function() {
		var _gthis = this;
		var t = this.token();
		if(t == null) {
			return this.unexpected(t);
		} else {
			switch(t._hx_index) {
			case 2:
				var v = t.s;
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(t,_this.head);
				var path = this.parsePath();
				var params = null;
				t = this.token();
				if(t == null) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
				} else if(t._hx_index == 3) {
					var op = t.s;
					if(op == "<") {
						params = [];
						_hx_loop1: while(true) {
							params.push(this.parseType());
							t = this.token();
							if(t != null) {
								switch(t._hx_index) {
								case 3:
									var op = t.s;
									if(op == ">") {
										break _hx_loop1;
									}
									if(HxOverrides.cca(op,0) == 62) {
										var _this = this.tokens;
										_this.head = new haxe_ds_GenericCell(hscript_Token.TOp(HxOverrides.substr(op,1,null)),_this.head);
										break _hx_loop1;
									}
									break;
								case 9:
									continue;
								default:
								}
							}
							this.unexpected(t);
							break;
						}
					} else {
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(t,_this.head);
					}
				} else {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
				}
				return this.parseTypeNext(hscript_CType.CTPath(path,params));
			case 4:
				var a = this.token();
				var b = this.token();
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(b,_this.head);
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(a,_this.head);
				var withReturn = function(args) {
					var _g = _gthis.token();
					if(_g == null) {
						var t = _g;
						_gthis.unexpected(t);
					} else if(_g._hx_index == 3) {
						if(_g.s != "->") {
							var t = _g;
							_gthis.unexpected(t);
						}
					} else {
						var t = _g;
						_gthis.unexpected(t);
					}
					return hscript_CType.CTFun(args,_gthis.parseType());
				};
				if(a == null) {
					var t1 = this.parseType();
					var _g = this.token();
					if(_g == null) {
						var t2 = _g;
						return this.unexpected(t2);
					} else {
						switch(_g._hx_index) {
						case 5:
							return this.parseTypeNext(hscript_CType.CTParent(t1));
						case 9:
							var args = [t1];
							while(true) {
								args.push(this.parseType());
								if(!this.maybe(hscript_Token.TComma)) {
									break;
								}
							}
							var t1 = this.token();
							if(t1 != hscript_Token.TPClose) {
								this.unexpected(t1);
							}
							return withReturn(args);
						default:
							var t1 = _g;
							return this.unexpected(t1);
						}
					}
				} else {
					switch(a._hx_index) {
					case 2:
						var _g = a.s;
						if(b == null) {
							var t1 = this.parseType();
							var _g = this.token();
							if(_g == null) {
								var t2 = _g;
								return this.unexpected(t2);
							} else {
								switch(_g._hx_index) {
								case 5:
									return this.parseTypeNext(hscript_CType.CTParent(t1));
								case 9:
									var args = [t1];
									while(true) {
										args.push(this.parseType());
										if(!this.maybe(hscript_Token.TComma)) {
											break;
										}
									}
									var t1 = this.token();
									if(t1 != hscript_Token.TPClose) {
										this.unexpected(t1);
									}
									return withReturn(args);
								default:
									var t1 = _g;
									return this.unexpected(t1);
								}
							}
						} else if(b._hx_index == 14) {
							var _g = [];
							var _g1 = 0;
							var _g2 = this.parseFunctionArgs();
							while(_g1 < _g2.length) {
								var arg = _g2[_g1];
								++_g1;
								var _g3 = arg.value;
								if(_g3 != null) {
									var v = _g3;
									if(!this.resumeErrors) {
										throw haxe_Exception.thrown(hscript_Error.ECustom("Default values not allowed in function types"));
									}
								}
								_g.push(hscript_CType.CTNamed(arg.name,arg.opt ? hscript_CType.CTOpt(arg.t) : arg.t));
							}
							var args = _g;
							return withReturn(args);
						} else {
							var t1 = this.parseType();
							var _g = this.token();
							if(_g == null) {
								var t2 = _g;
								return this.unexpected(t2);
							} else {
								switch(_g._hx_index) {
								case 5:
									return this.parseTypeNext(hscript_CType.CTParent(t1));
								case 9:
									var args = [t1];
									while(true) {
										args.push(this.parseType());
										if(!this.maybe(hscript_Token.TComma)) {
											break;
										}
									}
									var t1 = this.token();
									if(t1 != hscript_Token.TPClose) {
										this.unexpected(t1);
									}
									return withReturn(args);
								default:
									var t1 = _g;
									return this.unexpected(t1);
								}
							}
						}
						break;
					case 5:
						var _g = [];
						var _g1 = 0;
						var _g2 = this.parseFunctionArgs();
						while(_g1 < _g2.length) {
							var arg = _g2[_g1];
							++_g1;
							var _g3 = arg.value;
							if(_g3 != null) {
								var v = _g3;
								if(!this.resumeErrors) {
									throw haxe_Exception.thrown(hscript_Error.ECustom("Default values not allowed in function types"));
								}
							}
							_g.push(hscript_CType.CTNamed(arg.name,arg.opt ? hscript_CType.CTOpt(arg.t) : arg.t));
						}
						var args = _g;
						return withReturn(args);
					default:
						var t1 = this.parseType();
						var _g = this.token();
						if(_g == null) {
							var t2 = _g;
							return this.unexpected(t2);
						} else {
							switch(_g._hx_index) {
							case 5:
								return this.parseTypeNext(hscript_CType.CTParent(t1));
							case 9:
								var args = [t1];
								while(true) {
									args.push(this.parseType());
									if(!this.maybe(hscript_Token.TComma)) {
										break;
									}
								}
								var t1 = this.token();
								if(t1 != hscript_Token.TPClose) {
									this.unexpected(t1);
								}
								return withReturn(args);
							default:
								var t1 = _g;
								return this.unexpected(t1);
							}
						}
					}
				}
				break;
			case 6:
				var fields = [];
				var meta = null;
				_hx_loop8: while(true) {
					t = this.token();
					if(t == null) {
						this.unexpected(t);
						break;
					} else {
						switch(t._hx_index) {
						case 2:
							var _g = t.s;
							if(_g == "var") {
								var name = this.getIdent();
								var t1 = this.token();
								if(t1 != hscript_Token.TDoubleDot) {
									this.unexpected(t1);
								}
								fields.push({ name : name, t : this.parseType(), meta : meta});
								meta = null;
								var t2 = this.token();
								if(t2 != hscript_Token.TSemicolon) {
									this.unexpected(t2);
								}
							} else {
								var name1 = _g;
								var t3 = this.token();
								if(t3 != hscript_Token.TDoubleDot) {
									this.unexpected(t3);
								}
								fields.push({ name : name1, t : this.parseType(), meta : meta});
								t = this.token();
								if(t == null) {
									this.unexpected(t);
								} else {
									switch(t._hx_index) {
									case 7:
										break _hx_loop8;
									case 9:
										break;
									default:
										this.unexpected(t);
									}
								}
							}
							break;
						case 7:
							break _hx_loop8;
						case 15:
							var name2 = t.s;
							if(meta == null) {
								meta = [];
							}
							meta.push({ name : name2, params : this.parseMetaArgs()});
							break;
						default:
							this.unexpected(t);
							break _hx_loop8;
						}
					}
				}
				return this.parseTypeNext(hscript_CType.CTAnon(fields));
			default:
				return this.unexpected(t);
			}
		}
	}
	,parseTypeNext: function(t) {
		var tk = this.token();
		if(tk == null) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return t;
		} else if(tk._hx_index == 3) {
			var op = tk.s;
			if(op != "->") {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				return t;
			}
		} else {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return t;
		}
		var t2 = this.parseType();
		if(t2._hx_index == 1) {
			var _g = t2.ret;
			var args = t2.args;
			args.unshift(t);
			return t2;
		} else {
			return hscript_CType.CTFun([t],t2);
		}
	}
	,parseExprList: function(etk) {
		var args = [];
		var tk = this.token();
		if(tk == etk) {
			return args;
		}
		var _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(tk,_this.head);
		while(true) {
			args.push(this.parseExpr());
			tk = this.token();
			if(tk == null) {
				if(tk == etk) {
					break;
				}
				this.unexpected(tk);
				break;
			} else if(tk._hx_index != 9) {
				if(tk == etk) {
					break;
				}
				this.unexpected(tk);
				break;
			}
		}
		return args;
	}
	,parseModule: function(content,origin) {
		if(origin == null) {
			origin = "hscript";
		}
		this.initParser(origin);
		this.input = content;
		this.readPos = 0;
		this.allowTypes = true;
		this.allowMetadata = true;
		var decls = [];
		while(true) {
			var tk = this.token();
			if(tk == hscript_Token.TEof) {
				break;
			}
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			decls.push(this.parseModuleDecl());
		}
		return decls;
	}
	,parseMetadata: function() {
		var meta = [];
		while(true) {
			var tk = this.token();
			if(tk == null) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				break;
			} else if(tk._hx_index == 15) {
				var name = tk.s;
				meta.push({ name : name, params : this.parseMetaArgs()});
			} else {
				var _this1 = this.tokens;
				_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
				break;
			}
		}
		return meta;
	}
	,parseParams: function() {
		if(this.maybe(hscript_Token.TOp("<"))) {
			if(!this.resumeErrors) {
				throw haxe_Exception.thrown(hscript_Error.EInvalidOp("Unsupported class type parameters"));
			}
		}
		return { };
	}
	,parseModuleDecl: function() {
		var meta = this.parseMetadata();
		var ident = this.getIdent();
		var isPrivate = false;
		var isExtern = false;
		_hx_loop1: while(true) {
			switch(ident) {
			case "extern":
				isExtern = true;
				break;
			case "private":
				isPrivate = true;
				break;
			default:
				break _hx_loop1;
			}
			ident = this.getIdent();
		}
		switch(ident) {
		case "class":
			var name = this.getIdent();
			var params = this.parseParams();
			var extend = null;
			var implement = [];
			_hx_loop2: while(true) {
				var t = this.token();
				if(t == null) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
					break;
				} else if(t._hx_index == 2) {
					switch(t.s) {
					case "extends":
						extend = this.parseType();
						break;
					case "implements":
						implement.push(this.parseType());
						break;
					default:
						var _this1 = this.tokens;
						_this1.head = new haxe_ds_GenericCell(t,_this1.head);
						break _hx_loop2;
					}
				} else {
					var _this2 = this.tokens;
					_this2.head = new haxe_ds_GenericCell(t,_this2.head);
					break;
				}
			}
			var fields = [];
			var t = this.token();
			if(t != hscript_Token.TBrOpen) {
				this.unexpected(t);
			}
			while(!this.maybe(hscript_Token.TBrClose)) fields.push(this.parseField());
			return hscript_ModuleDecl.DClass({ name : name, meta : meta, params : params, extend : extend, implement : implement, fields : fields, isPrivate : isPrivate, isExtern : isExtern});
		case "import":
			var path = [this.getIdent()];
			var star = false;
			while(true) {
				var t = this.token();
				if(t != hscript_Token.TDot) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
					break;
				}
				t = this.token();
				if(t == null) {
					this.unexpected(t);
				} else {
					switch(t._hx_index) {
					case 2:
						var id = t.s;
						path.push(id);
						break;
					case 3:
						if(t.s == "*") {
							star = true;
						} else {
							this.unexpected(t);
						}
						break;
					default:
						this.unexpected(t);
					}
				}
			}
			var t = this.token();
			if(t != hscript_Token.TSemicolon) {
				this.unexpected(t);
			}
			return hscript_ModuleDecl.DImport(path,star);
		case "package":
			var path = this.parsePath();
			var t = this.token();
			if(t != hscript_Token.TSemicolon) {
				this.unexpected(t);
			}
			return hscript_ModuleDecl.DPackage(path);
		case "typedef":
			var name = this.getIdent();
			var params = this.parseParams();
			var t = this.token();
			if(!Type.enumEq(t,hscript_Token.TOp("="))) {
				this.unexpected(t);
			}
			var t = this.parseType();
			return hscript_ModuleDecl.DTypedef({ name : name, meta : meta, params : params, isPrivate : isPrivate, t : t});
		default:
			this.unexpected(hscript_Token.TId(ident));
		}
		return null;
	}
	,parseField: function() {
		var meta = this.parseMetadata();
		var access = [];
		_hx_loop1: while(true) {
			var id = this.getIdent();
			switch(id) {
			case "function":
				var name = this.getIdent();
				var inf = this.parseFunctionDecl();
				return { name : name, meta : meta, access : access, kind : hscript_FieldKind.KFunction({ args : inf.args, expr : inf.body, ret : inf.ret})};
			case "inline":
				access.push(hscript_FieldAccess.AInline);
				break;
			case "macro":
				access.push(hscript_FieldAccess.AMacro);
				break;
			case "override":
				access.push(hscript_FieldAccess.AOverride);
				break;
			case "private":
				access.push(hscript_FieldAccess.APrivate);
				break;
			case "public":
				access.push(hscript_FieldAccess.APublic);
				break;
			case "static":
				access.push(hscript_FieldAccess.AStatic);
				break;
			case "var":
				var name1 = this.getIdent();
				var get = null;
				var set = null;
				if(this.maybe(hscript_Token.TPOpen)) {
					get = this.getIdent();
					var t = this.token();
					if(t != hscript_Token.TComma) {
						this.unexpected(t);
					}
					set = this.getIdent();
					var t1 = this.token();
					if(t1 != hscript_Token.TPClose) {
						this.unexpected(t1);
					}
				}
				var type = this.maybe(hscript_Token.TDoubleDot) ? this.parseType() : null;
				var expr = this.maybe(hscript_Token.TOp("=")) ? this.parseExpr() : null;
				if(expr != null) {
					if(this.isBlock(expr)) {
						this.maybe(hscript_Token.TSemicolon);
					} else {
						var t2 = this.token();
						if(t2 != hscript_Token.TSemicolon) {
							this.unexpected(t2);
						}
					}
				} else {
					var tmp;
					if(type != null) {
						if(type == null) {
							tmp = false;
						} else if(type._hx_index == 2) {
							var _g = type.fields;
							tmp = true;
						} else {
							tmp = false;
						}
					} else {
						tmp = false;
					}
					if(tmp) {
						this.maybe(hscript_Token.TSemicolon);
					} else {
						var t3 = this.token();
						if(t3 != hscript_Token.TSemicolon) {
							this.unexpected(t3);
						}
					}
				}
				return { name : name1, meta : meta, access : access, kind : hscript_FieldKind.KVar({ get : get, set : set, type : type, expr : expr})};
			default:
				this.unexpected(hscript_Token.TId(id));
				break _hx_loop1;
			}
		}
		return null;
	}
	,readChar: function() {
		return this.input.charCodeAt(this.readPos++);
	}
	,readString: function(until) {
		var c = 0;
		var b_b = "";
		var esc = false;
		var old = this.line;
		var s = this.input;
		while(true) {
			var c = this.input.charCodeAt(this.readPos++);
			if(c != c) {
				this.line = old;
				if(!this.resumeErrors) {
					throw haxe_Exception.thrown(hscript_Error.EUnterminatedString);
				}
				break;
			}
			if(esc) {
				esc = false;
				switch(c) {
				case 34:case 39:case 92:
					b_b += String.fromCodePoint(c);
					break;
				case 47:
					if(this.allowJSON) {
						b_b += String.fromCodePoint(c);
					} else {
						this.invalidChar(c);
					}
					break;
				case 110:
					b_b += String.fromCodePoint(10);
					break;
				case 114:
					b_b += String.fromCodePoint(13);
					break;
				case 116:
					b_b += String.fromCodePoint(9);
					break;
				case 117:
					if(!this.allowJSON) {
						this.invalidChar(c);
					}
					var k = 0;
					var _g = 0;
					while(_g < 4) {
						var i = _g++;
						k <<= 4;
						var char = this.input.charCodeAt(this.readPos++);
						switch(char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							k += char - 48;
							break;
						case 65:case 66:case 67:case 68:case 69:case 70:
							k += char - 55;
							break;
						case 97:case 98:case 99:case 100:case 101:case 102:
							k += char - 87;
							break;
						default:
							if(char != char) {
								this.line = old;
								if(!this.resumeErrors) {
									throw haxe_Exception.thrown(hscript_Error.EUnterminatedString);
								}
							}
							this.invalidChar(char);
						}
					}
					b_b += String.fromCodePoint(k);
					break;
				default:
					this.invalidChar(c);
				}
			} else if(c == 92) {
				esc = true;
			} else if(c == until) {
				break;
			} else {
				if(c == 10) {
					this.line++;
				}
				b_b += String.fromCodePoint(c);
			}
		}
		return b_b;
	}
	,token: function() {
		if(this.tokens.head != null) {
			var _this = this.tokens;
			var k = _this.head;
			if(k == null) {
				return null;
			} else {
				_this.head = k.next;
				return k.elt;
			}
		}
		var char;
		if(this.char < 0) {
			char = this.input.charCodeAt(this.readPos++);
		} else {
			char = this.char;
			this.char = -1;
		}
		while(true) {
			if(char != char) {
				this.char = char;
				return hscript_Token.TEof;
			}
			switch(char) {
			case 0:
				return hscript_Token.TEof;
			case 10:
				this.line++;
				break;
			case 9:case 13:case 32:
				break;
			case 35:
				char = this.input.charCodeAt(this.readPos++);
				if(this.idents[char]) {
					var id = String.fromCodePoint(char);
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(!this.idents[char]) {
							this.char = char;
							return this.preprocess(id);
						}
						id += String.fromCodePoint(char);
					}
				}
				this.invalidChar(char);
				break;
			case 34:case 39:
				return hscript_Token.TConst(hscript_Const.CString(this.readString(char)));
			case 40:
				return hscript_Token.TPOpen;
			case 41:
				return hscript_Token.TPClose;
			case 44:
				return hscript_Token.TComma;
			case 46:
				char = this.input.charCodeAt(this.readPos++);
				switch(char) {
				case 46:
					char = this.input.charCodeAt(this.readPos++);
					if(char != 46) {
						this.invalidChar(char);
					}
					return hscript_Token.TOp("...");
				case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
					var n = char - 48;
					var exp = 1;
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						exp *= 10;
						switch(char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							n = n * 10 + (char - 48);
							break;
						default:
							this.char = char;
							return hscript_Token.TConst(hscript_Const.CFloat(n / exp));
						}
					}
					break;
				default:
					this.char = char;
					return hscript_Token.TDot;
				}
				break;
			case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				var n1 = (char - 48) * 1.0;
				var exp1 = 0.;
				while(true) {
					char = this.input.charCodeAt(this.readPos++);
					exp1 *= 10;
					switch(char) {
					case 46:
						if(exp1 > 0) {
							if(exp1 == 10 && this.input.charCodeAt(this.readPos++) == 46) {
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(hscript_Token.TOp("..."),_this.head);
								var i = n1 | 0;
								return hscript_Token.TConst(i == n1 ? hscript_Const.CInt(i) : hscript_Const.CFloat(n1));
							}
							this.invalidChar(char);
						}
						exp1 = 1.;
						break;
					case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						n1 = n1 * 10 + (char - 48);
						break;
					case 69:case 101:
						var tk = this.token();
						var pow = null;
						if(tk == null) {
							var _this1 = this.tokens;
							_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
						} else {
							switch(tk._hx_index) {
							case 1:
								var _g = tk.c;
								if(_g._hx_index == 0) {
									var e = _g.v;
									pow = e;
								} else {
									var _this2 = this.tokens;
									_this2.head = new haxe_ds_GenericCell(tk,_this2.head);
								}
								break;
							case 3:
								if(tk.s == "-") {
									tk = this.token();
									if(tk == null) {
										var _this3 = this.tokens;
										_this3.head = new haxe_ds_GenericCell(tk,_this3.head);
									} else if(tk._hx_index == 1) {
										var _g1 = tk.c;
										if(_g1._hx_index == 0) {
											var e1 = _g1.v;
											pow = -e1;
										} else {
											var _this4 = this.tokens;
											_this4.head = new haxe_ds_GenericCell(tk,_this4.head);
										}
									} else {
										var _this5 = this.tokens;
										_this5.head = new haxe_ds_GenericCell(tk,_this5.head);
									}
								} else {
									var _this6 = this.tokens;
									_this6.head = new haxe_ds_GenericCell(tk,_this6.head);
								}
								break;
							default:
								var _this7 = this.tokens;
								_this7.head = new haxe_ds_GenericCell(tk,_this7.head);
							}
						}
						if(pow == null) {
							this.invalidChar(char);
						}
						return hscript_Token.TConst(hscript_Const.CFloat(Math.pow(10,pow) / exp1 * n1 * 10));
					case 120:
						if(n1 > 0 || exp1 > 0) {
							this.invalidChar(char);
						}
						var n2 = 0;
						while(true) {
							char = this.input.charCodeAt(this.readPos++);
							switch(char) {
							case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
								n2 = (n2 << 4) + char - 48;
								break;
							case 65:case 66:case 67:case 68:case 69:case 70:
								n2 = (n2 << 4) + (char - 55);
								break;
							case 97:case 98:case 99:case 100:case 101:case 102:
								n2 = (n2 << 4) + (char - 87);
								break;
							default:
								this.char = char;
								return hscript_Token.TConst(hscript_Const.CInt(n2));
							}
						}
						break;
					default:
						this.char = char;
						var i1 = n1 | 0;
						return hscript_Token.TConst(exp1 > 0 ? hscript_Const.CFloat(n1 * 10 / exp1) : i1 == n1 ? hscript_Const.CInt(i1) : hscript_Const.CFloat(n1));
					}
				}
				break;
			case 58:
				return hscript_Token.TDoubleDot;
			case 59:
				return hscript_Token.TSemicolon;
			case 61:
				char = this.input.charCodeAt(this.readPos++);
				if(char == 61) {
					return hscript_Token.TOp("==");
				} else if(char == 62) {
					return hscript_Token.TOp("=>");
				}
				this.char = char;
				return hscript_Token.TOp("=");
			case 63:
				return hscript_Token.TQuestion;
			case 64:
				char = this.input.charCodeAt(this.readPos++);
				if(this.idents[char] || char == 58) {
					var id1 = String.fromCodePoint(char);
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(!this.idents[char]) {
							this.char = char;
							return hscript_Token.TMeta(id1);
						}
						id1 += String.fromCodePoint(char);
					}
				}
				this.invalidChar(char);
				break;
			case 91:
				return hscript_Token.TBkOpen;
			case 93:
				return hscript_Token.TBkClose;
			case 123:
				return hscript_Token.TBrOpen;
			case 125:
				return hscript_Token.TBrClose;
			default:
				if(this.ops[char]) {
					var op = String.fromCodePoint(char);
					var prev = -1;
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(char != char) {
							char = 0;
						}
						if(!this.ops[char] || prev == 61) {
							if(HxOverrides.cca(op,0) == 47) {
								return this.tokenComment(op,char);
							}
							this.char = char;
							return hscript_Token.TOp(op);
						}
						prev = char;
						op += String.fromCodePoint(char);
					}
				}
				if(this.idents[char]) {
					var id2 = String.fromCodePoint(char);
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(char != char) {
							char = 0;
						}
						if(!this.idents[char]) {
							this.char = char;
							return hscript_Token.TId(id2);
						}
						id2 += String.fromCodePoint(char);
					}
				}
				this.invalidChar(char);
			}
			char = this.input.charCodeAt(this.readPos++);
		}
	}
	,preprocValue: function(id) {
		return this.preprocesorValues.h[id];
	}
	,preprocStack: null
	,parsePreproCond: function() {
		var tk = this.token();
		if(tk == null) {
			return this.unexpected(tk);
		} else {
			switch(tk._hx_index) {
			case 2:
				var id = tk.s;
				return hscript_Expr.EIdent(id);
			case 3:
				if(tk.s == "!") {
					return hscript_Expr.EUnop("!",true,this.parsePreproCond());
				} else {
					return this.unexpected(tk);
				}
				break;
			case 4:
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(hscript_Token.TPOpen,_this.head);
				return this.parseExpr();
			default:
				return this.unexpected(tk);
			}
		}
	}
	,evalPreproCond: function(e) {
		switch(e._hx_index) {
		case 1:
			var id = e.v;
			return this.preprocValue(id) != null;
		case 3:
			var e1 = e.e;
			return this.evalPreproCond(e1);
		case 6:
			var _g = e.e2;
			var _g1 = e.e1;
			switch(e.op) {
			case "&&":
				var e2 = _g;
				var e1 = _g1;
				if(this.evalPreproCond(e1)) {
					return this.evalPreproCond(e2);
				} else {
					return false;
				}
				break;
			case "||":
				var e2 = _g;
				var e1 = _g1;
				if(!this.evalPreproCond(e1)) {
					return this.evalPreproCond(e2);
				} else {
					return true;
				}
				break;
			default:
				if(!this.resumeErrors) {
					throw haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor("Can't eval " + $hxEnums[e.__enum__].__constructs__[e._hx_index]));
				}
				return false;
			}
			break;
		case 7:
			var _g = e.prefix;
			if(e.op == "!") {
				var e1 = e.e;
				return !this.evalPreproCond(e1);
			} else {
				if(!this.resumeErrors) {
					throw haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor("Can't eval " + $hxEnums[e.__enum__].__constructs__[e._hx_index]));
				}
				return false;
			}
			break;
		default:
			if(!this.resumeErrors) {
				throw haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor("Can't eval " + $hxEnums[e.__enum__].__constructs__[e._hx_index]));
			}
			return false;
		}
	}
	,preprocess: function(id) {
		switch(id) {
		case "else":case "elseif":
			if(this.preprocStack.length > 0) {
				if(this.preprocStack[this.preprocStack.length - 1].r) {
					this.preprocStack[this.preprocStack.length - 1].r = false;
					this.skipTokens();
					return this.token();
				} else if(id == "else") {
					this.preprocStack.pop();
					this.preprocStack.push({ r : true});
					return this.token();
				} else {
					this.preprocStack.pop();
					return this.preprocess("if");
				}
			} else {
				return hscript_Token.TPrepro(id);
			}
			break;
		case "end":
			if(this.preprocStack.length > 0) {
				this.preprocStack.pop();
				return this.token();
			} else {
				return hscript_Token.TPrepro(id);
			}
			break;
		case "if":
			var e = this.parsePreproCond();
			if(this.evalPreproCond(e)) {
				this.preprocStack.push({ r : true});
				return this.token();
			}
			this.preprocStack.push({ r : false});
			this.skipTokens();
			return this.token();
		default:
			return hscript_Token.TPrepro(id);
		}
	}
	,skipTokens: function() {
		var spos = this.preprocStack.length - 1;
		var obj = this.preprocStack[spos];
		var pos = this.readPos;
		while(true) {
			var tk = this.token();
			if(tk == hscript_Token.TEof) {
				if(!this.resumeErrors) {
					throw haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor("Unclosed"));
				}
			}
			if(this.preprocStack[spos] != obj) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				break;
			}
		}
	}
	,tokenComment: function(op,char) {
		var c = HxOverrides.cca(op,1);
		var s = this.input;
		if(c == 47) {
			while(char != 13 && char != 10) {
				char = this.input.charCodeAt(this.readPos++);
				if(char != char) {
					break;
				}
			}
			this.char = char;
			return this.token();
		}
		if(c == 42) {
			var old = this.line;
			if(op == "/**/") {
				this.char = char;
				return this.token();
			}
			while(true) {
				while(char != 42) {
					if(char == 10) {
						this.line++;
					}
					char = this.input.charCodeAt(this.readPos++);
					if(char != char) {
						this.line = old;
						if(!this.resumeErrors) {
							throw haxe_Exception.thrown(hscript_Error.EUnterminatedComment);
						}
						break;
					}
				}
				char = this.input.charCodeAt(this.readPos++);
				if(char != char) {
					this.line = old;
					if(!this.resumeErrors) {
						throw haxe_Exception.thrown(hscript_Error.EUnterminatedComment);
					}
					break;
				}
				if(char == 47) {
					break;
				}
			}
			return this.token();
		}
		this.char = char;
		return hscript_Token.TOp(op);
	}
	,constString: function(c) {
		switch(c._hx_index) {
		case 0:
			var v = c.v;
			if(v == null) {
				return "null";
			} else {
				return "" + v;
			}
			break;
		case 1:
			var f = c.f;
			if(f == null) {
				return "null";
			} else {
				return "" + f;
			}
			break;
		case 2:
			var s = c.s;
			return s;
		}
	}
	,tokenString: function(t) {
		switch(t._hx_index) {
		case 0:
			return "<eof>";
		case 1:
			var c = t.c;
			return this.constString(c);
		case 2:
			var s = t.s;
			return s;
		case 3:
			var s = t.s;
			return s;
		case 4:
			return "(";
		case 5:
			return ")";
		case 6:
			return "{";
		case 7:
			return "}";
		case 8:
			return ".";
		case 9:
			return ",";
		case 10:
			return ";";
		case 11:
			return "[";
		case 12:
			return "]";
		case 13:
			return "?";
		case 14:
			return ":";
		case 15:
			var id = t.s;
			return "@" + id;
		case 16:
			var id = t.s;
			return "#" + id;
		}
	}
	,__class__: hscript_Parser
};
var hscript_Tools = function() { };
$hxClasses["hscript.Tools"] = hscript_Tools;
hscript_Tools.__name__ = "hscript.Tools";
hscript_Tools.iter = function(e,f) {
	switch(e._hx_index) {
	case 0:
		var _g = e.c;
		break;
	case 1:
		var _g = e.v;
		break;
	case 2:
		var _g = e.t;
		var _g = e.n;
		var e1 = e.e;
		if(e1 != null) {
			f(e1);
		}
		break;
	case 3:
		var e1 = e.e;
		f(e1);
		break;
	case 4:
		var el = e.e;
		var _g = 0;
		while(_g < el.length) {
			var e1 = el[_g];
			++_g;
			f(e1);
		}
		break;
	case 5:
		var _g = e.f;
		var e1 = e.e;
		f(e1);
		break;
	case 6:
		var _g = e.op;
		var e2 = e.e2;
		var e1 = e.e1;
		f(e1);
		f(e2);
		break;
	case 7:
		var _g = e.prefix;
		var _g = e.op;
		var e1 = e.e;
		f(e1);
		break;
	case 8:
		var args = e.params;
		var e1 = e.e;
		f(e1);
		var _g = 0;
		while(_g < args.length) {
			var a = args[_g];
			++_g;
			f(a);
		}
		break;
	case 9:
		var e2 = e.e2;
		var e1 = e.e1;
		var c = e.cond;
		f(c);
		f(e1);
		if(e2 != null) {
			f(e2);
		}
		break;
	case 10:
		var e1 = e.e;
		var c = e.cond;
		f(c);
		f(e1);
		break;
	case 11:
		var _g = e.v;
		var e1 = e.e;
		var it = e.it;
		f(it);
		f(e1);
		break;
	case 12:case 13:
		break;
	case 14:
		var _g = e.ret;
		var _g = e.name;
		var _g = e.args;
		var e1 = e.e;
		f(e1);
		break;
	case 15:
		var e1 = e.e;
		if(e1 != null) {
			f(e1);
		}
		break;
	case 16:
		var i = e.index;
		var e1 = e.e;
		f(e1);
		f(i);
		break;
	case 17:
		var el = e.e;
		var _g = 0;
		while(_g < el.length) {
			var e1 = el[_g];
			++_g;
			f(e1);
		}
		break;
	case 18:
		var _g = e.cl;
		var el = e.params;
		var _g = 0;
		while(_g < el.length) {
			var e1 = el[_g];
			++_g;
			f(e1);
		}
		break;
	case 19:
		var e1 = e.e;
		f(e1);
		break;
	case 20:
		var _g = e.t;
		var _g = e.v;
		var c = e.ecatch;
		var e1 = e.e;
		f(e1);
		f(c);
		break;
	case 21:
		var fl = e.fl;
		var _g = 0;
		while(_g < fl.length) {
			var fi = fl[_g];
			++_g;
			f(fi.e);
		}
		break;
	case 22:
		var e2 = e.e2;
		var e1 = e.e1;
		var c = e.cond;
		f(c);
		f(e1);
		f(e2);
		break;
	case 23:
		var def = e.defaultExpr;
		var cases = e.cases;
		var e1 = e.e;
		f(e1);
		var _g = 0;
		while(_g < cases.length) {
			var c = cases[_g];
			++_g;
			var _g1 = 0;
			var _g2 = c.values;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				f(v);
			}
			f(c.expr);
		}
		if(def != null) {
			f(def);
		}
		break;
	case 24:
		var e1 = e.e;
		var c = e.cond;
		f(c);
		f(e1);
		break;
	case 25:
		var e1 = e.e;
		var args = e.args;
		var name = e.name;
		if(args != null) {
			var _g = 0;
			while(_g < args.length) {
				var a = args[_g];
				++_g;
				f(a);
			}
		}
		f(e1);
		break;
	case 26:
		var _g = e.t;
		var e1 = e.e;
		f(e1);
		break;
	}
};
hscript_Tools.map = function(e,f) {
	var edef;
	switch(e._hx_index) {
	case 0:
		var _g = e.c;
		edef = e;
		break;
	case 1:
		var _g = e.v;
		edef = e;
		break;
	case 2:
		var e1 = e.e;
		var t = e.t;
		var n = e.n;
		edef = hscript_Expr.EVar(n,t,e1 != null ? f(e1) : null);
		break;
	case 3:
		var e1 = e.e;
		edef = hscript_Expr.EParent(f(e1));
		break;
	case 4:
		var el = e.e;
		var _g = [];
		var _g1 = 0;
		while(_g1 < el.length) {
			var e1 = el[_g1];
			++_g1;
			_g.push(f(e1));
		}
		edef = hscript_Expr.EBlock(_g);
		break;
	case 5:
		var fi = e.f;
		var e1 = e.e;
		edef = hscript_Expr.EField(f(e1),fi);
		break;
	case 6:
		var e2 = e.e2;
		var e1 = e.e1;
		var op = e.op;
		edef = hscript_Expr.EBinop(op,f(e1),f(e2));
		break;
	case 7:
		var e1 = e.e;
		var pre = e.prefix;
		var op = e.op;
		edef = hscript_Expr.EUnop(op,pre,f(e1));
		break;
	case 8:
		var args = e.params;
		var e1 = e.e;
		var edef1 = f(e1);
		var _g = [];
		var _g1 = 0;
		while(_g1 < args.length) {
			var a = args[_g1];
			++_g1;
			_g.push(f(a));
		}
		edef = hscript_Expr.ECall(edef1,_g);
		break;
	case 9:
		var e2 = e.e2;
		var e1 = e.e1;
		var c = e.cond;
		edef = hscript_Expr.EIf(f(c),f(e1),e2 != null ? f(e2) : null);
		break;
	case 10:
		var e1 = e.e;
		var c = e.cond;
		edef = hscript_Expr.EWhile(f(c),f(e1));
		break;
	case 11:
		var e1 = e.e;
		var it = e.it;
		var v = e.v;
		edef = hscript_Expr.EFor(v,f(it),f(e1));
		break;
	case 12:case 13:
		edef = e;
		break;
	case 14:
		var t = e.ret;
		var name = e.name;
		var e1 = e.e;
		var args = e.args;
		edef = hscript_Expr.EFunction(args,f(e1),name,t);
		break;
	case 15:
		var e1 = e.e;
		edef = hscript_Expr.EReturn(e1 != null ? f(e1) : null);
		break;
	case 16:
		var i = e.index;
		var e1 = e.e;
		edef = hscript_Expr.EArray(f(e1),f(i));
		break;
	case 17:
		var el = e.e;
		var _g = [];
		var _g1 = 0;
		while(_g1 < el.length) {
			var e1 = el[_g1];
			++_g1;
			_g.push(f(e1));
		}
		edef = hscript_Expr.EArrayDecl(_g);
		break;
	case 18:
		var el = e.params;
		var cl = e.cl;
		var _g = [];
		var _g1 = 0;
		while(_g1 < el.length) {
			var e1 = el[_g1];
			++_g1;
			_g.push(f(e1));
		}
		edef = hscript_Expr.ENew(cl,_g);
		break;
	case 19:
		var e1 = e.e;
		edef = hscript_Expr.EThrow(f(e1));
		break;
	case 20:
		var c = e.ecatch;
		var t = e.t;
		var v = e.v;
		var e1 = e.e;
		edef = hscript_Expr.ETry(f(e1),v,t,f(c));
		break;
	case 21:
		var fl = e.fl;
		var _g = [];
		var _g1 = 0;
		while(_g1 < fl.length) {
			var fi = fl[_g1];
			++_g1;
			_g.push({ name : fi.name, e : f(fi.e)});
		}
		edef = hscript_Expr.EObject(_g);
		break;
	case 22:
		var e2 = e.e2;
		var e1 = e.e1;
		var c = e.cond;
		edef = hscript_Expr.ETernary(f(c),f(e1),f(e2));
		break;
	case 23:
		var def = e.defaultExpr;
		var cases = e.cases;
		var e1 = e.e;
		var edef1 = f(e1);
		var _g = [];
		var _g1 = 0;
		while(_g1 < cases.length) {
			var c = cases[_g1];
			++_g1;
			var _g2 = [];
			var _g3 = 0;
			var _g4 = c.values;
			while(_g3 < _g4.length) {
				var v = _g4[_g3];
				++_g3;
				_g2.push(f(v));
			}
			_g.push({ values : _g2, expr : f(c.expr)});
		}
		edef = hscript_Expr.ESwitch(edef1,_g,def == null ? null : f(def));
		break;
	case 24:
		var e1 = e.e;
		var c = e.cond;
		edef = hscript_Expr.EDoWhile(f(c),f(e1));
		break;
	case 25:
		var e1 = e.e;
		var args = e.args;
		var name = e.name;
		var edef1;
		if(args == null) {
			edef1 = null;
		} else {
			var _g = [];
			var _g1 = 0;
			while(_g1 < args.length) {
				var a = args[_g1];
				++_g1;
				_g.push(f(a));
			}
			edef1 = _g;
		}
		edef = hscript_Expr.EMeta(name,edef1,f(e1));
		break;
	case 26:
		var t = e.t;
		var e1 = e.e;
		edef = hscript_Expr.ECheckType(f(e1),t);
		break;
	}
	return edef;
};
hscript_Tools.expr = function(e) {
	return e;
};
hscript_Tools.mk = function(e,p) {
	return e;
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		if(s.length == 0) {
			var key = "_hx_" + Math.random();
			s.setItem(key,key);
			s.removeItem(key);
		}
		return s;
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name = "experimental-webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	return null;
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var lime__$internal_backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._internal.backend.html5.GameDeviceData"] = lime__$internal_backend_html5_GameDeviceData;
lime__$internal_backend_html5_GameDeviceData.__name__ = "lime._internal.backend.html5.GameDeviceData";
lime__$internal_backend_html5_GameDeviceData.prototype = {
	connected: null
	,id: null
	,isGamepad: null
	,buttons: null
	,axes: null
	,__class__: lime__$internal_backend_html5_GameDeviceData
};
var lime__$internal_backend_html5_HTML5AudioSource = function(parent) {
	this.parent = parent;
	this.id = -1;
	this.gain = 1;
	this.position = new lime_math_Vector4();
};
$hxClasses["lime._internal.backend.html5.HTML5AudioSource"] = lime__$internal_backend_html5_HTML5AudioSource;
lime__$internal_backend_html5_HTML5AudioSource.__name__ = "lime._internal.backend.html5.HTML5AudioSource";
lime__$internal_backend_html5_HTML5AudioSource.prototype = {
	completed: null
	,gain: null
	,id: null
	,length: null
	,loops: null
	,parent: null
	,playing: null
	,position: null
	,dispose: function() {
	}
	,init: function() {
	}
	,play: function() {
		if(this.playing || this.parent.buffer == null || this.parent.buffer.__srcHowl == null) {
			return;
		}
		this.playing = true;
		var time = this.getCurrentTime();
		this.completed = false;
		var cacheVolume = this.parent.buffer.__srcHowl._volume;
		this.parent.buffer.__srcHowl._volume = this.parent.get_gain();
		this.id = this.parent.buffer.__srcHowl.play();
		this.parent.buffer.__srcHowl._volume = cacheVolume;
		this.setPosition(this.parent.get_position());
		this.parent.buffer.__srcHowl.on("end",$bind(this,this.howl_onEnd),this.id);
		this.setCurrentTime(time);
	}
	,pause: function() {
		this.playing = false;
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			this.parent.buffer.__srcHowl.pause(this.id);
		}
	}
	,stop: function() {
		this.playing = false;
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			this.parent.buffer.__srcHowl.stop(this.id);
			this.parent.buffer.__srcHowl.off("end",$bind(this,this.howl_onEnd),this.id);
		}
	}
	,howl_onEnd: function() {
		this.playing = false;
		if(this.loops > 0) {
			this.loops--;
			this.stop();
			this.play();
			return;
		} else if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			this.parent.buffer.__srcHowl.stop(this.id);
			this.parent.buffer.__srcHowl.off("end",$bind(this,this.howl_onEnd),this.id);
		}
		this.completed = true;
		this.parent.onComplete.dispatch();
	}
	,getCurrentTime: function() {
		if(this.id == -1) {
			return 0;
		}
		if(this.completed) {
			return this.getLength();
		} else if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			var time = (this.parent.buffer.__srcHowl.seek(this.id) * 1000 | 0) - this.parent.offset;
			if(time < 0) {
				return 0;
			}
			return time;
		}
		return 0;
	}
	,setCurrentTime: function(value) {
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			var pos = (value + this.parent.offset) / 1000;
			if(pos < 0) {
				pos = 0;
			}
			this.parent.buffer.__srcHowl.seek(pos,this.id);
		}
		return value;
	}
	,getGain: function() {
		return this.gain;
	}
	,setGain: function(value) {
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null && this.id != -1) {
			this.parent.buffer.__srcHowl.volume(value,this.id);
		}
		return this.gain = value;
	}
	,getLength: function() {
		if(this.length != 0) {
			return this.length;
		}
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			return this.parent.buffer.__srcHowl.duration() * 1000 | 0;
		}
		return 0;
	}
	,setLength: function(value) {
		return this.length = value;
	}
	,getLoops: function() {
		return this.loops;
	}
	,setLoops: function(value) {
		return this.loops = value;
	}
	,getPosition: function() {
		return this.position;
	}
	,setPosition: function(value) {
		this.position.x = value.x;
		this.position.y = value.y;
		this.position.z = value.z;
		this.position.w = value.w;
		if(this.parent.buffer.__srcHowl != null && this.parent.buffer.__srcHowl.pos != null) {
			this.parent.buffer.__srcHowl.pos(this.position.x,this.position.y,this.position.z,this.id);
		}
		return this.position;
	}
	,__class__: lime__$internal_backend_html5_HTML5AudioSource
};
var lime__$internal_backend_html5_HTML5HTTPRequest = function() {
	this.validStatus0 = new EReg("Tizen","gi").match(window.navigator.userAgent);
};
$hxClasses["lime._internal.backend.html5.HTML5HTTPRequest"] = lime__$internal_backend_html5_HTML5HTTPRequest;
lime__$internal_backend_html5_HTML5HTTPRequest.__name__ = "lime._internal.backend.html5.HTML5HTTPRequest";
lime__$internal_backend_html5_HTML5HTTPRequest.originElement = null;
lime__$internal_backend_html5_HTML5HTTPRequest.originHostname = null;
lime__$internal_backend_html5_HTML5HTTPRequest.originPort = null;
lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol = null;
lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress = null;
lime__$internal_backend_html5_HTML5HTTPRequest.loadImage = function(uri) {
	var promise = new lime_app_Promise();
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(uri,promise,0);
	} else {
		lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE", options : 0});
	}
	return promise.future;
};
lime__$internal_backend_html5_HTML5HTTPRequest.loadImageFromBytes = function(bytes,type) {
	var uri = URL.createObjectURL(new Blob([bytes.b.bufferValue],{ type : type}));
	if(uri != null) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(uri,promise,1);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE", options : 1});
		}
		return promise.future;
	} else {
		return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + lime__$internal_format_Base64.encode(bytes));
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.processQueue = function() {
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit && lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.length > 0) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		var queueItem = lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.pop();
		switch(queueItem.type) {
		case "BINARY":
			queueItem.instance.__loadData(queueItem.uri,queueItem.promise);
			break;
		case "IMAGE":
			lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(queueItem.uri,queueItem.promise,queueItem.options);
			break;
		case "TEXT":
			queueItem.instance.__loadText(queueItem.uri,queueItem.promise);
			break;
		default:
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
		}
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__createBlobURIFromBytes = function(bytes,type) {
	return URL.createObjectURL(new Blob([bytes.b.bufferValue],{ type : type}));
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname = function(hostname) {
	if(hostname == null) {
		return "";
	} else {
		return hostname;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort = function(port,protocol) {
	if(port == null || port == "") {
		switch(protocol) {
		case "ftp:":
			return "21";
		case "gopher:":
			return "70";
		case "http:":
			return "80";
		case "https:":
			return "443";
		case "ws:":
			return "80";
		case "wss:":
			return "443";
		default:
			return "";
		}
	}
	return port;
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol = function(protocol) {
	if(protocol == null || protocol == "") {
		return "http:";
	} else {
		return protocol;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI = function(uri) {
	if(!StringTools.startsWith(uri,"data:")) {
		return StringTools.startsWith(uri,"blob:");
	} else {
		return true;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin = function(path) {
	if(path == null || path == "") {
		return true;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI(path)) {
		return true;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.originElement == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.originElement = window.document.createElement("a");
		lime__$internal_backend_html5_HTML5HTTPRequest.originHostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname($global.location.hostname);
		lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol($global.location.protocol);
		lime__$internal_backend_html5_HTML5HTTPRequest.originPort = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort($global.location.port,lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol);
	}
	var a = lime__$internal_backend_html5_HTML5HTTPRequest.originElement;
	a.href = path;
	if(a.hostname == "") {
		a.href = a.href;
	}
	var hostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname(a.hostname);
	var protocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol(a.protocol);
	var port = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort(a.port,protocol);
	var sameHost = hostname == "" || hostname == lime__$internal_backend_html5_HTML5HTTPRequest.originHostname;
	var samePort = port == "" || port == lime__$internal_backend_html5_HTML5HTTPRequest.originPort;
	if(protocol != "file:" && sameHost) {
		return samePort;
	} else {
		return false;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage = function(uri,promise,options) {
	var image = new Image();
	if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(uri)) {
		image.crossOrigin = "Anonymous";
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress = 'onprogress' in image;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress || lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI(uri)) {
		image.addEventListener("load",function(event) {
			lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI(uri,options);
			var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			buffer.__srcImage = image;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.complete(new lime_graphics_Image(buffer));
		},false);
		image.addEventListener("progress",function(event) {
			promise.progress(event.loaded,event.total);
		},false);
		image.addEventListener("error",function(event) {
			lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI(uri,options);
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.error(event.detail);
		},false);
		image.src = uri;
	} else {
		var request = new XMLHttpRequest();
		request.onload = function(_) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			var img = new lime_graphics_Image();
			img.__fromBytes(haxe_io_Bytes.ofData(request.response),function(img) {
				promise.complete(img);
			});
		};
		request.onerror = function(event) {
			promise.error(event.message);
		};
		request.onprogress = function(event) {
			if(event.lengthComputable) {
				promise.progress(event.loaded,event.total);
			}
		};
		request.open("GET",uri,true);
		request.responseType = "arraybuffer";
		request.overrideMimeType("text/plain; charset=x-user-defined");
		request.send(null);
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI = function(uri,options) {
	if((options & 1) != 0) {
		URL.revokeObjectURL(uri);
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.prototype = {
	binary: null
	,parent: null
	,request: null
	,validStatus0: null
	,cancel: function() {
		if(this.request != null) {
			this.request.abort();
		}
	}
	,init: function(parent) {
		this.parent = parent;
	}
	,load: function(uri,progress,readyStateChange) {
		this.request = new XMLHttpRequest();
		if(this.parent.method == "POST") {
			this.request.upload.addEventListener("progress",progress,false);
		} else {
			this.request.addEventListener("progress",progress,false);
		}
		this.request.onreadystatechange = readyStateChange;
		var query = "";
		if(this.parent.data == null) {
			var key = haxe_ds_StringMap.keysIterator(this.parent.formData.h);
			while(key.hasNext()) {
				var key1 = key.next();
				if(query.length > 0) {
					query += "&";
				}
				var value = this.parent.formData.h[key1];
				if(key1.indexOf("[]") > -1 && ((value) instanceof Array)) {
					var _g = [];
					var x = $getIterator(value);
					while(x.hasNext()) {
						var x1 = x.next();
						_g.push(encodeURIComponent(x1));
					}
					var arrayValue = _g.join("&amp;" + key1 + "=");
					query += encodeURIComponent(key1) + "=" + arrayValue;
				} else {
					var query1 = encodeURIComponent(key1) + "=";
					var s = Std.string(value);
					query += query1 + encodeURIComponent(s);
				}
			}
			if(this.parent.method == "GET" && query != "") {
				if(uri.indexOf("?") > -1) {
					uri += "&" + query;
				} else {
					uri += "?" + query;
				}
				query = "";
			}
		}
		this.request.open(Std.string(this.parent.method),uri,true);
		if(this.parent.timeout > 0) {
			this.request.timeout = this.parent.timeout;
		}
		if(this.binary) {
			this.request.responseType = "arraybuffer";
		}
		var contentType = null;
		var _g = 0;
		var _g1 = this.parent.headers;
		while(_g < _g1.length) {
			var header = _g1[_g];
			++_g;
			if(header.name == "Content-Type") {
				contentType = header.value;
			} else {
				this.request.setRequestHeader(header.name,header.value);
			}
		}
		if(this.parent.contentType != null) {
			contentType = this.parent.contentType;
		}
		if(contentType == null) {
			if(this.parent.data != null) {
				contentType = "application/octet-stream";
			} else if(query != "") {
				contentType = "application/x-www-form-urlencoded";
			}
		}
		if(contentType != null) {
			this.request.setRequestHeader("Content-Type",contentType);
		}
		if(this.parent.withCredentials) {
			this.request.withCredentials = true;
		}
		if(this.parent.data != null) {
			this.request.send(this.parent.data.b.bufferValue);
		} else {
			this.request.send(query);
		}
	}
	,loadData: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadData(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "BINARY", options : 0});
		}
		return promise.future;
	}
	,loadText: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadText(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "TEXT", options : 0});
		}
		return promise.future;
	}
	,processResponse: function() {
		if(this.parent.enableResponseHeaders) {
			this.parent.responseHeaders = [];
			var name;
			var value;
			var _g = 0;
			var _g1 = this.request.getAllResponseHeaders().split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				name = StringTools.trim(HxOverrides.substr(line,0,line.indexOf(":")));
				value = StringTools.trim(HxOverrides.substr(line,line.indexOf(":") + 1,null));
				if(name != "") {
					this.parent.responseHeaders.push(new lime_net_HTTPRequestHeader(name,value));
				}
			}
		}
		this.parent.responseStatus = this.request.status;
	}
	,__loadData: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status < 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				var bytes = null;
				if(_gthis.request.responseType == "") {
					if(_gthis.request.responseText != null) {
						bytes = haxe_io_Bytes.ofString(_gthis.request.responseText);
					}
				} else if(_gthis.request.response != null) {
					bytes = haxe_io_Bytes.ofData(_gthis.request.response);
				}
				_gthis.processResponse();
				promise.complete(bytes);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = true;
		this.load(uri,progress,readyStateChange);
	}
	,__loadText: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status <= 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				_gthis.processResponse();
				promise.complete(_gthis.request.responseText);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = false;
		this.load(uri,progress,readyStateChange);
	}
	,__class__: lime__$internal_backend_html5_HTML5HTTPRequest
};
var lime__$internal_backend_html5_HTML5Window = function(parent) {
	this.inputing = false;
	this.unusedTouchesPool = new haxe_ds_List();
	this.scale = 1.0;
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	this.cursor = lime_ui_MouseCursor.DEFAULT;
	this.cacheMouseX = 0;
	this.cacheMouseY = 0;
	var attributes = parent.__attributes;
	if(!Object.prototype.hasOwnProperty.call(attributes,"context")) {
		attributes.context = { };
	}
	this.renderType = attributes.context.type;
	if(Object.prototype.hasOwnProperty.call(attributes,"element")) {
		parent.element = attributes.element;
	}
	var element = parent.element;
	if(Object.prototype.hasOwnProperty.call(attributes,"allowHighDPI") && attributes.allowHighDPI && this.renderType != "dom") {
		this.scale = window.devicePixelRatio;
	}
	parent.__scale = this.scale;
	this.setWidth = Object.prototype.hasOwnProperty.call(attributes,"width") ? attributes.width : 0;
	this.setHeight = Object.prototype.hasOwnProperty.call(attributes,"height") ? attributes.height : 0;
	parent.__width = this.setWidth;
	parent.__height = this.setHeight;
	parent.id = lime__$internal_backend_html5_HTML5Window.windowID++;
	if(((element) instanceof HTMLCanvasElement)) {
		this.canvas = element;
	} else if(this.renderType == "dom") {
		this.div = window.document.createElement("div");
	} else {
		this.canvas = window.document.createElement("canvas");
	}
	if(this.canvas != null) {
		var style = this.canvas.style;
		style.setProperty("-webkit-transform","translateZ(0)",null);
		style.setProperty("transform","translateZ(0)",null);
	} else if(this.div != null) {
		var style = this.div.style;
		style.setProperty("-webkit-transform","translate3D(0,0,0)",null);
		style.setProperty("transform","translate3D(0,0,0)",null);
		style.position = "relative";
		style.overflow = "hidden";
		style.setProperty("-webkit-user-select","none",null);
		style.setProperty("-moz-user-select","none",null);
		style.setProperty("-ms-user-select","none",null);
		style.setProperty("-o-user-select","none",null);
	}
	if(parent.__width == 0 && parent.__height == 0) {
		if(element != null) {
			parent.__width = element.clientWidth;
			parent.__height = element.clientHeight;
		} else {
			parent.__width = window.innerWidth;
			parent.__height = window.innerHeight;
		}
		this.cacheElementWidth = parent.__width;
		this.cacheElementHeight = parent.__height;
		this.resizeElement = true;
	}
	if(this.canvas != null) {
		this.canvas.width = Math.round(parent.__width * this.scale);
		this.canvas.height = Math.round(parent.__height * this.scale);
		this.canvas.style.width = parent.__width + "px";
		this.canvas.style.height = parent.__height + "px";
	} else {
		this.div.style.width = parent.__width + "px";
		this.div.style.height = parent.__height + "px";
	}
	if(Object.prototype.hasOwnProperty.call(attributes,"resizable") && attributes.resizable || !Object.prototype.hasOwnProperty.call(attributes,"width") && this.setWidth == 0 && this.setHeight == 0) {
		parent.__resizable = true;
	}
	this.updateSize();
	if(element != null) {
		if(this.canvas != null) {
			if(element != this.canvas) {
				element.appendChild(this.canvas);
			}
		} else {
			element.appendChild(this.div);
		}
		var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
		var _g = 0;
		while(_g < events.length) {
			var event = events[_g];
			++_g;
			element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
		}
		element.addEventListener("contextmenu",$bind(this,this.handleContextMenuEvent),true);
		element.addEventListener("dragstart",$bind(this,this.handleDragEvent),true);
		element.addEventListener("dragover",$bind(this,this.handleDragEvent),true);
		element.addEventListener("drop",$bind(this,this.handleDragEvent),true);
		element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchcancel",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
		element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
	}
	this.createContext();
	if(parent.context.type == "webgl") {
		this.canvas.addEventListener("webglcontextlost",$bind(this,this.handleContextEvent),false);
		this.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleContextEvent),false);
	}
};
$hxClasses["lime._internal.backend.html5.HTML5Window"] = lime__$internal_backend_html5_HTML5Window;
lime__$internal_backend_html5_HTML5Window.__name__ = "lime._internal.backend.html5.HTML5Window";
lime__$internal_backend_html5_HTML5Window.textArea = null;
lime__$internal_backend_html5_HTML5Window.textInput = null;
lime__$internal_backend_html5_HTML5Window.prototype = {
	canvas: null
	,div: null
	,cacheElementHeight: null
	,cacheElementWidth: null
	,cacheMouseX: null
	,cacheMouseY: null
	,cursor: null
	,currentTouches: null
	,isFullscreen: null
	,parent: null
	,primaryTouch: null
	,renderType: null
	,requestedFullscreen: null
	,resizeElement: null
	,scale: null
	,setHeight: null
	,setWidth: null
	,textInputEnabled: null
	,unusedTouchesPool: null
	,alert: function(message,title) {
		if(message != null) {
			window.alert(Std.string(message));
		}
	}
	,close: function() {
		this.parent.application.__removeWindow(this.parent);
	}
	,createContext: function() {
		var context = new lime_graphics_RenderContext();
		var contextAttributes = this.parent.__attributes.context;
		context.window = this.parent;
		context.attributes = contextAttributes;
		if(this.div != null) {
			context.dom = this.div;
			context.type = "dom";
			context.version = "";
		} else if(this.canvas != null) {
			var webgl = null;
			var forceCanvas = this.renderType == "canvas";
			var forceWebGL = this.renderType == "opengl" || this.renderType == "opengles" || this.renderType == "webgl";
			var allowWebGL2 = !Object.prototype.hasOwnProperty.call(contextAttributes,"version") || contextAttributes.version != "1";
			var isWebGL2 = false;
			if(forceWebGL || !forceCanvas && (!Object.prototype.hasOwnProperty.call(contextAttributes,"hardware") || contextAttributes.hardware)) {
				var transparentBackground = Object.prototype.hasOwnProperty.call(contextAttributes,"background") && contextAttributes.background == null;
				var colorDepth = Object.prototype.hasOwnProperty.call(contextAttributes,"colorDepth") ? contextAttributes.colorDepth : 16;
				var options = Object.prototype.hasOwnProperty.call(contextAttributes,"antialiasing") && contextAttributes.antialiasing > 0;
				var options1 = Object.prototype.hasOwnProperty.call(contextAttributes,"depth") ? contextAttributes.depth : true;
				var options2 = Object.prototype.hasOwnProperty.call(contextAttributes,"stencil") && contextAttributes.stencil;
				var options3 = { alpha : transparentBackground || colorDepth > 16, antialias : options, depth : options1, premultipliedAlpha : true, stencil : options2, preserveDrawingBuffer : false, failIfMajorPerformanceCaveat : false};
				var glContextType = ["webgl","experimental-webgl"];
				if(allowWebGL2) {
					glContextType.unshift("webgl2");
				}
				var _g = 0;
				while(_g < glContextType.length) {
					var name = glContextType[_g];
					++_g;
					webgl = this.canvas.getContext(name,options3);
					if(webgl != null && name == "webgl2") {
						isWebGL2 = true;
					}
					if(webgl != null) {
						break;
					}
				}
			}
			if(webgl == null) {
				context.canvas2D = this.canvas.getContext("2d");
				context.type = "canvas";
				context.version = "";
			} else {
				context.webgl = lime_graphics_WebGLRenderContext.fromWebGL2RenderContext(webgl);
				if(isWebGL2) {
					context.webgl2 = webgl;
				}
				if(lime_graphics_opengl_GL.context == null) {
					lime_graphics_opengl_GL.context = webgl;
					lime_graphics_opengl_GL.type = "webgl";
					lime_graphics_opengl_GL.version = isWebGL2 ? 2 : 1;
				}
				context.type = "webgl";
				context.version = isWebGL2 ? "2" : "1";
			}
		}
		this.parent.context = context;
	}
	,focus: function() {
	}
	,getCursor: function() {
		return this.cursor;
	}
	,getDisplay: function() {
		return lime_system_System.getDisplay(0);
	}
	,getDisplayMode: function() {
		return lime_system_System.getDisplay(0).currentMode;
	}
	,getFrameRate: function() {
		if(this.parent.application == null) {
			return 0;
		}
		if(this.parent.application.__backend.framePeriod < 0) {
			return 60;
		} else if(this.parent.application.__backend.framePeriod == 1000) {
			return 0;
		} else {
			return 1000 / this.parent.application.__backend.framePeriod;
		}
	}
	,getMouseLock: function() {
		return false;
	}
	,getTextInputEnabled: function() {
		return this.textInputEnabled;
	}
	,handleContextEvent: function(event) {
		switch(event.type) {
		case "webglcontextlost":
			if(event.cancelable) {
				event.preventDefault();
			}
			var tmp = lime_graphics_opengl_GL.context != null;
			this.parent.context = null;
			this.parent.onRenderContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onRenderContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,handleContextMenuEvent: function(event) {
		if((this.parent.onMouseUp.canceled || this.parent.onMouseDown.canceled) && event.cancelable) {
			event.preventDefault();
		}
	}
	,handleCutOrCopyEvent: function(event) {
		event.clipboardData.setData("text/plain",lime_system_Clipboard.get_text());
		if(event.cancelable) {
			event.preventDefault();
		}
	}
	,handleDragEvent: function(event) {
		switch(event.type) {
		case "dragover":
			event.preventDefault();
			return false;
		case "dragstart":
			if((js_Boot.__cast(event.target , HTMLElement)).nodeName.toLowerCase() == "img" && event.cancelable) {
				event.preventDefault();
				return false;
			}
			break;
		case "drop":
			if(event.dataTransfer != null && event.dataTransfer.files.length > 0) {
				this.parent.onDropFile.dispatch(event.dataTransfer.files);
				event.preventDefault();
				return false;
			}
			break;
		}
		return true;
	}
	,handleFocusEvent: function(event) {
		var _gthis = this;
		if(this.textInputEnabled) {
			if(event.relatedTarget == null || this.isDescendent(event.relatedTarget)) {
				haxe_Timer.delay(function() {
					if(_gthis.textInputEnabled) {
						lime__$internal_backend_html5_HTML5Window.textInput.focus();
					}
				},20);
			}
		}
	}
	,handleFullscreenEvent: function(event) {
		var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
		if(fullscreenElement != null) {
			this.isFullscreen = true;
			this.parent.__fullscreen = true;
			if(this.requestedFullscreen) {
				this.requestedFullscreen = false;
				this.parent.onFullscreen.dispatch();
			}
		} else {
			this.isFullscreen = false;
			this.parent.__fullscreen = false;
			this.parent.onRestore.dispatch();
			var changeEvents = ["fullscreenchange","mozfullscreenchange","webkitfullscreenchange","MSFullscreenChange"];
			var errorEvents = ["fullscreenerror","mozfullscreenerror","webkitfullscreenerror","MSFullscreenError"];
			var _g = 0;
			var _g1 = changeEvents.length;
			while(_g < _g1) {
				var i = _g++;
				window.document.removeEventListener(changeEvents[i],$bind(this,this.handleFullscreenEvent),false);
				window.document.removeEventListener(errorEvents[i],$bind(this,this.handleFullscreenEvent),false);
			}
		}
	}
	,handleGamepadEvent: function(event) {
		switch(event.type) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") {
				lime_ui_Gamepad.__connect(event.gamepad.index);
			}
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleInputEvent: function(event) {
		if(this.inputing) {
			return;
		}
		if(lime__$internal_backend_html5_HTML5Window.textInput.value != lime__$internal_backend_html5_HTML5Window.dummyCharacter) {
			var value = StringTools.replace(lime__$internal_backend_html5_HTML5Window.textInput.value,lime__$internal_backend_html5_HTML5Window.dummyCharacter,"");
			if(value.length > 0) {
				this.parent.onTextInput.dispatch(value);
			}
			lime__$internal_backend_html5_HTML5Window.textInput.value = lime__$internal_backend_html5_HTML5Window.dummyCharacter;
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.parent.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect = this.div.getBoundingClientRect();
					x = event.clientX - rect.left;
					y = event.clientY - rect.top;
				} else {
					var rect = this.parent.element.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			switch(event.type) {
			case "mousedown":
				if(event.currentTarget == this.parent.element) {
					window.addEventListener("mouseup",$bind(this,this.handleMouseEvent));
				}
				this.parent.onMouseDown.dispatch(x,y,event.button);
				if(this.parent.onMouseDown.canceled && event.cancelable) {
					event.preventDefault();
				}
				break;
			case "mouseenter":
				if(event.target == this.parent.element) {
					this.parent.onEnter.dispatch();
					if(this.parent.onEnter.canceled && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mouseleave":
				if(event.target == this.parent.element) {
					this.parent.onLeave.dispatch();
					if(this.parent.onLeave.canceled && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mousemove":
				if(x != this.cacheMouseX || y != this.cacheMouseY) {
					this.parent.onMouseMove.dispatch(x,y);
					this.parent.onMouseMoveRelative.dispatch(x - this.cacheMouseX,y - this.cacheMouseY);
					if((this.parent.onMouseMove.canceled || this.parent.onMouseMoveRelative.canceled) && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mouseup":
				window.removeEventListener("mouseup",$bind(this,this.handleMouseEvent));
				if(event.currentTarget == this.parent.element) {
					event.stopPropagation();
				}
				this.parent.onMouseUp.dispatch(x,y,event.button);
				if(this.parent.onMouseUp.canceled && event.cancelable) {
					event.preventDefault();
				}
				break;
			default:
			}
			this.cacheMouseX = x;
			this.cacheMouseY = y;
		} else {
			var deltaMode;
			switch(event.deltaMode) {
			case 0:
				deltaMode = lime_ui_MouseWheelMode.PIXELS;
				break;
			case 1:
				deltaMode = lime_ui_MouseWheelMode.LINES;
				break;
			case 2:
				deltaMode = lime_ui_MouseWheelMode.PAGES;
				break;
			default:
				deltaMode = lime_ui_MouseWheelMode.UNKNOWN;
			}
			this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY,deltaMode);
			if(this.parent.onMouseWheel.canceled && event.cancelable) {
				event.preventDefault();
			}
		}
	}
	,handlePasteEvent: function(event) {
		if(event.clipboardData.types.indexOf("text/plain") > -1) {
			var text = event.clipboardData.getData("text/plain");
			lime_system_Clipboard.set_text(text);
			if(this.textInputEnabled) {
				this.parent.onTextInput.dispatch(text);
			}
			if(event.cancelable) {
				event.preventDefault();
			}
		}
	}
	,handleResizeEvent: function(event) {
		this.primaryTouch = null;
		this.updateSize();
	}
	,handleTouchEvent: function(event) {
		if(event.cancelable) {
			event.preventDefault();
		}
		var rect = null;
		if(this.parent.element != null) {
			if(this.canvas != null) {
				rect = this.canvas.getBoundingClientRect();
			} else if(this.div != null) {
				rect = this.div.getBoundingClientRect();
			} else {
				rect = this.parent.element.getBoundingClientRect();
			}
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var touch;
		var x;
		var y;
		var cacheX;
		var cacheY;
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			x = 0.0;
			y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			if(event.type == "touchstart") {
				touch = this.unusedTouchesPool.pop();
				if(touch == null) {
					touch = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id);
				} else {
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.id = data.identifier;
					touch.dx = 0;
					touch.dy = 0;
					touch.pressure = data.force;
					touch.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch;
				lime_ui_Touch.onStart.dispatch(touch);
				if(this.primaryTouch == null) {
					this.primaryTouch = touch;
				}
				if(touch == this.primaryTouch) {
					this.parent.onMouseDown.dispatch(x,y,0);
				}
			} else {
				touch = this.currentTouches.h[data.identifier];
				if(touch != null) {
					cacheX = touch.x;
					cacheY = touch.y;
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.dx = touch.x - cacheX;
					touch.dy = touch.y - cacheY;
					touch.pressure = data.force;
					switch(event.type) {
					case "touchcancel":
						lime_ui_Touch.onCancel.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.primaryTouch = null;
						}
						break;
					case "touchend":
						lime_ui_Touch.onEnd.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseUp.dispatch(x,y,0);
							this.primaryTouch = null;
						}
						break;
					case "touchmove":
						lime_ui_Touch.onMove.dispatch(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseMove.dispatch(x,y);
						}
						break;
					default:
					}
				}
			}
		}
	}
	,isDescendent: function(node) {
		if(node == this.parent.element) {
			return true;
		}
		while(node != null) {
			if(node.parentNode == this.parent.element) {
				return true;
			}
			node = node.parentNode;
		}
		return false;
	}
	,move: function(x,y) {
	}
	,readPixels: function(rect) {
		if(this.canvas != null) {
			var stageRect = new lime_math_Rectangle(0,0,this.canvas.width,this.canvas.height);
			if(rect == null) {
				rect = stageRect;
			} else {
				rect.intersection(stageRect,rect);
			}
			if(rect.width > 0 && rect.height > 0) {
				var canvas2 = window.document.createElement("canvas");
				canvas2.width = rect.width | 0;
				canvas2.height = rect.height | 0;
				var context = canvas2.getContext("2d");
				context.drawImage(this.canvas,-rect.x,-rect.y);
				return lime_graphics_Image.fromCanvas(canvas2);
			}
		}
		return null;
	}
	,resize: function(width,height) {
	}
	,setBorderless: function(value) {
		return value;
	}
	,setClipboard: function(value) {
		if(lime__$internal_backend_html5_HTML5Window.textArea == null) {
			lime__$internal_backend_html5_HTML5Window.textArea = window.document.createElement("textarea");
			lime__$internal_backend_html5_HTML5Window.textArea.style.height = "0px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.left = "-100px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.opacity = "0";
			lime__$internal_backend_html5_HTML5Window.textArea.style.position = "fixed";
			lime__$internal_backend_html5_HTML5Window.textArea.style.top = "-100px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.width = "0px";
			window.document.body.appendChild(lime__$internal_backend_html5_HTML5Window.textArea);
		}
		lime__$internal_backend_html5_HTML5Window.textArea.value = value;
		lime__$internal_backend_html5_HTML5Window.textArea.focus();
		lime__$internal_backend_html5_HTML5Window.textArea.select();
		if(window.document.queryCommandEnabled("copy")) {
			window.document.execCommand("copy");
		}
	}
	,setCursor: function(value) {
		if(this.cursor != value) {
			if(value == null) {
				this.parent.element.style.cursor = "none";
			} else {
				var tmp;
				switch(value._hx_index) {
				case 0:
					tmp = "default";
					break;
				case 1:
					tmp = "crosshair";
					break;
				case 3:
					tmp = "move";
					break;
				case 4:
					tmp = "pointer";
					break;
				case 5:
					tmp = "nesw-resize";
					break;
				case 6:
					tmp = "ns-resize";
					break;
				case 7:
					tmp = "nwse-resize";
					break;
				case 8:
					tmp = "ew-resize";
					break;
				case 9:
					tmp = "text";
					break;
				case 10:
					tmp = "wait";
					break;
				case 11:
					tmp = "wait";
					break;
				default:
					tmp = "auto";
				}
				this.parent.element.style.cursor = tmp;
			}
			this.cursor = value;
		}
		return this.cursor;
	}
	,setDisplayMode: function(value) {
		return value;
	}
	,setFrameRate: function(value) {
		if(this.parent.application != null) {
			if(value >= 60) {
				if(this.parent == this.parent.application.__window) {
					this.parent.application.__backend.framePeriod = -1;
				}
			} else if(value > 0) {
				if(this.parent == this.parent.application.__window) {
					this.parent.application.__backend.framePeriod = 1000 / value;
				}
			} else if(this.parent == this.parent.application.__window) {
				this.parent.application.__backend.framePeriod = 1000;
			}
		}
		return value;
	}
	,setFullscreen: function(value) {
		if(value) {
			if(!this.requestedFullscreen && !this.isFullscreen) {
				this.requestedFullscreen = true;
				if(($_=this.parent.element,$bind($_,$_.requestFullscreen))) {
					document.addEventListener("fullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("fullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.requestFullscreen();
				} else if(this.parent.element.mozRequestFullScreen) {
					document.addEventListener("mozfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("mozfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.mozRequestFullScreen();
				} else if(this.parent.element.webkitRequestFullscreen) {
					document.addEventListener("webkitfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("webkitfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.webkitRequestFullscreen();
				} else if(this.parent.element.msRequestFullscreen) {
					document.addEventListener("MSFullscreenChange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("MSFullscreenError",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.msRequestFullscreen();
				}
			}
		} else if(this.isFullscreen) {
			this.requestedFullscreen = false;
			if(document.exitFullscreen) {
				document.exitFullscreen();
			} else if(document.mozCancelFullScreen) {
				document.mozCancelFullScreen();
			} else if(document.webkitExitFullscreen) {
				document.webkitExitFullscreen();
			} else if(document.msExitFullscreen) {
				document.msExitFullscreen();
			}
		}
		return value;
	}
	,setIcon: function(image) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
		var link = window.document.querySelector("link[rel*='icon']");
		if(link == null) {
			link = window.document.createElement("link");
		}
		link.type = "image/x-icon";
		link.rel = "shortcut icon";
		link.href = image.buffer.get_src().toDataURL("image/x-icon");
		window.document.getElementsByTagName("head")[0].appendChild(link);
	}
	,setMaximized: function(value) {
		return false;
	}
	,setMinimized: function(value) {
		return false;
	}
	,setMouseLock: function(value) {
	}
	,setResizable: function(value) {
		return value;
	}
	,setTextInputEnabled: function(value) {
		if(value) {
			if(lime__$internal_backend_html5_HTML5Window.textInput == null) {
				lime__$internal_backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$internal_backend_html5_HTML5Window.textInput.type = "text";
				lime__$internal_backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$internal_backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$internal_backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$internal_backend_html5_HTML5Window.textInput.value = lime__$internal_backend_html5_HTML5Window.dummyCharacter;
				lime__$internal_backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$internal_backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$internal_backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$internal_backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$internal_backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$internal_backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
			}
			if(lime__$internal_backend_html5_HTML5Window.textInput.parentNode == null) {
				this.parent.element.appendChild(lime__$internal_backend_html5_HTML5Window.textInput);
			}
			if(!this.textInputEnabled) {
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("paste",$bind(this,this.handlePasteEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("compositionstart",$bind(this,this.handleCompositionstartEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("compositionend",$bind(this,this.handleCompositionendEvent),true);
			}
			lime__$internal_backend_html5_HTML5Window.textInput.focus();
			lime__$internal_backend_html5_HTML5Window.textInput.select();
		} else if(lime__$internal_backend_html5_HTML5Window.textInput != null) {
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("paste",$bind(this,this.handlePasteEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("compositionstart",$bind(this,this.handleCompositionstartEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("compositionend",$bind(this,this.handleCompositionendEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.blur();
		}
		return this.textInputEnabled = value;
	}
	,inputing: null
	,handleCompositionstartEvent: function(e) {
		this.inputing = true;
	}
	,handleCompositionendEvent: function(e) {
		this.inputing = false;
		this.handleInputEvent(e);
	}
	,setTitle: function(value) {
		if(value != null) {
			window.document.title = value;
		}
		return value;
	}
	,updateSize: function() {
		if(!this.parent.__resizable) {
			return;
		}
		var elementWidth;
		var elementHeight;
		if(this.parent.element != null) {
			elementWidth = this.parent.element.clientWidth;
			elementHeight = this.parent.element.clientHeight;
		} else {
			elementWidth = window.innerWidth;
			elementHeight = window.innerHeight;
		}
		if(elementWidth != this.cacheElementWidth || elementHeight != this.cacheElementHeight) {
			this.cacheElementWidth = elementWidth;
			this.cacheElementHeight = elementHeight;
			var stretch = this.resizeElement || this.setWidth == 0 && this.setHeight == 0;
			if(this.parent.element != null && (this.div == null || this.div != null && stretch)) {
				if(stretch) {
					if(this.parent.__width != elementWidth || this.parent.__height != elementHeight) {
						this.parent.__width = elementWidth;
						this.parent.__height = elementHeight;
						if(this.canvas != null) {
							if(this.parent.element != this.canvas) {
								this.canvas.width = Math.round(elementWidth * this.scale);
								this.canvas.height = Math.round(elementHeight * this.scale);
								this.canvas.style.width = elementWidth + "px";
								this.canvas.style.height = elementHeight + "px";
							}
						} else {
							this.div.style.width = elementWidth + "px";
							this.div.style.height = elementHeight + "px";
						}
						this.parent.onResize.dispatch(elementWidth,elementHeight);
					}
				} else {
					var scaleX = this.setWidth != 0 ? elementWidth / this.setWidth : 1;
					var scaleY = this.setHeight != 0 ? elementHeight / this.setHeight : 1;
					var targetWidth = elementWidth;
					var targetHeight = elementHeight;
					var marginLeft = 0;
					var marginTop = 0;
					if(scaleX < scaleY) {
						targetHeight = Math.floor(this.setHeight * scaleX);
						marginTop = Math.floor((elementHeight - targetHeight) / 2);
					} else {
						targetWidth = Math.floor(this.setWidth * scaleY);
						marginLeft = Math.floor((elementWidth - targetWidth) / 2);
					}
					if(this.canvas != null) {
						if(this.parent.element != this.canvas) {
							this.canvas.style.width = targetWidth + "px";
							this.canvas.style.height = targetHeight + "px";
							this.canvas.style.marginLeft = marginLeft + "px";
							this.canvas.style.marginTop = marginTop + "px";
						}
					} else {
						this.div.style.width = targetWidth + "px";
						this.div.style.height = targetHeight + "px";
						this.div.style.marginLeft = marginLeft + "px";
						this.div.style.marginTop = marginTop + "px";
					}
				}
			}
		}
	}
	,warpMouse: function(x,y) {
	}
	,__class__: lime__$internal_backend_html5_HTML5Window
};
var lime__$internal_backend_native_NativeCFFI = function() { };
$hxClasses["lime._internal.backend.native.NativeCFFI"] = lime__$internal_backend_native_NativeCFFI;
lime__$internal_backend_native_NativeCFFI.__name__ = "lime._internal.backend.native.NativeCFFI";
var lime__$internal_format_BMP = function() { };
$hxClasses["lime._internal.format.BMP"] = lime__$internal_format_BMP;
lime__$internal_format_BMP.__name__ = "lime._internal.format.BMP";
lime__$internal_format_BMP.encode = function(image,type) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	if(type == null) {
		type = lime__$internal_format_BMPType.RGB;
	}
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) {
		switch(type._hx_index) {
		case 0:
			pixelValuesLength = (image.width * 3 + image.width * 3 % 4) * image.height;
			break;
		case 1:
			infoHeaderLength = 108;
			break;
		case 2:
			fileHeaderLength = 0;
			pixelValuesLength += image.width * image.height;
			break;
		}
	}
	var data = new haxe_io_Bytes(new ArrayBuffer(fileHeaderLength + infoHeaderLength + pixelValuesLength));
	var position = 0;
	if(fileHeaderLength > 0) {
		data.b[position++] = 66;
		data.b[position++] = 77;
		data.setInt32(position,data.length);
		position += 4;
		data.setUInt16(position,0);
		position += 2;
		data.setUInt16(position,0);
		position += 2;
		data.setInt32(position,fileHeaderLength + infoHeaderLength);
		position += 4;
	}
	data.setInt32(position,infoHeaderLength);
	position += 4;
	data.setInt32(position,image.width);
	position += 4;
	data.setInt32(position,type == lime__$internal_format_BMPType.ICO ? image.height * 2 : image.height);
	position += 4;
	data.setUInt16(position,1);
	position += 2;
	data.setUInt16(position,type == lime__$internal_format_BMPType.RGB ? 24 : 32);
	position += 2;
	data.setInt32(position,type == lime__$internal_format_BMPType.BITFIELD ? 3 : 0);
	position += 4;
	data.setInt32(position,pixelValuesLength);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	if(type == lime__$internal_format_BMPType.BITFIELD) {
		data.setInt32(position,16711680);
		position += 4;
		data.setInt32(position,65280);
		position += 4;
		data.setInt32(position,255);
		position += 4;
		data.setInt32(position,-16777216);
		position += 4;
		data.b[position++] = 32;
		data.b[position++] = 110;
		data.b[position++] = 105;
		data.b[position++] = 87;
		var _g = 0;
		while(_g < 48) {
			var i = _g++;
			data.b[position++] = 0;
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var readPosition = 0;
	var a;
	var r;
	var g;
	var b;
	if(type != null) {
		switch(type._hx_index) {
		case 0:
			var _g = 0;
			var _g1 = image.height;
			while(_g < _g1) {
				var y = _g++;
				readPosition = (image.height - 1 - y) * 4 * image.width;
				var _g2 = 0;
				var _g3 = image.width;
				while(_g2 < _g3) {
					var x = _g2++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
				}
				var _g4 = 0;
				var _g5 = image.width * 3 % 4;
				while(_g4 < _g5) {
					var i = _g4++;
					data.b[position++] = 0;
				}
			}
			break;
		case 1:
			var _g = 0;
			var _g1 = image.height;
			while(_g < _g1) {
				var y = _g++;
				readPosition = (image.height - 1 - y) * 4 * image.width;
				var _g2 = 0;
				var _g3 = image.width;
				while(_g2 < _g3) {
					var x = _g2++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
				}
			}
			break;
		case 2:
			var andMask = new haxe_io_Bytes(new ArrayBuffer(image.width * image.height));
			var maskPosition = 0;
			var _g = 0;
			var _g1 = image.height;
			while(_g < _g1) {
				var y = _g++;
				readPosition = (image.height - 1 - y) * 4 * image.width;
				var _g2 = 0;
				var _g3 = image.width;
				while(_g2 < _g3) {
					var x = _g2++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
					andMask.b[maskPosition++] = 0;
				}
			}
			data.blit(position,andMask,0,image.width * image.height);
			break;
		}
	}
	return data;
};
var lime__$internal_format_BMPType = $hxEnums["lime._internal.format.BMPType"] = { __ename__ : "lime._internal.format.BMPType", __constructs__ : ["RGB","BITFIELD","ICO"]
	,RGB: {_hx_index:0,__enum__:"lime._internal.format.BMPType",toString:$estr}
	,BITFIELD: {_hx_index:1,__enum__:"lime._internal.format.BMPType",toString:$estr}
	,ICO: {_hx_index:2,__enum__:"lime._internal.format.BMPType",toString:$estr}
};
lime__$internal_format_BMPType.__empty_constructs__ = [lime__$internal_format_BMPType.RGB,lime__$internal_format_BMPType.BITFIELD,lime__$internal_format_BMPType.ICO];
var lime__$internal_format_Base64 = function() { };
$hxClasses["lime._internal.format.Base64"] = lime__$internal_format_Base64;
lime__$internal_format_Base64.__name__ = "lime._internal.format.Base64";
lime__$internal_format_Base64.decode = function(source) {
	return haxe_crypto_Base64.decode(source);
};
lime__$internal_format_Base64.encode = function(source) {
	var result = [];
	var dictionary = lime__$internal_format_Base64.DICTIONARY;
	var extendedDictionary = lime__$internal_format_Base64.EXTENDED_DICTIONARY;
	var numBytes = source.length;
	var numInputTriplets = Math.floor(numBytes / 3);
	var numChunksToWrite = numInputTriplets * 2;
	result.length = Math.ceil(numBytes / 3) * 2;
	var numBytesRead = 0;
	var numChunksWritten = 0;
	var inputTriplet;
	while(numChunksWritten < numChunksToWrite) {
		inputTriplet = source.b[numBytesRead] << 16 | source.b[numBytesRead + 1] << 8 | source.b[numBytesRead + 2];
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = extendedDictionary[inputTriplet & 4095];
		numBytesRead += 3;
		numChunksWritten += 2;
	}
	switch(numBytes - numInputTriplets * 3) {
	case 1:
		inputTriplet = source.b[numBytesRead] << 16;
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = "==";
		break;
	case 2:
		inputTriplet = source.b[numBytesRead] << 16 | source.b[numBytesRead + 1] << 8;
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = dictionary[inputTriplet >> 6 & 63] + "=";
		break;
	default:
	}
	return result.join("");
};
var lime__$internal_format_Deflate = function() { };
$hxClasses["lime._internal.format.Deflate"] = lime__$internal_format_Deflate;
lime__$internal_format_Deflate.__name__ = "lime._internal.format.Deflate";
lime__$internal_format_Deflate.compress = function(bytes) {
	var data = pako.deflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_Deflate.decompress = function(bytes) {
	var data = pako.inflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_format_GZip = function() { };
$hxClasses["lime._internal.format.GZip"] = lime__$internal_format_GZip;
lime__$internal_format_GZip.__name__ = "lime._internal.format.GZip";
lime__$internal_format_GZip.compress = function(bytes) {
	var data = pako.gzip(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_GZip.decompress = function(bytes) {
	var data = pako.ungzip(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_format_JPEG = function() { };
$hxClasses["lime._internal.format.JPEG"] = lime__$internal_format_JPEG;
lime__$internal_format_JPEG.__name__ = "lime._internal.format.JPEG";
lime__$internal_format_JPEG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_JPEG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_JPEG.encode = function(image,quality) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/jpeg",quality / 100);
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g = 0;
		var _g1 = buffer.length;
		while(_g < _g1) {
			var i = _g++;
			bytes.b[i] = HxOverrides.cca(buffer,i) & 255;
		}
		return bytes;
	}
	return null;
};
var lime__$internal_format_LZMA = function() { };
$hxClasses["lime._internal.format.LZMA"] = lime__$internal_format_LZMA;
lime__$internal_format_LZMA.__name__ = "lime._internal.format.LZMA";
lime__$internal_format_LZMA.compress = function(bytes) {
	return null;
};
lime__$internal_format_LZMA.decompress = function(bytes) {
	return null;
};
var lime__$internal_format_PNG = function() { };
$hxClasses["lime._internal.format.PNG"] = lime__$internal_format_PNG;
lime__$internal_format_PNG.__name__ = "lime._internal.format.PNG";
lime__$internal_format_PNG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_PNG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_PNG.encode = function(image) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/png");
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g = 0;
		var _g1 = buffer.length;
		while(_g < _g1) {
			var i = _g++;
			bytes.b[i] = HxOverrides.cca(buffer,i) & 255;
		}
		return bytes;
	}
	return null;
};
var lime__$internal_format_Zlib = function() { };
$hxClasses["lime._internal.format.Zlib"] = lime__$internal_format_Zlib;
lime__$internal_format_Zlib.__name__ = "lime._internal.format.Zlib";
lime__$internal_format_Zlib.compress = function(bytes) {
	var data = pako.deflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_Zlib.decompress = function(bytes) {
	var data = pako.inflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_graphics_ImageCanvasUtil = function() { };
$hxClasses["lime._internal.graphics.ImageCanvasUtil"] = lime__$internal_graphics_ImageCanvasUtil;
lime__$internal_graphics_ImageCanvasUtil.__name__ = "lime._internal.graphics.ImageCanvasUtil";
lime__$internal_graphics_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime__$internal_graphics_ImageCanvasUtil.convertToCanvas = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.__srcCanvas == null && buffer.data != null) {
		image.set_transparent(true);
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
	} else if(image.type == lime_graphics_ImageType.DATA && buffer.__srcImageData != null && image.dirty) {
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
		image.dirty = false;
	}
	if(clear) {
		buffer.data = null;
		buffer.__srcImageData = null;
	} else if(buffer.data == null && buffer.__srcImageData != null) {
		buffer.data = buffer.__srcImageData.data;
	}
	image.type = lime_graphics_ImageType.CANVAS;
};
lime__$internal_graphics_ImageCanvasUtil.convertToData = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	}
	if(buffer.__srcCanvas != null && buffer.data == null) {
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		if(image.type == lime_graphics_ImageType.CANVAS) {
			image.dirty = false;
		}
	} else if(image.type == lime_graphics_ImageType.CANVAS && buffer.__srcCanvas != null && image.dirty) {
		if(buffer.__srcImageData == null) {
			lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		} else {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
			var elements = buffer.__srcImageData.data.buffer;
			var array = null;
			var vector = null;
			var view = null;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			buffer.data = this1;
		}
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
	image.type = lime_graphics_ImageType.DATA;
};
lime__$internal_graphics_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime__$internal_graphics_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) {
		return;
	}
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) {
			alphaPoint = new lime_math_Vector2();
		}
		var tempData = sourceImage.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(sourceRect.x + alphaPoint.x,sourceRect.y + alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) {
			image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
		}
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(sourceImage);
	if(sourceImage.buffer.get_src() != null) {
		image.buffer.__srcContext.globalCompositeOperation = "source-over";
		image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) {
				buffer.__srcCanvas.setAttribute("moz-opaque","true");
			}
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else {
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		}
	}
};
lime__$internal_graphics_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		} else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var array = null;
		var vector = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer1,0);
			} else {
				this1 = new Uint8Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		buffer.data = this1;
	}
};
lime__$internal_graphics_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		a = image.get_transparent() ? color >> 24 & 255 : 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		a = image.get_transparent() ? color & 255 : 255;
	}
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && a == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	if(a < 255) {
		image.buffer.__srcContext.clearRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	if(a > 0) {
		image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
		image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.floodFill(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixel(image,x,y,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixel32(image,x,y,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixels(image,rect,format);
};
lime__$internal_graphics_ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime__$internal_graphics_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
	buffer.__srcImageData = null;
	buffer.data = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.scroll = function(image,x,y) {
	if(x % image.width == 0 && y % image.height == 0) {
		return;
	}
	var copy = image.clone();
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
	image.buffer.__srcContext.clearRect(x,y,image.width,image.height);
	image.buffer.__srcContext.drawImage(copy.get_src(),x,y);
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.setPixels = function(image,rect,bytePointer,format,endian) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixels(image,rect,bytePointer,format,endian);
};
lime__$internal_graphics_ImageCanvasUtil.sync = function(image,clear) {
	if(image == null) {
		return;
	}
	if(image.type == lime_graphics_ImageType.CANVAS && (image.buffer.__srcCanvas != null || image.buffer.data != null)) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,clear);
	} else if(image.type == lime_graphics_ImageType.DATA) {
		lime__$internal_graphics_ImageCanvasUtil.convertToData(image,clear);
	}
};
var lime__$internal_graphics_ImageDataUtil = function() { };
$hxClasses["lime._internal.graphics.ImageDataUtil"] = lime__$internal_graphics_ImageDataUtil;
lime__$internal_graphics_ImageDataUtil.__name__ = "lime._internal.graphics.ImageDataUtil";
lime__$internal_graphics_ImageDataUtil.displaceMap = function(target,source,map,mapPoint,componentX,componentY,smooth) {
	var targetData = target.buffer.data;
	var sourceData = source.buffer.data;
	var mapData = map.buffer.data;
	var targetFormat = target.buffer.format;
	var sourceFormat = source.buffer.format;
	var mapFormat = map.buffer.format;
	var targetPremultiplied = target.get_premultiplied();
	var sourcePremultiplied = source.get_premultiplied();
	var mapPremultiplied = map.get_premultiplied();
	var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(source);
	var mapView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(map);
	var row;
	var sourceOffset;
	var sourcePixel = 0;
	var mapPixel = 0;
	var targetPixel = 0;
	var mapPixelX;
	var mapPixelY;
	var mapPixelA;
	var s1 = 0;
	var s2 = 0;
	var s3 = 0;
	var s4 = 0;
	var mPointXFloor;
	var mPointYFloor;
	var disOffsetXFloor;
	var disOffsetYFloor;
	var disX;
	var disY;
	var _g = 0;
	var _g1 = sourceView.height;
	while(_g < _g1) {
		var y = _g++;
		row = sourceView.byteOffset + sourceView.stride * y;
		var _g2 = 0;
		var _g3 = sourceView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			sourceOffset = row + x * 4;
			mPointXFloor = mapPoint.x | 0;
			mPointYFloor = mapPoint.y | 0;
			if(smooth) {
				var offset = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor + 1) + (x - mPointXFloor) * 4;
				var format = mapFormat;
				var premultiplied = mapPremultiplied;
				if(premultiplied == null) {
					premultiplied = false;
				}
				if(format == null) {
					format = 0;
				}
				switch(format) {
				case 0:
					s1 = (mapData[offset] & 255) << 24 | (mapData[offset + 1] & 255) << 16 | (mapData[offset + 2] & 255) << 8 | mapData[offset + 3] & 255;
					break;
				case 1:
					s1 = (mapData[offset + 1] & 255) << 24 | (mapData[offset + 2] & 255) << 16 | (mapData[offset + 3] & 255) << 8 | mapData[offset] & 255;
					break;
				case 2:
					s1 = (mapData[offset + 2] & 255) << 24 | (mapData[offset + 1] & 255) << 16 | (mapData[offset] & 255) << 8 | mapData[offset + 3] & 255;
					break;
				}
				if(premultiplied) {
					if((s1 & 255) != 0 && (s1 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s1 & 255);
						s1 = (lime_math_RGBA.__clamp[Math.round((s1 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s1 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s1 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s1 & 255 & 255;
					}
				}
				var offset1 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor) + (x - mPointXFloor + 1) * 4;
				var format1 = mapFormat;
				var premultiplied1 = mapPremultiplied;
				if(premultiplied1 == null) {
					premultiplied1 = false;
				}
				if(format1 == null) {
					format1 = 0;
				}
				switch(format1) {
				case 0:
					s2 = (mapData[offset1] & 255) << 24 | (mapData[offset1 + 1] & 255) << 16 | (mapData[offset1 + 2] & 255) << 8 | mapData[offset1 + 3] & 255;
					break;
				case 1:
					s2 = (mapData[offset1 + 1] & 255) << 24 | (mapData[offset1 + 2] & 255) << 16 | (mapData[offset1 + 3] & 255) << 8 | mapData[offset1] & 255;
					break;
				case 2:
					s2 = (mapData[offset1 + 2] & 255) << 24 | (mapData[offset1 + 1] & 255) << 16 | (mapData[offset1] & 255) << 8 | mapData[offset1 + 3] & 255;
					break;
				}
				if(premultiplied1) {
					if((s2 & 255) != 0 && (s2 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s2 & 255);
						s2 = (lime_math_RGBA.__clamp[Math.round((s2 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s2 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s2 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s2 & 255 & 255;
					}
				}
				var offset2 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor + 1) + (x - mPointXFloor + 1) * 4;
				var format2 = mapFormat;
				var premultiplied2 = mapPremultiplied;
				if(premultiplied2 == null) {
					premultiplied2 = false;
				}
				if(format2 == null) {
					format2 = 0;
				}
				switch(format2) {
				case 0:
					s3 = (mapData[offset2] & 255) << 24 | (mapData[offset2 + 1] & 255) << 16 | (mapData[offset2 + 2] & 255) << 8 | mapData[offset2 + 3] & 255;
					break;
				case 1:
					s3 = (mapData[offset2 + 1] & 255) << 24 | (mapData[offset2 + 2] & 255) << 16 | (mapData[offset2 + 3] & 255) << 8 | mapData[offset2] & 255;
					break;
				case 2:
					s3 = (mapData[offset2 + 2] & 255) << 24 | (mapData[offset2 + 1] & 255) << 16 | (mapData[offset2] & 255) << 8 | mapData[offset2 + 3] & 255;
					break;
				}
				if(premultiplied2) {
					if((s3 & 255) != 0 && (s3 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s3 & 255);
						s3 = (lime_math_RGBA.__clamp[Math.round((s3 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s3 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s3 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s3 & 255 & 255;
					}
				}
				var offset3 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor) + (x - mPointXFloor) * 4;
				var format3 = mapFormat;
				var premultiplied3 = mapPremultiplied;
				if(premultiplied3 == null) {
					premultiplied3 = false;
				}
				if(format3 == null) {
					format3 = 0;
				}
				switch(format3) {
				case 0:
					s4 = (mapData[offset3] & 255) << 24 | (mapData[offset3 + 1] & 255) << 16 | (mapData[offset3 + 2] & 255) << 8 | mapData[offset3 + 3] & 255;
					break;
				case 1:
					s4 = (mapData[offset3 + 1] & 255) << 24 | (mapData[offset3 + 2] & 255) << 16 | (mapData[offset3 + 3] & 255) << 8 | mapData[offset3] & 255;
					break;
				case 2:
					s4 = (mapData[offset3 + 2] & 255) << 24 | (mapData[offset3 + 1] & 255) << 16 | (mapData[offset3] & 255) << 8 | mapData[offset3 + 3] & 255;
					break;
				}
				if(premultiplied3) {
					if((s4 & 255) != 0 && (s4 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s4 & 255);
						s4 = (lime_math_RGBA.__clamp[Math.round((s4 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s4 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s4 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s4 & 255 & 255;
					}
				}
				mapPixel = lime__$internal_graphics_ImageDataUtil.bilinear(s1,s2,s3,s4,mapPoint.x - mPointXFloor,mapPoint.y - mPointYFloor);
			} else {
				var offset4 = mapView.byteOffset + mapView.stride * (y - mPointYFloor) + (x - mPointXFloor) * 4;
				var format4 = mapFormat;
				var premultiplied4 = mapPremultiplied;
				if(premultiplied4 == null) {
					premultiplied4 = false;
				}
				if(format4 == null) {
					format4 = 0;
				}
				switch(format4) {
				case 0:
					mapPixel = (mapData[offset4] & 255) << 24 | (mapData[offset4 + 1] & 255) << 16 | (mapData[offset4 + 2] & 255) << 8 | mapData[offset4 + 3] & 255;
					break;
				case 1:
					mapPixel = (mapData[offset4 + 1] & 255) << 24 | (mapData[offset4 + 2] & 255) << 16 | (mapData[offset4 + 3] & 255) << 8 | mapData[offset4] & 255;
					break;
				case 2:
					mapPixel = (mapData[offset4 + 2] & 255) << 24 | (mapData[offset4 + 1] & 255) << 16 | (mapData[offset4] & 255) << 8 | mapData[offset4 + 3] & 255;
					break;
				}
				if(premultiplied4) {
					if((mapPixel & 255) != 0 && (mapPixel & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (mapPixel & 255);
						mapPixel = (lime_math_RGBA.__clamp[Math.round((mapPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((mapPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((mapPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | mapPixel & 255 & 255;
					}
				}
			}
			mapPixelA = (mapPixel & 255) / 255.0;
			mapPixelX = ((mapPixel >>> 24 & 255) - 128) / 255.0 * mapPixelA;
			mapPixelY = ((mapPixel >>> 16 & 255) - 128) / 255.0 * mapPixelA;
			disX = mapPixelX * componentX.x + mapPixelY * componentY.x;
			disY = mapPixelX * componentX.y + mapPixelY * componentY.y;
			disOffsetXFloor = Math.floor(disX * sourceView.width);
			disOffsetYFloor = Math.floor(disY * sourceView.height);
			if(smooth) {
				var offset5 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor + 1) + (x + disOffsetXFloor) * 4;
				var format5 = sourceFormat;
				var premultiplied5 = sourcePremultiplied;
				if(premultiplied5 == null) {
					premultiplied5 = false;
				}
				if(format5 == null) {
					format5 = 0;
				}
				switch(format5) {
				case 0:
					s1 = (sourceData[offset5] & 255) << 24 | (sourceData[offset5 + 1] & 255) << 16 | (sourceData[offset5 + 2] & 255) << 8 | sourceData[offset5 + 3] & 255;
					break;
				case 1:
					s1 = (sourceData[offset5 + 1] & 255) << 24 | (sourceData[offset5 + 2] & 255) << 16 | (sourceData[offset5 + 3] & 255) << 8 | sourceData[offset5] & 255;
					break;
				case 2:
					s1 = (sourceData[offset5 + 2] & 255) << 24 | (sourceData[offset5 + 1] & 255) << 16 | (sourceData[offset5] & 255) << 8 | sourceData[offset5 + 3] & 255;
					break;
				}
				if(premultiplied5) {
					if((s1 & 255) != 0 && (s1 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s1 & 255);
						s1 = (lime_math_RGBA.__clamp[Math.round((s1 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s1 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s1 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s1 & 255 & 255;
					}
				}
				var offset6 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor + 1) * 4;
				var format6 = sourceFormat;
				var premultiplied6 = sourcePremultiplied;
				if(premultiplied6 == null) {
					premultiplied6 = false;
				}
				if(format6 == null) {
					format6 = 0;
				}
				switch(format6) {
				case 0:
					s2 = (sourceData[offset6] & 255) << 24 | (sourceData[offset6 + 1] & 255) << 16 | (sourceData[offset6 + 2] & 255) << 8 | sourceData[offset6 + 3] & 255;
					break;
				case 1:
					s2 = (sourceData[offset6 + 1] & 255) << 24 | (sourceData[offset6 + 2] & 255) << 16 | (sourceData[offset6 + 3] & 255) << 8 | sourceData[offset6] & 255;
					break;
				case 2:
					s2 = (sourceData[offset6 + 2] & 255) << 24 | (sourceData[offset6 + 1] & 255) << 16 | (sourceData[offset6] & 255) << 8 | sourceData[offset6 + 3] & 255;
					break;
				}
				if(premultiplied6) {
					if((s2 & 255) != 0 && (s2 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s2 & 255);
						s2 = (lime_math_RGBA.__clamp[Math.round((s2 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s2 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s2 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s2 & 255 & 255;
					}
				}
				var offset7 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor + 1) + (x + disOffsetXFloor + 1) * 4;
				var format7 = sourceFormat;
				var premultiplied7 = sourcePremultiplied;
				if(premultiplied7 == null) {
					premultiplied7 = false;
				}
				if(format7 == null) {
					format7 = 0;
				}
				switch(format7) {
				case 0:
					s3 = (sourceData[offset7] & 255) << 24 | (sourceData[offset7 + 1] & 255) << 16 | (sourceData[offset7 + 2] & 255) << 8 | sourceData[offset7 + 3] & 255;
					break;
				case 1:
					s3 = (sourceData[offset7 + 1] & 255) << 24 | (sourceData[offset7 + 2] & 255) << 16 | (sourceData[offset7 + 3] & 255) << 8 | sourceData[offset7] & 255;
					break;
				case 2:
					s3 = (sourceData[offset7 + 2] & 255) << 24 | (sourceData[offset7 + 1] & 255) << 16 | (sourceData[offset7] & 255) << 8 | sourceData[offset7 + 3] & 255;
					break;
				}
				if(premultiplied7) {
					if((s3 & 255) != 0 && (s3 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s3 & 255);
						s3 = (lime_math_RGBA.__clamp[Math.round((s3 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s3 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s3 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s3 & 255 & 255;
					}
				}
				var offset8 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor) * 4;
				var format8 = sourceFormat;
				var premultiplied8 = sourcePremultiplied;
				if(premultiplied8 == null) {
					premultiplied8 = false;
				}
				if(format8 == null) {
					format8 = 0;
				}
				switch(format8) {
				case 0:
					s4 = (sourceData[offset8] & 255) << 24 | (sourceData[offset8 + 1] & 255) << 16 | (sourceData[offset8 + 2] & 255) << 8 | sourceData[offset8 + 3] & 255;
					break;
				case 1:
					s4 = (sourceData[offset8 + 1] & 255) << 24 | (sourceData[offset8 + 2] & 255) << 16 | (sourceData[offset8 + 3] & 255) << 8 | sourceData[offset8] & 255;
					break;
				case 2:
					s4 = (sourceData[offset8 + 2] & 255) << 24 | (sourceData[offset8 + 1] & 255) << 16 | (sourceData[offset8] & 255) << 8 | sourceData[offset8 + 3] & 255;
					break;
				}
				if(premultiplied8) {
					if((s4 & 255) != 0 && (s4 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s4 & 255);
						s4 = (lime_math_RGBA.__clamp[Math.round((s4 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s4 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s4 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s4 & 255 & 255;
					}
				}
				sourcePixel = lime__$internal_graphics_ImageDataUtil.bilinear(s1,s2,s3,s4,disX * sourceView.width - disOffsetXFloor,disY * sourceView.height - disOffsetYFloor);
			} else {
				var offset9 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor) * 4;
				var format9 = sourceFormat;
				var premultiplied9 = sourcePremultiplied;
				if(premultiplied9 == null) {
					premultiplied9 = false;
				}
				if(format9 == null) {
					format9 = 0;
				}
				switch(format9) {
				case 0:
					sourcePixel = (sourceData[offset9] & 255) << 24 | (sourceData[offset9 + 1] & 255) << 16 | (sourceData[offset9 + 2] & 255) << 8 | sourceData[offset9 + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[offset9 + 1] & 255) << 24 | (sourceData[offset9 + 2] & 255) << 16 | (sourceData[offset9 + 3] & 255) << 8 | sourceData[offset9] & 255;
					break;
				case 2:
					sourcePixel = (sourceData[offset9 + 2] & 255) << 24 | (sourceData[offset9 + 1] & 255) << 16 | (sourceData[offset9] & 255) << 8 | sourceData[offset9 + 3] & 255;
					break;
				}
				if(premultiplied9) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
						sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
			}
			var format10 = targetFormat;
			var premultiplied10 = targetPremultiplied;
			if(premultiplied10 == null) {
				premultiplied10 = false;
			}
			if(format10 == null) {
				format10 = 0;
			}
			if(premultiplied10) {
				if((sourcePixel & 255) == 0) {
					if(sourcePixel != 0) {
						sourcePixel = 0;
					}
				} else if((sourcePixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[sourcePixel & 255];
					sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			switch(format10) {
			case 0:
				targetData[sourceOffset] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 8 & 255;
				targetData[sourceOffset + 3] = sourcePixel & 255;
				break;
			case 1:
				targetData[sourceOffset] = sourcePixel & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 3] = sourcePixel >>> 8 & 255;
				break;
			case 2:
				targetData[sourceOffset] = sourcePixel >>> 8 & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 3] = sourcePixel & 255;
				break;
			}
		}
	}
	target.dirty = true;
	target.version++;
};
lime__$internal_graphics_ImageDataUtil.bilinear = function(s1,s2,s3,s4,su,sv) {
	return lime__$internal_graphics_ImageDataUtil.lerpRGBA(lime__$internal_graphics_ImageDataUtil.lerpRGBA(s4,s2,su),lime__$internal_graphics_ImageDataUtil.lerpRGBA(s1,s3,su),sv);
};
lime__$internal_graphics_ImageDataUtil.lerpRGBA = function(v0,v1,x) {
	var result = 0;
	var value = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 24 & 255,v1 >>> 24 & 255,x));
	result = (value & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | result & 255 & 255;
	var value = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 16 & 255,v1 >>> 16 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | result & 255 & 255;
	var value = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 8 & 255,v1 >>> 8 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | result & 255 & 255;
	var value = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 & 255,v1 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | value & 255;
	return result;
};
lime__$internal_graphics_ImageDataUtil.lerp4f = function(v0,v1,x) {
	return new lime_math_Vector4(lime__$internal_graphics_ImageDataUtil.lerp(v0.x,v1.x,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.y,v1.y,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.z,v1.z,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.w,v1.w,x));
};
lime__$internal_graphics_ImageDataUtil.lerp = function(v0,v1,x) {
	return (1.0 - x) * v0 + x * v1;
};
lime__$internal_graphics_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math_ColorMatrix.getAlphaTable(colorMatrix);
	var redTable = lime_math_ColorMatrix.getRedTable(colorMatrix);
	var greenTable = lime_math_ColorMatrix.getGreenTable(colorMatrix);
	var blueTable = lime_math_ColorMatrix.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel = 0;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g3 = dataView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			offset = row + x * 4;
			var format1 = format;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >>> 24 & 255] & 255) << 24 | (greenTable[pixel >>> 16 & 255] & 255) << 16 | (blueTable[pixel >>> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			var format2 = format;
			var premultiplied2 = premultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied2) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel._hx_index) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel._hx_index) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return;
	}
	var srcView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel = 0;
	var destPixel = 0;
	var value = 0;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g3 = destView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var format = srcFormat;
			var premultiplied = srcPremultiplied;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format == null) {
				format = 0;
			}
			switch(format) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			var format1 = destFormat;
			var premultiplied1 = destPremultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_RGBA.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >>> 24 & 255;
				break;
			case 1:
				value = srcPixel >>> 16 & 255;
				break;
			case 2:
				value = srcPixel >>> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 1:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 2:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				break;
			case 3:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value & 255;
				break;
			}
			var format2 = destFormat;
			var premultiplied2 = destPremultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied2) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(image.width == sourceImage.width && image.height == sourceImage.height && sourceRect.width == sourceImage.width && sourceRect.height == sourceImage.height && sourceRect.x == 0 && sourceRect.y == 0 && destPoint.x == 0 && destPoint.y == 0 && alphaImage == null && alphaPoint == null && mergeAlpha == false && image.get_format() == sourceImage.get_format()) {
		image.buffer.data.set(sourceImage.buffer.data);
	} else {
		var sourceData = sourceImage.buffer.data;
		var destData = image.buffer.data;
		if(sourceData == null || destData == null) {
			return;
		}
		var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
		var destRect = new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height);
		var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,destRect);
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePosition;
		var destPosition;
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var sourcePixel = 0;
		var destPixel = 0;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourceBytesPerPixel = sourceImage.buffer.bitsPerPixel / 8 | 0;
		var destBytesPerPixel = image.buffer.bitsPerPixel / 8 | 0;
		var useAlphaImage = alphaImage != null && alphaImage.get_transparent();
		var blend = mergeAlpha || useAlphaImage && !image.get_transparent() || !mergeAlpha && !image.get_transparent() && sourceImage.get_transparent();
		if(!useAlphaImage) {
			if(blend) {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = destFormat;
						var premultiplied1 = destPremultiplied;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						switch(format1) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(premultiplied1) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math_RGBA.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						sourceAlpha = (sourcePixel & 255) / 255.0;
						destAlpha = (destPixel & 255) / 255.0;
						oneMinusSourceAlpha = 1 - sourceAlpha;
						blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
						if(blendAlpha == 0) {
							destPixel = 0;
						} else {
							var value = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value1 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value2 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
							var value3 = lime_math_RGBA.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
						}
						var format2 = destFormat;
						var premultiplied2 = destPremultiplied;
						if(premultiplied2 == null) {
							premultiplied2 = false;
						}
						if(format2 == null) {
							format2 = 0;
						}
						if(premultiplied2) {
							if((destPixel & 255) == 0) {
								if(destPixel != 0) {
									destPixel = 0;
								}
							} else if((destPixel & 255) != 255) {
								lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
								destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
							}
						}
						switch(format2) {
						case 0:
							destData[destPosition] = destPixel >>> 24 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 8 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						case 1:
							destData[destPosition] = destPixel & 255;
							destData[destPosition + 1] = destPixel >>> 24 & 255;
							destData[destPosition + 2] = destPixel >>> 16 & 255;
							destData[destPosition + 3] = destPixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = destPixel >>> 8 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 24 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			} else if(sourceFormat == destFormat && sourcePremultiplied == destPremultiplied && sourceBytesPerPixel == destBytesPerPixel) {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					destData.set(sourceData.subarray(sourcePosition,sourcePosition + destView.width * destBytesPerPixel),destPosition);
				}
			} else {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = destFormat;
						var premultiplied1 = destPremultiplied;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						if(premultiplied1) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(format1) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			}
		} else {
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPosition;
			var alphaPixel = 0;
			var alphaView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(sourceView.x + (alphaPoint == null ? 0 : alphaPoint.x),sourceView.y + (alphaPoint == null ? 0 : alphaPoint.y),sourceView.width,sourceView.height));
			destView.clip(destPoint.x | 0,destPoint.y | 0,alphaView.width,alphaView.height);
			if(blend) {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = destFormat;
						var premultiplied1 = destPremultiplied;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						switch(format1) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(premultiplied1) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math_RGBA.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						var format2 = alphaFormat;
						var premultiplied2 = false;
						if(premultiplied2 == null) {
							premultiplied2 = false;
						}
						if(format2 == null) {
							format2 = 0;
						}
						switch(format2) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						if(premultiplied2) {
							if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (alphaPixel & 255);
								alphaPixel = (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | alphaPixel & 255 & 255;
							}
						}
						sourceAlpha = (alphaPixel & 255) / 255.0 * ((sourcePixel & 255) / 255.0);
						if(sourceAlpha > 0) {
							destAlpha = (destPixel & 255) / 255.0;
							oneMinusSourceAlpha = 1 - sourceAlpha;
							blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
							var value = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value1 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value2 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
							var value3 = lime_math_RGBA.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
							var format3 = destFormat;
							var premultiplied3 = destPremultiplied;
							if(premultiplied3 == null) {
								premultiplied3 = false;
							}
							if(format3 == null) {
								format3 = 0;
							}
							if(premultiplied3) {
								if((destPixel & 255) == 0) {
									if(destPixel != 0) {
										destPixel = 0;
									}
								} else if((destPixel & 255) != 255) {
									lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
									destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
								}
							}
							switch(format3) {
							case 0:
								destData[destPosition] = destPixel >>> 24 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 8 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							case 1:
								destData[destPosition] = destPixel & 255;
								destData[destPosition + 1] = destPixel >>> 24 & 255;
								destData[destPosition + 2] = destPixel >>> 16 & 255;
								destData[destPosition + 3] = destPixel >>> 8 & 255;
								break;
							case 2:
								destData[destPosition] = destPixel >>> 8 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 24 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							}
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			} else {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = alphaFormat;
						var premultiplied1 = false;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						switch(format1) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						if(premultiplied1) {
							if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (alphaPixel & 255);
								alphaPixel = (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | alphaPixel & 255 & 255;
							}
						}
						var value = Math.round((sourcePixel & 255) * ((alphaPixel & 255) / 255));
						sourcePixel = (sourcePixel >>> 24 & 255 & 255) << 24 | (sourcePixel >>> 16 & 255 & 255) << 16 | (sourcePixel >>> 8 & 255 & 255) << 8 | value & 255;
						var format2 = destFormat;
						var premultiplied2 = destPremultiplied;
						if(premultiplied2 == null) {
							premultiplied2 = false;
						}
						if(format2 == null) {
							format2 = 0;
						}
						if(premultiplied2) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(format2) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		fillColor = rgba;
		break;
	case 2:
		var bgra = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		fillColor = rgba;
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g3 = dataView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var offset = row + x * 4;
			var format1 = format;
			var premultiplied = false;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			if(premultiplied) {
				if((fillColor & 255) == 0) {
					if(fillColor != 0) {
						fillColor = 0;
					}
				} else if((fillColor & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
					fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
				}
			}
			switch(format1) {
			case 0:
				data[offset] = fillColor >>> 24 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >>> 24 & 255;
				data[offset + 2] = fillColor >>> 16 & 255;
				data[offset + 3] = fillColor >>> 8 & 255;
				break;
			case 2:
				data[offset] = fillColor >>> 8 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	if(format == 1) {
		color = (color & 16777215) << 8 | color >> 24 & 255;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var fillColor = color;
	var hitColor = 0;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	var format1 = format;
	var premultiplied1 = premultiplied;
	if(premultiplied1 == null) {
		premultiplied1 = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	switch(format1) {
	case 0:
		hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied1) {
		if((hitColor & 255) != 0 && (hitColor & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (hitColor & 255);
			hitColor = (lime_math_RGBA.__clamp[Math.round((hitColor >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((hitColor >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((hitColor >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | hitColor & 255 & 255;
		}
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
		hitColor = (hitColor >>> 24 & 255 & 255) << 24 | (hitColor >>> 16 & 255 & 255) << 16 | (hitColor >>> 8 & 255 & 255) << 8 | 255;
	}
	if(fillColor == hitColor) {
		return;
	}
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	var curPointX;
	var curPointY;
	var nextPointX;
	var nextPointY;
	var nextPointOffset;
	var readColor = 0;
	while(queue.length > 0) {
		curPointY = queue.pop();
		curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			nextPointX = curPointX + dx[i];
			nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) {
				continue;
			}
			nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			var format1 = format;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 1:
				readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
				break;
			case 2:
				readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((readColor & 255) != 0 && (readColor & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (readColor & 255);
					readColor = (lime_math_RGBA.__clamp[Math.round((readColor >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((readColor >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((readColor >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | readColor & 255 & 255;
				}
			}
			if(readColor == hitColor) {
				var format2 = format;
				var premultiplied2 = false;
				if(premultiplied2 == null) {
					premultiplied2 = false;
				}
				if(format2 == null) {
					format2 = 0;
				}
				if(premultiplied2) {
					if((fillColor & 255) == 0) {
						if(fillColor != 0) {
							fillColor = 0;
						}
					} else if((fillColor & 255) != 255) {
						lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
						fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
					}
				}
				switch(format2) {
				case 0:
					data[nextPointOffset] = fillColor >>> 24 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 8 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 1:
					data[nextPointOffset] = fillColor & 255;
					data[nextPointOffset + 1] = fillColor >>> 24 & 255;
					data[nextPointOffset + 2] = fillColor >>> 16 & 255;
					data[nextPointOffset + 3] = fillColor >>> 8 & 255;
					break;
				case 2:
					data[nextPointOffset] = fillColor >>> 8 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 24 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				}
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.gaussianBlur = function(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality,strength,color) {
	if(strength == null) {
		strength = 1;
	}
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	var imagePremultiplied = image.get_premultiplied();
	if(imagePremultiplied) {
		image.set_premultiplied(false);
	}
	lime__$internal_graphics_StackBlur.blur(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality);
	image.dirty = true;
	image.version++;
	if(imagePremultiplied) {
		image.set_premultiplied(true);
	}
	return image;
};
lime__$internal_graphics_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var _color;
	var _mask;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb = mask;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_mask = rgba;
		break;
	case 2:
		var bgra = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba;
		var bgra = mask;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_mask = rgba;
		break;
	default:
		_color = color;
		_mask = mask;
	}
	if(!image.get_transparent()) {
		_color = (_color >>> 24 & 255 & 255) << 24 | (_color >>> 16 & 255 & 255) << 16 | (_color >>> 8 & 255 & 255) << 8 | 255;
		_mask = (_mask >>> 24 & 255 & 255) << 24 | (_mask >>> 16 & 255 & 255) << 16 | (_mask >>> 8 & 255 & 255) << 8 | 255;
	}
	var pixel;
	var hit;
	var _g = 0;
	var _g1 = image.width;
	while(_g < _g1) {
		var x = _g++;
		hit = false;
		var _g2 = 0;
		var _g3 = image.height;
		while(_g2 < _g3) {
			var y = _g2++;
			pixel = image.getPixel32(x,y,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(x < left) {
					left = x;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var ix;
	var _g = 0;
	var _g1 = image.width;
	while(_g < _g1) {
		var x = _g++;
		ix = image.width - 1 - x;
		hit = false;
		var _g2 = 0;
		var _g3 = image.height;
		while(_g2 < _g3) {
			var y = _g2++;
			pixel = image.getPixel32(ix,y,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(ix > right) {
					right = ix;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var _g = 0;
	var _g1 = image.height;
	while(_g < _g1) {
		var y = _g++;
		hit = false;
		var _g2 = 0;
		var _g3 = image.width;
		while(_g2 < _g3) {
			var x = _g2++;
			pixel = image.getPixel32(x,y,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(y < top) {
					top = y;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var iy;
	var _g = 0;
	var _g1 = image.height;
	while(_g < _g1) {
		var y = _g++;
		iy = image.height - 1 - y;
		hit = false;
		var _g2 = 0;
		var _g3 = image.width;
		while(_g2 < _g3) {
			var x = _g2++;
			pixel = image.getPixel32(x,iy,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(iy > bottom) {
					bottom = iy;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) {
		++w;
	}
	if(h > 0) {
		++h;
	}
	if(w < 0) {
		w = 0;
	}
	if(h < 0) {
		h = 0;
	}
	if(left == right) {
		w = 1;
	}
	if(top == bottom) {
		h = 1;
	}
	if(left > image.width) {
		left = 0;
	}
	if(top > image.height) {
		top = 0;
	}
	return new lime_math_Rectangle(left,top,w,h);
};
lime__$internal_graphics_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel = 0;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	switch(format1) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 0;
	switch(format) {
	case 1:
		var this1 = 0;
		var argb = this1;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var this1 = 0;
		var bgra = this1;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime__$internal_graphics_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel = 0;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	switch(format1) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		var this1 = 0;
		var argb = this1;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var this1 = 0;
		var bgra = this1;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime__$internal_graphics_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) {
		return null;
	}
	var length = rect.width * rect.height | 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length * 4));
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb = 0;
	var bgra = 0;
	var pixel = 0;
	var destPosition = 0;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		position = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g3 = dataView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var format1 = sourceFormat;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				var this1 = 0;
				var argb1 = this1;
				argb1 = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
				argb = argb1;
				pixel = argb;
				break;
			case 2:
				var this2 = 0;
				var bgra1 = this2;
				bgra1 = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
				bgra = bgra1;
				pixel = bgra;
				break;
			default:
			}
			bytes.b[destPosition++] = pixel >>> 24 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 16 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 8 & 255 & 255;
			bytes.b[destPosition++] = pixel & 255 & 255;
			position += 4;
		}
	}
	return bytes;
};
lime__$internal_graphics_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) {
		return;
	}
	var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel = 0;
	var destPixel = 0;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		sourcePosition = sourceView.byteOffset + sourceView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g3 = destView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var format = sourceFormat;
			var premultiplied = sourcePremultiplied;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format == null) {
				format = 0;
			}
			switch(format) {
			case 0:
				sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 1:
				sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
				break;
			case 2:
				sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
					sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			var format1 = destFormat;
			var premultiplied1 = destPremultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_RGBA.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			var value = ((sourcePixel >>> 24 & 255) * redMultiplier + (destPixel >>> 24 & 255) * (256 - redMultiplier)) / 256 | 0;
			destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			var value1 = ((sourcePixel >>> 16 & 255) * greenMultiplier + (destPixel >>> 16 & 255) * (256 - greenMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			var value2 = ((sourcePixel >>> 8 & 255) * blueMultiplier + (destPixel >>> 8 & 255) * (256 - blueMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
			var value3 = ((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
			var format2 = destFormat;
			var premultiplied2 = destPremultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied2) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			sourcePosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel = 0;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var offset = i * 4;
		var format1 = format;
		var premultiplied = false;
		if(premultiplied == null) {
			premultiplied = false;
		}
		if(format1 == null) {
			format1 = 0;
		}
		switch(format1) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if(premultiplied) {
			if((pixel & 255) != 0 && (pixel & 255) != 255) {
				lime_math_RGBA.unmult = 255.0 / (pixel & 255);
				pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
			}
		}
		var offset1 = i * 4;
		var format2 = format;
		var premultiplied1 = true;
		if(premultiplied1 == null) {
			premultiplied1 = false;
		}
		if(format2 == null) {
			format2 = 0;
		}
		if(premultiplied1) {
			if((pixel & 255) == 0) {
				if(pixel != 0) {
					pixel = 0;
				}
			} else if((pixel & 255) != 255) {
				lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
				pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
			}
		}
		switch(format2) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) {
		return;
	}
	var elements = newWidth * newHeight * 4;
	var array = null;
	var vector = null;
	var view = null;
	var buffer1 = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else if(array != null) {
		this1 = new Uint8Array(array);
	} else if(vector != null) {
		this1 = new Uint8Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint8Array(view);
	} else if(buffer1 != null) {
		if(len == null) {
			this1 = new Uint8Array(buffer1,0);
		} else {
			this1 = new Uint8Array(buffer1,0,len);
		}
	} else {
		this1 = null;
	}
	var newBuffer = new lime_graphics_ImageBuffer(this1,newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	var _g1 = newHeight;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g3 = newWidth;
		while(_g2 < _g3) {
			var x = _g2++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			sourceIndexX = sourceX < imageWidth - 1 ? sourceIndex + 4 : sourceIndex;
			sourceIndexY = sourceY < imageHeight - 1 ? sourceIndex + imageWidth * 4 : sourceIndex;
			sourceIndexXY = sourceIndexX != sourceIndex ? sourceIndexY + 4 : sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			newData[index] = (UInt.toFloat(data[sourceIndex]) * uOpposite + UInt.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (UInt.toFloat(data[sourceIndexY]) * uOpposite + UInt.toFloat(data[sourceIndexXY]) * uRatio) * vRatio | 0;
			newData[index + 1] = (UInt.toFloat(data[sourceIndex + 1]) * uOpposite + UInt.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (UInt.toFloat(data[sourceIndexY + 1]) * uOpposite + UInt.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio | 0;
			newData[index + 2] = (UInt.toFloat(data[sourceIndex + 2]) * uOpposite + UInt.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (UInt.toFloat(data[sourceIndexY + 2]) * uOpposite + UInt.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio | 0;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) {
				newData[index + 3] = 0;
			} else {
				newData[index + 3] = data[sourceIndex + 3];
			}
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
	buffer.__srcImage = null;
	buffer.__srcImageData = null;
	buffer.__srcCanvas = null;
	buffer.__srcContext = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var elements = newWidth * newHeight * 4;
	var array = null;
	var vector = null;
	var view = null;
	var buffer1 = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else if(array != null) {
		this1 = new Uint8Array(array);
	} else if(vector != null) {
		this1 = new Uint8Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint8Array(view);
	} else if(buffer1 != null) {
		if(len == null) {
			this1 = new Uint8Array(buffer1,0);
		} else {
			this1 = new Uint8Array(buffer1,0,len);
		}
	} else {
		this1 = null;
	}
	var newData = this1;
	var sourceIndex;
	var index;
	var _g = 0;
	var _g1 = buffer.height;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g3 = buffer.width;
		while(_g2 < _g3) {
			var x = _g2++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
	buffer.__srcImage = null;
	buffer.__srcImageData = null;
	buffer.__srcCanvas = null;
	buffer.__srcContext = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	switch(image.get_format()) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba;
		break;
	default:
		pixel = color;
	}
	var this1 = 0;
	var source = this1;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((source & 255) != 0 && (source & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (source & 255);
			source = (lime_math_RGBA.__clamp[Math.round((source >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((source >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((source >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | source & 255 & 255;
		}
	}
	var value = source & 255;
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | value & 255;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = pixel >>> 24 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >>> 24 & 255;
		data[offset + 2] = pixel >>> 16 & 255;
		data[offset + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data[offset] = pixel >>> 8 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba;
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = pixel >>> 24 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >>> 24 & 255;
		data[offset + 2] = pixel >>> 16 & 255;
		data[offset + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data[offset] = pixel >>> 8 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixels = function(image,rect,bytePointer,format,endian) {
	if(image.buffer.data == null) {
		return;
	}
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var color;
	var pixel;
	var transparent = image.get_transparent();
	var bytes = bytePointer.bytes;
	var dataPosition = bytePointer.offset;
	var littleEndian = endian != lime_system_Endian.BIG_ENDIAN;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g3 = dataView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			if(littleEndian) {
				color = bytes.getInt32(dataPosition);
			} else {
				color = bytes.b[dataPosition + 3] | bytes.b[dataPosition + 2] << 8 | bytes.b[dataPosition + 1] << 16 | bytes.b[dataPosition] << 24;
			}
			dataPosition += 4;
			switch(format) {
			case 1:
				var argb = color;
				var this1 = 0;
				var rgba = this1;
				rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
				pixel = rgba;
				break;
			case 2:
				var bgra = color;
				var this2 = 0;
				var rgba1 = this2;
				rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
				pixel = rgba1;
				break;
			default:
				pixel = color;
			}
			if(!transparent) {
				pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
			}
			var offset = row + x * 4;
			var format1 = sourceFormat;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			if(premultiplied1) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format1) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.threshold = function(image,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
	var _color;
	var _mask;
	var _threshold;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb = mask;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_mask = rgba;
		var argb = threshold;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_threshold = rgba;
		break;
	case 2:
		var bgra = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba;
		var bgra = mask;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_mask = rgba;
		var bgra = threshold;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_threshold = rgba;
		break;
	default:
		_color = color;
		_mask = mask;
		_threshold = threshold;
	}
	var _operation;
	switch(operation) {
	case "!=":
		_operation = 0;
		break;
	case "<":
		_operation = 2;
		break;
	case "<=":
		_operation = 3;
		break;
	case "==":
		_operation = 1;
		break;
	case ">":
		_operation = 4;
		break;
	case ">=":
		_operation = 5;
		break;
	default:
		_operation = -1;
	}
	if(_operation == -1) {
		return 0;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return 0;
	}
	var hits = 0;
	var srcView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel = 0;
	var destPixel = 0;
	var pixelMask;
	var test;
	var value;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g3 = destView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var format = srcFormat;
			var premultiplied = srcPremultiplied;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format == null) {
				format = 0;
			}
			switch(format) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			pixelMask = srcPixel & _mask;
			var tmp1 = pixelMask >>> 24 & 255;
			var tmp2 = _threshold >>> 24 & 255;
			if(tmp1 != tmp2) {
				value = UInt.gt(tmp1,tmp2) ? 1 : -1;
			} else {
				tmp1 = pixelMask >>> 16 & 255;
				tmp2 = _threshold >>> 16 & 255;
				if(tmp1 != tmp2) {
					value = UInt.gt(tmp1,tmp2) ? 1 : -1;
				} else {
					tmp1 = pixelMask >>> 8 & 255;
					tmp2 = _threshold >>> 8 & 255;
					if(tmp1 != tmp2) {
						value = UInt.gt(tmp1,tmp2) ? 1 : -1;
					} else {
						tmp1 = pixelMask & 255;
						tmp2 = _threshold & 255;
						value = tmp1 != tmp2 ? UInt.gt(tmp1,tmp2) ? 1 : -1 : 0;
					}
				}
			}
			switch(_operation) {
			case 0:
				test = value != 0;
				break;
			case 1:
				test = value == 0;
				break;
			case 2:
				test = value == -1;
				break;
			case 3:
				test = value == 0 || value == -1;
				break;
			case 4:
				test = value == 1;
				break;
			case 5:
				test = value == 0 || value == 1;
				break;
			default:
				test = false;
			}
			if(test) {
				var format1 = destFormat;
				var premultiplied1 = destPremultiplied;
				if(premultiplied1 == null) {
					premultiplied1 = false;
				}
				if(format1 == null) {
					format1 = 0;
				}
				if(premultiplied1) {
					if((_color & 255) == 0) {
						if(_color != 0) {
							_color = 0;
						}
					} else if((_color & 255) != 255) {
						lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[_color & 255];
						_color = ((_color >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((_color >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((_color >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | _color & 255 & 255;
					}
				}
				switch(format1) {
				case 0:
					destData[destPosition] = _color >>> 24 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 8 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				case 1:
					destData[destPosition] = _color & 255;
					destData[destPosition + 1] = _color >>> 24 & 255;
					destData[destPosition + 2] = _color >>> 16 & 255;
					destData[destPosition + 3] = _color >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = _color >>> 8 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 24 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				}
				++hits;
			} else if(copySource) {
				var format2 = destFormat;
				var premultiplied2 = destPremultiplied;
				if(premultiplied2 == null) {
					premultiplied2 = false;
				}
				if(format2 == null) {
					format2 = 0;
				}
				if(premultiplied2) {
					if((srcPixel & 255) == 0) {
						if(srcPixel != 0) {
							srcPixel = 0;
						}
					} else if((srcPixel & 255) != 255) {
						lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[srcPixel & 255];
						srcPixel = ((srcPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((srcPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((srcPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | srcPixel & 255 & 255;
					}
				}
				switch(format2) {
				case 0:
					destData[destPosition] = srcPixel >>> 24 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 8 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				case 1:
					destData[destPosition] = srcPixel & 255;
					destData[destPosition + 1] = srcPixel >>> 24 & 255;
					destData[destPosition + 2] = srcPixel >>> 16 & 255;
					destData[destPosition + 3] = srcPixel >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = srcPixel >>> 8 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 24 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				}
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	if(hits > 0) {
		image.dirty = true;
		image.version++;
	}
	return hits;
};
lime__$internal_graphics_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel = 0;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var offset = i * 4;
		var format1 = format;
		var premultiplied = true;
		if(premultiplied == null) {
			premultiplied = false;
		}
		if(format1 == null) {
			format1 = 0;
		}
		switch(format1) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if(premultiplied) {
			if((pixel & 255) != 0 && (pixel & 255) != 255) {
				lime_math_RGBA.unmult = 255.0 / (pixel & 255);
				pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
			}
		}
		var offset1 = i * 4;
		var format2 = format;
		var premultiplied1 = false;
		if(premultiplied1 == null) {
			premultiplied1 = false;
		}
		if(format2 == null) {
			format2 = 0;
		}
		if(premultiplied1) {
			if((pixel & 255) == 0) {
				if(pixel != 0) {
					pixel = 0;
				}
			} else if((pixel & 255) != 255) {
				lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
				pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
			}
		}
		switch(format2) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.__boxBlur = function(imgA,imgB,w,h,bx,by) {
	imgB.set(imgA);
	var bx1 = bx | 0;
	var by1 = by | 0;
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,0);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,1);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,2);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,3);
	var iarr = 1 / (by1 + by1 + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4;
		li = ti;
		ri = ti + by1 * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (by1 + 1) * fv;
		var _g2 = 0;
		var _g3 = by1;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = by1 + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = by1 + 1;
		var _g7 = h - by1;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - by1;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
	var iarr = 1 / (by1 + by1 + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4 + 1;
		li = ti;
		ri = ti + by1 * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (by1 + 1) * fv;
		var _g2 = 0;
		var _g3 = by1;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = by1 + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = by1 + 1;
		var _g7 = h - by1;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - by1;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
	var iarr = 1 / (by1 + by1 + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4 + 2;
		li = ti;
		ri = ti + by1 * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (by1 + 1) * fv;
		var _g2 = 0;
		var _g3 = by1;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = by1 + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = by1 + 1;
		var _g7 = h - by1;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - by1;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
	var iarr = 1 / (by1 + by1 + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4 + 3;
		li = ti;
		ri = ti + by1 * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (by1 + 1) * fv;
		var _g2 = 0;
		var _g3 = by1;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = by1 + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = by1 + 1;
		var _g7 = h - by1;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - by1;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__boxBlurH = function(imgA,imgB,w,h,r,off) {
	var iarr = 1 / (r + r + 1);
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = h;
	while(_g < _g1) {
		var i = _g++;
		ti = i * w;
		li = ti;
		ri = ti + r;
		fv = imgA[ti * 4 + off];
		lv = imgA[(ti + w - 1) * 4 + off];
		val = (r + 1) * fv;
		var _g2 = 0;
		var _g3 = r;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[(ti + j) * 4 + off];
		}
		var _g4 = 0;
		var _g5 = r + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri * 4 + off] - fv);
			imgB[ti * 4 + off] = Math.round(UInt.toFloat(val) * iarr);
			++ri;
			++ti;
		}
		var _g6 = r + 1;
		var _g7 = w - r;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri * 4 + off] - imgA[li * 4 + off]);
			imgB[ti * 4 + off] = Math.round(UInt.toFloat(val) * iarr);
			++ri;
			++li;
			++ti;
		}
		var _g8 = w - r;
		var _g9 = w;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li * 4 + off]);
			imgB[ti * 4 + off] = Math.round(UInt.toFloat(val) * iarr);
			++li;
			++ti;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__boxBlurT = function(imgA,imgB,w,h,r,off) {
	var iarr = 1 / (r + r + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4 + off;
		li = ti;
		ri = ti + r * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (r + 1) * fv;
		var _g2 = 0;
		var _g3 = r;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = r + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = r + 1;
		var _g7 = h - r;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - r;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__calculateSourceOffset = function(sourceRect,destPoint,destX,destY) {
	var sourceX = destX - (destPoint.x | 0);
	var sourceY = destY - (destPoint.y | 0);
	var offset = 0;
	if(sourceX < 0 || sourceY < 0 || sourceX >= sourceRect.width || sourceY >= sourceRect.height) {
		offset = -1;
	} else {
		offset = 4 * (sourceY * (sourceRect.width | 0) + sourceX);
	}
	return offset;
};
lime__$internal_graphics_ImageDataUtil.__getBoxesForGaussianBlur = function(sigma,n) {
	var wIdeal = Math.sqrt(12 * sigma * sigma / n + 1);
	var wl = Math.floor(wIdeal);
	if(wl % 2 == 0) {
		--wl;
	}
	var wu = wl + 2;
	var mIdeal = (12 * sigma * sigma - n * wl * wl - 4 * n * wl - 3 * n) / (-4 * wl - 4);
	var m = Math.round(mIdeal);
	var sizes = [];
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		sizes.push(i < m ? wl : wu);
	}
	return sizes;
};
lime__$internal_graphics_ImageDataUtil.__pixelCompare = function(n1,n2) {
	var tmp1 = n1 >>> 24 & 255;
	var tmp2 = n2 >>> 24 & 255;
	if(tmp1 != tmp2) {
		if(UInt.gt(tmp1,tmp2)) {
			return 1;
		} else {
			return -1;
		}
	} else {
		tmp1 = n1 >>> 16 & 255;
		tmp2 = n2 >>> 16 & 255;
		if(tmp1 != tmp2) {
			if(UInt.gt(tmp1,tmp2)) {
				return 1;
			} else {
				return -1;
			}
		} else {
			tmp1 = n1 >>> 8 & 255;
			tmp2 = n2 >>> 8 & 255;
			if(tmp1 != tmp2) {
				if(UInt.gt(tmp1,tmp2)) {
					return 1;
				} else {
					return -1;
				}
			} else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) {
					if(UInt.gt(tmp1,tmp2)) {
						return 1;
					} else {
						return -1;
					}
				} else {
					return 0;
				}
			}
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__translatePixel = function(imgB,sourceRect,destRect,destPoint,destX,destY,strength) {
	var d = 4 * (destY * (destRect.width | 0) + destX);
	var s = lime__$internal_graphics_ImageDataUtil.__calculateSourceOffset(sourceRect,destPoint,destX,destY);
	if(s < 0) {
		imgB[d] = imgB[d + 1] = imgB[d + 2] = imgB[d + 3] = 0;
	} else {
		imgB[d] = imgB[s];
		imgB[d + 1] = imgB[s + 1];
		imgB[d + 2] = imgB[s + 2];
		var a = UInt.toFloat(imgB[s + 3]) * strength | 0;
		imgB[d + 3] = a < 0 ? 0 : a > 255 ? 255 : a;
	}
};
var lime__$internal_graphics__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) {
		this.rect = image.get_rect();
	} else {
		if(rect.x < 0) {
			rect.x = 0;
		}
		if(rect.y < 0) {
			rect.y = 0;
		}
		if(rect.x + rect.width > image.width) {
			rect.width = image.width - rect.x;
		}
		if(rect.y + rect.height > image.height) {
			rect.height = image.height - rect.y;
		}
		if(rect.width < 0) {
			rect.width = 0;
		}
		if(rect.height < 0) {
			rect.height = 0;
		}
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.__update();
};
$hxClasses["lime._internal.graphics._ImageDataUtil.ImageDataView"] = lime__$internal_graphics__$ImageDataUtil_ImageDataView;
lime__$internal_graphics__$ImageDataUtil_ImageDataView.__name__ = "lime._internal.graphics._ImageDataUtil.ImageDataView";
lime__$internal_graphics__$ImageDataUtil_ImageDataView.prototype = {
	x: null
	,y: null
	,height: null
	,width: null
	,byteOffset: null
	,image: null
	,rect: null
	,stride: null
	,tempRect: null
	,clip: function(x,y,width,height) {
		if(this.tempRect == null) {
			this.tempRect = new lime_math_Rectangle();
		}
		this.tempRect.setTo(x,y,width,height);
		this.rect.intersection(this.tempRect,this.rect);
		this.__update();
	}
	,hasRow: function(y) {
		if(y >= 0) {
			return y < this.height;
		} else {
			return false;
		}
	}
	,offset: function(x,y) {
		if(x < 0) {
			this.rect.x += x;
			if(this.rect.x < 0) {
				this.rect.x = 0;
			}
		} else {
			this.rect.x += x;
			this.rect.width -= x;
		}
		if(y < 0) {
			this.rect.y += y;
			if(this.rect.y < 0) {
				this.rect.y = 0;
			}
		} else {
			this.rect.y += y;
			this.rect.height -= y;
		}
		this.__update();
	}
	,row: function(y) {
		return this.byteOffset + this.stride * y;
	}
	,__update: function() {
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.byteOffset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,__class__: lime__$internal_graphics__$ImageDataUtil_ImageDataView
};
var lime__$internal_graphics_StackBlur = function() { };
$hxClasses["lime._internal.graphics.StackBlur"] = lime__$internal_graphics_StackBlur;
lime__$internal_graphics_StackBlur.__name__ = "lime._internal.graphics.StackBlur";
lime__$internal_graphics_StackBlur.blur = function(dest,source,sourceRect,destPoint,blurX,blurY,quality) {
	dest.copyPixels(source,sourceRect,destPoint);
	lime__$internal_graphics_StackBlur.__stackBlurCanvasRGBA(dest,sourceRect.width | 0,sourceRect.height | 0,blurX,blurY,quality);
};
lime__$internal_graphics_StackBlur.__stackBlurCanvasRGBA = function(image,width,height,blurX,blurY,quality) {
	var radiusX = Math.round(blurX) >> 1;
	var radiusY = Math.round(blurY) >> 1;
	if(lime__$internal_graphics_StackBlur.MUL_TABLE == null) {
		return;
	}
	if(radiusX >= lime__$internal_graphics_StackBlur.MUL_TABLE.length) {
		radiusX = lime__$internal_graphics_StackBlur.MUL_TABLE.length - 1;
	}
	if(radiusY >= lime__$internal_graphics_StackBlur.MUL_TABLE.length) {
		radiusY = lime__$internal_graphics_StackBlur.MUL_TABLE.length - 1;
	}
	if(radiusX < 0 || radiusY < 0) {
		return;
	}
	var iterations = quality;
	if(iterations < 1) {
		iterations = 1;
	}
	if(iterations > 3) {
		iterations = 3;
	}
	var px = image.get_data();
	var x;
	var y;
	var i;
	var p;
	var yp;
	var yi;
	var yw;
	var r;
	var g;
	var b;
	var a;
	var pr;
	var pg;
	var pb;
	var pa;
	var f;
	var divx = radiusX + radiusX + 1;
	var divy = radiusY + radiusY + 1;
	var w = width;
	var h = height;
	var w1 = w - 1;
	var h1 = h - 1;
	var rxp1 = radiusX + 1;
	var ryp1 = radiusY + 1;
	var ssx = new lime__$internal_graphics_BlurStack();
	var sx = ssx;
	var _g = 1;
	var _g1 = divx;
	while(_g < _g1) {
		var i1 = _g++;
		sx = sx.n = new lime__$internal_graphics_BlurStack();
	}
	sx.n = ssx;
	var ssy = new lime__$internal_graphics_BlurStack();
	var sy = ssy;
	var _g = 1;
	var _g1 = divy;
	while(_g < _g1) {
		var i1 = _g++;
		sy = sy.n = new lime__$internal_graphics_BlurStack();
	}
	sy.n = ssy;
	var si = null;
	var mtx = lime__$internal_graphics_StackBlur.MUL_TABLE[radiusX];
	var stx = lime__$internal_graphics_StackBlur.SHG_TABLE[radiusX];
	var mty = lime__$internal_graphics_StackBlur.MUL_TABLE[radiusY];
	var sty = lime__$internal_graphics_StackBlur.SHG_TABLE[radiusY];
	while(iterations > 0) {
		--iterations;
		yi = 0;
		yw = yi;
		var ms = mtx;
		var ss = stx;
		y = h;
		while(true) {
			pr = px[yi];
			r = rxp1 * pr;
			pg = px[yi + 1];
			g = rxp1 * pg;
			pb = px[yi + 2];
			b = rxp1 * pb;
			pa = px[yi + 3];
			a = rxp1 * pa;
			sx = ssx;
			i = rxp1;
			while(true) {
				sx.r = pr;
				sx.g = pg;
				sx.b = pb;
				sx.a = pa;
				sx = sx.n;
				if(!(--i > -1)) {
					break;
				}
			}
			var _g = 1;
			var _g1 = rxp1;
			while(_g < _g1) {
				var i1 = _g++;
				p = yi + ((w1 < i1 ? w1 : i1) << 2);
				r += sx.r = px[p];
				g += sx.g = px[p + 1];
				b += sx.b = px[p + 2];
				a += sx.a = px[p + 3];
				sx = sx.n;
			}
			si = ssx;
			var _g2 = 0;
			var _g3 = w;
			while(_g2 < _g3) {
				var x = _g2++;
				px[yi++] = r * ms >>> ss;
				px[yi++] = g * ms >>> ss;
				px[yi++] = b * ms >>> ss;
				px[yi++] = a * ms >>> ss;
				p = x + radiusX + 1;
				p = yw + (p < w1 ? p : w1) << 2;
				r -= si.r - (si.r = px[p]);
				g -= si.g - (si.g = px[p + 1]);
				b -= si.b - (si.b = px[p + 2]);
				a -= si.a - (si.a = px[p + 3]);
				si = si.n;
			}
			yw += w;
			if(!(--y > 0)) {
				break;
			}
		}
		ms = mty;
		ss = sty;
		var _g4 = 0;
		var _g5 = w;
		while(_g4 < _g5) {
			var x1 = _g4++;
			yi = x1 << 2;
			pr = px[yi];
			r = ryp1 * pr;
			pg = px[yi + 1];
			g = ryp1 * pg;
			pb = px[yi + 2];
			b = ryp1 * pb;
			pa = px[yi + 3];
			a = ryp1 * pa;
			sy = ssy;
			var _g6 = 0;
			var _g7 = ryp1;
			while(_g6 < _g7) {
				var i2 = _g6++;
				sy.r = pr;
				sy.g = pg;
				sy.b = pb;
				sy.a = pa;
				sy = sy.n;
			}
			yp = w;
			var _g8 = 1;
			var _g9 = radiusY + 1;
			while(_g8 < _g9) {
				var i3 = _g8++;
				yi = yp + x1 << 2;
				r += sy.r = px[yi];
				g += sy.g = px[yi + 1];
				b += sy.b = px[yi + 2];
				a += sy.a = px[yi + 3];
				sy = sy.n;
				if(i3 < h1) {
					yp += w;
				}
			}
			yi = x1;
			si = ssy;
			if(iterations > 0) {
				var _g10 = 0;
				var _g11 = h;
				while(_g10 < _g11) {
					var y1 = _g10++;
					p = yi << 2;
					pa = a * ms >>> ss;
					px[p + 3] = pa;
					if(pa > 0) {
						px[p] = r * ms >>> ss;
						px[p + 1] = g * ms >>> ss;
						px[p + 2] = b * ms >>> ss;
					} else {
						px[p] = px[p + 1] = px[p + 2] = 0;
					}
					p = y1 + ryp1;
					p = x1 + (p < h1 ? p : h1) * w << 2;
					r -= si.r - (si.r = px[p]);
					g -= si.g - (si.g = px[p + 1]);
					b -= si.b - (si.b = px[p + 2]);
					a -= si.a - (si.a = px[p + 3]);
					si = si.n;
					yi += w;
				}
			} else {
				var _g12 = 0;
				var _g13 = h;
				while(_g12 < _g13) {
					var y2 = _g12++;
					p = yi << 2;
					pa = a * ms >>> ss;
					px[p + 3] = pa;
					if(pa > 0) {
						f = 255 / pa;
						pr = (r * ms >>> ss) * f | 0;
						pg = (g * ms >>> ss) * f | 0;
						pb = (b * ms >>> ss) * f | 0;
						px[p] = pr > 255 ? 255 : pr;
						px[p + 1] = pg > 255 ? 255 : pg;
						px[p + 2] = pb > 255 ? 255 : pb;
					} else {
						px[p] = px[p + 1] = px[p + 2] = 0;
					}
					p = y2 + ryp1;
					p = x1 + (p < h1 ? p : h1) * w << 2;
					r -= si.r - (si.r = px[p]);
					g -= si.g - (si.g = px[p + 1]);
					b -= si.b - (si.b = px[p + 2]);
					a -= si.a - (si.a = px[p + 3]);
					si = si.n;
					yi += w;
				}
			}
		}
	}
};
var lime__$internal_graphics_BlurStack = function() {
	this.r = 0;
	this.g = 0;
	this.b = 0;
	this.a = 0;
	this.n = null;
};
$hxClasses["lime._internal.graphics.BlurStack"] = lime__$internal_graphics_BlurStack;
lime__$internal_graphics_BlurStack.__name__ = "lime._internal.graphics.BlurStack";
lime__$internal_graphics_BlurStack.prototype = {
	r: null
	,g: null
	,b: null
	,a: null
	,n: null
	,__class__: lime__$internal_graphics_BlurStack
};
var lime__$internal_macros_AssetsMacro = function() { };
$hxClasses["lime._internal.macros.AssetsMacro"] = lime__$internal_macros_AssetsMacro;
lime__$internal_macros_AssetsMacro.__name__ = "lime._internal.macros.AssetsMacro";
var lime_app_Event = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = "lime.app.Event";
lime_app_Event.prototype = {
	canceled: null
	,__listeners: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,dispatch: null
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__class__: lime_app_Event
};
var lime_app_Future = function(work,async) {
	if(async == null) {
		async = false;
	}
	if(work != null) {
		if(async) {
			var promise = new lime_app_Promise();
			promise.future = this;
			lime_app__$Future_FutureWork.queue({ promise : promise, work : work});
		} else {
			try {
				this.value = work();
				this.isComplete = true;
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				this.error = e;
				this.isError = true;
			}
		}
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = "lime.app.Future";
lime_app_Future.ofEvents = function(onComplete,onError,onProgress) {
	var promise = new lime_app_Promise();
	onComplete.add(function(data) {
		promise.complete(data);
	},true);
	if(onError != null) {
		onError.add(function(error) {
			promise.error(error);
		},true);
	}
	if(onProgress != null) {
		onProgress.add(function(progress,total) {
			promise.progress(progress,total);
		},true);
	}
	return promise.future;
};
lime_app_Future.withError = function(error) {
	var future = new lime_app_Future();
	future.isError = true;
	future.error = error;
	return future;
};
lime_app_Future.withValue = function(value) {
	var future = new lime_app_Future();
	future.isComplete = true;
	future.value = value;
	return future;
};
lime_app_Future.prototype = {
	error: null
	,isComplete: null
	,isError: null
	,value: null
	,__completeListeners: null
	,__errorListeners: null
	,__progressListeners: null
	,onComplete: function(listener) {
		if(listener != null) {
			if(this.isComplete) {
				listener(this.value);
			} else if(!this.isError) {
				if(this.__completeListeners == null) {
					this.__completeListeners = [];
				}
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.isError) {
				listener(this.error);
			} else if(!this.isComplete) {
				if(this.__errorListeners == null) {
					this.__errorListeners = [];
				}
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) {
				this.__progressListeners = [];
			}
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,ready: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		if(this.isComplete || this.isError) {
			return this;
		} else {
			lime_utils_Log.warn("Cannot block thread in JavaScript",{ fileName : "lime/app/Future.hx", lineNumber : 208, className : "lime.app.Future", methodName : "ready"});
			return this;
		}
	}
	,result: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		this.ready(waitTime);
		if(this.isComplete) {
			return this.value;
		} else {
			return null;
		}
	}
	,then: function(next) {
		if(this.isComplete) {
			return next(this.value);
		} else if(this.isError) {
			var future = new lime_app_Future();
			future.isError = true;
			future.error = this.error;
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future = next(val);
				future.onError($bind(promise,promise.error));
				future.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,__class__: lime_app_Future
};
var lime_app__$Future_FutureWork = function() { };
$hxClasses["lime.app._Future.FutureWork"] = lime_app__$Future_FutureWork;
lime_app__$Future_FutureWork.__name__ = "lime.app._Future.FutureWork";
lime_app__$Future_FutureWork.threadPool = null;
lime_app__$Future_FutureWork.queue = function(state) {
	if(lime_app__$Future_FutureWork.threadPool == null) {
		lime_app__$Future_FutureWork.threadPool = new lime_system_ThreadPool();
		lime_app__$Future_FutureWork.threadPool.doWork.add(lime_app__$Future_FutureWork.threadPool_doWork);
		lime_app__$Future_FutureWork.threadPool.onComplete.add(lime_app__$Future_FutureWork.threadPool_onComplete);
		lime_app__$Future_FutureWork.threadPool.onError.add(lime_app__$Future_FutureWork.threadPool_onError);
	}
	lime_app__$Future_FutureWork.threadPool.queue(state);
};
lime_app__$Future_FutureWork.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app__$Future_FutureWork.threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		lime_app__$Future_FutureWork.threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app__$Future_FutureWork.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app__$Future_FutureWork.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = "lime.app.Promise";
lime_app_Promise.prototype = {
	future: null
	,isComplete: null
	,isError: null
	,complete: function(data) {
		if(!this.future.isError) {
			this.future.isComplete = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.isComplete) {
			this.future.isError = true;
			this.future.error = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress,total) {
		if(!this.future.isError && !this.future.isComplete) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress,total);
				}
			}
		}
		return this;
	}
	,get_isComplete: function() {
		return this.future.isComplete;
	}
	,get_isError: function() {
		return this.future.isError;
	}
	,__class__: lime_app_Promise
	,__properties__: {get_isError:"get_isError",get_isComplete:"get_isComplete"}
};
var lime_app__$Event_$Array_$String_$_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Array_String__Void"] = lime_app__$Event_$Array_$String_$_$Void;
lime_app__$Event_$Array_$String_$_$Void.__name__ = "lime.app._Event_Array_String__Void";
lime_app__$Event_$Array_$String_$_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Array_$String_$_$Void
};
var lime_app__$Event_$Dynamic_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Dynamic_Void"] = lime_app__$Event_$Dynamic_$Void;
lime_app__$Event_$Dynamic_$Void.__name__ = "lime.app._Event_Dynamic_Void";
lime_app__$Event_$Dynamic_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Dynamic_$Void
};
var lime_app__$Event_$Float_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Float_$Void.__name__ = "lime.app._Event_Float_Float_Float_Void";
lime_app__$Event_$Float_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Int_Void"] = lime_app__$Event_$Float_$Float_$Int_$Void;
lime_app__$Event_$Float_$Float_$Int_$Void.__name__ = "lime.app._Event_Float_Float_Int_Void";
lime_app__$Event_$Float_$Float_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Int_$Void
};
var lime_app__$Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Void.__name__ = "lime.app._Event_Float_Float_Void";
lime_app__$Event_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseButton_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.__name__ = "lime.app._Event_Float_Float_lime_ui_MouseButton_Void";
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.__name__ = "lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void";
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void
};
var lime_app__$Event_$Int_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Float_Void"] = lime_app__$Event_$Int_$Float_$Float_$Void;
lime_app__$Event_$Int_$Float_$Float_$Void.__name__ = "lime.app._Event_Int_Float_Float_Void";
lime_app__$Event_$Int_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Void"] = lime_app__$Event_$Int_$Float_$Void;
lime_app__$Event_$Int_$Float_$Void.__name__ = "lime.app._Event_Int_Float_Void";
lime_app__$Event_$Int_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Void
};
var lime_app__$Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Int_Void"] = lime_app__$Event_$Int_$Int_$Void;
lime_app__$Event_$Int_$Int_$Void.__name__ = "lime.app._Event_Int_Int_Void";
lime_app__$Event_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Int_$Void
};
var lime_app__$Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Void"] = lime_app__$Event_$Int_$Void;
lime_app__$Event_$Int_$Void.__name__ = "lime.app._Event_Int_Void";
lime_app__$Event_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Void
};
var lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = "lime.app._Event_Int_lime_ui_JoystickHatPosition_Void";
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app__$Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Int_Int_Void"] = lime_app__$Event_$String_$Int_$Int_$Void;
lime_app__$Event_$String_$Int_$Int_$Void.__name__ = "lime.app._Event_String_Int_Int_Void";
lime_app__$Event_$String_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Int_$Int_$Void
};
var lime_app__$Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Void"] = lime_app__$Event_$String_$Void;
lime_app__$Event_$String_$Void.__name__ = "lime.app._Event_String_Void";
lime_app__$Event_$String_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Void
};
var lime_app__$Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Void_Void"] = lime_app__$Event_$Void_$Void;
lime_app__$Event_$Void_$Void.__name__ = "lime.app._Event_Void_Void";
lime_app__$Event_$Void_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Void_$Void
};
var lime_app__$Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_graphics_RenderContext_Void"] = lime_app__$Event_$lime_$graphics_$RenderContext_$Void;
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.__name__ = "lime.app._Event_lime_graphics_RenderContext_Void";
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = "lime.app._Event_lime_ui_GamepadAxis_Float_Void";
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadButton_Void"] = lime_app__$Event_$lime_$ui_$GamepadButton_$Void;
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.__name__ = "lime.app._Event_lime_ui_GamepadButton_Void";
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app__$Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Gamepad_Void"] = lime_app__$Event_$lime_$ui_$Gamepad_$Void;
lime_app__$Event_$lime_$ui_$Gamepad_$Void.__name__ = "lime.app._Event_lime_ui_Gamepad_Void";
lime_app__$Event_$lime_$ui_$Gamepad_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Gamepad_$Void
};
var lime_app__$Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Joystick_Void"] = lime_app__$Event_$lime_$ui_$Joystick_$Void;
lime_app__$Event_$lime_$ui_$Joystick_$Void.__name__ = "lime.app._Event_lime_ui_Joystick_Void";
lime_app__$Event_$lime_$ui_$Joystick_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Joystick_$Void
};
var lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = "lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void";
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app__$Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Touch_Void"] = lime_app__$Event_$lime_$ui_$Touch_$Void;
lime_app__$Event_$lime_$ui_$Touch_$Void.__name__ = "lime.app._Event_lime_ui_Touch_Void";
lime_app__$Event_$lime_$ui_$Touch_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Touch_$Void
};
var lime_app__$Event_$lime_$ui_$Window_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Window_Void"] = lime_app__$Event_$lime_$ui_$Window_$Void;
lime_app__$Event_$lime_$ui_$Window_$Void.__name__ = "lime.app._Event_lime_ui_Window_Void";
lime_app__$Event_$lime_$ui_$Window_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Window_$Void
};
var lime_app__$Event_$lime_$utils_$Resource_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_utils_Resource_Void"] = lime_app__$Event_$lime_$utils_$Resource_$Void;
lime_app__$Event_$lime_$utils_$Resource_$Void.__name__ = "lime.app._Event_lime_utils_Resource_Void";
lime_app__$Event_$lime_$utils_$Resource_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$utils_$Resource_$Void
};
var lime_app__$Event_$ofEvents_$T_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_ofEvents_T_Void"] = lime_app__$Event_$ofEvents_$T_$Void;
lime_app__$Event_$ofEvents_$T_$Void.__name__ = "lime.app._Event_ofEvents_T_Void";
lime_app__$Event_$ofEvents_$T_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$ofEvents_$T_$Void
};
var lime_graphics_CairoRenderContext = {};
lime_graphics_CairoRenderContext.fromRenderContext = function(context) {
	return context.cairo;
};
var lime_graphics_Canvas2DRenderContext = {};
lime_graphics_Canvas2DRenderContext.fromRenderContext = function(context) {
	return context.canvas2D;
};
var lime_graphics_DOMRenderContext = {};
lime_graphics_DOMRenderContext.fromRenderContext = function(context) {
	return context.dom;
};
var lime_graphics_FlashRenderContext = {};
lime_graphics_FlashRenderContext.fromRenderContext = function(context) {
	return null;
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	this.version = 0;
	if(type == null) {
		type = lime_graphics_ImageType.CANVAS;
	}
	this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			switch(this.type._hx_index) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime__$internal_graphics_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 1:
				var elements = width * height * 4;
				var array = null;
				var vector = null;
				var view = null;
				var buffer1 = null;
				var len = null;
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer1 != null) {
					if(len == null) {
						this1 = new Uint8Array(buffer1,0);
					} else {
						this1 = new Uint8Array(buffer1,0,len);
					}
				} else {
					this1 = null;
				}
				this.buffer = new lime_graphics_ImageBuffer(this1,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 2:
				break;
			default:
			}
		}
	} else {
		this.__fromImageBuffer(buffer);
	}
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = "lime.graphics.Image";
lime_graphics_Image.fromBase64 = function(base64,type) {
	if(base64 == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) {
		return null;
	}
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	if(image.__fromBytes(bytes)) {
		return image;
	} else {
		return null;
	}
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	var image = new lime_graphics_Image(buffer);
	image.type = lime_graphics_ImageType.CANVAS;
	return image;
};
lime_graphics_Image.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	if(image.__fromFile(path)) {
		return image;
	} else {
		return null;
	}
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	var _image = new lime_graphics_Image(buffer);
	_image.type = lime_graphics_ImageType.CANVAS;
	return _image;
};
lime_graphics_Image.loadFromBase64 = function(base64,type) {
	if(base64 == null || type == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + base64);
};
lime_graphics_Image.loadFromBytes = function(bytes) {
	if(bytes == null) {
		return lime_app_Future.withValue(null);
	}
	var type = "";
	if(lime_graphics_Image.__isPNG(bytes)) {
		type = "image/png";
	} else if(lime_graphics_Image.__isJPG(bytes)) {
		type = "image/jpeg";
	} else if(lime_graphics_Image.__isGIF(bytes)) {
		type = "image/gif";
	} else if(lime_graphics_Image.__isWebP(bytes)) {
		type = "image/webp";
	} else {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImageFromBytes(bytes,type);
};
lime_graphics_Image.loadFromFile = function(path) {
	if(path == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage(path);
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes == null || bytes.length < 6) {
		return false;
	}
	var header = bytes.getString(0,6);
	if(header != "GIF87a") {
		return header == "GIF89a";
	} else {
		return true;
	}
};
lime_graphics_Image.__isJPG = function(bytes) {
	if(bytes == null || bytes.length < 4) {
		return false;
	}
	if(bytes.b[0] == 255 && bytes.b[1] == 216 && bytes.b[bytes.length - 2] == 255) {
		return bytes.b[bytes.length - 1] == 217;
	} else {
		return false;
	}
};
lime_graphics_Image.__isPNG = function(bytes) {
	if(bytes == null || bytes.length < 8) {
		return false;
	}
	if(bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26) {
		return bytes.b[7] == 10;
	} else {
		return false;
	}
};
lime_graphics_Image.__isWebP = function(bytes) {
	if(bytes == null || bytes.length < 16) {
		return false;
	}
	if(bytes.getString(0,4) == "RIFF") {
		return bytes.getString(8,4) == "WEBP";
	} else {
		return false;
	}
};
lime_graphics_Image.prototype = {
	buffer: null
	,dirty: null
	,height: null
	,offsetX: null
	,offsetY: null
	,rect: null
	,type: null
	,version: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS) {
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
			} else {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.version = this.version;
			return image;
		} else {
			return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		}
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math_ColorMatrix.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) {
			return;
		}
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			lime__$internal_graphics_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel._hx_index) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel._hx_index) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(this.width <= 0 || this.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) {
			sourceRect.width = this.width - destPoint.x;
		}
		if(destPoint.y + sourceRect.height > this.height) {
			sourceRect.height = this.height - destPoint.y;
		}
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x -= destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y -= destPoint.y;
			destPoint.y = 0;
		}
		if(sourceImage == this && destPoint.x < sourceRect.get_right() && destPoint.y < sourceRect.get_bottom()) {
			sourceImage = this.clone();
		}
		if(alphaImage == sourceImage && (alphaPoint == null || alphaPoint.x == 0 && alphaPoint.y == 0)) {
			alphaImage = null;
			alphaPoint = null;
		}
		switch(this.type._hx_index) {
		case 0:
			if(alphaImage != null) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
				if(alphaImage != null) {
					lime__$internal_graphics_ImageCanvasUtil.convertToData(alphaImage);
				}
				lime__$internal_graphics_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			} else {
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(sourceImage);
				lime__$internal_graphics_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			}
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			if(alphaImage != null) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(alphaImage);
			}
			lime__$internal_graphics_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) {
				alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			}
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null ? alphaImage.buffer.get_src() : null,alphaPoint != null ? alphaPoint.__toFlashPoint() : null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) {
			quality = 90;
		}
		if(format == null) {
			return lime__$internal_format_PNG.encode(this);
		} else {
			switch(format._hx_index) {
			case 0:
				return lime__$internal_format_BMP.encode(this);
			case 1:
				return lime__$internal_format_JPEG.encode(this,quality);
			case 2:
				return lime__$internal_format_PNG.encode(this);
			}
		}
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) {
				return;
			}
			lime__$internal_graphics_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb1;
					break;
				default:
					var rgba = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					argb = argb1;
				}
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb1;
					break;
				default:
					var rgba = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					argb = argb1;
				}
			}
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) {
			findColor = true;
		}
		if(this.buffer == null) {
			return null;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime__$internal_graphics_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime_math_Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type._hx_index) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var this1 = 0;
				var rgba = this1;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				var rgba1 = rgba;
				return rgba1;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var this1 = 0;
					var bgra = this1;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var bgra1 = bgra;
					return bgra1;
				default:
					var this1 = 0;
					var rgba = this1;
					rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var rgba1 = rgba;
					return rgba1;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type._hx_index) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var this1 = 0;
				var rgba = this1;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				var rgba1 = rgba;
				return rgba1;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var this1 = 0;
					var bgra = this1;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var bgra1 = bgra;
					return bgra1;
				default:
					var this1 = 0;
					var rgba = this1;
					rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var rgba1 = rgba;
					return rgba1;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) {
			return null;
		}
		switch(this.type._hx_index) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			return null;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
			lime__$internal_graphics_ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			lime__$internal_graphics_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return;
		}
	}
	,resize: function(newWidth,newHeight) {
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime__$internal_graphics_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,scroll: function(x,y) {
		if(this.buffer == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.scroll(this,x,y);
			break;
		case 1:
			this.copyPixels(this,this.get_rect(),new lime_math_Vector2(x,y));
			break;
		case 2:
			this.buffer.__srcBitmapData.scroll(x + this.offsetX,y + this.offsetX);
			break;
		default:
		}
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb1;
					break;
				default:
					var rgba = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					argb = argb1;
				}
			}
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,argb);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb1;
					break;
				default:
					var rgba = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					argb = argb1;
				}
			}
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,setPixels: function(rect,bytePointer,format,endian) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		if(endian == null) {
			endian = lime_system_Endian.BIG_ENDIAN;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixels(this,rect,bytePointer,format,endian);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixels(this,rect,bytePointer,format,endian);
			break;
		case 2:
			break;
		default:
		}
	}
	,threshold: function(sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(this.buffer == null || sourceImage == null || sourceRect == null) {
			return 0;
		}
		switch(this.type._hx_index) {
		case 0:case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			return lime__$internal_graphics_ImageDataUtil.threshold(this,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format);
		case 2:
			var _color;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb = this1;
				argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				_color = argb;
			} else {
				switch(format) {
				case 1:
					_color = color;
					break;
				case 2:
					var bgra = color;
					var this1 = 0;
					var argb = this1;
					argb = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					_color = argb;
					break;
				default:
					var rgba = color;
					var this1 = 0;
					var argb = this1;
					argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					_color = argb;
				}
			}
			var _mask;
			if(format == null) {
				var rgba = mask;
				var this1 = 0;
				var argb = this1;
				argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				_mask = argb;
			} else {
				switch(format) {
				case 1:
					_mask = mask;
					break;
				case 2:
					var bgra = mask;
					var this1 = 0;
					var argb = this1;
					argb = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					_mask = argb;
					break;
				default:
					var rgba = mask;
					var this1 = 0;
					var argb = this1;
					argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					_mask = argb;
				}
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			return this.buffer.__srcBitmapData.threshold(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),operation,threshold,_color,_mask,copySource);
		default:
		}
		return 0;
	}
	,__clipRect: function(r) {
		if(r == null) {
			return null;
		}
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) {
				return null;
			}
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) {
				return null;
			}
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) {
				return null;
			}
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) {
				return null;
			}
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.width = _gthis.buffer.width;
			_gthis.height = _gthis.buffer.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) {
			type = "image/png";
		} else if(lime_graphics_Image.__isJPG(bytes)) {
			type = "image/jpeg";
		} else if(lime_graphics_Image.__isGIF(bytes)) {
			type = "image/gif";
		} else {
			return false;
		}
		this.__fromBase64(lime__$internal_format_Base64.encode(bytes),type,onload);
		return true;
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		var image = new Image();
		if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(path)) {
			image.crossOrigin = "Anonymous";
		}
		image.onload = function(_) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.width = image.width;
			_gthis.height = image.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.onerror = function(_) {
			if(onerror != null) {
				onerror();
			}
		};
		image.src = path;
		var image1 = image.complete;
		return true;
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) {
				this.width = buffer.width;
			}
			if(this.height == -1) {
				this.height = buffer.height;
			}
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			if(this.type._hx_index == 1) {
				lime__$internal_graphics_ImageDataUtil.setFormat(this,value);
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		if(this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width) {
			if(this.buffer.height != 0) {
				return (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			if(newWidth == this.buffer.width && newHeight == this.buffer.height) {
				return value;
			}
			switch(this.type._hx_index) {
			case 0:
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 1:
				lime__$internal_graphics_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			switch(this.type._hx_index) {
			case 0:case 1:
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			if(this.type._hx_index == 1) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.unmultiplyAlpha(this);
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null && (this.buffer.data != null || this.type == lime_graphics_ImageType.DATA)) {
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
		}
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_format:"set_format",get_format:"get_format",set_data:"set_data",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) {
		bitsPerPixel = 32;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.format = format == null ? 0 : format;
	this.premultiplied = false;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = "lime.graphics.ImageBuffer";
lime_graphics_ImageBuffer.prototype = {
	bitsPerPixel: null
	,data: null
	,format: null
	,height: null
	,premultiplied: null
	,transparent: null
	,width: null
	,__srcBitmapData: null
	,__srcCanvas: null
	,__srcContext: null
	,__srcCustom: null
	,__srcImage: null
	,__srcImageData: null
	,clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var array = null;
			var vector = null;
			var view = null;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			buffer.data = this1;
			var elements = null;
			var array = null;
			var vector = null;
			var view = this.data;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			var copy = this1;
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else {
			buffer.__srcImage = this.__srcImage;
		}
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) {
			return this.__srcImage;
		}
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(((value) instanceof Image)) {
			this.__srcImage = value;
		} else if(((value) instanceof HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * (this.bitsPerPixel / 8 | 0);
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxEnums["lime.graphics.ImageChannel"] = { __ename__ : "lime.graphics.ImageChannel", __constructs__ : ["RED","GREEN","BLUE","ALPHA"]
	,RED: {_hx_index:0,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,GREEN: {_hx_index:1,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,BLUE: {_hx_index:2,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,ALPHA: {_hx_index:3,__enum__:"lime.graphics.ImageChannel",toString:$estr}
};
lime_graphics_ImageChannel.__empty_constructs__ = [lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.GREEN,lime_graphics_ImageChannel.BLUE,lime_graphics_ImageChannel.ALPHA];
var lime_graphics_ImageFileFormat = $hxEnums["lime.graphics.ImageFileFormat"] = { __ename__ : "lime.graphics.ImageFileFormat", __constructs__ : ["BMP","JPEG","PNG"]
	,BMP: {_hx_index:0,__enum__:"lime.graphics.ImageFileFormat",toString:$estr}
	,JPEG: {_hx_index:1,__enum__:"lime.graphics.ImageFileFormat",toString:$estr}
	,PNG: {_hx_index:2,__enum__:"lime.graphics.ImageFileFormat",toString:$estr}
};
lime_graphics_ImageFileFormat.__empty_constructs__ = [lime_graphics_ImageFileFormat.BMP,lime_graphics_ImageFileFormat.JPEG,lime_graphics_ImageFileFormat.PNG];
var lime_graphics_ImageType = $hxEnums["lime.graphics.ImageType"] = { __ename__ : "lime.graphics.ImageType", __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"]
	,CANVAS: {_hx_index:0,__enum__:"lime.graphics.ImageType",toString:$estr}
	,DATA: {_hx_index:1,__enum__:"lime.graphics.ImageType",toString:$estr}
	,FLASH: {_hx_index:2,__enum__:"lime.graphics.ImageType",toString:$estr}
	,CUSTOM: {_hx_index:3,__enum__:"lime.graphics.ImageType",toString:$estr}
};
lime_graphics_ImageType.__empty_constructs__ = [lime_graphics_ImageType.CANVAS,lime_graphics_ImageType.DATA,lime_graphics_ImageType.FLASH,lime_graphics_ImageType.CUSTOM];
var lime_graphics_OpenGLES2RenderContext = {};
lime_graphics_OpenGLES2RenderContext.fromGL = function(gl) {
	return null;
};
lime_graphics_OpenGLES2RenderContext.fromOpenGLES3RenderContext = function(gl) {
	return null;
};
lime_graphics_OpenGLES2RenderContext.fromRenderContext = function(context) {
	return null;
};
lime_graphics_OpenGLES2RenderContext.fromWebGLRenderContext = function(gl) {
	return null;
};
var lime_graphics_OpenGLES3RenderContext = {};
lime_graphics_OpenGLES3RenderContext.fromRenderContext = function(context) {
	return null;
};
lime_graphics_OpenGLES3RenderContext.fromGL = function(gl) {
	return null;
};
lime_graphics_OpenGLES3RenderContext.fromOpenGLES2RenderContext = function(context) {
	return null;
};
lime_graphics_OpenGLES3RenderContext.fromWebGLRenderContext = function(context) {
	return null;
};
lime_graphics_OpenGLES3RenderContext.fromWebGL2RenderContext = function(context) {
	return null;
};
var lime_graphics_OpenGLRenderContext = {};
lime_graphics_OpenGLRenderContext.fromRenderContext = function(context) {
	return null;
};
var lime_graphics_RenderContext = function() {
};
$hxClasses["lime.graphics.RenderContext"] = lime_graphics_RenderContext;
lime_graphics_RenderContext.__name__ = "lime.graphics.RenderContext";
lime_graphics_RenderContext.prototype = {
	attributes: null
	,cairo: null
	,canvas2D: null
	,dom: null
	,flash: null
	,gl: null
	,gles2: null
	,gles3: null
	,type: null
	,version: null
	,webgl: null
	,webgl2: null
	,window: null
	,__class__: lime_graphics_RenderContext
};
var lime_graphics_WebGL2RenderContext = {};
lime_graphics_WebGL2RenderContext.bufferData = function(this1,target,srcData,usage,srcOffset,length) {
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,length);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics_WebGL2RenderContext.bufferSubData = function(this1,target,dstByteOffset,srcData,srcOffset,length) {
	if(srcOffset != null) {
		this1.bufferSubData(target,dstByteOffset,srcData,srcOffset,length);
	} else {
		this1.bufferSubData(target,dstByteOffset,srcData);
	}
};
lime_graphics_WebGL2RenderContext.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
	if(srcOffset != null) {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
};
lime_graphics_WebGL2RenderContext.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
	if(srcOffset != null) {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
};
lime_graphics_WebGL2RenderContext.getBufferSubData = function(this1,target,srcByteOffset,dstData,srcOffset,length) {
	if(srcOffset != null) {
		this1.getBufferSubData(target,srcByteOffset,dstData,srcOffset,length);
	} else {
		this1.getBufferSubData(target,srcByteOffset,dstData);
	}
};
lime_graphics_WebGL2RenderContext.readPixels = function(this1,x,y,width,height,format,type,pixels,dstOffset) {
	if(dstOffset != null) {
		this1.readPixels(x,y,width,height,format,type,pixels,dstOffset);
	} else {
		this1.readPixels(x,y,width,height,format,type,pixels);
	}
};
lime_graphics_WebGL2RenderContext.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics_WebGL2RenderContext.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
	if(srcOffset != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
	} else if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics_WebGL2RenderContext.uniform1fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform1fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1fv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform1iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform1iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1iv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform2fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform2fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2fv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform2iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform2iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2iv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform3fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform3fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3fv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform3iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform3iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3iv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform4fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform4fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4fv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform4iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform4iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4iv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniformMatrix2fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix2fv(location,transpose,data);
	}
};
lime_graphics_WebGL2RenderContext.uniformMatrix3fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix3fv(location,transpose,data);
	}
};
lime_graphics_WebGL2RenderContext.uniformMatrix4fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix4fv(location,transpose,data);
	}
};
lime_graphics_WebGL2RenderContext.fromGL = function(gl) {
	return null;
};
lime_graphics_WebGL2RenderContext.fromRenderContext = function(context) {
	return context.webgl2;
};
lime_graphics_WebGL2RenderContext.toWebGLRenderContext = function(gl) {
	return gl;
};
var lime_graphics_WebGLRenderContext = {};
lime_graphics_WebGLRenderContext.bufferData = function(this1,target,srcData,usage) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,null);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics_WebGLRenderContext.bufferSubData = function(this1,target,offset,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.bufferSubData(target,offset,srcData,srcOffset,null);
	} else {
		this1.bufferSubData(target,offset,srcData);
	}
};
lime_graphics_WebGLRenderContext.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,null);
	} else {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
};
lime_graphics_WebGLRenderContext.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,null);
	} else {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
};
lime_graphics_WebGLRenderContext.readPixels = function(this1,x,y,width,height,format,type,pixels) {
	var dstOffset = null;
	if(dstOffset != null) {
		this1.readPixels(x,y,width,height,format,type,pixels,dstOffset);
	} else {
		this1.readPixels(x,y,width,height,format,type,pixels);
	}
};
lime_graphics_WebGLRenderContext.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics_WebGLRenderContext.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
	} else if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics_WebGLRenderContext.uniformMatrix2fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix2fv(location,transpose,data);
	}
};
lime_graphics_WebGLRenderContext.uniformMatrix3fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix3fv(location,transpose,data);
	}
};
lime_graphics_WebGLRenderContext.uniformMatrix4fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix4fv(location,transpose,data);
	}
};
lime_graphics_WebGLRenderContext.fromWebGL2RenderContext = function(gl) {
	return gl;
};
lime_graphics_WebGLRenderContext.fromRenderContext = function(context) {
	return context.webgl;
};
lime_graphics_WebGLRenderContext.fromGL = function(gl) {
	return lime_graphics_opengl_GL.context;
};
var lime_graphics_cairo_Cairo = function(surface) {
	var tmp = surface != null;
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = "lime.graphics.cairo.Cairo";
lime_graphics_cairo_Cairo.__properties__ = {get_versionString:"get_versionString",get_version:"get_version"};
lime_graphics_cairo_Cairo.version = null;
lime_graphics_cairo_Cairo.versionString = null;
lime_graphics_cairo_Cairo.get_version = function() {
	return 0;
};
lime_graphics_cairo_Cairo.get_versionString = function() {
	return "";
};
lime_graphics_cairo_Cairo.prototype = {
	target: null
	,userData: null
	,handle: null
	,arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,getOperator: function() {
		return 0;
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,moveTo: function(x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,recreate: function(surface) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,rotate: function(amount) {
	}
	,save: function() {
	}
	,scale: function(x,y) {
	}
	,setFontSize: function(size) {
	}
	,setOperator: function(value) {
		return value;
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showGlyphs: function(glyphs) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,textPath: function(utf8) {
	}
	,transform: function(matrix) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_fontFace: function() {
		return 0;
	}
	,set_fontFace: function(value) {
		return value;
	}
	,get_fontOptions: function() {
		return null;
	}
	,set_fontOptions: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {set_tolerance:"set_tolerance",get_tolerance:"get_tolerance",get_target:"get_target",set_source:"set_source",get_source:"get_source",set_miterLimit:"set_miterLimit",get_miterLimit:"get_miterLimit",set_matrix:"set_matrix",get_matrix:"get_matrix",set_lineWidth:"set_lineWidth",get_lineWidth:"get_lineWidth",set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_lineCap:"set_lineCap",get_lineCap:"get_lineCap",get_hasCurrentPoint:"get_hasCurrentPoint",get_groupTarget:"get_groupTarget",set_fontOptions:"set_fontOptions",get_fontOptions:"get_fontOptions",set_fontFace:"set_fontFace",get_fontFace:"get_fontFace",set_fillRule:"set_fillRule",get_fillRule:"get_fillRule",get_dashCount:"get_dashCount",set_dash:"set_dash",get_dash:"get_dash",get_currentPoint:"get_currentPoint",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
var lime_graphics_cairo_CairoFTFontFace = {};
lime_graphics_cairo_CairoFTFontFace._new = function() {
	var this1 = 0;
	return this1;
};
lime_graphics_cairo_CairoFTFontFace.create = function(face,loadFlags) {
	return 0;
};
var lime_graphics_cairo_CairoFontFace = {};
lime_graphics_cairo_CairoFontFace._new = function() {
	var this1 = null;
	return this1;
};
lime_graphics_cairo_CairoFontFace.status = function(this1) {
	return 0;
};
var lime_graphics_cairo_CairoFontOptions = {};
lime_graphics_cairo_CairoFontOptions.__properties__ = {set_subpixelOrder:"set_subpixelOrder",get_subpixelOrder:"get_subpixelOrder",set_hintStyle:"set_hintStyle",get_hintStyle:"get_hintStyle",set_hintMetrics:"set_hintMetrics",get_hintMetrics:"get_hintMetrics",set_antialias:"set_antialias",get_antialias:"get_antialias"};
lime_graphics_cairo_CairoFontOptions._new = function() {
	var this1 = null;
	return this1;
};
lime_graphics_cairo_CairoFontOptions.get_antialias = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoFontOptions.set_antialias = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoFontOptions.get_hintMetrics = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoFontOptions.set_hintMetrics = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoFontOptions.get_hintStyle = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoFontOptions.set_hintStyle = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoFontOptions.get_subpixelOrder = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoFontOptions.set_subpixelOrder = function(this1,value) {
	return value;
};
var lime_graphics_cairo_CairoGlyph = function(index,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.index = index;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.graphics.cairo.CairoGlyph"] = lime_graphics_cairo_CairoGlyph;
lime_graphics_cairo_CairoGlyph.__name__ = "lime.graphics.cairo.CairoGlyph";
lime_graphics_cairo_CairoGlyph.prototype = {
	index: null
	,x: null
	,y: null
	,__class__: lime_graphics_cairo_CairoGlyph
};
var lime_graphics_cairo_CairoImageSurface = {};
lime_graphics_cairo_CairoImageSurface.__properties__ = {get_width:"get_width",get_stride:"get_stride",get_height:"get_height",get_format:"get_format",get_data:"get_data"};
lime_graphics_cairo_CairoImageSurface._new = function(format,width,height) {
	var this1 = 0;
	return this1;
};
lime_graphics_cairo_CairoImageSurface.create = function(data,format,width,height,stride) {
	return 0;
};
lime_graphics_cairo_CairoImageSurface.fromImage = function(image) {
	return null;
};
lime_graphics_cairo_CairoImageSurface.get_data = function(this1) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_graphics_cairo_CairoImageSurface.get_format = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoImageSurface.get_height = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoImageSurface.get_stride = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoImageSurface.get_width = function(this1) {
	return 0;
};
var lime_graphics_cairo_CairoPattern = {};
lime_graphics_cairo_CairoPattern.__properties__ = {set_matrix:"set_matrix",get_matrix:"get_matrix",set_filter:"set_filter",get_filter:"get_filter",set_extend:"set_extend",get_extend:"get_extend",get_colorStopCount:"get_colorStopCount"};
lime_graphics_cairo_CairoPattern._new = function(handle) {
	var this1 = handle;
	return this1;
};
lime_graphics_cairo_CairoPattern.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime_graphics_cairo_CairoPattern.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime_graphics_cairo_CairoPattern.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo_CairoPattern.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.createRGB = function(r,g,b) {
	return 0;
};
lime_graphics_cairo_CairoPattern.createRGBA = function(r,g,b,a) {
	return 0;
};
lime_graphics_cairo_CairoPattern.get_colorStopCount = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.get_extend = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.set_extend = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoPattern.get_filter = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.set_filter = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoPattern.get_matrix = function(this1) {
	return null;
};
lime_graphics_cairo_CairoPattern.set_matrix = function(this1,value) {
	return value;
};
var lime_graphics_cairo_CairoSurface = {};
lime_graphics_cairo_CairoSurface.flush = function(this1) {
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = "lime.graphics.opengl.GL";
lime_graphics_opengl_GL.context = null;
lime_graphics_opengl_GL.type = null;
lime_graphics_opengl_GL.version = null;
lime_graphics_opengl_GL.activeTexture = function(texture) {
	lime_graphics_opengl_GL.context.activeTexture(texture);
};
lime_graphics_opengl_GL.attachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.attachShader(program,shader);
};
lime_graphics_opengl_GL.beginQuery = function(target,query) {
	lime_graphics_opengl_GL.context.beginQuery(target,query);
};
lime_graphics_opengl_GL.beginTransformFeedback = function(primitiveNode) {
	lime_graphics_opengl_GL.context.beginTransformFeedback(primitiveNode);
};
lime_graphics_opengl_GL.bindAttribLocation = function(program,index,name) {
	lime_graphics_opengl_GL.context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl_GL.bindBuffer = function(target,buffer) {
	lime_graphics_opengl_GL.context.bindBuffer(target,buffer);
};
lime_graphics_opengl_GL.bindBufferBase = function(target,index,buffer) {
	lime_graphics_opengl_GL.context.bindBufferBase(target,index,buffer);
};
lime_graphics_opengl_GL.bindBufferRange = function(target,index,buffer,offset,size) {
	lime_graphics_opengl_GL.context.bindBufferRange(target,index,buffer,offset,lime_utils_DataPointer.fromFloat(size));
};
lime_graphics_opengl_GL.bindFramebuffer = function(target,framebuffer) {
	lime_graphics_opengl_GL.context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl_GL.bindRenderbuffer = function(target,renderbuffer) {
	lime_graphics_opengl_GL.context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl_GL.bindSampler = function(unit,sampler) {
	lime_graphics_opengl_GL.context.bindSampler(unit,sampler);
};
lime_graphics_opengl_GL.bindTexture = function(target,texture) {
	lime_graphics_opengl_GL.context.bindTexture(target,texture);
};
lime_graphics_opengl_GL.bindTransformFeedback = function(target,transformFeedback) {
	lime_graphics_opengl_GL.context.bindTransformFeedback(target,transformFeedback);
};
lime_graphics_opengl_GL.bindVertexArray = function(vertexArray) {
	lime_graphics_opengl_GL.context.bindVertexArray(vertexArray);
};
lime_graphics_opengl_GL.blitFramebuffer = function(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter) {
	lime_graphics_opengl_GL.context.blitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
};
lime_graphics_opengl_GL.blendColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.blendEquation = function(mode) {
	lime_graphics_opengl_GL.context.blendEquation(mode);
};
lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime_graphics_opengl_GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl_GL.blendFunc = function(sfactor,dfactor) {
	lime_graphics_opengl_GL.context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime_graphics_opengl_GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl_GL.bufferDataWEBGL = function(target,srcData,usage,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,length);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics_opengl_GL.bufferSubDataWEBGL = function(target,dstByteOffset,srcData,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.bufferSubData(target,dstByteOffset,srcData,srcOffset,length);
	} else {
		this1.bufferSubData(target,dstByteOffset,srcData);
	}
};
lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
	return lime_graphics_opengl_GL.context.checkFramebufferStatus(target);
};
lime_graphics_opengl_GL.clear = function(mask) {
	lime_graphics_opengl_GL.context.clear(mask);
};
lime_graphics_opengl_GL.clearBufferfi = function(buffer,drawbuffer,depth,stencil) {
	lime_graphics_opengl_GL.context.clearBufferfi(buffer,drawbuffer,depth,stencil);
};
lime_graphics_opengl_GL.clearBufferfvWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferfv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearBufferivWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearBufferuivWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferuiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.clearDepth = function(depth) {
	lime_graphics_opengl_GL.context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearStencil = function(s) {
	lime_graphics_opengl_GL.context.clearStencil(s);
};
lime_graphics_opengl_GL.clientWaitSync = function(sync,flags,timeout) {
	return lime_graphics_opengl_GL.context.clientWaitSync(sync,flags,timeout);
};
lime_graphics_opengl_GL.colorMask = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl_GL.compileShader = function(shader) {
	lime_graphics_opengl_GL.context.compileShader(shader);
};
lime_graphics_opengl_GL.compressedTexImage2DWEBGL = function(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
};
lime_graphics_opengl_GL.compressedTexImage3DWEBGL = function(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.compressedTexImage3D(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.compressedTexSubImage2DWEBGL = function(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
};
lime_graphics_opengl_GL.compressedTexSubImage3DWEBGL = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.compressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime_graphics_opengl_GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl_GL.copyTexSubImage3D = function(target,level,xoffset,yoffset,zoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage3D(target,level,xoffset,yoffset,zoffset,x,y,width,height);
};
lime_graphics_opengl_GL.createBuffer = function() {
	return lime_graphics_opengl_GL.context.createBuffer();
};
lime_graphics_opengl_GL.createFramebuffer = function() {
	return lime_graphics_opengl_GL.context.createFramebuffer();
};
lime_graphics_opengl_GL.createProgram = function() {
	return lime_graphics_opengl_GL.context.createProgram();
};
lime_graphics_opengl_GL.createQuery = function() {
	return lime_graphics_opengl_GL.context.createQuery();
};
lime_graphics_opengl_GL.createRenderbuffer = function() {
	return lime_graphics_opengl_GL.context.createRenderbuffer();
};
lime_graphics_opengl_GL.createSampler = function() {
	return lime_graphics_opengl_GL.context.createSampler();
};
lime_graphics_opengl_GL.createShader = function(type) {
	return lime_graphics_opengl_GL.context.createShader(type);
};
lime_graphics_opengl_GL.createTexture = function() {
	return lime_graphics_opengl_GL.context.createTexture();
};
lime_graphics_opengl_GL.createTransformFeedback = function() {
	return lime_graphics_opengl_GL.context.createTransformFeedback();
};
lime_graphics_opengl_GL.createVertexArray = function() {
	return lime_graphics_opengl_GL.context.createVertexArray();
};
lime_graphics_opengl_GL.cullFace = function(mode) {
	lime_graphics_opengl_GL.context.cullFace(mode);
};
lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
	lime_graphics_opengl_GL.context.deleteBuffer(buffer);
};
lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
	lime_graphics_opengl_GL.context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.deleteProgram = function(program) {
	lime_graphics_opengl_GL.context.deleteProgram(program);
};
lime_graphics_opengl_GL.deleteQuery = function(query) {
	lime_graphics_opengl_GL.context.deleteQuery(query);
};
lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
	lime_graphics_opengl_GL.context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.deleteSampler = function(sampler) {
	lime_graphics_opengl_GL.context.deleteSampler(sampler);
};
lime_graphics_opengl_GL.deleteShader = function(shader) {
	lime_graphics_opengl_GL.context.deleteShader(shader);
};
lime_graphics_opengl_GL.deleteSync = function(sync) {
	lime_graphics_opengl_GL.context.deleteSync(sync);
};
lime_graphics_opengl_GL.deleteTexture = function(texture) {
	lime_graphics_opengl_GL.context.deleteTexture(texture);
};
lime_graphics_opengl_GL.deleteTransformFeedback = function(transformFeedback) {
	lime_graphics_opengl_GL.context.deleteTransformFeedback(transformFeedback);
};
lime_graphics_opengl_GL.deleteVertexArray = function(vertexArray) {
	lime_graphics_opengl_GL.context.deleteVertexArray(vertexArray);
};
lime_graphics_opengl_GL.depthFunc = function(func) {
	lime_graphics_opengl_GL.context.depthFunc(func);
};
lime_graphics_opengl_GL.depthMask = function(flag) {
	lime_graphics_opengl_GL.context.depthMask(flag);
};
lime_graphics_opengl_GL.depthRange = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.detachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.detachShader(program,shader);
};
lime_graphics_opengl_GL.disable = function(cap) {
	lime_graphics_opengl_GL.context.disable(cap);
};
lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
};
lime_graphics_opengl_GL.drawArrays = function(mode,first,count) {
	lime_graphics_opengl_GL.context.drawArrays(mode,first,count);
};
lime_graphics_opengl_GL.drawArraysInstanced = function(mode,first,count,instanceCount) {
	lime_graphics_opengl_GL.context.drawArraysInstanced(mode,first,count,instanceCount);
};
lime_graphics_opengl_GL.drawBuffers = function(buffers) {
	lime_graphics_opengl_GL.context.drawBuffers(buffers);
};
lime_graphics_opengl_GL.drawElements = function(mode,count,type,offset) {
	lime_graphics_opengl_GL.context.drawElements(mode,count,type,offset);
};
lime_graphics_opengl_GL.drawElementsInstanced = function(mode,count,type,offset,instanceCount) {
	lime_graphics_opengl_GL.context.drawElementsInstanced(mode,count,type,offset,instanceCount);
};
lime_graphics_opengl_GL.drawRangeElements = function(mode,start,end,count,type,offset) {
	lime_graphics_opengl_GL.context.drawRangeElements(mode,start,end,count,type,offset);
};
lime_graphics_opengl_GL.enable = function(cap) {
	lime_graphics_opengl_GL.context.enable(cap);
};
lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
};
lime_graphics_opengl_GL.endQuery = function(target) {
	lime_graphics_opengl_GL.context.endQuery(target);
};
lime_graphics_opengl_GL.endTransformFeedback = function() {
	lime_graphics_opengl_GL.context.endTransformFeedback();
};
lime_graphics_opengl_GL.fenceSync = function(condition,flags) {
	return lime_graphics_opengl_GL.context.fenceSync(condition,flags);
};
lime_graphics_opengl_GL.finish = function() {
	lime_graphics_opengl_GL.context.finish();
};
lime_graphics_opengl_GL.flush = function() {
	lime_graphics_opengl_GL.context.flush();
};
lime_graphics_opengl_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime_graphics_opengl_GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime_graphics_opengl_GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl_GL.framebufferTextureLayer = function(target,attachment,texture,level,layer) {
	lime_graphics_opengl_GL.context.framebufferTextureLayer(target,attachment,texture,level,layer);
};
lime_graphics_opengl_GL.frontFace = function(mode) {
	lime_graphics_opengl_GL.context.frontFace(mode);
};
lime_graphics_opengl_GL.generateMipmap = function(target) {
	lime_graphics_opengl_GL.context.generateMipmap(target);
};
lime_graphics_opengl_GL.getActiveAttrib = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveAttrib(program,index);
};
lime_graphics_opengl_GL.getActiveUniform = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveUniform(program,index);
};
lime_graphics_opengl_GL.getActiveUniformBlockName = function(program,uniformBlockIndex) {
	return lime_graphics_opengl_GL.context.getActiveUniformBlockName(program,uniformBlockIndex);
};
lime_graphics_opengl_GL.getActiveUniformBlockParameter = function(program,uniformBlockIndex,pname) {
	return lime_graphics_opengl_GL.context.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
};
lime_graphics_opengl_GL.getActiveUniforms = function(program,uniformIndices,pname) {
	return lime_graphics_opengl_GL.context.getActiveUniforms(program,uniformIndices,pname);
};
lime_graphics_opengl_GL.getAttachedShaders = function(program) {
	return lime_graphics_opengl_GL.context.getAttachedShaders(program);
};
lime_graphics_opengl_GL.getAttribLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getAttribLocation(program,name);
};
lime_graphics_opengl_GL.getBufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getBufferSubDataWEBGL = function(target,srcByteOffset,dstData,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.getBufferSubData(target,srcByteOffset,dstData,srcOffset,length);
	} else {
		this1.getBufferSubData(target,srcByteOffset,dstData);
	}
};
lime_graphics_opengl_GL.getContextAttributes = function() {
	return lime_graphics_opengl_GL.context.getContextAttributes();
};
lime_graphics_opengl_GL.getError = function() {
	return lime_graphics_opengl_GL.context.getError();
};
lime_graphics_opengl_GL.getExtension = function(name) {
	return lime_graphics_opengl_GL.context.getExtension(name);
};
lime_graphics_opengl_GL.getFragDataLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getFragDataLocation(program,name);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getIndexedParameter = function(target,index) {
	return lime_graphics_opengl_GL.context.getIndexedParameter(target,index);
};
lime_graphics_opengl_GL.getInternalformatParameter = function(target,internalformat,pname) {
	return lime_graphics_opengl_GL.context.getInternalformatParameter(target,internalformat,pname);
};
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.getParameter(pname);
};
lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
	return lime_graphics_opengl_GL.context.getProgramInfoLog(program);
};
lime_graphics_opengl_GL.getProgramParameter = function(program,pname) {
	return lime_graphics_opengl_GL.context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getQuery = function(target,pname) {
	return lime_graphics_opengl_GL.context.getQuery(target,pname);
};
lime_graphics_opengl_GL.getQueryParameter = function(query,pname) {
	return lime_graphics_opengl_GL.context.getQueryParameter(query,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getSamplerParameter = function(sampler,pname) {
	return lime_graphics_opengl_GL.context.getSamplerParameter(sampler,pname);
};
lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
};
lime_graphics_opengl_GL.getShaderParameter = function(shader,pname) {
	return lime_graphics_opengl_GL.context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime_graphics_opengl_GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl_GL.getShaderSource = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderSource(shader);
};
lime_graphics_opengl_GL.getSupportedExtensions = function() {
	return lime_graphics_opengl_GL.context.getSupportedExtensions();
};
lime_graphics_opengl_GL.getSyncParameter = function(sync,pname) {
	return lime_graphics_opengl_GL.context.getSyncParameter(sync,pname);
};
lime_graphics_opengl_GL.getTexParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getTransformFeedbackVarying = function(program,index) {
	return lime_graphics_opengl_GL.context.getTransformFeedbackVarying(program,index);
};
lime_graphics_opengl_GL.getUniform = function(program,location) {
	return lime_graphics_opengl_GL.context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformBlockIndex = function(program,uniformBlockName) {
	return lime_graphics_opengl_GL.context.getUniformBlockIndex(program,uniformBlockName);
};
lime_graphics_opengl_GL.getUniformIndices = function(program,uniformNames) {
	return lime_graphics_opengl_GL.context.getUniformIndices(program,uniformNames);
};
lime_graphics_opengl_GL.getUniformLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getUniformLocation(program,name);
};
lime_graphics_opengl_GL.getVertexAttrib = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttrib(index,pname);
};
lime_graphics_opengl_GL.getVertexAttribOffset = function(index,pname) {
	return lime_utils_DataPointer.fromFloat(lime_graphics_opengl_GL.context.getVertexAttribOffset(index,pname));
};
lime_graphics_opengl_GL.hint = function(target,mode) {
	lime_graphics_opengl_GL.context.hint(target,mode);
};
lime_graphics_opengl_GL.invalidateFramebuffer = function(target,attachments) {
	lime_graphics_opengl_GL.context.invalidateFramebuffer(target,attachments);
};
lime_graphics_opengl_GL.invalidateSubFramebuffer = function(target,attachments,x,y,width,height) {
	lime_graphics_opengl_GL.context.invalidateSubFramebuffer(target,attachments,x,y,width,height);
};
lime_graphics_opengl_GL.isBuffer = function(buffer) {
	return lime_graphics_opengl_GL.context.isBuffer(buffer);
};
lime_graphics_opengl_GL.isContextLost = function() {
	return lime_graphics_opengl_GL.context.isContextLost();
};
lime_graphics_opengl_GL.isEnabled = function(cap) {
	return lime_graphics_opengl_GL.context.isEnabled(cap);
};
lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
	return lime_graphics_opengl_GL.context.isFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.isProgram = function(program) {
	return lime_graphics_opengl_GL.context.isProgram(program);
};
lime_graphics_opengl_GL.isQuery = function(query) {
	return lime_graphics_opengl_GL.context.isQuery(query);
};
lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
	return lime_graphics_opengl_GL.context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.isSampler = function(sampler) {
	return lime_graphics_opengl_GL.context.isSampler(sampler);
};
lime_graphics_opengl_GL.isShader = function(shader) {
	return lime_graphics_opengl_GL.context.isShader(shader);
};
lime_graphics_opengl_GL.isSync = function(sync) {
	return lime_graphics_opengl_GL.context.isSync(sync);
};
lime_graphics_opengl_GL.isTexture = function(texture) {
	return lime_graphics_opengl_GL.context.isTexture(texture);
};
lime_graphics_opengl_GL.isTransformFeedback = function(transformFeedback) {
	return lime_graphics_opengl_GL.context.isTransformFeedback(transformFeedback);
};
lime_graphics_opengl_GL.isVertexArray = function(vertexArray) {
	return lime_graphics_opengl_GL.context.isVertexArray(vertexArray);
};
lime_graphics_opengl_GL.lineWidth = function(width) {
	lime_graphics_opengl_GL.context.lineWidth(width);
};
lime_graphics_opengl_GL.linkProgram = function(program) {
	lime_graphics_opengl_GL.context.linkProgram(program);
};
lime_graphics_opengl_GL.pauseTransformFeedback = function() {
	lime_graphics_opengl_GL.context.pauseTransformFeedback();
};
lime_graphics_opengl_GL.pixelStorei = function(pname,param) {
	lime_graphics_opengl_GL.context.pixelStorei(pname,param);
};
lime_graphics_opengl_GL.polygonOffset = function(factor,units) {
	lime_graphics_opengl_GL.context.polygonOffset(factor,units);
};
lime_graphics_opengl_GL.readBuffer = function(src) {
	lime_graphics_opengl_GL.context.readBuffer(src);
};
lime_graphics_opengl_GL.readPixelsWEBGL = function(x,y,width,height,format,type,pixels,dstOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(dstOffset != null) {
		this1.readPixels(x,y,width,height,format,type,pixels,dstOffset);
	} else {
		this1.readPixels(x,y,width,height,format,type,pixels);
	}
};
lime_graphics_opengl_GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl_GL.renderbufferStorageMultisample = function(target,samples,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorageMultisample(target,samples,internalformat,width,height);
};
lime_graphics_opengl_GL.resumeTransformFeedback = function() {
	lime_graphics_opengl_GL.context.resumeTransformFeedback();
};
lime_graphics_opengl_GL.sampleCoverage = function(value,invert) {
	lime_graphics_opengl_GL.context.sampleCoverage(value,invert);
};
lime_graphics_opengl_GL.samplerParameterf = function(sampler,pname,param) {
	lime_graphics_opengl_GL.context.samplerParameterf(sampler,pname,param);
};
lime_graphics_opengl_GL.samplerParameteri = function(sampler,pname,param) {
	lime_graphics_opengl_GL.context.samplerParameteri(sampler,pname,param);
};
lime_graphics_opengl_GL.scissor = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.scissor(x,y,width,height);
};
lime_graphics_opengl_GL.shaderSource = function(shader,source) {
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
};
lime_graphics_opengl_GL.stencilFunc = function(func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl_GL.stencilMask = function(mask) {
	lime_graphics_opengl_GL.context.stencilMask(mask);
};
lime_graphics_opengl_GL.stencilMaskSeparate = function(face,mask) {
	lime_graphics_opengl_GL.context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl_GL.stencilOp = function(fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl_GL.texImage2DWEBGL = function(target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics_opengl_GL.texImage3DWEBGL = function(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset) {
	lime_graphics_opengl_GL.context.texImage3D(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset);
};
lime_graphics_opengl_GL.texStorage2D = function(target,level,internalformat,width,height) {
	lime_graphics_opengl_GL.context.texStorage2D(target,level,internalformat,width,height);
};
lime_graphics_opengl_GL.texStorage3D = function(target,level,internalformat,width,height,depth) {
	lime_graphics_opengl_GL.context.texStorage3D(target,level,internalformat,width,height,depth);
};
lime_graphics_opengl_GL.texParameterf = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameterf(target,pname,param);
};
lime_graphics_opengl_GL.texParameteri = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameteri(target,pname,param);
};
lime_graphics_opengl_GL.texSubImage2DWEBGL = function(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
	} else if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics_opengl_GL.texSubImage3DWEBGL = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset) {
	lime_graphics_opengl_GL.context.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset);
};
lime_graphics_opengl_GL.transformFeedbackVaryings = function(program,varyings,bufferMode) {
	lime_graphics_opengl_GL.context.transformFeedbackVaryings(program,varyings,bufferMode);
};
lime_graphics_opengl_GL.uniform1f = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1f(location,v0);
};
lime_graphics_opengl_GL.uniform1fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform1fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform1i = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1i(location,v0);
};
lime_graphics_opengl_GL.uniform1ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform1iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform1ui = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1ui(location,v0);
};
lime_graphics_opengl_GL.uniform1uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform1uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform2f = function(location,v0,v1) {
	lime_graphics_opengl_GL.context.uniform2f(location,v0,v1);
};
lime_graphics_opengl_GL.uniform2fvWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_WebGL2RenderContext.uniform2fv(lime_graphics_opengl_GL.context,location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform2i = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2i(location,x,y);
};
lime_graphics_opengl_GL.uniform2ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform2iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform2ui = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2ui(location,x,y);
};
lime_graphics_opengl_GL.uniform2uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform2uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform3f = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3f(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform3fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform3i = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3i(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform3iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform3ui = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3ui(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform3uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform4f = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4f(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform4fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform4i = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4i(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform4iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform4ui = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4ui(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform4uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformBlockBinding = function(program,uniformBlockIndex,uniformBlockBinding) {
	lime_graphics_opengl_GL.context.uniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);
};
lime_graphics_opengl_GL.uniformMatrix2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix2fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix2x3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix2x3fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix2x4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix2x4fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix3fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix3x2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix3x2fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix3x4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix3x4fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix4fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix4x2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix4x2fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix4x3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix4x3fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.useProgram = function(program) {
	lime_graphics_opengl_GL.context.useProgram(program);
};
lime_graphics_opengl_GL.validateProgram = function(program) {
	lime_graphics_opengl_GL.context.validateProgram(program);
};
lime_graphics_opengl_GL.vertexAttrib1f = function(index,v0) {
	lime_graphics_opengl_GL.context.vertexAttrib1f(index,v0);
};
lime_graphics_opengl_GL.vertexAttrib1fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib1fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib2f = function(index,v0,v1) {
	lime_graphics_opengl_GL.context.vertexAttrib2f(index,v0,v1);
};
lime_graphics_opengl_GL.vertexAttrib2fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib2fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib3f = function(index,v0,v1,v2) {
	lime_graphics_opengl_GL.context.vertexAttrib3f(index,v0,v1,v2);
};
lime_graphics_opengl_GL.vertexAttrib3fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib3fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib4f = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttrib4f(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttrib4fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib4fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(index,v);
};
lime_graphics_opengl_GL.vertexAttribDivisor = function(index,divisor) {
	lime_graphics_opengl_GL.context.vertexAttribDivisor(index,divisor);
};
lime_graphics_opengl_GL.vertexAttribI4i = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttribI4i(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttribI4iv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4iv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4ivWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4iv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4ui = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttribI4ui(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttribI4uiv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4uiv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4uivWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4uiv(index,v);
};
lime_graphics_opengl_GL.vertexAttribIPointer = function(index,size,type,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribIPointer(index,size,type,stride,offset);
};
lime_graphics_opengl_GL.vertexAttribPointer = function(index,size,type,normalized,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribPointer(index,size,type,normalized,stride,offset);
};
lime_graphics_opengl_GL.viewport = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.viewport(x,y,width,height);
};
lime_graphics_opengl_GL.waitSync = function(sync,flags,timeout) {
	lime_graphics_opengl_GL.context.waitSync(sync,flags,timeout);
};
lime_graphics_opengl_GL.__getObjectID = function(object) {
	if(object == null) {
		return 0;
	} else {
		return object.id;
	}
};
var lime_graphics_opengl_GLProgram = {};
lime_graphics_opengl_GLProgram.fromSources = function(gl,vertexSource,fragmentSource) {
	var vertexShader = lime_graphics_opengl_GLShader.fromSource(gl,vertexSource,gl.VERTEX_SHADER);
	var fragmentShader = lime_graphics_opengl_GLShader.fromSource(gl,fragmentSource,gl.FRAGMENT_SHADER);
	var program = gl.createProgram();
	gl.attachShader(program,vertexShader);
	gl.attachShader(program,fragmentShader);
	gl.linkProgram(program);
	if(gl.getProgramParameter(program,35714) == 0) {
		var message = "Unable to initialize the shader program";
		message += "\n" + lime_graphics_opengl_GL.context.getProgramInfoLog(program);
		lime_utils_Log.error(message,{ fileName : "lime/graphics/opengl/GLProgram.hx", lineNumber : 39, className : "lime.graphics.opengl._GLProgram.GLProgram_Impl_", methodName : "fromSources"});
	}
	return program;
};
var lime_graphics_opengl_GLShader = {};
lime_graphics_opengl_GLShader.fromSource = function(gl,source,type) {
	var shader = gl.createShader(type);
	gl.shaderSource(shader,source);
	gl.compileShader(shader);
	if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
		var message;
		if(type == gl.VERTEX_SHADER) {
			message = "Error compiling vertex s